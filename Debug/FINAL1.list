
FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d094  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d0  0800d1a0  0800d1a0  0000e1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da70  0800da70  0000f1f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800da70  0800da70  0000f1f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da70  0800da70  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da70  0800da70  0000ea70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da74  0800da74  0000ea74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800da78  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001f8  0800dc6c  0000f1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800dc6c  0000f724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a647  00000000  00000000  0000f21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048c5  00000000  00000000  00029864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  0002e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001487  00000000  00000000  0002fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c735  00000000  00000000  0003104f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e55  00000000  00000000  0004d784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000948ad  00000000  00000000  0006e5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102e86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073cc  00000000  00000000  00102ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0010a298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d188 	.word	0x0800d188

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800d188 	.word	0x0800d188

0800014c <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	4618      	mov	r0, r3
 800015a:	f003 fd49 	bl	8003bf0 <HAL_Delay>
}
 800015e:	bf00      	nop
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b086      	sub	sp, #24
 800016a:	af02      	add	r7, sp, #8
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	460b      	mov	r3, r1
 8000170:	70fb      	strb	r3, [r7, #3]
 8000172:	4613      	mov	r3, r2
 8000174:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000176:	78fb      	ldrb	r3, [r7, #3]
 8000178:	f023 030f 	bic.w	r3, r3, #15
 800017c:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800017e:	78fb      	ldrb	r3, [r7, #3]
 8000180:	011b      	lsls	r3, r3, #4
 8000182:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	7adb      	ldrb	r3, [r3, #11]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d007      	beq.n	800019c <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	f043 0308 	orr.w	r3, r3, #8
 8000192:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000194:	7bbb      	ldrb	r3, [r7, #14]
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 800019c:	78bb      	ldrb	r3, [r7, #2]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d108      	bne.n	80001b4 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001aa:	7bbb      	ldrb	r3, [r7, #14]
 80001ac:	f043 0301 	orr.w	r3, r3, #1
 80001b0:	73bb      	strb	r3, [r7, #14]
 80001b2:	e00a      	b.n	80001ca <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001b4:	78bb      	ldrb	r3, [r7, #2]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d107      	bne.n	80001ca <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	f023 0301 	bic.w	r3, r3, #1
 80001c0:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001c2:	7bbb      	ldrb	r3, [r7, #14]
 80001c4:	f023 0301 	bic.w	r3, r3, #1
 80001c8:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f7ff ffb9 	bl	800014c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001de:	7bbb      	ldrb	r3, [r7, #14]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffaf 	bl	800014c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	4619      	mov	r1, r3
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2304      	movs	r3, #4
 8000208:	f004 fb3e 	bl	8004888 <HAL_I2C_Master_Transmit>
}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4613      	mov	r3, r2
 8000228:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	79fa      	ldrb	r2, [r7, #7]
 8000234:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	7e3a      	ldrb	r2, [r7, #24]
 8000240:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2228      	movs	r2, #40	@ 0x28
 8000246:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2206      	movs	r2, #6
 800024c:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	220c      	movs	r2, #12
 8000252:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2214      	movs	r2, #20
 8000258:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2208      	movs	r2, #8
 800025e:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000260:	2032      	movs	r0, #50	@ 0x32
 8000262:	f7ff ff73 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000266:	2200      	movs	r2, #0
 8000268:	2133      	movs	r1, #51	@ 0x33
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f7ff ff7b 	bl	8000166 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000270:	2200      	movs	r2, #0
 8000272:	2133      	movs	r1, #51	@ 0x33
 8000274:	68f8      	ldr	r0, [r7, #12]
 8000276:	f7ff ff76 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800027a:	2005      	movs	r0, #5
 800027c:	f7ff ff66 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000280:	2200      	movs	r2, #0
 8000282:	2132      	movs	r1, #50	@ 0x32
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f7ff ff6e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028a:	2005      	movs	r0, #5
 800028c:	f7ff ff5e 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f7ff ff66 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029a:	2005      	movs	r0, #5
 800029c:	f7ff ff56 	bl	800014c <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	79db      	ldrb	r3, [r3, #7]
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff5c 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	7a1b      	ldrb	r3, [r3, #8]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f7ff ff55 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	7a5b      	ldrb	r3, [r3, #9]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f7ff ff4e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	7a9b      	ldrb	r3, [r3, #10]
 80002ce:	2200      	movs	r2, #0
 80002d0:	4619      	mov	r1, r3
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f7ff ff47 	bl	8000166 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002d8:	2200      	movs	r2, #0
 80002da:	2101      	movs	r1, #1
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f7ff ff42 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff3d 	bl	8000166 <CLCD_WriteI2C>
}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
 8000300:	4613      	mov	r3, r2
 8000302:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000304:	2300      	movs	r3, #0
 8000306:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	78fa      	ldrb	r2, [r7, #3]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	3b01      	subs	r3, #1
 8000318:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	78ba      	ldrb	r2, [r7, #2]
 8000320:	429a      	cmp	r2, r3
 8000322:	d303      	bcc.n	800032c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	799b      	ldrb	r3, [r3, #6]
 8000328:	3b01      	subs	r3, #1
 800032a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800032c:	78bb      	ldrb	r3, [r7, #2]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d102      	bne.n	8000338 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	e013      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000338:	78bb      	ldrb	r3, [r7, #2]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d103      	bne.n	8000346 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	3340      	adds	r3, #64	@ 0x40
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e00c      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d103      	bne.n	8000354 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	3314      	adds	r3, #20
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e005      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000354:	78bb      	ldrb	r3, [r7, #2]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d102      	bne.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	3354      	adds	r3, #84	@ 0x54
 800035e:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2200      	movs	r2, #0
 800036a:	4619      	mov	r1, r3
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	f7ff fefa 	bl	8000166 <CLCD_WriteI2C>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	460b      	mov	r3, r1
 8000384:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8000386:	78fb      	ldrb	r3, [r7, #3]
 8000388:	2201      	movs	r2, #1
 800038a:	4619      	mov	r1, r3
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f7ff feea 	bl	8000166 <CLCD_WriteI2C>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	b082      	sub	sp, #8
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
 80003a2:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003a4:	e007      	b.n	80003b6 <CLCD_I2C_WriteString+0x1c>
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	1c5a      	adds	r2, r3, #1
 80003aa:	603a      	str	r2, [r7, #0]
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4619      	mov	r1, r3
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ffe2 	bl	800037a <CLCD_I2C_WriteChar>
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d1f3      	bne.n	80003a6 <CLCD_I2C_WriteString+0xc>
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2101      	movs	r1, #1
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff fec6 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003da:	2005      	movs	r0, #5
 80003dc:	f7ff feb6 	bl	800014c <CLCD_Delay>
}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 80003f4:	68f8      	ldr	r0, [r7, #12]
 80003f6:	f7ff ffe7 	bl	80003c8 <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	68f8      	ldr	r0, [r7, #12]
 8000400:	f7ff ff78 	bl	80002f4 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000404:	68b9      	ldr	r1, [r7, #8]
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f7ff ffc7 	bl	800039a <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 800040c:	2201      	movs	r2, #1
 800040e:	2100      	movs	r1, #0
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f7ff ff6f 	bl	80002f4 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 8000416:	6879      	ldr	r1, [r7, #4]
 8000418:	68f8      	ldr	r0, [r7, #12]
 800041a:	f7ff ffbe 	bl	800039a <CLCD_I2C_WriteString>
}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 800042e:	4b2a      	ldr	r3, [pc, #168]	@ (80004d8 <KeyPad_Init+0xb0>)
 8000430:	2204      	movs	r2, #4
 8000432:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000434:	4b28      	ldr	r3, [pc, #160]	@ (80004d8 <KeyPad_Init+0xb0>)
 8000436:	2204      	movs	r2, #4
 8000438:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800043a:	2300      	movs	r3, #0
 800043c:	75fb      	strb	r3, [r7, #23]
 800043e:	e022      	b.n	8000486 <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	2301      	movs	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2302      	movs	r3, #2
 800044a:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 800044c:	7dfb      	ldrb	r3, [r7, #23]
 800044e:	4a23      	ldr	r2, [pc, #140]	@ (80004dc <KeyPad_Init+0xb4>)
 8000450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000454:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 8000456:	7dfb      	ldrb	r3, [r7, #23]
 8000458:	4a21      	ldr	r2, [pc, #132]	@ (80004e0 <KeyPad_Init+0xb8>)
 800045a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045e:	1d3a      	adds	r2, r7, #4
 8000460:	4611      	mov	r1, r2
 8000462:	4618      	mov	r0, r3
 8000464:	f003 fef6 	bl	8004254 <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000468:	7dfb      	ldrb	r3, [r7, #23]
 800046a:	4a1d      	ldr	r2, [pc, #116]	@ (80004e0 <KeyPad_Init+0xb8>)
 800046c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000470:	7dfb      	ldrb	r3, [r7, #23]
 8000472:	4a1a      	ldr	r2, [pc, #104]	@ (80004dc <KeyPad_Init+0xb4>)
 8000474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000478:	2201      	movs	r2, #1
 800047a:	4619      	mov	r1, r3
 800047c:	f004 f885 	bl	800458a <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000480:	7dfb      	ldrb	r3, [r7, #23]
 8000482:	3301      	adds	r3, #1
 8000484:	75fb      	strb	r3, [r7, #23]
 8000486:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <KeyPad_Init+0xb0>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	7dfa      	ldrb	r2, [r7, #23]
 800048c:	429a      	cmp	r2, r3
 800048e:	d3d7      	bcc.n	8000440 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 8000490:	2300      	movs	r3, #0
 8000492:	75bb      	strb	r3, [r7, #22]
 8000494:	e016      	b.n	80004c4 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 800049a:	2301      	movs	r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2302      	movs	r3, #2
 80004a0:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004a2:	7dbb      	ldrb	r3, [r7, #22]
 80004a4:	4a0f      	ldr	r2, [pc, #60]	@ (80004e4 <KeyPad_Init+0xbc>)
 80004a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004aa:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004ac:	7dbb      	ldrb	r3, [r7, #22]
 80004ae:	4a0e      	ldr	r2, [pc, #56]	@ (80004e8 <KeyPad_Init+0xc0>)
 80004b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b4:	1d3a      	adds	r2, r7, #4
 80004b6:	4611      	mov	r1, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f003 fecb 	bl	8004254 <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004be:	7dbb      	ldrb	r3, [r7, #22]
 80004c0:	3301      	adds	r3, #1
 80004c2:	75bb      	strb	r3, [r7, #22]
 80004c4:	4b04      	ldr	r3, [pc, #16]	@ (80004d8 <KeyPad_Init+0xb0>)
 80004c6:	785b      	ldrb	r3, [r3, #1]
 80004c8:	7dba      	ldrb	r2, [r7, #22]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d3e3      	bcc.n	8000496 <KeyPad_Init+0x6e>
  }
}
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000214 	.word	0x20000214
 80004dc:	0800da14 	.word	0x0800da14
 80004e0:	20000000 	.word	0x20000000
 80004e4:	0800da1c 	.word	0x0800da1c
 80004e8:	20000010 	.word	0x20000010

080004ec <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	71fb      	strb	r3, [r7, #7]
 80004fa:	e07e      	b.n	80005fa <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 80004fc:	2300      	movs	r3, #0
 80004fe:	71bb      	strb	r3, [r7, #6]
 8000500:	e00e      	b.n	8000520 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	4a42      	ldr	r2, [pc, #264]	@ (8000610 <KeyPad_Scan+0x124>)
 8000506:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	4a41      	ldr	r2, [pc, #260]	@ (8000614 <KeyPad_Scan+0x128>)
 800050e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000512:	2201      	movs	r2, #1
 8000514:	4619      	mov	r1, r3
 8000516:	f004 f838 	bl	800458a <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	3301      	adds	r3, #1
 800051e:	71bb      	strb	r3, [r7, #6]
 8000520:	4b3d      	ldr	r3, [pc, #244]	@ (8000618 <KeyPad_Scan+0x12c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	79ba      	ldrb	r2, [r7, #6]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3eb      	bcc.n	8000502 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	4a38      	ldr	r2, [pc, #224]	@ (8000610 <KeyPad_Scan+0x124>)
 800052e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4a37      	ldr	r2, [pc, #220]	@ (8000614 <KeyPad_Scan+0x128>)
 8000536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800053a:	2200      	movs	r2, #0
 800053c:	4619      	mov	r1, r3
 800053e:	f004 f824 	bl	800458a <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000542:	2005      	movs	r0, #5
 8000544:	f003 fb54 	bl	8003bf0 <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 8000548:	2300      	movs	r3, #0
 800054a:	717b      	strb	r3, [r7, #5]
 800054c:	e04d      	b.n	80005ea <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 800054e:	797b      	ldrb	r3, [r7, #5]
 8000550:	4a32      	ldr	r2, [pc, #200]	@ (800061c <KeyPad_Scan+0x130>)
 8000552:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000556:	797b      	ldrb	r3, [r7, #5]
 8000558:	4931      	ldr	r1, [pc, #196]	@ (8000620 <KeyPad_Scan+0x134>)
 800055a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800055e:	4619      	mov	r1, r3
 8000560:	4610      	mov	r0, r2
 8000562:	f003 fffb 	bl	800455c <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d13b      	bne.n	80005e4 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800056c:	2014      	movs	r0, #20
 800056e:	f003 fb3f 	bl	8003bf0 <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	4a29      	ldr	r2, [pc, #164]	@ (800061c <KeyPad_Scan+0x130>)
 8000576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800057a:	797b      	ldrb	r3, [r7, #5]
 800057c:	4928      	ldr	r1, [pc, #160]	@ (8000620 <KeyPad_Scan+0x134>)
 800057e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000582:	4619      	mov	r1, r3
 8000584:	4610      	mov	r0, r2
 8000586:	f003 ffe9 	bl	800455c <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d129      	bne.n	80005e4 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2201      	movs	r2, #1
 8000594:	fa02 f303 	lsl.w	r3, r2, r3
 8000598:	b21a      	sxth	r2, r3
 800059a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800059e:	4313      	orrs	r3, r2
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	3308      	adds	r3, #8
 80005a8:	2201      	movs	r2, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b21b      	sxth	r3, r3
 80005b8:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005ba:	e002      	b.n	80005c2 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005bc:	2005      	movs	r0, #5
 80005be:	f003 fb17 	bl	8003bf0 <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005c2:	797b      	ldrb	r3, [r7, #5]
 80005c4:	4a15      	ldr	r2, [pc, #84]	@ (800061c <KeyPad_Scan+0x130>)
 80005c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ca:	797b      	ldrb	r3, [r7, #5]
 80005cc:	4914      	ldr	r1, [pc, #80]	@ (8000620 <KeyPad_Scan+0x134>)
 80005ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4610      	mov	r0, r2
 80005d6:	f003 ffc1 	bl	800455c <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0ed      	beq.n	80005bc <KeyPad_Scan+0xd0>
          return key;
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	e011      	b.n	8000608 <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	3301      	adds	r3, #1
 80005e8:	717b      	strb	r3, [r7, #5]
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <KeyPad_Scan+0x12c>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	797a      	ldrb	r2, [r7, #5]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d3ac      	bcc.n	800054e <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	3301      	adds	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <KeyPad_Scan+0x12c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	79fa      	ldrb	r2, [r7, #7]
 8000600:	429a      	cmp	r2, r3
 8000602:	f4ff af7b 	bcc.w	80004fc <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 8000606:	887b      	ldrh	r3, [r7, #2]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	0800da14 	.word	0x0800da14
 8000618:	20000214 	.word	0x20000214
 800061c:	20000010 	.word	0x20000010
 8000620:	0800da1c 	.word	0x0800da1c

08000624 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 800062c:	e00e      	b.n	800064c <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 800062e:	f7ff ff5d 	bl	80004ec <KeyPad_Scan>
 8000632:	4603      	mov	r3, r0
 8000634:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000636:	897b      	ldrh	r3, [r7, #10]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d004      	beq.n	8000646 <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 800063c:	4a16      	ldr	r2, [pc, #88]	@ (8000698 <KeyPad_WaitForKey+0x74>)
 800063e:	897b      	ldrh	r3, [r7, #10]
 8000640:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000642:	897b      	ldrh	r3, [r7, #10]
 8000644:	e024      	b.n	8000690 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000646:	2014      	movs	r0, #20
 8000648:	f003 fad2 	bl	8003bf0 <HAL_Delay>
  while(Timeout_ms==0)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0ed      	beq.n	800062e <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000652:	f003 fac3 	bl	8003bdc <HAL_GetTick>
 8000656:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000658:	e00e      	b.n	8000678 <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800065a:	f7ff ff47 	bl	80004ec <KeyPad_Scan>
 800065e:	4603      	mov	r3, r0
 8000660:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000662:	897b      	ldrh	r3, [r7, #10]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d004      	beq.n	8000672 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 8000668:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <KeyPad_WaitForKey+0x74>)
 800066a:	897b      	ldrh	r3, [r7, #10]
 800066c:	8053      	strh	r3, [r2, #2]
			return keyRead;
 800066e:	897b      	ldrh	r3, [r7, #10]
 8000670:	e00e      	b.n	8000690 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000672:	2014      	movs	r0, #20
 8000674:	f003 fabc 	bl	8003bf0 <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000678:	f003 fab0 	bl	8003bdc <HAL_GetTick>
 800067c:	4602      	mov	r2, r0
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	d8e8      	bhi.n	800065a <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 8000688:	4b03      	ldr	r3, [pc, #12]	@ (8000698 <KeyPad_WaitForKey+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	805a      	strh	r2, [r3, #2]
	return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000214 	.word	0x20000214

0800069c <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffbd 	bl	8000624 <KeyPad_WaitForKey>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f640 0208 	movw	r2, #2056	@ 0x808
 80006b0:	4293      	cmp	r3, r2
 80006b2:	f300 809f 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ba:	dc1a      	bgt.n	80006f2 <KeyPad_WaitForKeyGetChar+0x56>
 80006bc:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006c0:	f300 8098 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006c8:	dc2a      	bgt.n	8000720 <KeyPad_WaitForKeyGetChar+0x84>
 80006ca:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006ce:	f300 8091 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006d6:	dc3b      	bgt.n	8000750 <KeyPad_WaitForKeyGetChar+0xb4>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d069      	beq.n	80007b0 <KeyPad_WaitForKeyGetChar+0x114>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	f2c0 8089 	blt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006e2:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80006e6:	f300 8085 	bgt.w	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006ee:	dc47      	bgt.n	8000780 <KeyPad_WaitForKeyGetChar+0xe4>
 80006f0:	e080      	b.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006f2:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	d87c      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 80006fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <KeyPad_WaitForKeyGetChar+0x64>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	080007c1 	.word	0x080007c1
 8000704:	080007d1 	.word	0x080007d1
 8000708:	080007f5 	.word	0x080007f5
 800070c:	080007e1 	.word	0x080007e1
 8000710:	080007f5 	.word	0x080007f5
 8000714:	080007f5 	.word	0x080007f5
 8000718:	080007f5 	.word	0x080007f5
 800071c:	080007f1 	.word	0x080007f1
 8000720:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000724:	2b07      	cmp	r3, #7
 8000726:	d865      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 8000728:	a201      	add	r2, pc, #4	@ (adr r2, 8000730 <KeyPad_WaitForKeyGetChar+0x94>)
 800072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072e:	bf00      	nop
 8000730:	080007bd 	.word	0x080007bd
 8000734:	080007cd 	.word	0x080007cd
 8000738:	080007f5 	.word	0x080007f5
 800073c:	080007dd 	.word	0x080007dd
 8000740:	080007f5 	.word	0x080007f5
 8000744:	080007f5 	.word	0x080007f5
 8000748:	080007f5 	.word	0x080007f5
 800074c:	080007ed 	.word	0x080007ed
 8000750:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000754:	2b07      	cmp	r3, #7
 8000756:	d84d      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 8000758:	a201      	add	r2, pc, #4	@ (adr r2, 8000760 <KeyPad_WaitForKeyGetChar+0xc4>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	080007b9 	.word	0x080007b9
 8000764:	080007c9 	.word	0x080007c9
 8000768:	080007f5 	.word	0x080007f5
 800076c:	080007d9 	.word	0x080007d9
 8000770:	080007f5 	.word	0x080007f5
 8000774:	080007f5 	.word	0x080007f5
 8000778:	080007f5 	.word	0x080007f5
 800077c:	080007e9 	.word	0x080007e9
 8000780:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000784:	2b07      	cmp	r3, #7
 8000786:	d835      	bhi.n	80007f4 <KeyPad_WaitForKeyGetChar+0x158>
 8000788:	a201      	add	r2, pc, #4	@ (adr r2, 8000790 <KeyPad_WaitForKeyGetChar+0xf4>)
 800078a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078e:	bf00      	nop
 8000790:	080007b5 	.word	0x080007b5
 8000794:	080007c5 	.word	0x080007c5
 8000798:	080007f5 	.word	0x080007f5
 800079c:	080007d5 	.word	0x080007d5
 80007a0:	080007f5 	.word	0x080007f5
 80007a4:	080007f5 	.word	0x080007f5
 80007a8:	080007f5 	.word	0x080007f5
 80007ac:	080007e5 	.word	0x080007e5
  {
    case 0x0000:
      return 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	e020      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007b4:	2331      	movs	r3, #49	@ 0x31
 80007b6:	e01e      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007b8:	2332      	movs	r3, #50	@ 0x32
 80007ba:	e01c      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007bc:	2333      	movs	r3, #51	@ 0x33
 80007be:	e01a      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007c0:	2341      	movs	r3, #65	@ 0x41
 80007c2:	e018      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007c4:	2334      	movs	r3, #52	@ 0x34
 80007c6:	e016      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007c8:	2335      	movs	r3, #53	@ 0x35
 80007ca:	e014      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007cc:	2336      	movs	r3, #54	@ 0x36
 80007ce:	e012      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007d0:	2342      	movs	r3, #66	@ 0x42
 80007d2:	e010      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007d4:	2337      	movs	r3, #55	@ 0x37
 80007d6:	e00e      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007d8:	2338      	movs	r3, #56	@ 0x38
 80007da:	e00c      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 80007dc:	2339      	movs	r3, #57	@ 0x39
 80007de:	e00a      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 80007e0:	2343      	movs	r3, #67	@ 0x43
 80007e2:	e008      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 80007e4:	232a      	movs	r3, #42	@ 0x2a
 80007e6:	e006      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 80007e8:	2330      	movs	r3, #48	@ 0x30
 80007ea:	e004      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 80007ec:	2323      	movs	r3, #35	@ 0x23
 80007ee:	e002      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 80007f0:	2344      	movs	r3, #68	@ 0x44
 80007f2:	e000      	b.n	80007f6 <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 80007f4:	2300      	movs	r3, #0
	}
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop

08000800 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800080a:	1df9      	adds	r1, r7, #7
 800080c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000810:	2201      	movs	r2, #1
 8000812:	4803      	ldr	r0, [pc, #12]	@ (8000820 <USART_SendByte+0x20>)
 8000814:	f007 faaf 	bl	8007d76 <HAL_UART_Transmit>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000310 	.word	0x20000310

08000824 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 800082e:	bf00      	nop
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	b29a      	uxth	r2, r3
 8000834:	f107 0108 	add.w	r1, r7, #8
 8000838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083c:	4808      	ldr	r0, [pc, #32]	@ (8000860 <receive_finger+0x3c>)
 800083e:	f007 fb2c 	bl	8007e9a <HAL_UART_Receive>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0f3      	beq.n	8000830 <receive_finger+0xc>
	//HAL_UART_Receive(&huart1,D,len,500);
	p=D[len-3];
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	3b03      	subs	r3, #3
 800084c:	3318      	adds	r3, #24
 800084e:	443b      	add	r3, r7
 8000850:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000854:	75fb      	strb	r3, [r7, #23]
	return p;
 8000856:	7dfb      	ldrb	r3, [r7, #23]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000310 	.word	0x20000310

08000864 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
//	while((HAL_UART_Receive(&huart1,D,len,500))==HAL_OK);
	HAL_UART_Receive(&huart1,D,len,1000);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	b29a      	uxth	r2, r3
 8000872:	f107 0108 	add.w	r1, r7, #8
 8000876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087a:	4807      	ldr	r0, [pc, #28]	@ (8000898 <receive_finger_match+0x34>)
 800087c:	f007 fb0d 	bl	8007e9a <HAL_UART_Receive>
	p=D[len-5];
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3b05      	subs	r3, #5
 8000884:	3318      	adds	r3, #24
 8000886:	443b      	add	r3, r7
 8000888:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800088c:	75fb      	strb	r3, [r7, #23]
	return p;
 800088e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000310 	.word	0x20000310

0800089c <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
//	while((HAL_UART_Receive(&huart1,D,len,500))==HAL_OK);
	HAL_UART_Receive(&huart1,D,len,200);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	f107 010c 	add.w	r1, r7, #12
 80008ae:	23c8      	movs	r3, #200	@ 0xc8
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <receive_finger_search+0x38>)
 80008b2:	f007 faf2 	bl	8007e9a <HAL_UART_Receive>
	p=D[len-7];
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	3b07      	subs	r3, #7
 80008ba:	3320      	adds	r3, #32
 80008bc:	443b      	add	r3, r7
 80008be:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008c2:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008c4:	7dfa      	ldrb	r2, [r7, #23]
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <receive_finger_search+0x3c>)
 80008c8:	701a      	strb	r2, [r3, #0]

	return p;
 80008ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000310 	.word	0x20000310
 80008d8:	20000218 	.word	0x20000218

080008dc <collect_finger>:
int collect_finger(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 80008e0:	20ef      	movs	r0, #239	@ 0xef
 80008e2:	f7ff ff8d 	bl	8000800 <USART_SendByte>
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff ff8a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80008ec:	20ff      	movs	r0, #255	@ 0xff
 80008ee:	f7ff ff87 	bl	8000800 <USART_SendByte>
 80008f2:	20ff      	movs	r0, #255	@ 0xff
 80008f4:	f7ff ff84 	bl	8000800 <USART_SendByte>
 80008f8:	20ff      	movs	r0, #255	@ 0xff
 80008fa:	f7ff ff81 	bl	8000800 <USART_SendByte>
 80008fe:	20ff      	movs	r0, #255	@ 0xff
 8000900:	f7ff ff7e 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff ff7b 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff ff78 	bl	8000800 <USART_SendByte>
 8000910:	2003      	movs	r0, #3
 8000912:	f7ff ff75 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000916:	2001      	movs	r0, #1
 8000918:	f7ff ff72 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff ff6f 	bl	8000800 <USART_SendByte>
 8000922:	2005      	movs	r0, #5
 8000924:	f7ff ff6c 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 8000928:	200c      	movs	r0, #12
 800092a:	f7ff ff7b 	bl	8000824 <receive_finger>
 800092e:	4603      	mov	r3, r0
}
 8000930:	4618      	mov	r0, r3
 8000932:	bd80      	pop	{r7, pc}

08000934 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	3307      	adds	r3, #7
 8000946:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000948:	20ef      	movs	r0, #239	@ 0xef
 800094a:	f7ff ff59 	bl	8000800 <USART_SendByte>
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ff56 	bl	8000800 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000954:	20ff      	movs	r0, #255	@ 0xff
 8000956:	f7ff ff53 	bl	8000800 <USART_SendByte>
 800095a:	20ff      	movs	r0, #255	@ 0xff
 800095c:	f7ff ff50 	bl	8000800 <USART_SendByte>
 8000960:	20ff      	movs	r0, #255	@ 0xff
 8000962:	f7ff ff4d 	bl	8000800 <USART_SendByte>
 8000966:	20ff      	movs	r0, #255	@ 0xff
 8000968:	f7ff ff4a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff ff47 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff ff44 	bl	8000800 <USART_SendByte>
 8000978:	2004      	movs	r0, #4
 800097a:	f7ff ff41 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x02);
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff ff3e 	bl	8000800 <USART_SendByte>
   USART_SendByte(local);
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff3a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff ff37 	bl	8000800 <USART_SendByte>
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff32 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 800099c:	200c      	movs	r0, #12
 800099e:	f7ff ff41 	bl	8000824 <receive_finger>
 80009a2:	4603      	mov	r3, r0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009b0:	20ef      	movs	r0, #239	@ 0xef
 80009b2:	f7ff ff25 	bl	8000800 <USART_SendByte>
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff ff22 	bl	8000800 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009bc:	20ff      	movs	r0, #255	@ 0xff
 80009be:	f7ff ff1f 	bl	8000800 <USART_SendByte>
 80009c2:	20ff      	movs	r0, #255	@ 0xff
 80009c4:	f7ff ff1c 	bl	8000800 <USART_SendByte>
 80009c8:	20ff      	movs	r0, #255	@ 0xff
 80009ca:	f7ff ff19 	bl	8000800 <USART_SendByte>
 80009ce:	20ff      	movs	r0, #255	@ 0xff
 80009d0:	f7ff ff16 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ff13 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff ff10 	bl	8000800 <USART_SendByte>
 80009e0:	2003      	movs	r0, #3
 80009e2:	f7ff ff0d 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x03);
 80009e6:	2003      	movs	r0, #3
 80009e8:	f7ff ff0a 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff ff07 	bl	8000800 <USART_SendByte>
 80009f2:	2007      	movs	r0, #7
 80009f4:	f7ff ff04 	bl	8000800 <USART_SendByte>
   return receive_finger_match(14);
 80009f8:	200e      	movs	r0, #14
 80009fa:	f7ff ff33 	bl	8000864 <receive_finger_match>
 80009fe:	4603      	mov	r3, r0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a08:	20ef      	movs	r0, #239	@ 0xef
 8000a0a:	f7ff fef9 	bl	8000800 <USART_SendByte>
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fef6 	bl	8000800 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a14:	20ff      	movs	r0, #255	@ 0xff
 8000a16:	f7ff fef3 	bl	8000800 <USART_SendByte>
 8000a1a:	20ff      	movs	r0, #255	@ 0xff
 8000a1c:	f7ff fef0 	bl	8000800 <USART_SendByte>
 8000a20:	20ff      	movs	r0, #255	@ 0xff
 8000a22:	f7ff feed 	bl	8000800 <USART_SendByte>
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	f7ff feea 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f7ff fee7 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fee4 	bl	8000800 <USART_SendByte>
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f7ff fee1 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x05);
 8000a3e:	2005      	movs	r0, #5
 8000a40:	f7ff fede 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fedb 	bl	8000800 <USART_SendByte>
 8000a4a:	2009      	movs	r0, #9
 8000a4c:	f7ff fed8 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 8000a50:	200c      	movs	r0, #12
 8000a52:	f7ff fee7 	bl	8000824 <receive_finger>
 8000a56:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	330e      	adds	r3, #14
 8000a6a:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a6c:	20ef      	movs	r0, #239	@ 0xef
 8000a6e:	f7ff fec7 	bl	8000800 <USART_SendByte>
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fec4 	bl	8000800 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a78:	20ff      	movs	r0, #255	@ 0xff
 8000a7a:	f7ff fec1 	bl	8000800 <USART_SendByte>
 8000a7e:	20ff      	movs	r0, #255	@ 0xff
 8000a80:	f7ff febe 	bl	8000800 <USART_SendByte>
 8000a84:	20ff      	movs	r0, #255	@ 0xff
 8000a86:	f7ff febb 	bl	8000800 <USART_SendByte>
 8000a8a:	20ff      	movs	r0, #255	@ 0xff
 8000a8c:	f7ff feb8 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff feb5 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff feb2 	bl	8000800 <USART_SendByte>
 8000a9c:	2006      	movs	r0, #6
 8000a9e:	f7ff feaf 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x06);
 8000aa2:	2006      	movs	r0, #6
 8000aa4:	f7ff feac 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff fea9 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fea6 	bl	8000800 <USART_SendByte>
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fea2 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fe9f 	bl	8000800 <USART_SendByte>
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fe9b 	bl	8000800 <USART_SendByte>
   return receive_finger(12);
 8000aca:	200c      	movs	r0, #12
 8000acc:	f7ff feaa 	bl	8000824 <receive_finger>
 8000ad0:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000ade:	20ef      	movs	r0, #239	@ 0xef
 8000ae0:	f7ff fe8e 	bl	8000800 <USART_SendByte>
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fe8b 	bl	8000800 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000aea:	20ff      	movs	r0, #255	@ 0xff
 8000aec:	f7ff fe88 	bl	8000800 <USART_SendByte>
 8000af0:	20ff      	movs	r0, #255	@ 0xff
 8000af2:	f7ff fe85 	bl	8000800 <USART_SendByte>
 8000af6:	20ff      	movs	r0, #255	@ 0xff
 8000af8:	f7ff fe82 	bl	8000800 <USART_SendByte>
 8000afc:	20ff      	movs	r0, #255	@ 0xff
 8000afe:	f7ff fe7f 	bl	8000800 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff fe7c 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fe79 	bl	8000800 <USART_SendByte>
 8000b0e:	2008      	movs	r0, #8
 8000b10:	f7ff fe76 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x04);
 8000b14:	2004      	movs	r0, #4
 8000b16:	f7ff fe73 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x01);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fe70 	bl	8000800 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fe6d 	bl	8000800 <USART_SendByte>
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe6a 	bl	8000800 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff fe67 	bl	8000800 <USART_SendByte>
 8000b32:	20ff      	movs	r0, #255	@ 0xff
 8000b34:	f7ff fe64 	bl	8000800 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff fe61 	bl	8000800 <USART_SendByte>
 8000b3e:	200d      	movs	r0, #13
 8000b40:	f7ff fe5e 	bl	8000800 <USART_SendByte>
   return receive_finger_search(16);
 8000b44:	2010      	movs	r0, #16
 8000b46:	f7ff fea9 	bl	800089c <receive_finger_search>
 8000b4a:	4603      	mov	r3, r0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <Flash_Erase>:
 */


#include <flash.h>

void Flash_Erase(uint32_t address){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000b58:	f003 f9ec 	bl	8003f34 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000b6c:	f107 020c 	add.w	r2, r7, #12
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 fac4 	bl	8004104 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000b7c:	f003 fa00 	bl	8003f80 <HAL_FLASH_Lock>
}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000b94:	f003 f9ce 	bl	8003f34 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	461c      	mov	r4, r3
 8000b9e:	4615      	mov	r5, r2
 8000ba0:	4622      	mov	r2, r4
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f003 f954 	bl	8003e54 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000bac:	f003 f9e8 	bl	8003f80 <HAL_FLASH_Lock>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bdb0      	pop	{r4, r5, r7, pc}

08000bb8 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000bc6:	f003 f9b5 	bl	8003f34 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000bca:	2300      	movs	r3, #0
 8000bcc:	82fb      	strh	r3, [r7, #22]
 8000bce:	e00c      	b.n	8000bea <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000bd0:	8afa      	ldrh	r2, [r7, #22]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	18d0      	adds	r0, r2, r3
 8000bd6:	8afb      	ldrh	r3, [r7, #22]
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	4413      	add	r3, r2
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	4619      	mov	r1, r3
 8000be0:	f7ff ffd2 	bl	8000b88 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000be4:	8afb      	ldrh	r3, [r7, #22]
 8000be6:	3302      	adds	r3, #2
 8000be8:	82fb      	strh	r3, [r7, #22]
 8000bea:	8afa      	ldrh	r2, [r7, #22]
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3ee      	bcc.n	8000bd0 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000bf2:	f003 f9c5 	bl	8003f80 <HAL_FLASH_Lock>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	4619      	mov	r1, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	4613      	mov	r3, r2
 8000c54:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	82fb      	strh	r3, [r7, #22]
 8000c5a:	e00c      	b.n	8000c76 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000c5c:	8afa      	ldrh	r2, [r7, #22]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	8afb      	ldrh	r3, [r7, #22]
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4413      	add	r3, r2
 8000c6a:	780a      	ldrb	r2, [r1, #0]
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000c70:	8afb      	ldrh	r3, [r7, #22]
 8000c72:	3301      	adds	r3, #1
 8000c74:	82fb      	strh	r3, [r7, #22]
 8000c76:	8afa      	ldrh	r2, [r7, #22]
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d3ee      	bcc.n	8000c5c <Flash_Read_Array+0x14>
	}
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
	...

08000c8c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ca6:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000ca8:	e002      	b.n	8000cb0 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000020 	.word	0x20000020

08000cc0 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000cc6:	f7ff fe09 	bl	80008dc <collect_finger>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <check_fingerprint_status+0x24>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
    }
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000409 	.word	0x20000409

08000ce8 <process_fingerprint>:
void process_fingerprint()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <process_fingerprint+0x1c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <process_fingerprint+0x1c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000cfa:	f002 f8db 	bl	8002eb4 <read_finger>
    }
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000409 	.word	0x20000409

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0e:	f002 ff0d 	bl	8003b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d12:	f000 f8e1 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d16:	f000 fa17 	bl	8001148 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d1a:	f000 f967 	bl	8000fec <MX_SPI1_Init>
  MX_I2C2_Init();
 8000d1e:	f000 f937 	bl	8000f90 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000d22:	f000 f9e7 	bl	80010f4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d26:	f000 f997 	bl	8001058 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000d2a:	f00b f8d3 	bl	800bed4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000d2e:	f002 faa3 	bl	8003278 <TM_MFRC522_Init>
  KeyPad_Init();
 8000d32:	f7ff fb79 	bl	8000428 <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000d36:	2302      	movs	r3, #2
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2310      	movs	r3, #16
 8000d3c:	224e      	movs	r2, #78	@ 0x4e
 8000d3e:	495b      	ldr	r1, [pc, #364]	@ (8000eac <main+0x1a4>)
 8000d40:	485b      	ldr	r0, [pc, #364]	@ (8000eb0 <main+0x1a8>)
 8000d42:	f7ff fa67 	bl	8000214 <CLCD_I2C_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim2);
 8000d46:	485b      	ldr	r0, [pc, #364]	@ (8000eb4 <main+0x1ac>)
 8000d48:	f006 fc1e 	bl	8007588 <HAL_TIM_Base_Start_IT>
	if (checkcountUID() == 0)
 8000d4c:	f001 fd88 	bl	8002860 <checkcountUID>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <main+0x52>
	{
		startadd();
 8000d56:	f001 ff0f 	bl	8002b78 <startadd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CLCD_I2C_Clear(&LCD1);
 8000d5a:	4855      	ldr	r0, [pc, #340]	@ (8000eb0 <main+0x1a8>)
 8000d5c:	f7ff fb34 	bl	80003c8 <CLCD_I2C_Clear>
      CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	4852      	ldr	r0, [pc, #328]	@ (8000eb0 <main+0x1a8>)
 8000d66:	f7ff fac5 	bl	80002f4 <CLCD_I2C_SetCursor>
      CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 8000d6a:	4953      	ldr	r1, [pc, #332]	@ (8000eb8 <main+0x1b0>)
 8000d6c:	4850      	ldr	r0, [pc, #320]	@ (8000eb0 <main+0x1a8>)
 8000d6e:	f7ff fb14 	bl	800039a <CLCD_I2C_WriteString>

      char selected_key = KeyPad_WaitForKeyGetChar(10); // Ch�? vô hạn cho đến khi có phím nhấn.
 8000d72:	200a      	movs	r0, #10
 8000d74:	f7ff fc92 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	71bb      	strb	r3, [r7, #6]

      if (selected_key != 0)
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d057      	beq.n	8000e32 <main+0x12a>
      {
          uint8_t key = 0; // Key quản lý quy�?n truy cập.
 8000d82:	2300      	movs	r3, #0
 8000d84:	71fb      	strb	r3, [r7, #7]
          exitmenu = 15;
 8000d86:	4b4d      	ldr	r3, [pc, #308]	@ (8000ebc <main+0x1b4>)
 8000d88:	220f      	movs	r2, #15
 8000d8a:	701a      	strb	r2, [r3, #0]

          switch (selected_key)
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	3b41      	subs	r3, #65	@ 0x41
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	f200 8084 	bhi.w	8000e9e <main+0x196>
          {
          case 'A': // RFID
          case 'B': // FACEID
          case 'C': // FINGER
          case 'D': // PASSWORD
              CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4845      	ldr	r0, [pc, #276]	@ (8000eb0 <main+0x1a8>)
 8000d9c:	f7ff faaa 	bl	80002f4 <CLCD_I2C_SetCursor>
              CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 8000da0:	4947      	ldr	r1, [pc, #284]	@ (8000ec0 <main+0x1b8>)
 8000da2:	4843      	ldr	r0, [pc, #268]	@ (8000eb0 <main+0x1a8>)
 8000da4:	f7ff faf9 	bl	800039a <CLCD_I2C_WriteString>

              while (exitmenu)
 8000da8:	e00e      	b.n	8000dc8 <main+0xc0>
              {
                  if (TM_MFRC522_Check(CardID) == MI_OK)
 8000daa:	4846      	ldr	r0, [pc, #280]	@ (8000ec4 <main+0x1bc>)
 8000dac:	f002 fa88 	bl	80032c0 <TM_MFRC522_Check>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d108      	bne.n	8000dc8 <main+0xc0>
                  {
                      key = CheckListUID(CardID);
 8000db6:	4843      	ldr	r0, [pc, #268]	@ (8000ec4 <main+0x1bc>)
 8000db8:	f001 fd22 	bl	8002800 <CheckListUID>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
                      key = key >> 4;
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	71fb      	strb	r3, [r7, #7]
                      break;
 8000dc6:	e003      	b.n	8000dd0 <main+0xc8>
              while (exitmenu)
 8000dc8:	4b3c      	ldr	r3, [pc, #240]	@ (8000ebc <main+0x1b4>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1ec      	bne.n	8000daa <main+0xa2>
                  }
              }

              switch (key)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d117      	bne.n	8000e06 <main+0xfe>
              {
              case 1:
                  if (selected_key == 'A')
 8000dd6:	79bb      	ldrb	r3, [r7, #6]
 8000dd8:	2b41      	cmp	r3, #65	@ 0x41
 8000dda:	d102      	bne.n	8000de2 <main+0xda>
                      RFID();
 8000ddc:	f000 fa62 	bl	80012a4 <RFID>
                      FACEID();
                  else if (selected_key == 'C')
                      FINGER();
                  else if (selected_key == 'D')
                      PASSWORD();
                  break;
 8000de0:	e025      	b.n	8000e2e <main+0x126>
                  else if (selected_key == 'B')
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	2b42      	cmp	r3, #66	@ 0x42
 8000de6:	d102      	bne.n	8000dee <main+0xe6>
                      FACEID();
 8000de8:	f001 f94e 	bl	8002088 <FACEID>
                  break;
 8000dec:	e01f      	b.n	8000e2e <main+0x126>
                  else if (selected_key == 'C')
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	2b43      	cmp	r3, #67	@ 0x43
 8000df2:	d102      	bne.n	8000dfa <main+0xf2>
                      FINGER();
 8000df4:	f001 fccc 	bl	8002790 <FINGER>
                  break;
 8000df8:	e019      	b.n	8000e2e <main+0x126>
                  else if (selected_key == 'D')
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	2b44      	cmp	r3, #68	@ 0x44
 8000dfe:	d116      	bne.n	8000e2e <main+0x126>
                      PASSWORD();
 8000e00:	f001 fccc 	bl	800279c <PASSWORD>
                  break;
 8000e04:	e013      	b.n	8000e2e <main+0x126>
              default:
                  CLCD_I2C_Clear(&LCD1);
 8000e06:	482a      	ldr	r0, [pc, #168]	@ (8000eb0 <main+0x1a8>)
 8000e08:	f7ff fade 	bl	80003c8 <CLCD_I2C_Clear>
                  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4827      	ldr	r0, [pc, #156]	@ (8000eb0 <main+0x1a8>)
 8000e12:	f7ff fa6f 	bl	80002f4 <CLCD_I2C_SetCursor>
                  CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 8000e16:	492c      	ldr	r1, [pc, #176]	@ (8000ec8 <main+0x1c0>)
 8000e18:	4825      	ldr	r0, [pc, #148]	@ (8000eb0 <main+0x1a8>)
 8000e1a:	f7ff fabe 	bl	800039a <CLCD_I2C_WriteString>
                  HAL_Delay(2000);
 8000e1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e22:	f002 fee5 	bl	8003bf0 <HAL_Delay>
                  CLCD_I2C_Clear(&LCD1);
 8000e26:	4822      	ldr	r0, [pc, #136]	@ (8000eb0 <main+0x1a8>)
 8000e28:	f7ff face 	bl	80003c8 <CLCD_I2C_Clear>
                  break;
 8000e2c:	e000      	b.n	8000e30 <main+0x128>
                  break;
 8000e2e:	bf00      	nop
              }
              break;
 8000e30:	e036      	b.n	8000ea0 <main+0x198>

          default:
              break;
          }
      }
      else if (TM_MFRC522_Check(CardID) == MI_OK)
 8000e32:	4824      	ldr	r0, [pc, #144]	@ (8000ec4 <main+0x1bc>)
 8000e34:	f002 fa44 	bl	80032c0 <TM_MFRC522_Check>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d127      	bne.n	8000e8e <main+0x186>
      {
          if (CheckListUID(CardID) != 0)
 8000e3e:	4821      	ldr	r0, [pc, #132]	@ (8000ec4 <main+0x1bc>)
 8000e40:	f001 fcde 	bl	8002800 <CheckListUID>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d010      	beq.n	8000e6c <main+0x164>
          {
              CLCD_I2C_Clear(&LCD1);
 8000e4a:	4819      	ldr	r0, [pc, #100]	@ (8000eb0 <main+0x1a8>)
 8000e4c:	f7ff fabc 	bl	80003c8 <CLCD_I2C_Clear>
              CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	4816      	ldr	r0, [pc, #88]	@ (8000eb0 <main+0x1a8>)
 8000e56:	f7ff fa4d 	bl	80002f4 <CLCD_I2C_SetCursor>
              CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 8000e5a:	491c      	ldr	r1, [pc, #112]	@ (8000ecc <main+0x1c4>)
 8000e5c:	4814      	ldr	r0, [pc, #80]	@ (8000eb0 <main+0x1a8>)
 8000e5e:	f7ff fa9c 	bl	800039a <CLCD_I2C_WriteString>
              HAL_Delay(500);
 8000e62:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e66:	f002 fec3 	bl	8003bf0 <HAL_Delay>
 8000e6a:	e019      	b.n	8000ea0 <main+0x198>
          }
          else
          {
              CLCD_I2C_Clear(&LCD1);
 8000e6c:	4810      	ldr	r0, [pc, #64]	@ (8000eb0 <main+0x1a8>)
 8000e6e:	f7ff faab 	bl	80003c8 <CLCD_I2C_Clear>
              CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	480e      	ldr	r0, [pc, #56]	@ (8000eb0 <main+0x1a8>)
 8000e78:	f7ff fa3c 	bl	80002f4 <CLCD_I2C_SetCursor>
              CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 8000e7c:	4914      	ldr	r1, [pc, #80]	@ (8000ed0 <main+0x1c8>)
 8000e7e:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <main+0x1a8>)
 8000e80:	f7ff fa8b 	bl	800039a <CLCD_I2C_WriteString>
              HAL_Delay(3000);
 8000e84:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e88:	f002 feb2 	bl	8003bf0 <HAL_Delay>
 8000e8c:	e008      	b.n	8000ea0 <main+0x198>
          }
      }
      else if(Rx_Buffer[0]!= 0)
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <main+0x1cc>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <main+0x198>
      {
    	  startface();
 8000e98:	f002 f896 	bl	8002fc8 <startface>
 8000e9c:	e000      	b.n	8000ea0 <main+0x198>
              break;
 8000e9e:	bf00      	nop
      }

      // Kiểm tra trạng thái vân tay định kỳ
      check_fingerprint_status();
 8000ea0:	f7ff ff0e 	bl	8000cc0 <check_fingerprint_status>

      // Xử lý vân tay nếu phát hiện
      process_fingerprint();
 8000ea4:	f7ff ff20 	bl	8000ce8 <process_fingerprint>
  {
 8000ea8:	e757      	b.n	8000d5a <main+0x52>
 8000eaa:	bf00      	nop
 8000eac:	2000021c 	.word	0x2000021c
 8000eb0:	200003d8 	.word	0x200003d8
 8000eb4:	200002c8 	.word	0x200002c8
 8000eb8:	0800d1a0 	.word	0x0800d1a0
 8000ebc:	20000020 	.word	0x20000020
 8000ec0:	0800d1b0 	.word	0x0800d1b0
 8000ec4:	200003e4 	.word	0x200003e4
 8000ec8:	0800d1c0 	.word	0x0800d1c0
 8000ecc:	0800d1d0 	.word	0x0800d1d0
 8000ed0:	0800d1dc 	.word	0x0800d1dc
 8000ed4:	20000350 	.word	0x20000350

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b094      	sub	sp, #80	@ 0x50
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ee2:	2228      	movs	r2, #40	@ 0x28
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f00b fcbe 	bl	800c868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f16:	2301      	movs	r3, #1
 8000f18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 fb3e 	bl	80065b0 <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f3a:	f002 f96f 	bl	800321c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f4e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 fdaa 	bl	8006ab4 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f66:	f002 f959 	bl	800321c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f72:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 ff34 	bl	8006de4 <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f82:	f002 f94b 	bl	800321c <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3750      	adds	r7, #80	@ 0x50
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <MX_I2C2_Init+0x50>)
 8000f96:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <MX_I2C2_Init+0x54>)
 8000f98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_I2C2_Init+0x50>)
 8000f9c:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <MX_I2C2_Init+0x58>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_I2C2_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_I2C2_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_I2C2_Init+0x50>)
 8000fae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <MX_I2C2_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_I2C2_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <MX_I2C2_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_I2C2_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <MX_I2C2_Init+0x50>)
 8000fce:	f003 fb17 	bl	8004600 <HAL_I2C_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fd8:	f002 f920 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000021c 	.word	0x2000021c
 8000fe4:	40005800 	.word	0x40005800
 8000fe8:	000186a0 	.word	0x000186a0

08000fec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <MX_SPI1_Init+0x64>)
 8000ff2:	4a18      	ldr	r2, [pc, #96]	@ (8001054 <MX_SPI1_Init+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <MX_SPI1_Init+0x64>)
 8000ff8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800101c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001020:	2230      	movs	r2, #48	@ 0x30
 8001022:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001024:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_SPI1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001030:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_SPI1_Init+0x64>)
 8001038:	220a      	movs	r2, #10
 800103a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	@ (8001050 <MX_SPI1_Init+0x64>)
 800103e:	f005 ff87 	bl	8006f50 <HAL_SPI_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001048:	f002 f8e8 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000270 	.word	0x20000270
 8001054:	40013000 	.word	0x40013000

08001058 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	463b      	mov	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <MX_TIM2_Init+0x98>)
 8001076:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800107a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 800107c:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <MX_TIM2_Init+0x98>)
 800107e:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001082:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <MX_TIM2_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <MX_TIM2_Init+0x98>)
 800108c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001090:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001092:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <MX_TIM2_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <MX_TIM2_Init+0x98>)
 800109a:	2280      	movs	r2, #128	@ 0x80
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800109e:	4814      	ldr	r0, [pc, #80]	@ (80010f0 <MX_TIM2_Init+0x98>)
 80010a0:	f006 fa22 	bl	80074e8 <HAL_TIM_Base_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010aa:	f002 f8b7 	bl	800321c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	@ (80010f0 <MX_TIM2_Init+0x98>)
 80010bc:	f006 fbbe 	bl	800783c <HAL_TIM_ConfigClockSource>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010c6:	f002 f8a9 	bl	800321c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <MX_TIM2_Init+0x98>)
 80010d8:	f006 fd90 	bl	8007bfc <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010e2:	f002 f89b 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200002c8 	.word	0x200002c8

080010f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_USART1_UART_Init+0x4c>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <MX_USART1_UART_Init+0x50>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <MX_USART1_UART_Init+0x4c>)
 8001100:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_USART1_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_USART1_UART_Init+0x4c>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <MX_USART1_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_USART1_UART_Init+0x4c>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <MX_USART1_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_USART1_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_USART1_UART_Init+0x4c>)
 800112c:	f006 fdd6 	bl	8007cdc <HAL_UART_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001136:	f002 f871 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000310 	.word	0x20000310
 8001144:	40013800 	.word	0x40013800

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115c:	4b4c      	ldr	r3, [pc, #304]	@ (8001290 <MX_GPIO_Init+0x148>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a4b      	ldr	r2, [pc, #300]	@ (8001290 <MX_GPIO_Init+0x148>)
 8001162:	f043 0310 	orr.w	r3, r3, #16
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b49      	ldr	r3, [pc, #292]	@ (8001290 <MX_GPIO_Init+0x148>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0310 	and.w	r3, r3, #16
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	4b46      	ldr	r3, [pc, #280]	@ (8001290 <MX_GPIO_Init+0x148>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a45      	ldr	r2, [pc, #276]	@ (8001290 <MX_GPIO_Init+0x148>)
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b43      	ldr	r3, [pc, #268]	@ (8001290 <MX_GPIO_Init+0x148>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b40      	ldr	r3, [pc, #256]	@ (8001290 <MX_GPIO_Init+0x148>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a3f      	ldr	r2, [pc, #252]	@ (8001290 <MX_GPIO_Init+0x148>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b3d      	ldr	r3, [pc, #244]	@ (8001290 <MX_GPIO_Init+0x148>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001290 <MX_GPIO_Init+0x148>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a39      	ldr	r2, [pc, #228]	@ (8001290 <MX_GPIO_Init+0x148>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b37      	ldr	r3, [pc, #220]	@ (8001290 <MX_GPIO_Init+0x148>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|buzzer_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80011c2:	4834      	ldr	r0, [pc, #208]	@ (8001294 <MX_GPIO_Init+0x14c>)
 80011c4:	f003 f9e1 	bl	800458a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 80011c8:	2200      	movs	r2, #0
 80011ca:	f24f 0108 	movw	r1, #61448	@ 0xf008
 80011ce:	4832      	ldr	r0, [pc, #200]	@ (8001298 <MX_GPIO_Init+0x150>)
 80011d0:	f003 f9db 	bl	800458a <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 80011d4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	4619      	mov	r1, r3
 80011e8:	482c      	ldr	r0, [pc, #176]	@ (800129c <MX_GPIO_Init+0x154>)
 80011ea:	f003 f833 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 80011ee:	2303      	movs	r3, #3
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	4824      	ldr	r0, [pc, #144]	@ (8001294 <MX_GPIO_Init+0x14c>)
 8001202:	f003 f827 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = CS_Pin|buzzer_Pin;
 8001206:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	481d      	ldr	r0, [pc, #116]	@ (8001294 <MX_GPIO_Init+0x14c>)
 8001220:	f003 f818 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8001224:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4619      	mov	r1, r3
 800123c:	4816      	ldr	r0, [pc, #88]	@ (8001298 <MX_GPIO_Init+0x150>)
 800123e:	f003 f809 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 8001242:	2308      	movs	r3, #8
 8001244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2302      	movs	r3, #2
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4619      	mov	r1, r3
 8001258:	480f      	ldr	r0, [pc, #60]	@ (8001298 <MX_GPIO_Init+0x150>)
 800125a:	f002 fffb 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800125e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_GPIO_Init+0x158>)
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	4809      	ldr	r0, [pc, #36]	@ (8001298 <MX_GPIO_Init+0x150>)
 8001274:	f002 ffee 	bl	8004254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2101      	movs	r1, #1
 800127c:	2017      	movs	r0, #23
 800127e:	f002 fdb2 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001282:	2017      	movs	r0, #23
 8001284:	f002 fdcb 	bl	8003e1e <HAL_NVIC_EnableIRQ>

}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	40010800 	.word	0x40010800
 8001298:	40010c00 	.word	0x40010c00
 800129c:	40011000 	.word	0x40011000
 80012a0:	10110000 	.word	0x10110000

080012a4 <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
	exitmenu = 15;
 80012aa:	4ba3      	ldr	r3, [pc, #652]	@ (8001538 <RFID+0x294>)
 80012ac:	220f      	movs	r2, #15
 80012ae:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80012b0:	23ff      	movs	r3, #255	@ 0xff
 80012b2:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press DOWN");
 80012b4:	4aa1      	ldr	r2, [pc, #644]	@ (800153c <RFID+0x298>)
 80012b6:	49a2      	ldr	r1, [pc, #648]	@ (8001540 <RFID+0x29c>)
 80012b8:	48a2      	ldr	r0, [pc, #648]	@ (8001544 <RFID+0x2a0>)
 80012ba:	f7ff f895 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu )
 80012be:	f000 beaa 	b.w	8002016 <RFID+0xd72>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f7ff f9ea 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80012c8:	4603      	mov	r3, r0
 80012ca:	717b      	strb	r3, [r7, #5]
		if (key_pressed =='*')
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80012d0:	d12e      	bne.n	8001330 <RFID+0x8c>
		{
			exitmenu = 15;
 80012d2:	4b99      	ldr	r3, [pc, #612]	@ (8001538 <RFID+0x294>)
 80012d4:	220f      	movs	r2, #15
 80012d6:	701a      	strb	r2, [r3, #0]
			status++;
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	3301      	adds	r3, #1
 80012dc:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d801      	bhi.n	80012e8 <RFID+0x44>
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	e000      	b.n	80012ea <RFID+0x46>
 80012e8:	2300      	movs	r3, #0
 80012ea:	75fb      	strb	r3, [r7, #23]
			switch (status)
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d012      	beq.n	8001318 <RFID+0x74>
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	dc16      	bgt.n	8001324 <RFID+0x80>
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <RFID+0x5c>
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d006      	beq.n	800130c <RFID+0x68>
 80012fe:	e011      	b.n	8001324 <RFID+0x80>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 8001300:	4a91      	ldr	r2, [pc, #580]	@ (8001548 <RFID+0x2a4>)
 8001302:	498f      	ldr	r1, [pc, #572]	@ (8001540 <RFID+0x29c>)
 8001304:	488f      	ldr	r0, [pc, #572]	@ (8001544 <RFID+0x2a0>)
 8001306:	f7ff f86f 	bl	80003e8 <CLCD_I2C_Display>
				break;
 800130a:	e011      	b.n	8001330 <RFID+0x8c>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 800130c:	4a8f      	ldr	r2, [pc, #572]	@ (800154c <RFID+0x2a8>)
 800130e:	498c      	ldr	r1, [pc, #560]	@ (8001540 <RFID+0x29c>)
 8001310:	488c      	ldr	r0, [pc, #560]	@ (8001544 <RFID+0x2a0>)
 8001312:	f7ff f869 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001316:	e00b      	b.n	8001330 <RFID+0x8c>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8001318:	4a8d      	ldr	r2, [pc, #564]	@ (8001550 <RFID+0x2ac>)
 800131a:	4989      	ldr	r1, [pc, #548]	@ (8001540 <RFID+0x29c>)
 800131c:	4889      	ldr	r0, [pc, #548]	@ (8001544 <RFID+0x2a0>)
 800131e:	f7ff f863 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001322:	e005      	b.n	8001330 <RFID+0x8c>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 8001324:	4a8b      	ldr	r2, [pc, #556]	@ (8001554 <RFID+0x2b0>)
 8001326:	4986      	ldr	r1, [pc, #536]	@ (8001540 <RFID+0x29c>)
 8001328:	4886      	ldr	r0, [pc, #536]	@ (8001544 <RFID+0x2a0>)
 800132a:	f7ff f85d 	bl	80003e8 <CLCD_I2C_Display>
				break;
 800132e:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 8001330:	797b      	ldrb	r3, [r7, #5]
 8001332:	2b23      	cmp	r3, #35	@ 0x23
 8001334:	f040 866f 	bne.w	8002016 <RFID+0xd72>
		{
			exitmenu = 15;
 8001338:	4b7f      	ldr	r3, [pc, #508]	@ (8001538 <RFID+0x294>)
 800133a:	220f      	movs	r2, #15
 800133c:	701a      	strb	r2, [r3, #0]
			switch (status)
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	2b02      	cmp	r3, #2
 8001342:	f000 865c 	beq.w	8001ffe <RFID+0xd5a>
 8001346:	2b02      	cmp	r3, #2
 8001348:	f300 8661 	bgt.w	800200e <RFID+0xd6a>
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <RFID+0xb6>
 8001350:	2b01      	cmp	r3, #1
 8001352:	f000 8231 	beq.w	80017b8 <RFID+0x514>
 8001356:	f000 be5a 	b.w	800200e <RFID+0xd6a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800135a:	4a7f      	ldr	r2, [pc, #508]	@ (8001558 <RFID+0x2b4>)
 800135c:	497f      	ldr	r1, [pc, #508]	@ (800155c <RFID+0x2b8>)
 800135e:	4879      	ldr	r0, [pc, #484]	@ (8001544 <RFID+0x2a0>)
 8001360:	f7ff f842 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 800136c:	e219      	b.n	80017a2 <RFID+0x4fe>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 800136e:	200a      	movs	r0, #10
 8001370:	f7ff f994 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001374:	4603      	mov	r3, r0
 8001376:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 8001378:	4b6f      	ldr	r3, [pc, #444]	@ (8001538 <RFID+0x294>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d108      	bne.n	8001392 <RFID+0xee>
					{
						CLCD_I2C_Clear(&LCD1);
 8001380:	4870      	ldr	r0, [pc, #448]	@ (8001544 <RFID+0x2a0>)
 8001382:	f7ff f821 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8001386:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800138a:	f002 fc31 	bl	8003bf0 <HAL_Delay>
						return;
 800138e:	f000 be4a 	b.w	8002026 <RFID+0xd82>
					}
					if (key_pressed =='*')
 8001392:	797b      	ldrb	r3, [r7, #5]
 8001394:	2b2a      	cmp	r3, #42	@ 0x2a
 8001396:	d124      	bne.n	80013e2 <RFID+0x13e>
					{
						exitmenu = 15;
 8001398:	4b67      	ldr	r3, [pc, #412]	@ (8001538 <RFID+0x294>)
 800139a:	220f      	movs	r2, #15
 800139c:	701a      	strb	r2, [r3, #0]
						statusadd++;
 800139e:	7dbb      	ldrb	r3, [r7, #22]
 80013a0:	3301      	adds	r3, #1
 80013a2:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d801      	bhi.n	80013ae <RFID+0x10a>
 80013aa:	7dbb      	ldrb	r3, [r7, #22]
 80013ac:	e000      	b.n	80013b0 <RFID+0x10c>
 80013ae:	2300      	movs	r3, #0
 80013b0:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 80013b2:	7dbb      	ldrb	r3, [r7, #22]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d002      	beq.n	80013be <RFID+0x11a>
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d006      	beq.n	80013ca <RFID+0x126>
 80013bc:	e00b      	b.n	80013d6 <RFID+0x132>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80013be:	4a68      	ldr	r2, [pc, #416]	@ (8001560 <RFID+0x2bc>)
 80013c0:	4968      	ldr	r1, [pc, #416]	@ (8001564 <RFID+0x2c0>)
 80013c2:	4860      	ldr	r0, [pc, #384]	@ (8001544 <RFID+0x2a0>)
 80013c4:	f7ff f810 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80013c8:	e00b      	b.n	80013e2 <RFID+0x13e>
						case 2:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 80013ca:	4a67      	ldr	r2, [pc, #412]	@ (8001568 <RFID+0x2c4>)
 80013cc:	4965      	ldr	r1, [pc, #404]	@ (8001564 <RFID+0x2c0>)
 80013ce:	485d      	ldr	r0, [pc, #372]	@ (8001544 <RFID+0x2a0>)
 80013d0:	f7ff f80a 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80013d4:	e005      	b.n	80013e2 <RFID+0x13e>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 80013d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001554 <RFID+0x2b0>)
 80013d8:	4962      	ldr	r1, [pc, #392]	@ (8001564 <RFID+0x2c0>)
 80013da:	485a      	ldr	r0, [pc, #360]	@ (8001544 <RFID+0x2a0>)
 80013dc:	f7ff f804 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80013e0:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 80013e2:	797b      	ldrb	r3, [r7, #5]
 80013e4:	2b23      	cmp	r3, #35	@ 0x23
 80013e6:	f040 81dc 	bne.w	80017a2 <RFID+0x4fe>
					{
						exitmenu = 15;
 80013ea:	4b53      	ldr	r3, [pc, #332]	@ (8001538 <RFID+0x294>)
 80013ec:	220f      	movs	r2, #15
 80013ee:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 80013f0:	7dbb      	ldrb	r3, [r7, #22]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d003      	beq.n	80013fe <RFID+0x15a>
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	f000 80ff 	beq.w	80015fa <RFID+0x356>
 80013fc:	e1ce      	b.n	800179c <RFID+0x4f8>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80013fe:	4a56      	ldr	r2, [pc, #344]	@ (8001558 <RFID+0x2b4>)
 8001400:	4956      	ldr	r1, [pc, #344]	@ (800155c <RFID+0x2b8>)
 8001402:	4850      	ldr	r0, [pc, #320]	@ (8001544 <RFID+0x2a0>)
 8001404:	f7fe fff0 	bl	80003e8 <CLCD_I2C_Display>
							uint8_t statusadd1 = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 8001410:	e0e9      	b.n	80015e6 <RFID+0x342>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001412:	200a      	movs	r0, #10
 8001414:	f7ff f942 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001418:	4603      	mov	r3, r0
 800141a:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 800141c:	4b46      	ldr	r3, [pc, #280]	@ (8001538 <RFID+0x294>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d108      	bne.n	8001436 <RFID+0x192>
								{
									CLCD_I2C_Clear(&LCD1);
 8001424:	4847      	ldr	r0, [pc, #284]	@ (8001544 <RFID+0x2a0>)
 8001426:	f7fe ffcf 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800142a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800142e:	f002 fbdf 	bl	8003bf0 <HAL_Delay>
									return;
 8001432:	f000 bdf8 	b.w	8002026 <RFID+0xd82>
								}
								if (key_pressed =='*')
 8001436:	797b      	ldrb	r3, [r7, #5]
 8001438:	2b2a      	cmp	r3, #42	@ 0x2a
 800143a:	d12e      	bne.n	800149a <RFID+0x1f6>
								{
									exitmenu = 15;
 800143c:	4b3e      	ldr	r3, [pc, #248]	@ (8001538 <RFID+0x294>)
 800143e:	220f      	movs	r2, #15
 8001440:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 8001442:	7d3b      	ldrb	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 8001448:	7d3b      	ldrb	r3, [r7, #20]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d801      	bhi.n	8001452 <RFID+0x1ae>
 800144e:	7d3b      	ldrb	r3, [r7, #20]
 8001450:	e000      	b.n	8001454 <RFID+0x1b0>
 8001452:	2300      	movs	r3, #0
 8001454:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 8001456:	7d3b      	ldrb	r3, [r7, #20]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d012      	beq.n	8001482 <RFID+0x1de>
 800145c:	2b03      	cmp	r3, #3
 800145e:	dc16      	bgt.n	800148e <RFID+0x1ea>
 8001460:	2b01      	cmp	r3, #1
 8001462:	d002      	beq.n	800146a <RFID+0x1c6>
 8001464:	2b02      	cmp	r3, #2
 8001466:	d006      	beq.n	8001476 <RFID+0x1d2>
 8001468:	e011      	b.n	800148e <RFID+0x1ea>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 800146a:	4a40      	ldr	r2, [pc, #256]	@ (800156c <RFID+0x2c8>)
 800146c:	4940      	ldr	r1, [pc, #256]	@ (8001570 <RFID+0x2cc>)
 800146e:	4835      	ldr	r0, [pc, #212]	@ (8001544 <RFID+0x2a0>)
 8001470:	f7fe ffba 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001474:	e011      	b.n	800149a <RFID+0x1f6>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 8001476:	4a3f      	ldr	r2, [pc, #252]	@ (8001574 <RFID+0x2d0>)
 8001478:	493d      	ldr	r1, [pc, #244]	@ (8001570 <RFID+0x2cc>)
 800147a:	4832      	ldr	r0, [pc, #200]	@ (8001544 <RFID+0x2a0>)
 800147c:	f7fe ffb4 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001480:	e00b      	b.n	800149a <RFID+0x1f6>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 8001482:	4a3d      	ldr	r2, [pc, #244]	@ (8001578 <RFID+0x2d4>)
 8001484:	493a      	ldr	r1, [pc, #232]	@ (8001570 <RFID+0x2cc>)
 8001486:	482f      	ldr	r0, [pc, #188]	@ (8001544 <RFID+0x2a0>)
 8001488:	f7fe ffae 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800148c:	e005      	b.n	800149a <RFID+0x1f6>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Back");
 800148e:	4a31      	ldr	r2, [pc, #196]	@ (8001554 <RFID+0x2b0>)
 8001490:	4937      	ldr	r1, [pc, #220]	@ (8001570 <RFID+0x2cc>)
 8001492:	482c      	ldr	r0, [pc, #176]	@ (8001544 <RFID+0x2a0>)
 8001494:	f7fe ffa8 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001498:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	2b23      	cmp	r3, #35	@ 0x23
 800149e:	f040 80a2 	bne.w	80015e6 <RFID+0x342>
								{
									exitmenu = 15;
 80014a2:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <RFID+0x294>)
 80014a4:	220f      	movs	r2, #15
 80014a6:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 80014a8:	7dbb      	ldrb	r3, [r7, #22]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	7d3b      	ldrb	r3, [r7, #20]
 80014b0:	4413      	add	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
									switch (statusadd1)
 80014b4:	7d3b      	ldrb	r3, [r7, #20]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d072      	beq.n	80015a0 <RFID+0x2fc>
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	f300 8090 	bgt.w	80015e0 <RFID+0x33c>
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d002      	beq.n	80014ca <RFID+0x226>
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d020      	beq.n	800150a <RFID+0x266>
 80014c8:	e08a      	b.n	80015e0 <RFID+0x33c>
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 80014ca:	787b      	ldrb	r3, [r7, #1]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 fb17 	bl	8002b00 <CheckKey>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00e      	beq.n	80014f6 <RFID+0x252>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 1"," Card 1 Existed ");
 80014d8:	4a28      	ldr	r2, [pc, #160]	@ (800157c <RFID+0x2d8>)
 80014da:	4929      	ldr	r1, [pc, #164]	@ (8001580 <RFID+0x2dc>)
 80014dc:	4819      	ldr	r0, [pc, #100]	@ (8001544 <RFID+0x2a0>)
 80014de:	f7fe ff83 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80014e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014e6:	f002 fb83 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80014ea:	4a20      	ldr	r2, [pc, #128]	@ (800156c <RFID+0x2c8>)
 80014ec:	4920      	ldr	r1, [pc, #128]	@ (8001570 <RFID+0x2cc>)
 80014ee:	4815      	ldr	r0, [pc, #84]	@ (8001544 <RFID+0x2a0>)
 80014f0:	f7fe ff7a 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
										}
										break;
 80014f4:	e077      	b.n	80015e6 <RFID+0x342>
											adduid(keyadd1);
 80014f6:	787b      	ldrb	r3, [r7, #1]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 f9e3 	bl	80028c4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80014fe:	4a1b      	ldr	r2, [pc, #108]	@ (800156c <RFID+0x2c8>)
 8001500:	491b      	ldr	r1, [pc, #108]	@ (8001570 <RFID+0x2cc>)
 8001502:	4810      	ldr	r0, [pc, #64]	@ (8001544 <RFID+0x2a0>)
 8001504:	f7fe ff70 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001508:	e06d      	b.n	80015e6 <RFID+0x342>
									case 2:
										if (CheckKey(keyadd1) != 0)
 800150a:	787b      	ldrb	r3, [r7, #1]
 800150c:	4618      	mov	r0, r3
 800150e:	f001 faf7 	bl	8002b00 <CheckKey>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d039      	beq.n	800158c <RFID+0x2e8>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 2"," Card 2 Existed ");
 8001518:	4a1a      	ldr	r2, [pc, #104]	@ (8001584 <RFID+0x2e0>)
 800151a:	491b      	ldr	r1, [pc, #108]	@ (8001588 <RFID+0x2e4>)
 800151c:	4809      	ldr	r0, [pc, #36]	@ (8001544 <RFID+0x2a0>)
 800151e:	f7fe ff63 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8001522:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001526:	f002 fb63 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <RFID+0x2d0>)
 800152c:	4910      	ldr	r1, [pc, #64]	@ (8001570 <RFID+0x2cc>)
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <RFID+0x2a0>)
 8001530:	f7fe ff5a 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
										}
										break;
 8001534:	e057      	b.n	80015e6 <RFID+0x342>
 8001536:	bf00      	nop
 8001538:	20000020 	.word	0x20000020
 800153c:	0800d1ec 	.word	0x0800d1ec
 8001540:	0800d1fc 	.word	0x0800d1fc
 8001544:	200003d8 	.word	0x200003d8
 8001548:	0800d20c 	.word	0x0800d20c
 800154c:	0800d218 	.word	0x0800d218
 8001550:	0800d228 	.word	0x0800d228
 8001554:	0800d238 	.word	0x0800d238
 8001558:	0800d240 	.word	0x0800d240
 800155c:	0800d24c 	.word	0x0800d24c
 8001560:	0800d25c 	.word	0x0800d25c
 8001564:	0800d26c 	.word	0x0800d26c
 8001568:	0800d278 	.word	0x0800d278
 800156c:	0800d288 	.word	0x0800d288
 8001570:	0800d29c 	.word	0x0800d29c
 8001574:	0800d2ac 	.word	0x0800d2ac
 8001578:	0800d2c0 	.word	0x0800d2c0
 800157c:	0800d2d4 	.word	0x0800d2d4
 8001580:	0800d2e8 	.word	0x0800d2e8
 8001584:	0800d2f4 	.word	0x0800d2f4
 8001588:	0800d308 	.word	0x0800d308
											adduid(keyadd1);
 800158c:	787b      	ldrb	r3, [r7, #1]
 800158e:	4618      	mov	r0, r3
 8001590:	f001 f998 	bl	80028c4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 8001594:	4aa5      	ldr	r2, [pc, #660]	@ (800182c <RFID+0x588>)
 8001596:	49a6      	ldr	r1, [pc, #664]	@ (8001830 <RFID+0x58c>)
 8001598:	48a6      	ldr	r0, [pc, #664]	@ (8001834 <RFID+0x590>)
 800159a:	f7fe ff25 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800159e:	e022      	b.n	80015e6 <RFID+0x342>
									case 3:
										if (CheckKey(keyadd1) != 0)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 faac 	bl	8002b00 <CheckKey>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00e      	beq.n	80015cc <RFID+0x328>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 3"," Card 3 Existed ");
 80015ae:	4aa2      	ldr	r2, [pc, #648]	@ (8001838 <RFID+0x594>)
 80015b0:	49a2      	ldr	r1, [pc, #648]	@ (800183c <RFID+0x598>)
 80015b2:	48a0      	ldr	r0, [pc, #640]	@ (8001834 <RFID+0x590>)
 80015b4:	f7fe ff18 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80015b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015bc:	f002 fb18 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80015c0:	4a9f      	ldr	r2, [pc, #636]	@ (8001840 <RFID+0x59c>)
 80015c2:	499b      	ldr	r1, [pc, #620]	@ (8001830 <RFID+0x58c>)
 80015c4:	489b      	ldr	r0, [pc, #620]	@ (8001834 <RFID+0x590>)
 80015c6:	f7fe ff0f 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
										}
										break;
 80015ca:	e00c      	b.n	80015e6 <RFID+0x342>
											adduid(keyadd1);
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f001 f978 	bl	80028c4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80015d4:	4a9a      	ldr	r2, [pc, #616]	@ (8001840 <RFID+0x59c>)
 80015d6:	4996      	ldr	r1, [pc, #600]	@ (8001830 <RFID+0x58c>)
 80015d8:	4896      	ldr	r0, [pc, #600]	@ (8001834 <RFID+0x590>)
 80015da:	f7fe ff05 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80015de:	e002      	b.n	80015e6 <RFID+0x342>
									default:
										back11 = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	74fb      	strb	r3, [r7, #19]
										break;
 80015e4:	bf00      	nop
							while (back11 == 1)
 80015e6:	7cfb      	ldrb	r3, [r7, #19]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	f43f af12 	beq.w	8001412 <RFID+0x16e>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80015ee:	4a95      	ldr	r2, [pc, #596]	@ (8001844 <RFID+0x5a0>)
 80015f0:	4995      	ldr	r1, [pc, #596]	@ (8001848 <RFID+0x5a4>)
 80015f2:	4890      	ldr	r0, [pc, #576]	@ (8001834 <RFID+0x590>)
 80015f4:	f7fe fef8 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80015f8:	e0d3      	b.n	80017a2 <RFID+0x4fe>
						case 2:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80015fa:	4a94      	ldr	r2, [pc, #592]	@ (800184c <RFID+0x5a8>)
 80015fc:	4994      	ldr	r1, [pc, #592]	@ (8001850 <RFID+0x5ac>)
 80015fe:	488d      	ldr	r0, [pc, #564]	@ (8001834 <RFID+0x590>)
 8001600:	f7fe fef2 	bl	80003e8 <CLCD_I2C_Display>
							uint8_t statusadd2 = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 800160c:	e0bc      	b.n	8001788 <RFID+0x4e4>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 800160e:	200a      	movs	r0, #10
 8001610:	f7ff f844 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001614:	4603      	mov	r3, r0
 8001616:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001618:	4b8e      	ldr	r3, [pc, #568]	@ (8001854 <RFID+0x5b0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <RFID+0x38e>
								{
									CLCD_I2C_Clear(&LCD1);
 8001620:	4884      	ldr	r0, [pc, #528]	@ (8001834 <RFID+0x590>)
 8001622:	f7fe fed1 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8001626:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800162a:	f002 fae1 	bl	8003bf0 <HAL_Delay>
									return;
 800162e:	f000 bcfa 	b.w	8002026 <RFID+0xd82>
								}
								if (key_pressed =='*')
 8001632:	797b      	ldrb	r3, [r7, #5]
 8001634:	2b2a      	cmp	r3, #42	@ 0x2a
 8001636:	d12e      	bne.n	8001696 <RFID+0x3f2>
								{
									exitmenu = 15;
 8001638:	4b86      	ldr	r3, [pc, #536]	@ (8001854 <RFID+0x5b0>)
 800163a:	220f      	movs	r2, #15
 800163c:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 800163e:	7cbb      	ldrb	r3, [r7, #18]
 8001640:	3301      	adds	r3, #1
 8001642:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001644:	7cbb      	ldrb	r3, [r7, #18]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d801      	bhi.n	800164e <RFID+0x3aa>
 800164a:	7cbb      	ldrb	r3, [r7, #18]
 800164c:	e000      	b.n	8001650 <RFID+0x3ac>
 800164e:	2300      	movs	r3, #0
 8001650:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 8001652:	7cbb      	ldrb	r3, [r7, #18]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d012      	beq.n	800167e <RFID+0x3da>
 8001658:	2b03      	cmp	r3, #3
 800165a:	dc16      	bgt.n	800168a <RFID+0x3e6>
 800165c:	2b01      	cmp	r3, #1
 800165e:	d002      	beq.n	8001666 <RFID+0x3c2>
 8001660:	2b02      	cmp	r3, #2
 8001662:	d006      	beq.n	8001672 <RFID+0x3ce>
 8001664:	e011      	b.n	800168a <RFID+0x3e6>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 8001666:	4a7c      	ldr	r2, [pc, #496]	@ (8001858 <RFID+0x5b4>)
 8001668:	497c      	ldr	r1, [pc, #496]	@ (800185c <RFID+0x5b8>)
 800166a:	4872      	ldr	r0, [pc, #456]	@ (8001834 <RFID+0x590>)
 800166c:	f7fe febc 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001670:	e011      	b.n	8001696 <RFID+0x3f2>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001672:	4a7b      	ldr	r2, [pc, #492]	@ (8001860 <RFID+0x5bc>)
 8001674:	4979      	ldr	r1, [pc, #484]	@ (800185c <RFID+0x5b8>)
 8001676:	486f      	ldr	r0, [pc, #444]	@ (8001834 <RFID+0x590>)
 8001678:	f7fe feb6 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800167c:	e00b      	b.n	8001696 <RFID+0x3f2>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 800167e:	4a79      	ldr	r2, [pc, #484]	@ (8001864 <RFID+0x5c0>)
 8001680:	4976      	ldr	r1, [pc, #472]	@ (800185c <RFID+0x5b8>)
 8001682:	486c      	ldr	r0, [pc, #432]	@ (8001834 <RFID+0x590>)
 8001684:	f7fe feb0 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001688:	e005      	b.n	8001696 <RFID+0x3f2>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> Back");
 800168a:	4a77      	ldr	r2, [pc, #476]	@ (8001868 <RFID+0x5c4>)
 800168c:	4973      	ldr	r1, [pc, #460]	@ (800185c <RFID+0x5b8>)
 800168e:	4869      	ldr	r0, [pc, #420]	@ (8001834 <RFID+0x590>)
 8001690:	f7fe feaa 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001694:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001696:	797b      	ldrb	r3, [r7, #5]
 8001698:	2b23      	cmp	r3, #35	@ 0x23
 800169a:	d175      	bne.n	8001788 <RFID+0x4e4>
								{
									exitmenu = 15;
 800169c:	4b6d      	ldr	r3, [pc, #436]	@ (8001854 <RFID+0x5b0>)
 800169e:	220f      	movs	r2, #15
 80016a0:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 80016a2:	7dbb      	ldrb	r3, [r7, #22]
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	7cbb      	ldrb	r3, [r7, #18]
 80016aa:	4413      	add	r3, r2
 80016ac:	70bb      	strb	r3, [r7, #2]
									switch (statusadd2)
 80016ae:	7cbb      	ldrb	r3, [r7, #18]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d046      	beq.n	8001742 <RFID+0x49e>
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	dc64      	bgt.n	8001782 <RFID+0x4de>
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d002      	beq.n	80016c2 <RFID+0x41e>
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d020      	beq.n	8001702 <RFID+0x45e>
 80016c0:	e05f      	b.n	8001782 <RFID+0x4de>
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 80016c2:	78bb      	ldrb	r3, [r7, #2]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 fa1b 	bl	8002b00 <CheckKey>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00e      	beq.n	80016ee <RFID+0x44a>
										{
											CLCD_I2C_Display(&LCD1,"     USER 1"," Card 1 Existed ");
 80016d0:	4a66      	ldr	r2, [pc, #408]	@ (800186c <RFID+0x5c8>)
 80016d2:	4967      	ldr	r1, [pc, #412]	@ (8001870 <RFID+0x5cc>)
 80016d4:	4857      	ldr	r0, [pc, #348]	@ (8001834 <RFID+0x590>)
 80016d6:	f7fe fe87 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80016da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016de:	f002 fa87 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80016e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001858 <RFID+0x5b4>)
 80016e4:	495d      	ldr	r1, [pc, #372]	@ (800185c <RFID+0x5b8>)
 80016e6:	4853      	ldr	r0, [pc, #332]	@ (8001834 <RFID+0x590>)
 80016e8:	f7fe fe7e 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
										}
										break;
 80016ec:	e04c      	b.n	8001788 <RFID+0x4e4>
											adduid(keyadd2);
 80016ee:	78bb      	ldrb	r3, [r7, #2]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 f8e7 	bl	80028c4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80016f6:	4a58      	ldr	r2, [pc, #352]	@ (8001858 <RFID+0x5b4>)
 80016f8:	4958      	ldr	r1, [pc, #352]	@ (800185c <RFID+0x5b8>)
 80016fa:	484e      	ldr	r0, [pc, #312]	@ (8001834 <RFID+0x590>)
 80016fc:	f7fe fe74 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001700:	e042      	b.n	8001788 <RFID+0x4e4>
									case 2:
										if (CheckKey(keyadd2) != 0)
 8001702:	78bb      	ldrb	r3, [r7, #2]
 8001704:	4618      	mov	r0, r3
 8001706:	f001 f9fb 	bl	8002b00 <CheckKey>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00e      	beq.n	800172e <RFID+0x48a>
										{
											CLCD_I2C_Display(&LCD1,"     USER 2"," Card 2 Existed ");
 8001710:	4a58      	ldr	r2, [pc, #352]	@ (8001874 <RFID+0x5d0>)
 8001712:	4959      	ldr	r1, [pc, #356]	@ (8001878 <RFID+0x5d4>)
 8001714:	4847      	ldr	r0, [pc, #284]	@ (8001834 <RFID+0x590>)
 8001716:	f7fe fe67 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 800171a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800171e:	f002 fa67 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001722:	4a4f      	ldr	r2, [pc, #316]	@ (8001860 <RFID+0x5bc>)
 8001724:	494d      	ldr	r1, [pc, #308]	@ (800185c <RFID+0x5b8>)
 8001726:	4843      	ldr	r0, [pc, #268]	@ (8001834 <RFID+0x590>)
 8001728:	f7fe fe5e 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
										}
										break;
 800172c:	e02c      	b.n	8001788 <RFID+0x4e4>
											adduid(keyadd2);
 800172e:	78bb      	ldrb	r3, [r7, #2]
 8001730:	4618      	mov	r0, r3
 8001732:	f001 f8c7 	bl	80028c4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001736:	4a4a      	ldr	r2, [pc, #296]	@ (8001860 <RFID+0x5bc>)
 8001738:	4948      	ldr	r1, [pc, #288]	@ (800185c <RFID+0x5b8>)
 800173a:	483e      	ldr	r0, [pc, #248]	@ (8001834 <RFID+0x590>)
 800173c:	f7fe fe54 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001740:	e022      	b.n	8001788 <RFID+0x4e4>
									case 3:
										if (CheckKey(keyadd2) != 0)
 8001742:	78bb      	ldrb	r3, [r7, #2]
 8001744:	4618      	mov	r0, r3
 8001746:	f001 f9db 	bl	8002b00 <CheckKey>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00e      	beq.n	800176e <RFID+0x4ca>
										{
											CLCD_I2C_Display(&LCD1,"     USER 3"," Card 3 Existed ");
 8001750:	4a39      	ldr	r2, [pc, #228]	@ (8001838 <RFID+0x594>)
 8001752:	494a      	ldr	r1, [pc, #296]	@ (800187c <RFID+0x5d8>)
 8001754:	4837      	ldr	r0, [pc, #220]	@ (8001834 <RFID+0x590>)
 8001756:	f7fe fe47 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 800175a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800175e:	f002 fa47 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001762:	4a40      	ldr	r2, [pc, #256]	@ (8001864 <RFID+0x5c0>)
 8001764:	493d      	ldr	r1, [pc, #244]	@ (800185c <RFID+0x5b8>)
 8001766:	4833      	ldr	r0, [pc, #204]	@ (8001834 <RFID+0x590>)
 8001768:	f7fe fe3e 	bl	80003e8 <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
										}
										break;
 800176c:	e00c      	b.n	8001788 <RFID+0x4e4>
											adduid(keyadd2);
 800176e:	78bb      	ldrb	r3, [r7, #2]
 8001770:	4618      	mov	r0, r3
 8001772:	f001 f8a7 	bl	80028c4 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001776:	4a3b      	ldr	r2, [pc, #236]	@ (8001864 <RFID+0x5c0>)
 8001778:	4938      	ldr	r1, [pc, #224]	@ (800185c <RFID+0x5b8>)
 800177a:	482e      	ldr	r0, [pc, #184]	@ (8001834 <RFID+0x590>)
 800177c:	f7fe fe34 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001780:	e002      	b.n	8001788 <RFID+0x4e4>
									default:
										back12 = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	747b      	strb	r3, [r7, #17]
										break;
 8001786:	bf00      	nop
							while (back12 == 1)
 8001788:	7c7b      	ldrb	r3, [r7, #17]
 800178a:	2b01      	cmp	r3, #1
 800178c:	f43f af3f 	beq.w	800160e <RFID+0x36a>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 8001790:	4a3b      	ldr	r2, [pc, #236]	@ (8001880 <RFID+0x5dc>)
 8001792:	492d      	ldr	r1, [pc, #180]	@ (8001848 <RFID+0x5a4>)
 8001794:	4827      	ldr	r0, [pc, #156]	@ (8001834 <RFID+0x590>)
 8001796:	f7fe fe27 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800179a:	e002      	b.n	80017a2 <RFID+0x4fe>
						default:
							back = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	757b      	strb	r3, [r7, #21]
							break;
 80017a0:	bf00      	nop
				while (back == 1)
 80017a2:	7d7b      	ldrb	r3, [r7, #21]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f43f ade2 	beq.w	800136e <RFID+0xca>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 80017aa:	4a36      	ldr	r2, [pc, #216]	@ (8001884 <RFID+0x5e0>)
 80017ac:	4936      	ldr	r1, [pc, #216]	@ (8001888 <RFID+0x5e4>)
 80017ae:	4821      	ldr	r0, [pc, #132]	@ (8001834 <RFID+0x590>)
 80017b0:	f7fe fe1a 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80017b4:	f000 bc2f 	b.w	8002016 <RFID+0xd72>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80017b8:	4a24      	ldr	r2, [pc, #144]	@ (800184c <RFID+0x5a8>)
 80017ba:	4925      	ldr	r1, [pc, #148]	@ (8001850 <RFID+0x5ac>)
 80017bc:	481d      	ldr	r0, [pc, #116]	@ (8001834 <RFID+0x590>)
 80017be:	f7fe fe13 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 80017c2:	23ff      	movs	r3, #255	@ 0xff
 80017c4:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 80017ca:	f000 bc0e 	b.w	8001fea <RFID+0xd46>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80017ce:	200a      	movs	r0, #10
 80017d0:	f7fe ff64 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80017d4:	4603      	mov	r3, r0
 80017d6:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 80017d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <RFID+0x5b0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d108      	bne.n	80017f2 <RFID+0x54e>
					{
						CLCD_I2C_Clear(&LCD1);
 80017e0:	4814      	ldr	r0, [pc, #80]	@ (8001834 <RFID+0x590>)
 80017e2:	f7fe fdf1 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80017e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ea:	f002 fa01 	bl	8003bf0 <HAL_Delay>
						return;
 80017ee:	f000 bc1a 	b.w	8002026 <RFID+0xd82>
					}
					if (key_pressed =='*')
 80017f2:	797b      	ldrb	r3, [r7, #5]
 80017f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80017f6:	d159      	bne.n	80018ac <RFID+0x608>
					{
						exitmenu = 15;
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <RFID+0x5b0>)
 80017fa:	220f      	movs	r2, #15
 80017fc:	701a      	strb	r2, [r3, #0]
						statusremove++;
 80017fe:	7c3b      	ldrb	r3, [r7, #16]
 8001800:	3301      	adds	r3, #1
 8001802:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 8001804:	7c3b      	ldrb	r3, [r7, #16]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d801      	bhi.n	800180e <RFID+0x56a>
 800180a:	7c3b      	ldrb	r3, [r7, #16]
 800180c:	e000      	b.n	8001810 <RFID+0x56c>
 800180e:	2300      	movs	r3, #0
 8001810:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 8001812:	7c3b      	ldrb	r3, [r7, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <RFID+0x57a>
 8001818:	2b01      	cmp	r3, #1
 800181a:	d03b      	beq.n	8001894 <RFID+0x5f0>
 800181c:	e040      	b.n	80018a0 <RFID+0x5fc>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 800181e:	4a1b      	ldr	r2, [pc, #108]	@ (800188c <RFID+0x5e8>)
 8001820:	491b      	ldr	r1, [pc, #108]	@ (8001890 <RFID+0x5ec>)
 8001822:	4804      	ldr	r0, [pc, #16]	@ (8001834 <RFID+0x590>)
 8001824:	f7fe fde0 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8001828:	e040      	b.n	80018ac <RFID+0x608>
 800182a:	bf00      	nop
 800182c:	0800d2ac 	.word	0x0800d2ac
 8001830:	0800d29c 	.word	0x0800d29c
 8001834:	200003d8 	.word	0x200003d8
 8001838:	0800d314 	.word	0x0800d314
 800183c:	0800d328 	.word	0x0800d328
 8001840:	0800d2c0 	.word	0x0800d2c0
 8001844:	0800d25c 	.word	0x0800d25c
 8001848:	0800d26c 	.word	0x0800d26c
 800184c:	0800d240 	.word	0x0800d240
 8001850:	0800d24c 	.word	0x0800d24c
 8001854:	20000020 	.word	0x20000020
 8001858:	0800d334 	.word	0x0800d334
 800185c:	0800d344 	.word	0x0800d344
 8001860:	0800d354 	.word	0x0800d354
 8001864:	0800d364 	.word	0x0800d364
 8001868:	0800d238 	.word	0x0800d238
 800186c:	0800d2d4 	.word	0x0800d2d4
 8001870:	0800d374 	.word	0x0800d374
 8001874:	0800d2f4 	.word	0x0800d2f4
 8001878:	0800d380 	.word	0x0800d380
 800187c:	0800d38c 	.word	0x0800d38c
 8001880:	0800d278 	.word	0x0800d278
 8001884:	0800d20c 	.word	0x0800d20c
 8001888:	0800d1fc 	.word	0x0800d1fc
 800188c:	0800d398 	.word	0x0800d398
 8001890:	0800d3ac 	.word	0x0800d3ac
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 8001894:	4a9a      	ldr	r2, [pc, #616]	@ (8001b00 <RFID+0x85c>)
 8001896:	499b      	ldr	r1, [pc, #620]	@ (8001b04 <RFID+0x860>)
 8001898:	489b      	ldr	r0, [pc, #620]	@ (8001b08 <RFID+0x864>)
 800189a:	f7fe fda5 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800189e:	e005      	b.n	80018ac <RFID+0x608>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 80018a0:	4a9a      	ldr	r2, [pc, #616]	@ (8001b0c <RFID+0x868>)
 80018a2:	4998      	ldr	r1, [pc, #608]	@ (8001b04 <RFID+0x860>)
 80018a4:	4898      	ldr	r0, [pc, #608]	@ (8001b08 <RFID+0x864>)
 80018a6:	f7fe fd9f 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80018aa:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 80018ac:	797b      	ldrb	r3, [r7, #5]
 80018ae:	2b23      	cmp	r3, #35	@ 0x23
 80018b0:	f040 839b 	bne.w	8001fea <RFID+0xd46>
					{
						CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80018b4:	4a96      	ldr	r2, [pc, #600]	@ (8001b10 <RFID+0x86c>)
 80018b6:	4997      	ldr	r1, [pc, #604]	@ (8001b14 <RFID+0x870>)
 80018b8:	4893      	ldr	r0, [pc, #588]	@ (8001b08 <RFID+0x864>)
 80018ba:	f7fe fd95 	bl	80003e8 <CLCD_I2C_Display>
						exitmenu = 15;
 80018be:	4b96      	ldr	r3, [pc, #600]	@ (8001b18 <RFID+0x874>)
 80018c0:	220f      	movs	r2, #15
 80018c2:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 80018c4:	7c3b      	ldrb	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <RFID+0x62e>
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	f000 8382 	beq.w	8001fd4 <RFID+0xd30>
 80018d0:	e388      	b.n	8001fe4 <RFID+0xd40>
						{
						case 0:
							uint8_t statusrm1 = -1;
 80018d2:	23ff      	movs	r3, #255	@ 0xff
 80018d4:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 80018da:	e371      	b.n	8001fc0 <RFID+0xd1c>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80018dc:	200a      	movs	r0, #10
 80018de:	f7fe fedd 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80018e2:	4603      	mov	r3, r0
 80018e4:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 80018e6:	4b8c      	ldr	r3, [pc, #560]	@ (8001b18 <RFID+0x874>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d107      	bne.n	80018fe <RFID+0x65a>
								{
									CLCD_I2C_Clear(&LCD1);
 80018ee:	4886      	ldr	r0, [pc, #536]	@ (8001b08 <RFID+0x864>)
 80018f0:	f7fe fd6a 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 80018f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018f8:	f002 f97a 	bl	8003bf0 <HAL_Delay>
									return;
 80018fc:	e393      	b.n	8002026 <RFID+0xd82>
								}
								if (key_pressed =='*')
 80018fe:	797b      	ldrb	r3, [r7, #5]
 8001900:	2b2a      	cmp	r3, #42	@ 0x2a
 8001902:	d121      	bne.n	8001948 <RFID+0x6a4>
								{
									statusrm1++;
 8001904:	7bbb      	ldrb	r3, [r7, #14]
 8001906:	3301      	adds	r3, #1
 8001908:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 800190a:	7bbb      	ldrb	r3, [r7, #14]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d801      	bhi.n	8001914 <RFID+0x670>
 8001910:	7bbb      	ldrb	r3, [r7, #14]
 8001912:	e000      	b.n	8001916 <RFID+0x672>
 8001914:	2300      	movs	r3, #0
 8001916:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001918:	7bbb      	ldrb	r3, [r7, #14]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <RFID+0x680>
 800191e:	2b01      	cmp	r3, #1
 8001920:	d006      	beq.n	8001930 <RFID+0x68c>
 8001922:	e00b      	b.n	800193c <RFID+0x698>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001924:	4a7d      	ldr	r2, [pc, #500]	@ (8001b1c <RFID+0x878>)
 8001926:	497e      	ldr	r1, [pc, #504]	@ (8001b20 <RFID+0x87c>)
 8001928:	4877      	ldr	r0, [pc, #476]	@ (8001b08 <RFID+0x864>)
 800192a:	f7fe fd5d 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800192e:	e00b      	b.n	8001948 <RFID+0x6a4>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001930:	4a7c      	ldr	r2, [pc, #496]	@ (8001b24 <RFID+0x880>)
 8001932:	497b      	ldr	r1, [pc, #492]	@ (8001b20 <RFID+0x87c>)
 8001934:	4874      	ldr	r0, [pc, #464]	@ (8001b08 <RFID+0x864>)
 8001936:	f7fe fd57 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800193a:	e005      	b.n	8001948 <RFID+0x6a4>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 800193c:	4a73      	ldr	r2, [pc, #460]	@ (8001b0c <RFID+0x868>)
 800193e:	4978      	ldr	r1, [pc, #480]	@ (8001b20 <RFID+0x87c>)
 8001940:	4871      	ldr	r0, [pc, #452]	@ (8001b08 <RFID+0x864>)
 8001942:	f7fe fd51 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001946:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001948:	797b      	ldrb	r3, [r7, #5]
 800194a:	2b23      	cmp	r3, #35	@ 0x23
 800194c:	f040 8338 	bne.w	8001fc0 <RFID+0xd1c>
								{
									exitmenu = 15;
 8001950:	4b71      	ldr	r3, [pc, #452]	@ (8001b18 <RFID+0x874>)
 8001952:	220f      	movs	r2, #15
 8001954:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <RFID+0x6c0>
 800195c:	2b01      	cmp	r3, #1
 800195e:	f000 82d0 	beq.w	8001f02 <RFID+0xc5e>
 8001962:	e32a      	b.n	8001fba <RFID+0xd16>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001964:	4a6a      	ldr	r2, [pc, #424]	@ (8001b10 <RFID+0x86c>)
 8001966:	496b      	ldr	r1, [pc, #428]	@ (8001b14 <RFID+0x870>)
 8001968:	4867      	ldr	r0, [pc, #412]	@ (8001b08 <RFID+0x864>)
 800196a:	f7fe fd3d 	bl	80003e8 <CLCD_I2C_Display>
										uint8_t statusadd = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001972:	2301      	movs	r3, #1
 8001974:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8001976:	e2ba      	b.n	8001eee <RFID+0xc4a>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001978:	200a      	movs	r0, #10
 800197a:	f7fe fe8f 	bl	800069c <KeyPad_WaitForKeyGetChar>
 800197e:	4603      	mov	r3, r0
 8001980:	717b      	strb	r3, [r7, #5]
											if (exitmenu == 0)
 8001982:	4b65      	ldr	r3, [pc, #404]	@ (8001b18 <RFID+0x874>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d107      	bne.n	800199a <RFID+0x6f6>
											{
												CLCD_I2C_Clear(&LCD1);
 800198a:	485f      	ldr	r0, [pc, #380]	@ (8001b08 <RFID+0x864>)
 800198c:	f7fe fd1c 	bl	80003c8 <CLCD_I2C_Clear>
												HAL_Delay(1000);
 8001990:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001994:	f002 f92c 	bl	8003bf0 <HAL_Delay>
												return;
 8001998:	e345      	b.n	8002026 <RFID+0xd82>
											}
											if (key_pressed =='*')
 800199a:	797b      	ldrb	r3, [r7, #5]
 800199c:	2b2a      	cmp	r3, #42	@ 0x2a
 800199e:	d124      	bne.n	80019ea <RFID+0x746>
											{
												exitmenu = 15;
 80019a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b18 <RFID+0x874>)
 80019a2:	220f      	movs	r2, #15
 80019a4:	701a      	strb	r2, [r3, #0]
												statusadd++;
 80019a6:	7b3b      	ldrb	r3, [r7, #12]
 80019a8:	3301      	adds	r3, #1
 80019aa:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 80019ac:	7b3b      	ldrb	r3, [r7, #12]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d801      	bhi.n	80019b6 <RFID+0x712>
 80019b2:	7b3b      	ldrb	r3, [r7, #12]
 80019b4:	e000      	b.n	80019b8 <RFID+0x714>
 80019b6:	2300      	movs	r3, #0
 80019b8:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 80019ba:	7b3b      	ldrb	r3, [r7, #12]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d002      	beq.n	80019c6 <RFID+0x722>
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d006      	beq.n	80019d2 <RFID+0x72e>
 80019c4:	e00b      	b.n	80019de <RFID+0x73a>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 80019c6:	4a58      	ldr	r2, [pc, #352]	@ (8001b28 <RFID+0x884>)
 80019c8:	4958      	ldr	r1, [pc, #352]	@ (8001b2c <RFID+0x888>)
 80019ca:	484f      	ldr	r0, [pc, #316]	@ (8001b08 <RFID+0x864>)
 80019cc:	f7fe fd0c 	bl	80003e8 <CLCD_I2C_Display>
													break;
 80019d0:	e00b      	b.n	80019ea <RFID+0x746>
												case 2:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 80019d2:	4a57      	ldr	r2, [pc, #348]	@ (8001b30 <RFID+0x88c>)
 80019d4:	4955      	ldr	r1, [pc, #340]	@ (8001b2c <RFID+0x888>)
 80019d6:	484c      	ldr	r0, [pc, #304]	@ (8001b08 <RFID+0x864>)
 80019d8:	f7fe fd06 	bl	80003e8 <CLCD_I2C_Display>
													break;
 80019dc:	e005      	b.n	80019ea <RFID+0x746>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");													break;
 80019de:	4a4b      	ldr	r2, [pc, #300]	@ (8001b0c <RFID+0x868>)
 80019e0:	4952      	ldr	r1, [pc, #328]	@ (8001b2c <RFID+0x888>)
 80019e2:	4849      	ldr	r0, [pc, #292]	@ (8001b08 <RFID+0x864>)
 80019e4:	f7fe fd00 	bl	80003e8 <CLCD_I2C_Display>
 80019e8:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 80019ea:	797b      	ldrb	r3, [r7, #5]
 80019ec:	2b23      	cmp	r3, #35	@ 0x23
 80019ee:	f040 827e 	bne.w	8001eee <RFID+0xc4a>
											{
												exitmenu = 15;
 80019f2:	4b49      	ldr	r3, [pc, #292]	@ (8001b18 <RFID+0x874>)
 80019f4:	220f      	movs	r2, #15
 80019f6:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 80019f8:	7b3b      	ldrb	r3, [r7, #12]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d003      	beq.n	8001a06 <RFID+0x762>
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	f000 8143 	beq.w	8001c8a <RFID+0x9e6>
 8001a04:	e270      	b.n	8001ee8 <RFID+0xc44>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001a06:	4a42      	ldr	r2, [pc, #264]	@ (8001b10 <RFID+0x86c>)
 8001a08:	4942      	ldr	r1, [pc, #264]	@ (8001b14 <RFID+0x870>)
 8001a0a:	483f      	ldr	r0, [pc, #252]	@ (8001b08 <RFID+0x864>)
 8001a0c:	f7fe fcec 	bl	80003e8 <CLCD_I2C_Display>
													uint8_t statusadd1 = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8001a14:	2301      	movs	r3, #1
 8001a16:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 8001a18:	e12d      	b.n	8001c76 <RFID+0x9d2>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001a1a:	200a      	movs	r0, #10
 8001a1c:	f7fe fe3e 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001a20:	4603      	mov	r3, r0
 8001a22:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001a24:	4b3c      	ldr	r3, [pc, #240]	@ (8001b18 <RFID+0x874>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <RFID+0x798>
														{
															CLCD_I2C_Clear(&LCD1);
 8001a2c:	4836      	ldr	r0, [pc, #216]	@ (8001b08 <RFID+0x864>)
 8001a2e:	f7fe fccb 	bl	80003c8 <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001a32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a36:	f002 f8db 	bl	8003bf0 <HAL_Delay>
															return;
 8001a3a:	e2f4      	b.n	8002026 <RFID+0xd82>
														}
														if (key_pressed =='*')
 8001a3c:	797b      	ldrb	r3, [r7, #5]
 8001a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a40:	d12e      	bne.n	8001aa0 <RFID+0x7fc>
														{
															exitmenu = 15;
 8001a42:	4b35      	ldr	r3, [pc, #212]	@ (8001b18 <RFID+0x874>)
 8001a44:	220f      	movs	r2, #15
 8001a46:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001a48:	7abb      	ldrb	r3, [r7, #10]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 8001a4e:	7abb      	ldrb	r3, [r7, #10]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d801      	bhi.n	8001a58 <RFID+0x7b4>
 8001a54:	7abb      	ldrb	r3, [r7, #10]
 8001a56:	e000      	b.n	8001a5a <RFID+0x7b6>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001a5c:	7abb      	ldrb	r3, [r7, #10]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d012      	beq.n	8001a88 <RFID+0x7e4>
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	dc16      	bgt.n	8001a94 <RFID+0x7f0>
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d002      	beq.n	8001a70 <RFID+0x7cc>
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d006      	beq.n	8001a7c <RFID+0x7d8>
 8001a6e:	e011      	b.n	8001a94 <RFID+0x7f0>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001a70:	4a30      	ldr	r2, [pc, #192]	@ (8001b34 <RFID+0x890>)
 8001a72:	4931      	ldr	r1, [pc, #196]	@ (8001b38 <RFID+0x894>)
 8001a74:	4824      	ldr	r0, [pc, #144]	@ (8001b08 <RFID+0x864>)
 8001a76:	f7fe fcb7 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a7a:	e011      	b.n	8001aa0 <RFID+0x7fc>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001a7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001b3c <RFID+0x898>)
 8001a7e:	492e      	ldr	r1, [pc, #184]	@ (8001b38 <RFID+0x894>)
 8001a80:	4821      	ldr	r0, [pc, #132]	@ (8001b08 <RFID+0x864>)
 8001a82:	f7fe fcb1 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a86:	e00b      	b.n	8001aa0 <RFID+0x7fc>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001a88:	4a2d      	ldr	r2, [pc, #180]	@ (8001b40 <RFID+0x89c>)
 8001a8a:	492b      	ldr	r1, [pc, #172]	@ (8001b38 <RFID+0x894>)
 8001a8c:	481e      	ldr	r0, [pc, #120]	@ (8001b08 <RFID+0x864>)
 8001a8e:	f7fe fcab 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a92:	e005      	b.n	8001aa0 <RFID+0x7fc>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> Back");
 8001a94:	4a1d      	ldr	r2, [pc, #116]	@ (8001b0c <RFID+0x868>)
 8001a96:	4928      	ldr	r1, [pc, #160]	@ (8001b38 <RFID+0x894>)
 8001a98:	481b      	ldr	r0, [pc, #108]	@ (8001b08 <RFID+0x864>)
 8001a9a:	f7fe fca5 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001a9e:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001aa0:	797b      	ldrb	r3, [r7, #5]
 8001aa2:	2b23      	cmp	r3, #35	@ 0x23
 8001aa4:	f040 80e7 	bne.w	8001c76 <RFID+0x9d2>
														{
															exitmenu = 15;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <RFID+0x874>)
 8001aaa:	220f      	movs	r2, #15
 8001aac:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001aae:	7b3b      	ldrb	r3, [r7, #12]
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	7abb      	ldrb	r3, [r7, #10]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	70fb      	strb	r3, [r7, #3]
															switch (statusadd1)
 8001aba:	7abb      	ldrb	r3, [r7, #10]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	f000 809f 	beq.w	8001c00 <RFID+0x95c>
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	f300 80d4 	bgt.w	8001c70 <RFID+0x9cc>
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d002      	beq.n	8001ad2 <RFID+0x82e>
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d05f      	beq.n	8001b90 <RFID+0x8ec>
 8001ad0:	e0ce      	b.n	8001c70 <RFID+0x9cc>
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 f813 	bl	8002b00 <CheckKey>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d135      	bne.n	8001b4c <RFID+0x8a8>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 1", "  Do Not Exist");
 8001ae0:	4a18      	ldr	r2, [pc, #96]	@ (8001b44 <RFID+0x8a0>)
 8001ae2:	4919      	ldr	r1, [pc, #100]	@ (8001b48 <RFID+0x8a4>)
 8001ae4:	4808      	ldr	r0, [pc, #32]	@ (8001b08 <RFID+0x864>)
 8001ae6:	f7fe fc7f 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001aea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aee:	f002 f87f 	bl	8003bf0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001af2:	4a10      	ldr	r2, [pc, #64]	@ (8001b34 <RFID+0x890>)
 8001af4:	4910      	ldr	r1, [pc, #64]	@ (8001b38 <RFID+0x894>)
 8001af6:	4804      	ldr	r0, [pc, #16]	@ (8001b08 <RFID+0x864>)
 8001af8:	f7fe fc76 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
																	}
																}
																break;
 8001afc:	e0bb      	b.n	8001c76 <RFID+0x9d2>
 8001afe:	bf00      	nop
 8001b00:	0800d3bc 	.word	0x0800d3bc
 8001b04:	0800d3ac 	.word	0x0800d3ac
 8001b08:	200003d8 	.word	0x200003d8
 8001b0c:	0800d238 	.word	0x0800d238
 8001b10:	0800d240 	.word	0x0800d240
 8001b14:	0800d24c 	.word	0x0800d24c
 8001b18:	20000020 	.word	0x20000020
 8001b1c:	0800d3cc 	.word	0x0800d3cc
 8001b20:	0800d3dc 	.word	0x0800d3dc
 8001b24:	0800d3ec 	.word	0x0800d3ec
 8001b28:	0800d3fc 	.word	0x0800d3fc
 8001b2c:	0800d410 	.word	0x0800d410
 8001b30:	0800d420 	.word	0x0800d420
 8001b34:	0800d430 	.word	0x0800d430
 8001b38:	0800d440 	.word	0x0800d440
 8001b3c:	0800d450 	.word	0x0800d450
 8001b40:	0800d460 	.word	0x0800d460
 8001b44:	0800d470 	.word	0x0800d470
 8001b48:	0800d2e8 	.word	0x0800d2e8
																	removeuid(CheckKey(keyadd1));
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 ffd6 	bl	8002b00 <CheckKey>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 f800 	bl	8002b5c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 1 ","   SUCCESSFUL  ");
 8001b5c:	4aab      	ldr	r2, [pc, #684]	@ (8001e0c <RFID+0xb68>)
 8001b5e:	49ac      	ldr	r1, [pc, #688]	@ (8001e10 <RFID+0xb6c>)
 8001b60:	48ac      	ldr	r0, [pc, #688]	@ (8001e14 <RFID+0xb70>)
 8001b62:	f7fe fc41 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001b66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b6a:	f002 f841 	bl	8003bf0 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001b6e:	f000 fe77 	bl	8002860 <checkcountUID>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <RFID+0x8e0>
																		startadd();
 8001b78:	f000 fffe 	bl	8002b78 <startadd>
																		exitmenu = 0;
 8001b7c:	4ba6      	ldr	r3, [pc, #664]	@ (8001e18 <RFID+0xb74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
																break;
 8001b82:	e078      	b.n	8001c76 <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001b84:	4aa5      	ldr	r2, [pc, #660]	@ (8001e1c <RFID+0xb78>)
 8001b86:	49a6      	ldr	r1, [pc, #664]	@ (8001e20 <RFID+0xb7c>)
 8001b88:	48a2      	ldr	r0, [pc, #648]	@ (8001e14 <RFID+0xb70>)
 8001b8a:	f7fe fc2d 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001b8e:	e072      	b.n	8001c76 <RFID+0x9d2>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 ffb4 	bl	8002b00 <CheckKey>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10e      	bne.n	8001bbc <RFID+0x918>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 2", "  Do Not Exist");
 8001b9e:	4aa1      	ldr	r2, [pc, #644]	@ (8001e24 <RFID+0xb80>)
 8001ba0:	49a1      	ldr	r1, [pc, #644]	@ (8001e28 <RFID+0xb84>)
 8001ba2:	489c      	ldr	r0, [pc, #624]	@ (8001e14 <RFID+0xb70>)
 8001ba4:	f7fe fc20 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001ba8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bac:	f002 f820 	bl	8003bf0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001bb0:	4a9e      	ldr	r2, [pc, #632]	@ (8001e2c <RFID+0xb88>)
 8001bb2:	499b      	ldr	r1, [pc, #620]	@ (8001e20 <RFID+0xb7c>)
 8001bb4:	4897      	ldr	r0, [pc, #604]	@ (8001e14 <RFID+0xb70>)
 8001bb6:	f7fe fc17 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
																	}
																}
																break;
 8001bba:	e05c      	b.n	8001c76 <RFID+0x9d2>
																	removeuid(CheckKey(keyadd1));
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 ff9e 	bl	8002b00 <CheckKey>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 ffc8 	bl	8002b5c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 2 ","   SUCCESSFUL  ");
 8001bcc:	4a8f      	ldr	r2, [pc, #572]	@ (8001e0c <RFID+0xb68>)
 8001bce:	4998      	ldr	r1, [pc, #608]	@ (8001e30 <RFID+0xb8c>)
 8001bd0:	4890      	ldr	r0, [pc, #576]	@ (8001e14 <RFID+0xb70>)
 8001bd2:	f7fe fc09 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001bd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bda:	f002 f809 	bl	8003bf0 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001bde:	f000 fe3f 	bl	8002860 <checkcountUID>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <RFID+0x950>
																		startadd();
 8001be8:	f000 ffc6 	bl	8002b78 <startadd>
																		exitmenu = 0;
 8001bec:	4b8a      	ldr	r3, [pc, #552]	@ (8001e18 <RFID+0xb74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
																break;
 8001bf2:	e040      	b.n	8001c76 <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001bf4:	4a8d      	ldr	r2, [pc, #564]	@ (8001e2c <RFID+0xb88>)
 8001bf6:	498a      	ldr	r1, [pc, #552]	@ (8001e20 <RFID+0xb7c>)
 8001bf8:	4886      	ldr	r0, [pc, #536]	@ (8001e14 <RFID+0xb70>)
 8001bfa:	f7fe fbf5 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001bfe:	e03a      	b.n	8001c76 <RFID+0x9d2>
															case 3:
																if (CheckKey(keyadd1) == 0)
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 ff7c 	bl	8002b00 <CheckKey>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10e      	bne.n	8001c2c <RFID+0x988>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 3", "  Do Not Exist");
 8001c0e:	4a85      	ldr	r2, [pc, #532]	@ (8001e24 <RFID+0xb80>)
 8001c10:	4988      	ldr	r1, [pc, #544]	@ (8001e34 <RFID+0xb90>)
 8001c12:	4880      	ldr	r0, [pc, #512]	@ (8001e14 <RFID+0xb70>)
 8001c14:	f7fe fbe8 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c1c:	f001 ffe8 	bl	8003bf0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001c20:	4a85      	ldr	r2, [pc, #532]	@ (8001e38 <RFID+0xb94>)
 8001c22:	497f      	ldr	r1, [pc, #508]	@ (8001e20 <RFID+0xb7c>)
 8001c24:	487b      	ldr	r0, [pc, #492]	@ (8001e14 <RFID+0xb70>)
 8001c26:	f7fe fbdf 	bl	80003e8 <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
																	}
																}
																break;
 8001c2a:	e024      	b.n	8001c76 <RFID+0x9d2>
																	removeuid(CheckKey(keyadd1));
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 ff66 	bl	8002b00 <CheckKey>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 ff90 	bl	8002b5c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 3 ","   SUCCESSFUL  ");
 8001c3c:	4a73      	ldr	r2, [pc, #460]	@ (8001e0c <RFID+0xb68>)
 8001c3e:	497f      	ldr	r1, [pc, #508]	@ (8001e3c <RFID+0xb98>)
 8001c40:	4874      	ldr	r0, [pc, #464]	@ (8001e14 <RFID+0xb70>)
 8001c42:	f7fe fbd1 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001c46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c4a:	f001 ffd1 	bl	8003bf0 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001c4e:	f000 fe07 	bl	8002860 <checkcountUID>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <RFID+0x9c0>
																		startadd();
 8001c58:	f000 ff8e 	bl	8002b78 <startadd>
																		exitmenu = 0;
 8001c5c:	4b6e      	ldr	r3, [pc, #440]	@ (8001e18 <RFID+0xb74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
																break;
 8001c62:	e008      	b.n	8001c76 <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001c64:	4a74      	ldr	r2, [pc, #464]	@ (8001e38 <RFID+0xb94>)
 8001c66:	496e      	ldr	r1, [pc, #440]	@ (8001e20 <RFID+0xb7c>)
 8001c68:	486a      	ldr	r0, [pc, #424]	@ (8001e14 <RFID+0xb70>)
 8001c6a:	f7fe fbbd 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001c6e:	e002      	b.n	8001c76 <RFID+0x9d2>
															default:
																back11 = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	727b      	strb	r3, [r7, #9]
																break;
 8001c74:	bf00      	nop
													while (back11 == 1)
 8001c76:	7a7b      	ldrb	r3, [r7, #9]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	f43f aece 	beq.w	8001a1a <RFID+0x776>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001c7e:	4a70      	ldr	r2, [pc, #448]	@ (8001e40 <RFID+0xb9c>)
 8001c80:	4970      	ldr	r1, [pc, #448]	@ (8001e44 <RFID+0xba0>)
 8001c82:	4864      	ldr	r0, [pc, #400]	@ (8001e14 <RFID+0xb70>)
 8001c84:	f7fe fbb0 	bl	80003e8 <CLCD_I2C_Display>
													break;
 8001c88:	e131      	b.n	8001eee <RFID+0xc4a>
												case 2:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001c8a:	4a6f      	ldr	r2, [pc, #444]	@ (8001e48 <RFID+0xba4>)
 8001c8c:	496f      	ldr	r1, [pc, #444]	@ (8001e4c <RFID+0xba8>)
 8001c8e:	4861      	ldr	r0, [pc, #388]	@ (8001e14 <RFID+0xb70>)
 8001c90:	f7fe fbaa 	bl	80003e8 <CLCD_I2C_Display>
													uint8_t statusadd2 = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 8001c9c:	e11a      	b.n	8001ed4 <RFID+0xc30>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f7fe fcfc 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e18 <RFID+0xb74>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <RFID+0xa1c>
														{
															CLCD_I2C_Clear(&LCD1);
 8001cb0:	4858      	ldr	r0, [pc, #352]	@ (8001e14 <RFID+0xb70>)
 8001cb2:	f7fe fb89 	bl	80003c8 <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001cb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cba:	f001 ff99 	bl	8003bf0 <HAL_Delay>
															return;
 8001cbe:	e1b2      	b.n	8002026 <RFID+0xd82>
														}
														if (key_pressed =='*')
 8001cc0:	797b      	ldrb	r3, [r7, #5]
 8001cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cc4:	d12e      	bne.n	8001d24 <RFID+0xa80>
														{
															exitmenu = 15;
 8001cc6:	4b54      	ldr	r3, [pc, #336]	@ (8001e18 <RFID+0xb74>)
 8001cc8:	220f      	movs	r2, #15
 8001cca:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8001ccc:	7a3b      	ldrb	r3, [r7, #8]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001cd2:	7a3b      	ldrb	r3, [r7, #8]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d801      	bhi.n	8001cdc <RFID+0xa38>
 8001cd8:	7a3b      	ldrb	r3, [r7, #8]
 8001cda:	e000      	b.n	8001cde <RFID+0xa3a>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 8001ce0:	7a3b      	ldrb	r3, [r7, #8]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d012      	beq.n	8001d0c <RFID+0xa68>
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	dc16      	bgt.n	8001d18 <RFID+0xa74>
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d002      	beq.n	8001cf4 <RFID+0xa50>
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d006      	beq.n	8001d00 <RFID+0xa5c>
 8001cf2:	e011      	b.n	8001d18 <RFID+0xa74>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001cf4:	4a56      	ldr	r2, [pc, #344]	@ (8001e50 <RFID+0xbac>)
 8001cf6:	4957      	ldr	r1, [pc, #348]	@ (8001e54 <RFID+0xbb0>)
 8001cf8:	4846      	ldr	r0, [pc, #280]	@ (8001e14 <RFID+0xb70>)
 8001cfa:	f7fe fb75 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001cfe:	e011      	b.n	8001d24 <RFID+0xa80>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001d00:	4a55      	ldr	r2, [pc, #340]	@ (8001e58 <RFID+0xbb4>)
 8001d02:	4954      	ldr	r1, [pc, #336]	@ (8001e54 <RFID+0xbb0>)
 8001d04:	4843      	ldr	r0, [pc, #268]	@ (8001e14 <RFID+0xb70>)
 8001d06:	f7fe fb6f 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001d0a:	e00b      	b.n	8001d24 <RFID+0xa80>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001d0c:	4a53      	ldr	r2, [pc, #332]	@ (8001e5c <RFID+0xbb8>)
 8001d0e:	4951      	ldr	r1, [pc, #324]	@ (8001e54 <RFID+0xbb0>)
 8001d10:	4840      	ldr	r0, [pc, #256]	@ (8001e14 <RFID+0xb70>)
 8001d12:	f7fe fb69 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001d16:	e005      	b.n	8001d24 <RFID+0xa80>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> Back");
 8001d18:	4a51      	ldr	r2, [pc, #324]	@ (8001e60 <RFID+0xbbc>)
 8001d1a:	494e      	ldr	r1, [pc, #312]	@ (8001e54 <RFID+0xbb0>)
 8001d1c:	483d      	ldr	r0, [pc, #244]	@ (8001e14 <RFID+0xb70>)
 8001d1e:	f7fe fb63 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001d22:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001d24:	797b      	ldrb	r3, [r7, #5]
 8001d26:	2b23      	cmp	r3, #35	@ 0x23
 8001d28:	f040 80d4 	bne.w	8001ed4 <RFID+0xc30>
														{
															exitmenu = 15;
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e18 <RFID+0xb74>)
 8001d2e:	220f      	movs	r2, #15
 8001d30:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8001d32:	7b3b      	ldrb	r3, [r7, #12]
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	7a3b      	ldrb	r3, [r7, #8]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	713b      	strb	r3, [r7, #4]
															switch (statusadd2)
 8001d3e:	7a3b      	ldrb	r3, [r7, #8]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	f000 8097 	beq.w	8001e74 <RFID+0xbd0>
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	f300 80c1 	bgt.w	8001ece <RFID+0xc2a>
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d002      	beq.n	8001d56 <RFID+0xab2>
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d02d      	beq.n	8001db0 <RFID+0xb0c>
 8001d54:	e0bb      	b.n	8001ece <RFID+0xc2a>
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 8001d56:	793b      	ldrb	r3, [r7, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fed1 	bl	8002b00 <CheckKey>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10e      	bne.n	8001d82 <RFID+0xade>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 1","  Do Not Exist");
 8001d64:	4a2f      	ldr	r2, [pc, #188]	@ (8001e24 <RFID+0xb80>)
 8001d66:	493f      	ldr	r1, [pc, #252]	@ (8001e64 <RFID+0xbc0>)
 8001d68:	482a      	ldr	r0, [pc, #168]	@ (8001e14 <RFID+0xb70>)
 8001d6a:	f7fe fb3d 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001d6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d72:	f001 ff3d 	bl	8003bf0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001d76:	4a36      	ldr	r2, [pc, #216]	@ (8001e50 <RFID+0xbac>)
 8001d78:	4936      	ldr	r1, [pc, #216]	@ (8001e54 <RFID+0xbb0>)
 8001d7a:	4826      	ldr	r0, [pc, #152]	@ (8001e14 <RFID+0xb70>)
 8001d7c:	f7fe fb34 	bl	80003e8 <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
																}
																break;
 8001d80:	e0a8      	b.n	8001ed4 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 8001d82:	793b      	ldrb	r3, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 febb 	bl	8002b00 <CheckKey>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fee5 	bl	8002b5c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
 8001d92:	4a1e      	ldr	r2, [pc, #120]	@ (8001e0c <RFID+0xb68>)
 8001d94:	4934      	ldr	r1, [pc, #208]	@ (8001e68 <RFID+0xbc4>)
 8001d96:	481f      	ldr	r0, [pc, #124]	@ (8001e14 <RFID+0xb70>)
 8001d98:	f7fe fb26 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001d9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001da0:	f001 ff26 	bl	8003bf0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001da4:	4a2a      	ldr	r2, [pc, #168]	@ (8001e50 <RFID+0xbac>)
 8001da6:	492b      	ldr	r1, [pc, #172]	@ (8001e54 <RFID+0xbb0>)
 8001da8:	481a      	ldr	r0, [pc, #104]	@ (8001e14 <RFID+0xb70>)
 8001daa:	f7fe fb1d 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001dae:	e091      	b.n	8001ed4 <RFID+0xc30>
															case 2:
																if (CheckKey(keyadd2) == 0)
 8001db0:	793b      	ldrb	r3, [r7, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fea4 	bl	8002b00 <CheckKey>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10e      	bne.n	8001ddc <RFID+0xb38>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 2","  Do Not Exist");
 8001dbe:	4a19      	ldr	r2, [pc, #100]	@ (8001e24 <RFID+0xb80>)
 8001dc0:	492a      	ldr	r1, [pc, #168]	@ (8001e6c <RFID+0xbc8>)
 8001dc2:	4814      	ldr	r0, [pc, #80]	@ (8001e14 <RFID+0xb70>)
 8001dc4:	f7fe fb10 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001dc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dcc:	f001 ff10 	bl	8003bf0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001dd0:	4a21      	ldr	r2, [pc, #132]	@ (8001e58 <RFID+0xbb4>)
 8001dd2:	4920      	ldr	r1, [pc, #128]	@ (8001e54 <RFID+0xbb0>)
 8001dd4:	480f      	ldr	r0, [pc, #60]	@ (8001e14 <RFID+0xb70>)
 8001dd6:	f7fe fb07 	bl	80003e8 <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
																}
																break;
 8001dda:	e07b      	b.n	8001ed4 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 8001ddc:	793b      	ldrb	r3, [r7, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fe8e 	bl	8002b00 <CheckKey>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 feb8 	bl	8002b5c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
 8001dec:	4a07      	ldr	r2, [pc, #28]	@ (8001e0c <RFID+0xb68>)
 8001dee:	4920      	ldr	r1, [pc, #128]	@ (8001e70 <RFID+0xbcc>)
 8001df0:	4808      	ldr	r0, [pc, #32]	@ (8001e14 <RFID+0xb70>)
 8001df2:	f7fe faf9 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001df6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dfa:	f001 fef9 	bl	8003bf0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001dfe:	4a16      	ldr	r2, [pc, #88]	@ (8001e58 <RFID+0xbb4>)
 8001e00:	4914      	ldr	r1, [pc, #80]	@ (8001e54 <RFID+0xbb0>)
 8001e02:	4804      	ldr	r0, [pc, #16]	@ (8001e14 <RFID+0xb70>)
 8001e04:	f7fe faf0 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001e08:	e064      	b.n	8001ed4 <RFID+0xc30>
 8001e0a:	bf00      	nop
 8001e0c:	0800d480 	.word	0x0800d480
 8001e10:	0800d490 	.word	0x0800d490
 8001e14:	200003d8 	.word	0x200003d8
 8001e18:	20000020 	.word	0x20000020
 8001e1c:	0800d430 	.word	0x0800d430
 8001e20:	0800d440 	.word	0x0800d440
 8001e24:	0800d470 	.word	0x0800d470
 8001e28:	0800d308 	.word	0x0800d308
 8001e2c:	0800d450 	.word	0x0800d450
 8001e30:	0800d4a4 	.word	0x0800d4a4
 8001e34:	0800d328 	.word	0x0800d328
 8001e38:	0800d460 	.word	0x0800d460
 8001e3c:	0800d4b8 	.word	0x0800d4b8
 8001e40:	0800d3fc 	.word	0x0800d3fc
 8001e44:	0800d410 	.word	0x0800d410
 8001e48:	0800d240 	.word	0x0800d240
 8001e4c:	0800d24c 	.word	0x0800d24c
 8001e50:	0800d4cc 	.word	0x0800d4cc
 8001e54:	0800d4dc 	.word	0x0800d4dc
 8001e58:	0800d4ec 	.word	0x0800d4ec
 8001e5c:	0800d4fc 	.word	0x0800d4fc
 8001e60:	0800d238 	.word	0x0800d238
 8001e64:	0800d374 	.word	0x0800d374
 8001e68:	0800d50c 	.word	0x0800d50c
 8001e6c:	0800d380 	.word	0x0800d380
 8001e70:	0800d520 	.word	0x0800d520
															case 3:
																if (CheckKey(keyadd2) == 0)
 8001e74:	793b      	ldrb	r3, [r7, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fe42 	bl	8002b00 <CheckKey>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10e      	bne.n	8001ea0 <RFID+0xbfc>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 3","  Do Not Exist");
 8001e82:	4a6a      	ldr	r2, [pc, #424]	@ (800202c <RFID+0xd88>)
 8001e84:	496a      	ldr	r1, [pc, #424]	@ (8002030 <RFID+0xd8c>)
 8001e86:	486b      	ldr	r0, [pc, #428]	@ (8002034 <RFID+0xd90>)
 8001e88:	f7fe faae 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001e8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e90:	f001 feae 	bl	8003bf0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001e94:	4a68      	ldr	r2, [pc, #416]	@ (8002038 <RFID+0xd94>)
 8001e96:	4969      	ldr	r1, [pc, #420]	@ (800203c <RFID+0xd98>)
 8001e98:	4866      	ldr	r0, [pc, #408]	@ (8002034 <RFID+0xd90>)
 8001e9a:	f7fe faa5 	bl	80003e8 <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
																}
																break;
 8001e9e:	e019      	b.n	8001ed4 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 8001ea0:	793b      	ldrb	r3, [r7, #4]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fe2c 	bl	8002b00 <CheckKey>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fe56 	bl	8002b5c <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
 8001eb0:	4a63      	ldr	r2, [pc, #396]	@ (8002040 <RFID+0xd9c>)
 8001eb2:	4964      	ldr	r1, [pc, #400]	@ (8002044 <RFID+0xda0>)
 8001eb4:	485f      	ldr	r0, [pc, #380]	@ (8002034 <RFID+0xd90>)
 8001eb6:	f7fe fa97 	bl	80003e8 <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001eba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ebe:	f001 fe97 	bl	8003bf0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001ec2:	4a5d      	ldr	r2, [pc, #372]	@ (8002038 <RFID+0xd94>)
 8001ec4:	495d      	ldr	r1, [pc, #372]	@ (800203c <RFID+0xd98>)
 8001ec6:	485b      	ldr	r0, [pc, #364]	@ (8002034 <RFID+0xd90>)
 8001ec8:	f7fe fa8e 	bl	80003e8 <CLCD_I2C_Display>
																break;
 8001ecc:	e002      	b.n	8001ed4 <RFID+0xc30>
															default:
																back12 = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	71fb      	strb	r3, [r7, #7]
																break;
 8001ed2:	bf00      	nop
													while (back12 == 1)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	f43f aee1 	beq.w	8001c9e <RFID+0x9fa>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001edc:	4a5a      	ldr	r2, [pc, #360]	@ (8002048 <RFID+0xda4>)
 8001ede:	495b      	ldr	r1, [pc, #364]	@ (800204c <RFID+0xda8>)
 8001ee0:	4854      	ldr	r0, [pc, #336]	@ (8002034 <RFID+0xd90>)
 8001ee2:	f7fe fa81 	bl	80003e8 <CLCD_I2C_Display>
													break;
 8001ee6:	e002      	b.n	8001eee <RFID+0xc4a>
												default:
													backrm10 = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	72fb      	strb	r3, [r7, #11]
													break;
 8001eec:	bf00      	nop
										while (backrm10 == 1)
 8001eee:	7afb      	ldrb	r3, [r7, #11]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	f43f ad41 	beq.w	8001978 <RFID+0x6d4>
												}
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001ef6:	4a56      	ldr	r2, [pc, #344]	@ (8002050 <RFID+0xdac>)
 8001ef8:	4956      	ldr	r1, [pc, #344]	@ (8002054 <RFID+0xdb0>)
 8001efa:	484e      	ldr	r0, [pc, #312]	@ (8002034 <RFID+0xd90>)
 8001efc:	f7fe fa74 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001f00:	e05e      	b.n	8001fc0 <RFID+0xd1c>
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001f02:	4a55      	ldr	r2, [pc, #340]	@ (8002058 <RFID+0xdb4>)
 8001f04:	4955      	ldr	r1, [pc, #340]	@ (800205c <RFID+0xdb8>)
 8001f06:	484b      	ldr	r0, [pc, #300]	@ (8002034 <RFID+0xd90>)
 8001f08:	f7fe fa6e 	bl	80003e8 <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8001f10:	e04a      	b.n	8001fa8 <RFID+0xd04>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001f12:	200a      	movs	r0, #10
 8001f14:	f7fe fbc2 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	717b      	strb	r3, [r7, #5]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 8001f1c:	4850      	ldr	r0, [pc, #320]	@ (8002060 <RFID+0xdbc>)
 8001f1e:	f001 f9cf 	bl	80032c0 <TM_MFRC522_Check>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d13a      	bne.n	8001f9e <RFID+0xcfa>
											{
												if (CheckListUID(CardID) != 0)
 8001f28:	484d      	ldr	r0, [pc, #308]	@ (8002060 <RFID+0xdbc>)
 8001f2a:	f000 fc69 	bl	8002800 <CheckListUID>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d026      	beq.n	8001f82 <RFID+0xcde>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8001f34:	484a      	ldr	r0, [pc, #296]	@ (8002060 <RFID+0xdbc>)
 8001f36:	f000 fc63 	bl	8002800 <CheckListUID>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fddf 	bl	8002b00 <CheckKey>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fe09 	bl	8002b5c <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 8001f4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002040 <RFID+0xd9c>)
 8001f4c:	4945      	ldr	r1, [pc, #276]	@ (8002064 <RFID+0xdc0>)
 8001f4e:	4839      	ldr	r0, [pc, #228]	@ (8002034 <RFID+0xd90>)
 8001f50:	f7fe fa4a 	bl	80003e8 <CLCD_I2C_Display>
													HAL_Delay(1000);
 8001f54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f58:	f001 fe4a 	bl	8003bf0 <HAL_Delay>
													if (checkcountUID() == 0)
 8001f5c:	f000 fc80 	bl	8002860 <checkcountUID>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d107      	bne.n	8001f76 <RFID+0xcd2>
													{
														startadd();
 8001f66:	f000 fe07 	bl	8002b78 <startadd>
														rmquet = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 8001f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002068 <RFID+0xdc4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
														return;
 8001f74:	e057      	b.n	8002026 <RFID+0xd82>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001f76:	4a38      	ldr	r2, [pc, #224]	@ (8002058 <RFID+0xdb4>)
 8001f78:	4938      	ldr	r1, [pc, #224]	@ (800205c <RFID+0xdb8>)
 8001f7a:	482e      	ldr	r0, [pc, #184]	@ (8002034 <RFID+0xd90>)
 8001f7c:	f7fe fa34 	bl	80003e8 <CLCD_I2C_Display>
 8001f80:	e00d      	b.n	8001f9e <RFID+0xcfa>
													}

												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   THIS CARD","  Do Not Exist");
 8001f82:	4a2a      	ldr	r2, [pc, #168]	@ (800202c <RFID+0xd88>)
 8001f84:	4939      	ldr	r1, [pc, #228]	@ (800206c <RFID+0xdc8>)
 8001f86:	482b      	ldr	r0, [pc, #172]	@ (8002034 <RFID+0xd90>)
 8001f88:	f7fe fa2e 	bl	80003e8 <CLCD_I2C_Display>
													HAL_Delay(1000);
 8001f8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f90:	f001 fe2e 	bl	8003bf0 <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001f94:	4a30      	ldr	r2, [pc, #192]	@ (8002058 <RFID+0xdb4>)
 8001f96:	4931      	ldr	r1, [pc, #196]	@ (800205c <RFID+0xdb8>)
 8001f98:	4826      	ldr	r0, [pc, #152]	@ (8002034 <RFID+0xd90>)
 8001f9a:	f7fe fa25 	bl	80003e8 <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 8001f9e:	797b      	ldrb	r3, [r7, #5]
 8001fa0:	2b23      	cmp	r3, #35	@ 0x23
 8001fa2:	d101      	bne.n	8001fa8 <RFID+0xd04>
											{
												rmquet = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8001fa8:	79bb      	ldrb	r3, [r7, #6]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1b1      	bne.n	8001f12 <RFID+0xc6e>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001fae:	4a30      	ldr	r2, [pc, #192]	@ (8002070 <RFID+0xdcc>)
 8001fb0:	4928      	ldr	r1, [pc, #160]	@ (8002054 <RFID+0xdb0>)
 8001fb2:	4820      	ldr	r0, [pc, #128]	@ (8002034 <RFID+0xd90>)
 8001fb4:	f7fe fa18 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8001fb8:	e002      	b.n	8001fc0 <RFID+0xd1c>
									default:
										backrm1 = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	737b      	strb	r3, [r7, #13]
										break;
 8001fbe:	bf00      	nop
							while (backrm1 == 1)
 8001fc0:	7b7b      	ldrb	r3, [r7, #13]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	f43f ac8a 	beq.w	80018dc <RFID+0x638>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8002074 <RFID+0xdd0>)
 8001fca:	492b      	ldr	r1, [pc, #172]	@ (8002078 <RFID+0xdd4>)
 8001fcc:	4819      	ldr	r0, [pc, #100]	@ (8002034 <RFID+0xd90>)
 8001fce:	f7fe fa0b 	bl	80003e8 <CLCD_I2C_Display>
							break;
 8001fd2:	e00a      	b.n	8001fea <RFID+0xd46>
						case 1:
							remoall();
 8001fd4:	f000 fe40 	bl	8002c58 <remoall>
							startadd();
 8001fd8:	f000 fdce 	bl	8002b78 <startadd>
							exitmenu = 0;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <RFID+0xdc4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
							break;
 8001fe2:	e002      	b.n	8001fea <RFID+0xd46>
						default:
							backrm = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
							break;
 8001fe8:	bf00      	nop
				while (backrm == 1)
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	f43f abee 	beq.w	80017ce <RFID+0x52a>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8001ff2:	4a22      	ldr	r2, [pc, #136]	@ (800207c <RFID+0xdd8>)
 8001ff4:	4922      	ldr	r1, [pc, #136]	@ (8002080 <RFID+0xddc>)
 8001ff6:	480f      	ldr	r0, [pc, #60]	@ (8002034 <RFID+0xd90>)
 8001ff8:	f7fe f9f6 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8001ffc:	e00b      	b.n	8002016 <RFID+0xd72>
			case 2:
				checkthe();
 8001ffe:	f000 fcd1 	bl	80029a4 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8002002:	4a20      	ldr	r2, [pc, #128]	@ (8002084 <RFID+0xde0>)
 8002004:	491e      	ldr	r1, [pc, #120]	@ (8002080 <RFID+0xddc>)
 8002006:	480b      	ldr	r0, [pc, #44]	@ (8002034 <RFID+0xd90>)
 8002008:	f7fe f9ee 	bl	80003e8 <CLCD_I2C_Display>
				break;
 800200c:	e003      	b.n	8002016 <RFID+0xd72>
			default:
				exitmenu = 0;
 800200e:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <RFID+0xdc4>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
				break;
 8002014:	bf00      	nop
	while (exitmenu )
 8002016:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <RFID+0xdc4>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f47f a951 	bne.w	80012c2 <RFID+0x1e>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002020:	4804      	ldr	r0, [pc, #16]	@ (8002034 <RFID+0xd90>)
 8002022:	f7fe f9d1 	bl	80003c8 <CLCD_I2C_Clear>
}
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	0800d470 	.word	0x0800d470
 8002030:	0800d38c 	.word	0x0800d38c
 8002034:	200003d8 	.word	0x200003d8
 8002038:	0800d4fc 	.word	0x0800d4fc
 800203c:	0800d4dc 	.word	0x0800d4dc
 8002040:	0800d480 	.word	0x0800d480
 8002044:	0800d534 	.word	0x0800d534
 8002048:	0800d420 	.word	0x0800d420
 800204c:	0800d410 	.word	0x0800d410
 8002050:	0800d3cc 	.word	0x0800d3cc
 8002054:	0800d3dc 	.word	0x0800d3dc
 8002058:	0800d238 	.word	0x0800d238
 800205c:	0800d548 	.word	0x0800d548
 8002060:	200003e4 	.word	0x200003e4
 8002064:	0800d558 	.word	0x0800d558
 8002068:	20000020 	.word	0x20000020
 800206c:	0800d568 	.word	0x0800d568
 8002070:	0800d3ec 	.word	0x0800d3ec
 8002074:	0800d398 	.word	0x0800d398
 8002078:	0800d3ac 	.word	0x0800d3ac
 800207c:	0800d218 	.word	0x0800d218
 8002080:	0800d1fc 	.word	0x0800d1fc
 8002084:	0800d228 	.word	0x0800d228

08002088 <FACEID>:
void FACEID(void) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
	exitmenu = Delaymenu;
 800208e:	4ba8      	ldr	r3, [pc, #672]	@ (8002330 <FACEID+0x2a8>)
 8002090:	2214      	movs	r2, #20
 8002092:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002094:	23ff      	movs	r3, #255	@ 0xff
 8002096:	73fb      	strb	r3, [r7, #15]
	CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","Pls Press DOWN");
 8002098:	4aa6      	ldr	r2, [pc, #664]	@ (8002334 <FACEID+0x2ac>)
 800209a:	49a7      	ldr	r1, [pc, #668]	@ (8002338 <FACEID+0x2b0>)
 800209c:	48a7      	ldr	r0, [pc, #668]	@ (800233c <FACEID+0x2b4>)
 800209e:	f7fe f9a3 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu )
 80020a2:	e34f      	b.n	8002744 <FACEID+0x6bc>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80020a4:	200a      	movs	r0, #10
 80020a6:	f7fe faf9 	bl	800069c <KeyPad_WaitForKeyGetChar>
 80020aa:	4603      	mov	r3, r0
 80020ac:	723b      	strb	r3, [r7, #8]
		if (key_pressed == '*')
 80020ae:	7a3b      	ldrb	r3, [r7, #8]
 80020b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80020b2:	d124      	bne.n	80020fe <FACEID+0x76>
		{
			exitmenu = Delaymenu;
 80020b4:	4b9e      	ldr	r3, [pc, #632]	@ (8002330 <FACEID+0x2a8>)
 80020b6:	2214      	movs	r2, #20
 80020b8:	701a      	strb	r2, [r3, #0]
			status++;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	3301      	adds	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
			status = (status > 2) ? 0 : status;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d801      	bhi.n	80020ca <FACEID+0x42>
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	e000      	b.n	80020cc <FACEID+0x44>
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
			switch (status)
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <FACEID+0x52>
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d006      	beq.n	80020e6 <FACEID+0x5e>
 80020d8:	e00b      	b.n	80020f2 <FACEID+0x6a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 80020da:	4a99      	ldr	r2, [pc, #612]	@ (8002340 <FACEID+0x2b8>)
 80020dc:	4996      	ldr	r1, [pc, #600]	@ (8002338 <FACEID+0x2b0>)
 80020de:	4897      	ldr	r0, [pc, #604]	@ (800233c <FACEID+0x2b4>)
 80020e0:	f7fe f982 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80020e4:	e00b      	b.n	80020fe <FACEID+0x76>
			case 1:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 80020e6:	4a97      	ldr	r2, [pc, #604]	@ (8002344 <FACEID+0x2bc>)
 80020e8:	4993      	ldr	r1, [pc, #588]	@ (8002338 <FACEID+0x2b0>)
 80020ea:	4894      	ldr	r0, [pc, #592]	@ (800233c <FACEID+0x2b4>)
 80020ec:	f7fe f97c 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80020f0:	e005      	b.n	80020fe <FACEID+0x76>
			default:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Back");
 80020f2:	4a95      	ldr	r2, [pc, #596]	@ (8002348 <FACEID+0x2c0>)
 80020f4:	4990      	ldr	r1, [pc, #576]	@ (8002338 <FACEID+0x2b0>)
 80020f6:	4891      	ldr	r0, [pc, #580]	@ (800233c <FACEID+0x2b4>)
 80020f8:	f7fe f976 	bl	80003e8 <CLCD_I2C_Display>
				break;
 80020fc:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 80020fe:	7a3b      	ldrb	r3, [r7, #8]
 8002100:	2b23      	cmp	r3, #35	@ 0x23
 8002102:	f040 831f 	bne.w	8002744 <FACEID+0x6bc>
		{
			exitmenu = Delaymenu;
 8002106:	4b8a      	ldr	r3, [pc, #552]	@ (8002330 <FACEID+0x2a8>)
 8002108:	2214      	movs	r2, #20
 800210a:	701a      	strb	r2, [r3, #0]
			switch (status)
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <FACEID+0x92>
 8002112:	2b01      	cmp	r3, #1
 8002114:	f000 8101 	beq.w	800231a <FACEID+0x292>
 8002118:	e310      	b.n	800273c <FACEID+0x6b4>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800211a:	4a8c      	ldr	r2, [pc, #560]	@ (800234c <FACEID+0x2c4>)
 800211c:	498c      	ldr	r1, [pc, #560]	@ (8002350 <FACEID+0x2c8>)
 800211e:	4887      	ldr	r0, [pc, #540]	@ (800233c <FACEID+0x2b4>)
 8002120:	f7fe f962 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	73bb      	strb	r3, [r7, #14]
				uint8_t back = 1;
 8002128:	2301      	movs	r3, #1
 800212a:	737b      	strb	r3, [r7, #13]
				while (back == 1)
 800212c:	e0eb      	b.n	8002306 <FACEID+0x27e>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 800212e:	200a      	movs	r0, #10
 8002130:	f7fe fab4 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002134:	4603      	mov	r3, r0
 8002136:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 8002138:	4b7d      	ldr	r3, [pc, #500]	@ (8002330 <FACEID+0x2a8>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <FACEID+0xc8>
					{
						CLCD_I2C_Clear(&LCD1);
 8002140:	487e      	ldr	r0, [pc, #504]	@ (800233c <FACEID+0x2b4>)
 8002142:	f7fe f941 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8002146:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800214a:	f001 fd51 	bl	8003bf0 <HAL_Delay>
						return;
 800214e:	e301      	b.n	8002754 <FACEID+0x6cc>
					}
					if (key_pressed == '*')
 8002150:	7a3b      	ldrb	r3, [r7, #8]
 8002152:	2b2a      	cmp	r3, #42	@ 0x2a
 8002154:	d13a      	bne.n	80021cc <FACEID+0x144>
					{
						exitmenu = Delaymenu;
 8002156:	4b76      	ldr	r3, [pc, #472]	@ (8002330 <FACEID+0x2a8>)
 8002158:	2214      	movs	r2, #20
 800215a:	701a      	strb	r2, [r3, #0]
						statusadd++;
 800215c:	7bbb      	ldrb	r3, [r7, #14]
 800215e:	3301      	adds	r3, #1
 8002160:	73bb      	strb	r3, [r7, #14]
						statusadd = (statusadd > 4) ? 0 : statusadd;
 8002162:	7bbb      	ldrb	r3, [r7, #14]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d801      	bhi.n	800216c <FACEID+0xe4>
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	e000      	b.n	800216e <FACEID+0xe6>
 800216c:	2300      	movs	r3, #0
 800216e:	73bb      	strb	r3, [r7, #14]
						switch (statusadd)
 8002170:	7bbb      	ldrb	r3, [r7, #14]
 8002172:	3b01      	subs	r3, #1
 8002174:	2b03      	cmp	r3, #3
 8002176:	d823      	bhi.n	80021c0 <FACEID+0x138>
 8002178:	a201      	add	r2, pc, #4	@ (adr r2, 8002180 <FACEID+0xf8>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	08002191 	.word	0x08002191
 8002184:	0800219d 	.word	0x0800219d
 8002188:	080021a9 	.word	0x080021a9
 800218c:	080021b5 	.word	0x080021b5
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002190:	4a70      	ldr	r2, [pc, #448]	@ (8002354 <FACEID+0x2cc>)
 8002192:	4971      	ldr	r1, [pc, #452]	@ (8002358 <FACEID+0x2d0>)
 8002194:	4869      	ldr	r0, [pc, #420]	@ (800233c <FACEID+0x2b4>)
 8002196:	f7fe f927 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800219a:	e017      	b.n	80021cc <FACEID+0x144>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 800219c:	4a6f      	ldr	r2, [pc, #444]	@ (800235c <FACEID+0x2d4>)
 800219e:	496e      	ldr	r1, [pc, #440]	@ (8002358 <FACEID+0x2d0>)
 80021a0:	4866      	ldr	r0, [pc, #408]	@ (800233c <FACEID+0x2b4>)
 80021a2:	f7fe f921 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80021a6:	e011      	b.n	80021cc <FACEID+0x144>
						case 3:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 80021a8:	4a6d      	ldr	r2, [pc, #436]	@ (8002360 <FACEID+0x2d8>)
 80021aa:	496b      	ldr	r1, [pc, #428]	@ (8002358 <FACEID+0x2d0>)
 80021ac:	4863      	ldr	r0, [pc, #396]	@ (800233c <FACEID+0x2b4>)
 80021ae:	f7fe f91b 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80021b2:	e00b      	b.n	80021cc <FACEID+0x144>
						case 4:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80021b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002364 <FACEID+0x2dc>)
 80021b6:	4968      	ldr	r1, [pc, #416]	@ (8002358 <FACEID+0x2d0>)
 80021b8:	4860      	ldr	r0, [pc, #384]	@ (800233c <FACEID+0x2b4>)
 80021ba:	f7fe f915 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80021be:	e005      	b.n	80021cc <FACEID+0x144>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> Back");
 80021c0:	4a61      	ldr	r2, [pc, #388]	@ (8002348 <FACEID+0x2c0>)
 80021c2:	4965      	ldr	r1, [pc, #404]	@ (8002358 <FACEID+0x2d0>)
 80021c4:	485d      	ldr	r0, [pc, #372]	@ (800233c <FACEID+0x2b4>)
 80021c6:	f7fe f90f 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80021ca:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 80021cc:	7a3b      	ldrb	r3, [r7, #8]
 80021ce:	2b23      	cmp	r3, #35	@ 0x23
 80021d0:	f040 8099 	bne.w	8002306 <FACEID+0x27e>
					{
						exitmenu = Delaymenu;
 80021d4:	4b56      	ldr	r3, [pc, #344]	@ (8002330 <FACEID+0x2a8>)
 80021d6:	2214      	movs	r2, #20
 80021d8:	701a      	strb	r2, [r3, #0]
						uint8_t keyadd1 = statusadd;
 80021da:	7bbb      	ldrb	r3, [r7, #14]
 80021dc:	71bb      	strb	r3, [r7, #6]
						switch (statusadd)
 80021de:	7bbb      	ldrb	r3, [r7, #14]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	f200 808c 	bhi.w	8002300 <FACEID+0x278>
 80021e8:	a201      	add	r2, pc, #4	@ (adr r2, 80021f0 <FACEID+0x168>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	08002201 	.word	0x08002201
 80021f4:	08002241 	.word	0x08002241
 80021f8:	08002281 	.word	0x08002281
 80021fc:	080022c1 	.word	0x080022c1
						{
						case 1:
							if (checkfaceid(keyadd1) != 0)
 8002200:	79bb      	ldrb	r3, [r7, #6]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 ffce 	bl	80031a4 <checkfaceid>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00e      	beq.n	800222c <FACEID+0x1a4>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 1"," Face 1 Existed ");
 800220e:	4a56      	ldr	r2, [pc, #344]	@ (8002368 <FACEID+0x2e0>)
 8002210:	4956      	ldr	r1, [pc, #344]	@ (800236c <FACEID+0x2e4>)
 8002212:	484a      	ldr	r0, [pc, #296]	@ (800233c <FACEID+0x2b4>)
 8002214:	f7fe f8e8 	bl	80003e8 <CLCD_I2C_Display>
								HAL_Delay(1000);
 8002218:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800221c:	f001 fce8 	bl	8003bf0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002220:	4a4c      	ldr	r2, [pc, #304]	@ (8002354 <FACEID+0x2cc>)
 8002222:	494d      	ldr	r1, [pc, #308]	@ (8002358 <FACEID+0x2d0>)
 8002224:	4845      	ldr	r0, [pc, #276]	@ (800233c <FACEID+0x2b4>)
 8002226:	f7fe f8df 	bl	80003e8 <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
							}
							break;
 800222a:	e06c      	b.n	8002306 <FACEID+0x27e>
								addface(keyadd1);
 800222c:	79bb      	ldrb	r3, [r7, #6]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 ff02 	bl	8003038 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002234:	4a47      	ldr	r2, [pc, #284]	@ (8002354 <FACEID+0x2cc>)
 8002236:	4948      	ldr	r1, [pc, #288]	@ (8002358 <FACEID+0x2d0>)
 8002238:	4840      	ldr	r0, [pc, #256]	@ (800233c <FACEID+0x2b4>)
 800223a:	f7fe f8d5 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800223e:	e062      	b.n	8002306 <FACEID+0x27e>
						case 2:
							if (checkfaceid(keyadd1) != 0)
 8002240:	79bb      	ldrb	r3, [r7, #6]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 ffae 	bl	80031a4 <checkfaceid>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00e      	beq.n	800226c <FACEID+0x1e4>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 2"," Face 2 Existed ");
 800224e:	4a48      	ldr	r2, [pc, #288]	@ (8002370 <FACEID+0x2e8>)
 8002250:	4948      	ldr	r1, [pc, #288]	@ (8002374 <FACEID+0x2ec>)
 8002252:	483a      	ldr	r0, [pc, #232]	@ (800233c <FACEID+0x2b4>)
 8002254:	f7fe f8c8 	bl	80003e8 <CLCD_I2C_Display>
								HAL_Delay(1000);
 8002258:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800225c:	f001 fcc8 	bl	8003bf0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002260:	4a3e      	ldr	r2, [pc, #248]	@ (800235c <FACEID+0x2d4>)
 8002262:	493d      	ldr	r1, [pc, #244]	@ (8002358 <FACEID+0x2d0>)
 8002264:	4835      	ldr	r0, [pc, #212]	@ (800233c <FACEID+0x2b4>)
 8002266:	f7fe f8bf 	bl	80003e8 <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
							}
							break;
 800226a:	e04c      	b.n	8002306 <FACEID+0x27e>
								addface(keyadd1);
 800226c:	79bb      	ldrb	r3, [r7, #6]
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fee2 	bl	8003038 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002274:	4a39      	ldr	r2, [pc, #228]	@ (800235c <FACEID+0x2d4>)
 8002276:	4938      	ldr	r1, [pc, #224]	@ (8002358 <FACEID+0x2d0>)
 8002278:	4830      	ldr	r0, [pc, #192]	@ (800233c <FACEID+0x2b4>)
 800227a:	f7fe f8b5 	bl	80003e8 <CLCD_I2C_Display>
							break;
 800227e:	e042      	b.n	8002306 <FACEID+0x27e>
						case 3:
							if (checkfaceid(keyadd1) != 0)
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	4618      	mov	r0, r3
 8002284:	f000 ff8e 	bl	80031a4 <checkfaceid>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00e      	beq.n	80022ac <FACEID+0x224>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 3"," Face 3 Existed ");
 800228e:	4a3a      	ldr	r2, [pc, #232]	@ (8002378 <FACEID+0x2f0>)
 8002290:	493a      	ldr	r1, [pc, #232]	@ (800237c <FACEID+0x2f4>)
 8002292:	482a      	ldr	r0, [pc, #168]	@ (800233c <FACEID+0x2b4>)
 8002294:	f7fe f8a8 	bl	80003e8 <CLCD_I2C_Display>
								HAL_Delay(1000);
 8002298:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800229c:	f001 fca8 	bl	8003bf0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 80022a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002360 <FACEID+0x2d8>)
 80022a2:	492d      	ldr	r1, [pc, #180]	@ (8002358 <FACEID+0x2d0>)
 80022a4:	4825      	ldr	r0, [pc, #148]	@ (800233c <FACEID+0x2b4>)
 80022a6:	f7fe f89f 	bl	80003e8 <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
							}
							break;
 80022aa:	e02c      	b.n	8002306 <FACEID+0x27e>
								addface(keyadd1);
 80022ac:	79bb      	ldrb	r3, [r7, #6]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fec2 	bl	8003038 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 80022b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002360 <FACEID+0x2d8>)
 80022b6:	4928      	ldr	r1, [pc, #160]	@ (8002358 <FACEID+0x2d0>)
 80022b8:	4820      	ldr	r0, [pc, #128]	@ (800233c <FACEID+0x2b4>)
 80022ba:	f7fe f895 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80022be:	e022      	b.n	8002306 <FACEID+0x27e>
						case 4:
							if (checkfaceid(keyadd1) != 0)
 80022c0:	79bb      	ldrb	r3, [r7, #6]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 ff6e 	bl	80031a4 <checkfaceid>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00e      	beq.n	80022ec <FACEID+0x264>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 4"," Face 4 Existed ");
 80022ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002380 <FACEID+0x2f8>)
 80022d0:	492c      	ldr	r1, [pc, #176]	@ (8002384 <FACEID+0x2fc>)
 80022d2:	481a      	ldr	r0, [pc, #104]	@ (800233c <FACEID+0x2b4>)
 80022d4:	f7fe f888 	bl	80003e8 <CLCD_I2C_Display>
								HAL_Delay(1000);
 80022d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022dc:	f001 fc88 	bl	8003bf0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80022e0:	4a20      	ldr	r2, [pc, #128]	@ (8002364 <FACEID+0x2dc>)
 80022e2:	491d      	ldr	r1, [pc, #116]	@ (8002358 <FACEID+0x2d0>)
 80022e4:	4815      	ldr	r0, [pc, #84]	@ (800233c <FACEID+0x2b4>)
 80022e6:	f7fe f87f 	bl	80003e8 <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
							}
							break;
 80022ea:	e00c      	b.n	8002306 <FACEID+0x27e>
								addface(keyadd1);
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fea2 	bl	8003038 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80022f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002364 <FACEID+0x2dc>)
 80022f6:	4918      	ldr	r1, [pc, #96]	@ (8002358 <FACEID+0x2d0>)
 80022f8:	4810      	ldr	r0, [pc, #64]	@ (800233c <FACEID+0x2b4>)
 80022fa:	f7fe f875 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80022fe:	e002      	b.n	8002306 <FACEID+0x27e>
						default:
							back = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	737b      	strb	r3, [r7, #13]
							break;
 8002304:	bf00      	nop
				while (back == 1)
 8002306:	7b7b      	ldrb	r3, [r7, #13]
 8002308:	2b01      	cmp	r3, #1
 800230a:	f43f af10 	beq.w	800212e <FACEID+0xa6>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 800230e:	4a0c      	ldr	r2, [pc, #48]	@ (8002340 <FACEID+0x2b8>)
 8002310:	4909      	ldr	r1, [pc, #36]	@ (8002338 <FACEID+0x2b0>)
 8002312:	480a      	ldr	r0, [pc, #40]	@ (800233c <FACEID+0x2b4>)
 8002314:	f7fe f868 	bl	80003e8 <CLCD_I2C_Display>
				break;
 8002318:	e214      	b.n	8002744 <FACEID+0x6bc>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800231a:	4a0c      	ldr	r2, [pc, #48]	@ (800234c <FACEID+0x2c4>)
 800231c:	490c      	ldr	r1, [pc, #48]	@ (8002350 <FACEID+0x2c8>)
 800231e:	4807      	ldr	r0, [pc, #28]	@ (800233c <FACEID+0x2b4>)
 8002320:	f7fe f862 	bl	80003e8 <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	733b      	strb	r3, [r7, #12]
				uint8_t backrm = 1;
 8002328:	2301      	movs	r3, #1
 800232a:	72fb      	strb	r3, [r7, #11]
				while (backrm == 1)
 800232c:	e1fc      	b.n	8002728 <FACEID+0x6a0>
 800232e:	bf00      	nop
 8002330:	20000020 	.word	0x20000020
 8002334:	0800d1ec 	.word	0x0800d1ec
 8002338:	0800d578 	.word	0x0800d578
 800233c:	200003d8 	.word	0x200003d8
 8002340:	0800d58c 	.word	0x0800d58c
 8002344:	0800d59c 	.word	0x0800d59c
 8002348:	0800d238 	.word	0x0800d238
 800234c:	0800d240 	.word	0x0800d240
 8002350:	0800d24c 	.word	0x0800d24c
 8002354:	0800d5b0 	.word	0x0800d5b0
 8002358:	0800d5bc 	.word	0x0800d5bc
 800235c:	0800d5c8 	.word	0x0800d5c8
 8002360:	0800d5d4 	.word	0x0800d5d4
 8002364:	0800d5e0 	.word	0x0800d5e0
 8002368:	0800d5ec 	.word	0x0800d5ec
 800236c:	0800d600 	.word	0x0800d600
 8002370:	0800d610 	.word	0x0800d610
 8002374:	0800d624 	.word	0x0800d624
 8002378:	0800d634 	.word	0x0800d634
 800237c:	0800d648 	.word	0x0800d648
 8002380:	0800d658 	.word	0x0800d658
 8002384:	0800d66c 	.word	0x0800d66c
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002388:	200a      	movs	r0, #10
 800238a:	f7fe f987 	bl	800069c <KeyPad_WaitForKeyGetChar>
 800238e:	4603      	mov	r3, r0
 8002390:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 8002392:	4bac      	ldr	r3, [pc, #688]	@ (8002644 <FACEID+0x5bc>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d107      	bne.n	80023aa <FACEID+0x322>
					{
						CLCD_I2C_Clear(&LCD1);
 800239a:	48ab      	ldr	r0, [pc, #684]	@ (8002648 <FACEID+0x5c0>)
 800239c:	f7fe f814 	bl	80003c8 <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80023a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023a4:	f001 fc24 	bl	8003bf0 <HAL_Delay>
						return;
 80023a8:	e1d4      	b.n	8002754 <FACEID+0x6cc>
					}
					if (key_pressed == '*')
 80023aa:	7a3b      	ldrb	r3, [r7, #8]
 80023ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80023ae:	d124      	bne.n	80023fa <FACEID+0x372>
					{
						exitmenu = Delaymenu;
 80023b0:	4ba4      	ldr	r3, [pc, #656]	@ (8002644 <FACEID+0x5bc>)
 80023b2:	2214      	movs	r2, #20
 80023b4:	701a      	strb	r2, [r3, #0]
						statusrm++;
 80023b6:	7b3b      	ldrb	r3, [r7, #12]
 80023b8:	3301      	adds	r3, #1
 80023ba:	733b      	strb	r3, [r7, #12]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 80023bc:	7b3b      	ldrb	r3, [r7, #12]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d801      	bhi.n	80023c6 <FACEID+0x33e>
 80023c2:	7b3b      	ldrb	r3, [r7, #12]
 80023c4:	e000      	b.n	80023c8 <FACEID+0x340>
 80023c6:	2300      	movs	r3, #0
 80023c8:	733b      	strb	r3, [r7, #12]
						switch (statusrm)
 80023ca:	7b3b      	ldrb	r3, [r7, #12]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d002      	beq.n	80023d6 <FACEID+0x34e>
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d006      	beq.n	80023e2 <FACEID+0x35a>
 80023d4:	e00b      	b.n	80023ee <FACEID+0x366>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 80023d6:	4a9d      	ldr	r2, [pc, #628]	@ (800264c <FACEID+0x5c4>)
 80023d8:	499d      	ldr	r1, [pc, #628]	@ (8002650 <FACEID+0x5c8>)
 80023da:	489b      	ldr	r0, [pc, #620]	@ (8002648 <FACEID+0x5c0>)
 80023dc:	f7fe f804 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80023e0:	e00b      	b.n	80023fa <FACEID+0x372>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
 80023e2:	4a9c      	ldr	r2, [pc, #624]	@ (8002654 <FACEID+0x5cc>)
 80023e4:	499a      	ldr	r1, [pc, #616]	@ (8002650 <FACEID+0x5c8>)
 80023e6:	4898      	ldr	r0, [pc, #608]	@ (8002648 <FACEID+0x5c0>)
 80023e8:	f7fd fffe 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80023ec:	e005      	b.n	80023fa <FACEID+0x372>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Back");
 80023ee:	4a9a      	ldr	r2, [pc, #616]	@ (8002658 <FACEID+0x5d0>)
 80023f0:	4997      	ldr	r1, [pc, #604]	@ (8002650 <FACEID+0x5c8>)
 80023f2:	4895      	ldr	r0, [pc, #596]	@ (8002648 <FACEID+0x5c0>)
 80023f4:	f7fd fff8 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80023f8:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 80023fa:	7a3b      	ldrb	r3, [r7, #8]
 80023fc:	2b23      	cmp	r3, #35	@ 0x23
 80023fe:	f040 8193 	bne.w	8002728 <FACEID+0x6a0>
					{
						exitmenu = Delaymenu;
 8002402:	4b90      	ldr	r3, [pc, #576]	@ (8002644 <FACEID+0x5bc>)
 8002404:	2214      	movs	r2, #20
 8002406:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 8002408:	7b3b      	ldrb	r3, [r7, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d003      	beq.n	8002416 <FACEID+0x38e>
 800240e:	2b02      	cmp	r3, #2
 8002410:	f000 8155 	beq.w	80026be <FACEID+0x636>
 8002414:	e185      	b.n	8002722 <FACEID+0x69a>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8002416:	4a91      	ldr	r2, [pc, #580]	@ (800265c <FACEID+0x5d4>)
 8002418:	4991      	ldr	r1, [pc, #580]	@ (8002660 <FACEID+0x5d8>)
 800241a:	488b      	ldr	r0, [pc, #556]	@ (8002648 <FACEID+0x5c0>)
 800241c:	f7fd ffe4 	bl	80003e8 <CLCD_I2C_Display>
							uint8_t statusrm1 = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	72bb      	strb	r3, [r7, #10]
							uint8_t backrm1 = 1;
 8002424:	2301      	movs	r3, #1
 8002426:	727b      	strb	r3, [r7, #9]
							while (backrm1 == 1)
 8002428:	e13f      	b.n	80026aa <FACEID+0x622>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 800242a:	200a      	movs	r0, #10
 800242c:	f7fe f936 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002430:	4603      	mov	r3, r0
 8002432:	723b      	strb	r3, [r7, #8]
								if (exitmenu == 0)
 8002434:	4b83      	ldr	r3, [pc, #524]	@ (8002644 <FACEID+0x5bc>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <FACEID+0x3c4>
								{
									CLCD_I2C_Clear(&LCD1);
 800243c:	4882      	ldr	r0, [pc, #520]	@ (8002648 <FACEID+0x5c0>)
 800243e:	f7fd ffc3 	bl	80003c8 <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8002442:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002446:	f001 fbd3 	bl	8003bf0 <HAL_Delay>
									return;
 800244a:	e183      	b.n	8002754 <FACEID+0x6cc>
								}
								if (key_pressed == '*')
 800244c:	7a3b      	ldrb	r3, [r7, #8]
 800244e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002450:	d13a      	bne.n	80024c8 <FACEID+0x440>
								{
									exitmenu = Delaymenu;
 8002452:	4b7c      	ldr	r3, [pc, #496]	@ (8002644 <FACEID+0x5bc>)
 8002454:	2214      	movs	r2, #20
 8002456:	701a      	strb	r2, [r3, #0]
									statusrm1++;
 8002458:	7abb      	ldrb	r3, [r7, #10]
 800245a:	3301      	adds	r3, #1
 800245c:	72bb      	strb	r3, [r7, #10]
									statusrm1 = (statusrm1 > 4) ? 0 : statusrm1;
 800245e:	7abb      	ldrb	r3, [r7, #10]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d801      	bhi.n	8002468 <FACEID+0x3e0>
 8002464:	7abb      	ldrb	r3, [r7, #10]
 8002466:	e000      	b.n	800246a <FACEID+0x3e2>
 8002468:	2300      	movs	r3, #0
 800246a:	72bb      	strb	r3, [r7, #10]
									switch (statusrm1)
 800246c:	7abb      	ldrb	r3, [r7, #10]
 800246e:	3b01      	subs	r3, #1
 8002470:	2b03      	cmp	r3, #3
 8002472:	d823      	bhi.n	80024bc <FACEID+0x434>
 8002474:	a201      	add	r2, pc, #4	@ (adr r2, 800247c <FACEID+0x3f4>)
 8002476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247a:	bf00      	nop
 800247c:	0800248d 	.word	0x0800248d
 8002480:	08002499 	.word	0x08002499
 8002484:	080024a5 	.word	0x080024a5
 8002488:	080024b1 	.word	0x080024b1
									{
									case 1:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 800248c:	4a75      	ldr	r2, [pc, #468]	@ (8002664 <FACEID+0x5dc>)
 800248e:	4976      	ldr	r1, [pc, #472]	@ (8002668 <FACEID+0x5e0>)
 8002490:	486d      	ldr	r0, [pc, #436]	@ (8002648 <FACEID+0x5c0>)
 8002492:	f7fd ffa9 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8002496:	e017      	b.n	80024c8 <FACEID+0x440>
									case 2:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002498:	4a74      	ldr	r2, [pc, #464]	@ (800266c <FACEID+0x5e4>)
 800249a:	4973      	ldr	r1, [pc, #460]	@ (8002668 <FACEID+0x5e0>)
 800249c:	486a      	ldr	r0, [pc, #424]	@ (8002648 <FACEID+0x5c0>)
 800249e:	f7fd ffa3 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80024a2:	e011      	b.n	80024c8 <FACEID+0x440>
									case 3:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80024a4:	4a72      	ldr	r2, [pc, #456]	@ (8002670 <FACEID+0x5e8>)
 80024a6:	4970      	ldr	r1, [pc, #448]	@ (8002668 <FACEID+0x5e0>)
 80024a8:	4867      	ldr	r0, [pc, #412]	@ (8002648 <FACEID+0x5c0>)
 80024aa:	f7fd ff9d 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80024ae:	e00b      	b.n	80024c8 <FACEID+0x440>
									case 4:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 80024b0:	4a70      	ldr	r2, [pc, #448]	@ (8002674 <FACEID+0x5ec>)
 80024b2:	496d      	ldr	r1, [pc, #436]	@ (8002668 <FACEID+0x5e0>)
 80024b4:	4864      	ldr	r0, [pc, #400]	@ (8002648 <FACEID+0x5c0>)
 80024b6:	f7fd ff97 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80024ba:	e005      	b.n	80024c8 <FACEID+0x440>
									default:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=>  Back ");
 80024bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002678 <FACEID+0x5f0>)
 80024be:	496a      	ldr	r1, [pc, #424]	@ (8002668 <FACEID+0x5e0>)
 80024c0:	4861      	ldr	r0, [pc, #388]	@ (8002648 <FACEID+0x5c0>)
 80024c2:	f7fd ff91 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80024c6:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 80024c8:	7a3b      	ldrb	r3, [r7, #8]
 80024ca:	2b23      	cmp	r3, #35	@ 0x23
 80024cc:	f040 80ed 	bne.w	80026aa <FACEID+0x622>
								{
									exitmenu = Delaymenu;
 80024d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002644 <FACEID+0x5bc>)
 80024d2:	2214      	movs	r2, #20
 80024d4:	701a      	strb	r2, [r3, #0]
									uint8_t keyrm1 = statusrm1;
 80024d6:	7abb      	ldrb	r3, [r7, #10]
 80024d8:	71fb      	strb	r3, [r7, #7]
									switch (keyrm1)
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	3b01      	subs	r3, #1
 80024de:	2b03      	cmp	r3, #3
 80024e0:	f200 80e0 	bhi.w	80026a4 <FACEID+0x61c>
 80024e4:	a201      	add	r2, pc, #4	@ (adr r2, 80024ec <FACEID+0x464>)
 80024e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ea:	bf00      	nop
 80024ec:	080024fd 	.word	0x080024fd
 80024f0:	0800254f 	.word	0x0800254f
 80024f4:	080025a1 	.word	0x080025a1
 80024f8:	080025f3 	.word	0x080025f3
									{
									case 1:
										if (checkfaceid(keyrm1) == 0)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fe50 	bl	80031a4 <checkfaceid>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10e      	bne.n	8002528 <FACEID+0x4a0>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 1", "  Do Not Exist");
 800250a:	4a5c      	ldr	r2, [pc, #368]	@ (800267c <FACEID+0x5f4>)
 800250c:	495c      	ldr	r1, [pc, #368]	@ (8002680 <FACEID+0x5f8>)
 800250e:	484e      	ldr	r0, [pc, #312]	@ (8002648 <FACEID+0x5c0>)
 8002510:	f7fd ff6a 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002514:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002518:	f001 fb6a 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 800251c:	4a51      	ldr	r2, [pc, #324]	@ (8002664 <FACEID+0x5dc>)
 800251e:	4952      	ldr	r1, [pc, #328]	@ (8002668 <FACEID+0x5e0>)
 8002520:	4849      	ldr	r0, [pc, #292]	@ (8002648 <FACEID+0x5c0>)
 8002522:	f7fd ff61 	bl	80003e8 <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
										}
										break;
 8002526:	e0c0      	b.n	80026aa <FACEID+0x622>
											removeface(keyrm1);
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fde0 	bl	80030f0 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
 8002530:	4a54      	ldr	r2, [pc, #336]	@ (8002684 <FACEID+0x5fc>)
 8002532:	4955      	ldr	r1, [pc, #340]	@ (8002688 <FACEID+0x600>)
 8002534:	4844      	ldr	r0, [pc, #272]	@ (8002648 <FACEID+0x5c0>)
 8002536:	f7fd ff57 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 800253a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800253e:	f001 fb57 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002542:	4a48      	ldr	r2, [pc, #288]	@ (8002664 <FACEID+0x5dc>)
 8002544:	4948      	ldr	r1, [pc, #288]	@ (8002668 <FACEID+0x5e0>)
 8002546:	4840      	ldr	r0, [pc, #256]	@ (8002648 <FACEID+0x5c0>)
 8002548:	f7fd ff4e 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800254c:	e0ad      	b.n	80026aa <FACEID+0x622>
									case 2:
										if (checkfaceid(keyrm1) == 0)
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	4618      	mov	r0, r3
 8002552:	f000 fe27 	bl	80031a4 <checkfaceid>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10e      	bne.n	800257a <FACEID+0x4f2>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 2", "  Do Not Exist");
 800255c:	4a47      	ldr	r2, [pc, #284]	@ (800267c <FACEID+0x5f4>)
 800255e:	494b      	ldr	r1, [pc, #300]	@ (800268c <FACEID+0x604>)
 8002560:	4839      	ldr	r0, [pc, #228]	@ (8002648 <FACEID+0x5c0>)
 8002562:	f7fd ff41 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002566:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800256a:	f001 fb41 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 800256e:	4a3f      	ldr	r2, [pc, #252]	@ (800266c <FACEID+0x5e4>)
 8002570:	493d      	ldr	r1, [pc, #244]	@ (8002668 <FACEID+0x5e0>)
 8002572:	4835      	ldr	r0, [pc, #212]	@ (8002648 <FACEID+0x5c0>)
 8002574:	f7fd ff38 	bl	80003e8 <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
										}
										break;
 8002578:	e097      	b.n	80026aa <FACEID+0x622>
											removeface(keyrm1);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fdb7 	bl	80030f0 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
 8002582:	4a40      	ldr	r2, [pc, #256]	@ (8002684 <FACEID+0x5fc>)
 8002584:	4942      	ldr	r1, [pc, #264]	@ (8002690 <FACEID+0x608>)
 8002586:	4830      	ldr	r0, [pc, #192]	@ (8002648 <FACEID+0x5c0>)
 8002588:	f7fd ff2e 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 800258c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002590:	f001 fb2e 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002594:	4a35      	ldr	r2, [pc, #212]	@ (800266c <FACEID+0x5e4>)
 8002596:	4934      	ldr	r1, [pc, #208]	@ (8002668 <FACEID+0x5e0>)
 8002598:	482b      	ldr	r0, [pc, #172]	@ (8002648 <FACEID+0x5c0>)
 800259a:	f7fd ff25 	bl	80003e8 <CLCD_I2C_Display>
										break;
 800259e:	e084      	b.n	80026aa <FACEID+0x622>
									case 3:
										if (checkfaceid(keyrm1) == 0)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fdfe 	bl	80031a4 <checkfaceid>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10e      	bne.n	80025cc <FACEID+0x544>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 3", "  Do Not Exist");
 80025ae:	4a33      	ldr	r2, [pc, #204]	@ (800267c <FACEID+0x5f4>)
 80025b0:	4938      	ldr	r1, [pc, #224]	@ (8002694 <FACEID+0x60c>)
 80025b2:	4825      	ldr	r0, [pc, #148]	@ (8002648 <FACEID+0x5c0>)
 80025b4:	f7fd ff18 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80025b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025bc:	f001 fb18 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80025c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002670 <FACEID+0x5e8>)
 80025c2:	4929      	ldr	r1, [pc, #164]	@ (8002668 <FACEID+0x5e0>)
 80025c4:	4820      	ldr	r0, [pc, #128]	@ (8002648 <FACEID+0x5c0>)
 80025c6:	f7fd ff0f 	bl	80003e8 <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
										}
										break;
 80025ca:	e06e      	b.n	80026aa <FACEID+0x622>
											removeface(keyrm1);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fd8e 	bl	80030f0 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
 80025d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002684 <FACEID+0x5fc>)
 80025d6:	4930      	ldr	r1, [pc, #192]	@ (8002698 <FACEID+0x610>)
 80025d8:	481b      	ldr	r0, [pc, #108]	@ (8002648 <FACEID+0x5c0>)
 80025da:	f7fd ff05 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 80025de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025e2:	f001 fb05 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80025e6:	4a22      	ldr	r2, [pc, #136]	@ (8002670 <FACEID+0x5e8>)
 80025e8:	491f      	ldr	r1, [pc, #124]	@ (8002668 <FACEID+0x5e0>)
 80025ea:	4817      	ldr	r0, [pc, #92]	@ (8002648 <FACEID+0x5c0>)
 80025ec:	f7fd fefc 	bl	80003e8 <CLCD_I2C_Display>
										break;
 80025f0:	e05b      	b.n	80026aa <FACEID+0x622>
									case 4:
										if (checkfaceid(keyrm1) == 0)
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fdd5 	bl	80031a4 <checkfaceid>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10e      	bne.n	800261e <FACEID+0x596>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 4", "  Do Not Exist");
 8002600:	4a1e      	ldr	r2, [pc, #120]	@ (800267c <FACEID+0x5f4>)
 8002602:	4926      	ldr	r1, [pc, #152]	@ (800269c <FACEID+0x614>)
 8002604:	4810      	ldr	r0, [pc, #64]	@ (8002648 <FACEID+0x5c0>)
 8002606:	f7fd feef 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 800260a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800260e:	f001 faef 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002612:	4a18      	ldr	r2, [pc, #96]	@ (8002674 <FACEID+0x5ec>)
 8002614:	4914      	ldr	r1, [pc, #80]	@ (8002668 <FACEID+0x5e0>)
 8002616:	480c      	ldr	r0, [pc, #48]	@ (8002648 <FACEID+0x5c0>)
 8002618:	f7fd fee6 	bl	80003e8 <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
										}
										break;
 800261c:	e045      	b.n	80026aa <FACEID+0x622>
											removeface(keyrm1);
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fd65 	bl	80030f0 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
 8002626:	4a17      	ldr	r2, [pc, #92]	@ (8002684 <FACEID+0x5fc>)
 8002628:	491d      	ldr	r1, [pc, #116]	@ (80026a0 <FACEID+0x618>)
 800262a:	4807      	ldr	r0, [pc, #28]	@ (8002648 <FACEID+0x5c0>)
 800262c:	f7fd fedc 	bl	80003e8 <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002630:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002634:	f001 fadc 	bl	8003bf0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002638:	4a0e      	ldr	r2, [pc, #56]	@ (8002674 <FACEID+0x5ec>)
 800263a:	490b      	ldr	r1, [pc, #44]	@ (8002668 <FACEID+0x5e0>)
 800263c:	4802      	ldr	r0, [pc, #8]	@ (8002648 <FACEID+0x5c0>)
 800263e:	f7fd fed3 	bl	80003e8 <CLCD_I2C_Display>
										break;
 8002642:	e032      	b.n	80026aa <FACEID+0x622>
 8002644:	20000020 	.word	0x20000020
 8002648:	200003d8 	.word	0x200003d8
 800264c:	0800d67c 	.word	0x0800d67c
 8002650:	0800d690 	.word	0x0800d690
 8002654:	0800d3bc 	.word	0x0800d3bc
 8002658:	0800d238 	.word	0x0800d238
 800265c:	0800d240 	.word	0x0800d240
 8002660:	0800d24c 	.word	0x0800d24c
 8002664:	0800d6a0 	.word	0x0800d6a0
 8002668:	0800d3dc 	.word	0x0800d3dc
 800266c:	0800d6b4 	.word	0x0800d6b4
 8002670:	0800d6c8 	.word	0x0800d6c8
 8002674:	0800d6dc 	.word	0x0800d6dc
 8002678:	0800d6f0 	.word	0x0800d6f0
 800267c:	0800d470 	.word	0x0800d470
 8002680:	0800d6fc 	.word	0x0800d6fc
 8002684:	0800d480 	.word	0x0800d480
 8002688:	0800d70c 	.word	0x0800d70c
 800268c:	0800d71c 	.word	0x0800d71c
 8002690:	0800d72c 	.word	0x0800d72c
 8002694:	0800d73c 	.word	0x0800d73c
 8002698:	0800d74c 	.word	0x0800d74c
 800269c:	0800d75c 	.word	0x0800d75c
 80026a0:	0800d76c 	.word	0x0800d76c
									default:
										backrm1 = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	727b      	strb	r3, [r7, #9]
										break;
 80026a8:	bf00      	nop
							while (backrm1 == 1)
 80026aa:	7a7b      	ldrb	r3, [r7, #9]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	f43f aebc 	beq.w	800242a <FACEID+0x3a2>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 80026b2:	4a2a      	ldr	r2, [pc, #168]	@ (800275c <FACEID+0x6d4>)
 80026b4:	492a      	ldr	r1, [pc, #168]	@ (8002760 <FACEID+0x6d8>)
 80026b6:	482b      	ldr	r0, [pc, #172]	@ (8002764 <FACEID+0x6dc>)
 80026b8:	f7fd fe96 	bl	80003e8 <CLCD_I2C_Display>
							break;
 80026bc:	e034      	b.n	8002728 <FACEID+0x6a0>
						case 2:
							sprintf(Tx_Buffer , "Del.ALL" );
 80026be:	492a      	ldr	r1, [pc, #168]	@ (8002768 <FACEID+0x6e0>)
 80026c0:	482a      	ldr	r0, [pc, #168]	@ (800276c <FACEID+0x6e4>)
 80026c2:	f00a f8b1 	bl	800c828 <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 7);
 80026c6:	2107      	movs	r1, #7
 80026c8:	4828      	ldr	r0, [pc, #160]	@ (800276c <FACEID+0x6e4>)
 80026ca:	f009 fccf 	bl	800c06c <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80026ce:	4a28      	ldr	r2, [pc, #160]	@ (8002770 <FACEID+0x6e8>)
 80026d0:	4928      	ldr	r1, [pc, #160]	@ (8002774 <FACEID+0x6ec>)
 80026d2:	4824      	ldr	r0, [pc, #144]	@ (8002764 <FACEID+0x6dc>)
 80026d4:	f7fd fe88 	bl	80003e8 <CLCD_I2C_Display>
							exitmenu = 60;
 80026d8:	4b27      	ldr	r3, [pc, #156]	@ (8002778 <FACEID+0x6f0>)
 80026da:	223c      	movs	r2, #60	@ 0x3c
 80026dc:	701a      	strb	r2, [r3, #0]
							memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80026de:	2280      	movs	r2, #128	@ 0x80
 80026e0:	2100      	movs	r1, #0
 80026e2:	4826      	ldr	r0, [pc, #152]	@ (800277c <FACEID+0x6f4>)
 80026e4:	f00a f8c0 	bl	800c868 <memset>
							while(exitmenu != 0){
 80026e8:	e013      	b.n	8002712 <FACEID+0x68a>
								if(Rx_Buffer[0] == 'T'){
 80026ea:	4b24      	ldr	r3, [pc, #144]	@ (800277c <FACEID+0x6f4>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	2b54      	cmp	r3, #84	@ 0x54
 80026f2:	d10e      	bne.n	8002712 <FACEID+0x68a>
									CLCD_I2C_Display(&LCD1, "REMOVE ALL FACE","   SUCCESSFUL  ");
 80026f4:	4a22      	ldr	r2, [pc, #136]	@ (8002780 <FACEID+0x6f8>)
 80026f6:	4923      	ldr	r1, [pc, #140]	@ (8002784 <FACEID+0x6fc>)
 80026f8:	481a      	ldr	r0, [pc, #104]	@ (8002764 <FACEID+0x6dc>)
 80026fa:	f7fd fe75 	bl	80003e8 <CLCD_I2C_Display>
									HAL_Delay(2000);
 80026fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002702:	f001 fa75 	bl	8003bf0 <HAL_Delay>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002706:	2280      	movs	r2, #128	@ 0x80
 8002708:	2100      	movs	r1, #0
 800270a:	481c      	ldr	r0, [pc, #112]	@ (800277c <FACEID+0x6f4>)
 800270c:	f00a f8ac 	bl	800c868 <memset>
									break;
 8002710:	e003      	b.n	800271a <FACEID+0x692>
							while(exitmenu != 0){
 8002712:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <FACEID+0x6f0>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1e7      	bne.n	80026ea <FACEID+0x662>
								}
							}
							exitmenu = 0;
 800271a:	4b17      	ldr	r3, [pc, #92]	@ (8002778 <FACEID+0x6f0>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
							// CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
							break;
 8002720:	e002      	b.n	8002728 <FACEID+0x6a0>
						default:
							backrm=0;
 8002722:	2300      	movs	r3, #0
 8002724:	72fb      	strb	r3, [r7, #11]
							break;
 8002726:	bf00      	nop
				while (backrm == 1)
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	2b01      	cmp	r3, #1
 800272c:	f43f ae2c 	beq.w	8002388 <FACEID+0x300>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002730:	4a15      	ldr	r2, [pc, #84]	@ (8002788 <FACEID+0x700>)
 8002732:	4916      	ldr	r1, [pc, #88]	@ (800278c <FACEID+0x704>)
 8002734:	480b      	ldr	r0, [pc, #44]	@ (8002764 <FACEID+0x6dc>)
 8002736:	f7fd fe57 	bl	80003e8 <CLCD_I2C_Display>
				break;
 800273a:	e003      	b.n	8002744 <FACEID+0x6bc>
			default:
				exitmenu=0;
 800273c:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <FACEID+0x6f0>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
				break;
 8002742:	bf00      	nop
	while (exitmenu )
 8002744:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <FACEID+0x6f0>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f acab 	bne.w	80020a4 <FACEID+0x1c>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 800274e:	4805      	ldr	r0, [pc, #20]	@ (8002764 <FACEID+0x6dc>)
 8002750:	f7fd fe3a 	bl	80003c8 <CLCD_I2C_Clear>
}
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	0800d67c 	.word	0x0800d67c
 8002760:	0800d690 	.word	0x0800d690
 8002764:	200003d8 	.word	0x200003d8
 8002768:	0800d77c 	.word	0x0800d77c
 800276c:	200003d0 	.word	0x200003d0
 8002770:	0800d784 	.word	0x0800d784
 8002774:	0800d788 	.word	0x0800d788
 8002778:	20000020 	.word	0x20000020
 800277c:	20000350 	.word	0x20000350
 8002780:	0800d480 	.word	0x0800d480
 8002784:	0800d794 	.word	0x0800d794
 8002788:	0800d59c 	.word	0x0800d59c
 800278c:	0800d578 	.word	0x0800d578

08002790 <FINGER>:
void FINGER()
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	add_finger();
 8002794:	f000 fa86 	bl	8002ca4 <add_finger>
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <PASSWORD>:
void PASSWORD(){}
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <CheckUID>:
uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	2208      	movs	r2, #8
 80027b8:	4619      	mov	r1, r3
 80027ba:	6838      	ldr	r0, [r7, #0]
 80027bc:	f7fe fa44 	bl	8000c48 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 80027c0:	7cbb      	ldrb	r3, [r7, #18]
 80027c2:	2bff      	cmp	r3, #255	@ 0xff
 80027c4:	d001      	beq.n	80027ca <CheckUID+0x22>
		return 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e016      	b.n	80027f8 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]
 80027ce:	e00f      	b.n	80027f0 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	3318      	adds	r3, #24
 80027dc:	443b      	add	r3, r7
 80027de:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d001      	beq.n	80027ea <CheckUID+0x42>
			return 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e006      	b.n	80027f8 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
 80027ec:	3301      	adds	r3, #1
 80027ee:	75fb      	strb	r3, [r7, #23]
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d9ec      	bls.n	80027d0 <CheckUID+0x28>
	}
	return 1;
 80027f6:	2301      	movs	r3, #1
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002808:	4b14      	ldr	r3, [pc, #80]	@ (800285c <CheckListUID+0x5c>)
 800280a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800280c:	e018      	b.n	8002840 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3306      	adds	r3, #6
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe f9ff 	bl	8000c16 <Flash_Read_2Byte>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002820:	429a      	cmp	r2, r3
 8002822:	d10a      	bne.n	800283a <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002824:	68f9      	ldr	r1, [r7, #12]
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffbe 	bl	80027a8 <CheckUID>
 800282c:	4603      	mov	r3, r0
 800282e:	2b01      	cmp	r3, #1
 8002830:	d103      	bne.n	800283a <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3305      	adds	r3, #5
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	e00b      	b.n	8002852 <CheckListUID+0x52>
		}
		pt = pt + 8;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3308      	adds	r3, #8
 800283e:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3305      	adds	r3, #5
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe f9da 	bl	8000bfe <Flash_Read_Byte>
 800284a:	4603      	mov	r3, r0
 800284c:	2bff      	cmp	r3, #255	@ 0xff
 800284e:	d1de      	bne.n	800280e <CheckListUID+0xe>
	}
	return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	0800f000 	.word	0x0800f000

08002860 <checkcountUID>:

uint8_t checkcountUID(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002866:	4b16      	ldr	r3, [pc, #88]	@ (80028c0 <checkcountUID+0x60>)
 8002868:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800286e:	e01a      	b.n	80028a6 <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3306      	adds	r3, #6
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe f9ce 	bl	8000c16 <Flash_Read_2Byte>
 800287a:	4603      	mov	r3, r0
 800287c:	461a      	mov	r2, r3
 800287e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002882:	429a      	cmp	r2, r3
 8002884:	d10c      	bne.n	80028a0 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3305      	adds	r3, #5
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe f9b7 	bl	8000bfe <Flash_Read_Byte>
 8002890:	4603      	mov	r3, r0
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d102      	bne.n	80028a0 <checkcountUID+0x40>
			{
				count++;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	3301      	adds	r3, #1
 800289e:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3308      	adds	r3, #8
 80028a4:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3305      	adds	r3, #5
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe f9a7 	bl	8000bfe <Flash_Read_Byte>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2bff      	cmp	r3, #255	@ 0xff
 80028b4:	d1dc      	bne.n	8002870 <checkcountUID+0x10>
	}
	return count;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	0800f000 	.word	0x0800f000

080028c4 <adduid>:

void adduid(uint8_t key)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
	setaddress();
 80028ce:	f000 f9a7 	bl	8002c20 <setaddress>
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 80028d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002984 <adduid+0xc0>)
 80028d4:	492c      	ldr	r1, [pc, #176]	@ (8002988 <adduid+0xc4>)
 80028d6:	482d      	ldr	r0, [pc, #180]	@ (800298c <adduid+0xc8>)
 80028d8:	f7fd fd86 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu)
 80028dc:	e049      	b.n	8002972 <adduid+0xae>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 80028de:	482c      	ldr	r0, [pc, #176]	@ (8002990 <adduid+0xcc>)
 80028e0:	f000 fcee 	bl	80032c0 <TM_MFRC522_Check>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d13d      	bne.n	8002966 <adduid+0xa2>
		{
			HAL_Delay(100);
 80028ea:	2064      	movs	r0, #100	@ 0x64
 80028ec:	f001 f980 	bl	8003bf0 <HAL_Delay>
			if (CheckListUID(CardID) == 0)
 80028f0:	4827      	ldr	r0, [pc, #156]	@ (8002990 <adduid+0xcc>)
 80028f2:	f7ff ff85 	bl	8002800 <CheckListUID>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11f      	bne.n	800293c <adduid+0x78>
			{
				CardID[5] = key;
 80028fc:	4a24      	ldr	r2, [pc, #144]	@ (8002990 <adduid+0xcc>)
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002902:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <adduid+0xd0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2206      	movs	r2, #6
 8002908:	4921      	ldr	r1, [pc, #132]	@ (8002990 <adduid+0xcc>)
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe f954 	bl	8000bb8 <Flash_Write_Array>
				AddressUID += 8;
 8002910:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <adduid+0xd0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3308      	adds	r3, #8
 8002916:	4a1f      	ldr	r2, [pc, #124]	@ (8002994 <adduid+0xd0>)
 8002918:	6013      	str	r3, [r2, #0]
				CLCD_I2C_Clear(&LCD1);
 800291a:	481c      	ldr	r0, [pc, #112]	@ (800298c <adduid+0xc8>)
 800291c:	f7fd fd54 	bl	80003c8 <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002920:	2200      	movs	r2, #0
 8002922:	2100      	movs	r1, #0
 8002924:	4819      	ldr	r0, [pc, #100]	@ (800298c <adduid+0xc8>)
 8002926:	f7fd fce5 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 800292a:	491b      	ldr	r1, [pc, #108]	@ (8002998 <adduid+0xd4>)
 800292c:	4817      	ldr	r0, [pc, #92]	@ (800298c <adduid+0xc8>)
 800292e:	f7fd fd34 	bl	800039a <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002932:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002936:	f001 f95b 	bl	8003bf0 <HAL_Delay>
				return;
 800293a:	e020      	b.n	800297e <adduid+0xba>
			}
			else
			{
				CLCD_I2C_Clear(&LCD1);
 800293c:	4813      	ldr	r0, [pc, #76]	@ (800298c <adduid+0xc8>)
 800293e:	f7fd fd43 	bl	80003c8 <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	4811      	ldr	r0, [pc, #68]	@ (800298c <adduid+0xc8>)
 8002948:	f7fd fcd4 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 800294c:	4913      	ldr	r1, [pc, #76]	@ (800299c <adduid+0xd8>)
 800294e:	480f      	ldr	r0, [pc, #60]	@ (800298c <adduid+0xc8>)
 8002950:	f7fd fd23 	bl	800039a <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002954:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002958:	f001 f94a 	bl	8003bf0 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 800295c:	4a09      	ldr	r2, [pc, #36]	@ (8002984 <adduid+0xc0>)
 800295e:	490a      	ldr	r1, [pc, #40]	@ (8002988 <adduid+0xc4>)
 8002960:	480a      	ldr	r0, [pc, #40]	@ (800298c <adduid+0xc8>)
 8002962:	f7fd fd41 	bl	80003e8 <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8002966:	2064      	movs	r0, #100	@ 0x64
 8002968:	f7fd fe98 	bl	800069c <KeyPad_WaitForKeyGetChar>
 800296c:	4603      	mov	r3, r0
 800296e:	2b23      	cmp	r3, #35	@ 0x23
 8002970:	d004      	beq.n	800297c <adduid+0xb8>
	while (exitmenu)
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <adduid+0xdc>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1b1      	bne.n	80028de <adduid+0x1a>
 800297a:	e000      	b.n	800297e <adduid+0xba>
		{
			return;
 800297c:	bf00      	nop
		}
	}
}
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	0800d238 	.word	0x0800d238
 8002988:	0800d7a4 	.word	0x0800d7a4
 800298c:	200003d8 	.word	0x200003d8
 8002990:	200003e4 	.word	0x200003e4
 8002994:	20000024 	.word	0x20000024
 8002998:	0800d7b0 	.word	0x0800d7b0
 800299c:	0800d7c0 	.word	0x0800d7c0
 80029a0:	20000020 	.word	0x20000020

080029a4 <checkthe>:

void checkthe(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
	exitmenu = 30;
 80029aa:	4b49      	ldr	r3, [pc, #292]	@ (8002ad0 <checkthe+0x12c>)
 80029ac:	221e      	movs	r2, #30
 80029ae:	701a      	strb	r2, [r3, #0]
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 80029b0:	4a48      	ldr	r2, [pc, #288]	@ (8002ad4 <checkthe+0x130>)
 80029b2:	4949      	ldr	r1, [pc, #292]	@ (8002ad8 <checkthe+0x134>)
 80029b4:	4849      	ldr	r0, [pc, #292]	@ (8002adc <checkthe+0x138>)
 80029b6:	f7fd fd17 	bl	80003e8 <CLCD_I2C_Display>
	while (exitmenu )
 80029ba:	e07e      	b.n	8002aba <checkthe+0x116>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 80029bc:	4848      	ldr	r0, [pc, #288]	@ (8002ae0 <checkthe+0x13c>)
 80029be:	f000 fc7f 	bl	80032c0 <TM_MFRC522_Check>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d172      	bne.n	8002aae <checkthe+0x10a>
		{
			if (CheckListUID(CardID) == 0)
 80029c8:	4845      	ldr	r0, [pc, #276]	@ (8002ae0 <checkthe+0x13c>)
 80029ca:	f7ff ff19 	bl	8002800 <CheckListUID>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d119      	bne.n	8002a08 <checkthe+0x64>
			{
				CLCD_I2C_Clear(&LCD1);
 80029d4:	4841      	ldr	r0, [pc, #260]	@ (8002adc <checkthe+0x138>)
 80029d6:	f7fd fcf7 	bl	80003c8 <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	483f      	ldr	r0, [pc, #252]	@ (8002adc <checkthe+0x138>)
 80029e0:	f7fd fc88 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 80029e4:	493f      	ldr	r1, [pc, #252]	@ (8002ae4 <checkthe+0x140>)
 80029e6:	483d      	ldr	r0, [pc, #244]	@ (8002adc <checkthe+0x138>)
 80029e8:	f7fd fcd7 	bl	800039a <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 80029ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029f0:	f001 f8fe 	bl	8003bf0 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 80029f4:	4a37      	ldr	r2, [pc, #220]	@ (8002ad4 <checkthe+0x130>)
 80029f6:	4938      	ldr	r1, [pc, #224]	@ (8002ad8 <checkthe+0x134>)
 80029f8:	4838      	ldr	r0, [pc, #224]	@ (8002adc <checkthe+0x138>)
 80029fa:	f7fd fcf5 	bl	80003e8 <CLCD_I2C_Display>
				HAL_Delay(1000);
 80029fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a02:	f001 f8f5 	bl	8003bf0 <HAL_Delay>
 8002a06:	e052      	b.n	8002aae <checkthe+0x10a>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 8002a08:	4835      	ldr	r0, [pc, #212]	@ (8002ae0 <checkthe+0x13c>)
 8002a0a:	f7ff fef9 	bl	8002800 <CheckListUID>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	717b      	strb	r3, [r7, #5]
				CLCD_I2C_Clear(&LCD1);
 8002a20:	482e      	ldr	r0, [pc, #184]	@ (8002adc <checkthe+0x138>)
 8002a22:	f7fd fcd1 	bl	80003c8 <CLCD_I2C_Clear>
				switch (key1)
 8002a26:	797b      	ldrb	r3, [r7, #5]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d109      	bne.n	8002a40 <checkthe+0x9c>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2100      	movs	r1, #0
 8002a30:	482a      	ldr	r0, [pc, #168]	@ (8002adc <checkthe+0x138>)
 8002a32:	f7fd fc5f 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 8002a36:	492c      	ldr	r1, [pc, #176]	@ (8002ae8 <checkthe+0x144>)
 8002a38:	4828      	ldr	r0, [pc, #160]	@ (8002adc <checkthe+0x138>)
 8002a3a:	f7fd fcae 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8002a3e:	e009      	b.n	8002a54 <checkthe+0xb0>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2100      	movs	r1, #0
 8002a44:	4825      	ldr	r0, [pc, #148]	@ (8002adc <checkthe+0x138>)
 8002a46:	f7fd fc55 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "USER CARD");
 8002a4a:	4928      	ldr	r1, [pc, #160]	@ (8002aec <checkthe+0x148>)
 8002a4c:	4823      	ldr	r0, [pc, #140]	@ (8002adc <checkthe+0x138>)
 8002a4e:	f7fd fca4 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8002a52:	bf00      	nop
				}
				switch (key2)
 8002a54:	79bb      	ldrb	r3, [r7, #6]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d002      	beq.n	8002a60 <checkthe+0xbc>
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d00a      	beq.n	8002a74 <checkthe+0xd0>
 8002a5e:	e013      	b.n	8002a88 <checkthe+0xe4>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002a60:	2201      	movs	r2, #1
 8002a62:	2100      	movs	r1, #0
 8002a64:	481d      	ldr	r0, [pc, #116]	@ (8002adc <checkthe+0x138>)
 8002a66:	f7fd fc45 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 1");
 8002a6a:	4921      	ldr	r1, [pc, #132]	@ (8002af0 <checkthe+0x14c>)
 8002a6c:	481b      	ldr	r0, [pc, #108]	@ (8002adc <checkthe+0x138>)
 8002a6e:	f7fd fc94 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8002a72:	e013      	b.n	8002a9c <checkthe+0xf8>
				case 2:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002a74:	2201      	movs	r2, #1
 8002a76:	2100      	movs	r1, #0
 8002a78:	4818      	ldr	r0, [pc, #96]	@ (8002adc <checkthe+0x138>)
 8002a7a:	f7fd fc3b 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 2");
 8002a7e:	491d      	ldr	r1, [pc, #116]	@ (8002af4 <checkthe+0x150>)
 8002a80:	4816      	ldr	r0, [pc, #88]	@ (8002adc <checkthe+0x138>)
 8002a82:	f7fd fc8a 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8002a86:	e009      	b.n	8002a9c <checkthe+0xf8>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002a88:	2201      	movs	r2, #1
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4813      	ldr	r0, [pc, #76]	@ (8002adc <checkthe+0x138>)
 8002a8e:	f7fd fc31 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 3");
 8002a92:	4919      	ldr	r1, [pc, #100]	@ (8002af8 <checkthe+0x154>)
 8002a94:	4811      	ldr	r0, [pc, #68]	@ (8002adc <checkthe+0x138>)
 8002a96:	f7fd fc80 	bl	800039a <CLCD_I2C_WriteString>
					break;
 8002a9a:	bf00      	nop
				}
				HAL_Delay(1000);
 8002a9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aa0:	f001 f8a6 	bl	8003bf0 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad4 <checkthe+0x130>)
 8002aa6:	4915      	ldr	r1, [pc, #84]	@ (8002afc <checkthe+0x158>)
 8002aa8:	480c      	ldr	r0, [pc, #48]	@ (8002adc <checkthe+0x138>)
 8002aaa:	f7fd fc9d 	bl	80003e8 <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8002aae:	2064      	movs	r0, #100	@ 0x64
 8002ab0:	f7fd fdf4 	bl	800069c <KeyPad_WaitForKeyGetChar>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b23      	cmp	r3, #35	@ 0x23
 8002ab8:	d005      	beq.n	8002ac6 <checkthe+0x122>
	while (exitmenu )
 8002aba:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <checkthe+0x12c>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f47f af7c 	bne.w	80029bc <checkthe+0x18>
 8002ac4:	e000      	b.n	8002ac8 <checkthe+0x124>
		{
			return;
 8002ac6:	bf00      	nop
		}
	}
}
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000020 	.word	0x20000020
 8002ad4:	0800d238 	.word	0x0800d238
 8002ad8:	0800d7a4 	.word	0x0800d7a4
 8002adc:	200003d8 	.word	0x200003d8
 8002ae0:	200003e4 	.word	0x200003e4
 8002ae4:	0800d7d0 	.word	0x0800d7d0
 8002ae8:	0800d7e0 	.word	0x0800d7e0
 8002aec:	0800d7ec 	.word	0x0800d7ec
 8002af0:	0800d7f8 	.word	0x0800d7f8
 8002af4:	0800d800 	.word	0x0800d800
 8002af8:	0800d808 	.word	0x0800d808
 8002afc:	0800d548 	.word	0x0800d548

08002b00 <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 8002b0a:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <CheckKey+0x58>)
 8002b0c:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002b0e:	e015      	b.n	8002b3c <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3306      	adds	r3, #6
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe f87e 	bl	8000c16 <Flash_Read_2Byte>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d107      	bne.n	8002b36 <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3305      	adds	r3, #5
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	79fa      	ldrb	r2, [r7, #7]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d101      	bne.n	8002b36 <CheckKey+0x36>
				return pt;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	e00b      	b.n	8002b4e <CheckKey+0x4e>
		}
		pt = pt + 8;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3308      	adds	r3, #8
 8002b3a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3305      	adds	r3, #5
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe f85c 	bl	8000bfe <Flash_Read_Byte>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2bff      	cmp	r3, #255	@ 0xff
 8002b4a:	d1e1      	bne.n	8002b10 <CheckKey+0x10>
	}
	return 0;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	0800f000 	.word	0x0800f000

08002b5c <removeuid>:
void removeuid(uint32_t addressrm)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3306      	adds	r3, #6
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe f80c 	bl	8000b88 <Flash_Write_2Byte>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <startadd>:
void startadd(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bfc <startadd+0x84>)
 8002b7e:	4920      	ldr	r1, [pc, #128]	@ (8002c00 <startadd+0x88>)
 8002b80:	4820      	ldr	r0, [pc, #128]	@ (8002c04 <startadd+0x8c>)
 8002b82:	f7fd fc31 	bl	80003e8 <CLCD_I2C_Display>
	setaddress();
 8002b86:	f000 f84b 	bl	8002c20 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002b8a:	481f      	ldr	r0, [pc, #124]	@ (8002c08 <startadd+0x90>)
 8002b8c:	f000 fb98 	bl	80032c0 <TM_MFRC522_Check>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f9      	bne.n	8002b8a <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 8002b96:	481c      	ldr	r0, [pc, #112]	@ (8002c08 <startadd+0x90>)
 8002b98:	f7ff fe32 	bl	8002800 <CheckListUID>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <startadd+0x4a>
				{
					CardID[5] = 0x11;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <startadd+0x90>)
 8002ba4:	2211      	movs	r2, #17
 8002ba6:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8002ba8:	4b18      	ldr	r3, [pc, #96]	@ (8002c0c <startadd+0x94>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2206      	movs	r2, #6
 8002bae:	4916      	ldr	r1, [pc, #88]	@ (8002c08 <startadd+0x90>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe f801 	bl	8000bb8 <Flash_Write_Array>
					AddressUID += 8;
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <startadd+0x94>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3308      	adds	r3, #8
 8002bbc:	4a13      	ldr	r2, [pc, #76]	@ (8002c0c <startadd+0x94>)
 8002bbe:	6013      	str	r3, [r2, #0]
					break;
 8002bc0:	e00e      	b.n	8002be0 <startadd+0x68>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 8002bc2:	4a13      	ldr	r2, [pc, #76]	@ (8002c10 <startadd+0x98>)
 8002bc4:	4913      	ldr	r1, [pc, #76]	@ (8002c14 <startadd+0x9c>)
 8002bc6:	480f      	ldr	r0, [pc, #60]	@ (8002c04 <startadd+0x8c>)
 8002bc8:	f7fd fc0e 	bl	80003e8 <CLCD_I2C_Display>
					HAL_Delay(1000);
 8002bcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bd0:	f001 f80e 	bl	8003bf0 <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002bd4:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <startadd+0x84>)
 8002bd6:	490a      	ldr	r1, [pc, #40]	@ (8002c00 <startadd+0x88>)
 8002bd8:	480a      	ldr	r0, [pc, #40]	@ (8002c04 <startadd+0x8c>)
 8002bda:	f7fd fc05 	bl	80003e8 <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002bde:	e7d4      	b.n	8002b8a <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 8002be0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c18 <startadd+0xa0>)
 8002be2:	490e      	ldr	r1, [pc, #56]	@ (8002c1c <startadd+0xa4>)
 8002be4:	4807      	ldr	r0, [pc, #28]	@ (8002c04 <startadd+0x8c>)
 8002be6:	f7fd fbff 	bl	80003e8 <CLCD_I2C_Display>
	HAL_Delay(1000);
 8002bea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bee:	f000 ffff 	bl	8003bf0 <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 8002bf2:	4804      	ldr	r0, [pc, #16]	@ (8002c04 <startadd+0x8c>)
 8002bf4:	f7fd fbe8 	bl	80003c8 <CLCD_I2C_Clear>
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	0800d810 	.word	0x0800d810
 8002c00:	0800d548 	.word	0x0800d548
 8002c04:	200003d8 	.word	0x200003d8
 8002c08:	200003e4 	.word	0x200003e4
 8002c0c:	20000024 	.word	0x20000024
 8002c10:	0800d824 	.word	0x0800d824
 8002c14:	0800d838 	.word	0x0800d838
 8002c18:	0800d848 	.word	0x0800d848
 8002c1c:	0800d858 	.word	0x0800d858

08002c20 <setaddress>:
void setaddress(void){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <setaddress+0x30>)
 8002c28:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c2a:	e002      	b.n	8002c32 <setaddress+0x12>
	{
		pt = pt + 8;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3308      	adds	r3, #8
 8002c30:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3305      	adds	r3, #5
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd ffe1 	bl	8000bfe <Flash_Read_Byte>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2bff      	cmp	r3, #255	@ 0xff
 8002c40:	d1f4      	bne.n	8002c2c <setaddress+0xc>
	}
	AddressUID = pt;
 8002c42:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <setaddress+0x34>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6013      	str	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	0800f000 	.word	0x0800f000
 8002c54:	20000024 	.word	0x20000024

08002c58 <remoall>:

void remoall(){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c9c <remoall+0x44>)
 8002c60:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8002c62:	e00a      	b.n	8002c7a <remoall+0x22>
		Flash_Erase(pt);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fd ff73 	bl	8000b50 <Flash_Erase>
		pt = pt + 0x400;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c70:	607b      	str	r3, [r7, #4]
		if(pt == 0x800FC00)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <remoall+0x48>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00b      	beq.n	8002c92 <remoall+0x3a>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fd ffd7 	bl	8000c2e <Flash_Read_8Byte>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	bf08      	it	eq
 8002c8a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8002c8e:	d1e9      	bne.n	8002c64 <remoall+0xc>
			break;
	}
}
 8002c90:	e000      	b.n	8002c94 <remoall+0x3c>
			break;
 8002c92:	bf00      	nop
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	0800f000 	.word	0x0800f000
 8002ca0:	0800fc00 	.word	0x0800fc00

08002ca4 <add_finger>:
	}
}

//---------- them van tay---------------
void add_finger()
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	vitri2:
	while(1)
	{
		collect_finger();
 8002ca8:	f7fd fe18 	bl	80008dc <collect_finger>
		CLCD_I2C_Display(&LCD1, "  Them Van Tay!!     ", "Dat Van Tay!!     ");
 8002cac:	4a76      	ldr	r2, [pc, #472]	@ (8002e88 <add_finger+0x1e4>)
 8002cae:	4977      	ldr	r1, [pc, #476]	@ (8002e8c <add_finger+0x1e8>)
 8002cb0:	4877      	ldr	r0, [pc, #476]	@ (8002e90 <add_finger+0x1ec>)
 8002cb2:	f7fd fb99 	bl	80003e8 <CLCD_I2C_Display>
		HAL_Delay(1000);
 8002cb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cba:	f000 ff99 	bl	8003bf0 <HAL_Delay>
	// dat tay vao
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4873      	ldr	r0, [pc, #460]	@ (8002e90 <add_finger+0x1ec>)
 8002cc4:	f7fd fb16 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8002cc8:	4972      	ldr	r1, [pc, #456]	@ (8002e94 <add_finger+0x1f0>)
 8002cca:	4871      	ldr	r0, [pc, #452]	@ (8002e90 <add_finger+0x1ec>)
 8002ccc:	f7fd fb65 	bl	800039a <CLCD_I2C_WriteString>
		tmp=0xff;
 8002cd0:	4b71      	ldr	r3, [pc, #452]	@ (8002e98 <add_finger+0x1f4>)
 8002cd2:	22ff      	movs	r2, #255	@ 0xff
 8002cd4:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){
 8002cd6:	e008      	b.n	8002cea <add_finger+0x46>
			collect_finger();
 8002cd8:	f7fd fe00 	bl	80008dc <collect_finger>
			collect_finger();
 8002cdc:	f7fd fdfe 	bl	80008dc <collect_finger>
			tmp= collect_finger();
 8002ce0:	f7fd fdfc 	bl	80008dc <collect_finger>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4a6c      	ldr	r2, [pc, #432]	@ (8002e98 <add_finger+0x1f4>)
 8002ce8:	6013      	str	r3, [r2, #0]
		while(tmp!=0x00){
 8002cea:	4b6b      	ldr	r3, [pc, #428]	@ (8002e98 <add_finger+0x1f4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f2      	bne.n	8002cd8 <add_finger+0x34>
		}
		tmp=0xff;
 8002cf2:	4b69      	ldr	r3, [pc, #420]	@ (8002e98 <add_finger+0x1f4>)
 8002cf4:	22ff      	movs	r2, #255	@ 0xff
 8002cf6:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4864      	ldr	r0, [pc, #400]	@ (8002e90 <add_finger+0x1ec>)
 8002cfe:	f7fd faf9 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8002d02:	4966      	ldr	r1, [pc, #408]	@ (8002e9c <add_finger+0x1f8>)
 8002d04:	4862      	ldr	r0, [pc, #392]	@ (8002e90 <add_finger+0x1ec>)
 8002d06:	f7fd fb48 	bl	800039a <CLCD_I2C_WriteString>
 8002d0a:	2064      	movs	r0, #100	@ 0x64
 8002d0c:	f000 ff70 	bl	8003bf0 <HAL_Delay>
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002d10:	2201      	movs	r2, #1
 8002d12:	2100      	movs	r1, #0
 8002d14:	485e      	ldr	r0, [pc, #376]	@ (8002e90 <add_finger+0x1ec>)
 8002d16:	f7fd faed 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8002d1a:	4961      	ldr	r1, [pc, #388]	@ (8002ea0 <add_finger+0x1fc>)
 8002d1c:	485c      	ldr	r0, [pc, #368]	@ (8002e90 <add_finger+0x1ec>)
 8002d1e:	f7fd fb3c 	bl	800039a <CLCD_I2C_WriteString>
		tmp=0xff;
 8002d22:	4b5d      	ldr	r3, [pc, #372]	@ (8002e98 <add_finger+0x1f4>)
 8002d24:	22ff      	movs	r2, #255	@ 0xff
 8002d26:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){
 8002d28:	e005      	b.n	8002d36 <add_finger+0x92>
		tmp=img2tz(0x01);
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f7fd fe02 	bl	8000934 <img2tz>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4a59      	ldr	r2, [pc, #356]	@ (8002e98 <add_finger+0x1f4>)
 8002d34:	6013      	str	r3, [r2, #0]
		while(tmp!=0x00){
 8002d36:	4b58      	ldr	r3, [pc, #352]	@ (8002e98 <add_finger+0x1f4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f5      	bne.n	8002d2a <add_finger+0x86>
		}
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002d3e:	2201      	movs	r2, #1
 8002d40:	2100      	movs	r1, #0
 8002d42:	4853      	ldr	r0, [pc, #332]	@ (8002e90 <add_finger+0x1ec>)
 8002d44:	f7fd fad6 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"dat lai van tay !!   ");HAL_Delay(100);
 8002d48:	4956      	ldr	r1, [pc, #344]	@ (8002ea4 <add_finger+0x200>)
 8002d4a:	4851      	ldr	r0, [pc, #324]	@ (8002e90 <add_finger+0x1ec>)
 8002d4c:	f7fd fb25 	bl	800039a <CLCD_I2C_WriteString>
 8002d50:	2064      	movs	r0, #100	@ 0x64
 8002d52:	f000 ff4d 	bl	8003bf0 <HAL_Delay>
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002d56:	2201      	movs	r2, #1
 8002d58:	2100      	movs	r1, #0
 8002d5a:	484d      	ldr	r0, [pc, #308]	@ (8002e90 <add_finger+0x1ec>)
 8002d5c:	f7fd faca 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8002d60:	494c      	ldr	r1, [pc, #304]	@ (8002e94 <add_finger+0x1f0>)
 8002d62:	484b      	ldr	r0, [pc, #300]	@ (8002e90 <add_finger+0x1ec>)
 8002d64:	f7fd fb19 	bl	800039a <CLCD_I2C_WriteString>
		tmp=0xff;
 8002d68:	4b4b      	ldr	r3, [pc, #300]	@ (8002e98 <add_finger+0x1f4>)
 8002d6a:	22ff      	movs	r2, #255	@ 0xff
 8002d6c:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00)	{
 8002d6e:	e008      	b.n	8002d82 <add_finger+0xde>
			collect_finger();
 8002d70:	f7fd fdb4 	bl	80008dc <collect_finger>
			collect_finger();
 8002d74:	f7fd fdb2 	bl	80008dc <collect_finger>
			tmp=collect_finger();
 8002d78:	f7fd fdb0 	bl	80008dc <collect_finger>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4a46      	ldr	r2, [pc, #280]	@ (8002e98 <add_finger+0x1f4>)
 8002d80:	6013      	str	r3, [r2, #0]
		while(tmp!=0x00)	{
 8002d82:	4b45      	ldr	r3, [pc, #276]	@ (8002e98 <add_finger+0x1f4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f2      	bne.n	8002d70 <add_finger+0xcc>
		}
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4840      	ldr	r0, [pc, #256]	@ (8002e90 <add_finger+0x1ec>)
 8002d90:	f7fd fab0 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8002d94:	4941      	ldr	r1, [pc, #260]	@ (8002e9c <add_finger+0x1f8>)
 8002d96:	483e      	ldr	r0, [pc, #248]	@ (8002e90 <add_finger+0x1ec>)
 8002d98:	f7fd faff 	bl	800039a <CLCD_I2C_WriteString>
 8002d9c:	2064      	movs	r0, #100	@ 0x64
 8002d9e:	f000 ff27 	bl	8003bf0 <HAL_Delay>
		tmp=0xff;
 8002da2:	4b3d      	ldr	r3, [pc, #244]	@ (8002e98 <add_finger+0x1f4>)
 8002da4:	22ff      	movs	r2, #255	@ 0xff
 8002da6:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002da8:	2201      	movs	r2, #1
 8002daa:	2100      	movs	r1, #0
 8002dac:	4838      	ldr	r0, [pc, #224]	@ (8002e90 <add_finger+0x1ec>)
 8002dae:	f7fd faa1 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8002db2:	493b      	ldr	r1, [pc, #236]	@ (8002ea0 <add_finger+0x1fc>)
 8002db4:	4836      	ldr	r0, [pc, #216]	@ (8002e90 <add_finger+0x1ec>)
 8002db6:	f7fd faf0 	bl	800039a <CLCD_I2C_WriteString>
		while(tmp!=0x00)	{tmp=img2tz(0x02);}
 8002dba:	e005      	b.n	8002dc8 <add_finger+0x124>
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f7fd fdb9 	bl	8000934 <img2tz>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4a34      	ldr	r2, [pc, #208]	@ (8002e98 <add_finger+0x1f4>)
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b33      	ldr	r3, [pc, #204]	@ (8002e98 <add_finger+0x1f4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f5      	bne.n	8002dbc <add_finger+0x118>
		tmp=0xff;
 8002dd0:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <add_finger+0x1f4>)
 8002dd2:	22ff      	movs	r2, #255	@ 0xff
 8002dd4:	601a      	str	r2, [r3, #0]
		// kiem tra 2 buff co trung nhau khong
		while(tmp!=0x00)
 8002dd6:	e01a      	b.n	8002e0e <add_finger+0x16a>
		{
			tmp=match();	//HAL_Delay(100);
 8002dd8:	f7fd fde8 	bl	80009ac <match>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4a2e      	ldr	r2, [pc, #184]	@ (8002e98 <add_finger+0x1f4>)
 8002de0:	6013      	str	r3, [r2, #0]
			if(tmp==0x08||tmp==0x01)
 8002de2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e98 <add_finger+0x1f4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d003      	beq.n	8002df2 <add_finger+0x14e>
 8002dea:	4b2b      	ldr	r3, [pc, #172]	@ (8002e98 <add_finger+0x1f4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d10d      	bne.n	8002e0e <add_finger+0x16a>
			{
				// loi, lam lai
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002df2:	2201      	movs	r2, #1
 8002df4:	2100      	movs	r1, #0
 8002df6:	4826      	ldr	r0, [pc, #152]	@ (8002e90 <add_finger+0x1ec>)
 8002df8:	f7fd fa7c 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1,"LOI, Lam Lai!!   ");HAL_Delay(1500);
 8002dfc:	492a      	ldr	r1, [pc, #168]	@ (8002ea8 <add_finger+0x204>)
 8002dfe:	4824      	ldr	r0, [pc, #144]	@ (8002e90 <add_finger+0x1ec>)
 8002e00:	f7fd facb 	bl	800039a <CLCD_I2C_WriteString>
 8002e04:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002e08:	f000 fef2 	bl	8003bf0 <HAL_Delay>
				goto vitri2;
 8002e0c:	e74c      	b.n	8002ca8 <add_finger+0x4>
		while(tmp!=0x00)
 8002e0e:	4b22      	ldr	r3, [pc, #136]	@ (8002e98 <add_finger+0x1f4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e0      	bne.n	8002dd8 <add_finger+0x134>
			}
		}
		tmp=0xff;
 8002e16:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <add_finger+0x1f4>)
 8002e18:	22ff      	movs	r2, #255	@ 0xff
 8002e1a:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){tmp=regmodel();HAL_Delay(100);}
 8002e1c:	e007      	b.n	8002e2e <add_finger+0x18a>
 8002e1e:	f7fd fdf1 	bl	8000a04 <regmodel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4a1c      	ldr	r2, [pc, #112]	@ (8002e98 <add_finger+0x1f4>)
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	2064      	movs	r0, #100	@ 0x64
 8002e2a:	f000 fee1 	bl	8003bf0 <HAL_Delay>
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e98 <add_finger+0x1f4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f3      	bne.n	8002e1e <add_finger+0x17a>
		tmp=0xff;
 8002e36:	4b18      	ldr	r3, [pc, #96]	@ (8002e98 <add_finger+0x1f4>)
 8002e38:	22ff      	movs	r2, #255	@ 0xff
 8002e3a:	601a      	str	r2, [r3, #0]
		while(tmp!=0x00){tmp=store(ID);HAL_Delay(100);}			// luu id
 8002e3c:	e00a      	b.n	8002e54 <add_finger+0x1b0>
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <add_finger+0x208>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd fe0a 	bl	8000a5c <store>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4a13      	ldr	r2, [pc, #76]	@ (8002e98 <add_finger+0x1f4>)
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	2064      	movs	r0, #100	@ 0x64
 8002e50:	f000 fece 	bl	8003bf0 <HAL_Delay>
 8002e54:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <add_finger+0x1f4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <add_finger+0x19a>
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	2100      	movs	r1, #0
 8002e60:	480b      	ldr	r0, [pc, #44]	@ (8002e90 <add_finger+0x1ec>)
 8002e62:	f7fd fa47 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 8002e66:	4912      	ldr	r1, [pc, #72]	@ (8002eb0 <add_finger+0x20c>)
 8002e68:	4809      	ldr	r0, [pc, #36]	@ (8002e90 <add_finger+0x1ec>)
 8002e6a:	f7fd fa96 	bl	800039a <CLCD_I2C_WriteString>
				/***************** DA LUU XONG**************************/
		HAL_Delay(1500);
 8002e6e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002e72:	f000 febd 	bl	8003bf0 <HAL_Delay>
		tmp=0xff;
 8002e76:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <add_finger+0x1f4>)
 8002e78:	22ff      	movs	r2, #255	@ 0xff
 8002e7a:	601a      	str	r2, [r3, #0]
		CLCD_I2C_Clear(&LCD1);
 8002e7c:	4804      	ldr	r0, [pc, #16]	@ (8002e90 <add_finger+0x1ec>)
 8002e7e:	f7fd faa3 	bl	80003c8 <CLCD_I2C_Clear>
		break;
 8002e82:	bf00      	nop
	}
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	0800d868 	.word	0x0800d868
 8002e8c:	0800d87c 	.word	0x0800d87c
 8002e90:	200003d8 	.word	0x200003d8
 8002e94:	0800d894 	.word	0x0800d894
 8002e98:	20000404 	.word	0x20000404
 8002e9c:	0800d8b0 	.word	0x0800d8b0
 8002ea0:	0800d8c4 	.word	0x0800d8c4
 8002ea4:	0800d8dc 	.word	0x0800d8dc
 8002ea8:	0800d8f4 	.word	0x0800d8f4
 8002eac:	20000408 	.word	0x20000408
 8002eb0:	0800d908 	.word	0x0800d908

08002eb4 <read_finger>:
						//----------end them van tay---------------
void read_finger()
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa8 <read_finger+0xf4>)
 8002eba:	22ff      	movs	r2, #255	@ 0xff
 8002ebc:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 8002ebe:	f000 fe8d 	bl	8003bdc <HAL_GetTick>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	4a39      	ldr	r2, [pc, #228]	@ (8002fac <read_finger+0xf8>)
 8002ec6:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 8002ec8:	e013      	b.n	8002ef2 <read_finger+0x3e>
		tmp=collect_finger();
 8002eca:	f7fd fd07 	bl	80008dc <collect_finger>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4a35      	ldr	r2, [pc, #212]	@ (8002fa8 <read_finger+0xf4>)
 8002ed2:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 8002ed4:	f000 fe82 	bl	8003bdc <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b34      	ldr	r3, [pc, #208]	@ (8002fac <read_finger+0xf8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002ee4:	d305      	bcc.n	8002ef2 <read_finger+0x3e>
		time_cho=HAL_GetTick();
 8002ee6:	f000 fe79 	bl	8003bdc <HAL_GetTick>
 8002eea:	4603      	mov	r3, r0
 8002eec:	4a2f      	ldr	r2, [pc, #188]	@ (8002fac <read_finger+0xf8>)
 8002eee:	6013      	str	r3, [r2, #0]
		return;}
 8002ef0:	e059      	b.n	8002fa6 <read_finger+0xf2>
	while(tmp!=0x00){
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa8 <read_finger+0xf4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e7      	bne.n	8002eca <read_finger+0x16>

	}
	tmp=0xff;
 8002efa:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa8 <read_finger+0xf4>)
 8002efc:	22ff      	movs	r2, #255	@ 0xff
 8002efe:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 8002f00:	4b29      	ldr	r3, [pc, #164]	@ (8002fa8 <read_finger+0xf4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <read_finger+0x60>
 8002f08:	2001      	movs	r0, #1
 8002f0a:	f7fd fd13 	bl	8000934 <img2tz>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4a25      	ldr	r2, [pc, #148]	@ (8002fa8 <read_finger+0xf4>)
 8002f12:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 8002f14:	4b24      	ldr	r3, [pc, #144]	@ (8002fa8 <read_finger+0xf4>)
 8002f16:	22ff      	movs	r2, #255	@ 0xff
 8002f18:	601a      	str	r2, [r3, #0]
	tmp=search();
 8002f1a:	f7fd fdde 	bl	8000ada <search>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4a21      	ldr	r2, [pc, #132]	@ (8002fa8 <read_finger+0xf4>)
 8002f22:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 8002f24:	4b20      	ldr	r3, [pc, #128]	@ (8002fa8 <read_finger+0xf4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d11d      	bne.n	8002f68 <read_finger+0xb4>
	{
		tmp=0xff;	// co van tay
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <read_finger+0xf4>)
 8002f2e:	22ff      	movs	r2, #255	@ 0xff
 8002f30:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002f32:	2201      	movs	r2, #1
 8002f34:	2100      	movs	r1, #0
 8002f36:	481e      	ldr	r0, [pc, #120]	@ (8002fb0 <read_finger+0xfc>)
 8002f38:	f7fd f9dc 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Mo Cua!");
 8002f3c:	491d      	ldr	r1, [pc, #116]	@ (8002fb4 <read_finger+0x100>)
 8002f3e:	481c      	ldr	r0, [pc, #112]	@ (8002fb0 <read_finger+0xfc>)
 8002f40:	f7fd fa2b 	bl	800039a <CLCD_I2C_WriteString>
		sprintf(mess," #id = %c  ",pID);
 8002f44:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb8 <read_finger+0x104>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	491c      	ldr	r1, [pc, #112]	@ (8002fbc <read_finger+0x108>)
 8002f4c:	481c      	ldr	r0, [pc, #112]	@ (8002fc0 <read_finger+0x10c>)
 8002f4e:	f009 fc6b 	bl	800c828 <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 8002f52:	491b      	ldr	r1, [pc, #108]	@ (8002fc0 <read_finger+0x10c>)
 8002f54:	4816      	ldr	r0, [pc, #88]	@ (8002fb0 <read_finger+0xfc>)
 8002f56:	f7fd fa20 	bl	800039a <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 8002f5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f5e:	f000 fe47 	bl	8003bf0 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8002f62:	4813      	ldr	r0, [pc, #76]	@ (8002fb0 <read_finger+0xfc>)
 8002f64:	f7fd fa30 	bl	80003c8 <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 8002f68:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa8 <read_finger+0xf4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d11a      	bne.n	8002fa6 <read_finger+0xf2>
	{
		tmp=0xff;
 8002f70:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <read_finger+0xf4>)
 8002f72:	22ff      	movs	r2, #255	@ 0xff
 8002f74:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002f76:	2201      	movs	r2, #1
 8002f78:	2100      	movs	r1, #0
 8002f7a:	480d      	ldr	r0, [pc, #52]	@ (8002fb0 <read_finger+0xfc>)
 8002f7c:	f7fd f9ba 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1," Van Tay Sai!!     "); HAL_Delay(1000);
 8002f80:	4910      	ldr	r1, [pc, #64]	@ (8002fc4 <read_finger+0x110>)
 8002f82:	480b      	ldr	r0, [pc, #44]	@ (8002fb0 <read_finger+0xfc>)
 8002f84:	f7fd fa09 	bl	800039a <CLCD_I2C_WriteString>
 8002f88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f8c:	f000 fe30 	bl	8003bf0 <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 8002f90:	490b      	ldr	r1, [pc, #44]	@ (8002fc0 <read_finger+0x10c>)
 8002f92:	4807      	ldr	r0, [pc, #28]	@ (8002fb0 <read_finger+0xfc>)
 8002f94:	f7fd fa01 	bl	800039a <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 8002f98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f9c:	f000 fe28 	bl	8003bf0 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8002fa0:	4803      	ldr	r0, [pc, #12]	@ (8002fb0 <read_finger+0xfc>)
 8002fa2:	f7fd fa11 	bl	80003c8 <CLCD_I2C_Clear>
	}
}
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000404 	.word	0x20000404
 8002fac:	200003f4 	.word	0x200003f4
 8002fb0:	200003d8 	.word	0x200003d8
 8002fb4:	0800d91c 	.word	0x0800d91c
 8002fb8:	20000218 	.word	0x20000218
 8002fbc:	0800d924 	.word	0x0800d924
 8002fc0:	200003f8 	.word	0x200003f8
 8002fc4:	0800d930 	.word	0x0800d930

08002fc8 <startface>:
void startface(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	if(Rx_Buffer[0] == 'Y'){
 8002fcc:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <startface+0x5c>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b25b      	sxtb	r3, r3
 8002fd2:	2b59      	cmp	r3, #89	@ 0x59
 8002fd4:	d110      	bne.n	8002ff8 <startface+0x30>
        CLCD_I2C_Clear(&LCD1);
 8002fd6:	4814      	ldr	r0, [pc, #80]	@ (8003028 <startface+0x60>)
 8002fd8:	f7fd f9f6 	bl	80003c8 <CLCD_I2C_Clear>
        CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4811      	ldr	r0, [pc, #68]	@ (8003028 <startface+0x60>)
 8002fe2:	f7fd f987 	bl	80002f4 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 8002fe6:	4911      	ldr	r1, [pc, #68]	@ (800302c <startface+0x64>)
 8002fe8:	480f      	ldr	r0, [pc, #60]	@ (8003028 <startface+0x60>)
 8002fea:	f7fd f9d6 	bl	800039a <CLCD_I2C_WriteString>
        HAL_Delay(2000);
 8002fee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ff2:	f000 fdfd 	bl	8003bf0 <HAL_Delay>
 8002ff6:	e00d      	b.n	8003014 <startface+0x4c>
	}else if(Rx_Buffer[0] == 'N'){
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <startface+0x5c>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b25b      	sxtb	r3, r3
 8002ffe:	2b4e      	cmp	r3, #78	@ 0x4e
 8003000:	d108      	bne.n	8003014 <startface+0x4c>
		CLCD_I2C_Display(&LCD1, "  WRONG FACEID", "CAN NOT ACCESS");
 8003002:	4a0b      	ldr	r2, [pc, #44]	@ (8003030 <startface+0x68>)
 8003004:	490b      	ldr	r1, [pc, #44]	@ (8003034 <startface+0x6c>)
 8003006:	4808      	ldr	r0, [pc, #32]	@ (8003028 <startface+0x60>)
 8003008:	f7fd f9ee 	bl	80003e8 <CLCD_I2C_Display>
        HAL_Delay(2000);
 800300c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003010:	f000 fdee 	bl	8003bf0 <HAL_Delay>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003014:	2280      	movs	r2, #128	@ 0x80
 8003016:	2100      	movs	r1, #0
 8003018:	4802      	ldr	r0, [pc, #8]	@ (8003024 <startface+0x5c>)
 800301a:	f009 fc25 	bl	800c868 <memset>
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000350 	.word	0x20000350
 8003028:	200003d8 	.word	0x200003d8
 800302c:	0800d1d0 	.word	0x0800d1d0
 8003030:	0800d944 	.word	0x0800d944
 8003034:	0800d954 	.word	0x0800d954

08003038 <addface>:
void addface(uint8_t key)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003042:	2280      	movs	r2, #128	@ 0x80
 8003044:	2100      	movs	r1, #0
 8003046:	4820      	ldr	r0, [pc, #128]	@ (80030c8 <addface+0x90>)
 8003048:	f009 fc0e 	bl	800c868 <memset>
	sprintf(Tx_Buffer , "Add.%d", key );
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	461a      	mov	r2, r3
 8003050:	491e      	ldr	r1, [pc, #120]	@ (80030cc <addface+0x94>)
 8003052:	481f      	ldr	r0, [pc, #124]	@ (80030d0 <addface+0x98>)
 8003054:	f009 fbe8 	bl	800c828 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8003058:	2105      	movs	r1, #5
 800305a:	481d      	ldr	r0, [pc, #116]	@ (80030d0 <addface+0x98>)
 800305c:	f009 f806 	bl	800c06c <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8003060:	4a1c      	ldr	r2, [pc, #112]	@ (80030d4 <addface+0x9c>)
 8003062:	491d      	ldr	r1, [pc, #116]	@ (80030d8 <addface+0xa0>)
 8003064:	481d      	ldr	r0, [pc, #116]	@ (80030dc <addface+0xa4>)
 8003066:	f7fd f9bf 	bl	80003e8 <CLCD_I2C_Display>
	exitmenu = 60;
 800306a:	4b1d      	ldr	r3, [pc, #116]	@ (80030e0 <addface+0xa8>)
 800306c:	223c      	movs	r2, #60	@ 0x3c
 800306e:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8003070:	e01d      	b.n	80030ae <addface+0x76>
		if(Rx_Buffer[0] == 'T'){
 8003072:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <addface+0x90>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b25b      	sxtb	r3, r3
 8003078:	2b54      	cmp	r3, #84	@ 0x54
 800307a:	d109      	bne.n	8003090 <addface+0x58>
			CLCD_I2C_Display(&LCD1, "   ADD FACEID", "   SUCCESSFUL");
 800307c:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <addface+0xac>)
 800307e:	491a      	ldr	r1, [pc, #104]	@ (80030e8 <addface+0xb0>)
 8003080:	4816      	ldr	r0, [pc, #88]	@ (80030dc <addface+0xa4>)
 8003082:	f7fd f9b1 	bl	80003e8 <CLCD_I2C_Display>
			HAL_Delay(2000);
 8003086:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800308a:	f000 fdb1 	bl	8003bf0 <HAL_Delay>
			break;
 800308e:	e012      	b.n	80030b6 <addface+0x7e>
		}
		else if(Rx_Buffer[0] == 'F'){
 8003090:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <addface+0x90>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b25b      	sxtb	r3, r3
 8003096:	2b46      	cmp	r3, #70	@ 0x46
 8003098:	d109      	bne.n	80030ae <addface+0x76>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKNOWN", "");
 800309a:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <addface+0x9c>)
 800309c:	4913      	ldr	r1, [pc, #76]	@ (80030ec <addface+0xb4>)
 800309e:	480f      	ldr	r0, [pc, #60]	@ (80030dc <addface+0xa4>)
 80030a0:	f7fd f9a2 	bl	80003e8 <CLCD_I2C_Display>
			HAL_Delay(2000);
 80030a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80030a8:	f000 fda2 	bl	8003bf0 <HAL_Delay>
			break;
 80030ac:	e003      	b.n	80030b6 <addface+0x7e>
	while(exitmenu != 0){
 80030ae:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <addface+0xa8>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1dd      	bne.n	8003072 <addface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80030b6:	2280      	movs	r2, #128	@ 0x80
 80030b8:	2100      	movs	r1, #0
 80030ba:	4803      	ldr	r0, [pc, #12]	@ (80030c8 <addface+0x90>)
 80030bc:	f009 fbd4 	bl	800c868 <memset>
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000350 	.word	0x20000350
 80030cc:	0800d964 	.word	0x0800d964
 80030d0:	200003d0 	.word	0x200003d0
 80030d4:	0800d784 	.word	0x0800d784
 80030d8:	0800d788 	.word	0x0800d788
 80030dc:	200003d8 	.word	0x200003d8
 80030e0:	20000020 	.word	0x20000020
 80030e4:	0800d7b0 	.word	0x0800d7b0
 80030e8:	0800d96c 	.word	0x0800d96c
 80030ec:	0800d97c 	.word	0x0800d97c

080030f0 <removeface>:
void removeface(uint8_t key)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80030fa:	2280      	movs	r2, #128	@ 0x80
 80030fc:	2100      	movs	r1, #0
 80030fe:	4820      	ldr	r0, [pc, #128]	@ (8003180 <removeface+0x90>)
 8003100:	f009 fbb2 	bl	800c868 <memset>
	sprintf(Tx_Buffer , "Rem.%d", key );
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	461a      	mov	r2, r3
 8003108:	491e      	ldr	r1, [pc, #120]	@ (8003184 <removeface+0x94>)
 800310a:	481f      	ldr	r0, [pc, #124]	@ (8003188 <removeface+0x98>)
 800310c:	f009 fb8c 	bl	800c828 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8003110:	2105      	movs	r1, #5
 8003112:	481d      	ldr	r0, [pc, #116]	@ (8003188 <removeface+0x98>)
 8003114:	f008 ffaa 	bl	800c06c <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8003118:	4a1c      	ldr	r2, [pc, #112]	@ (800318c <removeface+0x9c>)
 800311a:	491d      	ldr	r1, [pc, #116]	@ (8003190 <removeface+0xa0>)
 800311c:	481d      	ldr	r0, [pc, #116]	@ (8003194 <removeface+0xa4>)
 800311e:	f7fd f963 	bl	80003e8 <CLCD_I2C_Display>
	exitmenu = 60;
 8003122:	4b1d      	ldr	r3, [pc, #116]	@ (8003198 <removeface+0xa8>)
 8003124:	223c      	movs	r2, #60	@ 0x3c
 8003126:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8003128:	e01d      	b.n	8003166 <removeface+0x76>
		if(Rx_Buffer[0] == 'T'){
 800312a:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <removeface+0x90>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	b25b      	sxtb	r3, r3
 8003130:	2b54      	cmp	r3, #84	@ 0x54
 8003132:	d109      	bne.n	8003148 <removeface+0x58>
			CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8003134:	4a15      	ldr	r2, [pc, #84]	@ (800318c <removeface+0x9c>)
 8003136:	4919      	ldr	r1, [pc, #100]	@ (800319c <removeface+0xac>)
 8003138:	4816      	ldr	r0, [pc, #88]	@ (8003194 <removeface+0xa4>)
 800313a:	f7fd f955 	bl	80003e8 <CLCD_I2C_Display>
			HAL_Delay(2000);
 800313e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003142:	f000 fd55 	bl	8003bf0 <HAL_Delay>
			break;
 8003146:	e012      	b.n	800316e <removeface+0x7e>
		}
		else if(Rx_Buffer[0] == 'F'){
 8003148:	4b0d      	ldr	r3, [pc, #52]	@ (8003180 <removeface+0x90>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	b25b      	sxtb	r3, r3
 800314e:	2b46      	cmp	r3, #70	@ 0x46
 8003150:	d109      	bne.n	8003166 <removeface+0x76>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKOWN", "");
 8003152:	4a0e      	ldr	r2, [pc, #56]	@ (800318c <removeface+0x9c>)
 8003154:	4912      	ldr	r1, [pc, #72]	@ (80031a0 <removeface+0xb0>)
 8003156:	480f      	ldr	r0, [pc, #60]	@ (8003194 <removeface+0xa4>)
 8003158:	f7fd f946 	bl	80003e8 <CLCD_I2C_Display>
			HAL_Delay(2000);
 800315c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003160:	f000 fd46 	bl	8003bf0 <HAL_Delay>
			break;
 8003164:	e003      	b.n	800316e <removeface+0x7e>
	while(exitmenu != 0){
 8003166:	4b0c      	ldr	r3, [pc, #48]	@ (8003198 <removeface+0xa8>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1dd      	bne.n	800312a <removeface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800316e:	2280      	movs	r2, #128	@ 0x80
 8003170:	2100      	movs	r1, #0
 8003172:	4803      	ldr	r0, [pc, #12]	@ (8003180 <removeface+0x90>)
 8003174:	f009 fb78 	bl	800c868 <memset>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000350 	.word	0x20000350
 8003184:	0800d98c 	.word	0x0800d98c
 8003188:	200003d0 	.word	0x200003d0
 800318c:	0800d784 	.word	0x0800d784
 8003190:	0800d788 	.word	0x0800d788
 8003194:	200003d8 	.word	0x200003d8
 8003198:	20000020 	.word	0x20000020
 800319c:	0800d994 	.word	0x0800d994
 80031a0:	0800d9a4 	.word	0x0800d9a4

080031a4 <checkfaceid>:
uint8_t checkfaceid(uint8_t key){
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80031ae:	2280      	movs	r2, #128	@ 0x80
 80031b0:	2100      	movs	r1, #0
 80031b2:	4817      	ldr	r0, [pc, #92]	@ (8003210 <checkfaceid+0x6c>)
 80031b4:	f009 fb58 	bl	800c868 <memset>
	sprintf(Tx_Buffer , "Che.%d", key );
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4915      	ldr	r1, [pc, #84]	@ (8003214 <checkfaceid+0x70>)
 80031be:	4816      	ldr	r0, [pc, #88]	@ (8003218 <checkfaceid+0x74>)
 80031c0:	f009 fb32 	bl	800c828 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 80031c4:	2105      	movs	r1, #5
 80031c6:	4814      	ldr	r0, [pc, #80]	@ (8003218 <checkfaceid+0x74>)
 80031c8:	f008 ff50 	bl	800c06c <CDC_Transmit_FS>
	while(Rx_Buffer[0] ==0){
 80031cc:	e000      	b.n	80031d0 <checkfaceid+0x2c>
			continue;
 80031ce:	bf00      	nop
	while(Rx_Buffer[0] ==0){
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <checkfaceid+0x6c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b25b      	sxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f9      	beq.n	80031ce <checkfaceid+0x2a>
		}
//	CLCD_I2C_Display(&LCD1, Rx_Buffer, "");
	HAL_Delay(1000);
 80031da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031de:	f000 fd07 	bl	8003bf0 <HAL_Delay>
	if(Rx_Buffer[0] == 'T'){
 80031e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <checkfaceid+0x6c>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	b25b      	sxtb	r3, r3
 80031e8:	2b54      	cmp	r3, #84	@ 0x54
 80031ea:	d101      	bne.n	80031f0 <checkfaceid+0x4c>
		return key;
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	e00b      	b.n	8003208 <checkfaceid+0x64>
	}else if(Rx_Buffer[0] == 'F'){
 80031f0:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <checkfaceid+0x6c>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b25b      	sxtb	r3, r3
 80031f6:	2b46      	cmp	r3, #70	@ 0x46
 80031f8:	d101      	bne.n	80031fe <checkfaceid+0x5a>
		return 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	e004      	b.n	8003208 <checkfaceid+0x64>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80031fe:	2280      	movs	r2, #128	@ 0x80
 8003200:	2100      	movs	r1, #0
 8003202:	4803      	ldr	r0, [pc, #12]	@ (8003210 <checkfaceid+0x6c>)
 8003204:	f009 fb30 	bl	800c868 <memset>
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000350 	.word	0x20000350
 8003214:	0800d9b4 	.word	0x0800d9b4
 8003218:	200003d0 	.word	0x200003d0

0800321c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003220:	b672      	cpsid	i
}
 8003222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003224:	bf00      	nop
 8003226:	e7fd      	b.n	8003224 <Error_Handler+0x8>

08003228 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af02      	add	r7, sp, #8
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003236:	bf00      	nop
 8003238:	4b0e      	ldr	r3, [pc, #56]	@ (8003274 <TM_SPI_Send+0x4c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b02      	cmp	r3, #2
 8003244:	d1f8      	bne.n	8003238 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003246:	f107 0208 	add.w	r2, r7, #8
 800324a:	f107 010c 	add.w	r1, r7, #12
 800324e:	230a      	movs	r3, #10
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2301      	movs	r3, #1
 8003254:	4807      	ldr	r0, [pc, #28]	@ (8003274 <TM_SPI_Send+0x4c>)
 8003256:	f003 feff 	bl	8007058 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 800325a:	bf00      	nop
 800325c:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <TM_SPI_Send+0x4c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003266:	2b80      	cmp	r3, #128	@ 0x80
 8003268:	d0f8      	beq.n	800325c <TM_SPI_Send+0x34>
	return data_re[0];
 800326a:	7a3b      	ldrb	r3, [r7, #8]

}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000270 	.word	0x20000270

08003278 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 800327c:	f000 f8d5 	bl	800342a <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003280:	218d      	movs	r1, #141	@ 0x8d
 8003282:	202a      	movs	r0, #42	@ 0x2a
 8003284:	f000 f836 	bl	80032f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003288:	213e      	movs	r1, #62	@ 0x3e
 800328a:	202b      	movs	r0, #43	@ 0x2b
 800328c:	f000 f832 	bl	80032f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003290:	211e      	movs	r1, #30
 8003292:	202d      	movs	r0, #45	@ 0x2d
 8003294:	f000 f82e 	bl	80032f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003298:	2100      	movs	r1, #0
 800329a:	202c      	movs	r0, #44	@ 0x2c
 800329c:	f000 f82a 	bl	80032f4 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 80032a0:	2170      	movs	r1, #112	@ 0x70
 80032a2:	2026      	movs	r0, #38	@ 0x26
 80032a4:	f000 f826 	bl	80032f4 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80032a8:	2140      	movs	r1, #64	@ 0x40
 80032aa:	2015      	movs	r0, #21
 80032ac:	f000 f822 	bl	80032f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80032b0:	213d      	movs	r1, #61	@ 0x3d
 80032b2:	2011      	movs	r0, #17
 80032b4:	f000 f81e 	bl	80032f4 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 80032b8:	f000 f8a2 	bl	8003400 <TM_MFRC522_AntennaOn>
}
 80032bc:	bf00      	nop
 80032be:	bd80      	pop	{r7, pc}

080032c0 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	2026      	movs	r0, #38	@ 0x26
 80032cc:	f000 f8b5 	bl	800343a <TM_MFRC522_Request>
 80032d0:	4603      	mov	r3, r0
 80032d2:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d104      	bne.n	80032e4 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9a1 	bl	8003622 <TM_MFRC522_Anticoll>
 80032e0:	4603      	mov	r3, r0
 80032e2:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 80032e4:	f000 fa23 	bl	800372e <TM_MFRC522_Halt>
	return status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	460a      	mov	r2, r1
 80032fe:	71fb      	strb	r3, [r7, #7]
 8003300:	4613      	mov	r3, r2
 8003302:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003304:	2200      	movs	r2, #0
 8003306:	2110      	movs	r1, #16
 8003308:	480c      	ldr	r0, [pc, #48]	@ (800333c <TM_MFRC522_WriteRegister+0x48>)
 800330a:	f001 f93e 	bl	800458a <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003318:	b2db      	uxtb	r3, r3
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff84 	bl	8003228 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003320:	79bb      	ldrb	r3, [r7, #6]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ff80 	bl	8003228 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003328:	2201      	movs	r2, #1
 800332a:	2110      	movs	r1, #16
 800332c:	4803      	ldr	r0, [pc, #12]	@ (800333c <TM_MFRC522_WriteRegister+0x48>)
 800332e:	f001 f92c 	bl	800458a <HAL_GPIO_WritePin>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40010800 	.word	0x40010800

08003340 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 800334a:	2200      	movs	r2, #0
 800334c:	2110      	movs	r1, #16
 800334e:	480f      	ldr	r0, [pc, #60]	@ (800338c <TM_MFRC522_ReadRegister+0x4c>)
 8003350:	f001 f91b 	bl	800458a <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	b25b      	sxtb	r3, r3
 800335a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800335e:	b25b      	sxtb	r3, r3
 8003360:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003364:	b25b      	sxtb	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff5d 	bl	8003228 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 800336e:	2000      	movs	r0, #0
 8003370:	f7ff ff5a 	bl	8003228 <TM_SPI_Send>
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003378:	2201      	movs	r2, #1
 800337a:	2110      	movs	r1, #16
 800337c:	4803      	ldr	r0, [pc, #12]	@ (800338c <TM_MFRC522_ReadRegister+0x4c>)
 800337e:	f001 f904 	bl	800458a <HAL_GPIO_WritePin>

	return val;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40010800 	.word	0x40010800

08003390 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	460a      	mov	r2, r1
 800339a:	71fb      	strb	r3, [r7, #7]
 800339c:	4613      	mov	r3, r2
 800339e:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ffcc 	bl	8003340 <TM_MFRC522_ReadRegister>
 80033a8:	4603      	mov	r3, r0
 80033aa:	461a      	mov	r2, r3
 80033ac:	79bb      	ldrb	r3, [r7, #6]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ff9c 	bl	80032f4 <TM_MFRC522_WriteRegister>
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	460a      	mov	r2, r1
 80033ce:	71fb      	strb	r3, [r7, #7]
 80033d0:	4613      	mov	r3, r2
 80033d2:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ffb2 	bl	8003340 <TM_MFRC522_ReadRegister>
 80033dc:	4603      	mov	r3, r0
 80033de:	b25a      	sxtb	r2, r3
 80033e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	b25b      	sxtb	r3, r3
 80033e8:	4013      	ands	r3, r2
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff ff7e 	bl	80032f4 <TM_MFRC522_WriteRegister>
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003406:	2014      	movs	r0, #20
 8003408:	f7ff ff9a 	bl	8003340 <TM_MFRC522_ReadRegister>
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800341a:	2103      	movs	r1, #3
 800341c:	2014      	movs	r0, #20
 800341e:	f7ff ffb7 	bl	8003390 <TM_MFRC522_SetBitMask>
	}
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 800342a:	b580      	push	{r7, lr}
 800342c:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800342e:	210f      	movs	r1, #15
 8003430:	2001      	movs	r0, #1
 8003432:	f7ff ff5f 	bl	80032f4 <TM_MFRC522_WriteRegister>
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}

0800343a <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af02      	add	r7, sp, #8
 8003440:	4603      	mov	r3, r0
 8003442:	6039      	str	r1, [r7, #0]
 8003444:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003446:	2107      	movs	r1, #7
 8003448:	200d      	movs	r0, #13
 800344a:	f7ff ff53 	bl	80032f4 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	79fa      	ldrb	r2, [r7, #7]
 8003452:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2201      	movs	r2, #1
 800345e:	6839      	ldr	r1, [r7, #0]
 8003460:	200c      	movs	r0, #12
 8003462:	f000 f80f 	bl	8003484 <TM_MFRC522_ToCard>
 8003466:	4603      	mov	r3, r0
 8003468:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <TM_MFRC522_Request+0x3c>
 8003470:	89bb      	ldrh	r3, [r7, #12]
 8003472:	2b10      	cmp	r3, #16
 8003474:	d001      	beq.n	800347a <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003476:	2302      	movs	r3, #2
 8003478:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	4603      	mov	r3, r0
 8003490:	73fb      	strb	r3, [r7, #15]
 8003492:	4613      	mov	r3, r2
 8003494:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003496:	2302      	movs	r3, #2
 8003498:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800349a:	2300      	movs	r3, #0
 800349c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800349e:	2300      	movs	r3, #0
 80034a0:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d006      	beq.n	80034b6 <TM_MFRC522_ToCard+0x32>
 80034a8:	2b0e      	cmp	r3, #14
 80034aa:	d109      	bne.n	80034c0 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80034ac:	2312      	movs	r3, #18
 80034ae:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80034b0:	2310      	movs	r3, #16
 80034b2:	757b      	strb	r3, [r7, #21]
			break;
 80034b4:	e005      	b.n	80034c2 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80034b6:	2377      	movs	r3, #119	@ 0x77
 80034b8:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80034ba:	2330      	movs	r3, #48	@ 0x30
 80034bc:	757b      	strb	r3, [r7, #21]
			break;
 80034be:	e000      	b.n	80034c2 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80034c0:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80034c2:	7dbb      	ldrb	r3, [r7, #22]
 80034c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	4619      	mov	r1, r3
 80034cc:	2002      	movs	r0, #2
 80034ce:	f7ff ff11 	bl	80032f4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80034d2:	2180      	movs	r1, #128	@ 0x80
 80034d4:	2004      	movs	r0, #4
 80034d6:	f7ff ff75 	bl	80033c4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80034da:	2180      	movs	r1, #128	@ 0x80
 80034dc:	200a      	movs	r0, #10
 80034de:	f7ff ff57 	bl	8003390 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80034e2:	2100      	movs	r1, #0
 80034e4:	2001      	movs	r0, #1
 80034e6:	f7ff ff05 	bl	80032f4 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 80034ea:	2300      	movs	r3, #0
 80034ec:	827b      	strh	r3, [r7, #18]
 80034ee:	e00a      	b.n	8003506 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80034f0:	8a7b      	ldrh	r3, [r7, #18]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	4413      	add	r3, r2
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	4619      	mov	r1, r3
 80034fa:	2009      	movs	r0, #9
 80034fc:	f7ff fefa 	bl	80032f4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8003500:	8a7b      	ldrh	r3, [r7, #18]
 8003502:	3301      	adds	r3, #1
 8003504:	827b      	strh	r3, [r7, #18]
 8003506:	7bbb      	ldrb	r3, [r7, #14]
 8003508:	b29b      	uxth	r3, r3
 800350a:	8a7a      	ldrh	r2, [r7, #18]
 800350c:	429a      	cmp	r2, r3
 800350e:	d3ef      	bcc.n	80034f0 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	4619      	mov	r1, r3
 8003514:	2001      	movs	r0, #1
 8003516:	f7ff feed 	bl	80032f4 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d103      	bne.n	8003528 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003520:	2180      	movs	r1, #128	@ 0x80
 8003522:	200d      	movs	r0, #13
 8003524:	f7ff ff34 	bl	8003390 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003528:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800352c:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800352e:	2004      	movs	r0, #4
 8003530:	f7ff ff06 	bl	8003340 <TM_MFRC522_ReadRegister>
 8003534:	4603      	mov	r3, r0
 8003536:	753b      	strb	r3, [r7, #20]
		i--;
 8003538:	8a7b      	ldrh	r3, [r7, #18]
 800353a:	3b01      	subs	r3, #1
 800353c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800353e:	8a7b      	ldrh	r3, [r7, #18]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <TM_MFRC522_ToCard+0xd6>
 8003544:	7d3b      	ldrb	r3, [r7, #20]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d105      	bne.n	800355a <TM_MFRC522_ToCard+0xd6>
 800354e:	7d3a      	ldrb	r2, [r7, #20]
 8003550:	7d7b      	ldrb	r3, [r7, #21]
 8003552:	4013      	ands	r3, r2
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0e9      	beq.n	800352e <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 800355a:	2180      	movs	r1, #128	@ 0x80
 800355c:	200d      	movs	r0, #13
 800355e:	f7ff ff31 	bl	80033c4 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8003562:	8a7b      	ldrh	r3, [r7, #18]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d057      	beq.n	8003618 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003568:	2006      	movs	r0, #6
 800356a:	f7ff fee9 	bl	8003340 <TM_MFRC522_ReadRegister>
 800356e:	4603      	mov	r3, r0
 8003570:	f003 031b 	and.w	r3, r3, #27
 8003574:	2b00      	cmp	r3, #0
 8003576:	d14d      	bne.n	8003614 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 800357c:	7d3a      	ldrb	r2, [r7, #20]
 800357e:	7dbb      	ldrb	r3, [r7, #22]
 8003580:	4013      	ands	r3, r2
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 800358c:	2301      	movs	r3, #1
 800358e:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d140      	bne.n	8003618 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003596:	200a      	movs	r0, #10
 8003598:	f7ff fed2 	bl	8003340 <TM_MFRC522_ReadRegister>
 800359c:	4603      	mov	r3, r0
 800359e:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80035a0:	200c      	movs	r0, #12
 80035a2:	f7ff fecd 	bl	8003340 <TM_MFRC522_ReadRegister>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 80035ae:	7c7b      	ldrb	r3, [r7, #17]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 80035b4:	7d3b      	ldrb	r3, [r7, #20]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	b29a      	uxth	r2, r3
 80035be:	7c7b      	ldrb	r3, [r7, #17]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c8:	801a      	strh	r2, [r3, #0]
 80035ca:	e005      	b.n	80035d8 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 80035cc:	7d3b      	ldrb	r3, [r7, #20]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 80035d8:	7d3b      	ldrb	r3, [r7, #20]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <TM_MFRC522_ToCard+0x15e>
					n = 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 80035e2:	7d3b      	ldrb	r3, [r7, #20]
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d901      	bls.n	80035ec <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 80035e8:	2310      	movs	r3, #16
 80035ea:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80035ec:	2300      	movs	r3, #0
 80035ee:	827b      	strh	r3, [r7, #18]
 80035f0:	e00a      	b.n	8003608 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 80035f2:	8a7b      	ldrh	r3, [r7, #18]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	18d4      	adds	r4, r2, r3
 80035f8:	2009      	movs	r0, #9
 80035fa:	f7ff fea1 	bl	8003340 <TM_MFRC522_ReadRegister>
 80035fe:	4603      	mov	r3, r0
 8003600:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8003602:	8a7b      	ldrh	r3, [r7, #18]
 8003604:	3301      	adds	r3, #1
 8003606:	827b      	strh	r3, [r7, #18]
 8003608:	7d3b      	ldrb	r3, [r7, #20]
 800360a:	b29b      	uxth	r3, r3
 800360c:	8a7a      	ldrh	r2, [r7, #18]
 800360e:	429a      	cmp	r2, r3
 8003610:	d3ef      	bcc.n	80035f2 <TM_MFRC522_ToCard+0x16e>
 8003612:	e001      	b.n	8003618 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8003614:	2302      	movs	r3, #2
 8003616:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8003618:	7dfb      	ldrb	r3, [r7, #23]
}
 800361a:	4618      	mov	r0, r3
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	bd90      	pop	{r4, r7, pc}

08003622 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8003622:	b580      	push	{r7, lr}
 8003624:	b086      	sub	sp, #24
 8003626:	af02      	add	r7, sp, #8
 8003628:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800362e:	2100      	movs	r1, #0
 8003630:	200d      	movs	r0, #13
 8003632:	f7ff fe5f 	bl	80032f4 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2293      	movs	r2, #147	@ 0x93
 800363a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3301      	adds	r3, #1
 8003640:	2220      	movs	r2, #32
 8003642:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003644:	f107 030a 	add.w	r3, r7, #10
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	200c      	movs	r0, #12
 8003652:	f7ff ff17 	bl	8003484 <TM_MFRC522_ToCard>
 8003656:	4603      	mov	r3, r0
 8003658:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d118      	bne.n	8003692 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8003660:	2300      	movs	r3, #0
 8003662:	73bb      	strb	r3, [r7, #14]
 8003664:	e009      	b.n	800367a <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8003666:	7bbb      	ldrb	r3, [r7, #14]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	7b7b      	ldrb	r3, [r7, #13]
 8003670:	4053      	eors	r3, r2
 8003672:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8003674:	7bbb      	ldrb	r3, [r7, #14]
 8003676:	3301      	adds	r3, #1
 8003678:	73bb      	strb	r3, [r7, #14]
 800367a:	7bbb      	ldrb	r3, [r7, #14]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d9f2      	bls.n	8003666 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8003680:	7bbb      	ldrb	r3, [r7, #14]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	7b7a      	ldrb	r2, [r7, #13]
 800368a:	429a      	cmp	r2, r3
 800368c:	d001      	beq.n	8003692 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800368e:	2302      	movs	r3, #2
 8003690:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8003692:	7bfb      	ldrb	r3, [r7, #15]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	460b      	mov	r3, r1
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 80036aa:	2104      	movs	r1, #4
 80036ac:	2005      	movs	r0, #5
 80036ae:	f7ff fe89 	bl	80033c4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80036b2:	2180      	movs	r1, #128	@ 0x80
 80036b4:	200a      	movs	r0, #10
 80036b6:	f7ff fe6b 	bl	8003390 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
 80036be:	e00a      	b.n	80036d6 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4413      	add	r3, r2
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	2009      	movs	r0, #9
 80036cc:	f7ff fe12 	bl	80032f4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	3301      	adds	r3, #1
 80036d4:	75fb      	strb	r3, [r7, #23]
 80036d6:	7dfa      	ldrb	r2, [r7, #23]
 80036d8:	7afb      	ldrb	r3, [r7, #11]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d3f0      	bcc.n	80036c0 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80036de:	2103      	movs	r1, #3
 80036e0:	2001      	movs	r0, #1
 80036e2:	f7ff fe07 	bl	80032f4 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80036e6:	23ff      	movs	r3, #255	@ 0xff
 80036e8:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80036ea:	2005      	movs	r0, #5
 80036ec:	f7ff fe28 	bl	8003340 <TM_MFRC522_ReadRegister>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75bb      	strb	r3, [r7, #22]
		i--;
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <TM_MFRC522_CalculateCRC+0x6e>
 8003700:	7dbb      	ldrb	r3, [r7, #22]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0ef      	beq.n	80036ea <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800370a:	2022      	movs	r0, #34	@ 0x22
 800370c:	f7ff fe18 	bl	8003340 <TM_MFRC522_ReadRegister>
 8003710:	4603      	mov	r3, r0
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	1c5c      	adds	r4, r3, #1
 800371c:	2021      	movs	r0, #33	@ 0x21
 800371e:	f7ff fe0f 	bl	8003340 <TM_MFRC522_ReadRegister>
 8003722:	4603      	mov	r3, r0
 8003724:	7023      	strb	r3, [r4, #0]
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}

0800372e <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8003734:	2350      	movs	r3, #80	@ 0x50
 8003736:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 800373c:	463b      	mov	r3, r7
 800373e:	1c9a      	adds	r2, r3, #2
 8003740:	463b      	mov	r3, r7
 8003742:	2102      	movs	r1, #2
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ffa9 	bl	800369c <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 800374a:	463a      	mov	r2, r7
 800374c:	4639      	mov	r1, r7
 800374e:	1dbb      	adds	r3, r7, #6
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	2204      	movs	r2, #4
 8003756:	200c      	movs	r0, #12
 8003758:	f7ff fe94 	bl	8003484 <TM_MFRC522_ToCard>



}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800376a:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <HAL_MspInit+0x5c>)
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	4a14      	ldr	r2, [pc, #80]	@ (80037c0 <HAL_MspInit+0x5c>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6193      	str	r3, [r2, #24]
 8003776:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <HAL_MspInit+0x5c>)
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <HAL_MspInit+0x5c>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	4a0e      	ldr	r2, [pc, #56]	@ (80037c0 <HAL_MspInit+0x5c>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800378c:	61d3      	str	r3, [r2, #28]
 800378e:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <HAL_MspInit+0x5c>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800379a:	4b0a      	ldr	r3, [pc, #40]	@ (80037c4 <HAL_MspInit+0x60>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	4a04      	ldr	r2, [pc, #16]	@ (80037c4 <HAL_MspInit+0x60>)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40010000 	.word	0x40010000

080037c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 0310 	add.w	r3, r7, #16
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a16      	ldr	r2, [pc, #88]	@ (800383c <HAL_I2C_MspInit+0x74>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d124      	bne.n	8003832 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e8:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <HAL_I2C_MspInit+0x78>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	4a14      	ldr	r2, [pc, #80]	@ (8003840 <HAL_I2C_MspInit+0x78>)
 80037ee:	f043 0308 	orr.w	r3, r3, #8
 80037f2:	6193      	str	r3, [r2, #24]
 80037f4:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <HAL_I2C_MspInit+0x78>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003800:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003804:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003806:	2312      	movs	r3, #18
 8003808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800380a:	2303      	movs	r3, #3
 800380c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380e:	f107 0310 	add.w	r3, r7, #16
 8003812:	4619      	mov	r1, r3
 8003814:	480b      	ldr	r0, [pc, #44]	@ (8003844 <HAL_I2C_MspInit+0x7c>)
 8003816:	f000 fd1d 	bl	8004254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800381a:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <HAL_I2C_MspInit+0x78>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	4a08      	ldr	r2, [pc, #32]	@ (8003840 <HAL_I2C_MspInit+0x78>)
 8003820:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003824:	61d3      	str	r3, [r2, #28]
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <HAL_I2C_MspInit+0x78>)
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003832:	bf00      	nop
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40005800 	.word	0x40005800
 8003840:	40021000 	.word	0x40021000
 8003844:	40010c00 	.word	0x40010c00

08003848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	f107 0310 	add.w	r3, r7, #16
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1b      	ldr	r2, [pc, #108]	@ (80038d0 <HAL_SPI_MspInit+0x88>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d12f      	bne.n	80038c8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003868:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <HAL_SPI_MspInit+0x8c>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <HAL_SPI_MspInit+0x8c>)
 800386e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003872:	6193      	str	r3, [r2, #24]
 8003874:	4b17      	ldr	r3, [pc, #92]	@ (80038d4 <HAL_SPI_MspInit+0x8c>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003880:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <HAL_SPI_MspInit+0x8c>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	4a13      	ldr	r2, [pc, #76]	@ (80038d4 <HAL_SPI_MspInit+0x8c>)
 8003886:	f043 0304 	orr.w	r3, r3, #4
 800388a:	6193      	str	r3, [r2, #24]
 800388c:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <HAL_SPI_MspInit+0x8c>)
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003898:	23a0      	movs	r3, #160	@ 0xa0
 800389a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038a0:	2303      	movs	r3, #3
 80038a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a4:	f107 0310 	add.w	r3, r7, #16
 80038a8:	4619      	mov	r1, r3
 80038aa:	480b      	ldr	r0, [pc, #44]	@ (80038d8 <HAL_SPI_MspInit+0x90>)
 80038ac:	f000 fcd2 	bl	8004254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038b0:	2340      	movs	r3, #64	@ 0x40
 80038b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038bc:	f107 0310 	add.w	r3, r7, #16
 80038c0:	4619      	mov	r1, r3
 80038c2:	4805      	ldr	r0, [pc, #20]	@ (80038d8 <HAL_SPI_MspInit+0x90>)
 80038c4:	f000 fcc6 	bl	8004254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038c8:	bf00      	nop
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40013000 	.word	0x40013000
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40010800 	.word	0x40010800

080038dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ec:	d113      	bne.n	8003916 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <HAL_TIM_Base_MspInit+0x44>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003920 <HAL_TIM_Base_MspInit+0x44>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	61d3      	str	r3, [r2, #28]
 80038fa:	4b09      	ldr	r3, [pc, #36]	@ (8003920 <HAL_TIM_Base_MspInit+0x44>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2100      	movs	r1, #0
 800390a:	201c      	movs	r0, #28
 800390c:	f000 fa6b 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003910:	201c      	movs	r0, #28
 8003912:	f000 fa84 	bl	8003e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000

08003924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	@ 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392c:	f107 0314 	add.w	r3, r7, #20
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a22      	ldr	r2, [pc, #136]	@ (80039c8 <HAL_UART_MspInit+0xa4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d13d      	bne.n	80039c0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003944:	4b21      	ldr	r3, [pc, #132]	@ (80039cc <HAL_UART_MspInit+0xa8>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	4a20      	ldr	r2, [pc, #128]	@ (80039cc <HAL_UART_MspInit+0xa8>)
 800394a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800394e:	6193      	str	r3, [r2, #24]
 8003950:	4b1e      	ldr	r3, [pc, #120]	@ (80039cc <HAL_UART_MspInit+0xa8>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800395c:	4b1b      	ldr	r3, [pc, #108]	@ (80039cc <HAL_UART_MspInit+0xa8>)
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	4a1a      	ldr	r2, [pc, #104]	@ (80039cc <HAL_UART_MspInit+0xa8>)
 8003962:	f043 0308 	orr.w	r3, r3, #8
 8003966:	6193      	str	r3, [r2, #24]
 8003968:	4b18      	ldr	r3, [pc, #96]	@ (80039cc <HAL_UART_MspInit+0xa8>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003974:	2340      	movs	r3, #64	@ 0x40
 8003976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800397c:	2303      	movs	r3, #3
 800397e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	4619      	mov	r1, r3
 8003986:	4812      	ldr	r0, [pc, #72]	@ (80039d0 <HAL_UART_MspInit+0xac>)
 8003988:	f000 fc64 	bl	8004254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800398c:	2380      	movs	r3, #128	@ 0x80
 800398e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003990:	2300      	movs	r3, #0
 8003992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	4619      	mov	r1, r3
 800399e:	480c      	ldr	r0, [pc, #48]	@ (80039d0 <HAL_UART_MspInit+0xac>)
 80039a0:	f000 fc58 	bl	8004254 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80039a4:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <HAL_UART_MspInit+0xb0>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ba:	4a06      	ldr	r2, [pc, #24]	@ (80039d4 <HAL_UART_MspInit+0xb0>)
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80039c0:	bf00      	nop
 80039c2:	3728      	adds	r7, #40	@ 0x28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40013800 	.word	0x40013800
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40010c00 	.word	0x40010c00
 80039d4:	40010000 	.word	0x40010000

080039d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039dc:	bf00      	nop
 80039de:	e7fd      	b.n	80039dc <NMI_Handler+0x4>

080039e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <HardFault_Handler+0x4>

080039e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039ec:	bf00      	nop
 80039ee:	e7fd      	b.n	80039ec <MemManage_Handler+0x4>

080039f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039f4:	bf00      	nop
 80039f6:	e7fd      	b.n	80039f4 <BusFault_Handler+0x4>

080039f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039fc:	bf00      	nop
 80039fe:	e7fd      	b.n	80039fc <UsageFault_Handler+0x4>

08003a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a28:	f000 f8c6 	bl	8003bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003a34:	4802      	ldr	r0, [pc, #8]	@ (8003a40 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003a36:	f001 fb5e 	bl	80050f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200010d0 	.word	0x200010d0

08003a44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003a48:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003a4c:	f000 fdb6 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a50:	bf00      	nop
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a58:	4802      	ldr	r0, [pc, #8]	@ (8003a64 <TIM2_IRQHandler+0x10>)
 8003a5a:	f003 fde7 	bl	800762c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200002c8 	.word	0x200002c8

08003a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a70:	4a14      	ldr	r2, [pc, #80]	@ (8003ac4 <_sbrk+0x5c>)
 8003a72:	4b15      	ldr	r3, [pc, #84]	@ (8003ac8 <_sbrk+0x60>)
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a7c:	4b13      	ldr	r3, [pc, #76]	@ (8003acc <_sbrk+0x64>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d102      	bne.n	8003a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a84:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <_sbrk+0x64>)
 8003a86:	4a12      	ldr	r2, [pc, #72]	@ (8003ad0 <_sbrk+0x68>)
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a8a:	4b10      	ldr	r3, [pc, #64]	@ (8003acc <_sbrk+0x64>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d207      	bcs.n	8003aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a98:	f008 feee 	bl	800c878 <__errno>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	220c      	movs	r2, #12
 8003aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa6:	e009      	b.n	8003abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aa8:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <_sbrk+0x64>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aae:	4b07      	ldr	r3, [pc, #28]	@ (8003acc <_sbrk+0x64>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	4a05      	ldr	r2, [pc, #20]	@ (8003acc <_sbrk+0x64>)
 8003ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aba:	68fb      	ldr	r3, [r7, #12]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20005000 	.word	0x20005000
 8003ac8:	00000400 	.word	0x00000400
 8003acc:	2000040c 	.word	0x2000040c
 8003ad0:	20001728 	.word	0x20001728

08003ad4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003ae0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003ae2:	e003      	b.n	8003aec <LoopCopyDataInit>

08003ae4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003ae6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003ae8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003aea:	3104      	adds	r1, #4

08003aec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003aec:	480a      	ldr	r0, [pc, #40]	@ (8003b18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003aee:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003af0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003af2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003af4:	d3f6      	bcc.n	8003ae4 <CopyDataInit>
  ldr r2, =_sbss
 8003af6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003af8:	e002      	b.n	8003b00 <LoopFillZerobss>

08003afa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003afa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003afc:	f842 3b04 	str.w	r3, [r2], #4

08003b00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003b00:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003b02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003b04:	d3f9      	bcc.n	8003afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b06:	f7ff ffe5 	bl	8003ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b0a:	f008 febb 	bl	800c884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b0e:	f7fd f8fb 	bl	8000d08 <main>
  bx lr
 8003b12:	4770      	bx	lr
  ldr r3, =_sidata
 8003b14:	0800da78 	.word	0x0800da78
  ldr r0, =_sdata
 8003b18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003b1c:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8003b20:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003b24:	20001724 	.word	0x20001724

08003b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b28:	e7fe      	b.n	8003b28 <ADC1_2_IRQHandler>
	...

08003b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b30:	4b08      	ldr	r3, [pc, #32]	@ (8003b54 <HAL_Init+0x28>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a07      	ldr	r2, [pc, #28]	@ (8003b54 <HAL_Init+0x28>)
 8003b36:	f043 0310 	orr.w	r3, r3, #16
 8003b3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b3c:	2003      	movs	r0, #3
 8003b3e:	f000 f947 	bl	8003dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b42:	2000      	movs	r0, #0
 8003b44:	f000 f808 	bl	8003b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b48:	f7ff fe0c 	bl	8003764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40022000 	.word	0x40022000

08003b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b60:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <HAL_InitTick+0x54>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <HAL_InitTick+0x58>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f95f 	bl	8003e3a <HAL_SYSTICK_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00e      	b.n	8003ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d80a      	bhi.n	8003ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f000 f927 	bl	8003de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b98:	4a06      	ldr	r2, [pc, #24]	@ (8003bb4 <HAL_InitTick+0x5c>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000028 	.word	0x20000028
 8003bb0:	20000030 	.word	0x20000030
 8003bb4:	2000002c 	.word	0x2000002c

08003bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bbc:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <HAL_IncTick+0x1c>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b05      	ldr	r3, [pc, #20]	@ (8003bd8 <HAL_IncTick+0x20>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a03      	ldr	r2, [pc, #12]	@ (8003bd8 <HAL_IncTick+0x20>)
 8003bca:	6013      	str	r3, [r2, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	20000030 	.word	0x20000030
 8003bd8:	20000410 	.word	0x20000410

08003bdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return uwTick;
 8003be0:	4b02      	ldr	r3, [pc, #8]	@ (8003bec <HAL_GetTick+0x10>)
 8003be2:	681b      	ldr	r3, [r3, #0]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	20000410 	.word	0x20000410

08003bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bf8:	f7ff fff0 	bl	8003bdc <HAL_GetTick>
 8003bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d005      	beq.n	8003c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <HAL_Delay+0x44>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c16:	bf00      	nop
 8003c18:	f7ff ffe0 	bl	8003bdc <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d8f7      	bhi.n	8003c18 <HAL_Delay+0x28>
  {
  }
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000030 	.word	0x20000030

08003c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c48:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c54:	4013      	ands	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c6a:	4a04      	ldr	r2, [pc, #16]	@ (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	60d3      	str	r3, [r2, #12]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c84:	4b04      	ldr	r3, [pc, #16]	@ (8003c98 <__NVIC_GetPriorityGrouping+0x18>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	f003 0307 	and.w	r3, r3, #7
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	db0b      	blt.n	8003cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	f003 021f 	and.w	r2, r3, #31
 8003cb4:	4906      	ldr	r1, [pc, #24]	@ (8003cd0 <__NVIC_EnableIRQ+0x34>)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	e000e100 	.word	0xe000e100

08003cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	db0a      	blt.n	8003cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	490c      	ldr	r1, [pc, #48]	@ (8003d20 <__NVIC_SetPriority+0x4c>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cfc:	e00a      	b.n	8003d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4908      	ldr	r1, [pc, #32]	@ (8003d24 <__NVIC_SetPriority+0x50>)
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	0112      	lsls	r2, r2, #4
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	440b      	add	r3, r1
 8003d12:	761a      	strb	r2, [r3, #24]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000e100 	.word	0xe000e100
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	@ 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f1c3 0307 	rsb	r3, r3, #7
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf28      	it	cs
 8003d46:	2304      	movcs	r3, #4
 8003d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d902      	bls.n	8003d58 <NVIC_EncodePriority+0x30>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3b03      	subs	r3, #3
 8003d56:	e000      	b.n	8003d5a <NVIC_EncodePriority+0x32>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43d9      	mvns	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	4313      	orrs	r3, r2
         );
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	@ 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d9c:	d301      	bcc.n	8003da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e00f      	b.n	8003dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003da2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dcc <SysTick_Config+0x40>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003daa:	210f      	movs	r1, #15
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	f7ff ff90 	bl	8003cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db4:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <SysTick_Config+0x40>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dba:	4b04      	ldr	r3, [pc, #16]	@ (8003dcc <SysTick_Config+0x40>)
 8003dbc:	2207      	movs	r2, #7
 8003dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	e000e010 	.word	0xe000e010

08003dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff2d 	bl	8003c38 <__NVIC_SetPriorityGrouping>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df8:	f7ff ff42 	bl	8003c80 <__NVIC_GetPriorityGrouping>
 8003dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	6978      	ldr	r0, [r7, #20]
 8003e04:	f7ff ff90 	bl	8003d28 <NVIC_EncodePriority>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff ff5f 	bl	8003cd4 <__NVIC_SetPriority>
}
 8003e16:	bf00      	nop
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4603      	mov	r3, r0
 8003e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff35 	bl	8003c9c <__NVIC_EnableIRQ>
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ffa2 	bl	8003d8c <SysTick_Config>
 8003e48:	4603      	mov	r3, r0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f2c <HAL_FLASH_Program+0xd8>)
 8003e70:	7e1b      	ldrb	r3, [r3, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_FLASH_Program+0x26>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e054      	b.n	8003f24 <HAL_FLASH_Program+0xd0>
 8003e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8003f2c <HAL_FLASH_Program+0xd8>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e80:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003e84:	f000 f8a8 	bl	8003fd8 <FLASH_WaitForLastOperation>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d144      	bne.n	8003f1c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d102      	bne.n	8003e9e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	757b      	strb	r3, [r7, #21]
 8003e9c:	e007      	b.n	8003eae <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d102      	bne.n	8003eaa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	757b      	strb	r3, [r7, #21]
 8003ea8:	e001      	b.n	8003eae <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003eaa:	2304      	movs	r3, #4
 8003eac:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75bb      	strb	r3, [r7, #22]
 8003eb2:	e02d      	b.n	8003f10 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003eb4:	7dbb      	ldrb	r3, [r7, #22]
 8003eb6:	005a      	lsls	r2, r3, #1
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	eb02 0c03 	add.w	ip, r2, r3
 8003ebe:	7dbb      	ldrb	r3, [r7, #22]
 8003ec0:	0119      	lsls	r1, r3, #4
 8003ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ec6:	f1c1 0620 	rsb	r6, r1, #32
 8003eca:	f1a1 0020 	sub.w	r0, r1, #32
 8003ece:	fa22 f401 	lsr.w	r4, r2, r1
 8003ed2:	fa03 f606 	lsl.w	r6, r3, r6
 8003ed6:	4334      	orrs	r4, r6
 8003ed8:	fa23 f000 	lsr.w	r0, r3, r0
 8003edc:	4304      	orrs	r4, r0
 8003ede:	fa23 f501 	lsr.w	r5, r3, r1
 8003ee2:	b2a3      	uxth	r3, r4
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4660      	mov	r0, ip
 8003ee8:	f000 f85a 	bl	8003fa0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003eec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ef0:	f000 f872 	bl	8003fd8 <FLASH_WaitForLastOperation>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f30 <HAL_FLASH_Program+0xdc>)
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	4a0c      	ldr	r2, [pc, #48]	@ (8003f30 <HAL_FLASH_Program+0xdc>)
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d107      	bne.n	8003f1a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003f0a:	7dbb      	ldrb	r3, [r7, #22]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	75bb      	strb	r3, [r7, #22]
 8003f10:	7dba      	ldrb	r2, [r7, #22]
 8003f12:	7d7b      	ldrb	r3, [r7, #21]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d3cd      	bcc.n	8003eb4 <HAL_FLASH_Program+0x60>
 8003f18:	e000      	b.n	8003f1c <HAL_FLASH_Program+0xc8>
      {
        break;
 8003f1a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f1c:	4b03      	ldr	r3, [pc, #12]	@ (8003f2c <HAL_FLASH_Program+0xd8>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	761a      	strb	r2, [r3, #24]

  return status;
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f2c:	20000418 	.word	0x20000418
 8003f30:	40022000 	.word	0x40022000

08003f34 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <HAL_FLASH_Unlock+0x40>)
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00d      	beq.n	8003f66 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <HAL_FLASH_Unlock+0x40>)
 8003f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f78 <HAL_FLASH_Unlock+0x44>)
 8003f4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003f50:	4b08      	ldr	r3, [pc, #32]	@ (8003f74 <HAL_FLASH_Unlock+0x40>)
 8003f52:	4a0a      	ldr	r2, [pc, #40]	@ (8003f7c <HAL_FLASH_Unlock+0x48>)
 8003f54:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f56:	4b07      	ldr	r3, [pc, #28]	@ (8003f74 <HAL_FLASH_Unlock+0x40>)
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003f66:	79fb      	ldrb	r3, [r7, #7]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40022000 	.word	0x40022000
 8003f78:	45670123 	.word	0x45670123
 8003f7c:	cdef89ab 	.word	0xcdef89ab

08003f80 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003f84:	4b05      	ldr	r3, [pc, #20]	@ (8003f9c <HAL_FLASH_Lock+0x1c>)
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	4a04      	ldr	r2, [pc, #16]	@ (8003f9c <HAL_FLASH_Lock+0x1c>)
 8003f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f8e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40022000 	.word	0x40022000

08003fa0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003fac:	4b08      	ldr	r3, [pc, #32]	@ (8003fd0 <FLASH_Program_HalfWord+0x30>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003fb2:	4b08      	ldr	r3, [pc, #32]	@ (8003fd4 <FLASH_Program_HalfWord+0x34>)
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	4a07      	ldr	r2, [pc, #28]	@ (8003fd4 <FLASH_Program_HalfWord+0x34>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	887a      	ldrh	r2, [r7, #2]
 8003fc2:	801a      	strh	r2, [r3, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000418 	.word	0x20000418
 8003fd4:	40022000 	.word	0x40022000

08003fd8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003fe0:	f7ff fdfc 	bl	8003bdc <HAL_GetTick>
 8003fe4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003fe6:	e010      	b.n	800400a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d00c      	beq.n	800400a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <FLASH_WaitForLastOperation+0x2e>
 8003ff6:	f7ff fdf1 	bl	8003bdc <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	429a      	cmp	r2, r3
 8004004:	d201      	bcs.n	800400a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e025      	b.n	8004056 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800400a:	4b15      	ldr	r3, [pc, #84]	@ (8004060 <FLASH_WaitForLastOperation+0x88>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e8      	bne.n	8003fe8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004016:	4b12      	ldr	r3, [pc, #72]	@ (8004060 <FLASH_WaitForLastOperation+0x88>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004022:	4b0f      	ldr	r3, [pc, #60]	@ (8004060 <FLASH_WaitForLastOperation+0x88>)
 8004024:	2220      	movs	r2, #32
 8004026:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004028:	4b0d      	ldr	r3, [pc, #52]	@ (8004060 <FLASH_WaitForLastOperation+0x88>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10b      	bne.n	800404c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004034:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <FLASH_WaitForLastOperation+0x88>)
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004040:	4b07      	ldr	r3, [pc, #28]	@ (8004060 <FLASH_WaitForLastOperation+0x88>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800404c:	f000 f80a 	bl	8004064 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40022000 	.word	0x40022000

08004064 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800406e:	4b23      	ldr	r3, [pc, #140]	@ (80040fc <FLASH_SetErrorCode+0x98>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800407a:	4b21      	ldr	r3, [pc, #132]	@ (8004100 <FLASH_SetErrorCode+0x9c>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f043 0302 	orr.w	r3, r3, #2
 8004082:	4a1f      	ldr	r2, [pc, #124]	@ (8004100 <FLASH_SetErrorCode+0x9c>)
 8004084:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f043 0310 	orr.w	r3, r3, #16
 800408c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800408e:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <FLASH_SetErrorCode+0x98>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d009      	beq.n	80040ae <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800409a:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <FLASH_SetErrorCode+0x9c>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	4a17      	ldr	r2, [pc, #92]	@ (8004100 <FLASH_SetErrorCode+0x9c>)
 80040a4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f043 0304 	orr.w	r3, r3, #4
 80040ac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80040ae:	4b13      	ldr	r3, [pc, #76]	@ (80040fc <FLASH_SetErrorCode+0x98>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80040ba:	4b11      	ldr	r3, [pc, #68]	@ (8004100 <FLASH_SetErrorCode+0x9c>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f043 0304 	orr.w	r3, r3, #4
 80040c2:	4a0f      	ldr	r2, [pc, #60]	@ (8004100 <FLASH_SetErrorCode+0x9c>)
 80040c4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80040c6:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <FLASH_SetErrorCode+0x98>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4a0c      	ldr	r2, [pc, #48]	@ (80040fc <FLASH_SetErrorCode+0x98>)
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f240 1201 	movw	r2, #257	@ 0x101
 80040d8:	4293      	cmp	r3, r2
 80040da:	d106      	bne.n	80040ea <FLASH_SetErrorCode+0x86>
 80040dc:	4b07      	ldr	r3, [pc, #28]	@ (80040fc <FLASH_SetErrorCode+0x98>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	4a06      	ldr	r2, [pc, #24]	@ (80040fc <FLASH_SetErrorCode+0x98>)
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	61d3      	str	r3, [r2, #28]
}  
 80040e8:	e002      	b.n	80040f0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80040ea:	4a04      	ldr	r2, [pc, #16]	@ (80040fc <FLASH_SetErrorCode+0x98>)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	60d3      	str	r3, [r2, #12]
}  
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40022000 	.word	0x40022000
 8004100:	20000418 	.word	0x20000418

08004104 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004116:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <HAL_FLASHEx_Erase+0xd0>)
 8004118:	7e1b      	ldrb	r3, [r3, #24]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_FLASHEx_Erase+0x1e>
 800411e:	2302      	movs	r3, #2
 8004120:	e053      	b.n	80041ca <HAL_FLASHEx_Erase+0xc6>
 8004122:	4b2c      	ldr	r3, [pc, #176]	@ (80041d4 <HAL_FLASHEx_Erase+0xd0>)
 8004124:	2201      	movs	r2, #1
 8004126:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d116      	bne.n	800415e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004130:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004134:	f7ff ff50 	bl	8003fd8 <FLASH_WaitForLastOperation>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d141      	bne.n	80041c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800413e:	2001      	movs	r0, #1
 8004140:	f000 f84c 	bl	80041dc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004144:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004148:	f7ff ff46 	bl	8003fd8 <FLASH_WaitForLastOperation>
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004150:	4b21      	ldr	r3, [pc, #132]	@ (80041d8 <HAL_FLASHEx_Erase+0xd4>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	4a20      	ldr	r2, [pc, #128]	@ (80041d8 <HAL_FLASHEx_Erase+0xd4>)
 8004156:	f023 0304 	bic.w	r3, r3, #4
 800415a:	6113      	str	r3, [r2, #16]
 800415c:	e031      	b.n	80041c2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800415e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004162:	f7ff ff39 	bl	8003fd8 <FLASH_WaitForLastOperation>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d12a      	bne.n	80041c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	f04f 32ff 	mov.w	r2, #4294967295
 8004172:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	e019      	b.n	80041b0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800417c:	68b8      	ldr	r0, [r7, #8]
 800417e:	f000 f849 	bl	8004214 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004182:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004186:	f7ff ff27 	bl	8003fd8 <FLASH_WaitForLastOperation>
 800418a:	4603      	mov	r3, r0
 800418c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <HAL_FLASHEx_Erase+0xd4>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	4a11      	ldr	r2, [pc, #68]	@ (80041d8 <HAL_FLASHEx_Erase+0xd4>)
 8004194:	f023 0302 	bic.w	r3, r3, #2
 8004198:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	601a      	str	r2, [r3, #0]
            break;
 80041a6:	e00c      	b.n	80041c2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041ae:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	029a      	lsls	r2, r3, #10
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	4413      	add	r3, r2
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d3dc      	bcc.n	800417c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041c2:	4b04      	ldr	r3, [pc, #16]	@ (80041d4 <HAL_FLASHEx_Erase+0xd0>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	761a      	strb	r2, [r3, #24]

  return status;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000418 	.word	0x20000418
 80041d8:	40022000 	.word	0x40022000

080041dc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041e4:	4b09      	ldr	r3, [pc, #36]	@ (800420c <FLASH_MassErase+0x30>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80041ea:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <FLASH_MassErase+0x34>)
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	4a08      	ldr	r2, [pc, #32]	@ (8004210 <FLASH_MassErase+0x34>)
 80041f0:	f043 0304 	orr.w	r3, r3, #4
 80041f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80041f6:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <FLASH_MassErase+0x34>)
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	4a05      	ldr	r2, [pc, #20]	@ (8004210 <FLASH_MassErase+0x34>)
 80041fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004200:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	20000418 	.word	0x20000418
 8004210:	40022000 	.word	0x40022000

08004214 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800421c:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <FLASH_PageErase+0x38>)
 800421e:	2200      	movs	r2, #0
 8004220:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004222:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <FLASH_PageErase+0x3c>)
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <FLASH_PageErase+0x3c>)
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800422e:	4a08      	ldr	r2, [pc, #32]	@ (8004250 <FLASH_PageErase+0x3c>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004234:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <FLASH_PageErase+0x3c>)
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	4a05      	ldr	r2, [pc, #20]	@ (8004250 <FLASH_PageErase+0x3c>)
 800423a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800423e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20000418 	.word	0x20000418
 8004250:	40022000 	.word	0x40022000

08004254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004254:	b480      	push	{r7}
 8004256:	b08b      	sub	sp, #44	@ 0x2c
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800425e:	2300      	movs	r3, #0
 8004260:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004262:	2300      	movs	r3, #0
 8004264:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004266:	e169      	b.n	800453c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004268:	2201      	movs	r2, #1
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	429a      	cmp	r2, r3
 8004282:	f040 8158 	bne.w	8004536 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4a9a      	ldr	r2, [pc, #616]	@ (80044f4 <HAL_GPIO_Init+0x2a0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d05e      	beq.n	800434e <HAL_GPIO_Init+0xfa>
 8004290:	4a98      	ldr	r2, [pc, #608]	@ (80044f4 <HAL_GPIO_Init+0x2a0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d875      	bhi.n	8004382 <HAL_GPIO_Init+0x12e>
 8004296:	4a98      	ldr	r2, [pc, #608]	@ (80044f8 <HAL_GPIO_Init+0x2a4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d058      	beq.n	800434e <HAL_GPIO_Init+0xfa>
 800429c:	4a96      	ldr	r2, [pc, #600]	@ (80044f8 <HAL_GPIO_Init+0x2a4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d86f      	bhi.n	8004382 <HAL_GPIO_Init+0x12e>
 80042a2:	4a96      	ldr	r2, [pc, #600]	@ (80044fc <HAL_GPIO_Init+0x2a8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d052      	beq.n	800434e <HAL_GPIO_Init+0xfa>
 80042a8:	4a94      	ldr	r2, [pc, #592]	@ (80044fc <HAL_GPIO_Init+0x2a8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d869      	bhi.n	8004382 <HAL_GPIO_Init+0x12e>
 80042ae:	4a94      	ldr	r2, [pc, #592]	@ (8004500 <HAL_GPIO_Init+0x2ac>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d04c      	beq.n	800434e <HAL_GPIO_Init+0xfa>
 80042b4:	4a92      	ldr	r2, [pc, #584]	@ (8004500 <HAL_GPIO_Init+0x2ac>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d863      	bhi.n	8004382 <HAL_GPIO_Init+0x12e>
 80042ba:	4a92      	ldr	r2, [pc, #584]	@ (8004504 <HAL_GPIO_Init+0x2b0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d046      	beq.n	800434e <HAL_GPIO_Init+0xfa>
 80042c0:	4a90      	ldr	r2, [pc, #576]	@ (8004504 <HAL_GPIO_Init+0x2b0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d85d      	bhi.n	8004382 <HAL_GPIO_Init+0x12e>
 80042c6:	2b12      	cmp	r3, #18
 80042c8:	d82a      	bhi.n	8004320 <HAL_GPIO_Init+0xcc>
 80042ca:	2b12      	cmp	r3, #18
 80042cc:	d859      	bhi.n	8004382 <HAL_GPIO_Init+0x12e>
 80042ce:	a201      	add	r2, pc, #4	@ (adr r2, 80042d4 <HAL_GPIO_Init+0x80>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	0800434f 	.word	0x0800434f
 80042d8:	08004329 	.word	0x08004329
 80042dc:	0800433b 	.word	0x0800433b
 80042e0:	0800437d 	.word	0x0800437d
 80042e4:	08004383 	.word	0x08004383
 80042e8:	08004383 	.word	0x08004383
 80042ec:	08004383 	.word	0x08004383
 80042f0:	08004383 	.word	0x08004383
 80042f4:	08004383 	.word	0x08004383
 80042f8:	08004383 	.word	0x08004383
 80042fc:	08004383 	.word	0x08004383
 8004300:	08004383 	.word	0x08004383
 8004304:	08004383 	.word	0x08004383
 8004308:	08004383 	.word	0x08004383
 800430c:	08004383 	.word	0x08004383
 8004310:	08004383 	.word	0x08004383
 8004314:	08004383 	.word	0x08004383
 8004318:	08004331 	.word	0x08004331
 800431c:	08004345 	.word	0x08004345
 8004320:	4a79      	ldr	r2, [pc, #484]	@ (8004508 <HAL_GPIO_Init+0x2b4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004326:	e02c      	b.n	8004382 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	623b      	str	r3, [r7, #32]
          break;
 800432e:	e029      	b.n	8004384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	3304      	adds	r3, #4
 8004336:	623b      	str	r3, [r7, #32]
          break;
 8004338:	e024      	b.n	8004384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	3308      	adds	r3, #8
 8004340:	623b      	str	r3, [r7, #32]
          break;
 8004342:	e01f      	b.n	8004384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	330c      	adds	r3, #12
 800434a:	623b      	str	r3, [r7, #32]
          break;
 800434c:	e01a      	b.n	8004384 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004356:	2304      	movs	r3, #4
 8004358:	623b      	str	r3, [r7, #32]
          break;
 800435a:	e013      	b.n	8004384 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004364:	2308      	movs	r3, #8
 8004366:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	611a      	str	r2, [r3, #16]
          break;
 800436e:	e009      	b.n	8004384 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004370:	2308      	movs	r3, #8
 8004372:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	615a      	str	r2, [r3, #20]
          break;
 800437a:	e003      	b.n	8004384 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800437c:	2300      	movs	r3, #0
 800437e:	623b      	str	r3, [r7, #32]
          break;
 8004380:	e000      	b.n	8004384 <HAL_GPIO_Init+0x130>
          break;
 8004382:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2bff      	cmp	r3, #255	@ 0xff
 8004388:	d801      	bhi.n	800438e <HAL_GPIO_Init+0x13a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	e001      	b.n	8004392 <HAL_GPIO_Init+0x13e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2bff      	cmp	r3, #255	@ 0xff
 8004398:	d802      	bhi.n	80043a0 <HAL_GPIO_Init+0x14c>
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	e002      	b.n	80043a6 <HAL_GPIO_Init+0x152>
 80043a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a2:	3b08      	subs	r3, #8
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	210f      	movs	r1, #15
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	fa01 f303 	lsl.w	r3, r1, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	401a      	ands	r2, r3
 80043b8:	6a39      	ldr	r1, [r7, #32]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	431a      	orrs	r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80b1 	beq.w	8004536 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043d4:	4b4d      	ldr	r3, [pc, #308]	@ (800450c <HAL_GPIO_Init+0x2b8>)
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	4a4c      	ldr	r2, [pc, #304]	@ (800450c <HAL_GPIO_Init+0x2b8>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6193      	str	r3, [r2, #24]
 80043e0:	4b4a      	ldr	r3, [pc, #296]	@ (800450c <HAL_GPIO_Init+0x2b8>)
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80043ec:	4a48      	ldr	r2, [pc, #288]	@ (8004510 <HAL_GPIO_Init+0x2bc>)
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	3302      	adds	r3, #2
 80043f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	220f      	movs	r2, #15
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a40      	ldr	r2, [pc, #256]	@ (8004514 <HAL_GPIO_Init+0x2c0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d013      	beq.n	8004440 <HAL_GPIO_Init+0x1ec>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3f      	ldr	r2, [pc, #252]	@ (8004518 <HAL_GPIO_Init+0x2c4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00d      	beq.n	800443c <HAL_GPIO_Init+0x1e8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a3e      	ldr	r2, [pc, #248]	@ (800451c <HAL_GPIO_Init+0x2c8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d007      	beq.n	8004438 <HAL_GPIO_Init+0x1e4>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a3d      	ldr	r2, [pc, #244]	@ (8004520 <HAL_GPIO_Init+0x2cc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d101      	bne.n	8004434 <HAL_GPIO_Init+0x1e0>
 8004430:	2303      	movs	r3, #3
 8004432:	e006      	b.n	8004442 <HAL_GPIO_Init+0x1ee>
 8004434:	2304      	movs	r3, #4
 8004436:	e004      	b.n	8004442 <HAL_GPIO_Init+0x1ee>
 8004438:	2302      	movs	r3, #2
 800443a:	e002      	b.n	8004442 <HAL_GPIO_Init+0x1ee>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <HAL_GPIO_Init+0x1ee>
 8004440:	2300      	movs	r3, #0
 8004442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004444:	f002 0203 	and.w	r2, r2, #3
 8004448:	0092      	lsls	r2, r2, #2
 800444a:	4093      	lsls	r3, r2
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004452:	492f      	ldr	r1, [pc, #188]	@ (8004510 <HAL_GPIO_Init+0x2bc>)
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	3302      	adds	r3, #2
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d006      	beq.n	800447a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800446c:	4b2d      	ldr	r3, [pc, #180]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	492c      	ldr	r1, [pc, #176]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
 8004478:	e006      	b.n	8004488 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800447a:	4b2a      	ldr	r3, [pc, #168]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	43db      	mvns	r3, r3
 8004482:	4928      	ldr	r1, [pc, #160]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 8004484:	4013      	ands	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d006      	beq.n	80044a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004494:	4b23      	ldr	r3, [pc, #140]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	4922      	ldr	r1, [pc, #136]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]
 80044a0:	e006      	b.n	80044b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044a2:	4b20      	ldr	r3, [pc, #128]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	491e      	ldr	r1, [pc, #120]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d006      	beq.n	80044ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044bc:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	4918      	ldr	r1, [pc, #96]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	608b      	str	r3, [r1, #8]
 80044c8:	e006      	b.n	80044d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80044ca:	4b16      	ldr	r3, [pc, #88]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	4914      	ldr	r1, [pc, #80]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d021      	beq.n	8004528 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80044e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	490e      	ldr	r1, [pc, #56]	@ (8004524 <HAL_GPIO_Init+0x2d0>)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60cb      	str	r3, [r1, #12]
 80044f0:	e021      	b.n	8004536 <HAL_GPIO_Init+0x2e2>
 80044f2:	bf00      	nop
 80044f4:	10320000 	.word	0x10320000
 80044f8:	10310000 	.word	0x10310000
 80044fc:	10220000 	.word	0x10220000
 8004500:	10210000 	.word	0x10210000
 8004504:	10120000 	.word	0x10120000
 8004508:	10110000 	.word	0x10110000
 800450c:	40021000 	.word	0x40021000
 8004510:	40010000 	.word	0x40010000
 8004514:	40010800 	.word	0x40010800
 8004518:	40010c00 	.word	0x40010c00
 800451c:	40011000 	.word	0x40011000
 8004520:	40011400 	.word	0x40011400
 8004524:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <HAL_GPIO_Init+0x304>)
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	43db      	mvns	r3, r3
 8004530:	4909      	ldr	r1, [pc, #36]	@ (8004558 <HAL_GPIO_Init+0x304>)
 8004532:	4013      	ands	r3, r2
 8004534:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	3301      	adds	r3, #1
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	fa22 f303 	lsr.w	r3, r2, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	f47f ae8e 	bne.w	8004268 <HAL_GPIO_Init+0x14>
  }
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	372c      	adds	r7, #44	@ 0x2c
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	40010400 	.word	0x40010400

0800455c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	887b      	ldrh	r3, [r7, #2]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	e001      	b.n	800457e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800457e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	807b      	strh	r3, [r7, #2]
 8004596:	4613      	mov	r3, r2
 8004598:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800459a:	787b      	ldrb	r3, [r7, #1]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045a0:	887a      	ldrh	r2, [r7, #2]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045a6:	e003      	b.n	80045b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045a8:	887b      	ldrh	r3, [r7, #2]
 80045aa:	041a      	lsls	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	611a      	str	r2, [r3, #16]
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
	...

080045bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045c6:	4b08      	ldr	r3, [pc, #32]	@ (80045e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d006      	beq.n	80045e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045d2:	4a05      	ldr	r2, [pc, #20]	@ (80045e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f806 	bl	80045ec <HAL_GPIO_EXTI_Callback>
  }
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40010400 	.word	0x40010400

080045ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e12b      	b.n	800486a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff f8ce 	bl	80037c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2224      	movs	r2, #36	@ 0x24
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004664:	f002 fb78 	bl	8006d58 <HAL_RCC_GetPCLK1Freq>
 8004668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4a81      	ldr	r2, [pc, #516]	@ (8004874 <HAL_I2C_Init+0x274>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d807      	bhi.n	8004684 <HAL_I2C_Init+0x84>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a80      	ldr	r2, [pc, #512]	@ (8004878 <HAL_I2C_Init+0x278>)
 8004678:	4293      	cmp	r3, r2
 800467a:	bf94      	ite	ls
 800467c:	2301      	movls	r3, #1
 800467e:	2300      	movhi	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e006      	b.n	8004692 <HAL_I2C_Init+0x92>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4a7d      	ldr	r2, [pc, #500]	@ (800487c <HAL_I2C_Init+0x27c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	bf94      	ite	ls
 800468c:	2301      	movls	r3, #1
 800468e:	2300      	movhi	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0e7      	b.n	800486a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4a78      	ldr	r2, [pc, #480]	@ (8004880 <HAL_I2C_Init+0x280>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	0c9b      	lsrs	r3, r3, #18
 80046a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4a6a      	ldr	r2, [pc, #424]	@ (8004874 <HAL_I2C_Init+0x274>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d802      	bhi.n	80046d4 <HAL_I2C_Init+0xd4>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	3301      	adds	r3, #1
 80046d2:	e009      	b.n	80046e8 <HAL_I2C_Init+0xe8>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	4a69      	ldr	r2, [pc, #420]	@ (8004884 <HAL_I2C_Init+0x284>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	099b      	lsrs	r3, r3, #6
 80046e6:	3301      	adds	r3, #1
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	495c      	ldr	r1, [pc, #368]	@ (8004874 <HAL_I2C_Init+0x274>)
 8004704:	428b      	cmp	r3, r1
 8004706:	d819      	bhi.n	800473c <HAL_I2C_Init+0x13c>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1e59      	subs	r1, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	fbb1 f3f3 	udiv	r3, r1, r3
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800471c:	400b      	ands	r3, r1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_I2C_Init+0x138>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1e59      	subs	r1, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004730:	3301      	adds	r3, #1
 8004732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004736:	e051      	b.n	80047dc <HAL_I2C_Init+0x1dc>
 8004738:	2304      	movs	r3, #4
 800473a:	e04f      	b.n	80047dc <HAL_I2C_Init+0x1dc>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d111      	bne.n	8004768 <HAL_I2C_Init+0x168>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1e58      	subs	r0, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	440b      	add	r3, r1
 8004752:	fbb0 f3f3 	udiv	r3, r0, r3
 8004756:	3301      	adds	r3, #1
 8004758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475c:	2b00      	cmp	r3, #0
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e012      	b.n	800478e <HAL_I2C_Init+0x18e>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1e58      	subs	r0, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6859      	ldr	r1, [r3, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	0099      	lsls	r1, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	fbb0 f3f3 	udiv	r3, r0, r3
 800477e:	3301      	adds	r3, #1
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_I2C_Init+0x196>
 8004792:	2301      	movs	r3, #1
 8004794:	e022      	b.n	80047dc <HAL_I2C_Init+0x1dc>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10e      	bne.n	80047bc <HAL_I2C_Init+0x1bc>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1e58      	subs	r0, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	460b      	mov	r3, r1
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	440b      	add	r3, r1
 80047ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b0:	3301      	adds	r3, #1
 80047b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ba:	e00f      	b.n	80047dc <HAL_I2C_Init+0x1dc>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1e58      	subs	r0, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	0099      	lsls	r1, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	6809      	ldr	r1, [r1, #0]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800480a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6911      	ldr	r1, [r2, #16]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68d2      	ldr	r2, [r2, #12]
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	430b      	orrs	r3, r1
 800481e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	000186a0 	.word	0x000186a0
 8004878:	001e847f 	.word	0x001e847f
 800487c:	003d08ff 	.word	0x003d08ff
 8004880:	431bde83 	.word	0x431bde83
 8004884:	10624dd3 	.word	0x10624dd3

08004888 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	461a      	mov	r2, r3
 8004894:	460b      	mov	r3, r1
 8004896:	817b      	strh	r3, [r7, #10]
 8004898:	4613      	mov	r3, r2
 800489a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800489c:	f7ff f99e 	bl	8003bdc <HAL_GetTick>
 80048a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	f040 80e0 	bne.w	8004a70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2319      	movs	r3, #25
 80048b6:	2201      	movs	r2, #1
 80048b8:	4970      	ldr	r1, [pc, #448]	@ (8004a7c <HAL_I2C_Master_Transmit+0x1f4>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f964 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
 80048c8:	e0d3      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_I2C_Master_Transmit+0x50>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e0cc      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d007      	beq.n	80048fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800490c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2221      	movs	r2, #33	@ 0x21
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2210      	movs	r2, #16
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	893a      	ldrh	r2, [r7, #8]
 800492e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a50      	ldr	r2, [pc, #320]	@ (8004a80 <HAL_I2C_Master_Transmit+0x1f8>)
 800493e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004940:	8979      	ldrh	r1, [r7, #10]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6a3a      	ldr	r2, [r7, #32]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f89c 	bl	8004a84 <I2C_MasterRequestWrite>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e08d      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800496c:	e066      	b.n	8004a3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	6a39      	ldr	r1, [r7, #32]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f9de 	bl	8004d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	2b04      	cmp	r3, #4
 8004984:	d107      	bne.n	8004996 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e06b      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	781a      	ldrb	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d11b      	bne.n	8004a10 <HAL_I2C_Master_Transmit+0x188>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d017      	beq.n	8004a10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	781a      	ldrb	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	6a39      	ldr	r1, [r7, #32]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f9ce 	bl	8004db6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00d      	beq.n	8004a3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d107      	bne.n	8004a38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e01a      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d194      	bne.n	800496e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e000      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
  }
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	00100002 	.word	0x00100002
 8004a80:	ffff0000 	.word	0xffff0000

08004a84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	460b      	mov	r3, r1
 8004a92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d006      	beq.n	8004aae <I2C_MasterRequestWrite+0x2a>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d003      	beq.n	8004aae <I2C_MasterRequestWrite+0x2a>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004aac:	d108      	bne.n	8004ac0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e00b      	b.n	8004ad8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac4:	2b12      	cmp	r3, #18
 8004ac6:	d107      	bne.n	8004ad8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ad6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f84f 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00d      	beq.n	8004b0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004afe:	d103      	bne.n	8004b08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e035      	b.n	8004b78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b14:	d108      	bne.n	8004b28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b16:	897b      	ldrh	r3, [r7, #10]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b24:	611a      	str	r2, [r3, #16]
 8004b26:	e01b      	b.n	8004b60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b28:	897b      	ldrh	r3, [r7, #10]
 8004b2a:	11db      	asrs	r3, r3, #7
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 0306 	and.w	r3, r3, #6
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f063 030f 	orn	r3, r3, #15
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	490e      	ldr	r1, [pc, #56]	@ (8004b80 <I2C_MasterRequestWrite+0xfc>)
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f875 	bl	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e010      	b.n	8004b78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4907      	ldr	r1, [pc, #28]	@ (8004b84 <I2C_MasterRequestWrite+0x100>)
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f865 	bl	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	00010008 	.word	0x00010008
 8004b84:	00010002 	.word	0x00010002

08004b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b98:	e025      	b.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d021      	beq.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba2:	f7ff f81b 	bl	8003bdc <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d302      	bcc.n	8004bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d116      	bne.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e023      	b.n	8004c2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	0c1b      	lsrs	r3, r3, #16
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d10d      	bne.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	43da      	mvns	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf0c      	ite	eq
 8004c02:	2301      	moveq	r3, #1
 8004c04:	2300      	movne	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	e00c      	b.n	8004c26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	43da      	mvns	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bf0c      	ite	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	2300      	movne	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d0b6      	beq.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c44:	e051      	b.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c54:	d123      	bne.n	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	f043 0204 	orr.w	r2, r3, #4
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e046      	b.n	8004d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d021      	beq.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca6:	f7fe ff99 	bl	8003bdc <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d302      	bcc.n	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d116      	bne.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	f043 0220 	orr.w	r2, r3, #32
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e020      	b.n	8004d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10c      	bne.n	8004d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bf14      	ite	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	2300      	moveq	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e00b      	b.n	8004d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	43da      	mvns	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d18d      	bne.n	8004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d40:	e02d      	b.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f878 	bl	8004e38 <I2C_IsAcknowledgeFailed>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e02d      	b.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d021      	beq.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5a:	f7fe ff3f 	bl	8003bdc <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d116      	bne.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e007      	b.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da8:	2b80      	cmp	r3, #128	@ 0x80
 8004daa:	d1ca      	bne.n	8004d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dc2:	e02d      	b.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f837 	bl	8004e38 <I2C_IsAcknowledgeFailed>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e02d      	b.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d021      	beq.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ddc:	f7fe fefe 	bl	8003bdc <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d302      	bcc.n	8004df2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d116      	bne.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	f043 0220 	orr.w	r2, r3, #32
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e007      	b.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d1ca      	bne.n	8004dc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4e:	d11b      	bne.n	8004e88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	f043 0204 	orr.w	r2, r3, #4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e96:	b08b      	sub	sp, #44	@ 0x2c
 8004e98:	af06      	add	r7, sp, #24
 8004e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e0fd      	b.n	80050a2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f007 fa0a 	bl	800c2d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f003 f981 	bl	80081d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	687e      	ldr	r6, [r7, #4]
 8004eda:	466d      	mov	r5, sp
 8004edc:	f106 0410 	add.w	r4, r6, #16
 8004ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	1d33      	adds	r3, r6, #4
 8004eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eec:	6838      	ldr	r0, [r7, #0]
 8004eee:	f003 f94b 	bl	8008188 <USB_CoreInit>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0ce      	b.n	80050a2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f003 f97c 	bl	8008208 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	73fb      	strb	r3, [r7, #15]
 8004f14:	e04c      	b.n	8004fb0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	440b      	add	r3, r1
 8004f26:	3301      	adds	r3, #1
 8004f28:	2201      	movs	r2, #1
 8004f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	440b      	add	r3, r1
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f40:	7bfa      	ldrb	r2, [r7, #15]
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	b298      	uxth	r0, r3
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	440b      	add	r3, r1
 8004f52:	3336      	adds	r3, #54	@ 0x36
 8004f54:	4602      	mov	r2, r0
 8004f56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	440b      	add	r3, r1
 8004f68:	3303      	adds	r3, #3
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f6e:	7bfa      	ldrb	r2, [r7, #15]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3338      	adds	r3, #56	@ 0x38
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f82:	7bfa      	ldrb	r2, [r7, #15]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	333c      	adds	r3, #60	@ 0x3c
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f96:	7bfa      	ldrb	r2, [r7, #15]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3340      	adds	r3, #64	@ 0x40
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	3301      	adds	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
 8004fb0:	7bfa      	ldrb	r2, [r7, #15]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d3ad      	bcc.n	8004f16 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e044      	b.n	800504a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	440b      	add	r3, r1
 8004fce:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fd6:	7bfa      	ldrb	r2, [r7, #15]
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	440b      	add	r3, r1
 8004fe4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004fe8:	7bfa      	ldrb	r2, [r7, #15]
 8004fea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fec:	7bfa      	ldrb	r2, [r7, #15]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	440b      	add	r3, r1
 8004ffa:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005002:	7bfa      	ldrb	r2, [r7, #15]
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	440b      	add	r3, r1
 8005010:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005018:	7bfa      	ldrb	r2, [r7, #15]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	440b      	add	r3, r1
 8005026:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800502e:	7bfa      	ldrb	r2, [r7, #15]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	440b      	add	r3, r1
 800503c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	3301      	adds	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
 800504a:	7bfa      	ldrb	r2, [r7, #15]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d3b5      	bcc.n	8004fc0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	603b      	str	r3, [r7, #0]
 800505a:	687e      	ldr	r6, [r7, #4]
 800505c:	466d      	mov	r5, sp
 800505e:	f106 0410 	add.w	r4, r6, #16
 8005062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	1d33      	adds	r3, r6, #4
 800506c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800506e:	6838      	ldr	r0, [r7, #0]
 8005070:	f003 f8d6 	bl	8008220 <USB_DevInit>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e00d      	b.n	80050a2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f005 faf7 	bl	800a68e <USB_DevDisconnect>

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_PCD_Start+0x16>
 80050bc:	2302      	movs	r3, #2
 80050be:	e016      	b.n	80050ee <HAL_PCD_Start+0x44>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f003 f86b 	bl	80081a8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80050d2:	2101      	movs	r1, #1
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f007 fb70 	bl	800c7ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f005 facb 	bl	800a67a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b088      	sub	sp, #32
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f005 facd 	bl	800a6a2 <USB_ReadInterrupts>
 8005108:	4603      	mov	r3, r0
 800510a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800510e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005112:	d102      	bne.n	800511a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fb5f 	bl	80057d8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f005 fabf 	bl	800a6a2 <USB_ReadInterrupts>
 8005124:	4603      	mov	r3, r0
 8005126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512e:	d112      	bne.n	8005156 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005138:	b29a      	uxth	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005142:	b292      	uxth	r2, r2
 8005144:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f007 f93e 	bl	800c3ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800514e:	2100      	movs	r1, #0
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f923 	bl	800539c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f005 faa1 	bl	800a6a2 <USB_ReadInterrupts>
 8005160:	4603      	mov	r3, r0
 8005162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005166:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800516a:	d10b      	bne.n	8005184 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005174:	b29a      	uxth	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800517e:	b292      	uxth	r2, r2
 8005180:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f005 fa8a 	bl	800a6a2 <USB_ReadInterrupts>
 800518e:	4603      	mov	r3, r0
 8005190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005198:	d10b      	bne.n	80051b2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ac:	b292      	uxth	r2, r2
 80051ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f005 fa73 	bl	800a6a2 <USB_ReadInterrupts>
 80051bc:	4603      	mov	r3, r0
 80051be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c6:	d126      	bne.n	8005216 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0204 	bic.w	r2, r2, #4
 80051da:	b292      	uxth	r2, r2
 80051dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0208 	bic.w	r2, r2, #8
 80051f2:	b292      	uxth	r2, r2
 80051f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f007 f91f 	bl	800c43c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005206:	b29a      	uxth	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005210:	b292      	uxth	r2, r2
 8005212:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f005 fa41 	bl	800a6a2 <USB_ReadInterrupts>
 8005220:	4603      	mov	r3, r0
 8005222:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800522a:	f040 8082 	bne.w	8005332 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800522e:	2300      	movs	r3, #0
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e010      	b.n	8005256 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	7ffb      	ldrb	r3, [r7, #31]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	441a      	add	r2, r3
 8005240:	7ffb      	ldrb	r3, [r7, #31]
 8005242:	8812      	ldrh	r2, [r2, #0]
 8005244:	b292      	uxth	r2, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	3320      	adds	r3, #32
 800524a:	443b      	add	r3, r7
 800524c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005250:	7ffb      	ldrb	r3, [r7, #31]
 8005252:	3301      	adds	r3, #1
 8005254:	77fb      	strb	r3, [r7, #31]
 8005256:	7ffb      	ldrb	r3, [r7, #31]
 8005258:	2b07      	cmp	r3, #7
 800525a:	d9eb      	bls.n	8005234 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005264:	b29a      	uxth	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	b292      	uxth	r2, r2
 8005270:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800527c:	b29a      	uxth	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	b292      	uxth	r2, r2
 8005288:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800528c:	bf00      	nop
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005296:	b29b      	uxth	r3, r3
 8005298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f6      	beq.n	800528e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052b2:	b292      	uxth	r2, r2
 80052b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80052b8:	2300      	movs	r3, #0
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e00f      	b.n	80052de <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80052be:	7ffb      	ldrb	r3, [r7, #31]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	4611      	mov	r1, r2
 80052c6:	7ffa      	ldrb	r2, [r7, #31]
 80052c8:	0092      	lsls	r2, r2, #2
 80052ca:	440a      	add	r2, r1
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	3320      	adds	r3, #32
 80052d0:	443b      	add	r3, r7
 80052d2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80052d6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80052d8:	7ffb      	ldrb	r3, [r7, #31]
 80052da:	3301      	adds	r3, #1
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	7ffb      	ldrb	r3, [r7, #31]
 80052e0:	2b07      	cmp	r3, #7
 80052e2:	d9ec      	bls.n	80052be <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0208 	orr.w	r2, r2, #8
 80052f6:	b292      	uxth	r2, r2
 80052f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005304:	b29a      	uxth	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800530e:	b292      	uxth	r2, r2
 8005310:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0204 	orr.w	r2, r2, #4
 8005326:	b292      	uxth	r2, r2
 8005328:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f007 f86b 	bl	800c408 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f005 f9b3 	bl	800a6a2 <USB_ReadInterrupts>
 800533c:	4603      	mov	r3, r0
 800533e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005346:	d10e      	bne.n	8005366 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005350:	b29a      	uxth	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800535a:	b292      	uxth	r2, r2
 800535c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f007 f824 	bl	800c3ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f005 f999 	bl	800a6a2 <USB_ReadInterrupts>
 8005370:	4603      	mov	r3, r0
 8005372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800537a:	d10b      	bne.n	8005394 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005384:	b29a      	uxth	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800538e:	b292      	uxth	r2, r2
 8005390:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8005394:	bf00      	nop
 8005396:	3720      	adds	r7, #32
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_PCD_SetAddress+0x1a>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e013      	b.n	80053de <HAL_PCD_SetAddress+0x42>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	78fa      	ldrb	r2, [r7, #3]
 80053cc:	4611      	mov	r1, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f005 f940 	bl	800a654 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	4608      	mov	r0, r1
 80053f0:	4611      	mov	r1, r2
 80053f2:	461a      	mov	r2, r3
 80053f4:	4603      	mov	r3, r0
 80053f6:	70fb      	strb	r3, [r7, #3]
 80053f8:	460b      	mov	r3, r1
 80053fa:	803b      	strh	r3, [r7, #0]
 80053fc:	4613      	mov	r3, r2
 80053fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005408:	2b00      	cmp	r3, #0
 800540a:	da0e      	bge.n	800542a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	4413      	add	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	705a      	strb	r2, [r3, #1]
 8005428:	e00e      	b.n	8005448 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	f003 0207 	and.w	r2, r3, #7
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	4413      	add	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	b2da      	uxtb	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005454:	883a      	ldrh	r2, [r7, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	78ba      	ldrb	r2, [r7, #2]
 800545e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005472:	78bb      	ldrb	r3, [r7, #2]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d102      	bne.n	800547e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_PCD_EP_Open+0xa6>
 8005488:	2302      	movs	r3, #2
 800548a:	e00e      	b.n	80054aa <HAL_PCD_EP_Open+0xc4>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68f9      	ldr	r1, [r7, #12]
 800549a:	4618      	mov	r0, r3
 800549c:	f002 fee0 	bl	8008260 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80054a8:	7afb      	ldrb	r3, [r7, #11]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	da0e      	bge.n	80054e4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	705a      	strb	r2, [r3, #1]
 80054e2:	e00e      	b.n	8005502 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	f003 0207 	and.w	r2, r3, #7
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4413      	add	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_PCD_EP_Close+0x6a>
 8005518:	2302      	movs	r3, #2
 800551a:	e00e      	b.n	800553a <HAL_PCD_EP_Close+0x88>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68f9      	ldr	r1, [r7, #12]
 800552a:	4618      	mov	r0, r3
 800552c:	f003 fa02 	bl	8008934 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b086      	sub	sp, #24
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	460b      	mov	r3, r1
 8005550:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005552:	7afb      	ldrb	r3, [r7, #11]
 8005554:	f003 0207 	and.w	r2, r3, #7
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2200      	movs	r2, #0
 800557a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2200      	movs	r2, #0
 8005580:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005582:	7afb      	ldrb	r3, [r7, #11]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	b2da      	uxtb	r2, r3
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800558e:	7afb      	ldrb	r3, [r7, #11]
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6979      	ldr	r1, [r7, #20]
 800559e:	4618      	mov	r0, r3
 80055a0:	f003 fbb4 	bl	8008d0c <USB_EPStartXfer>
 80055a4:	e005      	b.n	80055b2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6979      	ldr	r1, [r7, #20]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f003 fbad 	bl	8008d0c <USB_EPStartXfer>
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	f003 0207 	and.w	r2, r3, #7
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	440b      	add	r3, r1
 80055da:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80055de:	681b      	ldr	r3, [r3, #0]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr

080055ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
 80055f6:	460b      	mov	r3, r1
 80055f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055fa:	7afb      	ldrb	r3, [r7, #11]
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2200      	movs	r2, #0
 800562e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2201      	movs	r2, #1
 8005634:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005636:	7afb      	ldrb	r3, [r7, #11]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	b2da      	uxtb	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005642:	7afb      	ldrb	r3, [r7, #11]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6979      	ldr	r1, [r7, #20]
 8005652:	4618      	mov	r0, r3
 8005654:	f003 fb5a 	bl	8008d0c <USB_EPStartXfer>
 8005658:	e005      	b.n	8005666 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6979      	ldr	r1, [r7, #20]
 8005660:	4618      	mov	r0, r3
 8005662:	f003 fb53 	bl	8008d0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	f003 0207 	and.w	r2, r3, #7
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	429a      	cmp	r2, r3
 8005688:	d901      	bls.n	800568e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e04c      	b.n	8005728 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800568e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005692:	2b00      	cmp	r3, #0
 8005694:	da0e      	bge.n	80056b4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	4413      	add	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	705a      	strb	r2, [r3, #1]
 80056b2:	e00c      	b.n	80056ce <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4413      	add	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_PCD_EP_SetStall+0x7e>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e01c      	b.n	8005728 <HAL_PCD_EP_SetStall+0xb8>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f004 feac 	bl	800a45a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	2b00      	cmp	r3, #0
 800570a:	d108      	bne.n	800571e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f004 ffd1 	bl	800a6c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	f003 020f 	and.w	r2, r3, #15
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	429a      	cmp	r2, r3
 8005748:	d901      	bls.n	800574e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e040      	b.n	80057d0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800574e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005752:	2b00      	cmp	r3, #0
 8005754:	da0e      	bge.n	8005774 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	4413      	add	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	705a      	strb	r2, [r3, #1]
 8005772:	e00e      	b.n	8005792 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	f003 0207 	and.w	r2, r3, #7
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_PCD_EP_ClrStall+0x82>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e00e      	b.n	80057d0 <HAL_PCD_EP_ClrStall+0xa0>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f004 fe9a 	bl	800a4fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08e      	sub	sp, #56	@ 0x38
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80057e0:	e2de      	b.n	8005da0 <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80057ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80057ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 80057f8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f040 8157 	bne.w	8005ab0 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005802:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	d151      	bne.n	80058b0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800581c:	81fb      	strh	r3, [r7, #14]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	89fb      	ldrh	r3, [r7, #14]
 8005824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800582c:	b29b      	uxth	r3, r3
 800582e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3328      	adds	r3, #40	@ 0x28
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800583e:	b29b      	uxth	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4413      	add	r3, r2
 800584a:	3302      	adds	r3, #2
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6812      	ldr	r2, [r2, #0]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	441a      	add	r2, r3
 800586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005870:	2100      	movs	r1, #0
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f006 fd81 	bl	800c37a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 828d 	beq.w	8005da0 <PCD_EP_ISR_Handler+0x5c8>
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 8288 	bne.w	8005da0 <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800589c:	b2da      	uxtb	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80058ae:	e277      	b.n	8005da0 <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80058c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d034      	beq.n	8005934 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	4413      	add	r3, r2
 80058de:	3306      	adds	r3, #6
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005908:	b29b      	uxth	r3, r3
 800590a:	f004 ff28 	bl	800a75e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29a      	uxth	r2, r3
 8005916:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800591a:	4013      	ands	r3, r2
 800591c:	823b      	strh	r3, [r7, #16]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	8a3a      	ldrh	r2, [r7, #16]
 8005924:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005928:	b292      	uxth	r2, r2
 800592a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f006 fcf7 	bl	800c320 <HAL_PCD_SetupStageCallback>
 8005932:	e235      	b.n	8005da0 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005934:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005938:	2b00      	cmp	r3, #0
 800593a:	f280 8231 	bge.w	8005da0 <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29a      	uxth	r2, r3
 8005946:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800594a:	4013      	ands	r3, r2
 800594c:	83bb      	strh	r3, [r7, #28]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	8bba      	ldrh	r2, [r7, #28]
 8005954:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005958:	b292      	uxth	r2, r2
 800595a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005964:	b29b      	uxth	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	4413      	add	r3, r2
 8005970:	3306      	adds	r3, #6
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d019      	beq.n	80059c4 <PCD_EP_ISR_Handler+0x1ec>
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d015      	beq.n	80059c4 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	6959      	ldr	r1, [r3, #20]
 80059a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f004 fed8 	bl	800a75e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	441a      	add	r2, r3
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80059bc:	2100      	movs	r1, #0
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f006 fcc0 	bl	800c344 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	61bb      	str	r3, [r7, #24]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	4413      	add	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d112      	bne.n	8005a12 <PCD_EP_ISR_Handler+0x23a>
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	801a      	strh	r2, [r3, #0]
 8005a10:	e02f      	b.n	8005a72 <PCD_EP_ISR_Handler+0x29a>
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a18:	d813      	bhi.n	8005a42 <PCD_EP_ISR_Handler+0x26a>
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <PCD_EP_ISR_Handler+0x25c>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	3301      	adds	r3, #1
 8005a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	029b      	lsls	r3, r3, #10
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	e017      	b.n	8005a72 <PCD_EP_ISR_Handler+0x29a>
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d102      	bne.n	8005a5c <PCD_EP_ISR_Handler+0x284>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	029b      	lsls	r3, r3, #10
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a82:	827b      	strh	r3, [r7, #18]
 8005a84:	8a7b      	ldrh	r3, [r7, #18]
 8005a86:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005a8a:	827b      	strh	r3, [r7, #18]
 8005a8c:	8a7b      	ldrh	r3, [r7, #18]
 8005a8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a92:	827b      	strh	r3, [r7, #18]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	8a7b      	ldrh	r3, [r7, #18]
 8005a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	8013      	strh	r3, [r2, #0]
 8005aae:	e177      	b.n	8005da0 <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ac2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f280 80ea 	bge.w	8005ca0 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005af6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005afa:	b292      	uxth	r2, r2
 8005afc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005afe:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	4413      	add	r3, r2
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	7b1b      	ldrb	r3, [r3, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d122      	bne.n	8005b62 <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4413      	add	r3, r2
 8005b30:	3306      	adds	r3, #6
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b44:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 8005b46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8087 	beq.w	8005c5c <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	6959      	ldr	r1, [r3, #20]
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	88da      	ldrh	r2, [r3, #6]
 8005b5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b5c:	f004 fdff 	bl	800a75e <USB_ReadPMA>
 8005b60:	e07c      	b.n	8005c5c <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	78db      	ldrb	r3, [r3, #3]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d108      	bne.n	8005b7c <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005b6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f923 	bl	8005dbc <HAL_PCD_EP_DB_Receive>
 8005b76:	4603      	mov	r3, r0
 8005b78:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005b7a:	e06f      	b.n	8005c5c <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b96:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	441a      	add	r2, r3
 8005ba6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d021      	beq.n	8005c1a <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4413      	add	r3, r2
 8005bea:	3302      	adds	r3, #2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bfe:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8005c00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d02a      	beq.n	8005c5c <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	6959      	ldr	r1, [r3, #20]
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	891a      	ldrh	r2, [r3, #8]
 8005c12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c14:	f004 fda3 	bl	800a75e <USB_ReadPMA>
 8005c18:	e020      	b.n	8005c5c <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	3306      	adds	r3, #6
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6812      	ldr	r2, [r2, #0]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c42:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8005c44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d008      	beq.n	8005c5c <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	6959      	ldr	r1, [r3, #20]
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	895a      	ldrh	r2, [r3, #10]
 8005c56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c58:	f004 fd81 	bl	800a75e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5e:	69da      	ldr	r2, [r3, #28]
 8005c60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c62:	441a      	add	r2, r3
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	695a      	ldr	r2, [r3, #20]
 8005c6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c6e:	441a      	add	r2, r3
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <PCD_EP_ISR_Handler+0x4ae>
 8005c7c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d206      	bcs.n	8005c94 <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f006 fb59 	bl	800c344 <HAL_PCD_DataOutStageCallback>
 8005c92:	e005      	b.n	8005ca0 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f003 f836 	bl	8008d0c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005ca0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d07a      	beq.n	8005da0 <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 8005caa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	4413      	add	r3, r2
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd8:	843b      	strh	r3, [r7, #32]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	8c3b      	ldrh	r3, [r7, #32]
 8005cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	78db      	ldrb	r3, [r3, #3]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d108      	bne.n	8005d10 <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d146      	bne.n	8005d94 <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005d06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d141      	bne.n	8005d94 <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4413      	add	r3, r2
 8005d24:	3302      	adds	r3, #2
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d38:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	8bfb      	ldrh	r3, [r7, #30]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d906      	bls.n	8005d52 <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	8bfb      	ldrh	r3, [r7, #30]
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4e:	619a      	str	r2, [r3, #24]
 8005d50:	e002      	b.n	8005d58 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	2200      	movs	r2, #0
 8005d56:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f006 fb07 	bl	800c37a <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 8005d6c:	e018      	b.n	8005da0 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	695a      	ldr	r2, [r3, #20]
 8005d72:	8bfb      	ldrh	r3, [r7, #30]
 8005d74:	441a      	add	r2, r3
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	69da      	ldr	r2, [r3, #28]
 8005d7e:	8bfb      	ldrh	r3, [r7, #30]
 8005d80:	441a      	add	r2, r3
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f002 ffbd 	bl	8008d0c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005d92:	e005      	b.n	8005da0 <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005d94:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d96:	461a      	mov	r2, r3
 8005d98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f91b 	bl	8005fd6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	b21b      	sxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f6ff ad18 	blt.w	80057e2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3738      	adds	r7, #56	@ 0x38
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d07e      	beq.n	8005ed2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4413      	add	r3, r2
 8005de8:	3302      	adds	r3, #2
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dfc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	8b7b      	ldrh	r3, [r7, #26]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d306      	bcc.n	8005e16 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	8b7b      	ldrh	r3, [r7, #26]
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	619a      	str	r2, [r3, #24]
 8005e14:	e002      	b.n	8005e1c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d123      	bne.n	8005e6c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3e:	833b      	strh	r3, [r7, #24]
 8005e40:	8b3b      	ldrh	r3, [r7, #24]
 8005e42:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e46:	833b      	strh	r3, [r7, #24]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	441a      	add	r2, r3
 8005e56:	8b3b      	ldrh	r3, [r7, #24]
 8005e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01f      	beq.n	8005eb6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e90:	82fb      	strh	r3, [r7, #22]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	8afb      	ldrh	r3, [r7, #22]
 8005ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005eb6:	8b7b      	ldrh	r3, [r7, #26]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8087 	beq.w	8005fcc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	6959      	ldr	r1, [r3, #20]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	891a      	ldrh	r2, [r3, #8]
 8005eca:	8b7b      	ldrh	r3, [r7, #26]
 8005ecc:	f004 fc47 	bl	800a75e <USB_ReadPMA>
 8005ed0:	e07c      	b.n	8005fcc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	3306      	adds	r3, #6
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005efa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	8b7b      	ldrh	r3, [r7, #26]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d306      	bcc.n	8005f14 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	8b7b      	ldrh	r3, [r7, #26]
 8005f0c:	1ad2      	subs	r2, r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	619a      	str	r2, [r3, #24]
 8005f12:	e002      	b.n	8005f1a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2200      	movs	r2, #0
 8005f18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d123      	bne.n	8005f6a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f3c:	83fb      	strh	r3, [r7, #30]
 8005f3e:	8bfb      	ldrh	r3, [r7, #30]
 8005f40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f44:	83fb      	strh	r3, [r7, #30]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	441a      	add	r2, r3
 8005f54:	8bfb      	ldrh	r3, [r7, #30]
 8005f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d11f      	bne.n	8005fb4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8e:	83bb      	strh	r3, [r7, #28]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	441a      	add	r2, r3
 8005f9e:	8bbb      	ldrh	r3, [r7, #28]
 8005fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005fb4:	8b7b      	ldrh	r3, [r7, #26]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d008      	beq.n	8005fcc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6959      	ldr	r1, [r3, #20]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	895a      	ldrh	r2, [r3, #10]
 8005fc6:	8b7b      	ldrh	r3, [r7, #26]
 8005fc8:	f004 fbc9 	bl	800a75e <USB_ReadPMA>
    }
  }

  return count;
 8005fcc:	8b7b      	ldrh	r3, [r7, #26]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b094      	sub	sp, #80	@ 0x50
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 8138 	beq.w	8006260 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	4413      	add	r3, r2
 8006004:	3302      	adds	r3, #2
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006018:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	699a      	ldr	r2, [r3, #24]
 8006020:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006024:	429a      	cmp	r2, r3
 8006026:	d907      	bls.n	8006038 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	699a      	ldr	r2, [r3, #24]
 800602c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006030:	1ad2      	subs	r2, r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	619a      	str	r2, [r3, #24]
 8006036:	e002      	b.n	800603e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d12c      	bne.n	80060a0 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	4619      	mov	r1, r3
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f006 f994 	bl	800c37a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006052:	88fb      	ldrh	r3, [r7, #6]
 8006054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 823a 	beq.w	80064d2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006078:	82fb      	strh	r3, [r7, #22]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	8afb      	ldrh	r3, [r7, #22]
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006092:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
 800609e:	e218      	b.n	80064d2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01f      	beq.n	80060ea <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	441a      	add	r2, r3
 80060d4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80060d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	f040 81ee 	bne.w	80064d2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80060fe:	441a      	add	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	69da      	ldr	r2, [r3, #28]
 8006108:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800610c:	441a      	add	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6a1a      	ldr	r2, [r3, #32]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	429a      	cmp	r2, r3
 800611c:	d309      	bcc.n	8006132 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	6a1a      	ldr	r2, [r3, #32]
 8006128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800612a:	1ad2      	subs	r2, r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	621a      	str	r2, [r3, #32]
 8006130:	e015      	b.n	800615e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d107      	bne.n	800614a <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 800613a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800613e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006148:	e009      	b.n	800615e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2200      	movs	r2, #0
 800615c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d155      	bne.n	8006212 <HAL_PCD_EP_DB_Transmit+0x23c>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	61fb      	str	r3, [r7, #28]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006174:	b29b      	uxth	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	61fb      	str	r3, [r7, #28]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	011a      	lsls	r2, r3, #4
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	4413      	add	r3, r2
 8006188:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006190:	2b00      	cmp	r3, #0
 8006192:	d112      	bne.n	80061ba <HAL_PCD_EP_DB_Transmit+0x1e4>
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b29b      	uxth	r3, r3
 800619a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800619e:	b29a      	uxth	r2, r3
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	e047      	b.n	800624a <HAL_PCD_EP_DB_Transmit+0x274>
 80061ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80061be:	d811      	bhi.n	80061e4 <HAL_PCD_EP_DB_Transmit+0x20e>
 80061c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <HAL_PCD_EP_DB_Transmit+0x200>
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	3301      	adds	r3, #1
 80061d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d8:	b29b      	uxth	r3, r3
 80061da:	029b      	lsls	r3, r3, #10
 80061dc:	b29a      	uxth	r2, r3
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	e032      	b.n	800624a <HAL_PCD_EP_DB_Transmit+0x274>
 80061e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d102      	bne.n	80061fa <HAL_PCD_EP_DB_Transmit+0x224>
 80061f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f6:	3b01      	subs	r3, #1
 80061f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	029b      	lsls	r3, r3, #10
 8006200:	b29b      	uxth	r3, r3
 8006202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620a:	b29a      	uxth	r2, r3
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	801a      	strh	r2, [r3, #0]
 8006210:	e01b      	b.n	800624a <HAL_PCD_EP_DB_Transmit+0x274>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	785b      	ldrb	r3, [r3, #1]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d117      	bne.n	800624a <HAL_PCD_EP_DB_Transmit+0x274>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006228:	b29b      	uxth	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	4413      	add	r3, r2
 8006230:	627b      	str	r3, [r7, #36]	@ 0x24
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	011a      	lsls	r2, r3, #4
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	4413      	add	r3, r2
 800623c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006240:	623b      	str	r3, [r7, #32]
 8006242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006244:	b29a      	uxth	r2, r3
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6959      	ldr	r1, [r3, #20]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	891a      	ldrh	r2, [r3, #8]
 8006256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006258:	b29b      	uxth	r3, r3
 800625a:	f004 fa3c 	bl	800a6d6 <USB_WritePMA>
 800625e:	e138      	b.n	80064d2 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006268:	b29b      	uxth	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	4413      	add	r3, r2
 8006274:	3306      	adds	r3, #6
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006288:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006294:	429a      	cmp	r2, r3
 8006296:	d307      	bcc.n	80062a8 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	699a      	ldr	r2, [r3, #24]
 800629c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80062a0:	1ad2      	subs	r2, r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	619a      	str	r2, [r3, #24]
 80062a6:	e002      	b.n	80062ae <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2200      	movs	r2, #0
 80062ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d12e      	bne.n	8006314 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	4619      	mov	r1, r3
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f006 f85c 	bl	800c37a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f040 8102 	bne.w	80064d2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	441a      	add	r2, r3
 80062fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80062fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006302:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006306:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800630a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800630e:	b29b      	uxth	r3, r3
 8006310:	8013      	strh	r3, [r2, #0]
 8006312:	e0de      	b.n	80064d2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006314:	88fb      	ldrh	r3, [r7, #6]
 8006316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d11f      	bne.n	800635e <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006338:	867b      	strh	r3, [r7, #50]	@ 0x32
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	441a      	add	r2, r3
 8006348:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800634a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800634e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006352:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800635a:	b29b      	uxth	r3, r3
 800635c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006364:	2b01      	cmp	r3, #1
 8006366:	f040 80b4 	bne.w	80064d2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	695a      	ldr	r2, [r3, #20]
 800636e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006372:	441a      	add	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	69da      	ldr	r2, [r3, #28]
 800637c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006380:	441a      	add	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6a1a      	ldr	r2, [r3, #32]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	429a      	cmp	r2, r3
 8006390:	d309      	bcc.n	80063a6 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800639e:	1ad2      	subs	r2, r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	621a      	str	r2, [r3, #32]
 80063a4:	e015      	b.n	80063d2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d107      	bne.n	80063be <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80063ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80063b2:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80063bc:	e009      	b.n	80063d2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2200      	movs	r2, #0
 80063c8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d155      	bne.n	800648c <HAL_PCD_EP_DB_Transmit+0x4b6>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	4413      	add	r3, r2
 80063f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	011a      	lsls	r2, r3, #4
 80063fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006400:	4413      	add	r3, r2
 8006402:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006406:	637b      	str	r3, [r7, #52]	@ 0x34
 8006408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800640a:	2b00      	cmp	r3, #0
 800640c:	d112      	bne.n	8006434 <HAL_PCD_EP_DB_Transmit+0x45e>
 800640e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006418:	b29a      	uxth	r2, r3
 800641a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642c:	b29a      	uxth	r2, r3
 800642e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	e044      	b.n	80064be <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006436:	2b3e      	cmp	r3, #62	@ 0x3e
 8006438:	d811      	bhi.n	800645e <HAL_PCD_EP_DB_Transmit+0x488>
 800643a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_PCD_EP_DB_Transmit+0x47a>
 800644a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800644c:	3301      	adds	r3, #1
 800644e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006452:	b29b      	uxth	r3, r3
 8006454:	029b      	lsls	r3, r3, #10
 8006456:	b29a      	uxth	r2, r3
 8006458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	e02f      	b.n	80064be <HAL_PCD_EP_DB_Transmit+0x4e8>
 800645e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006460:	095b      	lsrs	r3, r3, #5
 8006462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <HAL_PCD_EP_DB_Transmit+0x49e>
 800646e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006470:	3b01      	subs	r3, #1
 8006472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006476:	b29b      	uxth	r3, r3
 8006478:	029b      	lsls	r3, r3, #10
 800647a:	b29b      	uxth	r3, r3
 800647c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006484:	b29a      	uxth	r2, r3
 8006486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	e018      	b.n	80064be <HAL_PCD_EP_DB_Transmit+0x4e8>
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d114      	bne.n	80064be <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800649c:	b29b      	uxth	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064a2:	4413      	add	r3, r2
 80064a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	011a      	lsls	r2, r3, #4
 80064ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064ae:	4413      	add	r3, r2
 80064b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6818      	ldr	r0, [r3, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6959      	ldr	r1, [r3, #20]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	895a      	ldrh	r2, [r3, #10]
 80064ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f004 f902 	bl	800a6d6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ec:	82bb      	strh	r3, [r7, #20]
 80064ee:	8abb      	ldrh	r3, [r7, #20]
 80064f0:	f083 0310 	eor.w	r3, r3, #16
 80064f4:	82bb      	strh	r3, [r7, #20]
 80064f6:	8abb      	ldrh	r3, [r7, #20]
 80064f8:	f083 0320 	eor.w	r3, r3, #32
 80064fc:	82bb      	strh	r3, [r7, #20]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	441a      	add	r2, r3
 800650c:	8abb      	ldrh	r3, [r7, #20]
 800650e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800651a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800651e:	b29b      	uxth	r3, r3
 8006520:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3750      	adds	r7, #80	@ 0x50
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	607b      	str	r3, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	817b      	strh	r3, [r7, #10]
 800653a:	4613      	mov	r3, r2
 800653c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800653e:	897b      	ldrh	r3, [r7, #10]
 8006540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00b      	beq.n	8006562 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800654a:	897b      	ldrh	r3, [r7, #10]
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e009      	b.n	8006576 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006562:	897a      	ldrh	r2, [r7, #10]
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006576:	893b      	ldrh	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d107      	bne.n	800658c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2200      	movs	r2, #0
 8006580:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	b29a      	uxth	r2, r3
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	80da      	strh	r2, [r3, #6]
 800658a:	e00b      	b.n	80065a4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2201      	movs	r2, #1
 8006590:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	b29a      	uxth	r2, r3
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	0c1b      	lsrs	r3, r3, #16
 800659e:	b29a      	uxth	r2, r3
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr

080065b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e272      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8087 	beq.w	80066de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065d0:	4b92      	ldr	r3, [pc, #584]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f003 030c 	and.w	r3, r3, #12
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d00c      	beq.n	80065f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065dc:	4b8f      	ldr	r3, [pc, #572]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f003 030c 	and.w	r3, r3, #12
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d112      	bne.n	800660e <HAL_RCC_OscConfig+0x5e>
 80065e8:	4b8c      	ldr	r3, [pc, #560]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f4:	d10b      	bne.n	800660e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f6:	4b89      	ldr	r3, [pc, #548]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d06c      	beq.n	80066dc <HAL_RCC_OscConfig+0x12c>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d168      	bne.n	80066dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e24c      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006616:	d106      	bne.n	8006626 <HAL_RCC_OscConfig+0x76>
 8006618:	4b80      	ldr	r3, [pc, #512]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a7f      	ldr	r2, [pc, #508]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 800661e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	e02e      	b.n	8006684 <HAL_RCC_OscConfig+0xd4>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10c      	bne.n	8006648 <HAL_RCC_OscConfig+0x98>
 800662e:	4b7b      	ldr	r3, [pc, #492]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a7a      	ldr	r2, [pc, #488]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	4b78      	ldr	r3, [pc, #480]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a77      	ldr	r2, [pc, #476]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006640:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e01d      	b.n	8006684 <HAL_RCC_OscConfig+0xd4>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006650:	d10c      	bne.n	800666c <HAL_RCC_OscConfig+0xbc>
 8006652:	4b72      	ldr	r3, [pc, #456]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a71      	ldr	r2, [pc, #452]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	4b6f      	ldr	r3, [pc, #444]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a6e      	ldr	r2, [pc, #440]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	e00b      	b.n	8006684 <HAL_RCC_OscConfig+0xd4>
 800666c:	4b6b      	ldr	r3, [pc, #428]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a6a      	ldr	r2, [pc, #424]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	4b68      	ldr	r3, [pc, #416]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a67      	ldr	r2, [pc, #412]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 800667e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006682:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d013      	beq.n	80066b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668c:	f7fd faa6 	bl	8003bdc <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006694:	f7fd faa2 	bl	8003bdc <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b64      	cmp	r3, #100	@ 0x64
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e200      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066a6:	4b5d      	ldr	r3, [pc, #372]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f0      	beq.n	8006694 <HAL_RCC_OscConfig+0xe4>
 80066b2:	e014      	b.n	80066de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b4:	f7fd fa92 	bl	8003bdc <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066bc:	f7fd fa8e 	bl	8003bdc <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b64      	cmp	r3, #100	@ 0x64
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e1ec      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ce:	4b53      	ldr	r3, [pc, #332]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f0      	bne.n	80066bc <HAL_RCC_OscConfig+0x10c>
 80066da:	e000      	b.n	80066de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d063      	beq.n	80067b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066ea:	4b4c      	ldr	r3, [pc, #304]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f003 030c 	and.w	r3, r3, #12
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00b      	beq.n	800670e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80066f6:	4b49      	ldr	r3, [pc, #292]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f003 030c 	and.w	r3, r3, #12
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d11c      	bne.n	800673c <HAL_RCC_OscConfig+0x18c>
 8006702:	4b46      	ldr	r3, [pc, #280]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d116      	bne.n	800673c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800670e:	4b43      	ldr	r3, [pc, #268]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <HAL_RCC_OscConfig+0x176>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d001      	beq.n	8006726 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e1c0      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006726:	4b3d      	ldr	r3, [pc, #244]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	4939      	ldr	r1, [pc, #228]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006736:	4313      	orrs	r3, r2
 8006738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800673a:	e03a      	b.n	80067b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d020      	beq.n	8006786 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006744:	4b36      	ldr	r3, [pc, #216]	@ (8006820 <HAL_RCC_OscConfig+0x270>)
 8006746:	2201      	movs	r2, #1
 8006748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674a:	f7fd fa47 	bl	8003bdc <HAL_GetTick>
 800674e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006750:	e008      	b.n	8006764 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006752:	f7fd fa43 	bl	8003bdc <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e1a1      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006764:	4b2d      	ldr	r3, [pc, #180]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0f0      	beq.n	8006752 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006770:	4b2a      	ldr	r3, [pc, #168]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	4927      	ldr	r1, [pc, #156]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 8006780:	4313      	orrs	r3, r2
 8006782:	600b      	str	r3, [r1, #0]
 8006784:	e015      	b.n	80067b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006786:	4b26      	ldr	r3, [pc, #152]	@ (8006820 <HAL_RCC_OscConfig+0x270>)
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678c:	f7fd fa26 	bl	8003bdc <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006794:	f7fd fa22 	bl	8003bdc <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e180      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067a6:	4b1d      	ldr	r3, [pc, #116]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f0      	bne.n	8006794 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d03a      	beq.n	8006834 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d019      	beq.n	80067fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067c6:	4b17      	ldr	r3, [pc, #92]	@ (8006824 <HAL_RCC_OscConfig+0x274>)
 80067c8:	2201      	movs	r2, #1
 80067ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067cc:	f7fd fa06 	bl	8003bdc <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067d4:	f7fd fa02 	bl	8003bdc <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e160      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067e6:	4b0d      	ldr	r3, [pc, #52]	@ (800681c <HAL_RCC_OscConfig+0x26c>)
 80067e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80067f2:	2001      	movs	r0, #1
 80067f4:	f000 fad8 	bl	8006da8 <RCC_Delay>
 80067f8:	e01c      	b.n	8006834 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006824 <HAL_RCC_OscConfig+0x274>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006800:	f7fd f9ec 	bl	8003bdc <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006806:	e00f      	b.n	8006828 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006808:	f7fd f9e8 	bl	8003bdc <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d908      	bls.n	8006828 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e146      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
 800681a:	bf00      	nop
 800681c:	40021000 	.word	0x40021000
 8006820:	42420000 	.word	0x42420000
 8006824:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006828:	4b92      	ldr	r3, [pc, #584]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 800682a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e9      	bne.n	8006808 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 80a6 	beq.w	800698e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006842:	2300      	movs	r3, #0
 8006844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006846:	4b8b      	ldr	r3, [pc, #556]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10d      	bne.n	800686e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006852:	4b88      	ldr	r3, [pc, #544]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	4a87      	ldr	r2, [pc, #540]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800685c:	61d3      	str	r3, [r2, #28]
 800685e:	4b85      	ldr	r3, [pc, #532]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006866:	60bb      	str	r3, [r7, #8]
 8006868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800686a:	2301      	movs	r3, #1
 800686c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800686e:	4b82      	ldr	r3, [pc, #520]	@ (8006a78 <HAL_RCC_OscConfig+0x4c8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006876:	2b00      	cmp	r3, #0
 8006878:	d118      	bne.n	80068ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800687a:	4b7f      	ldr	r3, [pc, #508]	@ (8006a78 <HAL_RCC_OscConfig+0x4c8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a78 <HAL_RCC_OscConfig+0x4c8>)
 8006880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006886:	f7fd f9a9 	bl	8003bdc <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800688e:	f7fd f9a5 	bl	8003bdc <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b64      	cmp	r3, #100	@ 0x64
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e103      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a0:	4b75      	ldr	r3, [pc, #468]	@ (8006a78 <HAL_RCC_OscConfig+0x4c8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d106      	bne.n	80068c2 <HAL_RCC_OscConfig+0x312>
 80068b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	4a6e      	ldr	r2, [pc, #440]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	6213      	str	r3, [r2, #32]
 80068c0:	e02d      	b.n	800691e <HAL_RCC_OscConfig+0x36e>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10c      	bne.n	80068e4 <HAL_RCC_OscConfig+0x334>
 80068ca:	4b6a      	ldr	r3, [pc, #424]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	4a69      	ldr	r2, [pc, #420]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	6213      	str	r3, [r2, #32]
 80068d6:	4b67      	ldr	r3, [pc, #412]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	4a66      	ldr	r2, [pc, #408]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80068dc:	f023 0304 	bic.w	r3, r3, #4
 80068e0:	6213      	str	r3, [r2, #32]
 80068e2:	e01c      	b.n	800691e <HAL_RCC_OscConfig+0x36e>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	2b05      	cmp	r3, #5
 80068ea:	d10c      	bne.n	8006906 <HAL_RCC_OscConfig+0x356>
 80068ec:	4b61      	ldr	r3, [pc, #388]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	4a60      	ldr	r2, [pc, #384]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80068f2:	f043 0304 	orr.w	r3, r3, #4
 80068f6:	6213      	str	r3, [r2, #32]
 80068f8:	4b5e      	ldr	r3, [pc, #376]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	4a5d      	ldr	r2, [pc, #372]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	6213      	str	r3, [r2, #32]
 8006904:	e00b      	b.n	800691e <HAL_RCC_OscConfig+0x36e>
 8006906:	4b5b      	ldr	r3, [pc, #364]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	4a5a      	ldr	r2, [pc, #360]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	6213      	str	r3, [r2, #32]
 8006912:	4b58      	ldr	r3, [pc, #352]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	4a57      	ldr	r2, [pc, #348]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006918:	f023 0304 	bic.w	r3, r3, #4
 800691c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d015      	beq.n	8006952 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006926:	f7fd f959 	bl	8003bdc <HAL_GetTick>
 800692a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800692c:	e00a      	b.n	8006944 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692e:	f7fd f955 	bl	8003bdc <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800693c:	4293      	cmp	r3, r2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e0b1      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006944:	4b4b      	ldr	r3, [pc, #300]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0ee      	beq.n	800692e <HAL_RCC_OscConfig+0x37e>
 8006950:	e014      	b.n	800697c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006952:	f7fd f943 	bl	8003bdc <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006958:	e00a      	b.n	8006970 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695a:	f7fd f93f 	bl	8003bdc <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006968:	4293      	cmp	r3, r2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e09b      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006970:	4b40      	ldr	r3, [pc, #256]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1ee      	bne.n	800695a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d105      	bne.n	800698e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006982:	4b3c      	ldr	r3, [pc, #240]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	4a3b      	ldr	r2, [pc, #236]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800698c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8087 	beq.w	8006aa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006998:	4b36      	ldr	r3, [pc, #216]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f003 030c 	and.w	r3, r3, #12
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d061      	beq.n	8006a68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d146      	bne.n	8006a3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ac:	4b33      	ldr	r3, [pc, #204]	@ (8006a7c <HAL_RCC_OscConfig+0x4cc>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b2:	f7fd f913 	bl	8003bdc <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069b8:	e008      	b.n	80069cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ba:	f7fd f90f 	bl	8003bdc <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e06d      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069cc:	4b29      	ldr	r3, [pc, #164]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1f0      	bne.n	80069ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069e0:	d108      	bne.n	80069f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80069e2:	4b24      	ldr	r3, [pc, #144]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	4921      	ldr	r1, [pc, #132]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069f4:	4b1f      	ldr	r3, [pc, #124]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a19      	ldr	r1, [r3, #32]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	430b      	orrs	r3, r1
 8006a06:	491b      	ldr	r1, [pc, #108]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006a7c <HAL_RCC_OscConfig+0x4cc>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a12:	f7fd f8e3 	bl	8003bdc <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a18:	e008      	b.n	8006a2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a1a:	f7fd f8df 	bl	8003bdc <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e03d      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a2c:	4b11      	ldr	r3, [pc, #68]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0f0      	beq.n	8006a1a <HAL_RCC_OscConfig+0x46a>
 8006a38:	e035      	b.n	8006aa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a3a:	4b10      	ldr	r3, [pc, #64]	@ (8006a7c <HAL_RCC_OscConfig+0x4cc>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a40:	f7fd f8cc 	bl	8003bdc <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a48:	f7fd f8c8 	bl	8003bdc <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e026      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a5a:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <HAL_RCC_OscConfig+0x4c4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f0      	bne.n	8006a48 <HAL_RCC_OscConfig+0x498>
 8006a66:	e01e      	b.n	8006aa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d107      	bne.n	8006a80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e019      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
 8006a74:	40021000 	.word	0x40021000
 8006a78:	40007000 	.word	0x40007000
 8006a7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a80:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab0 <HAL_RCC_OscConfig+0x500>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d106      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d001      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40021000 	.word	0x40021000

08006ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0d0      	b.n	8006c6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8006c74 <HAL_RCC_ClockConfig+0x1c0>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d910      	bls.n	8006af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ad6:	4b67      	ldr	r3, [pc, #412]	@ (8006c74 <HAL_RCC_ClockConfig+0x1c0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f023 0207 	bic.w	r2, r3, #7
 8006ade:	4965      	ldr	r1, [pc, #404]	@ (8006c74 <HAL_RCC_ClockConfig+0x1c0>)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ae6:	4b63      	ldr	r3, [pc, #396]	@ (8006c74 <HAL_RCC_ClockConfig+0x1c0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d001      	beq.n	8006af8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e0b8      	b.n	8006c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d020      	beq.n	8006b46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b10:	4b59      	ldr	r3, [pc, #356]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	4a58      	ldr	r2, [pc, #352]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006b16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0308 	and.w	r3, r3, #8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d005      	beq.n	8006b34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b28:	4b53      	ldr	r3, [pc, #332]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	4a52      	ldr	r2, [pc, #328]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006b2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006b32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b34:	4b50      	ldr	r3, [pc, #320]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	494d      	ldr	r1, [pc, #308]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d040      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d107      	bne.n	8006b6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b5a:	4b47      	ldr	r3, [pc, #284]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d115      	bne.n	8006b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e07f      	b.n	8006c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d107      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b72:	4b41      	ldr	r3, [pc, #260]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e073      	b.n	8006c6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b82:	4b3d      	ldr	r3, [pc, #244]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e06b      	b.n	8006c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b92:	4b39      	ldr	r3, [pc, #228]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f023 0203 	bic.w	r2, r3, #3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	4936      	ldr	r1, [pc, #216]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ba4:	f7fd f81a 	bl	8003bdc <HAL_GetTick>
 8006ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006baa:	e00a      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bac:	f7fd f816 	bl	8003bdc <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e053      	b.n	8006c6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f003 020c 	and.w	r2, r3, #12
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d1eb      	bne.n	8006bac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bd4:	4b27      	ldr	r3, [pc, #156]	@ (8006c74 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d210      	bcs.n	8006c04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006be2:	4b24      	ldr	r3, [pc, #144]	@ (8006c74 <HAL_RCC_ClockConfig+0x1c0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f023 0207 	bic.w	r2, r3, #7
 8006bea:	4922      	ldr	r1, [pc, #136]	@ (8006c74 <HAL_RCC_ClockConfig+0x1c0>)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf2:	4b20      	ldr	r3, [pc, #128]	@ (8006c74 <HAL_RCC_ClockConfig+0x1c0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d001      	beq.n	8006c04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e032      	b.n	8006c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d008      	beq.n	8006c22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c10:	4b19      	ldr	r3, [pc, #100]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	4916      	ldr	r1, [pc, #88]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0308 	and.w	r3, r3, #8
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d009      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c2e:	4b12      	ldr	r3, [pc, #72]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	490e      	ldr	r1, [pc, #56]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c42:	f000 f821 	bl	8006c88 <HAL_RCC_GetSysClockFreq>
 8006c46:	4602      	mov	r2, r0
 8006c48:	4b0b      	ldr	r3, [pc, #44]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	091b      	lsrs	r3, r3, #4
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	490a      	ldr	r1, [pc, #40]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c54:	5ccb      	ldrb	r3, [r1, r3]
 8006c56:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5a:	4a09      	ldr	r2, [pc, #36]	@ (8006c80 <HAL_RCC_ClockConfig+0x1cc>)
 8006c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c5e:	4b09      	ldr	r3, [pc, #36]	@ (8006c84 <HAL_RCC_ClockConfig+0x1d0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fc ff78 	bl	8003b58 <HAL_InitTick>

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40022000 	.word	0x40022000
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	0800da24 	.word	0x0800da24
 8006c80:	20000028 	.word	0x20000028
 8006c84:	2000002c 	.word	0x2000002c

08006c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c88:	b490      	push	{r4, r7}
 8006c8a:	b08a      	sub	sp, #40	@ 0x28
 8006c8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c8e:	4b29      	ldr	r3, [pc, #164]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xac>)
 8006c90:	1d3c      	adds	r4, r7, #4
 8006c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006c98:	f240 2301 	movw	r3, #513	@ 0x201
 8006c9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61fb      	str	r3, [r7, #28]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006cb2:	4b21      	ldr	r3, [pc, #132]	@ (8006d38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f003 030c 	and.w	r3, r3, #12
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d002      	beq.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	d003      	beq.n	8006cce <HAL_RCC_GetSysClockFreq+0x46>
 8006cc6:	e02b      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8006d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006cca:	623b      	str	r3, [r7, #32]
      break;
 8006ccc:	e02b      	b.n	8006d26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	0c9b      	lsrs	r3, r3, #18
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	3328      	adds	r3, #40	@ 0x28
 8006cd8:	443b      	add	r3, r7
 8006cda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006cde:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d012      	beq.n	8006d10 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006cea:	4b13      	ldr	r3, [pc, #76]	@ (8006d38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	0c5b      	lsrs	r3, r3, #17
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	3328      	adds	r3, #40	@ 0x28
 8006cf6:	443b      	add	r3, r7
 8006cf8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006cfc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	4a0e      	ldr	r2, [pc, #56]	@ (8006d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d02:	fb03 f202 	mul.w	r2, r3, r2
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d0e:	e004      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4a0b      	ldr	r2, [pc, #44]	@ (8006d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d14:	fb02 f303 	mul.w	r3, r2, r3
 8006d18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	623b      	str	r3, [r7, #32]
      break;
 8006d1e:	e002      	b.n	8006d26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d20:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d22:	623b      	str	r3, [r7, #32]
      break;
 8006d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d26:	6a3b      	ldr	r3, [r7, #32]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3728      	adds	r7, #40	@ 0x28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bc90      	pop	{r4, r7}
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	0800d9bc 	.word	0x0800d9bc
 8006d38:	40021000 	.word	0x40021000
 8006d3c:	007a1200 	.word	0x007a1200
 8006d40:	003d0900 	.word	0x003d0900

08006d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d48:	4b02      	ldr	r3, [pc, #8]	@ (8006d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bc80      	pop	{r7}
 8006d52:	4770      	bx	lr
 8006d54:	20000028 	.word	0x20000028

08006d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d5c:	f7ff fff2 	bl	8006d44 <HAL_RCC_GetHCLKFreq>
 8006d60:	4602      	mov	r2, r0
 8006d62:	4b05      	ldr	r3, [pc, #20]	@ (8006d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	4903      	ldr	r1, [pc, #12]	@ (8006d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d6e:	5ccb      	ldrb	r3, [r1, r3]
 8006d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	0800da34 	.word	0x0800da34

08006d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d84:	f7ff ffde 	bl	8006d44 <HAL_RCC_GetHCLKFreq>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	4b05      	ldr	r3, [pc, #20]	@ (8006da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	0adb      	lsrs	r3, r3, #11
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	4903      	ldr	r1, [pc, #12]	@ (8006da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d96:	5ccb      	ldrb	r3, [r1, r3]
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	40021000 	.word	0x40021000
 8006da4:	0800da34 	.word	0x0800da34

08006da8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006db0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ddc <RCC_Delay+0x34>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a0a      	ldr	r2, [pc, #40]	@ (8006de0 <RCC_Delay+0x38>)
 8006db6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dba:	0a5b      	lsrs	r3, r3, #9
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006dc4:	bf00      	nop
  }
  while (Delay --);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1e5a      	subs	r2, r3, #1
 8006dca:	60fa      	str	r2, [r7, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1f9      	bne.n	8006dc4 <RCC_Delay+0x1c>
}
 8006dd0:	bf00      	nop
 8006dd2:	bf00      	nop
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr
 8006ddc:	20000028 	.word	0x20000028
 8006de0:	10624dd3 	.word	0x10624dd3

08006de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d07d      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006e00:	2300      	movs	r3, #0
 8006e02:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e04:	4b4f      	ldr	r3, [pc, #316]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10d      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e10:	4b4c      	ldr	r3, [pc, #304]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	4a4b      	ldr	r2, [pc, #300]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e1a:	61d3      	str	r3, [r2, #28]
 8006e1c:	4b49      	ldr	r3, [pc, #292]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e24:	60bb      	str	r3, [r7, #8]
 8006e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e2c:	4b46      	ldr	r3, [pc, #280]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d118      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e38:	4b43      	ldr	r3, [pc, #268]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a42      	ldr	r2, [pc, #264]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e44:	f7fc feca 	bl	8003bdc <HAL_GetTick>
 8006e48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e4a:	e008      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4c:	f7fc fec6 	bl	8003bdc <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b64      	cmp	r3, #100	@ 0x64
 8006e58:	d901      	bls.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e06d      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f0      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e6a:	4b36      	ldr	r3, [pc, #216]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d02e      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d027      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e88:	4b2e      	ldr	r3, [pc, #184]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e92:	4b2e      	ldr	r3, [pc, #184]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e98:	4b2c      	ldr	r3, [pc, #176]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006e9e:	4a29      	ldr	r2, [pc, #164]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d014      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eae:	f7fc fe95 	bl	8003bdc <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb4:	e00a      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eb6:	f7fc fe91 	bl	8003bdc <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e036      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0ee      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	4917      	ldr	r1, [pc, #92]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d105      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ef0:	4b14      	ldr	r3, [pc, #80]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	4a13      	ldr	r2, [pc, #76]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006efa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d008      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f08:	4b0e      	ldr	r3, [pc, #56]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	490b      	ldr	r1, [pc, #44]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0310 	and.w	r3, r3, #16
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d008      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f26:	4b07      	ldr	r3, [pc, #28]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	4904      	ldr	r1, [pc, #16]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	40021000 	.word	0x40021000
 8006f48:	40007000 	.word	0x40007000
 8006f4c:	42420440 	.word	0x42420440

08006f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e076      	b.n	8007050 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d108      	bne.n	8006f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f72:	d009      	beq.n	8006f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	61da      	str	r2, [r3, #28]
 8006f7a:	e005      	b.n	8006f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d106      	bne.n	8006fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fc fc50 	bl	8003848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800700c:	ea42 0103 	orr.w	r1, r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	0c1a      	lsrs	r2, r3, #16
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f002 0204 	and.w	r2, r2, #4
 800702e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	69da      	ldr	r2, [r3, #28]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800703e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08c      	sub	sp, #48	@ 0x30
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007066:	2301      	movs	r3, #1
 8007068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007076:	2b01      	cmp	r3, #1
 8007078:	d101      	bne.n	800707e <HAL_SPI_TransmitReceive+0x26>
 800707a:	2302      	movs	r3, #2
 800707c:	e18a      	b.n	8007394 <HAL_SPI_TransmitReceive+0x33c>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007086:	f7fc fda9 	bl	8003bdc <HAL_GetTick>
 800708a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800709c:	887b      	ldrh	r3, [r7, #2]
 800709e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d00f      	beq.n	80070c8 <HAL_SPI_TransmitReceive+0x70>
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070ae:	d107      	bne.n	80070c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d103      	bne.n	80070c0 <HAL_SPI_TransmitReceive+0x68>
 80070b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d003      	beq.n	80070c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80070c0:	2302      	movs	r3, #2
 80070c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80070c6:	e15b      	b.n	8007380 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_SPI_TransmitReceive+0x82>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <HAL_SPI_TransmitReceive+0x82>
 80070d4:	887b      	ldrh	r3, [r7, #2]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80070e0:	e14e      	b.n	8007380 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d003      	beq.n	80070f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2205      	movs	r2, #5
 80070f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	887a      	ldrh	r2, [r7, #2]
 8007106:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	887a      	ldrh	r2, [r7, #2]
 800710c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	887a      	ldrh	r2, [r7, #2]
 8007118:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	887a      	ldrh	r2, [r7, #2]
 800711e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007136:	2b40      	cmp	r3, #64	@ 0x40
 8007138:	d007      	beq.n	800714a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007152:	d178      	bne.n	8007246 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <HAL_SPI_TransmitReceive+0x10a>
 800715c:	8b7b      	ldrh	r3, [r7, #26]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d166      	bne.n	8007230 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007166:	881a      	ldrh	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007172:	1c9a      	adds	r2, r3, #2
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007186:	e053      	b.n	8007230 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b02      	cmp	r3, #2
 8007194:	d11b      	bne.n	80071ce <HAL_SPI_TransmitReceive+0x176>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800719a:	b29b      	uxth	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d016      	beq.n	80071ce <HAL_SPI_TransmitReceive+0x176>
 80071a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d113      	bne.n	80071ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071aa:	881a      	ldrh	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b6:	1c9a      	adds	r2, r3, #2
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	3b01      	subs	r3, #1
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d119      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x1b8>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d014      	beq.n	8007210 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f0:	b292      	uxth	r2, r2
 80071f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f8:	1c9a      	adds	r2, r3, #2
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b01      	subs	r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800720c:	2301      	movs	r3, #1
 800720e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007210:	f7fc fce4 	bl	8003bdc <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800721c:	429a      	cmp	r2, r3
 800721e:	d807      	bhi.n	8007230 <HAL_SPI_TransmitReceive+0x1d8>
 8007220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d003      	beq.n	8007230 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800722e:	e0a7      	b.n	8007380 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1a6      	bne.n	8007188 <HAL_SPI_TransmitReceive+0x130>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1a1      	bne.n	8007188 <HAL_SPI_TransmitReceive+0x130>
 8007244:	e07c      	b.n	8007340 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <HAL_SPI_TransmitReceive+0x1fc>
 800724e:	8b7b      	ldrh	r3, [r7, #26]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d16b      	bne.n	800732c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	330c      	adds	r3, #12
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007270:	b29b      	uxth	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800727a:	e057      	b.n	800732c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b02      	cmp	r3, #2
 8007288:	d11c      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0x26c>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d017      	beq.n	80072c4 <HAL_SPI_TransmitReceive+0x26c>
 8007294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007296:	2b01      	cmp	r3, #1
 8007298:	d114      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	330c      	adds	r3, #12
 80072a4:	7812      	ldrb	r2, [r2, #0]
 80072a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d119      	bne.n	8007306 <HAL_SPI_TransmitReceive+0x2ae>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d014      	beq.n	8007306 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007302:	2301      	movs	r3, #1
 8007304:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007306:	f7fc fc69 	bl	8003bdc <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007312:	429a      	cmp	r2, r3
 8007314:	d803      	bhi.n	800731e <HAL_SPI_TransmitReceive+0x2c6>
 8007316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731c:	d102      	bne.n	8007324 <HAL_SPI_TransmitReceive+0x2cc>
 800731e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007320:	2b00      	cmp	r3, #0
 8007322:	d103      	bne.n	800732c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800732a:	e029      	b.n	8007380 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1a2      	bne.n	800727c <HAL_SPI_TransmitReceive+0x224>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d19d      	bne.n	800727c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007342:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f8b1 	bl	80074ac <SPI_EndRxTxTransaction>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d006      	beq.n	800735e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2220      	movs	r2, #32
 800735a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800735c:	e010      	b.n	8007380 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10b      	bne.n	800737e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	e000      	b.n	8007380 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800737e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007390:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007394:	4618      	mov	r0, r3
 8007396:	3730      	adds	r7, #48	@ 0x30
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	4613      	mov	r3, r2
 80073aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073ac:	f7fc fc16 	bl	8003bdc <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b4:	1a9b      	subs	r3, r3, r2
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	4413      	add	r3, r2
 80073ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073bc:	f7fc fc0e 	bl	8003bdc <HAL_GetTick>
 80073c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073c2:	4b39      	ldr	r3, [pc, #228]	@ (80074a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	015b      	lsls	r3, r3, #5
 80073c8:	0d1b      	lsrs	r3, r3, #20
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	fb02 f303 	mul.w	r3, r2, r3
 80073d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073d2:	e054      	b.n	800747e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073da:	d050      	beq.n	800747e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073dc:	f7fc fbfe 	bl	8003bdc <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d902      	bls.n	80073f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d13d      	bne.n	800746e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800740a:	d111      	bne.n	8007430 <SPI_WaitFlagStateUntilTimeout+0x94>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007414:	d004      	beq.n	8007420 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800741e:	d107      	bne.n	8007430 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800742e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007438:	d10f      	bne.n	800745a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e017      	b.n	800749e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	3b01      	subs	r3, #1
 800747c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4013      	ands	r3, r2
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	429a      	cmp	r2, r3
 800748c:	bf0c      	ite	eq
 800748e:	2301      	moveq	r3, #1
 8007490:	2300      	movne	r3, #0
 8007492:	b2db      	uxtb	r3, r3
 8007494:	461a      	mov	r2, r3
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	429a      	cmp	r2, r3
 800749a:	d19b      	bne.n	80073d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3720      	adds	r7, #32
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000028 	.word	0x20000028

080074ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2200      	movs	r2, #0
 80074c0:	2180      	movs	r1, #128	@ 0x80
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff ff6a 	bl	800739c <SPI_WaitFlagStateUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d2:	f043 0220 	orr.w	r2, r3, #32
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e000      	b.n	80074e0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e041      	b.n	800757e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fc f9e4 	bl	80038dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3304      	adds	r3, #4
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f000 fa70 	bl	8007a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	d001      	beq.n	80075a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e03a      	b.n	8007616 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a18      	ldr	r2, [pc, #96]	@ (8007620 <HAL_TIM_Base_Start_IT+0x98>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00e      	beq.n	80075e0 <HAL_TIM_Base_Start_IT+0x58>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ca:	d009      	beq.n	80075e0 <HAL_TIM_Base_Start_IT+0x58>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a14      	ldr	r2, [pc, #80]	@ (8007624 <HAL_TIM_Base_Start_IT+0x9c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d004      	beq.n	80075e0 <HAL_TIM_Base_Start_IT+0x58>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a13      	ldr	r2, [pc, #76]	@ (8007628 <HAL_TIM_Base_Start_IT+0xa0>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d111      	bne.n	8007604 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b06      	cmp	r3, #6
 80075f0:	d010      	beq.n	8007614 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f042 0201 	orr.w	r2, r2, #1
 8007600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007602:	e007      	b.n	8007614 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0201 	orr.w	r2, r2, #1
 8007612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	bc80      	pop	{r7}
 800761e:	4770      	bx	lr
 8007620:	40012c00 	.word	0x40012c00
 8007624:	40000400 	.word	0x40000400
 8007628:	40000800 	.word	0x40000800

0800762c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b02      	cmp	r3, #2
 8007640:	d122      	bne.n	8007688 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b02      	cmp	r3, #2
 800764e:	d11b      	bne.n	8007688 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f06f 0202 	mvn.w	r2, #2
 8007658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f9b1 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 8007674:	e005      	b.n	8007682 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f9a4 	bl	80079c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f9b3 	bl	80079e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0304 	and.w	r3, r3, #4
 8007692:	2b04      	cmp	r3, #4
 8007694:	d122      	bne.n	80076dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d11b      	bne.n	80076dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0204 	mvn.w	r2, #4
 80076ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2202      	movs	r2, #2
 80076b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f987 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 80076c8:	e005      	b.n	80076d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f97a 	bl	80079c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f989 	bl	80079e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b08      	cmp	r3, #8
 80076e8:	d122      	bne.n	8007730 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0308 	and.w	r3, r3, #8
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d11b      	bne.n	8007730 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0208 	mvn.w	r2, #8
 8007700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2204      	movs	r2, #4
 8007706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f95d 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 800771c:	e005      	b.n	800772a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f950 	bl	80079c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f95f 	bl	80079e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f003 0310 	and.w	r3, r3, #16
 800773a:	2b10      	cmp	r3, #16
 800773c:	d122      	bne.n	8007784 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b10      	cmp	r3, #16
 800774a:	d11b      	bne.n	8007784 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f06f 0210 	mvn.w	r2, #16
 8007754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2208      	movs	r2, #8
 800775a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f933 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 8007770:	e005      	b.n	800777e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f926 	bl	80079c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f935 	bl	80079e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b01      	cmp	r3, #1
 8007790:	d10e      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b01      	cmp	r3, #1
 800779e:	d107      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0201 	mvn.w	r2, #1
 80077a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7f9 fa6e 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ba:	2b80      	cmp	r3, #128	@ 0x80
 80077bc:	d10e      	bne.n	80077dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077c8:	2b80      	cmp	r3, #128	@ 0x80
 80077ca:	d107      	bne.n	80077dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80077d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa77 	bl	8007cca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e6:	2b40      	cmp	r3, #64	@ 0x40
 80077e8:	d10e      	bne.n	8007808 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f4:	2b40      	cmp	r3, #64	@ 0x40
 80077f6:	d107      	bne.n	8007808 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f8f9 	bl	80079fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b20      	cmp	r3, #32
 8007814:	d10e      	bne.n	8007834 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b20      	cmp	r3, #32
 8007822:	d107      	bne.n	8007834 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f06f 0220 	mvn.w	r2, #32
 800782c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa42 	bl	8007cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007834:	bf00      	nop
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_TIM_ConfigClockSource+0x18>
 8007850:	2302      	movs	r3, #2
 8007852:	e0b3      	b.n	80079bc <HAL_TIM_ConfigClockSource+0x180>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007872:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800787a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800788c:	d03e      	beq.n	800790c <HAL_TIM_ConfigClockSource+0xd0>
 800788e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007892:	f200 8087 	bhi.w	80079a4 <HAL_TIM_ConfigClockSource+0x168>
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800789a:	f000 8085 	beq.w	80079a8 <HAL_TIM_ConfigClockSource+0x16c>
 800789e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078a2:	d87f      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x168>
 80078a4:	2b70      	cmp	r3, #112	@ 0x70
 80078a6:	d01a      	beq.n	80078de <HAL_TIM_ConfigClockSource+0xa2>
 80078a8:	2b70      	cmp	r3, #112	@ 0x70
 80078aa:	d87b      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x168>
 80078ac:	2b60      	cmp	r3, #96	@ 0x60
 80078ae:	d050      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0x116>
 80078b0:	2b60      	cmp	r3, #96	@ 0x60
 80078b2:	d877      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x168>
 80078b4:	2b50      	cmp	r3, #80	@ 0x50
 80078b6:	d03c      	beq.n	8007932 <HAL_TIM_ConfigClockSource+0xf6>
 80078b8:	2b50      	cmp	r3, #80	@ 0x50
 80078ba:	d873      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x168>
 80078bc:	2b40      	cmp	r3, #64	@ 0x40
 80078be:	d058      	beq.n	8007972 <HAL_TIM_ConfigClockSource+0x136>
 80078c0:	2b40      	cmp	r3, #64	@ 0x40
 80078c2:	d86f      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x168>
 80078c4:	2b30      	cmp	r3, #48	@ 0x30
 80078c6:	d064      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x156>
 80078c8:	2b30      	cmp	r3, #48	@ 0x30
 80078ca:	d86b      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x168>
 80078cc:	2b20      	cmp	r3, #32
 80078ce:	d060      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x156>
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d867      	bhi.n	80079a4 <HAL_TIM_ConfigClockSource+0x168>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d05c      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x156>
 80078d8:	2b10      	cmp	r3, #16
 80078da:	d05a      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80078dc:	e062      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6899      	ldr	r1, [r3, #8]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f000 f966 	bl	8007bbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007900:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	609a      	str	r2, [r3, #8]
      break;
 800790a:	e04e      	b.n	80079aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	6899      	ldr	r1, [r3, #8]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f000 f94f 	bl	8007bbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800792e:	609a      	str	r2, [r3, #8]
      break;
 8007930:	e03b      	b.n	80079aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6859      	ldr	r1, [r3, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	461a      	mov	r2, r3
 8007940:	f000 f8c6 	bl	8007ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2150      	movs	r1, #80	@ 0x50
 800794a:	4618      	mov	r0, r3
 800794c:	f000 f91d 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 8007950:	e02b      	b.n	80079aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6859      	ldr	r1, [r3, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	461a      	mov	r2, r3
 8007960:	f000 f8e4 	bl	8007b2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2160      	movs	r1, #96	@ 0x60
 800796a:	4618      	mov	r0, r3
 800796c:	f000 f90d 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 8007970:	e01b      	b.n	80079aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	6859      	ldr	r1, [r3, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	461a      	mov	r2, r3
 8007980:	f000 f8a6 	bl	8007ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2140      	movs	r1, #64	@ 0x40
 800798a:	4618      	mov	r0, r3
 800798c:	f000 f8fd 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 8007990:	e00b      	b.n	80079aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f000 f8f4 	bl	8007b8a <TIM_ITRx_SetConfig>
        break;
 80079a2:	e002      	b.n	80079aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80079a4:	bf00      	nop
 80079a6:	e000      	b.n	80079aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80079a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bc80      	pop	{r7}
 80079d4:	4770      	bx	lr

080079d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bc80      	pop	{r7}
 80079e6:	4770      	bx	lr

080079e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bc80      	pop	{r7}
 80079f8:	4770      	bx	lr

080079fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr

08007a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a29      	ldr	r2, [pc, #164]	@ (8007ac4 <TIM_Base_SetConfig+0xb8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00b      	beq.n	8007a3c <TIM_Base_SetConfig+0x30>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a2a:	d007      	beq.n	8007a3c <TIM_Base_SetConfig+0x30>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a26      	ldr	r2, [pc, #152]	@ (8007ac8 <TIM_Base_SetConfig+0xbc>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d003      	beq.n	8007a3c <TIM_Base_SetConfig+0x30>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a25      	ldr	r2, [pc, #148]	@ (8007acc <TIM_Base_SetConfig+0xc0>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d108      	bne.n	8007a4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a1c      	ldr	r2, [pc, #112]	@ (8007ac4 <TIM_Base_SetConfig+0xb8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00b      	beq.n	8007a6e <TIM_Base_SetConfig+0x62>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a5c:	d007      	beq.n	8007a6e <TIM_Base_SetConfig+0x62>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a19      	ldr	r2, [pc, #100]	@ (8007ac8 <TIM_Base_SetConfig+0xbc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <TIM_Base_SetConfig+0x62>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <TIM_Base_SetConfig+0xc0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d108      	bne.n	8007a80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a07      	ldr	r2, [pc, #28]	@ (8007ac4 <TIM_Base_SetConfig+0xb8>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d103      	bne.n	8007ab4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	615a      	str	r2, [r3, #20]
}
 8007aba:	bf00      	nop
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr
 8007ac4:	40012c00 	.word	0x40012c00
 8007ac8:	40000400 	.word	0x40000400
 8007acc:	40000800 	.word	0x40000800

08007ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	f023 0201 	bic.w	r2, r3, #1
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f023 030a 	bic.w	r3, r3, #10
 8007b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	bf00      	nop
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr

08007b2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	f023 0210 	bic.w	r2, r3, #16
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	031b      	lsls	r3, r3, #12
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	621a      	str	r2, [r3, #32]
}
 8007b80:	bf00      	nop
 8007b82:	371c      	adds	r7, #28
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr

08007b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f043 0307 	orr.w	r3, r3, #7
 8007bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	609a      	str	r2, [r3, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr

08007bbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b087      	sub	sp, #28
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	607a      	str	r2, [r7, #4]
 8007bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	021a      	lsls	r2, r3, #8
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	431a      	orrs	r2, r3
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	609a      	str	r2, [r3, #8]
}
 8007bf2:	bf00      	nop
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr

08007bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d101      	bne.n	8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c10:	2302      	movs	r3, #2
 8007c12:	e046      	b.n	8007ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a16      	ldr	r2, [pc, #88]	@ (8007cac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00e      	beq.n	8007c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c60:	d009      	beq.n	8007c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a12      	ldr	r2, [pc, #72]	@ (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d004      	beq.n	8007c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a10      	ldr	r2, [pc, #64]	@ (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d10c      	bne.n	8007c90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr
 8007cac:	40012c00 	.word	0x40012c00
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800

08007cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr

08007cca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr

08007cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e03f      	b.n	8007d6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d106      	bne.n	8007d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7fb fe0e 	bl	8003924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2224      	movs	r2, #36	@ 0x24
 8007d0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f9a3 	bl	800806c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691a      	ldr	r2, [r3, #16]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	695a      	ldr	r2, [r3, #20]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b08a      	sub	sp, #40	@ 0x28
 8007d7a:	af02      	add	r7, sp, #8
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	603b      	str	r3, [r7, #0]
 8007d82:	4613      	mov	r3, r2
 8007d84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	d17c      	bne.n	8007e90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <HAL_UART_Transmit+0x2c>
 8007d9c:	88fb      	ldrh	r3, [r7, #6]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e075      	b.n	8007e92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_UART_Transmit+0x3e>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e06e      	b.n	8007e92 <HAL_UART_Transmit+0x11c>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2221      	movs	r2, #33	@ 0x21
 8007dc6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007dca:	f7fb ff07 	bl	8003bdc <HAL_GetTick>
 8007dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	88fa      	ldrh	r2, [r7, #6]
 8007dd4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007de4:	d108      	bne.n	8007df8 <HAL_UART_Transmit+0x82>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d104      	bne.n	8007df8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	61bb      	str	r3, [r7, #24]
 8007df6:	e003      	b.n	8007e00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8007e08:	e02a      	b.n	8007e60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2200      	movs	r2, #0
 8007e12:	2180      	movs	r1, #128	@ 0x80
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f8df 	bl	8007fd8 <UART_WaitOnFlagUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e036      	b.n	8007e92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10b      	bne.n	8007e42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	e007      	b.n	8007e52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	781a      	ldrb	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1cf      	bne.n	8007e0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2200      	movs	r2, #0
 8007e72:	2140      	movs	r1, #64	@ 0x40
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 f8af 	bl	8007fd8 <UART_WaitOnFlagUntilTimeout>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e006      	b.n	8007e92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2220      	movs	r2, #32
 8007e88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	e000      	b.n	8007e92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007e90:	2302      	movs	r3, #2
  }
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b08a      	sub	sp, #40	@ 0x28
 8007e9e:	af02      	add	r7, sp, #8
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	603b      	str	r3, [r7, #0]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b20      	cmp	r3, #32
 8007eb8:	f040 8089 	bne.w	8007fce <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <HAL_UART_Receive+0x2e>
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e081      	b.n	8007fd0 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_UART_Receive+0x40>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e07a      	b.n	8007fd0 <HAL_UART_Receive+0x136>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2222      	movs	r2, #34	@ 0x22
 8007eec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007ef0:	f7fb fe74 	bl	8003bdc <HAL_GetTick>
 8007ef4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	88fa      	ldrh	r2, [r7, #6]
 8007efa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	88fa      	ldrh	r2, [r7, #6]
 8007f00:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f0a:	d108      	bne.n	8007f1e <HAL_UART_Receive+0x84>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d104      	bne.n	8007f1e <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	61bb      	str	r3, [r7, #24]
 8007f1c:	e003      	b.n	8007f26 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007f2e:	e043      	b.n	8007fb8 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2200      	movs	r2, #0
 8007f38:	2120      	movs	r1, #32
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 f84c 	bl	8007fd8 <UART_WaitOnFlagUntilTimeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e042      	b.n	8007fd0 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10c      	bne.n	8007f6a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	3302      	adds	r3, #2
 8007f66:	61bb      	str	r3, [r7, #24]
 8007f68:	e01f      	b.n	8007faa <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f72:	d007      	beq.n	8007f84 <HAL_UART_Receive+0xea>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <HAL_UART_Receive+0xf8>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	e008      	b.n	8007fa4 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1b6      	bne.n	8007f30 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e000      	b.n	8007fd0 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007fce:	2302      	movs	r3, #2
  }
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3720      	adds	r7, #32
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe8:	e02c      	b.n	8008044 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff0:	d028      	beq.n	8008044 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d007      	beq.n	8008008 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ff8:	f7fb fdf0 	bl	8003bdc <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	429a      	cmp	r2, r3
 8008006:	d21d      	bcs.n	8008044 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8008016:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695a      	ldr	r2, [r3, #20]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0201 	bic.w	r2, r2, #1
 8008026:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2220      	movs	r2, #32
 800802c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e00f      	b.n	8008064 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	4013      	ands	r3, r2
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	429a      	cmp	r2, r3
 8008052:	bf0c      	ite	eq
 8008054:	2301      	moveq	r3, #1
 8008056:	2300      	movne	r3, #0
 8008058:	b2db      	uxtb	r3, r3
 800805a:	461a      	mov	r2, r3
 800805c:	79fb      	ldrb	r3, [r7, #7]
 800805e:	429a      	cmp	r2, r3
 8008060:	d0c3      	beq.n	8007fea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	4313      	orrs	r3, r2
 800809a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80080a6:	f023 030c 	bic.w	r3, r3, #12
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	6812      	ldr	r2, [r2, #0]
 80080ae:	68b9      	ldr	r1, [r7, #8]
 80080b0:	430b      	orrs	r3, r1
 80080b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008180 <UART_SetConfig+0x114>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d103      	bne.n	80080dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80080d4:	f7fe fe54 	bl	8006d80 <HAL_RCC_GetPCLK2Freq>
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	e002      	b.n	80080e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80080dc:	f7fe fe3c 	bl	8006d58 <HAL_RCC_GetPCLK1Freq>
 80080e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009a      	lsls	r2, r3, #2
 80080ec:	441a      	add	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f8:	4a22      	ldr	r2, [pc, #136]	@ (8008184 <UART_SetConfig+0x118>)
 80080fa:	fba2 2303 	umull	r2, r3, r2, r3
 80080fe:	095b      	lsrs	r3, r3, #5
 8008100:	0119      	lsls	r1, r3, #4
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	009a      	lsls	r2, r3, #2
 800810c:	441a      	add	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	fbb2 f2f3 	udiv	r2, r2, r3
 8008118:	4b1a      	ldr	r3, [pc, #104]	@ (8008184 <UART_SetConfig+0x118>)
 800811a:	fba3 0302 	umull	r0, r3, r3, r2
 800811e:	095b      	lsrs	r3, r3, #5
 8008120:	2064      	movs	r0, #100	@ 0x64
 8008122:	fb00 f303 	mul.w	r3, r0, r3
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	011b      	lsls	r3, r3, #4
 800812a:	3332      	adds	r3, #50	@ 0x32
 800812c:	4a15      	ldr	r2, [pc, #84]	@ (8008184 <UART_SetConfig+0x118>)
 800812e:	fba2 2303 	umull	r2, r3, r2, r3
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008138:	4419      	add	r1, r3
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009a      	lsls	r2, r3, #2
 8008144:	441a      	add	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008150:	4b0c      	ldr	r3, [pc, #48]	@ (8008184 <UART_SetConfig+0x118>)
 8008152:	fba3 0302 	umull	r0, r3, r3, r2
 8008156:	095b      	lsrs	r3, r3, #5
 8008158:	2064      	movs	r0, #100	@ 0x64
 800815a:	fb00 f303 	mul.w	r3, r0, r3
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	011b      	lsls	r3, r3, #4
 8008162:	3332      	adds	r3, #50	@ 0x32
 8008164:	4a07      	ldr	r2, [pc, #28]	@ (8008184 <UART_SetConfig+0x118>)
 8008166:	fba2 2303 	umull	r2, r3, r2, r3
 800816a:	095b      	lsrs	r3, r3, #5
 800816c:	f003 020f 	and.w	r2, r3, #15
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	440a      	add	r2, r1
 8008176:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008178:	bf00      	nop
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40013800 	.word	0x40013800
 8008184:	51eb851f 	.word	0x51eb851f

08008188 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008188:	b084      	sub	sp, #16
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	f107 0014 	add.w	r0, r7, #20
 8008196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	b004      	add	sp, #16
 80081a6:	4770      	bx	lr

080081a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081b8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80081bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr

080081d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081dc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80081e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	43db      	mvns	r3, r3
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	4013      	ands	r3, r2
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr

08008208 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	bc80      	pop	{r7}
 800821e:	4770      	bx	lr

08008220 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008220:	b084      	sub	sp, #16
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	f107 0014 	add.w	r0, r7, #20
 800822e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	b004      	add	sp, #16
 800825e:	4770      	bx	lr

08008260 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008260:	b480      	push	{r7}
 8008262:	b09b      	sub	sp, #108	@ 0x6c
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	b29b      	uxth	r3, r3
 800827e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008286:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	78db      	ldrb	r3, [r3, #3]
 800828e:	2b03      	cmp	r3, #3
 8008290:	d81f      	bhi.n	80082d2 <USB_ActivateEndpoint+0x72>
 8008292:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <USB_ActivateEndpoint+0x38>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082c5 	.word	0x080082c5
 80082a0:	080082db 	.word	0x080082db
 80082a4:	080082b7 	.word	0x080082b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80082a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80082ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80082b0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 80082b4:	e012      	b.n	80082dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80082b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80082ba:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80082be:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 80082c2:	e00b      	b.n	80082dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80082c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80082c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80082cc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 80082d0:	e004      	b.n	80082dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 80082d8:	e000      	b.n	80082dc <USB_ActivateEndpoint+0x7c>
      break;
 80082da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	441a      	add	r2, r3
 80082e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80082ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008314:	b29b      	uxth	r3, r3
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	7812      	ldrb	r2, [r2, #0]
 800831a:	4313      	orrs	r3, r2
 800831c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	441a      	add	r2, r3
 800832a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800832e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008332:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800833a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800833e:	b29b      	uxth	r3, r3
 8008340:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	7b1b      	ldrb	r3, [r3, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	f040 8149 	bne.w	80085de <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	785b      	ldrb	r3, [r3, #1]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 8084 	beq.w	800845e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	617b      	str	r3, [r7, #20]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008360:	b29b      	uxth	r3, r3
 8008362:	461a      	mov	r2, r3
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	4413      	add	r3, r2
 8008368:	617b      	str	r3, [r7, #20]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	011a      	lsls	r2, r3, #4
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008378:	613b      	str	r3, [r7, #16]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	88db      	ldrh	r3, [r3, #6]
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	b29b      	uxth	r3, r3
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	b29a      	uxth	r2, r3
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	81fb      	strh	r3, [r7, #14]
 8008398:	89fb      	ldrh	r3, [r7, #14]
 800839a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01b      	beq.n	80083da <USB_ActivateEndpoint+0x17a>
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083b8:	81bb      	strh	r3, [r7, #12]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	441a      	add	r2, r3
 80083c4:	89bb      	ldrh	r3, [r7, #12]
 80083c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	78db      	ldrb	r3, [r3, #3]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d020      	beq.n	8008424 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083f8:	813b      	strh	r3, [r7, #8]
 80083fa:	893b      	ldrh	r3, [r7, #8]
 80083fc:	f083 0320 	eor.w	r3, r3, #32
 8008400:	813b      	strh	r3, [r7, #8]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	441a      	add	r2, r3
 800840c:	893b      	ldrh	r3, [r7, #8]
 800840e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800841a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800841e:	b29b      	uxth	r3, r3
 8008420:	8013      	strh	r3, [r2, #0]
 8008422:	e27f      	b.n	8008924 <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29b      	uxth	r3, r3
 8008432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800843a:	817b      	strh	r3, [r7, #10]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	441a      	add	r2, r3
 8008446:	897b      	ldrh	r3, [r7, #10]
 8008448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800844c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008450:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008458:	b29b      	uxth	r3, r3
 800845a:	8013      	strh	r3, [r2, #0]
 800845c:	e262      	b.n	8008924 <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008468:	b29b      	uxth	r3, r3
 800846a:	461a      	mov	r2, r3
 800846c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846e:	4413      	add	r3, r2
 8008470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	011a      	lsls	r2, r3, #4
 8008478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847a:	4413      	add	r3, r2
 800847c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008480:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	88db      	ldrh	r3, [r3, #6]
 8008486:	085b      	lsrs	r3, r3, #1
 8008488:	b29b      	uxth	r3, r3
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	b29a      	uxth	r2, r3
 800848e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008490:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	627b      	str	r3, [r7, #36]	@ 0x24
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800849c:	b29b      	uxth	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a2:	4413      	add	r3, r2
 80084a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	011a      	lsls	r2, r3, #4
 80084ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ae:	4413      	add	r3, r2
 80084b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80084b4:	623b      	str	r3, [r7, #32]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d112      	bne.n	80084e4 <USB_ActivateEndpoint+0x284>
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084dc:	b29a      	uxth	r2, r3
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	801a      	strh	r2, [r3, #0]
 80084e2:	e02f      	b.n	8008544 <USB_ActivateEndpoint+0x2e4>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80084ea:	d813      	bhi.n	8008514 <USB_ActivateEndpoint+0x2b4>
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	085b      	lsrs	r3, r3, #1
 80084f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <USB_ActivateEndpoint+0x2a6>
 8008500:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008502:	3301      	adds	r3, #1
 8008504:	663b      	str	r3, [r7, #96]	@ 0x60
 8008506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008508:	b29b      	uxth	r3, r3
 800850a:	029b      	lsls	r3, r3, #10
 800850c:	b29a      	uxth	r2, r3
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	801a      	strh	r2, [r3, #0]
 8008512:	e017      	b.n	8008544 <USB_ActivateEndpoint+0x2e4>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	095b      	lsrs	r3, r3, #5
 800851a:	663b      	str	r3, [r7, #96]	@ 0x60
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	f003 031f 	and.w	r3, r3, #31
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <USB_ActivateEndpoint+0x2ce>
 8008528:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800852a:	3b01      	subs	r3, #1
 800852c:	663b      	str	r3, [r7, #96]	@ 0x60
 800852e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008530:	b29b      	uxth	r3, r3
 8008532:	029b      	lsls	r3, r3, #10
 8008534:	b29b      	uxth	r3, r3
 8008536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800853a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800853e:	b29a      	uxth	r2, r3
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	83fb      	strh	r3, [r7, #30]
 8008552:	8bfb      	ldrh	r3, [r7, #30]
 8008554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01b      	beq.n	8008594 <USB_ActivateEndpoint+0x334>
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	b29b      	uxth	r3, r3
 800856a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800856e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008572:	83bb      	strh	r3, [r7, #28]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	441a      	add	r2, r3
 800857e:	8bbb      	ldrh	r3, [r7, #28]
 8008580:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008584:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008588:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800858c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008590:	b29b      	uxth	r3, r3
 8008592:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085aa:	837b      	strh	r3, [r7, #26]
 80085ac:	8b7b      	ldrh	r3, [r7, #26]
 80085ae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80085b2:	837b      	strh	r3, [r7, #26]
 80085b4:	8b7b      	ldrh	r3, [r7, #26]
 80085b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80085ba:	837b      	strh	r3, [r7, #26]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	441a      	add	r2, r3
 80085c6:	8b7b      	ldrh	r3, [r7, #26]
 80085c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d8:	b29b      	uxth	r3, r3
 80085da:	8013      	strh	r3, [r2, #0]
 80085dc:	e1a2      	b.n	8008924 <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085f4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	441a      	add	r2, r3
 8008602:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800860a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800860e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008616:	b29b      	uxth	r3, r3
 8008618:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008624:	b29b      	uxth	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800862a:	4413      	add	r3, r2
 800862c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	011a      	lsls	r2, r3, #4
 8008634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008636:	4413      	add	r3, r2
 8008638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800863c:	657b      	str	r3, [r7, #84]	@ 0x54
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	891b      	ldrh	r3, [r3, #8]
 8008642:	085b      	lsrs	r3, r3, #1
 8008644:	b29b      	uxth	r3, r3
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	b29a      	uxth	r2, r3
 800864a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800864c:	801a      	strh	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	653b      	str	r3, [r7, #80]	@ 0x50
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008658:	b29b      	uxth	r3, r3
 800865a:	461a      	mov	r2, r3
 800865c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800865e:	4413      	add	r3, r2
 8008660:	653b      	str	r3, [r7, #80]	@ 0x50
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	011a      	lsls	r2, r3, #4
 8008668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800866a:	4413      	add	r3, r2
 800866c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008670:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	895b      	ldrh	r3, [r3, #10]
 8008676:	085b      	lsrs	r3, r3, #1
 8008678:	b29b      	uxth	r3, r3
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	b29a      	uxth	r2, r3
 800867e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008680:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	785b      	ldrb	r3, [r3, #1]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f040 8091 	bne.w	80087ae <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800869a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800869c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01b      	beq.n	80086dc <USB_ActivateEndpoint+0x47c>
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ba:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	441a      	add	r2, r3
 80086c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80086c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086d8:	b29b      	uxth	r3, r3
 80086da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80086ea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80086ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01b      	beq.n	800872c <USB_ActivateEndpoint+0x4cc>
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	b29b      	uxth	r3, r3
 8008702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800870a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	441a      	add	r2, r3
 8008716:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800871c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008724:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008728:	b29b      	uxth	r3, r3
 800872a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	b29b      	uxth	r3, r3
 800873a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800873e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008742:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008744:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008746:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800874a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800874c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800874e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008752:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	441a      	add	r2, r3
 800875e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800876c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008770:	b29b      	uxth	r3, r3
 8008772:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	b29b      	uxth	r3, r3
 8008782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800878a:	867b      	strh	r3, [r7, #50]	@ 0x32
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	441a      	add	r2, r3
 8008796:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800879c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	8013      	strh	r3, [r2, #0]
 80087ac:	e0ba      	b.n	8008924 <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80087be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80087c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d01d      	beq.n	8008806 <USB_ActivateEndpoint+0x5a6>
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087e0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	441a      	add	r2, r3
 80087ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80087f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008802:	b29b      	uxth	r3, r3
 8008804:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008816:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800881a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	d01d      	beq.n	800885e <USB_ActivateEndpoint+0x5fe>
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	b29b      	uxth	r3, r3
 8008830:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008838:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	441a      	add	r2, r3
 8008846:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800884a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800884e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008856:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800885a:	b29b      	uxth	r3, r3
 800885c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	78db      	ldrb	r3, [r3, #3]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d024      	beq.n	80088b0 <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800887c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008880:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008884:	f083 0320 	eor.w	r3, r3, #32
 8008888:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	441a      	add	r2, r3
 8008896:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800889a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800889e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	8013      	strh	r3, [r2, #0]
 80088ae:	e01d      	b.n	80088ec <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088c6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	441a      	add	r2, r3
 80088d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80088d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008902:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	441a      	add	r2, r3
 800890e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800891c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008920:	b29b      	uxth	r3, r3
 8008922:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008924:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008928:	4618      	mov	r0, r3
 800892a:	376c      	adds	r7, #108	@ 0x6c
 800892c:	46bd      	mov	sp, r7
 800892e:	bc80      	pop	{r7}
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop

08008934 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008934:	b480      	push	{r7}
 8008936:	b08d      	sub	sp, #52	@ 0x34
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	7b1b      	ldrb	r3, [r3, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	f040 808e 	bne.w	8008a64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	785b      	ldrb	r3, [r3, #1]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d044      	beq.n	80089da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	81bb      	strh	r3, [r7, #12]
 800895e:	89bb      	ldrh	r3, [r7, #12]
 8008960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01b      	beq.n	80089a0 <USB_DeactivateEndpoint+0x6c>
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800897a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800897e:	817b      	strh	r3, [r7, #10]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	441a      	add	r2, r3
 800898a:	897b      	ldrh	r3, [r7, #10]
 800898c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008998:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800899c:	b29b      	uxth	r3, r3
 800899e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089b6:	813b      	strh	r3, [r7, #8]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	441a      	add	r2, r3
 80089c2:	893b      	ldrh	r3, [r7, #8]
 80089c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	8013      	strh	r3, [r2, #0]
 80089d8:	e192      	b.n	8008d00 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	827b      	strh	r3, [r7, #18]
 80089e8:	8a7b      	ldrh	r3, [r7, #18]
 80089ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01b      	beq.n	8008a2a <USB_DeactivateEndpoint+0xf6>
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a08:	823b      	strh	r3, [r7, #16]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	441a      	add	r2, r3
 8008a14:	8a3b      	ldrh	r3, [r7, #16]
 8008a16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a40:	81fb      	strh	r3, [r7, #14]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	441a      	add	r2, r3
 8008a4c:	89fb      	ldrh	r3, [r7, #14]
 8008a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	8013      	strh	r3, [r2, #0]
 8008a62:	e14d      	b.n	8008d00 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	785b      	ldrb	r3, [r3, #1]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f040 80a5 	bne.w	8008bb8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	843b      	strh	r3, [r7, #32]
 8008a7c:	8c3b      	ldrh	r3, [r7, #32]
 8008a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d01b      	beq.n	8008abe <USB_DeactivateEndpoint+0x18a>
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a9c:	83fb      	strh	r3, [r7, #30]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	441a      	add	r2, r3
 8008aa8:	8bfb      	ldrh	r3, [r7, #30]
 8008aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ab2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	83bb      	strh	r3, [r7, #28]
 8008acc:	8bbb      	ldrh	r3, [r7, #28]
 8008ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01b      	beq.n	8008b0e <USB_DeactivateEndpoint+0x1da>
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aec:	837b      	strh	r3, [r7, #26]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	441a      	add	r2, r3
 8008af8:	8b7b      	ldrh	r3, [r7, #26]
 8008afa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008afe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b24:	833b      	strh	r3, [r7, #24]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	441a      	add	r2, r3
 8008b30:	8b3b      	ldrh	r3, [r7, #24]
 8008b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b5c:	82fb      	strh	r3, [r7, #22]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	441a      	add	r2, r3
 8008b68:	8afb      	ldrh	r3, [r7, #22]
 8008b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b94:	82bb      	strh	r3, [r7, #20]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	441a      	add	r2, r3
 8008ba0:	8abb      	ldrh	r3, [r7, #20]
 8008ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	8013      	strh	r3, [r2, #0]
 8008bb6:	e0a3      	b.n	8008d00 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008bc6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008bc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01b      	beq.n	8008c08 <USB_DeactivateEndpoint+0x2d4>
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008be6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	441a      	add	r2, r3
 8008bf2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008c16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01b      	beq.n	8008c58 <USB_DeactivateEndpoint+0x324>
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c36:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	441a      	add	r2, r3
 8008c42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	441a      	add	r2, r3
 8008c7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ca6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	441a      	add	r2, r3
 8008cb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cde:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	441a      	add	r2, r3
 8008cea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3734      	adds	r7, #52	@ 0x34
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr

08008d0c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b0c4      	sub	sp, #272	@ 0x110
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d1a:	6018      	str	r0, [r3, #0]
 8008d1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d24:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	785b      	ldrb	r3, [r3, #1]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	f040 86ec 	bne.w	8009b10 <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008d38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	699a      	ldr	r2, [r3, #24]
 8008d44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d908      	bls.n	8008d66 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008d54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008d64:	e007      	b.n	8008d76 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008d66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d6a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008d76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	7b1b      	ldrb	r3, [r3, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d142      	bne.n	8008e0c <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008d86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6959      	ldr	r1, [r3, #20]
 8008d92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d96:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	88da      	ldrh	r2, [r3, #6]
 8008d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8008da8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8008dac:	6800      	ldr	r0, [r0, #0]
 8008dae:	f001 fc92 	bl	800a6d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008db2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008db6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	617b      	str	r3, [r7, #20]
 8008dbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	461a      	mov	r2, r3
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	011a      	lsls	r2, r3, #4
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	4413      	add	r3, r2
 8008de8:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 8008dec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008df0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	801a      	strh	r2, [r3, #0]
 8008e08:	f000 be34 	b.w	8009a74 <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008e0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	78db      	ldrb	r3, [r3, #3]
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	f040 843b 	bne.w	8009694 <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008e1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e22:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6a1a      	ldr	r2, [r3, #32]
 8008e2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e2e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	f240 83b8 	bls.w	80095ac <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008e3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e62:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008e66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e74:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	441a      	add	r2, r3
 8008e80:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008e84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e8c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008e98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6a1a      	ldr	r2, [r3, #32]
 8008ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea8:	1ad2      	subs	r2, r2, r3
 8008eaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008eae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008eb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008eba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ec4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 81b4 	beq.w	8009246 <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ede:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ee2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008eee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	785b      	ldrb	r3, [r3, #1]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d16d      	bne.n	8008fd6 <USB_EPStartXfer+0x2ca>
 8008efa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008efe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	461a      	mov	r2, r3
 8008f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1a:	4413      	add	r3, r2
 8008f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f22:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	011a      	lsls	r2, r3, #4
 8008f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2e:	4413      	add	r3, r2
 8008f30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d112      	bne.n	8008f64 <USB_EPStartXfer+0x258>
 8008f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4c:	801a      	strh	r2, [r3, #0]
 8008f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f60:	801a      	strh	r2, [r3, #0]
 8008f62:	e05d      	b.n	8009020 <USB_EPStartXfer+0x314>
 8008f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f68:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f6a:	d817      	bhi.n	8008f9c <USB_EPStartXfer+0x290>
 8008f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f70:	085b      	lsrs	r3, r3, #1
 8008f72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d004      	beq.n	8008f8c <USB_EPStartXfer+0x280>
 8008f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f86:	3301      	adds	r3, #1
 8008f88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	029b      	lsls	r3, r3, #10
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f98:	801a      	strh	r2, [r3, #0]
 8008f9a:	e041      	b.n	8009020 <USB_EPStartXfer+0x314>
 8008f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fa0:	095b      	lsrs	r3, r3, #5
 8008fa2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008faa:	f003 031f 	and.w	r3, r3, #31
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d104      	bne.n	8008fbc <USB_EPStartXfer+0x2b0>
 8008fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	029b      	lsls	r3, r3, #10
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd2:	801a      	strh	r2, [r3, #0]
 8008fd4:	e024      	b.n	8009020 <USB_EPStartXfer+0x314>
 8008fd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	785b      	ldrb	r3, [r3, #1]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d11c      	bne.n	8009020 <USB_EPStartXfer+0x314>
 8008fe6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ffa:	4413      	add	r3, r2
 8008ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009002:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	011a      	lsls	r2, r3, #4
 800900c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800900e:	4413      	add	r3, r2
 8009010:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009014:	633b      	str	r3, [r7, #48]	@ 0x30
 8009016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800901a:	b29a      	uxth	r2, r3
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009020:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009024:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	895b      	ldrh	r3, [r3, #10]
 800902c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009030:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009034:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6959      	ldr	r1, [r3, #20]
 800903c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009040:	b29b      	uxth	r3, r3
 8009042:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009046:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800904a:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800904e:	6800      	ldr	r0, [r0, #0]
 8009050:	f001 fb41 	bl	800a6d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009054:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009058:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	695a      	ldr	r2, [r3, #20]
 8009060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009064:	441a      	add	r2, r3
 8009066:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800906a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009072:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009076:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6a1a      	ldr	r2, [r3, #32]
 800907e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009082:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	429a      	cmp	r2, r3
 800908c:	d90f      	bls.n	80090ae <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 800908e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009092:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6a1a      	ldr	r2, [r3, #32]
 800909a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	621a      	str	r2, [r3, #32]
 80090ac:	e00e      	b.n	80090cc <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 80090ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 80090be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2200      	movs	r2, #0
 80090ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090d0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	785b      	ldrb	r3, [r3, #1]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d16d      	bne.n	80091b8 <USB_EPStartXfer+0x4ac>
 80090dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	61fb      	str	r3, [r7, #28]
 80090e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	461a      	mov	r2, r3
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	4413      	add	r3, r2
 80090fe:	61fb      	str	r3, [r7, #28]
 8009100:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009104:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	011a      	lsls	r2, r3, #4
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	4413      	add	r3, r2
 8009112:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009116:	61bb      	str	r3, [r7, #24]
 8009118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800911c:	2b00      	cmp	r3, #0
 800911e:	d112      	bne.n	8009146 <USB_EPStartXfer+0x43a>
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800912a:	b29a      	uxth	r2, r3
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	801a      	strh	r2, [r3, #0]
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	b29b      	uxth	r3, r3
 8009136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800913e:	b29a      	uxth	r2, r3
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	e063      	b.n	800920e <USB_EPStartXfer+0x502>
 8009146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800914a:	2b3e      	cmp	r3, #62	@ 0x3e
 800914c:	d817      	bhi.n	800917e <USB_EPStartXfer+0x472>
 800914e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009152:	085b      	lsrs	r3, r3, #1
 8009154:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d004      	beq.n	800916e <USB_EPStartXfer+0x462>
 8009164:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009168:	3301      	adds	r3, #1
 800916a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800916e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009172:	b29b      	uxth	r3, r3
 8009174:	029b      	lsls	r3, r3, #10
 8009176:	b29a      	uxth	r2, r3
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	e047      	b.n	800920e <USB_EPStartXfer+0x502>
 800917e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009182:	095b      	lsrs	r3, r3, #5
 8009184:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800918c:	f003 031f 	and.w	r3, r3, #31
 8009190:	2b00      	cmp	r3, #0
 8009192:	d104      	bne.n	800919e <USB_EPStartXfer+0x492>
 8009194:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009198:	3b01      	subs	r3, #1
 800919a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800919e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	029b      	lsls	r3, r3, #10
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	801a      	strh	r2, [r3, #0]
 80091b6:	e02a      	b.n	800920e <USB_EPStartXfer+0x502>
 80091b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d122      	bne.n	800920e <USB_EPStartXfer+0x502>
 80091c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80091d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e8:	4413      	add	r3, r2
 80091ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80091ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	011a      	lsls	r2, r3, #4
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	4413      	add	r3, r2
 80091fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009202:	623b      	str	r3, [r7, #32]
 8009204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009208:	b29a      	uxth	r2, r3
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800920e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009212:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	891b      	ldrh	r3, [r3, #8]
 800921a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800921e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009222:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6959      	ldr	r1, [r3, #20]
 800922a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800922e:	b29b      	uxth	r3, r3
 8009230:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009234:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009238:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800923c:	6800      	ldr	r0, [r0, #0]
 800923e:	f001 fa4a 	bl	800a6d6 <USB_WritePMA>
 8009242:	f000 bc17 	b.w	8009a74 <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009246:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800924a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	785b      	ldrb	r3, [r3, #1]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d16d      	bne.n	8009332 <USB_EPStartXfer+0x626>
 8009256:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800925a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009262:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009266:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009270:	b29b      	uxth	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009276:	4413      	add	r3, r2
 8009278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800927a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800927e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	011a      	lsls	r2, r3, #4
 8009288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800928a:	4413      	add	r3, r2
 800928c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009290:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d112      	bne.n	80092c0 <USB_EPStartXfer+0x5b4>
 800929a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	b29b      	uxth	r3, r3
 80092a0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092a8:	801a      	strh	r2, [r3, #0]
 80092aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092bc:	801a      	strh	r2, [r3, #0]
 80092be:	e063      	b.n	8009388 <USB_EPStartXfer+0x67c>
 80092c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80092c6:	d817      	bhi.n	80092f8 <USB_EPStartXfer+0x5ec>
 80092c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092cc:	085b      	lsrs	r3, r3, #1
 80092ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80092d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d004      	beq.n	80092e8 <USB_EPStartXfer+0x5dc>
 80092de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092e2:	3301      	adds	r3, #1
 80092e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80092e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	029b      	lsls	r3, r3, #10
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092f4:	801a      	strh	r2, [r3, #0]
 80092f6:	e047      	b.n	8009388 <USB_EPStartXfer+0x67c>
 80092f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092fc:	095b      	lsrs	r3, r3, #5
 80092fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009306:	f003 031f 	and.w	r3, r3, #31
 800930a:	2b00      	cmp	r3, #0
 800930c:	d104      	bne.n	8009318 <USB_EPStartXfer+0x60c>
 800930e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009312:	3b01      	subs	r3, #1
 8009314:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800931c:	b29b      	uxth	r3, r3
 800931e:	029b      	lsls	r3, r3, #10
 8009320:	b29b      	uxth	r3, r3
 8009322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800932a:	b29a      	uxth	r2, r3
 800932c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800932e:	801a      	strh	r2, [r3, #0]
 8009330:	e02a      	b.n	8009388 <USB_EPStartXfer+0x67c>
 8009332:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009336:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	785b      	ldrb	r3, [r3, #1]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d122      	bne.n	8009388 <USB_EPStartXfer+0x67c>
 8009342:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009346:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	657b      	str	r3, [r7, #84]	@ 0x54
 800934e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009352:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800935c:	b29b      	uxth	r3, r3
 800935e:	461a      	mov	r2, r3
 8009360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009362:	4413      	add	r3, r2
 8009364:	657b      	str	r3, [r7, #84]	@ 0x54
 8009366:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800936a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	011a      	lsls	r2, r3, #4
 8009374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009376:	4413      	add	r3, r2
 8009378:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800937c:	653b      	str	r3, [r7, #80]	@ 0x50
 800937e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009382:	b29a      	uxth	r2, r3
 8009384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009386:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009388:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800938c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	891b      	ldrh	r3, [r3, #8]
 8009394:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009398:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800939c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6959      	ldr	r1, [r3, #20]
 80093a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80093ae:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80093b2:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80093b6:	6800      	ldr	r0, [r0, #0]
 80093b8:	f001 f98d 	bl	800a6d6 <USB_WritePMA>
            ep->xfer_buff += len;
 80093bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	695a      	ldr	r2, [r3, #20]
 80093c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093cc:	441a      	add	r2, r3
 80093ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80093da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6a1a      	ldr	r2, [r3, #32]
 80093e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d90f      	bls.n	8009416 <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 80093f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093fa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6a1a      	ldr	r2, [r3, #32]
 8009402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800940c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	621a      	str	r2, [r3, #32]
 8009414:	e00e      	b.n	8009434 <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8009416:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800941a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009426:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800942a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2200      	movs	r2, #0
 8009432:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009434:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009438:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009440:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009444:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d16d      	bne.n	800952c <USB_EPStartXfer+0x820>
 8009450:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009454:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800945c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009460:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800946a:	b29b      	uxth	r3, r3
 800946c:	461a      	mov	r2, r3
 800946e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009470:	4413      	add	r3, r2
 8009472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009474:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009478:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	011a      	lsls	r2, r3, #4
 8009482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009484:	4413      	add	r3, r2
 8009486:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800948a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800948c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009490:	2b00      	cmp	r3, #0
 8009492:	d112      	bne.n	80094ba <USB_EPStartXfer+0x7ae>
 8009494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	b29b      	uxth	r3, r3
 800949a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800949e:	b29a      	uxth	r2, r3
 80094a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a2:	801a      	strh	r2, [r3, #0]
 80094a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b6:	801a      	strh	r2, [r3, #0]
 80094b8:	e05d      	b.n	8009576 <USB_EPStartXfer+0x86a>
 80094ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094be:	2b3e      	cmp	r3, #62	@ 0x3e
 80094c0:	d817      	bhi.n	80094f2 <USB_EPStartXfer+0x7e6>
 80094c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094c6:	085b      	lsrs	r3, r3, #1
 80094c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80094cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <USB_EPStartXfer+0x7d6>
 80094d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094dc:	3301      	adds	r3, #1
 80094de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80094e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	029b      	lsls	r3, r3, #10
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ee:	801a      	strh	r2, [r3, #0]
 80094f0:	e041      	b.n	8009576 <USB_EPStartXfer+0x86a>
 80094f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f6:	095b      	lsrs	r3, r3, #5
 80094f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80094fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009500:	f003 031f 	and.w	r3, r3, #31
 8009504:	2b00      	cmp	r3, #0
 8009506:	d104      	bne.n	8009512 <USB_EPStartXfer+0x806>
 8009508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800950c:	3b01      	subs	r3, #1
 800950e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009516:	b29b      	uxth	r3, r3
 8009518:	029b      	lsls	r3, r3, #10
 800951a:	b29b      	uxth	r3, r3
 800951c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009524:	b29a      	uxth	r2, r3
 8009526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009528:	801a      	strh	r2, [r3, #0]
 800952a:	e024      	b.n	8009576 <USB_EPStartXfer+0x86a>
 800952c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009530:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	785b      	ldrb	r3, [r3, #1]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d11c      	bne.n	8009576 <USB_EPStartXfer+0x86a>
 800953c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009540:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800954a:	b29b      	uxth	r3, r3
 800954c:	461a      	mov	r2, r3
 800954e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009550:	4413      	add	r3, r2
 8009552:	647b      	str	r3, [r7, #68]	@ 0x44
 8009554:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009558:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	011a      	lsls	r2, r3, #4
 8009562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009564:	4413      	add	r3, r2
 8009566:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800956a:	643b      	str	r3, [r7, #64]	@ 0x40
 800956c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009570:	b29a      	uxth	r2, r3
 8009572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009574:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800957a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	895b      	ldrh	r3, [r3, #10]
 8009582:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800958a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6959      	ldr	r1, [r3, #20]
 8009592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009596:	b29b      	uxth	r3, r3
 8009598:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800959c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80095a0:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80095a4:	6800      	ldr	r0, [r0, #0]
 80095a6:	f001 f896 	bl	800a6d6 <USB_WritePMA>
 80095aa:	e263      	b.n	8009a74 <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80095ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80095bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80095de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095e2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80095e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	441a      	add	r2, r3
 8009600:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800960c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009614:	b29b      	uxth	r3, r3
 8009616:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009618:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800961c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	663b      	str	r3, [r7, #96]	@ 0x60
 8009624:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009628:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009632:	b29b      	uxth	r3, r3
 8009634:	461a      	mov	r2, r3
 8009636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009638:	4413      	add	r3, r2
 800963a:	663b      	str	r3, [r7, #96]	@ 0x60
 800963c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009640:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	011a      	lsls	r2, r3, #4
 800964a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800964c:	4413      	add	r3, r2
 800964e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009652:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009658:	b29a      	uxth	r2, r3
 800965a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800965c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800965e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009662:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	891b      	ldrh	r3, [r3, #8]
 800966a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800966e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009672:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6959      	ldr	r1, [r3, #20]
 800967a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800967e:	b29b      	uxth	r3, r3
 8009680:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009684:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009688:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800968c:	6800      	ldr	r0, [r0, #0]
 800968e:	f001 f822 	bl	800a6d6 <USB_WritePMA>
 8009692:	e1ef      	b.n	8009a74 <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009694:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009698:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 80aa 	beq.w	8009810 <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80096bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d16d      	bne.n	80097b4 <USB_EPStartXfer+0xaa8>
 80096d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80096e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	461a      	mov	r2, r3
 80096f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096f8:	4413      	add	r3, r2
 80096fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80096fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009700:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	011a      	lsls	r2, r3, #4
 800970a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800970c:	4413      	add	r3, r2
 800970e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009712:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009718:	2b00      	cmp	r3, #0
 800971a:	d112      	bne.n	8009742 <USB_EPStartXfer+0xa36>
 800971c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009726:	b29a      	uxth	r2, r3
 8009728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800972a:	801a      	strh	r2, [r3, #0]
 800972c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	b29b      	uxth	r3, r3
 8009732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973a:	b29a      	uxth	r2, r3
 800973c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800973e:	801a      	strh	r2, [r3, #0]
 8009740:	e05d      	b.n	80097fe <USB_EPStartXfer+0xaf2>
 8009742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009746:	2b3e      	cmp	r3, #62	@ 0x3e
 8009748:	d817      	bhi.n	800977a <USB_EPStartXfer+0xa6e>
 800974a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800974e:	085b      	lsrs	r3, r3, #1
 8009750:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <USB_EPStartXfer+0xa5e>
 8009760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009764:	3301      	adds	r3, #1
 8009766:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800976a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800976e:	b29b      	uxth	r3, r3
 8009770:	029b      	lsls	r3, r3, #10
 8009772:	b29a      	uxth	r2, r3
 8009774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009776:	801a      	strh	r2, [r3, #0]
 8009778:	e041      	b.n	80097fe <USB_EPStartXfer+0xaf2>
 800977a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800977e:	095b      	lsrs	r3, r3, #5
 8009780:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009788:	f003 031f 	and.w	r3, r3, #31
 800978c:	2b00      	cmp	r3, #0
 800978e:	d104      	bne.n	800979a <USB_EPStartXfer+0xa8e>
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009794:	3b01      	subs	r3, #1
 8009796:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800979a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800979e:	b29b      	uxth	r3, r3
 80097a0:	029b      	lsls	r3, r3, #10
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097b0:	801a      	strh	r2, [r3, #0]
 80097b2:	e024      	b.n	80097fe <USB_EPStartXfer+0xaf2>
 80097b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d11c      	bne.n	80097fe <USB_EPStartXfer+0xaf2>
 80097c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097d8:	4413      	add	r3, r2
 80097da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	011a      	lsls	r2, r3, #4
 80097ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097ec:	4413      	add	r3, r2
 80097ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80097f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80097f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80097fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009802:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	895b      	ldrh	r3, [r3, #10]
 800980a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800980e:	e0b2      	b.n	8009976 <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009810:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009814:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	785b      	ldrb	r3, [r3, #1]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d171      	bne.n	8009904 <USB_EPStartXfer+0xbf8>
 8009820:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009824:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800982e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009832:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800983c:	b29b      	uxth	r3, r3
 800983e:	461a      	mov	r2, r3
 8009840:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009844:	4413      	add	r3, r2
 8009846:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800984a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800984e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	011a      	lsls	r2, r3, #4
 8009858:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800985c:	4413      	add	r3, r2
 800985e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009862:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d112      	bne.n	8009892 <USB_EPStartXfer+0xb86>
 800986c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	b29b      	uxth	r3, r3
 8009872:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009876:	b29a      	uxth	r2, r3
 8009878:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	b29b      	uxth	r3, r3
 8009882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800988a:	b29a      	uxth	r2, r3
 800988c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	e069      	b.n	8009966 <USB_EPStartXfer+0xc5a>
 8009892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009896:	2b3e      	cmp	r3, #62	@ 0x3e
 8009898:	d817      	bhi.n	80098ca <USB_EPStartXfer+0xbbe>
 800989a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800989e:	085b      	lsrs	r3, r3, #1
 80098a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80098a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d004      	beq.n	80098ba <USB_EPStartXfer+0xbae>
 80098b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80098b4:	3301      	adds	r3, #1
 80098b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80098ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80098be:	b29b      	uxth	r3, r3
 80098c0:	029b      	lsls	r3, r3, #10
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80098c6:	801a      	strh	r2, [r3, #0]
 80098c8:	e04d      	b.n	8009966 <USB_EPStartXfer+0xc5a>
 80098ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ce:	095b      	lsrs	r3, r3, #5
 80098d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80098d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098d8:	f003 031f 	and.w	r3, r3, #31
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d104      	bne.n	80098ea <USB_EPStartXfer+0xbde>
 80098e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80098e4:	3b01      	subs	r3, #1
 80098e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80098ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	029b      	lsls	r3, r3, #10
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009900:	801a      	strh	r2, [r3, #0]
 8009902:	e030      	b.n	8009966 <USB_EPStartXfer+0xc5a>
 8009904:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009908:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	785b      	ldrb	r3, [r3, #1]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d128      	bne.n	8009966 <USB_EPStartXfer+0xc5a>
 8009914:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009918:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009922:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009926:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009930:	b29b      	uxth	r3, r3
 8009932:	461a      	mov	r2, r3
 8009934:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009938:	4413      	add	r3, r2
 800993a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800993e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009942:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	011a      	lsls	r2, r3, #4
 800994c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009950:	4413      	add	r3, r2
 8009952:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009956:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800995a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800995e:	b29a      	uxth	r2, r3
 8009960:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009964:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800996a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	891b      	ldrh	r3, [r3, #8]
 8009972:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800997a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6959      	ldr	r1, [r3, #20]
 8009982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009986:	b29b      	uxth	r3, r3
 8009988:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800998c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009990:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009994:	6800      	ldr	r0, [r0, #0]
 8009996:	f000 fe9e 	bl	800a6d6 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800999a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800999e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d12e      	bne.n	8009a08 <USB_EPStartXfer+0xcfc>
 80099aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099d0:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80099d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	441a      	add	r2, r3
 80099ee:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80099f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	8013      	strh	r3, [r2, #0]
 8009a06:	e035      	b.n	8009a74 <USB_EPStartXfer+0xd68>
 8009a08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d12d      	bne.n	8009a74 <USB_EPStartXfer+0xd68>
 8009a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a26:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a3e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009a42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	441a      	add	r2, r3
 8009a5c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009a60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009a74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009a96:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009aa2:	8013      	strh	r3, [r2, #0]
 8009aa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009aa8:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009aac:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009ab0:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009ab4:	8812      	ldrh	r2, [r2, #0]
 8009ab6:	f082 0210 	eor.w	r2, r2, #16
 8009aba:	801a      	strh	r2, [r3, #0]
 8009abc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ac0:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009ac4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009ac8:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009acc:	8812      	ldrh	r2, [r2, #0]
 8009ace:	f082 0220 	eor.w	r2, r2, #32
 8009ad2:	801a      	strh	r2, [r3, #0]
 8009ad4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ad8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ae2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	441a      	add	r2, r3
 8009aee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009af2:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	8013      	strh	r3, [r2, #0]
 8009b0c:	f000 bc9f 	b.w	800a44e <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009b10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	7b1b      	ldrb	r3, [r3, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f040 80ae 	bne.w	8009c7e <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009b22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b26:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	699a      	ldr	r2, [r3, #24]
 8009b2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d917      	bls.n	8009b6e <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 8009b3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b42:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 8009b4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	699a      	ldr	r2, [r3, #24]
 8009b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b64:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	619a      	str	r2, [r3, #24]
 8009b6c:	e00e      	b.n	8009b8c <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 8009b6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b72:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 8009b7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009b8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	461a      	mov	r2, r3
 8009bac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009bb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	011a      	lsls	r2, r3, #4
 8009bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009bc8:	4413      	add	r3, r2
 8009bca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009bce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d116      	bne.n	8009c08 <USB_EPStartXfer+0xefc>
 8009bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bec:	801a      	strh	r2, [r3, #0]
 8009bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c04:	801a      	strh	r2, [r3, #0]
 8009c06:	e3e8      	b.n	800a3da <USB_EPStartXfer+0x16ce>
 8009c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c0e:	d818      	bhi.n	8009c42 <USB_EPStartXfer+0xf36>
 8009c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c14:	085b      	lsrs	r3, r3, #1
 8009c16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d004      	beq.n	8009c30 <USB_EPStartXfer+0xf24>
 8009c26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009c30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	029b      	lsls	r3, r3, #10
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c3e:	801a      	strh	r2, [r3, #0]
 8009c40:	e3cb      	b.n	800a3da <USB_EPStartXfer+0x16ce>
 8009c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c46:	095b      	lsrs	r3, r3, #5
 8009c48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c50:	f003 031f 	and.w	r3, r3, #31
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d104      	bne.n	8009c62 <USB_EPStartXfer+0xf56>
 8009c58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009c62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	029b      	lsls	r3, r3, #10
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c7a:	801a      	strh	r2, [r3, #0]
 8009c7c:	e3ad      	b.n	800a3da <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009c7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	78db      	ldrb	r3, [r3, #3]
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	f040 8200 	bne.w	800a090 <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009c90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	785b      	ldrb	r3, [r3, #1]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f040 8091 	bne.w	8009dc4 <USB_EPStartXfer+0x10b8>
 8009ca2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ca6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cb4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ccc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	011a      	lsls	r2, r3, #4
 8009cda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009cde:	4413      	add	r3, r2
 8009ce0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ce8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d116      	bne.n	8009d26 <USB_EPStartXfer+0x101a>
 8009cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d0a:	801a      	strh	r2, [r3, #0]
 8009d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	e083      	b.n	8009e2e <USB_EPStartXfer+0x1122>
 8009d26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d34:	d820      	bhi.n	8009d78 <USB_EPStartXfer+0x106c>
 8009d36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	085b      	lsrs	r3, r3, #1
 8009d44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d004      	beq.n	8009d66 <USB_EPStartXfer+0x105a>
 8009d5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009d60:	3301      	adds	r3, #1
 8009d62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	029b      	lsls	r3, r3, #10
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d74:	801a      	strh	r2, [r3, #0]
 8009d76:	e05a      	b.n	8009e2e <USB_EPStartXfer+0x1122>
 8009d78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	095b      	lsrs	r3, r3, #5
 8009d86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d8e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	f003 031f 	and.w	r3, r3, #31
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d104      	bne.n	8009da8 <USB_EPStartXfer+0x109c>
 8009d9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009da2:	3b01      	subs	r3, #1
 8009da4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009da8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	029b      	lsls	r3, r3, #10
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dc0:	801a      	strh	r2, [r3, #0]
 8009dc2:	e034      	b.n	8009e2e <USB_EPStartXfer+0x1122>
 8009dc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dc8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	785b      	ldrb	r3, [r3, #1]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d12c      	bne.n	8009e2e <USB_EPStartXfer+0x1122>
 8009dd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009de2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009de6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	461a      	mov	r2, r3
 8009df4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009df8:	4413      	add	r3, r2
 8009dfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009dfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	011a      	lsls	r2, r3, #4
 8009e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e10:	4413      	add	r3, r2
 8009e12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009e16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e1e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e2c:	801a      	strh	r2, [r3, #0]
 8009e2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	785b      	ldrb	r3, [r3, #1]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f040 8091 	bne.w	8009f70 <USB_EPStartXfer+0x1264>
 8009e4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e72:	4413      	add	r3, r2
 8009e74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	011a      	lsls	r2, r3, #4
 8009e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009e90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d116      	bne.n	8009ed2 <USB_EPStartXfer+0x11c6>
 8009ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009eb6:	801a      	strh	r2, [r3, #0]
 8009eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ece:	801a      	strh	r2, [r3, #0]
 8009ed0:	e07c      	b.n	8009fcc <USB_EPStartXfer+0x12c0>
 8009ed2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ed6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ee0:	d820      	bhi.n	8009f24 <USB_EPStartXfer+0x1218>
 8009ee2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ee6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	085b      	lsrs	r3, r3, #1
 8009ef0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ef4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ef8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d004      	beq.n	8009f12 <USB_EPStartXfer+0x1206>
 8009f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	029b      	lsls	r3, r3, #10
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f20:	801a      	strh	r2, [r3, #0]
 8009f22:	e053      	b.n	8009fcc <USB_EPStartXfer+0x12c0>
 8009f24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	095b      	lsrs	r3, r3, #5
 8009f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	f003 031f 	and.w	r3, r3, #31
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d104      	bne.n	8009f54 <USB_EPStartXfer+0x1248>
 8009f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	029b      	lsls	r3, r3, #10
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f6c:	801a      	strh	r2, [r3, #0]
 8009f6e:	e02d      	b.n	8009fcc <USB_EPStartXfer+0x12c0>
 8009f70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f74:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	785b      	ldrb	r3, [r3, #1]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d125      	bne.n	8009fcc <USB_EPStartXfer+0x12c0>
 8009f80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	461a      	mov	r2, r3
 8009f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f96:	4413      	add	r3, r2
 8009f98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fa0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	011a      	lsls	r2, r3, #4
 8009faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009fae:	4413      	add	r3, r2
 8009fb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009fb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fbc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009fca:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009fcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	69db      	ldr	r3, [r3, #28]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 81fe 	beq.w	800a3da <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009fde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fe2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009ffe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d005      	beq.n	800a016 <USB_EPStartXfer+0x130a>
 800a00a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a00e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10d      	bne.n	800a032 <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a016:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a01a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f040 81db 	bne.w	800a3da <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a024:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f040 81d4 	bne.w	800a3da <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a032:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a036:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a040:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a058:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800a05c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a060:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a06a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	441a      	add	r2, r3
 800a076:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800a07a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a07e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a086:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	8013      	strh	r3, [r2, #0]
 800a08e:	e1a4      	b.n	800a3da <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a090:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a094:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	78db      	ldrb	r3, [r3, #3]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	f040 819a 	bne.w	800a3d6 <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a0a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	699a      	ldr	r2, [r3, #24]
 800a0ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d917      	bls.n	800a0ee <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800a0be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800a0ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	699a      	ldr	r2, [r3, #24]
 800a0da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0de:	1ad2      	subs	r2, r2, r3
 800a0e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	619a      	str	r2, [r3, #24]
 800a0ec:	e00e      	b.n	800a10c <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800a0ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800a0fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a102:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2200      	movs	r2, #0
 800a10a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a10c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a110:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	785b      	ldrb	r3, [r3, #1]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d178      	bne.n	800a20e <USB_EPStartXfer+0x1502>
 800a11c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a120:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a12a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a12e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a138:	b29b      	uxth	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a140:	4413      	add	r3, r2
 800a142:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a146:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a14a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	011a      	lsls	r2, r3, #4
 800a154:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a158:	4413      	add	r3, r2
 800a15a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a15e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a166:	2b00      	cmp	r3, #0
 800a168:	d116      	bne.n	800a198 <USB_EPStartXfer+0x148c>
 800a16a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	b29b      	uxth	r3, r3
 800a172:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a176:	b29a      	uxth	r2, r3
 800a178:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a17c:	801a      	strh	r2, [r3, #0]
 800a17e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	b29b      	uxth	r3, r3
 800a186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a18a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a18e:	b29a      	uxth	r2, r3
 800a190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a194:	801a      	strh	r2, [r3, #0]
 800a196:	e06b      	b.n	800a270 <USB_EPStartXfer+0x1564>
 800a198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a19c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a19e:	d818      	bhi.n	800a1d2 <USB_EPStartXfer+0x14c6>
 800a1a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1a4:	085b      	lsrs	r3, r3, #1
 800a1a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d004      	beq.n	800a1c0 <USB_EPStartXfer+0x14b4>
 800a1b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	029b      	lsls	r3, r3, #10
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a1ce:	801a      	strh	r2, [r3, #0]
 800a1d0:	e04e      	b.n	800a270 <USB_EPStartXfer+0x1564>
 800a1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1d6:	095b      	lsrs	r3, r3, #5
 800a1d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1e0:	f003 031f 	and.w	r3, r3, #31
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d104      	bne.n	800a1f2 <USB_EPStartXfer+0x14e6>
 800a1e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	029b      	lsls	r3, r3, #10
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a204:	b29a      	uxth	r2, r3
 800a206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a20a:	801a      	strh	r2, [r3, #0]
 800a20c:	e030      	b.n	800a270 <USB_EPStartXfer+0x1564>
 800a20e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a212:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	785b      	ldrb	r3, [r3, #1]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d128      	bne.n	800a270 <USB_EPStartXfer+0x1564>
 800a21e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a222:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a22c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a230:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	461a      	mov	r2, r3
 800a23e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a242:	4413      	add	r3, r2
 800a244:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a248:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a24c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	011a      	lsls	r2, r3, #4
 800a256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a25a:	4413      	add	r3, r2
 800a25c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a260:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a268:	b29a      	uxth	r2, r3
 800a26a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a26e:	801a      	strh	r2, [r3, #0]
 800a270:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a274:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a27e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a282:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	785b      	ldrb	r3, [r3, #1]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d178      	bne.n	800a380 <USB_EPStartXfer+0x1674>
 800a28e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a292:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a29c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a2b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	011a      	lsls	r2, r3, #4
 800a2c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a2d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a2d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d116      	bne.n	800a30a <USB_EPStartXfer+0x15fe>
 800a2dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a2ee:	801a      	strh	r2, [r3, #0]
 800a2f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a300:	b29a      	uxth	r2, r3
 800a302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a306:	801a      	strh	r2, [r3, #0]
 800a308:	e067      	b.n	800a3da <USB_EPStartXfer+0x16ce>
 800a30a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a30e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a310:	d818      	bhi.n	800a344 <USB_EPStartXfer+0x1638>
 800a312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a316:	085b      	lsrs	r3, r3, #1
 800a318:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a31c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	2b00      	cmp	r3, #0
 800a326:	d004      	beq.n	800a332 <USB_EPStartXfer+0x1626>
 800a328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a32c:	3301      	adds	r3, #1
 800a32e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a336:	b29b      	uxth	r3, r3
 800a338:	029b      	lsls	r3, r3, #10
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a340:	801a      	strh	r2, [r3, #0]
 800a342:	e04a      	b.n	800a3da <USB_EPStartXfer+0x16ce>
 800a344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a348:	095b      	lsrs	r3, r3, #5
 800a34a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a34e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a352:	f003 031f 	and.w	r3, r3, #31
 800a356:	2b00      	cmp	r3, #0
 800a358:	d104      	bne.n	800a364 <USB_EPStartXfer+0x1658>
 800a35a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a35e:	3b01      	subs	r3, #1
 800a360:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a368:	b29b      	uxth	r3, r3
 800a36a:	029b      	lsls	r3, r3, #10
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a376:	b29a      	uxth	r2, r3
 800a378:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a37c:	801a      	strh	r2, [r3, #0]
 800a37e:	e02c      	b.n	800a3da <USB_EPStartXfer+0x16ce>
 800a380:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a384:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	785b      	ldrb	r3, [r3, #1]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d124      	bne.n	800a3da <USB_EPStartXfer+0x16ce>
 800a390:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a394:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a3ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	011a      	lsls	r2, r3, #4
 800a3ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a3be:	4413      	add	r3, r2
 800a3c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a3c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a3c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a3d2:	801a      	strh	r2, [r3, #0]
 800a3d4:	e001      	b.n	800a3da <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e03a      	b.n	800a450 <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a3da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a400:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a404:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a408:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a40c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a410:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a414:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a418:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a41c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a420:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a42a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	441a      	add	r2, r3
 800a436:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a43a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a43e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b085      	sub	sp, #20
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d020      	beq.n	800a4ae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a47e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a482:	81bb      	strh	r3, [r7, #12]
 800a484:	89bb      	ldrh	r3, [r7, #12]
 800a486:	f083 0310 	eor.w	r3, r3, #16
 800a48a:	81bb      	strh	r3, [r7, #12]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	441a      	add	r2, r3
 800a496:	89bb      	ldrh	r3, [r7, #12]
 800a498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a49c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	8013      	strh	r3, [r2, #0]
 800a4ac:	e01f      	b.n	800a4ee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4c4:	81fb      	strh	r3, [r7, #14]
 800a4c6:	89fb      	ldrh	r3, [r7, #14]
 800a4c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a4cc:	81fb      	strh	r3, [r7, #14]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	441a      	add	r2, r3
 800a4d8:	89fb      	ldrh	r3, [r7, #14]
 800a4da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bc80      	pop	{r7}
 800a4f8:	4770      	bx	lr

0800a4fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b087      	sub	sp, #28
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	7b1b      	ldrb	r3, [r3, #12]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f040 809d 	bne.w	800a648 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	785b      	ldrb	r3, [r3, #1]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d04c      	beq.n	800a5b0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	881b      	ldrh	r3, [r3, #0]
 800a522:	823b      	strh	r3, [r7, #16]
 800a524:	8a3b      	ldrh	r3, [r7, #16]
 800a526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d01b      	beq.n	800a566 <USB_EPClearStall+0x6c>
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	881b      	ldrh	r3, [r3, #0]
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a544:	81fb      	strh	r3, [r7, #14]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	441a      	add	r2, r3
 800a550:	89fb      	ldrh	r3, [r7, #14]
 800a552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a55a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a55e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a562:	b29b      	uxth	r3, r3
 800a564:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	78db      	ldrb	r3, [r3, #3]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d06c      	beq.n	800a648 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a584:	81bb      	strh	r3, [r7, #12]
 800a586:	89bb      	ldrh	r3, [r7, #12]
 800a588:	f083 0320 	eor.w	r3, r3, #32
 800a58c:	81bb      	strh	r3, [r7, #12]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	441a      	add	r2, r3
 800a598:	89bb      	ldrh	r3, [r7, #12]
 800a59a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a59e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	8013      	strh	r3, [r2, #0]
 800a5ae:	e04b      	b.n	800a648 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	82fb      	strh	r3, [r7, #22]
 800a5be:	8afb      	ldrh	r3, [r7, #22]
 800a5c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d01b      	beq.n	800a600 <USB_EPClearStall+0x106>
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	881b      	ldrh	r3, [r3, #0]
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5de:	82bb      	strh	r3, [r7, #20]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	441a      	add	r2, r3
 800a5ea:	8abb      	ldrh	r3, [r7, #20]
 800a5ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a5f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a616:	827b      	strh	r3, [r7, #18]
 800a618:	8a7b      	ldrh	r3, [r7, #18]
 800a61a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a61e:	827b      	strh	r3, [r7, #18]
 800a620:	8a7b      	ldrh	r3, [r7, #18]
 800a622:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a626:	827b      	strh	r3, [r7, #18]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	441a      	add	r2, r3
 800a632:	8a7b      	ldrh	r3, [r7, #18]
 800a634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a63c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a644:	b29b      	uxth	r3, r3
 800a646:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	371c      	adds	r7, #28
 800a64e:	46bd      	mov	sp, r7
 800a650:	bc80      	pop	{r7}
 800a652:	4770      	bx	lr

0800a654 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d103      	bne.n	800a66e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2280      	movs	r2, #128	@ 0x80
 800a66a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	bc80      	pop	{r7}
 800a678:	4770      	bx	lr

0800a67a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	bc80      	pop	{r7}
 800a68c:	4770      	bx	lr

0800a68e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a68e:	b480      	push	{r7}
 800a690:	b083      	sub	sp, #12
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bc80      	pop	{r7}
 800a6a0:	4770      	bx	lr

0800a6a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b085      	sub	sp, #20
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bc80      	pop	{r7}
 800a6be:	4770      	bx	lr

0800a6c0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bc80      	pop	{r7}
 800a6d4:	4770      	bx	lr

0800a6d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b08d      	sub	sp, #52	@ 0x34
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	80fb      	strh	r3, [r7, #6]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a6ec:	88bb      	ldrh	r3, [r7, #4]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	085b      	lsrs	r3, r3, #1
 800a6f2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a6fc:	88fb      	ldrh	r3, [r7, #6]
 800a6fe:	005a      	lsls	r2, r3, #1
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a708:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a70e:	e01d      	b.n	800a74c <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800a710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a718:	3301      	adds	r3, #1
 800a71a:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	021b      	lsls	r3, r3, #8
 800a722:	b29b      	uxth	r3, r3
 800a724:	461a      	mov	r2, r3
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	4313      	orrs	r3, r2
 800a72a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	b29a      	uxth	r2, r3
 800a730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a732:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a736:	3302      	adds	r3, #2
 800a738:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a73c:	3302      	adds	r3, #2
 800a73e:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800a740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a742:	3301      	adds	r3, #1
 800a744:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800a746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a748:	3b01      	subs	r3, #1
 800a74a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1de      	bne.n	800a710 <USB_WritePMA+0x3a>
  }
}
 800a752:	bf00      	nop
 800a754:	bf00      	nop
 800a756:	3734      	adds	r7, #52	@ 0x34
 800a758:	46bd      	mov	sp, r7
 800a75a:	bc80      	pop	{r7}
 800a75c:	4770      	bx	lr

0800a75e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a75e:	b480      	push	{r7}
 800a760:	b08b      	sub	sp, #44	@ 0x2c
 800a762:	af00      	add	r7, sp, #0
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	4611      	mov	r1, r2
 800a76a:	461a      	mov	r2, r3
 800a76c:	460b      	mov	r3, r1
 800a76e:	80fb      	strh	r3, [r7, #6]
 800a770:	4613      	mov	r3, r2
 800a772:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a774:	88bb      	ldrh	r3, [r7, #4]
 800a776:	085b      	lsrs	r3, r3, #1
 800a778:	b29b      	uxth	r3, r3
 800a77a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a784:	88fb      	ldrh	r3, [r7, #6]
 800a786:	005a      	lsls	r2, r3, #1
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a790:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	627b      	str	r3, [r7, #36]	@ 0x24
 800a796:	e01b      	b.n	800a7d0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a7a0:	6a3b      	ldr	r3, [r7, #32]
 800a7a2:	3302      	adds	r3, #2
 800a7a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	0a1b      	lsrs	r3, r3, #8
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	3302      	adds	r3, #2
 800a7c8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e0      	bne.n	800a798 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a7d6:	88bb      	ldrh	r3, [r7, #4]
 800a7d8:	f003 0301 	and.w	r3, r3, #1
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d007      	beq.n	800a7f2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	701a      	strb	r2, [r3, #0]
  }
}
 800a7f2:	bf00      	nop
 800a7f4:	372c      	adds	r7, #44	@ 0x2c
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bc80      	pop	{r7}
 800a7fa:	4770      	bx	lr

0800a7fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	460b      	mov	r3, r1
 800a806:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	7c1b      	ldrb	r3, [r3, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d115      	bne.n	800a840 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a814:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a818:	2202      	movs	r2, #2
 800a81a:	2181      	movs	r1, #129	@ 0x81
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 fe90 	bl	800c542 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a828:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a82c:	2202      	movs	r2, #2
 800a82e:	2101      	movs	r1, #1
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 fe86 	bl	800c542 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800a83e:	e012      	b.n	800a866 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a840:	2340      	movs	r3, #64	@ 0x40
 800a842:	2202      	movs	r2, #2
 800a844:	2181      	movs	r1, #129	@ 0x81
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f001 fe7b 	bl	800c542 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a852:	2340      	movs	r3, #64	@ 0x40
 800a854:	2202      	movs	r2, #2
 800a856:	2101      	movs	r1, #1
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f001 fe72 	bl	800c542 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a866:	2308      	movs	r3, #8
 800a868:	2203      	movs	r2, #3
 800a86a:	2182      	movs	r1, #130	@ 0x82
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f001 fe68 	bl	800c542 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a878:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a87c:	f001 ff88 	bl	800c790 <USBD_static_malloc>
 800a880:	4602      	mov	r2, r0
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d102      	bne.n	800a898 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a892:	2301      	movs	r3, #1
 800a894:	73fb      	strb	r3, [r7, #15]
 800a896:	e026      	b.n	800a8e6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a89e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	7c1b      	ldrb	r3, [r3, #16]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d109      	bne.n	800a8d6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a8c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8cc:	2101      	movs	r1, #1
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f001 ff28 	bl	800c724 <USBD_LL_PrepareReceive>
 800a8d4:	e007      	b.n	800a8e6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a8dc:	2340      	movs	r3, #64	@ 0x40
 800a8de:	2101      	movs	r1, #1
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f001 ff1f 	bl	800c724 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a900:	2181      	movs	r1, #129	@ 0x81
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f001 fe43 	bl	800c58e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a90e:	2101      	movs	r1, #1
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f001 fe3c 	bl	800c58e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a91e:	2182      	movs	r1, #130	@ 0x82
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f001 fe34 	bl	800c58e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00e      	beq.n	800a954 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a946:	4618      	mov	r0, r3
 800a948:	f001 ff2e 	bl	800c7a8 <USBD_static_free>
    pdev->pClassData = NULL;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a954:	7bfb      	ldrb	r3, [r7, #15]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b086      	sub	sp, #24
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a96e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a970:	2300      	movs	r3, #0
 800a972:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a974:	2300      	movs	r3, #0
 800a976:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a984:	2b00      	cmp	r3, #0
 800a986:	d039      	beq.n	800a9fc <USBD_CDC_Setup+0x9e>
 800a988:	2b20      	cmp	r3, #32
 800a98a:	d17f      	bne.n	800aa8c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	88db      	ldrh	r3, [r3, #6]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d029      	beq.n	800a9e8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	b25b      	sxtb	r3, r3
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	da11      	bge.n	800a9c2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a9aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	88d2      	ldrh	r2, [r2, #6]
 800a9b0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a9b2:	6939      	ldr	r1, [r7, #16]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	88db      	ldrh	r3, [r3, #6]
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f001 fa06 	bl	800bdcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a9c0:	e06b      	b.n	800aa9a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	785a      	ldrb	r2, [r3, #1]
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	88db      	ldrh	r3, [r3, #6]
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a9d8:	6939      	ldr	r1, [r7, #16]
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	88db      	ldrh	r3, [r3, #6]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 fa21 	bl	800be28 <USBD_CtlPrepareRx>
      break;
 800a9e6:	e058      	b.n	800aa9a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	7850      	ldrb	r0, [r2, #1]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	4798      	blx	r3
      break;
 800a9fa:	e04e      	b.n	800aa9a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	785b      	ldrb	r3, [r3, #1]
 800aa00:	2b0b      	cmp	r3, #11
 800aa02:	d02e      	beq.n	800aa62 <USBD_CDC_Setup+0x104>
 800aa04:	2b0b      	cmp	r3, #11
 800aa06:	dc38      	bgt.n	800aa7a <USBD_CDC_Setup+0x11c>
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <USBD_CDC_Setup+0xb4>
 800aa0c:	2b0a      	cmp	r3, #10
 800aa0e:	d014      	beq.n	800aa3a <USBD_CDC_Setup+0xdc>
 800aa10:	e033      	b.n	800aa7a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d107      	bne.n	800aa2c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800aa1c:	f107 030c 	add.w	r3, r7, #12
 800aa20:	2202      	movs	r2, #2
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f001 f9d1 	bl	800bdcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa2a:	e02e      	b.n	800aa8a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 f962 	bl	800bcf8 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa34:	2302      	movs	r3, #2
 800aa36:	75fb      	strb	r3, [r7, #23]
          break;
 800aa38:	e027      	b.n	800aa8a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d107      	bne.n	800aa54 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa44:	f107 030f 	add.w	r3, r7, #15
 800aa48:	2201      	movs	r2, #1
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f001 f9bd 	bl	800bdcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa52:	e01a      	b.n	800aa8a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f001 f94e 	bl	800bcf8 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	75fb      	strb	r3, [r7, #23]
          break;
 800aa60:	e013      	b.n	800aa8a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	d00d      	beq.n	800aa88 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 f942 	bl	800bcf8 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa74:	2302      	movs	r3, #2
 800aa76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa78:	e006      	b.n	800aa88 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f001 f93b 	bl	800bcf8 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa82:	2302      	movs	r3, #2
 800aa84:	75fb      	strb	r3, [r7, #23]
          break;
 800aa86:	e000      	b.n	800aa8a <USBD_CDC_Setup+0x12c>
          break;
 800aa88:	bf00      	nop
      }
      break;
 800aa8a:	e006      	b.n	800aa9a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f001 f932 	bl	800bcf8 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa94:	2302      	movs	r3, #2
 800aa96:	75fb      	strb	r3, [r7, #23]
      break;
 800aa98:	bf00      	nop
  }

  return ret;
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aab6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aabe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d03a      	beq.n	800ab40 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aaca:	78fa      	ldrb	r2, [r7, #3]
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	440b      	add	r3, r1
 800aad8:	331c      	adds	r3, #28
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d029      	beq.n	800ab34 <USBD_CDC_DataIn+0x90>
 800aae0:	78fa      	ldrb	r2, [r7, #3]
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	4613      	mov	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4413      	add	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	440b      	add	r3, r1
 800aaee:	331c      	adds	r3, #28
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	78f9      	ldrb	r1, [r7, #3]
 800aaf4:	68b8      	ldr	r0, [r7, #8]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	440b      	add	r3, r1
 800aafc:	00db      	lsls	r3, r3, #3
 800aafe:	4403      	add	r3, r0
 800ab00:	3338      	adds	r3, #56	@ 0x38
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab08:	fb01 f303 	mul.w	r3, r1, r3
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d110      	bne.n	800ab34 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ab12:	78fa      	ldrb	r2, [r7, #3]
 800ab14:	6879      	ldr	r1, [r7, #4]
 800ab16:	4613      	mov	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4413      	add	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	440b      	add	r3, r1
 800ab20:	331c      	adds	r3, #28
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab26:	78f9      	ldrb	r1, [r7, #3]
 800ab28:	2300      	movs	r3, #0
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 fdd6 	bl	800c6de <USBD_LL_Transmit>
 800ab32:	e003      	b.n	800ab3c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	e000      	b.n	800ab42 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ab40:	2302      	movs	r3, #2
  }
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab5c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab5e:	78fb      	ldrb	r3, [r7, #3]
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f001 fe01 	bl	800c76a <USBD_LL_GetRxDataSize>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00d      	beq.n	800ab96 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ab8e:	4611      	mov	r1, r2
 800ab90:	4798      	blx	r3

    return USBD_OK;
 800ab92:	2300      	movs	r3, #0
 800ab94:	e000      	b.n	800ab98 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ab96:	2302      	movs	r3, #2
  }
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d014      	beq.n	800abe4 <USBD_CDC_EP0_RxReady+0x44>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800abc0:	2bff      	cmp	r3, #255	@ 0xff
 800abc2:	d00f      	beq.n	800abe4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800abd2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800abda:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	22ff      	movs	r2, #255	@ 0xff
 800abe0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2243      	movs	r2, #67	@ 0x43
 800abfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800abfe:	4b03      	ldr	r3, [pc, #12]	@ (800ac0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bc80      	pop	{r7}
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	200000bc 	.word	0x200000bc

0800ac10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2243      	movs	r2, #67	@ 0x43
 800ac1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ac1e:	4b03      	ldr	r3, [pc, #12]	@ (800ac2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bc80      	pop	{r7}
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	20000078 	.word	0x20000078

0800ac30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2243      	movs	r2, #67	@ 0x43
 800ac3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ac3e:	4b03      	ldr	r3, [pc, #12]	@ (800ac4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bc80      	pop	{r7}
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	20000100 	.word	0x20000100

0800ac50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	220a      	movs	r2, #10
 800ac5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ac5e:	4b03      	ldr	r3, [pc, #12]	@ (800ac6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bc80      	pop	{r7}
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	20000034 	.word	0x20000034

0800ac70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d005      	beq.n	800ac90 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bc80      	pop	{r7}
 800ac9a:	4770      	bx	lr

0800ac9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	4613      	mov	r3, r2
 800aca8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800acba:	88fa      	ldrh	r2, [r7, #6]
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	371c      	adds	r7, #28
 800acc8:	46bd      	mov	sp, r7
 800acca:	bc80      	pop	{r7}
 800accc:	4770      	bx	lr

0800acce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800acce:	b480      	push	{r7}
 800acd0:	b085      	sub	sp, #20
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acde:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	bc80      	pop	{r7}
 800acf2:	4770      	bx	lr

0800acf4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d01c      	beq.n	800ad48 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d115      	bne.n	800ad44 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	2181      	movs	r1, #129	@ 0x81
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f001 fccf 	bl	800c6de <USBD_LL_Transmit>

      return USBD_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	e002      	b.n	800ad4a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e000      	b.n	800ad4a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ad48:	2302      	movs	r3, #2
  }
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad60:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d017      	beq.n	800ad9c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	7c1b      	ldrb	r3, [r3, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d109      	bne.n	800ad88 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad7e:	2101      	movs	r1, #1
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 fccf 	bl	800c724 <USBD_LL_PrepareReceive>
 800ad86:	e007      	b.n	800ad98 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad8e:	2340      	movs	r3, #64	@ 0x40
 800ad90:	2101      	movs	r1, #1
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f001 fcc6 	bl	800c724 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e000      	b.n	800ad9e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ad9c:	2302      	movs	r3, #2
  }
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	4613      	mov	r3, r2
 800adb2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d101      	bne.n	800adbe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800adba:	2302      	movs	r3, #2
 800adbc:	e01a      	b.n	800adf4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d003      	beq.n	800add0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	79fa      	ldrb	r2, [r7, #7]
 800adea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f001 fb33 	bl	800c458 <USBD_LL_Init>

  return USBD_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d006      	beq.n	800ae1e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	73fb      	strb	r3, [r7, #15]
 800ae1c:	e001      	b.n	800ae22 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ae1e:	2302      	movs	r3, #2
 800ae20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bc80      	pop	{r7}
 800ae2c:	4770      	bx	lr

0800ae2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 fb68 	bl	800c50c <USBD_LL_Start>

  return USBD_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ae46:	b480      	push	{r7}
 800ae48:	b083      	sub	sp, #12
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bc80      	pop	{r7}
 800ae58:	4770      	bx	lr

0800ae5a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b084      	sub	sp, #16
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	460b      	mov	r3, r1
 800ae64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae66:	2302      	movs	r3, #2
 800ae68:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00c      	beq.n	800ae8e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	78fa      	ldrb	r2, [r7, #3]
 800ae7e:	4611      	mov	r1, r2
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	4798      	blx	r3
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	460b      	mov	r3, r1
 800aea2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	78fa      	ldrb	r2, [r7, #3]
 800aeae:	4611      	mov	r1, r2
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	4798      	blx	r3

  return USBD_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 fed8 	bl	800bc86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800aee4:	461a      	mov	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800aef2:	f003 031f 	and.w	r3, r3, #31
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d016      	beq.n	800af28 <USBD_LL_SetupStage+0x6a>
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d81c      	bhi.n	800af38 <USBD_LL_SetupStage+0x7a>
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d002      	beq.n	800af08 <USBD_LL_SetupStage+0x4a>
 800af02:	2b01      	cmp	r3, #1
 800af04:	d008      	beq.n	800af18 <USBD_LL_SetupStage+0x5a>
 800af06:	e017      	b.n	800af38 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f9cb 	bl	800b2ac <USBD_StdDevReq>
      break;
 800af16:	e01a      	b.n	800af4e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fa2d 	bl	800b380 <USBD_StdItfReq>
      break;
 800af26:	e012      	b.n	800af4e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fa6d 	bl	800b410 <USBD_StdEPReq>
      break;
 800af36:	e00a      	b.n	800af4e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800af3e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800af42:	b2db      	uxtb	r3, r3
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f001 fb40 	bl	800c5cc <USBD_LL_StallEP>
      break;
 800af4c:	bf00      	nop
  }

  return USBD_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b086      	sub	sp, #24
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	460b      	mov	r3, r1
 800af62:	607a      	str	r2, [r7, #4]
 800af64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af66:	7afb      	ldrb	r3, [r7, #11]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d14b      	bne.n	800b004 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800af72:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af7a:	2b03      	cmp	r3, #3
 800af7c:	d134      	bne.n	800afe8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	68da      	ldr	r2, [r3, #12]
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	429a      	cmp	r2, r3
 800af88:	d919      	bls.n	800afbe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	68da      	ldr	r2, [r3, #12]
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	1ad2      	subs	r2, r2, r3
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	68da      	ldr	r2, [r3, #12]
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d203      	bcs.n	800afac <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	e002      	b.n	800afb2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	461a      	mov	r2, r3
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f000 ff54 	bl	800be64 <USBD_CtlContinueRx>
 800afbc:	e038      	b.n	800b030 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00a      	beq.n	800afe0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d105      	bne.n	800afe0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 ff51 	bl	800be88 <USBD_CtlSendStatus>
 800afe6:	e023      	b.n	800b030 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800afee:	2b05      	cmp	r3, #5
 800aff0:	d11e      	bne.n	800b030 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800affa:	2100      	movs	r1, #0
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f001 fae5 	bl	800c5cc <USBD_LL_StallEP>
 800b002:	e015      	b.n	800b030 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00d      	beq.n	800b02c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b016:	2b03      	cmp	r3, #3
 800b018:	d108      	bne.n	800b02c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	7afa      	ldrb	r2, [r7, #11]
 800b024:	4611      	mov	r1, r2
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	4798      	blx	r3
 800b02a:	e001      	b.n	800b030 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b02c:	2302      	movs	r3, #2
 800b02e:	e000      	b.n	800b032 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3718      	adds	r7, #24
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b086      	sub	sp, #24
 800b03e:	af00      	add	r7, sp, #0
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	460b      	mov	r3, r1
 800b044:	607a      	str	r2, [r7, #4]
 800b046:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b048:	7afb      	ldrb	r3, [r7, #11]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d17f      	bne.n	800b14e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3314      	adds	r3, #20
 800b052:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d15c      	bne.n	800b118 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	68da      	ldr	r2, [r3, #12]
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	429a      	cmp	r2, r3
 800b068:	d915      	bls.n	800b096 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	68da      	ldr	r2, [r3, #12]
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	1ad2      	subs	r2, r2, r3
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	461a      	mov	r2, r3
 800b080:	6879      	ldr	r1, [r7, #4]
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 febe 	bl	800be04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b088:	2300      	movs	r3, #0
 800b08a:	2200      	movs	r2, #0
 800b08c:	2100      	movs	r1, #0
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f001 fb48 	bl	800c724 <USBD_LL_PrepareReceive>
 800b094:	e04e      	b.n	800b134 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	6912      	ldr	r2, [r2, #16]
 800b09e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0a2:	fb01 f202 	mul.w	r2, r1, r2
 800b0a6:	1a9b      	subs	r3, r3, r2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d11c      	bne.n	800b0e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	689a      	ldr	r2, [r3, #8]
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d316      	bcc.n	800b0e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	689a      	ldr	r2, [r3, #8]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d20f      	bcs.n	800b0e6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f000 fe9a 	bl	800be04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0d8:	2300      	movs	r3, #0
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2100      	movs	r1, #0
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f001 fb20 	bl	800c724 <USBD_LL_PrepareReceive>
 800b0e4:	e026      	b.n	800b134 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00a      	beq.n	800b108 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0f8:	2b03      	cmp	r3, #3
 800b0fa:	d105      	bne.n	800b108 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b108:	2180      	movs	r1, #128	@ 0x80
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f001 fa5e 	bl	800c5cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f000 fecc 	bl	800beae <USBD_CtlReceiveStatus>
 800b116:	e00d      	b.n	800b134 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b11e:	2b04      	cmp	r3, #4
 800b120:	d004      	beq.n	800b12c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d103      	bne.n	800b134 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b12c:	2180      	movs	r1, #128	@ 0x80
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f001 fa4c 	bl	800c5cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d11d      	bne.n	800b17a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f7ff fe81 	bl	800ae46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b14c:	e015      	b.n	800b17a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b154:	695b      	ldr	r3, [r3, #20]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00d      	beq.n	800b176 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b160:	2b03      	cmp	r3, #3
 800b162:	d108      	bne.n	800b176 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b16a:	695b      	ldr	r3, [r3, #20]
 800b16c:	7afa      	ldrb	r2, [r7, #11]
 800b16e:	4611      	mov	r1, r2
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	4798      	blx	r3
 800b174:	e001      	b.n	800b17a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b176:	2302      	movs	r3, #2
 800b178:	e000      	b.n	800b17c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3718      	adds	r7, #24
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b18c:	2340      	movs	r3, #64	@ 0x40
 800b18e:	2200      	movs	r2, #0
 800b190:	2100      	movs	r1, #0
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f001 f9d5 	bl	800c542 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2240      	movs	r2, #64	@ 0x40
 800b1a4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1a8:	2340      	movs	r3, #64	@ 0x40
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	2180      	movs	r1, #128	@ 0x80
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f001 f9c7 	bl	800c542 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2240      	movs	r2, #64	@ 0x40
 800b1be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d009      	beq.n	800b1fc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	6852      	ldr	r2, [r2, #4]
 800b1f4:	b2d2      	uxtb	r2, r2
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	4798      	blx	r3
  }

  return USBD_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b206:	b480      	push	{r7}
 800b208:	b083      	sub	sp, #12
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	460b      	mov	r3, r1
 800b210:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	78fa      	ldrb	r2, [r7, #3]
 800b216:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	370c      	adds	r7, #12
 800b21e:	46bd      	mov	sp, r7
 800b220:	bc80      	pop	{r7}
 800b222:	4770      	bx	lr

0800b224 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2204      	movs	r2, #4
 800b23c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	bc80      	pop	{r7}
 800b24a:	4770      	bx	lr

0800b24c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	d105      	bne.n	800b26a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	bc80      	pop	{r7}
 800b274:	4770      	bx	lr

0800b276 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b082      	sub	sp, #8
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b284:	2b03      	cmp	r3, #3
 800b286:	d10b      	bne.n	800b2a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d005      	beq.n	800b2a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b29a:	69db      	ldr	r3, [r3, #28]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
	...

0800b2ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b2c2:	2b40      	cmp	r3, #64	@ 0x40
 800b2c4:	d005      	beq.n	800b2d2 <USBD_StdDevReq+0x26>
 800b2c6:	2b40      	cmp	r3, #64	@ 0x40
 800b2c8:	d84f      	bhi.n	800b36a <USBD_StdDevReq+0xbe>
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d009      	beq.n	800b2e2 <USBD_StdDevReq+0x36>
 800b2ce:	2b20      	cmp	r3, #32
 800b2d0:	d14b      	bne.n	800b36a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	4798      	blx	r3
      break;
 800b2e0:	e048      	b.n	800b374 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	785b      	ldrb	r3, [r3, #1]
 800b2e6:	2b09      	cmp	r3, #9
 800b2e8:	d839      	bhi.n	800b35e <USBD_StdDevReq+0xb2>
 800b2ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b2f0 <USBD_StdDevReq+0x44>)
 800b2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f0:	0800b341 	.word	0x0800b341
 800b2f4:	0800b355 	.word	0x0800b355
 800b2f8:	0800b35f 	.word	0x0800b35f
 800b2fc:	0800b34b 	.word	0x0800b34b
 800b300:	0800b35f 	.word	0x0800b35f
 800b304:	0800b323 	.word	0x0800b323
 800b308:	0800b319 	.word	0x0800b319
 800b30c:	0800b35f 	.word	0x0800b35f
 800b310:	0800b337 	.word	0x0800b337
 800b314:	0800b32d 	.word	0x0800b32d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f9dc 	bl	800b6d8 <USBD_GetDescriptor>
          break;
 800b320:	e022      	b.n	800b368 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 fb3f 	bl	800b9a8 <USBD_SetAddress>
          break;
 800b32a:	e01d      	b.n	800b368 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b32c:	6839      	ldr	r1, [r7, #0]
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fb7e 	bl	800ba30 <USBD_SetConfig>
          break;
 800b334:	e018      	b.n	800b368 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fc07 	bl	800bb4c <USBD_GetConfig>
          break;
 800b33e:	e013      	b.n	800b368 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fc37 	bl	800bbb6 <USBD_GetStatus>
          break;
 800b348:	e00e      	b.n	800b368 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fc65 	bl	800bc1c <USBD_SetFeature>
          break;
 800b352:	e009      	b.n	800b368 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b354:	6839      	ldr	r1, [r7, #0]
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 fc74 	bl	800bc44 <USBD_ClrFeature>
          break;
 800b35c:	e004      	b.n	800b368 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fcc9 	bl	800bcf8 <USBD_CtlError>
          break;
 800b366:	bf00      	nop
      }
      break;
 800b368:	e004      	b.n	800b374 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fcc3 	bl	800bcf8 <USBD_CtlError>
      break;
 800b372:	bf00      	nop
  }

  return ret;
 800b374:	7bfb      	ldrb	r3, [r7, #15]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop

0800b380 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b396:	2b40      	cmp	r3, #64	@ 0x40
 800b398:	d005      	beq.n	800b3a6 <USBD_StdItfReq+0x26>
 800b39a:	2b40      	cmp	r3, #64	@ 0x40
 800b39c:	d82e      	bhi.n	800b3fc <USBD_StdItfReq+0x7c>
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d001      	beq.n	800b3a6 <USBD_StdItfReq+0x26>
 800b3a2:	2b20      	cmp	r3, #32
 800b3a4:	d12a      	bne.n	800b3fc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	d81d      	bhi.n	800b3ee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	889b      	ldrh	r3, [r3, #4]
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d813      	bhi.n	800b3e4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	4798      	blx	r3
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	88db      	ldrh	r3, [r3, #6]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d110      	bne.n	800b3f8 <USBD_StdItfReq+0x78>
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10d      	bne.n	800b3f8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fd53 	bl	800be88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3e2:	e009      	b.n	800b3f8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fc86 	bl	800bcf8 <USBD_CtlError>
          break;
 800b3ec:	e004      	b.n	800b3f8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fc81 	bl	800bcf8 <USBD_CtlError>
          break;
 800b3f6:	e000      	b.n	800b3fa <USBD_StdItfReq+0x7a>
          break;
 800b3f8:	bf00      	nop
      }
      break;
 800b3fa:	e004      	b.n	800b406 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fc7a 	bl	800bcf8 <USBD_CtlError>
      break;
 800b404:	bf00      	nop
  }

  return USBD_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b41a:	2300      	movs	r3, #0
 800b41c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	889b      	ldrh	r3, [r3, #4]
 800b422:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b42c:	2b40      	cmp	r3, #64	@ 0x40
 800b42e:	d007      	beq.n	800b440 <USBD_StdEPReq+0x30>
 800b430:	2b40      	cmp	r3, #64	@ 0x40
 800b432:	f200 8146 	bhi.w	800b6c2 <USBD_StdEPReq+0x2b2>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00a      	beq.n	800b450 <USBD_StdEPReq+0x40>
 800b43a:	2b20      	cmp	r3, #32
 800b43c:	f040 8141 	bne.w	800b6c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	4798      	blx	r3
      break;
 800b44e:	e13d      	b.n	800b6cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b458:	2b20      	cmp	r3, #32
 800b45a:	d10a      	bne.n	800b472 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	6839      	ldr	r1, [r7, #0]
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	4798      	blx	r3
 800b46a:	4603      	mov	r3, r0
 800b46c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
 800b470:	e12d      	b.n	800b6ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	785b      	ldrb	r3, [r3, #1]
 800b476:	2b03      	cmp	r3, #3
 800b478:	d007      	beq.n	800b48a <USBD_StdEPReq+0x7a>
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	f300 811b 	bgt.w	800b6b6 <USBD_StdEPReq+0x2a6>
 800b480:	2b00      	cmp	r3, #0
 800b482:	d072      	beq.n	800b56a <USBD_StdEPReq+0x15a>
 800b484:	2b01      	cmp	r3, #1
 800b486:	d03a      	beq.n	800b4fe <USBD_StdEPReq+0xee>
 800b488:	e115      	b.n	800b6b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b490:	2b02      	cmp	r3, #2
 800b492:	d002      	beq.n	800b49a <USBD_StdEPReq+0x8a>
 800b494:	2b03      	cmp	r3, #3
 800b496:	d015      	beq.n	800b4c4 <USBD_StdEPReq+0xb4>
 800b498:	e02b      	b.n	800b4f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b49a:	7bbb      	ldrb	r3, [r7, #14]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00c      	beq.n	800b4ba <USBD_StdEPReq+0xaa>
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	2b80      	cmp	r3, #128	@ 0x80
 800b4a4:	d009      	beq.n	800b4ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f001 f88e 	bl	800c5cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b4b0:	2180      	movs	r1, #128	@ 0x80
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f001 f88a 	bl	800c5cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4b8:	e020      	b.n	800b4fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b4ba:	6839      	ldr	r1, [r7, #0]
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 fc1b 	bl	800bcf8 <USBD_CtlError>
              break;
 800b4c2:	e01b      	b.n	800b4fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	885b      	ldrh	r3, [r3, #2]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10e      	bne.n	800b4ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b4cc:	7bbb      	ldrb	r3, [r7, #14]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00b      	beq.n	800b4ea <USBD_StdEPReq+0xda>
 800b4d2:	7bbb      	ldrb	r3, [r7, #14]
 800b4d4:	2b80      	cmp	r3, #128	@ 0x80
 800b4d6:	d008      	beq.n	800b4ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	88db      	ldrh	r3, [r3, #6]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d104      	bne.n	800b4ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b4e0:	7bbb      	ldrb	r3, [r7, #14]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f001 f871 	bl	800c5cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fccc 	bl	800be88 <USBD_CtlSendStatus>

              break;
 800b4f0:	e004      	b.n	800b4fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fbff 	bl	800bcf8 <USBD_CtlError>
              break;
 800b4fa:	bf00      	nop
          }
          break;
 800b4fc:	e0e0      	b.n	800b6c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b504:	2b02      	cmp	r3, #2
 800b506:	d002      	beq.n	800b50e <USBD_StdEPReq+0xfe>
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d015      	beq.n	800b538 <USBD_StdEPReq+0x128>
 800b50c:	e026      	b.n	800b55c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00c      	beq.n	800b52e <USBD_StdEPReq+0x11e>
 800b514:	7bbb      	ldrb	r3, [r7, #14]
 800b516:	2b80      	cmp	r3, #128	@ 0x80
 800b518:	d009      	beq.n	800b52e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b51a:	7bbb      	ldrb	r3, [r7, #14]
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f001 f854 	bl	800c5cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b524:	2180      	movs	r1, #128	@ 0x80
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f001 f850 	bl	800c5cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b52c:	e01c      	b.n	800b568 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b52e:	6839      	ldr	r1, [r7, #0]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fbe1 	bl	800bcf8 <USBD_CtlError>
              break;
 800b536:	e017      	b.n	800b568 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	885b      	ldrh	r3, [r3, #2]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d112      	bne.n	800b566 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b540:	7bbb      	ldrb	r3, [r7, #14]
 800b542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b546:	2b00      	cmp	r3, #0
 800b548:	d004      	beq.n	800b554 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b54a:	7bbb      	ldrb	r3, [r7, #14]
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f001 f85b 	bl	800c60a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fc97 	bl	800be88 <USBD_CtlSendStatus>
              }
              break;
 800b55a:	e004      	b.n	800b566 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fbca 	bl	800bcf8 <USBD_CtlError>
              break;
 800b564:	e000      	b.n	800b568 <USBD_StdEPReq+0x158>
              break;
 800b566:	bf00      	nop
          }
          break;
 800b568:	e0aa      	b.n	800b6c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b570:	2b02      	cmp	r3, #2
 800b572:	d002      	beq.n	800b57a <USBD_StdEPReq+0x16a>
 800b574:	2b03      	cmp	r3, #3
 800b576:	d032      	beq.n	800b5de <USBD_StdEPReq+0x1ce>
 800b578:	e097      	b.n	800b6aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b57a:	7bbb      	ldrb	r3, [r7, #14]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d007      	beq.n	800b590 <USBD_StdEPReq+0x180>
 800b580:	7bbb      	ldrb	r3, [r7, #14]
 800b582:	2b80      	cmp	r3, #128	@ 0x80
 800b584:	d004      	beq.n	800b590 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fbb5 	bl	800bcf8 <USBD_CtlError>
                break;
 800b58e:	e091      	b.n	800b6b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b594:	2b00      	cmp	r3, #0
 800b596:	da0b      	bge.n	800b5b0 <USBD_StdEPReq+0x1a0>
 800b598:	7bbb      	ldrb	r3, [r7, #14]
 800b59a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b59e:	4613      	mov	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	3310      	adds	r3, #16
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	e00b      	b.n	800b5c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5b0:	7bbb      	ldrb	r3, [r7, #14]
 800b5b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fbf8 	bl	800bdcc <USBD_CtlSendData>
              break;
 800b5dc:	e06a      	b.n	800b6b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	da11      	bge.n	800b60a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5e6:	7bbb      	ldrb	r3, [r7, #14]
 800b5e8:	f003 020f 	and.w	r2, r3, #15
 800b5ec:	6879      	ldr	r1, [r7, #4]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	440b      	add	r3, r1
 800b5f8:	3318      	adds	r3, #24
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d117      	bne.n	800b630 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fb78 	bl	800bcf8 <USBD_CtlError>
                  break;
 800b608:	e054      	b.n	800b6b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b60a:	7bbb      	ldrb	r3, [r7, #14]
 800b60c:	f003 020f 	and.w	r2, r3, #15
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	4613      	mov	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	440b      	add	r3, r1
 800b61c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d104      	bne.n	800b630 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fb65 	bl	800bcf8 <USBD_CtlError>
                  break;
 800b62e:	e041      	b.n	800b6b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b634:	2b00      	cmp	r3, #0
 800b636:	da0b      	bge.n	800b650 <USBD_StdEPReq+0x240>
 800b638:	7bbb      	ldrb	r3, [r7, #14]
 800b63a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b63e:	4613      	mov	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	3310      	adds	r3, #16
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	4413      	add	r3, r2
 800b64c:	3304      	adds	r3, #4
 800b64e:	e00b      	b.n	800b668 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b650:	7bbb      	ldrb	r3, [r7, #14]
 800b652:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b656:	4613      	mov	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	4413      	add	r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	4413      	add	r3, r2
 800b666:	3304      	adds	r3, #4
 800b668:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <USBD_StdEPReq+0x266>
 800b670:	7bbb      	ldrb	r3, [r7, #14]
 800b672:	2b80      	cmp	r3, #128	@ 0x80
 800b674:	d103      	bne.n	800b67e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	2200      	movs	r2, #0
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	e00e      	b.n	800b69c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 ffe0 	bl	800c648 <USBD_LL_IsStallEP>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	2201      	movs	r2, #1
 800b692:	601a      	str	r2, [r3, #0]
 800b694:	e002      	b.n	800b69c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2200      	movs	r2, #0
 800b69a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fb92 	bl	800bdcc <USBD_CtlSendData>
              break;
 800b6a8:	e004      	b.n	800b6b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fb23 	bl	800bcf8 <USBD_CtlError>
              break;
 800b6b2:	bf00      	nop
          }
          break;
 800b6b4:	e004      	b.n	800b6c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fb1d 	bl	800bcf8 <USBD_CtlError>
          break;
 800b6be:	bf00      	nop
      }
      break;
 800b6c0:	e004      	b.n	800b6cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fb17 	bl	800bcf8 <USBD_CtlError>
      break;
 800b6ca:	bf00      	nop
  }

  return ret;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
	...

0800b6d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	885b      	ldrh	r3, [r3, #2]
 800b6f2:	0a1b      	lsrs	r3, r3, #8
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	2b06      	cmp	r3, #6
 800b6fa:	f200 8128 	bhi.w	800b94e <USBD_GetDescriptor+0x276>
 800b6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b704 <USBD_GetDescriptor+0x2c>)
 800b700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b704:	0800b721 	.word	0x0800b721
 800b708:	0800b739 	.word	0x0800b739
 800b70c:	0800b779 	.word	0x0800b779
 800b710:	0800b94f 	.word	0x0800b94f
 800b714:	0800b94f 	.word	0x0800b94f
 800b718:	0800b8ef 	.word	0x0800b8ef
 800b71c:	0800b91b 	.word	0x0800b91b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	7c12      	ldrb	r2, [r2, #16]
 800b72c:	f107 0108 	add.w	r1, r7, #8
 800b730:	4610      	mov	r0, r2
 800b732:	4798      	blx	r3
 800b734:	60f8      	str	r0, [r7, #12]
      break;
 800b736:	e112      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	7c1b      	ldrb	r3, [r3, #16]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10d      	bne.n	800b75c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b748:	f107 0208 	add.w	r2, r7, #8
 800b74c:	4610      	mov	r0, r2
 800b74e:	4798      	blx	r3
 800b750:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3301      	adds	r3, #1
 800b756:	2202      	movs	r2, #2
 800b758:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b75a:	e100      	b.n	800b95e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b764:	f107 0208 	add.w	r2, r7, #8
 800b768:	4610      	mov	r0, r2
 800b76a:	4798      	blx	r3
 800b76c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3301      	adds	r3, #1
 800b772:	2202      	movs	r2, #2
 800b774:	701a      	strb	r2, [r3, #0]
      break;
 800b776:	e0f2      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	885b      	ldrh	r3, [r3, #2]
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b05      	cmp	r3, #5
 800b780:	f200 80ac 	bhi.w	800b8dc <USBD_GetDescriptor+0x204>
 800b784:	a201      	add	r2, pc, #4	@ (adr r2, 800b78c <USBD_GetDescriptor+0xb4>)
 800b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78a:	bf00      	nop
 800b78c:	0800b7a5 	.word	0x0800b7a5
 800b790:	0800b7d9 	.word	0x0800b7d9
 800b794:	0800b80d 	.word	0x0800b80d
 800b798:	0800b841 	.word	0x0800b841
 800b79c:	0800b875 	.word	0x0800b875
 800b7a0:	0800b8a9 	.word	0x0800b8a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00b      	beq.n	800b7c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	7c12      	ldrb	r2, [r2, #16]
 800b7bc:	f107 0108 	add.w	r1, r7, #8
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4798      	blx	r3
 800b7c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7c6:	e091      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fa94 	bl	800bcf8 <USBD_CtlError>
            err++;
 800b7d0:	7afb      	ldrb	r3, [r7, #11]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b7d6:	e089      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00b      	beq.n	800b7fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	7c12      	ldrb	r2, [r2, #16]
 800b7f0:	f107 0108 	add.w	r1, r7, #8
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	4798      	blx	r3
 800b7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7fa:	e077      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fa7a 	bl	800bcf8 <USBD_CtlError>
            err++;
 800b804:	7afb      	ldrb	r3, [r7, #11]
 800b806:	3301      	adds	r3, #1
 800b808:	72fb      	strb	r3, [r7, #11]
          break;
 800b80a:	e06f      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00b      	beq.n	800b830 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	7c12      	ldrb	r2, [r2, #16]
 800b824:	f107 0108 	add.w	r1, r7, #8
 800b828:	4610      	mov	r0, r2
 800b82a:	4798      	blx	r3
 800b82c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b82e:	e05d      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fa60 	bl	800bcf8 <USBD_CtlError>
            err++;
 800b838:	7afb      	ldrb	r3, [r7, #11]
 800b83a:	3301      	adds	r3, #1
 800b83c:	72fb      	strb	r3, [r7, #11]
          break;
 800b83e:	e055      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00b      	beq.n	800b864 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	7c12      	ldrb	r2, [r2, #16]
 800b858:	f107 0108 	add.w	r1, r7, #8
 800b85c:	4610      	mov	r0, r2
 800b85e:	4798      	blx	r3
 800b860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b862:	e043      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fa46 	bl	800bcf8 <USBD_CtlError>
            err++;
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	3301      	adds	r3, #1
 800b870:	72fb      	strb	r3, [r7, #11]
          break;
 800b872:	e03b      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b87a:	695b      	ldr	r3, [r3, #20]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00b      	beq.n	800b898 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b886:	695b      	ldr	r3, [r3, #20]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	7c12      	ldrb	r2, [r2, #16]
 800b88c:	f107 0108 	add.w	r1, r7, #8
 800b890:	4610      	mov	r0, r2
 800b892:	4798      	blx	r3
 800b894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b896:	e029      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b898:	6839      	ldr	r1, [r7, #0]
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 fa2c 	bl	800bcf8 <USBD_CtlError>
            err++;
 800b8a0:	7afb      	ldrb	r3, [r7, #11]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8a6:	e021      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	7c12      	ldrb	r2, [r2, #16]
 800b8c0:	f107 0108 	add.w	r1, r7, #8
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	4798      	blx	r3
 800b8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8ca:	e00f      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fa12 	bl	800bcf8 <USBD_CtlError>
            err++;
 800b8d4:	7afb      	ldrb	r3, [r7, #11]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b8da:	e007      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b8dc:	6839      	ldr	r1, [r7, #0]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fa0a 	bl	800bcf8 <USBD_CtlError>
          err++;
 800b8e4:	7afb      	ldrb	r3, [r7, #11]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b8ea:	e038      	b.n	800b95e <USBD_GetDescriptor+0x286>
 800b8ec:	e037      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7c1b      	ldrb	r3, [r3, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d109      	bne.n	800b90a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8fe:	f107 0208 	add.w	r2, r7, #8
 800b902:	4610      	mov	r0, r2
 800b904:	4798      	blx	r3
 800b906:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b908:	e029      	b.n	800b95e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f9f3 	bl	800bcf8 <USBD_CtlError>
        err++;
 800b912:	7afb      	ldrb	r3, [r7, #11]
 800b914:	3301      	adds	r3, #1
 800b916:	72fb      	strb	r3, [r7, #11]
      break;
 800b918:	e021      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	7c1b      	ldrb	r3, [r3, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10d      	bne.n	800b93e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b92a:	f107 0208 	add.w	r2, r7, #8
 800b92e:	4610      	mov	r0, r2
 800b930:	4798      	blx	r3
 800b932:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3301      	adds	r3, #1
 800b938:	2207      	movs	r2, #7
 800b93a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b93c:	e00f      	b.n	800b95e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f9d9 	bl	800bcf8 <USBD_CtlError>
        err++;
 800b946:	7afb      	ldrb	r3, [r7, #11]
 800b948:	3301      	adds	r3, #1
 800b94a:	72fb      	strb	r3, [r7, #11]
      break;
 800b94c:	e007      	b.n	800b95e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f9d1 	bl	800bcf8 <USBD_CtlError>
      err++;
 800b956:	7afb      	ldrb	r3, [r7, #11]
 800b958:	3301      	adds	r3, #1
 800b95a:	72fb      	strb	r3, [r7, #11]
      break;
 800b95c:	bf00      	nop
  }

  if (err != 0U)
 800b95e:	7afb      	ldrb	r3, [r7, #11]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d11c      	bne.n	800b99e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b964:	893b      	ldrh	r3, [r7, #8]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d011      	beq.n	800b98e <USBD_GetDescriptor+0x2b6>
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	88db      	ldrh	r3, [r3, #6]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00d      	beq.n	800b98e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	88da      	ldrh	r2, [r3, #6]
 800b976:	893b      	ldrh	r3, [r7, #8]
 800b978:	4293      	cmp	r3, r2
 800b97a:	bf28      	it	cs
 800b97c:	4613      	movcs	r3, r2
 800b97e:	b29b      	uxth	r3, r3
 800b980:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b982:	893b      	ldrh	r3, [r7, #8]
 800b984:	461a      	mov	r2, r3
 800b986:	68f9      	ldr	r1, [r7, #12]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fa1f 	bl	800bdcc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	88db      	ldrh	r3, [r3, #6]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d104      	bne.n	800b9a0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fa76 	bl	800be88 <USBD_CtlSendStatus>
 800b99c:	e000      	b.n	800b9a0 <USBD_GetDescriptor+0x2c8>
    return;
 800b99e:	bf00      	nop
    }
  }
}
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop

0800b9a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	889b      	ldrh	r3, [r3, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d130      	bne.n	800ba1c <USBD_SetAddress+0x74>
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	88db      	ldrh	r3, [r3, #6]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d12c      	bne.n	800ba1c <USBD_SetAddress+0x74>
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	885b      	ldrh	r3, [r3, #2]
 800b9c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b9c8:	d828      	bhi.n	800ba1c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	885b      	ldrh	r3, [r3, #2]
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	d104      	bne.n	800b9ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f988 	bl	800bcf8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9e8:	e01d      	b.n	800ba26 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	7bfa      	ldrb	r2, [r7, #15]
 800b9ee:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fe52 	bl	800c6a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fa43 	bl	800be88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d004      	beq.n	800ba12 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba10:	e009      	b.n	800ba26 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1a:	e004      	b.n	800ba26 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f96a 	bl	800bcf8 <USBD_CtlError>
  }
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
	...

0800ba30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	885b      	ldrh	r3, [r3, #2]
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	4b41      	ldr	r3, [pc, #260]	@ (800bb48 <USBD_SetConfig+0x118>)
 800ba42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba44:	4b40      	ldr	r3, [pc, #256]	@ (800bb48 <USBD_SetConfig+0x118>)
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d904      	bls.n	800ba56 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f952 	bl	800bcf8 <USBD_CtlError>
 800ba54:	e075      	b.n	800bb42 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d002      	beq.n	800ba66 <USBD_SetConfig+0x36>
 800ba60:	2b03      	cmp	r3, #3
 800ba62:	d023      	beq.n	800baac <USBD_SetConfig+0x7c>
 800ba64:	e062      	b.n	800bb2c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ba66:	4b38      	ldr	r3, [pc, #224]	@ (800bb48 <USBD_SetConfig+0x118>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d01a      	beq.n	800baa4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ba6e:	4b36      	ldr	r3, [pc, #216]	@ (800bb48 <USBD_SetConfig+0x118>)
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2203      	movs	r2, #3
 800ba7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba80:	4b31      	ldr	r3, [pc, #196]	@ (800bb48 <USBD_SetConfig+0x118>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	4619      	mov	r1, r3
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7ff f9e7 	bl	800ae5a <USBD_SetClassConfig>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d104      	bne.n	800ba9c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f92f 	bl	800bcf8 <USBD_CtlError>
            return;
 800ba9a:	e052      	b.n	800bb42 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f9f3 	bl	800be88 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800baa2:	e04e      	b.n	800bb42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f9ef 	bl	800be88 <USBD_CtlSendStatus>
        break;
 800baaa:	e04a      	b.n	800bb42 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800baac:	4b26      	ldr	r3, [pc, #152]	@ (800bb48 <USBD_SetConfig+0x118>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d112      	bne.n	800bada <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2202      	movs	r2, #2
 800bab8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800babc:	4b22      	ldr	r3, [pc, #136]	@ (800bb48 <USBD_SetConfig+0x118>)
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	461a      	mov	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bac6:	4b20      	ldr	r3, [pc, #128]	@ (800bb48 <USBD_SetConfig+0x118>)
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7ff f9e3 	bl	800ae98 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f9d8 	bl	800be88 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bad8:	e033      	b.n	800bb42 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bada:	4b1b      	ldr	r3, [pc, #108]	@ (800bb48 <USBD_SetConfig+0x118>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d01d      	beq.n	800bb24 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	b2db      	uxtb	r3, r3
 800baee:	4619      	mov	r1, r3
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7ff f9d1 	bl	800ae98 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800baf6:	4b14      	ldr	r3, [pc, #80]	@ (800bb48 <USBD_SetConfig+0x118>)
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb00:	4b11      	ldr	r3, [pc, #68]	@ (800bb48 <USBD_SetConfig+0x118>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7ff f9a7 	bl	800ae5a <USBD_SetClassConfig>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d104      	bne.n	800bb1c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f8ef 	bl	800bcf8 <USBD_CtlError>
            return;
 800bb1a:	e012      	b.n	800bb42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f9b3 	bl	800be88 <USBD_CtlSendStatus>
        break;
 800bb22:	e00e      	b.n	800bb42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 f9af 	bl	800be88 <USBD_CtlSendStatus>
        break;
 800bb2a:	e00a      	b.n	800bb42 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f8e2 	bl	800bcf8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bb34:	4b04      	ldr	r3, [pc, #16]	@ (800bb48 <USBD_SetConfig+0x118>)
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7ff f9ac 	bl	800ae98 <USBD_ClrClassConfig>
        break;
 800bb40:	bf00      	nop
    }
  }
}
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20000438 	.word	0x20000438

0800bb4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	88db      	ldrh	r3, [r3, #6]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d004      	beq.n	800bb68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f8c9 	bl	800bcf8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb66:	e022      	b.n	800bbae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	dc02      	bgt.n	800bb78 <USBD_GetConfig+0x2c>
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	dc03      	bgt.n	800bb7e <USBD_GetConfig+0x32>
 800bb76:	e015      	b.n	800bba4 <USBD_GetConfig+0x58>
 800bb78:	2b03      	cmp	r3, #3
 800bb7a:	d00b      	beq.n	800bb94 <USBD_GetConfig+0x48>
 800bb7c:	e012      	b.n	800bba4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	3308      	adds	r3, #8
 800bb88:	2201      	movs	r2, #1
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 f91d 	bl	800bdcc <USBD_CtlSendData>
        break;
 800bb92:	e00c      	b.n	800bbae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	3304      	adds	r3, #4
 800bb98:	2201      	movs	r2, #1
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 f915 	bl	800bdcc <USBD_CtlSendData>
        break;
 800bba2:	e004      	b.n	800bbae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f8a6 	bl	800bcf8 <USBD_CtlError>
        break;
 800bbac:	bf00      	nop
}
 800bbae:	bf00      	nop
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b082      	sub	sp, #8
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d81e      	bhi.n	800bc0a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	88db      	ldrh	r3, [r3, #6]
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d004      	beq.n	800bbde <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bbd4:	6839      	ldr	r1, [r7, #0]
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f88e 	bl	800bcf8 <USBD_CtlError>
        break;
 800bbdc:	e01a      	b.n	800bc14 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d005      	beq.n	800bbfa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	f043 0202 	orr.w	r2, r3, #2
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	330c      	adds	r3, #12
 800bbfe:	2202      	movs	r2, #2
 800bc00:	4619      	mov	r1, r3
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f8e2 	bl	800bdcc <USBD_CtlSendData>
      break;
 800bc08:	e004      	b.n	800bc14 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bc0a:	6839      	ldr	r1, [r7, #0]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f873 	bl	800bcf8 <USBD_CtlError>
      break;
 800bc12:	bf00      	nop
  }
}
 800bc14:	bf00      	nop
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	885b      	ldrh	r3, [r3, #2]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d106      	bne.n	800bc3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f926 	bl	800be88 <USBD_CtlSendStatus>
  }
}
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc54:	3b01      	subs	r3, #1
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d80b      	bhi.n	800bc72 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	885b      	ldrh	r3, [r3, #2]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d10c      	bne.n	800bc7c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f90c 	bl	800be88 <USBD_CtlSendStatus>
      }
      break;
 800bc70:	e004      	b.n	800bc7c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f83f 	bl	800bcf8 <USBD_CtlError>
      break;
 800bc7a:	e000      	b.n	800bc7e <USBD_ClrFeature+0x3a>
      break;
 800bc7c:	bf00      	nop
  }
}
 800bc7e:	bf00      	nop
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	781a      	ldrb	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	785a      	ldrb	r2, [r3, #1]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	3302      	adds	r3, #2
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	3303      	adds	r3, #3
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	021b      	lsls	r3, r3, #8
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	4413      	add	r3, r2
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	3305      	adds	r3, #5
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	021b      	lsls	r3, r3, #8
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	4413      	add	r3, r2
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	3306      	adds	r3, #6
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	3307      	adds	r3, #7
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	021b      	lsls	r3, r3, #8
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	4413      	add	r3, r2
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	80da      	strh	r2, [r3, #6]

}
 800bcee:	bf00      	nop
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bc80      	pop	{r7}
 800bcf6:	4770      	bx	lr

0800bcf8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bd02:	2180      	movs	r1, #128	@ 0x80
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fc61 	bl	800c5cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fc5d 	bl	800c5cc <USBD_LL_StallEP>
}
 800bd12:	bf00      	nop
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b086      	sub	sp, #24
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd26:	2300      	movs	r3, #0
 800bd28:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d032      	beq.n	800bd96 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f000 f834 	bl	800bd9e <USBD_GetLen>
 800bd36:	4603      	mov	r3, r0
 800bd38:	3301      	adds	r3, #1
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bd44:	7dfb      	ldrb	r3, [r7, #23]
 800bd46:	1c5a      	adds	r2, r3, #1
 800bd48:	75fa      	strb	r2, [r7, #23]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	4413      	add	r3, r2
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	7812      	ldrb	r2, [r2, #0]
 800bd54:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
 800bd58:	1c5a      	adds	r2, r3, #1
 800bd5a:	75fa      	strb	r2, [r7, #23]
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	4413      	add	r3, r2
 800bd62:	2203      	movs	r2, #3
 800bd64:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bd66:	e012      	b.n	800bd8e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	60fa      	str	r2, [r7, #12]
 800bd6e:	7dfa      	ldrb	r2, [r7, #23]
 800bd70:	1c51      	adds	r1, r2, #1
 800bd72:	75f9      	strb	r1, [r7, #23]
 800bd74:	4611      	mov	r1, r2
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	440a      	add	r2, r1
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bd7e:	7dfb      	ldrb	r3, [r7, #23]
 800bd80:	1c5a      	adds	r2, r3, #1
 800bd82:	75fa      	strb	r2, [r7, #23]
 800bd84:	461a      	mov	r2, r3
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	4413      	add	r3, r2
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1e8      	bne.n	800bd68 <USBD_GetString+0x4e>
    }
  }
}
 800bd96:	bf00      	nop
 800bd98:	3718      	adds	r7, #24
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b085      	sub	sp, #20
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bda6:	2300      	movs	r3, #0
 800bda8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bdaa:	e005      	b.n	800bdb8 <USBD_GetLen+0x1a>
  {
    len++;
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1f5      	bne.n	800bdac <USBD_GetLen+0xe>
  }

  return len;
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bc80      	pop	{r7}
 800bdca:	4770      	bx	lr

0800bdcc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2202      	movs	r2, #2
 800bdde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bde2:	88fa      	ldrh	r2, [r7, #6]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bde8:	88fa      	ldrh	r2, [r7, #6]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdee:	88fb      	ldrh	r3, [r7, #6]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f000 fc72 	bl	800c6de <USBD_LL_Transmit>

  return USBD_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	4613      	mov	r3, r2
 800be10:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be12:	88fb      	ldrh	r3, [r7, #6]
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	2100      	movs	r1, #0
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 fc60 	bl	800c6de <USBD_LL_Transmit>

  return USBD_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	4613      	mov	r3, r2
 800be34:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2203      	movs	r2, #3
 800be3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800be3e:	88fa      	ldrh	r2, [r7, #6]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800be46:	88fa      	ldrh	r2, [r7, #6]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be4e:	88fb      	ldrh	r3, [r7, #6]
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	2100      	movs	r1, #0
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f000 fc65 	bl	800c724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	4613      	mov	r3, r2
 800be70:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be72:	88fb      	ldrh	r3, [r7, #6]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	2100      	movs	r1, #0
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f000 fc53 	bl	800c724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2204      	movs	r2, #4
 800be94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be98:	2300      	movs	r3, #0
 800be9a:	2200      	movs	r2, #0
 800be9c:	2100      	movs	r1, #0
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fc1d 	bl	800c6de <USBD_LL_Transmit>

  return USBD_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b082      	sub	sp, #8
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2205      	movs	r2, #5
 800beba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bebe:	2300      	movs	r3, #0
 800bec0:	2200      	movs	r2, #0
 800bec2:	2100      	movs	r1, #0
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fc2d 	bl	800c724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bed8:	2200      	movs	r2, #0
 800beda:	4912      	ldr	r1, [pc, #72]	@ (800bf24 <MX_USB_DEVICE_Init+0x50>)
 800bedc:	4812      	ldr	r0, [pc, #72]	@ (800bf28 <MX_USB_DEVICE_Init+0x54>)
 800bede:	f7fe ff62 	bl	800ada6 <USBD_Init>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d001      	beq.n	800beec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bee8:	f7f7 f998 	bl	800321c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800beec:	490f      	ldr	r1, [pc, #60]	@ (800bf2c <MX_USB_DEVICE_Init+0x58>)
 800beee:	480e      	ldr	r0, [pc, #56]	@ (800bf28 <MX_USB_DEVICE_Init+0x54>)
 800bef0:	f7fe ff84 	bl	800adfc <USBD_RegisterClass>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800befa:	f7f7 f98f 	bl	800321c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800befe:	490c      	ldr	r1, [pc, #48]	@ (800bf30 <MX_USB_DEVICE_Init+0x5c>)
 800bf00:	4809      	ldr	r0, [pc, #36]	@ (800bf28 <MX_USB_DEVICE_Init+0x54>)
 800bf02:	f7fe feb5 	bl	800ac70 <USBD_CDC_RegisterInterface>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bf0c:	f7f7 f986 	bl	800321c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bf10:	4805      	ldr	r0, [pc, #20]	@ (800bf28 <MX_USB_DEVICE_Init+0x54>)
 800bf12:	f7fe ff8c 	bl	800ae2e <USBD_Start>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bf1c:	f7f7 f97e 	bl	800321c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bf20:	bf00      	nop
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	20000154 	.word	0x20000154
 800bf28:	2000043c 	.word	0x2000043c
 800bf2c:	20000040 	.word	0x20000040
 800bf30:	20000144 	.word	0x20000144

0800bf34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf38:	2200      	movs	r2, #0
 800bf3a:	4905      	ldr	r1, [pc, #20]	@ (800bf50 <CDC_Init_FS+0x1c>)
 800bf3c:	4805      	ldr	r0, [pc, #20]	@ (800bf54 <CDC_Init_FS+0x20>)
 800bf3e:	f7fe fead 	bl	800ac9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf42:	4905      	ldr	r1, [pc, #20]	@ (800bf58 <CDC_Init_FS+0x24>)
 800bf44:	4803      	ldr	r0, [pc, #12]	@ (800bf54 <CDC_Init_FS+0x20>)
 800bf46:	f7fe fec2 	bl	800acce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	20000ae8 	.word	0x20000ae8
 800bf54:	2000043c 	.word	0x2000043c
 800bf58:	20000700 	.word	0x20000700

0800bf5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bc80      	pop	{r7}
 800bf68:	4770      	bx	lr
	...

0800bf6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	4603      	mov	r3, r0
 800bf74:	6039      	str	r1, [r7, #0]
 800bf76:	71fb      	strb	r3, [r7, #7]
 800bf78:	4613      	mov	r3, r2
 800bf7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf7c:	79fb      	ldrb	r3, [r7, #7]
 800bf7e:	2b23      	cmp	r3, #35	@ 0x23
 800bf80:	d84a      	bhi.n	800c018 <CDC_Control_FS+0xac>
 800bf82:	a201      	add	r2, pc, #4	@ (adr r2, 800bf88 <CDC_Control_FS+0x1c>)
 800bf84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf88:	0800c019 	.word	0x0800c019
 800bf8c:	0800c019 	.word	0x0800c019
 800bf90:	0800c019 	.word	0x0800c019
 800bf94:	0800c019 	.word	0x0800c019
 800bf98:	0800c019 	.word	0x0800c019
 800bf9c:	0800c019 	.word	0x0800c019
 800bfa0:	0800c019 	.word	0x0800c019
 800bfa4:	0800c019 	.word	0x0800c019
 800bfa8:	0800c019 	.word	0x0800c019
 800bfac:	0800c019 	.word	0x0800c019
 800bfb0:	0800c019 	.word	0x0800c019
 800bfb4:	0800c019 	.word	0x0800c019
 800bfb8:	0800c019 	.word	0x0800c019
 800bfbc:	0800c019 	.word	0x0800c019
 800bfc0:	0800c019 	.word	0x0800c019
 800bfc4:	0800c019 	.word	0x0800c019
 800bfc8:	0800c019 	.word	0x0800c019
 800bfcc:	0800c019 	.word	0x0800c019
 800bfd0:	0800c019 	.word	0x0800c019
 800bfd4:	0800c019 	.word	0x0800c019
 800bfd8:	0800c019 	.word	0x0800c019
 800bfdc:	0800c019 	.word	0x0800c019
 800bfe0:	0800c019 	.word	0x0800c019
 800bfe4:	0800c019 	.word	0x0800c019
 800bfe8:	0800c019 	.word	0x0800c019
 800bfec:	0800c019 	.word	0x0800c019
 800bff0:	0800c019 	.word	0x0800c019
 800bff4:	0800c019 	.word	0x0800c019
 800bff8:	0800c019 	.word	0x0800c019
 800bffc:	0800c019 	.word	0x0800c019
 800c000:	0800c019 	.word	0x0800c019
 800c004:	0800c019 	.word	0x0800c019
 800c008:	0800c019 	.word	0x0800c019
 800c00c:	0800c019 	.word	0x0800c019
 800c010:	0800c019 	.word	0x0800c019
 800c014:	0800c019 	.word	0x0800c019
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c018:	bf00      	nop
  }

  return (USBD_OK);
 800c01a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	bc80      	pop	{r7}
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop

0800c028 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c032:	6879      	ldr	r1, [r7, #4]
 800c034:	480a      	ldr	r0, [pc, #40]	@ (800c060 <CDC_Receive_FS+0x38>)
 800c036:	f7fe fe4a 	bl	800acce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c03a:	4809      	ldr	r0, [pc, #36]	@ (800c060 <CDC_Receive_FS+0x38>)
 800c03c:	f7fe fe89 	bl	800ad52 <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d006      	beq.n	800c056 <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	461a      	mov	r2, r3
 800c04e:	4905      	ldr	r1, [pc, #20]	@ (800c064 <CDC_Receive_FS+0x3c>)
 800c050:	4805      	ldr	r0, [pc, #20]	@ (800c068 <CDC_Receive_FS+0x40>)
 800c052:	f000 fc3d 	bl	800c8d0 <memcpy>
  }
  return (USBD_OK);
 800c056:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	2000043c 	.word	0x2000043c
 800c064:	20000700 	.word	0x20000700
 800c068:	20000350 	.word	0x20000350

0800c06c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	460b      	mov	r3, r1
 800c076:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c078:	2300      	movs	r3, #0
 800c07a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c07c:	4b0d      	ldr	r3, [pc, #52]	@ (800c0b4 <CDC_Transmit_FS+0x48>)
 800c07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c082:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d001      	beq.n	800c092 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c08e:	2301      	movs	r3, #1
 800c090:	e00b      	b.n	800c0aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c092:	887b      	ldrh	r3, [r7, #2]
 800c094:	461a      	mov	r2, r3
 800c096:	6879      	ldr	r1, [r7, #4]
 800c098:	4806      	ldr	r0, [pc, #24]	@ (800c0b4 <CDC_Transmit_FS+0x48>)
 800c09a:	f7fe fdff 	bl	800ac9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c09e:	4805      	ldr	r0, [pc, #20]	@ (800c0b4 <CDC_Transmit_FS+0x48>)
 800c0a0:	f7fe fe28 	bl	800acf4 <USBD_CDC_TransmitPacket>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	2000043c 	.word	0x2000043c

0800c0b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	4603      	mov	r3, r0
 800c0c0:	6039      	str	r1, [r7, #0]
 800c0c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	2212      	movs	r2, #18
 800c0c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c0ca:	4b03      	ldr	r3, [pc, #12]	@ (800c0d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bc80      	pop	{r7}
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	20000170 	.word	0x20000170

0800c0dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	6039      	str	r1, [r7, #0]
 800c0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2204      	movs	r2, #4
 800c0ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0ee:	4b03      	ldr	r3, [pc, #12]	@ (800c0fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bc80      	pop	{r7}
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	20000184 	.word	0x20000184

0800c100 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	4603      	mov	r3, r0
 800c108:	6039      	str	r1, [r7, #0]
 800c10a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c10c:	79fb      	ldrb	r3, [r7, #7]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d105      	bne.n	800c11e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c112:	683a      	ldr	r2, [r7, #0]
 800c114:	4907      	ldr	r1, [pc, #28]	@ (800c134 <USBD_FS_ProductStrDescriptor+0x34>)
 800c116:	4808      	ldr	r0, [pc, #32]	@ (800c138 <USBD_FS_ProductStrDescriptor+0x38>)
 800c118:	f7ff fdff 	bl	800bd1a <USBD_GetString>
 800c11c:	e004      	b.n	800c128 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	4904      	ldr	r1, [pc, #16]	@ (800c134 <USBD_FS_ProductStrDescriptor+0x34>)
 800c122:	4805      	ldr	r0, [pc, #20]	@ (800c138 <USBD_FS_ProductStrDescriptor+0x38>)
 800c124:	f7ff fdf9 	bl	800bd1a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c128:	4b02      	ldr	r3, [pc, #8]	@ (800c134 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20000ed0 	.word	0x20000ed0
 800c138:	0800d9cc 	.word	0x0800d9cc

0800c13c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	4603      	mov	r3, r0
 800c144:	6039      	str	r1, [r7, #0]
 800c146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	4904      	ldr	r1, [pc, #16]	@ (800c15c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c14c:	4804      	ldr	r0, [pc, #16]	@ (800c160 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c14e:	f7ff fde4 	bl	800bd1a <USBD_GetString>
  return USBD_StrDesc;
 800c152:	4b02      	ldr	r3, [pc, #8]	@ (800c15c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c154:	4618      	mov	r0, r3
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	20000ed0 	.word	0x20000ed0
 800c160:	0800d9e4 	.word	0x0800d9e4

0800c164 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	4603      	mov	r3, r0
 800c16c:	6039      	str	r1, [r7, #0]
 800c16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	221a      	movs	r2, #26
 800c174:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c176:	f000 f843 	bl	800c200 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c17a:	4b02      	ldr	r3, [pc, #8]	@ (800c184 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	20000188 	.word	0x20000188

0800c188 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	4603      	mov	r3, r0
 800c190:	6039      	str	r1, [r7, #0]
 800c192:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c194:	79fb      	ldrb	r3, [r7, #7]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d105      	bne.n	800c1a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	4907      	ldr	r1, [pc, #28]	@ (800c1bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c19e:	4808      	ldr	r0, [pc, #32]	@ (800c1c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1a0:	f7ff fdbb 	bl	800bd1a <USBD_GetString>
 800c1a4:	e004      	b.n	800c1b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	4904      	ldr	r1, [pc, #16]	@ (800c1bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c1aa:	4805      	ldr	r0, [pc, #20]	@ (800c1c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1ac:	f7ff fdb5 	bl	800bd1a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1b0:	4b02      	ldr	r3, [pc, #8]	@ (800c1bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20000ed0 	.word	0x20000ed0
 800c1c0:	0800d9f8 	.word	0x0800d9f8

0800c1c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	6039      	str	r1, [r7, #0]
 800c1ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1d0:	79fb      	ldrb	r3, [r7, #7]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d105      	bne.n	800c1e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	4907      	ldr	r1, [pc, #28]	@ (800c1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1da:	4808      	ldr	r0, [pc, #32]	@ (800c1fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1dc:	f7ff fd9d 	bl	800bd1a <USBD_GetString>
 800c1e0:	e004      	b.n	800c1ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1e2:	683a      	ldr	r2, [r7, #0]
 800c1e4:	4904      	ldr	r1, [pc, #16]	@ (800c1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1e6:	4805      	ldr	r0, [pc, #20]	@ (800c1fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1e8:	f7ff fd97 	bl	800bd1a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1ec:	4b02      	ldr	r3, [pc, #8]	@ (800c1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20000ed0 	.word	0x20000ed0
 800c1fc:	0800da04 	.word	0x0800da04

0800c200 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c206:	4b0f      	ldr	r3, [pc, #60]	@ (800c244 <Get_SerialNum+0x44>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c20c:	4b0e      	ldr	r3, [pc, #56]	@ (800c248 <Get_SerialNum+0x48>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c212:	4b0e      	ldr	r3, [pc, #56]	@ (800c24c <Get_SerialNum+0x4c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4413      	add	r3, r2
 800c21e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d009      	beq.n	800c23a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c226:	2208      	movs	r2, #8
 800c228:	4909      	ldr	r1, [pc, #36]	@ (800c250 <Get_SerialNum+0x50>)
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f000 f814 	bl	800c258 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c230:	2204      	movs	r2, #4
 800c232:	4908      	ldr	r1, [pc, #32]	@ (800c254 <Get_SerialNum+0x54>)
 800c234:	68b8      	ldr	r0, [r7, #8]
 800c236:	f000 f80f 	bl	800c258 <IntToUnicode>
  }
}
 800c23a:	bf00      	nop
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	1ffff7e8 	.word	0x1ffff7e8
 800c248:	1ffff7ec 	.word	0x1ffff7ec
 800c24c:	1ffff7f0 	.word	0x1ffff7f0
 800c250:	2000018a 	.word	0x2000018a
 800c254:	2000019a 	.word	0x2000019a

0800c258 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c258:	b480      	push	{r7}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	4613      	mov	r3, r2
 800c264:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c266:	2300      	movs	r3, #0
 800c268:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c26a:	2300      	movs	r3, #0
 800c26c:	75fb      	strb	r3, [r7, #23]
 800c26e:	e027      	b.n	800c2c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	0f1b      	lsrs	r3, r3, #28
 800c274:	2b09      	cmp	r3, #9
 800c276:	d80b      	bhi.n	800c290 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	0f1b      	lsrs	r3, r3, #28
 800c27c:	b2da      	uxtb	r2, r3
 800c27e:	7dfb      	ldrb	r3, [r7, #23]
 800c280:	005b      	lsls	r3, r3, #1
 800c282:	4619      	mov	r1, r3
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	440b      	add	r3, r1
 800c288:	3230      	adds	r2, #48	@ 0x30
 800c28a:	b2d2      	uxtb	r2, r2
 800c28c:	701a      	strb	r2, [r3, #0]
 800c28e:	e00a      	b.n	800c2a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	0f1b      	lsrs	r3, r3, #28
 800c294:	b2da      	uxtb	r2, r3
 800c296:	7dfb      	ldrb	r3, [r7, #23]
 800c298:	005b      	lsls	r3, r3, #1
 800c29a:	4619      	mov	r1, r3
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	440b      	add	r3, r1
 800c2a0:	3237      	adds	r2, #55	@ 0x37
 800c2a2:	b2d2      	uxtb	r2, r2
 800c2a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	011b      	lsls	r3, r3, #4
 800c2aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c2ba:	7dfb      	ldrb	r3, [r7, #23]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	75fb      	strb	r3, [r7, #23]
 800c2c0:	7dfa      	ldrb	r2, [r7, #23]
 800c2c2:	79fb      	ldrb	r3, [r7, #7]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d3d3      	bcc.n	800c270 <IntToUnicode+0x18>
  }
}
 800c2c8:	bf00      	nop
 800c2ca:	bf00      	nop
 800c2cc:	371c      	adds	r7, #28
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bc80      	pop	{r7}
 800c2d2:	4770      	bx	lr

0800c2d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a0d      	ldr	r2, [pc, #52]	@ (800c318 <HAL_PCD_MspInit+0x44>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d113      	bne.n	800c30e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c31c <HAL_PCD_MspInit+0x48>)
 800c2e8:	69db      	ldr	r3, [r3, #28]
 800c2ea:	4a0c      	ldr	r2, [pc, #48]	@ (800c31c <HAL_PCD_MspInit+0x48>)
 800c2ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c2f0:	61d3      	str	r3, [r2, #28]
 800c2f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c31c <HAL_PCD_MspInit+0x48>)
 800c2f4:	69db      	ldr	r3, [r3, #28]
 800c2f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c2fe:	2200      	movs	r2, #0
 800c300:	2100      	movs	r1, #0
 800c302:	2014      	movs	r0, #20
 800c304:	f7f7 fd6f 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c308:	2014      	movs	r0, #20
 800c30a:	f7f7 fd88 	bl	8003e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c30e:	bf00      	nop
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	40005c00 	.word	0x40005c00
 800c31c:	40021000 	.word	0x40021000

0800c320 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800c334:	4619      	mov	r1, r3
 800c336:	4610      	mov	r0, r2
 800c338:	f7fe fdc1 	bl	800aebe <USBD_LL_SetupStage>
}
 800c33c:	bf00      	nop
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	460b      	mov	r3, r1
 800c34e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800c356:	78fa      	ldrb	r2, [r7, #3]
 800c358:	6879      	ldr	r1, [r7, #4]
 800c35a:	4613      	mov	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	4413      	add	r3, r2
 800c360:	00db      	lsls	r3, r3, #3
 800c362:	440b      	add	r3, r1
 800c364:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	78fb      	ldrb	r3, [r7, #3]
 800c36c:	4619      	mov	r1, r3
 800c36e:	f7fe fdf3 	bl	800af58 <USBD_LL_DataOutStage>
}
 800c372:	bf00      	nop
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b082      	sub	sp, #8
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	460b      	mov	r3, r1
 800c384:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800c38c:	78fa      	ldrb	r2, [r7, #3]
 800c38e:	6879      	ldr	r1, [r7, #4]
 800c390:	4613      	mov	r3, r2
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	4413      	add	r3, r2
 800c396:	00db      	lsls	r3, r3, #3
 800c398:	440b      	add	r3, r1
 800c39a:	333c      	adds	r3, #60	@ 0x3c
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	78fb      	ldrb	r3, [r7, #3]
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	f7fe fe4a 	bl	800b03a <USBD_LL_DataInStage>
}
 800c3a6:	bf00      	nop
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fe ff5a 	bl	800b276 <USBD_LL_SOF>
}
 800c3c2:	bf00      	nop
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b084      	sub	sp, #16
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d001      	beq.n	800c3e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c3de:	f7f6 ff1d 	bl	800321c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c3e8:	7bfa      	ldrb	r2, [r7, #15]
 800c3ea:	4611      	mov	r1, r2
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fe ff0a 	bl	800b206 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7fe fec3 	bl	800b184 <USBD_LL_Reset>
}
 800c3fe:	bf00      	nop
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
	...

0800c408 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c416:	4618      	mov	r0, r3
 800c418:	f7fe ff04 	bl	800b224 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	699b      	ldr	r3, [r3, #24]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d005      	beq.n	800c430 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c424:	4b04      	ldr	r3, [pc, #16]	@ (800c438 <HAL_PCD_SuspendCallback+0x30>)
 800c426:	691b      	ldr	r3, [r3, #16]
 800c428:	4a03      	ldr	r2, [pc, #12]	@ (800c438 <HAL_PCD_SuspendCallback+0x30>)
 800c42a:	f043 0306 	orr.w	r3, r3, #6
 800c42e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c430:	bf00      	nop
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	e000ed00 	.word	0xe000ed00

0800c43c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7fe fefe 	bl	800b24c <USBD_LL_Resume>
}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c460:	4a28      	ldr	r2, [pc, #160]	@ (800c504 <USBD_LL_Init+0xac>)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4a26      	ldr	r2, [pc, #152]	@ (800c504 <USBD_LL_Init+0xac>)
 800c46c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c470:	4b24      	ldr	r3, [pc, #144]	@ (800c504 <USBD_LL_Init+0xac>)
 800c472:	4a25      	ldr	r2, [pc, #148]	@ (800c508 <USBD_LL_Init+0xb0>)
 800c474:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c476:	4b23      	ldr	r3, [pc, #140]	@ (800c504 <USBD_LL_Init+0xac>)
 800c478:	2208      	movs	r2, #8
 800c47a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c47c:	4b21      	ldr	r3, [pc, #132]	@ (800c504 <USBD_LL_Init+0xac>)
 800c47e:	2202      	movs	r2, #2
 800c480:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c482:	4b20      	ldr	r3, [pc, #128]	@ (800c504 <USBD_LL_Init+0xac>)
 800c484:	2200      	movs	r2, #0
 800c486:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c488:	4b1e      	ldr	r3, [pc, #120]	@ (800c504 <USBD_LL_Init+0xac>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c48e:	4b1d      	ldr	r3, [pc, #116]	@ (800c504 <USBD_LL_Init+0xac>)
 800c490:	2200      	movs	r2, #0
 800c492:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c494:	481b      	ldr	r0, [pc, #108]	@ (800c504 <USBD_LL_Init+0xac>)
 800c496:	f7f8 fcfd 	bl	8004e94 <HAL_PCD_Init>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c4a0:	f7f6 febc 	bl	800321c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c4aa:	2318      	movs	r3, #24
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	f7fa f83c 	bl	800652c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c4ba:	2358      	movs	r3, #88	@ 0x58
 800c4bc:	2200      	movs	r2, #0
 800c4be:	2180      	movs	r1, #128	@ 0x80
 800c4c0:	f7fa f834 	bl	800652c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c4ca:	23c0      	movs	r3, #192	@ 0xc0
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2181      	movs	r1, #129	@ 0x81
 800c4d0:	f7fa f82c 	bl	800652c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c4da:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c4de:	2200      	movs	r2, #0
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	f7fa f823 	bl	800652c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c4ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2182      	movs	r1, #130	@ 0x82
 800c4f4:	f7fa f81a 	bl	800652c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	200010d0 	.word	0x200010d0
 800c508:	40005c00 	.word	0x40005c00

0800c50c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c514:	2300      	movs	r3, #0
 800c516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c518:	2300      	movs	r3, #0
 800c51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c522:	4618      	mov	r0, r3
 800c524:	f7f8 fdc1 	bl	80050aa <HAL_PCD_Start>
 800c528:	4603      	mov	r3, r0
 800c52a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 f94e 	bl	800c7d0 <USBD_Get_USB_Status>
 800c534:	4603      	mov	r3, r0
 800c536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c538:	7bbb      	ldrb	r3, [r7, #14]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b084      	sub	sp, #16
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	4608      	mov	r0, r1
 800c54c:	4611      	mov	r1, r2
 800c54e:	461a      	mov	r2, r3
 800c550:	4603      	mov	r3, r0
 800c552:	70fb      	strb	r3, [r7, #3]
 800c554:	460b      	mov	r3, r1
 800c556:	70bb      	strb	r3, [r7, #2]
 800c558:	4613      	mov	r3, r2
 800c55a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c55c:	2300      	movs	r3, #0
 800c55e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c56a:	78bb      	ldrb	r3, [r7, #2]
 800c56c:	883a      	ldrh	r2, [r7, #0]
 800c56e:	78f9      	ldrb	r1, [r7, #3]
 800c570:	f7f8 ff39 	bl	80053e6 <HAL_PCD_EP_Open>
 800c574:	4603      	mov	r3, r0
 800c576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c578:	7bfb      	ldrb	r3, [r7, #15]
 800c57a:	4618      	mov	r0, r3
 800c57c:	f000 f928 	bl	800c7d0 <USBD_Get_USB_Status>
 800c580:	4603      	mov	r3, r0
 800c582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c584:	7bbb      	ldrb	r3, [r7, #14]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b084      	sub	sp, #16
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	460b      	mov	r3, r1
 800c598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c59a:	2300      	movs	r3, #0
 800c59c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c5a8:	78fa      	ldrb	r2, [r7, #3]
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7f8 ff80 	bl	80054b2 <HAL_PCD_EP_Close>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f000 f909 	bl	800c7d0 <USBD_Get_USB_Status>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c5e6:	78fa      	ldrb	r2, [r7, #3]
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7f9 f840 	bl	8005670 <HAL_PCD_EP_SetStall>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5f4:	7bfb      	ldrb	r3, [r7, #15]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 f8ea 	bl	800c7d0 <USBD_Get_USB_Status>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c600:	7bbb      	ldrb	r3, [r7, #14]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b084      	sub	sp, #16
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
 800c612:	460b      	mov	r3, r1
 800c614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c61a:	2300      	movs	r3, #0
 800c61c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c624:	78fa      	ldrb	r2, [r7, #3]
 800c626:	4611      	mov	r1, r2
 800c628:	4618      	mov	r0, r3
 800c62a:	f7f9 f881 	bl	8005730 <HAL_PCD_EP_ClrStall>
 800c62e:	4603      	mov	r3, r0
 800c630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c632:	7bfb      	ldrb	r3, [r7, #15]
 800c634:	4618      	mov	r0, r3
 800c636:	f000 f8cb 	bl	800c7d0 <USBD_Get_USB_Status>
 800c63a:	4603      	mov	r3, r0
 800c63c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c63e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	460b      	mov	r3, r1
 800c652:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c65a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c65c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c660:	2b00      	cmp	r3, #0
 800c662:	da0c      	bge.n	800c67e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c664:	78fb      	ldrb	r3, [r7, #3]
 800c666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c66a:	68f9      	ldr	r1, [r7, #12]
 800c66c:	1c5a      	adds	r2, r3, #1
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	00db      	lsls	r3, r3, #3
 800c676:	440b      	add	r3, r1
 800c678:	3302      	adds	r3, #2
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	e00b      	b.n	800c696 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c67e:	78fb      	ldrb	r3, [r7, #3]
 800c680:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c684:	68f9      	ldr	r1, [r7, #12]
 800c686:	4613      	mov	r3, r2
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	00db      	lsls	r3, r3, #3
 800c68e:	440b      	add	r3, r1
 800c690:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800c694:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c696:	4618      	mov	r0, r3
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bc80      	pop	{r7}
 800c69e:	4770      	bx	lr

0800c6a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c6ba:	78fa      	ldrb	r2, [r7, #3]
 800c6bc:	4611      	mov	r1, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7f8 fe6c 	bl	800539c <HAL_PCD_SetAddress>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f000 f880 	bl	800c7d0 <USBD_Get_USB_Status>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b086      	sub	sp, #24
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	60f8      	str	r0, [r7, #12]
 800c6e6:	607a      	str	r2, [r7, #4]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	72fb      	strb	r3, [r7, #11]
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c700:	893b      	ldrh	r3, [r7, #8]
 800c702:	7af9      	ldrb	r1, [r7, #11]
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	f7f8 ff70 	bl	80055ea <HAL_PCD_EP_Transmit>
 800c70a:	4603      	mov	r3, r0
 800c70c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c70e:	7dfb      	ldrb	r3, [r7, #23]
 800c710:	4618      	mov	r0, r3
 800c712:	f000 f85d 	bl	800c7d0 <USBD_Get_USB_Status>
 800c716:	4603      	mov	r3, r0
 800c718:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c71a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3718      	adds	r7, #24
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	607a      	str	r2, [r7, #4]
 800c72e:	461a      	mov	r2, r3
 800c730:	460b      	mov	r3, r1
 800c732:	72fb      	strb	r3, [r7, #11]
 800c734:	4613      	mov	r3, r2
 800c736:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c746:	893b      	ldrh	r3, [r7, #8]
 800c748:	7af9      	ldrb	r1, [r7, #11]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	f7f8 fef9 	bl	8005542 <HAL_PCD_EP_Receive>
 800c750:	4603      	mov	r3, r0
 800c752:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c754:	7dfb      	ldrb	r3, [r7, #23]
 800c756:	4618      	mov	r0, r3
 800c758:	f000 f83a 	bl	800c7d0 <USBD_Get_USB_Status>
 800c75c:	4603      	mov	r3, r0
 800c75e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c760:	7dbb      	ldrb	r3, [r7, #22]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3718      	adds	r7, #24
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b082      	sub	sp, #8
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	460b      	mov	r3, r1
 800c774:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c77c:	78fa      	ldrb	r2, [r7, #3]
 800c77e:	4611      	mov	r1, r2
 800c780:	4618      	mov	r0, r3
 800c782:	f7f8 ff1b 	bl	80055bc <HAL_PCD_EP_GetRxCount>
 800c786:	4603      	mov	r3, r0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c798:	4b02      	ldr	r3, [pc, #8]	@ (800c7a4 <USBD_static_malloc+0x14>)
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bc80      	pop	{r7}
 800c7a2:	4770      	bx	lr
 800c7a4:	200013bc 	.word	0x200013bc

0800c7a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]

}
 800c7b0:	bf00      	nop
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bc80      	pop	{r7}
 800c7b8:	4770      	bx	lr

0800c7ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7ba:	b480      	push	{r7}
 800c7bc:	b083      	sub	sp, #12
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c7c6:	bf00      	nop
 800c7c8:	370c      	adds	r7, #12
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bc80      	pop	{r7}
 800c7ce:	4770      	bx	lr

0800c7d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c7de:	79fb      	ldrb	r3, [r7, #7]
 800c7e0:	2b03      	cmp	r3, #3
 800c7e2:	d817      	bhi.n	800c814 <USBD_Get_USB_Status+0x44>
 800c7e4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7ec <USBD_Get_USB_Status+0x1c>)
 800c7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ea:	bf00      	nop
 800c7ec:	0800c7fd 	.word	0x0800c7fd
 800c7f0:	0800c803 	.word	0x0800c803
 800c7f4:	0800c809 	.word	0x0800c809
 800c7f8:	0800c80f 	.word	0x0800c80f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c800:	e00b      	b.n	800c81a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c802:	2302      	movs	r3, #2
 800c804:	73fb      	strb	r3, [r7, #15]
    break;
 800c806:	e008      	b.n	800c81a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c808:	2301      	movs	r3, #1
 800c80a:	73fb      	strb	r3, [r7, #15]
    break;
 800c80c:	e005      	b.n	800c81a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c80e:	2302      	movs	r3, #2
 800c810:	73fb      	strb	r3, [r7, #15]
    break;
 800c812:	e002      	b.n	800c81a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c814:	2302      	movs	r3, #2
 800c816:	73fb      	strb	r3, [r7, #15]
    break;
 800c818:	bf00      	nop
  }
  return usb_status;
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3714      	adds	r7, #20
 800c820:	46bd      	mov	sp, r7
 800c822:	bc80      	pop	{r7}
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop

0800c828 <siprintf>:
 800c828:	b40e      	push	{r1, r2, r3}
 800c82a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c82e:	b500      	push	{lr}
 800c830:	b09c      	sub	sp, #112	@ 0x70
 800c832:	ab1d      	add	r3, sp, #116	@ 0x74
 800c834:	9002      	str	r0, [sp, #8]
 800c836:	9006      	str	r0, [sp, #24]
 800c838:	9107      	str	r1, [sp, #28]
 800c83a:	9104      	str	r1, [sp, #16]
 800c83c:	4808      	ldr	r0, [pc, #32]	@ (800c860 <siprintf+0x38>)
 800c83e:	4909      	ldr	r1, [pc, #36]	@ (800c864 <siprintf+0x3c>)
 800c840:	f853 2b04 	ldr.w	r2, [r3], #4
 800c844:	9105      	str	r1, [sp, #20]
 800c846:	6800      	ldr	r0, [r0, #0]
 800c848:	a902      	add	r1, sp, #8
 800c84a:	9301      	str	r3, [sp, #4]
 800c84c:	f000 f9a0 	bl	800cb90 <_svfiprintf_r>
 800c850:	2200      	movs	r2, #0
 800c852:	9b02      	ldr	r3, [sp, #8]
 800c854:	701a      	strb	r2, [r3, #0]
 800c856:	b01c      	add	sp, #112	@ 0x70
 800c858:	f85d eb04 	ldr.w	lr, [sp], #4
 800c85c:	b003      	add	sp, #12
 800c85e:	4770      	bx	lr
 800c860:	200001a4 	.word	0x200001a4
 800c864:	ffff0208 	.word	0xffff0208

0800c868 <memset>:
 800c868:	4603      	mov	r3, r0
 800c86a:	4402      	add	r2, r0
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d100      	bne.n	800c872 <memset+0xa>
 800c870:	4770      	bx	lr
 800c872:	f803 1b01 	strb.w	r1, [r3], #1
 800c876:	e7f9      	b.n	800c86c <memset+0x4>

0800c878 <__errno>:
 800c878:	4b01      	ldr	r3, [pc, #4]	@ (800c880 <__errno+0x8>)
 800c87a:	6818      	ldr	r0, [r3, #0]
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	200001a4 	.word	0x200001a4

0800c884 <__libc_init_array>:
 800c884:	b570      	push	{r4, r5, r6, lr}
 800c886:	2600      	movs	r6, #0
 800c888:	4d0c      	ldr	r5, [pc, #48]	@ (800c8bc <__libc_init_array+0x38>)
 800c88a:	4c0d      	ldr	r4, [pc, #52]	@ (800c8c0 <__libc_init_array+0x3c>)
 800c88c:	1b64      	subs	r4, r4, r5
 800c88e:	10a4      	asrs	r4, r4, #2
 800c890:	42a6      	cmp	r6, r4
 800c892:	d109      	bne.n	800c8a8 <__libc_init_array+0x24>
 800c894:	f000 fc78 	bl	800d188 <_init>
 800c898:	2600      	movs	r6, #0
 800c89a:	4d0a      	ldr	r5, [pc, #40]	@ (800c8c4 <__libc_init_array+0x40>)
 800c89c:	4c0a      	ldr	r4, [pc, #40]	@ (800c8c8 <__libc_init_array+0x44>)
 800c89e:	1b64      	subs	r4, r4, r5
 800c8a0:	10a4      	asrs	r4, r4, #2
 800c8a2:	42a6      	cmp	r6, r4
 800c8a4:	d105      	bne.n	800c8b2 <__libc_init_array+0x2e>
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}
 800c8a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8ac:	4798      	blx	r3
 800c8ae:	3601      	adds	r6, #1
 800c8b0:	e7ee      	b.n	800c890 <__libc_init_array+0xc>
 800c8b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8b6:	4798      	blx	r3
 800c8b8:	3601      	adds	r6, #1
 800c8ba:	e7f2      	b.n	800c8a2 <__libc_init_array+0x1e>
 800c8bc:	0800da70 	.word	0x0800da70
 800c8c0:	0800da70 	.word	0x0800da70
 800c8c4:	0800da70 	.word	0x0800da70
 800c8c8:	0800da74 	.word	0x0800da74

0800c8cc <__retarget_lock_acquire_recursive>:
 800c8cc:	4770      	bx	lr

0800c8ce <__retarget_lock_release_recursive>:
 800c8ce:	4770      	bx	lr

0800c8d0 <memcpy>:
 800c8d0:	440a      	add	r2, r1
 800c8d2:	4291      	cmp	r1, r2
 800c8d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8d8:	d100      	bne.n	800c8dc <memcpy+0xc>
 800c8da:	4770      	bx	lr
 800c8dc:	b510      	push	{r4, lr}
 800c8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8e2:	4291      	cmp	r1, r2
 800c8e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8e8:	d1f9      	bne.n	800c8de <memcpy+0xe>
 800c8ea:	bd10      	pop	{r4, pc}

0800c8ec <_free_r>:
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	2900      	cmp	r1, #0
 800c8f2:	d040      	beq.n	800c976 <_free_r+0x8a>
 800c8f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8f8:	1f0c      	subs	r4, r1, #4
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	bfb8      	it	lt
 800c8fe:	18e4      	addlt	r4, r4, r3
 800c900:	f000 f8de 	bl	800cac0 <__malloc_lock>
 800c904:	4a1c      	ldr	r2, [pc, #112]	@ (800c978 <_free_r+0x8c>)
 800c906:	6813      	ldr	r3, [r2, #0]
 800c908:	b933      	cbnz	r3, 800c918 <_free_r+0x2c>
 800c90a:	6063      	str	r3, [r4, #4]
 800c90c:	6014      	str	r4, [r2, #0]
 800c90e:	4628      	mov	r0, r5
 800c910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c914:	f000 b8da 	b.w	800cacc <__malloc_unlock>
 800c918:	42a3      	cmp	r3, r4
 800c91a:	d908      	bls.n	800c92e <_free_r+0x42>
 800c91c:	6820      	ldr	r0, [r4, #0]
 800c91e:	1821      	adds	r1, r4, r0
 800c920:	428b      	cmp	r3, r1
 800c922:	bf01      	itttt	eq
 800c924:	6819      	ldreq	r1, [r3, #0]
 800c926:	685b      	ldreq	r3, [r3, #4]
 800c928:	1809      	addeq	r1, r1, r0
 800c92a:	6021      	streq	r1, [r4, #0]
 800c92c:	e7ed      	b.n	800c90a <_free_r+0x1e>
 800c92e:	461a      	mov	r2, r3
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	b10b      	cbz	r3, 800c938 <_free_r+0x4c>
 800c934:	42a3      	cmp	r3, r4
 800c936:	d9fa      	bls.n	800c92e <_free_r+0x42>
 800c938:	6811      	ldr	r1, [r2, #0]
 800c93a:	1850      	adds	r0, r2, r1
 800c93c:	42a0      	cmp	r0, r4
 800c93e:	d10b      	bne.n	800c958 <_free_r+0x6c>
 800c940:	6820      	ldr	r0, [r4, #0]
 800c942:	4401      	add	r1, r0
 800c944:	1850      	adds	r0, r2, r1
 800c946:	4283      	cmp	r3, r0
 800c948:	6011      	str	r1, [r2, #0]
 800c94a:	d1e0      	bne.n	800c90e <_free_r+0x22>
 800c94c:	6818      	ldr	r0, [r3, #0]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	4408      	add	r0, r1
 800c952:	6010      	str	r0, [r2, #0]
 800c954:	6053      	str	r3, [r2, #4]
 800c956:	e7da      	b.n	800c90e <_free_r+0x22>
 800c958:	d902      	bls.n	800c960 <_free_r+0x74>
 800c95a:	230c      	movs	r3, #12
 800c95c:	602b      	str	r3, [r5, #0]
 800c95e:	e7d6      	b.n	800c90e <_free_r+0x22>
 800c960:	6820      	ldr	r0, [r4, #0]
 800c962:	1821      	adds	r1, r4, r0
 800c964:	428b      	cmp	r3, r1
 800c966:	bf01      	itttt	eq
 800c968:	6819      	ldreq	r1, [r3, #0]
 800c96a:	685b      	ldreq	r3, [r3, #4]
 800c96c:	1809      	addeq	r1, r1, r0
 800c96e:	6021      	streq	r1, [r4, #0]
 800c970:	6063      	str	r3, [r4, #4]
 800c972:	6054      	str	r4, [r2, #4]
 800c974:	e7cb      	b.n	800c90e <_free_r+0x22>
 800c976:	bd38      	pop	{r3, r4, r5, pc}
 800c978:	20001720 	.word	0x20001720

0800c97c <sbrk_aligned>:
 800c97c:	b570      	push	{r4, r5, r6, lr}
 800c97e:	4e0f      	ldr	r6, [pc, #60]	@ (800c9bc <sbrk_aligned+0x40>)
 800c980:	460c      	mov	r4, r1
 800c982:	6831      	ldr	r1, [r6, #0]
 800c984:	4605      	mov	r5, r0
 800c986:	b911      	cbnz	r1, 800c98e <sbrk_aligned+0x12>
 800c988:	f000 fbaa 	bl	800d0e0 <_sbrk_r>
 800c98c:	6030      	str	r0, [r6, #0]
 800c98e:	4621      	mov	r1, r4
 800c990:	4628      	mov	r0, r5
 800c992:	f000 fba5 	bl	800d0e0 <_sbrk_r>
 800c996:	1c43      	adds	r3, r0, #1
 800c998:	d103      	bne.n	800c9a2 <sbrk_aligned+0x26>
 800c99a:	f04f 34ff 	mov.w	r4, #4294967295
 800c99e:	4620      	mov	r0, r4
 800c9a0:	bd70      	pop	{r4, r5, r6, pc}
 800c9a2:	1cc4      	adds	r4, r0, #3
 800c9a4:	f024 0403 	bic.w	r4, r4, #3
 800c9a8:	42a0      	cmp	r0, r4
 800c9aa:	d0f8      	beq.n	800c99e <sbrk_aligned+0x22>
 800c9ac:	1a21      	subs	r1, r4, r0
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	f000 fb96 	bl	800d0e0 <_sbrk_r>
 800c9b4:	3001      	adds	r0, #1
 800c9b6:	d1f2      	bne.n	800c99e <sbrk_aligned+0x22>
 800c9b8:	e7ef      	b.n	800c99a <sbrk_aligned+0x1e>
 800c9ba:	bf00      	nop
 800c9bc:	2000171c 	.word	0x2000171c

0800c9c0 <_malloc_r>:
 800c9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9c4:	1ccd      	adds	r5, r1, #3
 800c9c6:	f025 0503 	bic.w	r5, r5, #3
 800c9ca:	3508      	adds	r5, #8
 800c9cc:	2d0c      	cmp	r5, #12
 800c9ce:	bf38      	it	cc
 800c9d0:	250c      	movcc	r5, #12
 800c9d2:	2d00      	cmp	r5, #0
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	db01      	blt.n	800c9dc <_malloc_r+0x1c>
 800c9d8:	42a9      	cmp	r1, r5
 800c9da:	d904      	bls.n	800c9e6 <_malloc_r+0x26>
 800c9dc:	230c      	movs	r3, #12
 800c9de:	6033      	str	r3, [r6, #0]
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cabc <_malloc_r+0xfc>
 800c9ea:	f000 f869 	bl	800cac0 <__malloc_lock>
 800c9ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c9f2:	461c      	mov	r4, r3
 800c9f4:	bb44      	cbnz	r4, 800ca48 <_malloc_r+0x88>
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f7ff ffbf 	bl	800c97c <sbrk_aligned>
 800c9fe:	1c43      	adds	r3, r0, #1
 800ca00:	4604      	mov	r4, r0
 800ca02:	d158      	bne.n	800cab6 <_malloc_r+0xf6>
 800ca04:	f8d8 4000 	ldr.w	r4, [r8]
 800ca08:	4627      	mov	r7, r4
 800ca0a:	2f00      	cmp	r7, #0
 800ca0c:	d143      	bne.n	800ca96 <_malloc_r+0xd6>
 800ca0e:	2c00      	cmp	r4, #0
 800ca10:	d04b      	beq.n	800caaa <_malloc_r+0xea>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	4639      	mov	r1, r7
 800ca16:	4630      	mov	r0, r6
 800ca18:	eb04 0903 	add.w	r9, r4, r3
 800ca1c:	f000 fb60 	bl	800d0e0 <_sbrk_r>
 800ca20:	4581      	cmp	r9, r0
 800ca22:	d142      	bne.n	800caaa <_malloc_r+0xea>
 800ca24:	6821      	ldr	r1, [r4, #0]
 800ca26:	4630      	mov	r0, r6
 800ca28:	1a6d      	subs	r5, r5, r1
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	f7ff ffa6 	bl	800c97c <sbrk_aligned>
 800ca30:	3001      	adds	r0, #1
 800ca32:	d03a      	beq.n	800caaa <_malloc_r+0xea>
 800ca34:	6823      	ldr	r3, [r4, #0]
 800ca36:	442b      	add	r3, r5
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca3e:	685a      	ldr	r2, [r3, #4]
 800ca40:	bb62      	cbnz	r2, 800ca9c <_malloc_r+0xdc>
 800ca42:	f8c8 7000 	str.w	r7, [r8]
 800ca46:	e00f      	b.n	800ca68 <_malloc_r+0xa8>
 800ca48:	6822      	ldr	r2, [r4, #0]
 800ca4a:	1b52      	subs	r2, r2, r5
 800ca4c:	d420      	bmi.n	800ca90 <_malloc_r+0xd0>
 800ca4e:	2a0b      	cmp	r2, #11
 800ca50:	d917      	bls.n	800ca82 <_malloc_r+0xc2>
 800ca52:	1961      	adds	r1, r4, r5
 800ca54:	42a3      	cmp	r3, r4
 800ca56:	6025      	str	r5, [r4, #0]
 800ca58:	bf18      	it	ne
 800ca5a:	6059      	strne	r1, [r3, #4]
 800ca5c:	6863      	ldr	r3, [r4, #4]
 800ca5e:	bf08      	it	eq
 800ca60:	f8c8 1000 	streq.w	r1, [r8]
 800ca64:	5162      	str	r2, [r4, r5]
 800ca66:	604b      	str	r3, [r1, #4]
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f000 f82f 	bl	800cacc <__malloc_unlock>
 800ca6e:	f104 000b 	add.w	r0, r4, #11
 800ca72:	1d23      	adds	r3, r4, #4
 800ca74:	f020 0007 	bic.w	r0, r0, #7
 800ca78:	1ac2      	subs	r2, r0, r3
 800ca7a:	bf1c      	itt	ne
 800ca7c:	1a1b      	subne	r3, r3, r0
 800ca7e:	50a3      	strne	r3, [r4, r2]
 800ca80:	e7af      	b.n	800c9e2 <_malloc_r+0x22>
 800ca82:	6862      	ldr	r2, [r4, #4]
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	bf0c      	ite	eq
 800ca88:	f8c8 2000 	streq.w	r2, [r8]
 800ca8c:	605a      	strne	r2, [r3, #4]
 800ca8e:	e7eb      	b.n	800ca68 <_malloc_r+0xa8>
 800ca90:	4623      	mov	r3, r4
 800ca92:	6864      	ldr	r4, [r4, #4]
 800ca94:	e7ae      	b.n	800c9f4 <_malloc_r+0x34>
 800ca96:	463c      	mov	r4, r7
 800ca98:	687f      	ldr	r7, [r7, #4]
 800ca9a:	e7b6      	b.n	800ca0a <_malloc_r+0x4a>
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	42a3      	cmp	r3, r4
 800caa2:	d1fb      	bne.n	800ca9c <_malloc_r+0xdc>
 800caa4:	2300      	movs	r3, #0
 800caa6:	6053      	str	r3, [r2, #4]
 800caa8:	e7de      	b.n	800ca68 <_malloc_r+0xa8>
 800caaa:	230c      	movs	r3, #12
 800caac:	4630      	mov	r0, r6
 800caae:	6033      	str	r3, [r6, #0]
 800cab0:	f000 f80c 	bl	800cacc <__malloc_unlock>
 800cab4:	e794      	b.n	800c9e0 <_malloc_r+0x20>
 800cab6:	6005      	str	r5, [r0, #0]
 800cab8:	e7d6      	b.n	800ca68 <_malloc_r+0xa8>
 800caba:	bf00      	nop
 800cabc:	20001720 	.word	0x20001720

0800cac0 <__malloc_lock>:
 800cac0:	4801      	ldr	r0, [pc, #4]	@ (800cac8 <__malloc_lock+0x8>)
 800cac2:	f7ff bf03 	b.w	800c8cc <__retarget_lock_acquire_recursive>
 800cac6:	bf00      	nop
 800cac8:	20001718 	.word	0x20001718

0800cacc <__malloc_unlock>:
 800cacc:	4801      	ldr	r0, [pc, #4]	@ (800cad4 <__malloc_unlock+0x8>)
 800cace:	f7ff befe 	b.w	800c8ce <__retarget_lock_release_recursive>
 800cad2:	bf00      	nop
 800cad4:	20001718 	.word	0x20001718

0800cad8 <__ssputs_r>:
 800cad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cadc:	461f      	mov	r7, r3
 800cade:	688e      	ldr	r6, [r1, #8]
 800cae0:	4682      	mov	sl, r0
 800cae2:	42be      	cmp	r6, r7
 800cae4:	460c      	mov	r4, r1
 800cae6:	4690      	mov	r8, r2
 800cae8:	680b      	ldr	r3, [r1, #0]
 800caea:	d82d      	bhi.n	800cb48 <__ssputs_r+0x70>
 800caec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800caf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800caf4:	d026      	beq.n	800cb44 <__ssputs_r+0x6c>
 800caf6:	6965      	ldr	r5, [r4, #20]
 800caf8:	6909      	ldr	r1, [r1, #16]
 800cafa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cafe:	eba3 0901 	sub.w	r9, r3, r1
 800cb02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb06:	1c7b      	adds	r3, r7, #1
 800cb08:	444b      	add	r3, r9
 800cb0a:	106d      	asrs	r5, r5, #1
 800cb0c:	429d      	cmp	r5, r3
 800cb0e:	bf38      	it	cc
 800cb10:	461d      	movcc	r5, r3
 800cb12:	0553      	lsls	r3, r2, #21
 800cb14:	d527      	bpl.n	800cb66 <__ssputs_r+0x8e>
 800cb16:	4629      	mov	r1, r5
 800cb18:	f7ff ff52 	bl	800c9c0 <_malloc_r>
 800cb1c:	4606      	mov	r6, r0
 800cb1e:	b360      	cbz	r0, 800cb7a <__ssputs_r+0xa2>
 800cb20:	464a      	mov	r2, r9
 800cb22:	6921      	ldr	r1, [r4, #16]
 800cb24:	f7ff fed4 	bl	800c8d0 <memcpy>
 800cb28:	89a3      	ldrh	r3, [r4, #12]
 800cb2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb32:	81a3      	strh	r3, [r4, #12]
 800cb34:	6126      	str	r6, [r4, #16]
 800cb36:	444e      	add	r6, r9
 800cb38:	6026      	str	r6, [r4, #0]
 800cb3a:	463e      	mov	r6, r7
 800cb3c:	6165      	str	r5, [r4, #20]
 800cb3e:	eba5 0509 	sub.w	r5, r5, r9
 800cb42:	60a5      	str	r5, [r4, #8]
 800cb44:	42be      	cmp	r6, r7
 800cb46:	d900      	bls.n	800cb4a <__ssputs_r+0x72>
 800cb48:	463e      	mov	r6, r7
 800cb4a:	4632      	mov	r2, r6
 800cb4c:	4641      	mov	r1, r8
 800cb4e:	6820      	ldr	r0, [r4, #0]
 800cb50:	f000 faac 	bl	800d0ac <memmove>
 800cb54:	2000      	movs	r0, #0
 800cb56:	68a3      	ldr	r3, [r4, #8]
 800cb58:	1b9b      	subs	r3, r3, r6
 800cb5a:	60a3      	str	r3, [r4, #8]
 800cb5c:	6823      	ldr	r3, [r4, #0]
 800cb5e:	4433      	add	r3, r6
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb66:	462a      	mov	r2, r5
 800cb68:	f000 fad8 	bl	800d11c <_realloc_r>
 800cb6c:	4606      	mov	r6, r0
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d1e0      	bne.n	800cb34 <__ssputs_r+0x5c>
 800cb72:	4650      	mov	r0, sl
 800cb74:	6921      	ldr	r1, [r4, #16]
 800cb76:	f7ff feb9 	bl	800c8ec <_free_r>
 800cb7a:	230c      	movs	r3, #12
 800cb7c:	f8ca 3000 	str.w	r3, [sl]
 800cb80:	89a3      	ldrh	r3, [r4, #12]
 800cb82:	f04f 30ff 	mov.w	r0, #4294967295
 800cb86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb8a:	81a3      	strh	r3, [r4, #12]
 800cb8c:	e7e9      	b.n	800cb62 <__ssputs_r+0x8a>
	...

0800cb90 <_svfiprintf_r>:
 800cb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb94:	4698      	mov	r8, r3
 800cb96:	898b      	ldrh	r3, [r1, #12]
 800cb98:	4607      	mov	r7, r0
 800cb9a:	061b      	lsls	r3, r3, #24
 800cb9c:	460d      	mov	r5, r1
 800cb9e:	4614      	mov	r4, r2
 800cba0:	b09d      	sub	sp, #116	@ 0x74
 800cba2:	d510      	bpl.n	800cbc6 <_svfiprintf_r+0x36>
 800cba4:	690b      	ldr	r3, [r1, #16]
 800cba6:	b973      	cbnz	r3, 800cbc6 <_svfiprintf_r+0x36>
 800cba8:	2140      	movs	r1, #64	@ 0x40
 800cbaa:	f7ff ff09 	bl	800c9c0 <_malloc_r>
 800cbae:	6028      	str	r0, [r5, #0]
 800cbb0:	6128      	str	r0, [r5, #16]
 800cbb2:	b930      	cbnz	r0, 800cbc2 <_svfiprintf_r+0x32>
 800cbb4:	230c      	movs	r3, #12
 800cbb6:	603b      	str	r3, [r7, #0]
 800cbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbbc:	b01d      	add	sp, #116	@ 0x74
 800cbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc2:	2340      	movs	r3, #64	@ 0x40
 800cbc4:	616b      	str	r3, [r5, #20]
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbca:	2320      	movs	r3, #32
 800cbcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbd0:	2330      	movs	r3, #48	@ 0x30
 800cbd2:	f04f 0901 	mov.w	r9, #1
 800cbd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbda:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cd74 <_svfiprintf_r+0x1e4>
 800cbde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbe2:	4623      	mov	r3, r4
 800cbe4:	469a      	mov	sl, r3
 800cbe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbea:	b10a      	cbz	r2, 800cbf0 <_svfiprintf_r+0x60>
 800cbec:	2a25      	cmp	r2, #37	@ 0x25
 800cbee:	d1f9      	bne.n	800cbe4 <_svfiprintf_r+0x54>
 800cbf0:	ebba 0b04 	subs.w	fp, sl, r4
 800cbf4:	d00b      	beq.n	800cc0e <_svfiprintf_r+0x7e>
 800cbf6:	465b      	mov	r3, fp
 800cbf8:	4622      	mov	r2, r4
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	f7ff ff6b 	bl	800cad8 <__ssputs_r>
 800cc02:	3001      	adds	r0, #1
 800cc04:	f000 80a7 	beq.w	800cd56 <_svfiprintf_r+0x1c6>
 800cc08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc0a:	445a      	add	r2, fp
 800cc0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc0e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f000 809f 	beq.w	800cd56 <_svfiprintf_r+0x1c6>
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc22:	f10a 0a01 	add.w	sl, sl, #1
 800cc26:	9304      	str	r3, [sp, #16]
 800cc28:	9307      	str	r3, [sp, #28]
 800cc2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc2e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc30:	4654      	mov	r4, sl
 800cc32:	2205      	movs	r2, #5
 800cc34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc38:	484e      	ldr	r0, [pc, #312]	@ (800cd74 <_svfiprintf_r+0x1e4>)
 800cc3a:	f000 fa61 	bl	800d100 <memchr>
 800cc3e:	9a04      	ldr	r2, [sp, #16]
 800cc40:	b9d8      	cbnz	r0, 800cc7a <_svfiprintf_r+0xea>
 800cc42:	06d0      	lsls	r0, r2, #27
 800cc44:	bf44      	itt	mi
 800cc46:	2320      	movmi	r3, #32
 800cc48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc4c:	0711      	lsls	r1, r2, #28
 800cc4e:	bf44      	itt	mi
 800cc50:	232b      	movmi	r3, #43	@ 0x2b
 800cc52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc56:	f89a 3000 	ldrb.w	r3, [sl]
 800cc5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc5c:	d015      	beq.n	800cc8a <_svfiprintf_r+0xfa>
 800cc5e:	4654      	mov	r4, sl
 800cc60:	2000      	movs	r0, #0
 800cc62:	f04f 0c0a 	mov.w	ip, #10
 800cc66:	9a07      	ldr	r2, [sp, #28]
 800cc68:	4621      	mov	r1, r4
 800cc6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc6e:	3b30      	subs	r3, #48	@ 0x30
 800cc70:	2b09      	cmp	r3, #9
 800cc72:	d94b      	bls.n	800cd0c <_svfiprintf_r+0x17c>
 800cc74:	b1b0      	cbz	r0, 800cca4 <_svfiprintf_r+0x114>
 800cc76:	9207      	str	r2, [sp, #28]
 800cc78:	e014      	b.n	800cca4 <_svfiprintf_r+0x114>
 800cc7a:	eba0 0308 	sub.w	r3, r0, r8
 800cc7e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc82:	4313      	orrs	r3, r2
 800cc84:	46a2      	mov	sl, r4
 800cc86:	9304      	str	r3, [sp, #16]
 800cc88:	e7d2      	b.n	800cc30 <_svfiprintf_r+0xa0>
 800cc8a:	9b03      	ldr	r3, [sp, #12]
 800cc8c:	1d19      	adds	r1, r3, #4
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	9103      	str	r1, [sp, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	bfbb      	ittet	lt
 800cc96:	425b      	neglt	r3, r3
 800cc98:	f042 0202 	orrlt.w	r2, r2, #2
 800cc9c:	9307      	strge	r3, [sp, #28]
 800cc9e:	9307      	strlt	r3, [sp, #28]
 800cca0:	bfb8      	it	lt
 800cca2:	9204      	strlt	r2, [sp, #16]
 800cca4:	7823      	ldrb	r3, [r4, #0]
 800cca6:	2b2e      	cmp	r3, #46	@ 0x2e
 800cca8:	d10a      	bne.n	800ccc0 <_svfiprintf_r+0x130>
 800ccaa:	7863      	ldrb	r3, [r4, #1]
 800ccac:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccae:	d132      	bne.n	800cd16 <_svfiprintf_r+0x186>
 800ccb0:	9b03      	ldr	r3, [sp, #12]
 800ccb2:	3402      	adds	r4, #2
 800ccb4:	1d1a      	adds	r2, r3, #4
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	9203      	str	r2, [sp, #12]
 800ccba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ccbe:	9305      	str	r3, [sp, #20]
 800ccc0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cd78 <_svfiprintf_r+0x1e8>
 800ccc4:	2203      	movs	r2, #3
 800ccc6:	4650      	mov	r0, sl
 800ccc8:	7821      	ldrb	r1, [r4, #0]
 800ccca:	f000 fa19 	bl	800d100 <memchr>
 800ccce:	b138      	cbz	r0, 800cce0 <_svfiprintf_r+0x150>
 800ccd0:	2240      	movs	r2, #64	@ 0x40
 800ccd2:	9b04      	ldr	r3, [sp, #16]
 800ccd4:	eba0 000a 	sub.w	r0, r0, sl
 800ccd8:	4082      	lsls	r2, r0
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	3401      	adds	r4, #1
 800ccde:	9304      	str	r3, [sp, #16]
 800cce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cce4:	2206      	movs	r2, #6
 800cce6:	4825      	ldr	r0, [pc, #148]	@ (800cd7c <_svfiprintf_r+0x1ec>)
 800cce8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ccec:	f000 fa08 	bl	800d100 <memchr>
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d036      	beq.n	800cd62 <_svfiprintf_r+0x1d2>
 800ccf4:	4b22      	ldr	r3, [pc, #136]	@ (800cd80 <_svfiprintf_r+0x1f0>)
 800ccf6:	bb1b      	cbnz	r3, 800cd40 <_svfiprintf_r+0x1b0>
 800ccf8:	9b03      	ldr	r3, [sp, #12]
 800ccfa:	3307      	adds	r3, #7
 800ccfc:	f023 0307 	bic.w	r3, r3, #7
 800cd00:	3308      	adds	r3, #8
 800cd02:	9303      	str	r3, [sp, #12]
 800cd04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd06:	4433      	add	r3, r6
 800cd08:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd0a:	e76a      	b.n	800cbe2 <_svfiprintf_r+0x52>
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	2001      	movs	r0, #1
 800cd10:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd14:	e7a8      	b.n	800cc68 <_svfiprintf_r+0xd8>
 800cd16:	2300      	movs	r3, #0
 800cd18:	f04f 0c0a 	mov.w	ip, #10
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	3401      	adds	r4, #1
 800cd20:	9305      	str	r3, [sp, #20]
 800cd22:	4620      	mov	r0, r4
 800cd24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd28:	3a30      	subs	r2, #48	@ 0x30
 800cd2a:	2a09      	cmp	r2, #9
 800cd2c:	d903      	bls.n	800cd36 <_svfiprintf_r+0x1a6>
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d0c6      	beq.n	800ccc0 <_svfiprintf_r+0x130>
 800cd32:	9105      	str	r1, [sp, #20]
 800cd34:	e7c4      	b.n	800ccc0 <_svfiprintf_r+0x130>
 800cd36:	4604      	mov	r4, r0
 800cd38:	2301      	movs	r3, #1
 800cd3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd3e:	e7f0      	b.n	800cd22 <_svfiprintf_r+0x192>
 800cd40:	ab03      	add	r3, sp, #12
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	462a      	mov	r2, r5
 800cd46:	4638      	mov	r0, r7
 800cd48:	4b0e      	ldr	r3, [pc, #56]	@ (800cd84 <_svfiprintf_r+0x1f4>)
 800cd4a:	a904      	add	r1, sp, #16
 800cd4c:	f3af 8000 	nop.w
 800cd50:	1c42      	adds	r2, r0, #1
 800cd52:	4606      	mov	r6, r0
 800cd54:	d1d6      	bne.n	800cd04 <_svfiprintf_r+0x174>
 800cd56:	89ab      	ldrh	r3, [r5, #12]
 800cd58:	065b      	lsls	r3, r3, #25
 800cd5a:	f53f af2d 	bmi.w	800cbb8 <_svfiprintf_r+0x28>
 800cd5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd60:	e72c      	b.n	800cbbc <_svfiprintf_r+0x2c>
 800cd62:	ab03      	add	r3, sp, #12
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	462a      	mov	r2, r5
 800cd68:	4638      	mov	r0, r7
 800cd6a:	4b06      	ldr	r3, [pc, #24]	@ (800cd84 <_svfiprintf_r+0x1f4>)
 800cd6c:	a904      	add	r1, sp, #16
 800cd6e:	f000 f87d 	bl	800ce6c <_printf_i>
 800cd72:	e7ed      	b.n	800cd50 <_svfiprintf_r+0x1c0>
 800cd74:	0800da3c 	.word	0x0800da3c
 800cd78:	0800da42 	.word	0x0800da42
 800cd7c:	0800da46 	.word	0x0800da46
 800cd80:	00000000 	.word	0x00000000
 800cd84:	0800cad9 	.word	0x0800cad9

0800cd88 <_printf_common>:
 800cd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd8c:	4616      	mov	r6, r2
 800cd8e:	4698      	mov	r8, r3
 800cd90:	688a      	ldr	r2, [r1, #8]
 800cd92:	690b      	ldr	r3, [r1, #16]
 800cd94:	4607      	mov	r7, r0
 800cd96:	4293      	cmp	r3, r2
 800cd98:	bfb8      	it	lt
 800cd9a:	4613      	movlt	r3, r2
 800cd9c:	6033      	str	r3, [r6, #0]
 800cd9e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cda2:	460c      	mov	r4, r1
 800cda4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cda8:	b10a      	cbz	r2, 800cdae <_printf_common+0x26>
 800cdaa:	3301      	adds	r3, #1
 800cdac:	6033      	str	r3, [r6, #0]
 800cdae:	6823      	ldr	r3, [r4, #0]
 800cdb0:	0699      	lsls	r1, r3, #26
 800cdb2:	bf42      	ittt	mi
 800cdb4:	6833      	ldrmi	r3, [r6, #0]
 800cdb6:	3302      	addmi	r3, #2
 800cdb8:	6033      	strmi	r3, [r6, #0]
 800cdba:	6825      	ldr	r5, [r4, #0]
 800cdbc:	f015 0506 	ands.w	r5, r5, #6
 800cdc0:	d106      	bne.n	800cdd0 <_printf_common+0x48>
 800cdc2:	f104 0a19 	add.w	sl, r4, #25
 800cdc6:	68e3      	ldr	r3, [r4, #12]
 800cdc8:	6832      	ldr	r2, [r6, #0]
 800cdca:	1a9b      	subs	r3, r3, r2
 800cdcc:	42ab      	cmp	r3, r5
 800cdce:	dc2b      	bgt.n	800ce28 <_printf_common+0xa0>
 800cdd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cdd4:	6822      	ldr	r2, [r4, #0]
 800cdd6:	3b00      	subs	r3, #0
 800cdd8:	bf18      	it	ne
 800cdda:	2301      	movne	r3, #1
 800cddc:	0692      	lsls	r2, r2, #26
 800cdde:	d430      	bmi.n	800ce42 <_printf_common+0xba>
 800cde0:	4641      	mov	r1, r8
 800cde2:	4638      	mov	r0, r7
 800cde4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cde8:	47c8      	blx	r9
 800cdea:	3001      	adds	r0, #1
 800cdec:	d023      	beq.n	800ce36 <_printf_common+0xae>
 800cdee:	6823      	ldr	r3, [r4, #0]
 800cdf0:	6922      	ldr	r2, [r4, #16]
 800cdf2:	f003 0306 	and.w	r3, r3, #6
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	bf14      	ite	ne
 800cdfa:	2500      	movne	r5, #0
 800cdfc:	6833      	ldreq	r3, [r6, #0]
 800cdfe:	f04f 0600 	mov.w	r6, #0
 800ce02:	bf08      	it	eq
 800ce04:	68e5      	ldreq	r5, [r4, #12]
 800ce06:	f104 041a 	add.w	r4, r4, #26
 800ce0a:	bf08      	it	eq
 800ce0c:	1aed      	subeq	r5, r5, r3
 800ce0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ce12:	bf08      	it	eq
 800ce14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	bfc4      	itt	gt
 800ce1c:	1a9b      	subgt	r3, r3, r2
 800ce1e:	18ed      	addgt	r5, r5, r3
 800ce20:	42b5      	cmp	r5, r6
 800ce22:	d11a      	bne.n	800ce5a <_printf_common+0xd2>
 800ce24:	2000      	movs	r0, #0
 800ce26:	e008      	b.n	800ce3a <_printf_common+0xb2>
 800ce28:	2301      	movs	r3, #1
 800ce2a:	4652      	mov	r2, sl
 800ce2c:	4641      	mov	r1, r8
 800ce2e:	4638      	mov	r0, r7
 800ce30:	47c8      	blx	r9
 800ce32:	3001      	adds	r0, #1
 800ce34:	d103      	bne.n	800ce3e <_printf_common+0xb6>
 800ce36:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce3e:	3501      	adds	r5, #1
 800ce40:	e7c1      	b.n	800cdc6 <_printf_common+0x3e>
 800ce42:	2030      	movs	r0, #48	@ 0x30
 800ce44:	18e1      	adds	r1, r4, r3
 800ce46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ce4a:	1c5a      	adds	r2, r3, #1
 800ce4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ce50:	4422      	add	r2, r4
 800ce52:	3302      	adds	r3, #2
 800ce54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ce58:	e7c2      	b.n	800cde0 <_printf_common+0x58>
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	4641      	mov	r1, r8
 800ce60:	4638      	mov	r0, r7
 800ce62:	47c8      	blx	r9
 800ce64:	3001      	adds	r0, #1
 800ce66:	d0e6      	beq.n	800ce36 <_printf_common+0xae>
 800ce68:	3601      	adds	r6, #1
 800ce6a:	e7d9      	b.n	800ce20 <_printf_common+0x98>

0800ce6c <_printf_i>:
 800ce6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce70:	7e0f      	ldrb	r7, [r1, #24]
 800ce72:	4691      	mov	r9, r2
 800ce74:	2f78      	cmp	r7, #120	@ 0x78
 800ce76:	4680      	mov	r8, r0
 800ce78:	460c      	mov	r4, r1
 800ce7a:	469a      	mov	sl, r3
 800ce7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ce7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ce82:	d807      	bhi.n	800ce94 <_printf_i+0x28>
 800ce84:	2f62      	cmp	r7, #98	@ 0x62
 800ce86:	d80a      	bhi.n	800ce9e <_printf_i+0x32>
 800ce88:	2f00      	cmp	r7, #0
 800ce8a:	f000 80d3 	beq.w	800d034 <_printf_i+0x1c8>
 800ce8e:	2f58      	cmp	r7, #88	@ 0x58
 800ce90:	f000 80ba 	beq.w	800d008 <_printf_i+0x19c>
 800ce94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ce9c:	e03a      	b.n	800cf14 <_printf_i+0xa8>
 800ce9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cea2:	2b15      	cmp	r3, #21
 800cea4:	d8f6      	bhi.n	800ce94 <_printf_i+0x28>
 800cea6:	a101      	add	r1, pc, #4	@ (adr r1, 800ceac <_printf_i+0x40>)
 800cea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ceac:	0800cf05 	.word	0x0800cf05
 800ceb0:	0800cf19 	.word	0x0800cf19
 800ceb4:	0800ce95 	.word	0x0800ce95
 800ceb8:	0800ce95 	.word	0x0800ce95
 800cebc:	0800ce95 	.word	0x0800ce95
 800cec0:	0800ce95 	.word	0x0800ce95
 800cec4:	0800cf19 	.word	0x0800cf19
 800cec8:	0800ce95 	.word	0x0800ce95
 800cecc:	0800ce95 	.word	0x0800ce95
 800ced0:	0800ce95 	.word	0x0800ce95
 800ced4:	0800ce95 	.word	0x0800ce95
 800ced8:	0800d01b 	.word	0x0800d01b
 800cedc:	0800cf43 	.word	0x0800cf43
 800cee0:	0800cfd5 	.word	0x0800cfd5
 800cee4:	0800ce95 	.word	0x0800ce95
 800cee8:	0800ce95 	.word	0x0800ce95
 800ceec:	0800d03d 	.word	0x0800d03d
 800cef0:	0800ce95 	.word	0x0800ce95
 800cef4:	0800cf43 	.word	0x0800cf43
 800cef8:	0800ce95 	.word	0x0800ce95
 800cefc:	0800ce95 	.word	0x0800ce95
 800cf00:	0800cfdd 	.word	0x0800cfdd
 800cf04:	6833      	ldr	r3, [r6, #0]
 800cf06:	1d1a      	adds	r2, r3, #4
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	6032      	str	r2, [r6, #0]
 800cf0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cf14:	2301      	movs	r3, #1
 800cf16:	e09e      	b.n	800d056 <_printf_i+0x1ea>
 800cf18:	6833      	ldr	r3, [r6, #0]
 800cf1a:	6820      	ldr	r0, [r4, #0]
 800cf1c:	1d19      	adds	r1, r3, #4
 800cf1e:	6031      	str	r1, [r6, #0]
 800cf20:	0606      	lsls	r6, r0, #24
 800cf22:	d501      	bpl.n	800cf28 <_printf_i+0xbc>
 800cf24:	681d      	ldr	r5, [r3, #0]
 800cf26:	e003      	b.n	800cf30 <_printf_i+0xc4>
 800cf28:	0645      	lsls	r5, r0, #25
 800cf2a:	d5fb      	bpl.n	800cf24 <_printf_i+0xb8>
 800cf2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cf30:	2d00      	cmp	r5, #0
 800cf32:	da03      	bge.n	800cf3c <_printf_i+0xd0>
 800cf34:	232d      	movs	r3, #45	@ 0x2d
 800cf36:	426d      	negs	r5, r5
 800cf38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf3c:	230a      	movs	r3, #10
 800cf3e:	4859      	ldr	r0, [pc, #356]	@ (800d0a4 <_printf_i+0x238>)
 800cf40:	e011      	b.n	800cf66 <_printf_i+0xfa>
 800cf42:	6821      	ldr	r1, [r4, #0]
 800cf44:	6833      	ldr	r3, [r6, #0]
 800cf46:	0608      	lsls	r0, r1, #24
 800cf48:	f853 5b04 	ldr.w	r5, [r3], #4
 800cf4c:	d402      	bmi.n	800cf54 <_printf_i+0xe8>
 800cf4e:	0649      	lsls	r1, r1, #25
 800cf50:	bf48      	it	mi
 800cf52:	b2ad      	uxthmi	r5, r5
 800cf54:	2f6f      	cmp	r7, #111	@ 0x6f
 800cf56:	6033      	str	r3, [r6, #0]
 800cf58:	bf14      	ite	ne
 800cf5a:	230a      	movne	r3, #10
 800cf5c:	2308      	moveq	r3, #8
 800cf5e:	4851      	ldr	r0, [pc, #324]	@ (800d0a4 <_printf_i+0x238>)
 800cf60:	2100      	movs	r1, #0
 800cf62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cf66:	6866      	ldr	r6, [r4, #4]
 800cf68:	2e00      	cmp	r6, #0
 800cf6a:	bfa8      	it	ge
 800cf6c:	6821      	ldrge	r1, [r4, #0]
 800cf6e:	60a6      	str	r6, [r4, #8]
 800cf70:	bfa4      	itt	ge
 800cf72:	f021 0104 	bicge.w	r1, r1, #4
 800cf76:	6021      	strge	r1, [r4, #0]
 800cf78:	b90d      	cbnz	r5, 800cf7e <_printf_i+0x112>
 800cf7a:	2e00      	cmp	r6, #0
 800cf7c:	d04b      	beq.n	800d016 <_printf_i+0x1aa>
 800cf7e:	4616      	mov	r6, r2
 800cf80:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf84:	fb03 5711 	mls	r7, r3, r1, r5
 800cf88:	5dc7      	ldrb	r7, [r0, r7]
 800cf8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf8e:	462f      	mov	r7, r5
 800cf90:	42bb      	cmp	r3, r7
 800cf92:	460d      	mov	r5, r1
 800cf94:	d9f4      	bls.n	800cf80 <_printf_i+0x114>
 800cf96:	2b08      	cmp	r3, #8
 800cf98:	d10b      	bne.n	800cfb2 <_printf_i+0x146>
 800cf9a:	6823      	ldr	r3, [r4, #0]
 800cf9c:	07df      	lsls	r7, r3, #31
 800cf9e:	d508      	bpl.n	800cfb2 <_printf_i+0x146>
 800cfa0:	6923      	ldr	r3, [r4, #16]
 800cfa2:	6861      	ldr	r1, [r4, #4]
 800cfa4:	4299      	cmp	r1, r3
 800cfa6:	bfde      	ittt	le
 800cfa8:	2330      	movle	r3, #48	@ 0x30
 800cfaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cfae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cfb2:	1b92      	subs	r2, r2, r6
 800cfb4:	6122      	str	r2, [r4, #16]
 800cfb6:	464b      	mov	r3, r9
 800cfb8:	4621      	mov	r1, r4
 800cfba:	4640      	mov	r0, r8
 800cfbc:	f8cd a000 	str.w	sl, [sp]
 800cfc0:	aa03      	add	r2, sp, #12
 800cfc2:	f7ff fee1 	bl	800cd88 <_printf_common>
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	d14a      	bne.n	800d060 <_printf_i+0x1f4>
 800cfca:	f04f 30ff 	mov.w	r0, #4294967295
 800cfce:	b004      	add	sp, #16
 800cfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	f043 0320 	orr.w	r3, r3, #32
 800cfda:	6023      	str	r3, [r4, #0]
 800cfdc:	2778      	movs	r7, #120	@ 0x78
 800cfde:	4832      	ldr	r0, [pc, #200]	@ (800d0a8 <_printf_i+0x23c>)
 800cfe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	6831      	ldr	r1, [r6, #0]
 800cfe8:	061f      	lsls	r7, r3, #24
 800cfea:	f851 5b04 	ldr.w	r5, [r1], #4
 800cfee:	d402      	bmi.n	800cff6 <_printf_i+0x18a>
 800cff0:	065f      	lsls	r7, r3, #25
 800cff2:	bf48      	it	mi
 800cff4:	b2ad      	uxthmi	r5, r5
 800cff6:	6031      	str	r1, [r6, #0]
 800cff8:	07d9      	lsls	r1, r3, #31
 800cffa:	bf44      	itt	mi
 800cffc:	f043 0320 	orrmi.w	r3, r3, #32
 800d000:	6023      	strmi	r3, [r4, #0]
 800d002:	b11d      	cbz	r5, 800d00c <_printf_i+0x1a0>
 800d004:	2310      	movs	r3, #16
 800d006:	e7ab      	b.n	800cf60 <_printf_i+0xf4>
 800d008:	4826      	ldr	r0, [pc, #152]	@ (800d0a4 <_printf_i+0x238>)
 800d00a:	e7e9      	b.n	800cfe0 <_printf_i+0x174>
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	f023 0320 	bic.w	r3, r3, #32
 800d012:	6023      	str	r3, [r4, #0]
 800d014:	e7f6      	b.n	800d004 <_printf_i+0x198>
 800d016:	4616      	mov	r6, r2
 800d018:	e7bd      	b.n	800cf96 <_printf_i+0x12a>
 800d01a:	6833      	ldr	r3, [r6, #0]
 800d01c:	6825      	ldr	r5, [r4, #0]
 800d01e:	1d18      	adds	r0, r3, #4
 800d020:	6961      	ldr	r1, [r4, #20]
 800d022:	6030      	str	r0, [r6, #0]
 800d024:	062e      	lsls	r6, r5, #24
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	d501      	bpl.n	800d02e <_printf_i+0x1c2>
 800d02a:	6019      	str	r1, [r3, #0]
 800d02c:	e002      	b.n	800d034 <_printf_i+0x1c8>
 800d02e:	0668      	lsls	r0, r5, #25
 800d030:	d5fb      	bpl.n	800d02a <_printf_i+0x1be>
 800d032:	8019      	strh	r1, [r3, #0]
 800d034:	2300      	movs	r3, #0
 800d036:	4616      	mov	r6, r2
 800d038:	6123      	str	r3, [r4, #16]
 800d03a:	e7bc      	b.n	800cfb6 <_printf_i+0x14a>
 800d03c:	6833      	ldr	r3, [r6, #0]
 800d03e:	2100      	movs	r1, #0
 800d040:	1d1a      	adds	r2, r3, #4
 800d042:	6032      	str	r2, [r6, #0]
 800d044:	681e      	ldr	r6, [r3, #0]
 800d046:	6862      	ldr	r2, [r4, #4]
 800d048:	4630      	mov	r0, r6
 800d04a:	f000 f859 	bl	800d100 <memchr>
 800d04e:	b108      	cbz	r0, 800d054 <_printf_i+0x1e8>
 800d050:	1b80      	subs	r0, r0, r6
 800d052:	6060      	str	r0, [r4, #4]
 800d054:	6863      	ldr	r3, [r4, #4]
 800d056:	6123      	str	r3, [r4, #16]
 800d058:	2300      	movs	r3, #0
 800d05a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d05e:	e7aa      	b.n	800cfb6 <_printf_i+0x14a>
 800d060:	4632      	mov	r2, r6
 800d062:	4649      	mov	r1, r9
 800d064:	4640      	mov	r0, r8
 800d066:	6923      	ldr	r3, [r4, #16]
 800d068:	47d0      	blx	sl
 800d06a:	3001      	adds	r0, #1
 800d06c:	d0ad      	beq.n	800cfca <_printf_i+0x15e>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	079b      	lsls	r3, r3, #30
 800d072:	d413      	bmi.n	800d09c <_printf_i+0x230>
 800d074:	68e0      	ldr	r0, [r4, #12]
 800d076:	9b03      	ldr	r3, [sp, #12]
 800d078:	4298      	cmp	r0, r3
 800d07a:	bfb8      	it	lt
 800d07c:	4618      	movlt	r0, r3
 800d07e:	e7a6      	b.n	800cfce <_printf_i+0x162>
 800d080:	2301      	movs	r3, #1
 800d082:	4632      	mov	r2, r6
 800d084:	4649      	mov	r1, r9
 800d086:	4640      	mov	r0, r8
 800d088:	47d0      	blx	sl
 800d08a:	3001      	adds	r0, #1
 800d08c:	d09d      	beq.n	800cfca <_printf_i+0x15e>
 800d08e:	3501      	adds	r5, #1
 800d090:	68e3      	ldr	r3, [r4, #12]
 800d092:	9903      	ldr	r1, [sp, #12]
 800d094:	1a5b      	subs	r3, r3, r1
 800d096:	42ab      	cmp	r3, r5
 800d098:	dcf2      	bgt.n	800d080 <_printf_i+0x214>
 800d09a:	e7eb      	b.n	800d074 <_printf_i+0x208>
 800d09c:	2500      	movs	r5, #0
 800d09e:	f104 0619 	add.w	r6, r4, #25
 800d0a2:	e7f5      	b.n	800d090 <_printf_i+0x224>
 800d0a4:	0800da4d 	.word	0x0800da4d
 800d0a8:	0800da5e 	.word	0x0800da5e

0800d0ac <memmove>:
 800d0ac:	4288      	cmp	r0, r1
 800d0ae:	b510      	push	{r4, lr}
 800d0b0:	eb01 0402 	add.w	r4, r1, r2
 800d0b4:	d902      	bls.n	800d0bc <memmove+0x10>
 800d0b6:	4284      	cmp	r4, r0
 800d0b8:	4623      	mov	r3, r4
 800d0ba:	d807      	bhi.n	800d0cc <memmove+0x20>
 800d0bc:	1e43      	subs	r3, r0, #1
 800d0be:	42a1      	cmp	r1, r4
 800d0c0:	d008      	beq.n	800d0d4 <memmove+0x28>
 800d0c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0ca:	e7f8      	b.n	800d0be <memmove+0x12>
 800d0cc:	4601      	mov	r1, r0
 800d0ce:	4402      	add	r2, r0
 800d0d0:	428a      	cmp	r2, r1
 800d0d2:	d100      	bne.n	800d0d6 <memmove+0x2a>
 800d0d4:	bd10      	pop	{r4, pc}
 800d0d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0de:	e7f7      	b.n	800d0d0 <memmove+0x24>

0800d0e0 <_sbrk_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	4d05      	ldr	r5, [pc, #20]	@ (800d0fc <_sbrk_r+0x1c>)
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	4608      	mov	r0, r1
 800d0ea:	602b      	str	r3, [r5, #0]
 800d0ec:	f7f6 fcbc 	bl	8003a68 <_sbrk>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_sbrk_r+0x1a>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_sbrk_r+0x1a>
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	20001714 	.word	0x20001714

0800d100 <memchr>:
 800d100:	4603      	mov	r3, r0
 800d102:	b510      	push	{r4, lr}
 800d104:	b2c9      	uxtb	r1, r1
 800d106:	4402      	add	r2, r0
 800d108:	4293      	cmp	r3, r2
 800d10a:	4618      	mov	r0, r3
 800d10c:	d101      	bne.n	800d112 <memchr+0x12>
 800d10e:	2000      	movs	r0, #0
 800d110:	e003      	b.n	800d11a <memchr+0x1a>
 800d112:	7804      	ldrb	r4, [r0, #0]
 800d114:	3301      	adds	r3, #1
 800d116:	428c      	cmp	r4, r1
 800d118:	d1f6      	bne.n	800d108 <memchr+0x8>
 800d11a:	bd10      	pop	{r4, pc}

0800d11c <_realloc_r>:
 800d11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d120:	4680      	mov	r8, r0
 800d122:	4615      	mov	r5, r2
 800d124:	460c      	mov	r4, r1
 800d126:	b921      	cbnz	r1, 800d132 <_realloc_r+0x16>
 800d128:	4611      	mov	r1, r2
 800d12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d12e:	f7ff bc47 	b.w	800c9c0 <_malloc_r>
 800d132:	b92a      	cbnz	r2, 800d140 <_realloc_r+0x24>
 800d134:	f7ff fbda 	bl	800c8ec <_free_r>
 800d138:	2400      	movs	r4, #0
 800d13a:	4620      	mov	r0, r4
 800d13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d140:	f000 f81a 	bl	800d178 <_malloc_usable_size_r>
 800d144:	4285      	cmp	r5, r0
 800d146:	4606      	mov	r6, r0
 800d148:	d802      	bhi.n	800d150 <_realloc_r+0x34>
 800d14a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d14e:	d8f4      	bhi.n	800d13a <_realloc_r+0x1e>
 800d150:	4629      	mov	r1, r5
 800d152:	4640      	mov	r0, r8
 800d154:	f7ff fc34 	bl	800c9c0 <_malloc_r>
 800d158:	4607      	mov	r7, r0
 800d15a:	2800      	cmp	r0, #0
 800d15c:	d0ec      	beq.n	800d138 <_realloc_r+0x1c>
 800d15e:	42b5      	cmp	r5, r6
 800d160:	462a      	mov	r2, r5
 800d162:	4621      	mov	r1, r4
 800d164:	bf28      	it	cs
 800d166:	4632      	movcs	r2, r6
 800d168:	f7ff fbb2 	bl	800c8d0 <memcpy>
 800d16c:	4621      	mov	r1, r4
 800d16e:	4640      	mov	r0, r8
 800d170:	f7ff fbbc 	bl	800c8ec <_free_r>
 800d174:	463c      	mov	r4, r7
 800d176:	e7e0      	b.n	800d13a <_realloc_r+0x1e>

0800d178 <_malloc_usable_size_r>:
 800d178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d17c:	1f18      	subs	r0, r3, #4
 800d17e:	2b00      	cmp	r3, #0
 800d180:	bfbc      	itt	lt
 800d182:	580b      	ldrlt	r3, [r1, r0]
 800d184:	18c0      	addlt	r0, r0, r3
 800d186:	4770      	bx	lr

0800d188 <_init>:
 800d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18a:	bf00      	nop
 800d18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d18e:	bc08      	pop	{r3}
 800d190:	469e      	mov	lr, r3
 800d192:	4770      	bx	lr

0800d194 <_fini>:
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d196:	bf00      	nop
 800d198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19a:	bc08      	pop	{r3}
 800d19c:	469e      	mov	lr, r3
 800d19e:	4770      	bx	lr


FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d514  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a8  0800d620  0800d620  0000e620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfc8  0800dfc8  0000f1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfc8  0800dfc8  0000efc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfd0  0800dfd0  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfd0  0800dfd0  0000efd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dfd4  0800dfd4  0000efd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800dfd8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001f8  0800e1cc  0000f1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800e1cc  0000f724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a893  00000000  00000000  0000f21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048ac  00000000  00000000  00029ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  0002e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a0  00000000  00000000  0002fe18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c73b  00000000  00000000  000312b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021037  00000000  00000000  0004d9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009496f  00000000  00000000  0006ea2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103399  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007508  00000000  00000000  001033dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0010a8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d608 	.word	0x0800d608

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800d608 	.word	0x0800d608

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f003 ff4b 	bl	8004008 <HAL_Delay>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b086      	sub	sp, #24
 800017e:	af02      	add	r7, sp, #8
 8000180:	6078      	str	r0, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	70fb      	strb	r3, [r7, #3]
 8000186:	4613      	mov	r3, r2
 8000188:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7adb      	ldrb	r3, [r3, #11]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d007      	beq.n	80001b0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001b0:	78bb      	ldrb	r3, [r7, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d108      	bne.n	80001c8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00a      	b.n	80001de <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001c8:	78bb      	ldrb	r3, [r7, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d107      	bne.n	80001de <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0301 	bic.w	r3, r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffb9 	bl	8000160 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffaf 	bl	8000160 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	4619      	mov	r1, r3
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2304      	movs	r3, #4
 800021c:	f004 fd40 	bl	8004ca0 <HAL_I2C_Master_Transmit>
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	460b      	mov	r3, r1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7e3a      	ldrb	r2, [r7, #24]
 8000254:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2228      	movs	r2, #40	@ 0x28
 800025a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2206      	movs	r2, #6
 8000260:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	220c      	movs	r2, #12
 8000266:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2214      	movs	r2, #20
 800026c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2208      	movs	r2, #8
 8000272:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000274:	2032      	movs	r0, #50	@ 0x32
 8000276:	f7ff ff73 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800027a:	2200      	movs	r2, #0
 800027c:	2133      	movs	r1, #51	@ 0x33
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f7ff ff7b 	bl	800017a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000284:	2200      	movs	r2, #0
 8000286:	2133      	movs	r1, #51	@ 0x33
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f7ff ff76 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff66 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2132      	movs	r1, #50	@ 0x32
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff6e 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff5e 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2120      	movs	r1, #32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff66 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff56 	bl	8000160 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	79db      	ldrb	r3, [r3, #7]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ff5c 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	7a1b      	ldrb	r3, [r3, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f7ff ff55 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff4e 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff47 	bl	800017a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff42 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f7ff ff3d 	bl	800017a <CLCD_WriteI2C>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
 8000314:	4613      	mov	r3, r2
 8000316:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000318:	2300      	movs	r3, #0
 800031a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	78fa      	ldrb	r2, [r7, #3]
 8000322:	429a      	cmp	r2, r3
 8000324:	d303      	bcc.n	800032e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	795b      	ldrb	r3, [r3, #5]
 800032a:	3b01      	subs	r3, #1
 800032c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	799b      	ldrb	r3, [r3, #6]
 8000332:	78ba      	ldrb	r2, [r7, #2]
 8000334:	429a      	cmp	r2, r3
 8000336:	d303      	bcc.n	8000340 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	799b      	ldrb	r3, [r3, #6]
 800033c:	3b01      	subs	r3, #1
 800033e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e013      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800034c:	78bb      	ldrb	r3, [r7, #2]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d103      	bne.n	800035a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000352:	78fb      	ldrb	r3, [r7, #3]
 8000354:	3340      	adds	r3, #64	@ 0x40
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e00c      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800035a:	78bb      	ldrb	r3, [r7, #2]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d103      	bne.n	8000368 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	3314      	adds	r3, #20
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e005      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	2b03      	cmp	r3, #3
 800036c:	d102      	bne.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	3354      	adds	r3, #84	@ 0x54
 8000372:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2200      	movs	r2, #0
 800037e:	4619      	mov	r1, r3
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff fefa 	bl	800017a <CLCD_WriteI2C>
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b082      	sub	sp, #8
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff feea 	bl	800017a <CLCD_WriteI2C>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b082      	sub	sp, #8
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003b8:	e007      	b.n	80003ca <CLCD_I2C_WriteString+0x1c>
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	1c5a      	adds	r2, r3, #1
 80003be:	603a      	str	r2, [r7, #0]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	4619      	mov	r1, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffe2 	bl	800038e <CLCD_I2C_WriteChar>
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d1f3      	bne.n	80003ba <CLCD_I2C_WriteString+0xc>
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff fec6 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003ee:	2005      	movs	r0, #5
 80003f0:	f7ff feb6 	bl	8000160 <CLCD_Delay>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f7ff ffe7 	bl	80003dc <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f7ff ff78 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000418:	68b9      	ldr	r1, [r7, #8]
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	f7ff ffc7 	bl	80003ae <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	2100      	movs	r1, #0
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f7ff ff6f 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f7ff ffbe 	bl	80003ae <CLCD_I2C_WriteString>
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8000442:	4b2a      	ldr	r3, [pc, #168]	@ (80004ec <KeyPad_Init+0xb0>)
 8000444:	2204      	movs	r2, #4
 8000446:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000448:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <KeyPad_Init+0xb0>)
 800044a:	2204      	movs	r2, #4
 800044c:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	75fb      	strb	r3, [r7, #23]
 8000452:	e022      	b.n	800049a <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8000460:	7dfb      	ldrb	r3, [r7, #23]
 8000462:	4a23      	ldr	r2, [pc, #140]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000468:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 800046a:	7dfb      	ldrb	r3, [r7, #23]
 800046c:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <KeyPad_Init+0xb8>)
 800046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000472:	1d3a      	adds	r2, r7, #4
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f004 f8f8 	bl	800466c <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 800047c:	7dfb      	ldrb	r3, [r7, #23]
 800047e:	4a1d      	ldr	r2, [pc, #116]	@ (80004f4 <KeyPad_Init+0xb8>)
 8000480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	4a1a      	ldr	r2, [pc, #104]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	f004 fa87 	bl	80049a2 <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	3301      	adds	r3, #1
 8000498:	75fb      	strb	r3, [r7, #23]
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <KeyPad_Init+0xb0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	7dfa      	ldrb	r2, [r7, #23]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d3d7      	bcc.n	8000454 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	75bb      	strb	r3, [r7, #22]
 80004a8:	e016      	b.n	80004d8 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004b6:	7dbb      	ldrb	r3, [r7, #22]
 80004b8:	4a0f      	ldr	r2, [pc, #60]	@ (80004f8 <KeyPad_Init+0xbc>)
 80004ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004be:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004c0:	7dbb      	ldrb	r3, [r7, #22]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <KeyPad_Init+0xc0>)
 80004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f004 f8cd 	bl	800466c <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004d2:	7dbb      	ldrb	r3, [r7, #22]
 80004d4:	3301      	adds	r3, #1
 80004d6:	75bb      	strb	r3, [r7, #22]
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <KeyPad_Init+0xb0>)
 80004da:	785b      	ldrb	r3, [r3, #1]
 80004dc:	7dba      	ldrb	r2, [r7, #22]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d3e3      	bcc.n	80004aa <KeyPad_Init+0x6e>
  }
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000214 	.word	0x20000214
 80004f0:	0800df6c 	.word	0x0800df6c
 80004f4:	20000000 	.word	0x20000000
 80004f8:	0800df74 	.word	0x0800df74
 80004fc:	20000010 	.word	0x20000010

08000500 <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8000506:	2300      	movs	r3, #0
 8000508:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	e07e      	b.n	800060e <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000510:	2300      	movs	r3, #0
 8000512:	71bb      	strb	r3, [r7, #6]
 8000514:	e00e      	b.n	8000534 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	4a42      	ldr	r2, [pc, #264]	@ (8000624 <KeyPad_Scan+0x124>)
 800051a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	4a41      	ldr	r2, [pc, #260]	@ (8000628 <KeyPad_Scan+0x128>)
 8000522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	f004 fa3a 	bl	80049a2 <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	3301      	adds	r3, #1
 8000532:	71bb      	strb	r3, [r7, #6]
 8000534:	4b3d      	ldr	r3, [pc, #244]	@ (800062c <KeyPad_Scan+0x12c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3eb      	bcc.n	8000516 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4a38      	ldr	r2, [pc, #224]	@ (8000624 <KeyPad_Scan+0x124>)
 8000542:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a37      	ldr	r2, [pc, #220]	@ (8000628 <KeyPad_Scan+0x128>)
 800054a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fa26 	bl	80049a2 <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000556:	2005      	movs	r0, #5
 8000558:	f003 fd56 	bl	8004008 <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 800055c:	2300      	movs	r3, #0
 800055e:	717b      	strb	r3, [r7, #5]
 8000560:	e04d      	b.n	80005fe <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	4a32      	ldr	r2, [pc, #200]	@ (8000630 <KeyPad_Scan+0x130>)
 8000566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	4931      	ldr	r1, [pc, #196]	@ (8000634 <KeyPad_Scan+0x134>)
 800056e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000572:	4619      	mov	r1, r3
 8000574:	4610      	mov	r0, r2
 8000576:	f004 f9fd 	bl	8004974 <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d13b      	bne.n	80005f8 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000580:	2014      	movs	r0, #20
 8000582:	f003 fd41 	bl	8004008 <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <KeyPad_Scan+0x130>)
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	797b      	ldrb	r3, [r7, #5]
 8000590:	4928      	ldr	r1, [pc, #160]	@ (8000634 <KeyPad_Scan+0x134>)
 8000592:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000596:	4619      	mov	r1, r3
 8000598:	4610      	mov	r0, r2
 800059a:	f004 f9eb 	bl	8004974 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d129      	bne.n	80005f8 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2201      	movs	r2, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	3308      	adds	r3, #8
 80005bc:	2201      	movs	r2, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b21b      	sxth	r3, r3
 80005cc:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005ce:	e002      	b.n	80005d6 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005d0:	2005      	movs	r0, #5
 80005d2:	f003 fd19 	bl	8004008 <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <KeyPad_Scan+0x130>)
 80005da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	4914      	ldr	r1, [pc, #80]	@ (8000634 <KeyPad_Scan+0x134>)
 80005e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4610      	mov	r0, r2
 80005ea:	f004 f9c3 	bl	8004974 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0ed      	beq.n	80005d0 <KeyPad_Scan+0xd0>
          return key;
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	e011      	b.n	800061c <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	3301      	adds	r3, #1
 80005fc:	717b      	strb	r3, [r7, #5]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <KeyPad_Scan+0x12c>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	797a      	ldrb	r2, [r7, #5]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3ac      	bcc.n	8000562 <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3301      	adds	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <KeyPad_Scan+0x12c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	429a      	cmp	r2, r3
 8000616:	f4ff af7b 	bcc.w	8000510 <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 800061a:	887b      	ldrh	r3, [r7, #2]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	0800df6c 	.word	0x0800df6c
 800062c:	20000214 	.word	0x20000214
 8000630:	20000010 	.word	0x20000010
 8000634:	0800df74 	.word	0x0800df74

08000638 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 8000640:	e00e      	b.n	8000660 <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 8000642:	f7ff ff5d 	bl	8000500 <KeyPad_Scan>
 8000646:	4603      	mov	r3, r0
 8000648:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 800064a:	897b      	ldrh	r3, [r7, #10]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 8000650:	4a16      	ldr	r2, [pc, #88]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000656:	897b      	ldrh	r3, [r7, #10]
 8000658:	e024      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800065a:	2014      	movs	r0, #20
 800065c:	f003 fcd4 	bl	8004008 <HAL_Delay>
  while(Timeout_ms==0)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0ed      	beq.n	8000642 <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000666:	f003 fcc5 	bl	8003ff4 <HAL_GetTick>
 800066a:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800066c:	e00e      	b.n	800068c <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800066e:	f7ff ff47 	bl	8000500 <KeyPad_Scan>
 8000672:	4603      	mov	r3, r0
 8000674:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000676:	897b      	ldrh	r3, [r7, #10]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d004      	beq.n	8000686 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800067e:	897b      	ldrh	r3, [r7, #10]
 8000680:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000682:	897b      	ldrh	r3, [r7, #10]
 8000684:	e00e      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000686:	2014      	movs	r0, #20
 8000688:	f003 fcbe 	bl	8004008 <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800068c:	f003 fcb2 	bl	8003ff4 <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8e8      	bhi.n	800066e <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	805a      	strh	r2, [r3, #2]
	return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000214 	.word	0x20000214

080006b0 <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffbd 	bl	8000638 <KeyPad_WaitForKey>
 80006be:	4603      	mov	r3, r0
 80006c0:	f640 0208 	movw	r2, #2056	@ 0x808
 80006c4:	4293      	cmp	r3, r2
 80006c6:	f300 809f 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ce:	dc1a      	bgt.n	8000706 <KeyPad_WaitForKeyGetChar+0x56>
 80006d0:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006d4:	f300 8098 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006dc:	dc2a      	bgt.n	8000734 <KeyPad_WaitForKeyGetChar+0x84>
 80006de:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006e2:	f300 8091 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006ea:	dc3b      	bgt.n	8000764 <KeyPad_WaitForKeyGetChar+0xb4>
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d069      	beq.n	80007c4 <KeyPad_WaitForKeyGetChar+0x114>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f2c0 8089 	blt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006f6:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80006fa:	f300 8085 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000702:	dc47      	bgt.n	8000794 <KeyPad_WaitForKeyGetChar+0xe4>
 8000704:	e080      	b.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 8000706:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 800070a:	2b07      	cmp	r3, #7
 800070c:	d87c      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800070e:	a201      	add	r2, pc, #4	@ (adr r2, 8000714 <KeyPad_WaitForKeyGetChar+0x64>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	080007d5 	.word	0x080007d5
 8000718:	080007e5 	.word	0x080007e5
 800071c:	08000809 	.word	0x08000809
 8000720:	080007f5 	.word	0x080007f5
 8000724:	08000809 	.word	0x08000809
 8000728:	08000809 	.word	0x08000809
 800072c:	08000809 	.word	0x08000809
 8000730:	08000805 	.word	0x08000805
 8000734:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000738:	2b07      	cmp	r3, #7
 800073a:	d865      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800073c:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <KeyPad_WaitForKeyGetChar+0x94>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	080007d1 	.word	0x080007d1
 8000748:	080007e1 	.word	0x080007e1
 800074c:	08000809 	.word	0x08000809
 8000750:	080007f1 	.word	0x080007f1
 8000754:	08000809 	.word	0x08000809
 8000758:	08000809 	.word	0x08000809
 800075c:	08000809 	.word	0x08000809
 8000760:	08000801 	.word	0x08000801
 8000764:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000768:	2b07      	cmp	r3, #7
 800076a:	d84d      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800076c:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <KeyPad_WaitForKeyGetChar+0xc4>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	080007cd 	.word	0x080007cd
 8000778:	080007dd 	.word	0x080007dd
 800077c:	08000809 	.word	0x08000809
 8000780:	080007ed 	.word	0x080007ed
 8000784:	08000809 	.word	0x08000809
 8000788:	08000809 	.word	0x08000809
 800078c:	08000809 	.word	0x08000809
 8000790:	080007fd 	.word	0x080007fd
 8000794:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000798:	2b07      	cmp	r3, #7
 800079a:	d835      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800079c:	a201      	add	r2, pc, #4	@ (adr r2, 80007a4 <KeyPad_WaitForKeyGetChar+0xf4>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007c9 	.word	0x080007c9
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	08000809 	.word	0x08000809
 80007b0:	080007e9 	.word	0x080007e9
 80007b4:	08000809 	.word	0x08000809
 80007b8:	08000809 	.word	0x08000809
 80007bc:	08000809 	.word	0x08000809
 80007c0:	080007f9 	.word	0x080007f9
  {
    case 0x0000:
      return 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e020      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007c8:	2331      	movs	r3, #49	@ 0x31
 80007ca:	e01e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007cc:	2332      	movs	r3, #50	@ 0x32
 80007ce:	e01c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007d0:	2333      	movs	r3, #51	@ 0x33
 80007d2:	e01a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007d4:	2341      	movs	r3, #65	@ 0x41
 80007d6:	e018      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007d8:	2334      	movs	r3, #52	@ 0x34
 80007da:	e016      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007dc:	2335      	movs	r3, #53	@ 0x35
 80007de:	e014      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007e0:	2336      	movs	r3, #54	@ 0x36
 80007e2:	e012      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007e4:	2342      	movs	r3, #66	@ 0x42
 80007e6:	e010      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007e8:	2337      	movs	r3, #55	@ 0x37
 80007ea:	e00e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007ec:	2338      	movs	r3, #56	@ 0x38
 80007ee:	e00c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 80007f0:	2339      	movs	r3, #57	@ 0x39
 80007f2:	e00a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 80007f4:	2343      	movs	r3, #67	@ 0x43
 80007f6:	e008      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 80007f8:	232a      	movs	r3, #42	@ 0x2a
 80007fa:	e006      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 80007fc:	2330      	movs	r3, #48	@ 0x30
 80007fe:	e004      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 8000800:	2323      	movs	r3, #35	@ 0x23
 8000802:	e002      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8000804:	2344      	movs	r3, #68	@ 0x44
 8000806:	e000      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 8000808:	2300      	movs	r3, #0
	}
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop

08000814 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800081e:	1df9      	adds	r1, r7, #7
 8000820:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000824:	2201      	movs	r2, #1
 8000826:	4803      	ldr	r0, [pc, #12]	@ (8000834 <USART_SendByte+0x20>)
 8000828:	f007 fcb1 	bl	800818e <HAL_UART_Transmit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000310 	.word	0x20000310

08000838 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 8000842:	bf00      	nop
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 0108 	add.w	r1, r7, #8
 800084c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <receive_finger+0x3c>)
 8000852:	f007 fd2e 	bl	80082b2 <HAL_UART_Receive>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f3      	beq.n	8000844 <receive_finger+0xc>
	//HAL_UART_Receive(&huart1,D,len,500);
	p=D[len-3];
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3b03      	subs	r3, #3
 8000860:	3318      	adds	r3, #24
 8000862:	443b      	add	r3, r7
 8000864:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000868:	75fb      	strb	r3, [r7, #23]
	return p;
 800086a:	7dfb      	ldrb	r3, [r7, #23]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000310 	.word	0x20000310

08000878 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
//	while((HAL_UART_Receive(&huart1,D,len,500))==HAL_OK);
	HAL_UART_Receive(&huart1,D,len,1000);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	b29a      	uxth	r2, r3
 8000886:	f107 0108 	add.w	r1, r7, #8
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	4807      	ldr	r0, [pc, #28]	@ (80008ac <receive_finger_match+0x34>)
 8000890:	f007 fd0f 	bl	80082b2 <HAL_UART_Receive>
	p=D[len-5];
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	3b05      	subs	r3, #5
 8000898:	3318      	adds	r3, #24
 800089a:	443b      	add	r3, r7
 800089c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008a0:	75fb      	strb	r3, [r7, #23]
	return p;
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000310 	.word	0x20000310

080008b0 <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
//	while((HAL_UART_Receive(&huart1,D,len,500))==HAL_OK);
	HAL_UART_Receive(&huart1,D,len,200);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 010c 	add.w	r1, r7, #12
 80008c2:	23c8      	movs	r3, #200	@ 0xc8
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <receive_finger_search+0x38>)
 80008c6:	f007 fcf4 	bl	80082b2 <HAL_UART_Receive>
	p=D[len-7];
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b07      	subs	r3, #7
 80008ce:	3320      	adds	r3, #32
 80008d0:	443b      	add	r3, r7
 80008d2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008d6:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008d8:	7dfa      	ldrb	r2, [r7, #23]
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <receive_finger_search+0x3c>)
 80008dc:	701a      	strb	r2, [r3, #0]

	return p;
 80008de:	7ffb      	ldrb	r3, [r7, #31]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000310 	.word	0x20000310
 80008ec:	20000218 	.word	0x20000218

080008f0 <collect_finger>:
int collect_finger(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 80008f4:	20ef      	movs	r0, #239	@ 0xef
 80008f6:	f7ff ff8d 	bl	8000814 <USART_SendByte>
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ff8a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000900:	20ff      	movs	r0, #255	@ 0xff
 8000902:	f7ff ff87 	bl	8000814 <USART_SendByte>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	f7ff ff84 	bl	8000814 <USART_SendByte>
 800090c:	20ff      	movs	r0, #255	@ 0xff
 800090e:	f7ff ff81 	bl	8000814 <USART_SendByte>
 8000912:	20ff      	movs	r0, #255	@ 0xff
 8000914:	f7ff ff7e 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff ff7b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff78 	bl	8000814 <USART_SendByte>
 8000924:	2003      	movs	r0, #3
 8000926:	f7ff ff75 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff ff72 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff6f 	bl	8000814 <USART_SendByte>
 8000936:	2005      	movs	r0, #5
 8000938:	f7ff ff6c 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 800093c:	200c      	movs	r0, #12
 800093e:	f7ff ff7b 	bl	8000838 <receive_finger>
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	bd80      	pop	{r7, pc}

08000948 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	3307      	adds	r3, #7
 800095a:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 800095c:	20ef      	movs	r0, #239	@ 0xef
 800095e:	f7ff ff59 	bl	8000814 <USART_SendByte>
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff ff56 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000968:	20ff      	movs	r0, #255	@ 0xff
 800096a:	f7ff ff53 	bl	8000814 <USART_SendByte>
 800096e:	20ff      	movs	r0, #255	@ 0xff
 8000970:	f7ff ff50 	bl	8000814 <USART_SendByte>
 8000974:	20ff      	movs	r0, #255	@ 0xff
 8000976:	f7ff ff4d 	bl	8000814 <USART_SendByte>
 800097a:	20ff      	movs	r0, #255	@ 0xff
 800097c:	f7ff ff4a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff ff47 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff44 	bl	8000814 <USART_SendByte>
 800098c:	2004      	movs	r0, #4
 800098e:	f7ff ff41 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x02);
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff ff3e 	bl	8000814 <USART_SendByte>
   USART_SendByte(local);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff3a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff37 	bl	8000814 <USART_SendByte>
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff32 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 80009b0:	200c      	movs	r0, #12
 80009b2:	f7ff ff41 	bl	8000838 <receive_finger>
 80009b6:	4603      	mov	r3, r0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009c4:	20ef      	movs	r0, #239	@ 0xef
 80009c6:	f7ff ff25 	bl	8000814 <USART_SendByte>
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff ff22 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009d0:	20ff      	movs	r0, #255	@ 0xff
 80009d2:	f7ff ff1f 	bl	8000814 <USART_SendByte>
 80009d6:	20ff      	movs	r0, #255	@ 0xff
 80009d8:	f7ff ff1c 	bl	8000814 <USART_SendByte>
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	f7ff ff19 	bl	8000814 <USART_SendByte>
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	f7ff ff16 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ff13 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff ff10 	bl	8000814 <USART_SendByte>
 80009f4:	2003      	movs	r0, #3
 80009f6:	f7ff ff0d 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x03);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff ff0a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ff07 	bl	8000814 <USART_SendByte>
 8000a06:	2007      	movs	r0, #7
 8000a08:	f7ff ff04 	bl	8000814 <USART_SendByte>
   return receive_finger_match(14);
 8000a0c:	200e      	movs	r0, #14
 8000a0e:	f7ff ff33 	bl	8000878 <receive_finger_match>
 8000a12:	4603      	mov	r3, r0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a1c:	20ef      	movs	r0, #239	@ 0xef
 8000a1e:	f7ff fef9 	bl	8000814 <USART_SendByte>
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fef6 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a28:	20ff      	movs	r0, #255	@ 0xff
 8000a2a:	f7ff fef3 	bl	8000814 <USART_SendByte>
 8000a2e:	20ff      	movs	r0, #255	@ 0xff
 8000a30:	f7ff fef0 	bl	8000814 <USART_SendByte>
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	f7ff feed 	bl	8000814 <USART_SendByte>
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	f7ff feea 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fee7 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fee4 	bl	8000814 <USART_SendByte>
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f7ff fee1 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x05);
 8000a52:	2005      	movs	r0, #5
 8000a54:	f7ff fede 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fedb 	bl	8000814 <USART_SendByte>
 8000a5e:	2009      	movs	r0, #9
 8000a60:	f7ff fed8 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000a64:	200c      	movs	r0, #12
 8000a66:	f7ff fee7 	bl	8000838 <receive_finger>
 8000a6a:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	330e      	adds	r3, #14
 8000a7e:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a80:	20ef      	movs	r0, #239	@ 0xef
 8000a82:	f7ff fec7 	bl	8000814 <USART_SendByte>
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fec4 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a8c:	20ff      	movs	r0, #255	@ 0xff
 8000a8e:	f7ff fec1 	bl	8000814 <USART_SendByte>
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	f7ff febe 	bl	8000814 <USART_SendByte>
 8000a98:	20ff      	movs	r0, #255	@ 0xff
 8000a9a:	f7ff febb 	bl	8000814 <USART_SendByte>
 8000a9e:	20ff      	movs	r0, #255	@ 0xff
 8000aa0:	f7ff feb8 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff feb5 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff feb2 	bl	8000814 <USART_SendByte>
 8000ab0:	2006      	movs	r0, #6
 8000ab2:	f7ff feaf 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x06);
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	f7ff feac 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fea9 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fea6 	bl	8000814 <USART_SendByte>
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fea2 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fe9f 	bl	8000814 <USART_SendByte>
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe9b 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f7ff feaa 	bl	8000838 <receive_finger>
 8000ae4:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000af2:	20ef      	movs	r0, #239	@ 0xef
 8000af4:	f7ff fe8e 	bl	8000814 <USART_SendByte>
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fe8b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000afe:	20ff      	movs	r0, #255	@ 0xff
 8000b00:	f7ff fe88 	bl	8000814 <USART_SendByte>
 8000b04:	20ff      	movs	r0, #255	@ 0xff
 8000b06:	f7ff fe85 	bl	8000814 <USART_SendByte>
 8000b0a:	20ff      	movs	r0, #255	@ 0xff
 8000b0c:	f7ff fe82 	bl	8000814 <USART_SendByte>
 8000b10:	20ff      	movs	r0, #255	@ 0xff
 8000b12:	f7ff fe7f 	bl	8000814 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fe7c 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe79 	bl	8000814 <USART_SendByte>
 8000b22:	2008      	movs	r0, #8
 8000b24:	f7ff fe76 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x04);
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f7ff fe73 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe70 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe6d 	bl	8000814 <USART_SendByte>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe6a 	bl	8000814 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fe67 	bl	8000814 <USART_SendByte>
 8000b46:	20ff      	movs	r0, #255	@ 0xff
 8000b48:	f7ff fe64 	bl	8000814 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fe61 	bl	8000814 <USART_SendByte>
 8000b52:	200d      	movs	r0, #13
 8000b54:	f7ff fe5e 	bl	8000814 <USART_SendByte>
   return receive_finger_search(16);
 8000b58:	2010      	movs	r0, #16
 8000b5a:	f7ff fea9 	bl	80008b0 <receive_finger_search>
 8000b5e:	4603      	mov	r3, r0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <Flash_Erase>:
 */


#include <flash.h>

void Flash_Erase(uint32_t address){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000b6c:	f003 fbee 	bl	800434c <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000b80:	f107 020c 	add.w	r2, r7, #12
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f003 fcc6 	bl	800451c <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000b90:	f003 fc02 	bl	8004398 <HAL_FLASH_Lock>
}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000ba8:	f003 fbd0 	bl	800434c <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	461c      	mov	r4, r3
 8000bb2:	4615      	mov	r5, r2
 8000bb4:	4622      	mov	r2, r4
 8000bb6:	462b      	mov	r3, r5
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f003 fb56 	bl	800426c <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000bc0:	f003 fbea 	bl	8004398 <HAL_FLASH_Lock>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bdb0      	pop	{r4, r5, r7, pc}

08000bcc <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000bda:	f003 fbb7 	bl	800434c <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000bde:	2300      	movs	r3, #0
 8000be0:	82fb      	strh	r3, [r7, #22]
 8000be2:	e00c      	b.n	8000bfe <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000be4:	8afa      	ldrh	r2, [r7, #22]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	18d0      	adds	r0, r2, r3
 8000bea:	8afb      	ldrh	r3, [r7, #22]
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	4413      	add	r3, r2
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f7ff ffd2 	bl	8000b9c <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000bf8:	8afb      	ldrh	r3, [r7, #22]
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	82fb      	strh	r3, [r7, #22]
 8000bfe:	8afa      	ldrh	r2, [r7, #22]
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d3ee      	bcc.n	8000be4 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000c06:	f003 fbc7 	bl	8004398 <HAL_FLASH_Lock>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b2db      	uxtb	r3, r3
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	b29b      	uxth	r3, r3
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	4613      	mov	r3, r2
 8000c68:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	82fb      	strh	r3, [r7, #22]
 8000c6e:	e00c      	b.n	8000c8a <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000c70:	8afa      	ldrh	r2, [r7, #22]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4413      	add	r3, r2
 8000c76:	4619      	mov	r1, r3
 8000c78:	8afb      	ldrh	r3, [r7, #22]
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	780a      	ldrb	r2, [r1, #0]
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000c84:	8afb      	ldrh	r3, [r7, #22]
 8000c86:	3301      	adds	r3, #1
 8000c88:	82fb      	strh	r3, [r7, #22]
 8000c8a:	8afa      	ldrh	r2, [r7, #22]
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d3ee      	bcc.n	8000c70 <Flash_Read_Array+0x14>
	}
}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
	...

08000ca0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cba:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000cbc:	e002      	b.n	8000cc4 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000cbe:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000020 	.word	0x20000020

08000cd4 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000cda:	f7ff fe09 	bl	80008f0 <collect_finger>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000ce8:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <check_fingerprint_status+0x24>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
    }
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000409 	.word	0x20000409

08000cfc <process_fingerprint>:
void process_fingerprint()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <process_fingerprint+0x1c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d004      	beq.n	8000d12 <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <process_fingerprint+0x1c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000d0e:	f002 fa1d 	bl	800314c <read_finger>
    }
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000409 	.word	0x20000409

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b090      	sub	sp, #64	@ 0x40
 8000d20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d22:	f003 f90f 	bl	8003f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d26:	f000 f989 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2a:	f000 fabf 	bl	80012ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d2e:	f000 fa0f 	bl	8001150 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000d32:	f000 f9df 	bl	80010f4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000d36:	f000 fa8f 	bl	8001258 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d3a:	f000 fa3f 	bl	80011bc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000d3e:	f00b fad5 	bl	800c2ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000d42:	f002 fca5 	bl	8003690 <TM_MFRC522_Init>
  KeyPad_Init();
 8000d46:	f7ff fb79 	bl	800043c <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2310      	movs	r3, #16
 8000d50:	224e      	movs	r2, #78	@ 0x4e
 8000d52:	49a9      	ldr	r1, [pc, #676]	@ (8000ff8 <main+0x2dc>)
 8000d54:	48a9      	ldr	r0, [pc, #676]	@ (8000ffc <main+0x2e0>)
 8000d56:	f7ff fa67 	bl	8000228 <CLCD_I2C_Init>

  // Check if the password is set, if not, set the default password
  char stored_password[7] = {0};
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2100      	movs	r1, #0
 8000d64:	460a      	mov	r2, r1
 8000d66:	801a      	strh	r2, [r3, #0]
 8000d68:	460a      	mov	r2, r1
 8000d6a:	709a      	strb	r2, [r3, #2]
  Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	2206      	movs	r2, #6
 8000d72:	4619      	mov	r1, r3
 8000d74:	48a2      	ldr	r0, [pc, #648]	@ (8001000 <main+0x2e4>)
 8000d76:	f7ff ff71 	bl	8000c5c <Flash_Read_Array>
  stored_password[6] = '\0';
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	77bb      	strb	r3, [r7, #30]
  int is_empty = 1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
  for (int i = 0; i < 6; i++) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d86:	e00c      	b.n	8000da2 <main+0x86>
      if (stored_password[i] != (char)0xFF) {
 8000d88:	f107 0218 	add.w	r2, r7, #24
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d8e:	4413      	add	r3, r2
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2bff      	cmp	r3, #255	@ 0xff
 8000d94:	d002      	beq.n	8000d9c <main+0x80>
          is_empty = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8000d9a:	e005      	b.n	8000da8 <main+0x8c>
  for (int i = 0; i < 6; i++) {
 8000d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d9e:	3301      	adds	r3, #1
 8000da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8000da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	ddef      	ble.n	8000d88 <main+0x6c>
      }
  }
  if (is_empty) {
 8000da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <main+0x96>
      set_default_password();
 8000dae:	f002 fc11 	bl	80035d4 <set_default_password>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000db2:	4894      	ldr	r0, [pc, #592]	@ (8001004 <main+0x2e8>)
 8000db4:	f006 fdf4 	bl	80079a0 <HAL_TIM_Base_Start_IT>
  if (checkcountUID() == 0)
 8000db8:	f001 fe6c 	bl	8002a94 <checkcountUID>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <main+0xaa>
  {
      startadd();
 8000dc2:	f001 fff3 	bl	8002dac <startadd>
  }
  int incorrect_attempts = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    CLCD_I2C_Clear(&LCD1);
 8000dca:	488c      	ldr	r0, [pc, #560]	@ (8000ffc <main+0x2e0>)
 8000dcc:	f7ff fb06 	bl	80003dc <CLCD_I2C_Clear>
    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4889      	ldr	r0, [pc, #548]	@ (8000ffc <main+0x2e0>)
 8000dd6:	f7ff fa97 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 8000dda:	498b      	ldr	r1, [pc, #556]	@ (8001008 <main+0x2ec>)
 8000ddc:	4887      	ldr	r0, [pc, #540]	@ (8000ffc <main+0x2e0>)
 8000dde:	f7ff fae6 	bl	80003ae <CLCD_I2C_WriteString>

    char selected_key = KeyPad_WaitForKeyGetChar(10); // Chờ vô hạn cho đến khi có phím nhấn.
 8000de2:	200a      	movs	r0, #10
 8000de4:	f7ff fc64 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8000de8:	4603      	mov	r3, r0
 8000dea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    if (selected_key == '#')
 8000dee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000df2:	2b23      	cmp	r3, #35	@ 0x23
 8000df4:	d15e      	bne.n	8000eb4 <main+0x198>
    {
        char entered_password[7] = {0};
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	2100      	movs	r1, #0
 8000e00:	460a      	mov	r2, r1
 8000e02:	801a      	strh	r2, [r3, #0]
 8000e04:	460a      	mov	r2, r1
 8000e06:	709a      	strb	r2, [r3, #2]
        CLCD_I2C_Display(&LCD1, "ENTER PASSWORD", "");
 8000e08:	4a80      	ldr	r2, [pc, #512]	@ (800100c <main+0x2f0>)
 8000e0a:	4981      	ldr	r1, [pc, #516]	@ (8001010 <main+0x2f4>)
 8000e0c:	487b      	ldr	r0, [pc, #492]	@ (8000ffc <main+0x2e0>)
 8000e0e:	f7ff faf5 	bl	80003fc <CLCD_I2C_Display>
        enter_password(entered_password);
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fb4c 	bl	80034b4 <enter_password>
        if (check_password(entered_password)) {
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 fbaf 	bl	8003584 <check_password>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d007      	beq.n	8000e3c <main+0x120>
            CLCD_I2C_Display(&LCD1, "    WELCOME", "");
 8000e2c:	4a77      	ldr	r2, [pc, #476]	@ (800100c <main+0x2f0>)
 8000e2e:	4979      	ldr	r1, [pc, #484]	@ (8001014 <main+0x2f8>)
 8000e30:	4872      	ldr	r0, [pc, #456]	@ (8000ffc <main+0x2e0>)
 8000e32:	f7ff fae3 	bl	80003fc <CLCD_I2C_Display>
            incorrect_attempts = 0; // Reset incorrect attempts on successful login
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e3a:	e033      	b.n	8000ea4 <main+0x188>
        } else {
            incorrect_attempts++;
 8000e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e3e:	3301      	adds	r3, #1
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            CLCD_I2C_Display(&LCD1, "WRONG PASSWORD", "");
 8000e42:	4a72      	ldr	r2, [pc, #456]	@ (800100c <main+0x2f0>)
 8000e44:	4974      	ldr	r1, [pc, #464]	@ (8001018 <main+0x2fc>)
 8000e46:	486d      	ldr	r0, [pc, #436]	@ (8000ffc <main+0x2e0>)
 8000e48:	f7ff fad8 	bl	80003fc <CLCD_I2C_Display>
            int delay_time = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (incorrect_attempts == 1) {
 8000e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d102      	bne.n	8000e5c <main+0x140>
                delay_time = 5;
 8000e56:	2305      	movs	r3, #5
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e5a:	e00a      	b.n	8000e72 <main+0x156>
            } else if (incorrect_attempts == 2) {
 8000e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d102      	bne.n	8000e68 <main+0x14c>
                delay_time = 10;
 8000e62:	230a      	movs	r3, #10
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e66:	e004      	b.n	8000e72 <main+0x156>
            } else if (incorrect_attempts >= 3) {
 8000e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	dd01      	ble.n	8000e72 <main+0x156>
                delay_time = 20;
 8000e6e:	2314      	movs	r3, #20
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            for (int i = delay_time; i > 0; i--) {
 8000e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e76:	e012      	b.n	8000e9e <main+0x182>
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "     WAIT %ds", i);
 8000e78:	4638      	mov	r0, r7
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7c:	4a67      	ldr	r2, [pc, #412]	@ (800101c <main+0x300>)
 8000e7e:	2110      	movs	r1, #16
 8000e80:	f00b fede 	bl	800cc40 <sniprintf>
                CLCD_I2C_Display(&LCD1, buffer, "  TO TRY AGAIN");
 8000e84:	463b      	mov	r3, r7
 8000e86:	4a66      	ldr	r2, [pc, #408]	@ (8001020 <main+0x304>)
 8000e88:	4619      	mov	r1, r3
 8000e8a:	485c      	ldr	r0, [pc, #368]	@ (8000ffc <main+0x2e0>)
 8000e8c:	f7ff fab6 	bl	80003fc <CLCD_I2C_Display>
                HAL_Delay(1000);
 8000e90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e94:	f003 f8b8 	bl	8004008 <HAL_Delay>
            for (int i = delay_time; i > 0; i--) {
 8000e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	dce9      	bgt.n	8000e78 <main+0x15c>
            }
        }
        HAL_Delay(2000);
 8000ea4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ea8:	f003 f8ae 	bl	8004008 <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 8000eac:	4853      	ldr	r0, [pc, #332]	@ (8000ffc <main+0x2e0>)
 8000eae:	f7ff fa95 	bl	80003dc <CLCD_I2C_Clear>
 8000eb2:	e09c      	b.n	8000fee <main+0x2d2>
    }
    else if (selected_key != 0)
 8000eb4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d061      	beq.n	8000f80 <main+0x264>
    {
        uint8_t key = 0; // Key quản lý quyền truy cập.
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        exitmenu = 15;
 8000ec2:	4b58      	ldr	r3, [pc, #352]	@ (8001024 <main+0x308>)
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	701a      	strb	r2, [r3, #0]

        switch (selected_key)
 8000ec8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000ecc:	3b41      	subs	r3, #65	@ 0x41
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	f200 808c 	bhi.w	8000fec <main+0x2d0>
        {
        case 'A': // RFID
        case 'B': // FACEID
        case 'C': // FINGER
        case 'D': // PASSWORD
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4848      	ldr	r0, [pc, #288]	@ (8000ffc <main+0x2e0>)
 8000eda:	f7ff fa15 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 8000ede:	4952      	ldr	r1, [pc, #328]	@ (8001028 <main+0x30c>)
 8000ee0:	4846      	ldr	r0, [pc, #280]	@ (8000ffc <main+0x2e0>)
 8000ee2:	f7ff fa64 	bl	80003ae <CLCD_I2C_WriteString>

            while (exitmenu)
 8000ee6:	e011      	b.n	8000f0c <main+0x1f0>
            {
                if (TM_MFRC522_Check(CardID) == MI_OK)
 8000ee8:	4850      	ldr	r0, [pc, #320]	@ (800102c <main+0x310>)
 8000eea:	f002 fbf5 	bl	80036d8 <TM_MFRC522_Check>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10b      	bne.n	8000f0c <main+0x1f0>
                {
                    key = CheckListUID(CardID);
 8000ef4:	484d      	ldr	r0, [pc, #308]	@ (800102c <main+0x310>)
 8000ef6:	f001 fd9d 	bl	8002a34 <CheckListUID>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    key = key >> 4;
 8000f00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    break;
 8000f0a:	e003      	b.n	8000f14 <main+0x1f8>
            while (exitmenu)
 8000f0c:	4b45      	ldr	r3, [pc, #276]	@ (8001024 <main+0x308>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1e9      	bne.n	8000ee8 <main+0x1cc>
                }
            }

            switch (key)
 8000f14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d11b      	bne.n	8000f54 <main+0x238>
            {
            case 1:
                if (selected_key == 'A')
 8000f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f20:	2b41      	cmp	r3, #65	@ 0x41
 8000f22:	d102      	bne.n	8000f2a <main+0x20e>
                    RFID();
 8000f24:	f000 fa70 	bl	8001408 <RFID>
                    FACEID();
                else if (selected_key == 'C')
                    FINGER();
                else if (selected_key == 'D')
                    PASSWORD();
                break;
 8000f28:	e028      	b.n	8000f7c <main+0x260>
                else if (selected_key == 'B')
 8000f2a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f2e:	2b42      	cmp	r3, #66	@ 0x42
 8000f30:	d102      	bne.n	8000f38 <main+0x21c>
                    FACEID();
 8000f32:	f001 f95b 	bl	80021ec <FACEID>
                break;
 8000f36:	e021      	b.n	8000f7c <main+0x260>
                else if (selected_key == 'C')
 8000f38:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f3c:	2b43      	cmp	r3, #67	@ 0x43
 8000f3e:	d102      	bne.n	8000f46 <main+0x22a>
                    FINGER();
 8000f40:	f001 fcd8 	bl	80028f4 <FINGER>
                break;
 8000f44:	e01a      	b.n	8000f7c <main+0x260>
                else if (selected_key == 'D')
 8000f46:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f4a:	2b44      	cmp	r3, #68	@ 0x44
 8000f4c:	d116      	bne.n	8000f7c <main+0x260>
                    PASSWORD();
 8000f4e:	f001 fcd7 	bl	8002900 <PASSWORD>
                break;
 8000f52:	e013      	b.n	8000f7c <main+0x260>
            default:
                CLCD_I2C_Clear(&LCD1);
 8000f54:	4829      	ldr	r0, [pc, #164]	@ (8000ffc <main+0x2e0>)
 8000f56:	f7ff fa41 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4827      	ldr	r0, [pc, #156]	@ (8000ffc <main+0x2e0>)
 8000f60:	f7ff f9d2 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 8000f64:	4932      	ldr	r1, [pc, #200]	@ (8001030 <main+0x314>)
 8000f66:	4825      	ldr	r0, [pc, #148]	@ (8000ffc <main+0x2e0>)
 8000f68:	f7ff fa21 	bl	80003ae <CLCD_I2C_WriteString>
                HAL_Delay(2000);
 8000f6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f70:	f003 f84a 	bl	8004008 <HAL_Delay>
                CLCD_I2C_Clear(&LCD1);
 8000f74:	4821      	ldr	r0, [pc, #132]	@ (8000ffc <main+0x2e0>)
 8000f76:	f7ff fa31 	bl	80003dc <CLCD_I2C_Clear>
                break;
 8000f7a:	e000      	b.n	8000f7e <main+0x262>
                break;
 8000f7c:	bf00      	nop
            }
            break;
 8000f7e:	e036      	b.n	8000fee <main+0x2d2>

        default:
            break;
        }
    }
    else if (TM_MFRC522_Check(CardID) == MI_OK)
 8000f80:	482a      	ldr	r0, [pc, #168]	@ (800102c <main+0x310>)
 8000f82:	f002 fba9 	bl	80036d8 <TM_MFRC522_Check>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d127      	bne.n	8000fdc <main+0x2c0>
    {
        if (CheckListUID(CardID) != 0)
 8000f8c:	4827      	ldr	r0, [pc, #156]	@ (800102c <main+0x310>)
 8000f8e:	f001 fd51 	bl	8002a34 <CheckListUID>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d010      	beq.n	8000fba <main+0x29e>
        {
            CLCD_I2C_Clear(&LCD1);
 8000f98:	4818      	ldr	r0, [pc, #96]	@ (8000ffc <main+0x2e0>)
 8000f9a:	f7ff fa1f 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4816      	ldr	r0, [pc, #88]	@ (8000ffc <main+0x2e0>)
 8000fa4:	f7ff f9b0 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 8000fa8:	491a      	ldr	r1, [pc, #104]	@ (8001014 <main+0x2f8>)
 8000faa:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <main+0x2e0>)
 8000fac:	f7ff f9ff 	bl	80003ae <CLCD_I2C_WriteString>
            HAL_Delay(500);
 8000fb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fb4:	f003 f828 	bl	8004008 <HAL_Delay>
 8000fb8:	e019      	b.n	8000fee <main+0x2d2>
        }
        else
        {
            CLCD_I2C_Clear(&LCD1);
 8000fba:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <main+0x2e0>)
 8000fbc:	f7ff fa0e 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <main+0x2e0>)
 8000fc6:	f7ff f99f 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 8000fca:	491a      	ldr	r1, [pc, #104]	@ (8001034 <main+0x318>)
 8000fcc:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <main+0x2e0>)
 8000fce:	f7ff f9ee 	bl	80003ae <CLCD_I2C_WriteString>
            HAL_Delay(3000);
 8000fd2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fd6:	f003 f817 	bl	8004008 <HAL_Delay>
 8000fda:	e008      	b.n	8000fee <main+0x2d2>
        }
    }
    else if(Rx_Buffer[0]!= 0)
 8000fdc:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <main+0x31c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <main+0x2d2>
    {
        startface();
 8000fe6:	f002 f93b 	bl	8003260 <startface>
 8000fea:	e000      	b.n	8000fee <main+0x2d2>
            break;
 8000fec:	bf00      	nop
    }

    // Kiểm tra trạng thái vân tay định kỳ
    check_fingerprint_status();
 8000fee:	f7ff fe71 	bl	8000cd4 <check_fingerprint_status>

    // Xử lý vân tay nếu phát hiện
    process_fingerprint();
 8000ff2:	f7ff fe83 	bl	8000cfc <process_fingerprint>
  {
 8000ff6:	e6e8      	b.n	8000dca <main+0xae>
 8000ff8:	2000021c 	.word	0x2000021c
 8000ffc:	200003d8 	.word	0x200003d8
 8001000:	0800f400 	.word	0x0800f400
 8001004:	200002c8 	.word	0x200002c8
 8001008:	0800d620 	.word	0x0800d620
 800100c:	0800d630 	.word	0x0800d630
 8001010:	0800d634 	.word	0x0800d634
 8001014:	0800d644 	.word	0x0800d644
 8001018:	0800d650 	.word	0x0800d650
 800101c:	0800d660 	.word	0x0800d660
 8001020:	0800d670 	.word	0x0800d670
 8001024:	20000020 	.word	0x20000020
 8001028:	0800d680 	.word	0x0800d680
 800102c:	200003e4 	.word	0x200003e4
 8001030:	0800d690 	.word	0x0800d690
 8001034:	0800d6a0 	.word	0x0800d6a0
 8001038:	20000350 	.word	0x20000350

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	@ 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001046:	2228      	movs	r2, #40	@ 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f00b fe4c 	bl	800cce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001070:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107a:	2301      	movs	r3, #1
 800107c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001082:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001086:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001088:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800108c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001092:	4618      	mov	r0, r3
 8001094:	f005 fc98 	bl	80069c8 <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800109e:	f002 fac9 	bl	8003634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	230f      	movs	r3, #15
 80010a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2101      	movs	r1, #1
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 ff04 	bl	8006ecc <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010ca:	f002 fab3 	bl	8003634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010ce:	2310      	movs	r3, #16
 80010d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010d6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4618      	mov	r0, r3
 80010dc:	f006 f88e 	bl	80071fc <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010e6:	f002 faa5 	bl	8003634 <Error_Handler>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3750      	adds	r7, #80	@ 0x50
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <MX_I2C2_Init+0x50>)
 80010fa:	4a13      	ldr	r2, [pc, #76]	@ (8001148 <MX_I2C2_Init+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_I2C2_Init+0x50>)
 8001100:	4a12      	ldr	r2, [pc, #72]	@ (800114c <MX_I2C2_Init+0x58>)
 8001102:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_I2C2_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_I2C2_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_I2C2_Init+0x50>)
 8001112:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001116:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001118:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <MX_I2C2_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_I2C2_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <MX_I2C2_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_I2C2_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	@ (8001144 <MX_I2C2_Init+0x50>)
 8001132:	f003 fc71 	bl	8004a18 <HAL_I2C_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800113c:	f002 fa7a 	bl	8003634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000021c 	.word	0x2000021c
 8001148:	40005800 	.word	0x40005800
 800114c:	000186a0 	.word	0x000186a0

08001150 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <MX_SPI1_Init+0x64>)
 8001156:	4a18      	ldr	r2, [pc, #96]	@ (80011b8 <MX_SPI1_Init+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800115a:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <MX_SPI1_Init+0x64>)
 800115c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001160:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_SPI1_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_SPI1_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_SPI1_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_SPI1_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_SPI1_Init+0x64>)
 800117c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001180:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_SPI1_Init+0x64>)
 8001184:	2230      	movs	r2, #48	@ 0x30
 8001186:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <MX_SPI1_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_SPI1_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <MX_SPI1_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_SPI1_Init+0x64>)
 800119c:	220a      	movs	r2, #10
 800119e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	@ (80011b4 <MX_SPI1_Init+0x64>)
 80011a2:	f006 f8e1 	bl	8007368 <HAL_SPI_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011ac:	f002 fa42 	bl	8003634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000270 	.word	0x20000270
 80011b8:	40013000 	.word	0x40013000

080011bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011e2:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80011e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011f0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80011f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f6:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <MX_TIM2_Init+0x98>)
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001202:	4814      	ldr	r0, [pc, #80]	@ (8001254 <MX_TIM2_Init+0x98>)
 8001204:	f006 fb7c 	bl	8007900 <HAL_TIM_Base_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800120e:	f002 fa11 	bl	8003634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001212:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001216:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4619      	mov	r1, r3
 800121e:	480d      	ldr	r0, [pc, #52]	@ (8001254 <MX_TIM2_Init+0x98>)
 8001220:	f006 fd18 	bl	8007c54 <HAL_TIM_ConfigClockSource>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800122a:	f002 fa03 	bl	8003634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	@ (8001254 <MX_TIM2_Init+0x98>)
 800123c:	f006 feea 	bl	8008014 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001246:	f002 f9f5 	bl	8003634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200002c8 	.word	0x200002c8

08001258 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_USART1_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <MX_USART1_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <MX_USART1_UART_Init+0x4c>)
 8001264:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001268:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_USART1_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_USART1_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <MX_USART1_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_USART1_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <MX_USART1_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_USART1_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_USART1_UART_Init+0x4c>)
 8001290:	f006 ff30 	bl	80080f4 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f002 f9cb 	bl	8003634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000310 	.word	0x20000310
 80012a8:	40013800 	.word	0x40013800

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	4b4c      	ldr	r3, [pc, #304]	@ (80013f4 <MX_GPIO_Init+0x148>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a4b      	ldr	r2, [pc, #300]	@ (80013f4 <MX_GPIO_Init+0x148>)
 80012c6:	f043 0310 	orr.w	r3, r3, #16
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b49      	ldr	r3, [pc, #292]	@ (80013f4 <MX_GPIO_Init+0x148>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	4b46      	ldr	r3, [pc, #280]	@ (80013f4 <MX_GPIO_Init+0x148>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a45      	ldr	r2, [pc, #276]	@ (80013f4 <MX_GPIO_Init+0x148>)
 80012de:	f043 0320 	orr.w	r3, r3, #32
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b43      	ldr	r3, [pc, #268]	@ (80013f4 <MX_GPIO_Init+0x148>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0320 	and.w	r3, r3, #32
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b40      	ldr	r3, [pc, #256]	@ (80013f4 <MX_GPIO_Init+0x148>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a3f      	ldr	r2, [pc, #252]	@ (80013f4 <MX_GPIO_Init+0x148>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b3d      	ldr	r3, [pc, #244]	@ (80013f4 <MX_GPIO_Init+0x148>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	4b3a      	ldr	r3, [pc, #232]	@ (80013f4 <MX_GPIO_Init+0x148>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a39      	ldr	r2, [pc, #228]	@ (80013f4 <MX_GPIO_Init+0x148>)
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b37      	ldr	r3, [pc, #220]	@ (80013f4 <MX_GPIO_Init+0x148>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|buzzer_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001326:	4834      	ldr	r0, [pc, #208]	@ (80013f8 <MX_GPIO_Init+0x14c>)
 8001328:	f003 fb3b 	bl	80049a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 800132c:	2200      	movs	r2, #0
 800132e:	f24f 0108 	movw	r1, #61448	@ 0xf008
 8001332:	4832      	ldr	r0, [pc, #200]	@ (80013fc <MX_GPIO_Init+0x150>)
 8001334:	f003 fb35 	bl	80049a2 <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8001338:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800133c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	482c      	ldr	r0, [pc, #176]	@ (8001400 <MX_GPIO_Init+0x154>)
 800134e:	f003 f98d 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8001352:	2303      	movs	r3, #3
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	4619      	mov	r1, r3
 8001364:	4824      	ldr	r0, [pc, #144]	@ (80013f8 <MX_GPIO_Init+0x14c>)
 8001366:	f003 f981 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = CS_Pin|buzzer_Pin;
 800136a:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	481d      	ldr	r0, [pc, #116]	@ (80013f8 <MX_GPIO_Init+0x14c>)
 8001384:	f003 f972 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8001388:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800138c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	4816      	ldr	r0, [pc, #88]	@ (80013fc <MX_GPIO_Init+0x150>)
 80013a2:	f003 f963 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 80013a6:	2308      	movs	r3, #8
 80013a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	480f      	ldr	r0, [pc, #60]	@ (80013fc <MX_GPIO_Init+0x150>)
 80013be:	f003 f955 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_GPIO_Init+0x158>)
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4619      	mov	r1, r3
 80013d6:	4809      	ldr	r0, [pc, #36]	@ (80013fc <MX_GPIO_Init+0x150>)
 80013d8:	f003 f948 	bl	800466c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	2017      	movs	r0, #23
 80013e2:	f002 ff0c 	bl	80041fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013e6:	2017      	movs	r0, #23
 80013e8:	f002 ff25 	bl	8004236 <HAL_NVIC_EnableIRQ>

}
 80013ec:	bf00      	nop
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010800 	.word	0x40010800
 80013fc:	40010c00 	.word	0x40010c00
 8001400:	40011000 	.word	0x40011000
 8001404:	10110000 	.word	0x10110000

08001408 <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
	exitmenu = 15;
 800140e:	4ba3      	ldr	r3, [pc, #652]	@ (800169c <RFID+0x294>)
 8001410:	220f      	movs	r2, #15
 8001412:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8001414:	23ff      	movs	r3, #255	@ 0xff
 8001416:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press DOWN");
 8001418:	4aa1      	ldr	r2, [pc, #644]	@ (80016a0 <RFID+0x298>)
 800141a:	49a2      	ldr	r1, [pc, #648]	@ (80016a4 <RFID+0x29c>)
 800141c:	48a2      	ldr	r0, [pc, #648]	@ (80016a8 <RFID+0x2a0>)
 800141e:	f7fe ffed 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8001422:	f000 beaa 	b.w	800217a <RFID+0xd72>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001426:	200a      	movs	r0, #10
 8001428:	f7ff f942 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800142c:	4603      	mov	r3, r0
 800142e:	717b      	strb	r3, [r7, #5]
		if (key_pressed =='*')
 8001430:	797b      	ldrb	r3, [r7, #5]
 8001432:	2b2a      	cmp	r3, #42	@ 0x2a
 8001434:	d12e      	bne.n	8001494 <RFID+0x8c>
		{
			exitmenu = 15;
 8001436:	4b99      	ldr	r3, [pc, #612]	@ (800169c <RFID+0x294>)
 8001438:	220f      	movs	r2, #15
 800143a:	701a      	strb	r2, [r3, #0]
			status++;
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	3301      	adds	r3, #1
 8001440:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d801      	bhi.n	800144c <RFID+0x44>
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	e000      	b.n	800144e <RFID+0x46>
 800144c:	2300      	movs	r3, #0
 800144e:	75fb      	strb	r3, [r7, #23]
			switch (status)
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d012      	beq.n	800147c <RFID+0x74>
 8001456:	2b02      	cmp	r3, #2
 8001458:	dc16      	bgt.n	8001488 <RFID+0x80>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <RFID+0x5c>
 800145e:	2b01      	cmp	r3, #1
 8001460:	d006      	beq.n	8001470 <RFID+0x68>
 8001462:	e011      	b.n	8001488 <RFID+0x80>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 8001464:	4a91      	ldr	r2, [pc, #580]	@ (80016ac <RFID+0x2a4>)
 8001466:	498f      	ldr	r1, [pc, #572]	@ (80016a4 <RFID+0x29c>)
 8001468:	488f      	ldr	r0, [pc, #572]	@ (80016a8 <RFID+0x2a0>)
 800146a:	f7fe ffc7 	bl	80003fc <CLCD_I2C_Display>
				break;
 800146e:	e011      	b.n	8001494 <RFID+0x8c>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8001470:	4a8f      	ldr	r2, [pc, #572]	@ (80016b0 <RFID+0x2a8>)
 8001472:	498c      	ldr	r1, [pc, #560]	@ (80016a4 <RFID+0x29c>)
 8001474:	488c      	ldr	r0, [pc, #560]	@ (80016a8 <RFID+0x2a0>)
 8001476:	f7fe ffc1 	bl	80003fc <CLCD_I2C_Display>
				break;
 800147a:	e00b      	b.n	8001494 <RFID+0x8c>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 800147c:	4a8d      	ldr	r2, [pc, #564]	@ (80016b4 <RFID+0x2ac>)
 800147e:	4989      	ldr	r1, [pc, #548]	@ (80016a4 <RFID+0x29c>)
 8001480:	4889      	ldr	r0, [pc, #548]	@ (80016a8 <RFID+0x2a0>)
 8001482:	f7fe ffbb 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001486:	e005      	b.n	8001494 <RFID+0x8c>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 8001488:	4a8b      	ldr	r2, [pc, #556]	@ (80016b8 <RFID+0x2b0>)
 800148a:	4986      	ldr	r1, [pc, #536]	@ (80016a4 <RFID+0x29c>)
 800148c:	4886      	ldr	r0, [pc, #536]	@ (80016a8 <RFID+0x2a0>)
 800148e:	f7fe ffb5 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001492:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 8001494:	797b      	ldrb	r3, [r7, #5]
 8001496:	2b23      	cmp	r3, #35	@ 0x23
 8001498:	f040 866f 	bne.w	800217a <RFID+0xd72>
		{
			exitmenu = 15;
 800149c:	4b7f      	ldr	r3, [pc, #508]	@ (800169c <RFID+0x294>)
 800149e:	220f      	movs	r2, #15
 80014a0:	701a      	strb	r2, [r3, #0]
			switch (status)
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	f000 865c 	beq.w	8002162 <RFID+0xd5a>
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	f300 8661 	bgt.w	8002172 <RFID+0xd6a>
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <RFID+0xb6>
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	f000 8231 	beq.w	800191c <RFID+0x514>
 80014ba:	f000 be5a 	b.w	8002172 <RFID+0xd6a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80014be:	4a7f      	ldr	r2, [pc, #508]	@ (80016bc <RFID+0x2b4>)
 80014c0:	497f      	ldr	r1, [pc, #508]	@ (80016c0 <RFID+0x2b8>)
 80014c2:	4879      	ldr	r0, [pc, #484]	@ (80016a8 <RFID+0x2a0>)
 80014c4:	f7fe ff9a 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 80014d0:	e219      	b.n	8001906 <RFID+0x4fe>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80014d2:	200a      	movs	r0, #10
 80014d4:	f7ff f8ec 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80014d8:	4603      	mov	r3, r0
 80014da:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 80014dc:	4b6f      	ldr	r3, [pc, #444]	@ (800169c <RFID+0x294>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d108      	bne.n	80014f6 <RFID+0xee>
					{
						CLCD_I2C_Clear(&LCD1);
 80014e4:	4870      	ldr	r0, [pc, #448]	@ (80016a8 <RFID+0x2a0>)
 80014e6:	f7fe ff79 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80014ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ee:	f002 fd8b 	bl	8004008 <HAL_Delay>
						return;
 80014f2:	f000 be4a 	b.w	800218a <RFID+0xd82>
					}
					if (key_pressed =='*')
 80014f6:	797b      	ldrb	r3, [r7, #5]
 80014f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80014fa:	d124      	bne.n	8001546 <RFID+0x13e>
					{
						exitmenu = 15;
 80014fc:	4b67      	ldr	r3, [pc, #412]	@ (800169c <RFID+0x294>)
 80014fe:	220f      	movs	r2, #15
 8001500:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8001502:	7dbb      	ldrb	r3, [r7, #22]
 8001504:	3301      	adds	r3, #1
 8001506:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8001508:	7dbb      	ldrb	r3, [r7, #22]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d801      	bhi.n	8001512 <RFID+0x10a>
 800150e:	7dbb      	ldrb	r3, [r7, #22]
 8001510:	e000      	b.n	8001514 <RFID+0x10c>
 8001512:	2300      	movs	r3, #0
 8001514:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8001516:	7dbb      	ldrb	r3, [r7, #22]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d002      	beq.n	8001522 <RFID+0x11a>
 800151c:	2b02      	cmp	r3, #2
 800151e:	d006      	beq.n	800152e <RFID+0x126>
 8001520:	e00b      	b.n	800153a <RFID+0x132>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 8001522:	4a68      	ldr	r2, [pc, #416]	@ (80016c4 <RFID+0x2bc>)
 8001524:	4968      	ldr	r1, [pc, #416]	@ (80016c8 <RFID+0x2c0>)
 8001526:	4860      	ldr	r0, [pc, #384]	@ (80016a8 <RFID+0x2a0>)
 8001528:	f7fe ff68 	bl	80003fc <CLCD_I2C_Display>
							break;
 800152c:	e00b      	b.n	8001546 <RFID+0x13e>
						case 2:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 800152e:	4a67      	ldr	r2, [pc, #412]	@ (80016cc <RFID+0x2c4>)
 8001530:	4965      	ldr	r1, [pc, #404]	@ (80016c8 <RFID+0x2c0>)
 8001532:	485d      	ldr	r0, [pc, #372]	@ (80016a8 <RFID+0x2a0>)
 8001534:	f7fe ff62 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001538:	e005      	b.n	8001546 <RFID+0x13e>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 800153a:	4a5f      	ldr	r2, [pc, #380]	@ (80016b8 <RFID+0x2b0>)
 800153c:	4962      	ldr	r1, [pc, #392]	@ (80016c8 <RFID+0x2c0>)
 800153e:	485a      	ldr	r0, [pc, #360]	@ (80016a8 <RFID+0x2a0>)
 8001540:	f7fe ff5c 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001544:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001546:	797b      	ldrb	r3, [r7, #5]
 8001548:	2b23      	cmp	r3, #35	@ 0x23
 800154a:	f040 81dc 	bne.w	8001906 <RFID+0x4fe>
					{
						exitmenu = 15;
 800154e:	4b53      	ldr	r3, [pc, #332]	@ (800169c <RFID+0x294>)
 8001550:	220f      	movs	r2, #15
 8001552:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 8001554:	7dbb      	ldrb	r3, [r7, #22]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d003      	beq.n	8001562 <RFID+0x15a>
 800155a:	2b02      	cmp	r3, #2
 800155c:	f000 80ff 	beq.w	800175e <RFID+0x356>
 8001560:	e1ce      	b.n	8001900 <RFID+0x4f8>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001562:	4a56      	ldr	r2, [pc, #344]	@ (80016bc <RFID+0x2b4>)
 8001564:	4956      	ldr	r1, [pc, #344]	@ (80016c0 <RFID+0x2b8>)
 8001566:	4850      	ldr	r0, [pc, #320]	@ (80016a8 <RFID+0x2a0>)
 8001568:	f7fe ff48 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusadd1 = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 8001570:	2301      	movs	r3, #1
 8001572:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 8001574:	e0e9      	b.n	800174a <RFID+0x342>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001576:	200a      	movs	r0, #10
 8001578:	f7ff f89a 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800157c:	4603      	mov	r3, r0
 800157e:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001580:	4b46      	ldr	r3, [pc, #280]	@ (800169c <RFID+0x294>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d108      	bne.n	800159a <RFID+0x192>
								{
									CLCD_I2C_Clear(&LCD1);
 8001588:	4847      	ldr	r0, [pc, #284]	@ (80016a8 <RFID+0x2a0>)
 800158a:	f7fe ff27 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800158e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001592:	f002 fd39 	bl	8004008 <HAL_Delay>
									return;
 8001596:	f000 bdf8 	b.w	800218a <RFID+0xd82>
								}
								if (key_pressed =='*')
 800159a:	797b      	ldrb	r3, [r7, #5]
 800159c:	2b2a      	cmp	r3, #42	@ 0x2a
 800159e:	d12e      	bne.n	80015fe <RFID+0x1f6>
								{
									exitmenu = 15;
 80015a0:	4b3e      	ldr	r3, [pc, #248]	@ (800169c <RFID+0x294>)
 80015a2:	220f      	movs	r2, #15
 80015a4:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 80015a6:	7d3b      	ldrb	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 80015ac:	7d3b      	ldrb	r3, [r7, #20]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d801      	bhi.n	80015b6 <RFID+0x1ae>
 80015b2:	7d3b      	ldrb	r3, [r7, #20]
 80015b4:	e000      	b.n	80015b8 <RFID+0x1b0>
 80015b6:	2300      	movs	r3, #0
 80015b8:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 80015ba:	7d3b      	ldrb	r3, [r7, #20]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d012      	beq.n	80015e6 <RFID+0x1de>
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	dc16      	bgt.n	80015f2 <RFID+0x1ea>
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d002      	beq.n	80015ce <RFID+0x1c6>
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d006      	beq.n	80015da <RFID+0x1d2>
 80015cc:	e011      	b.n	80015f2 <RFID+0x1ea>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80015ce:	4a40      	ldr	r2, [pc, #256]	@ (80016d0 <RFID+0x2c8>)
 80015d0:	4940      	ldr	r1, [pc, #256]	@ (80016d4 <RFID+0x2cc>)
 80015d2:	4835      	ldr	r0, [pc, #212]	@ (80016a8 <RFID+0x2a0>)
 80015d4:	f7fe ff12 	bl	80003fc <CLCD_I2C_Display>
										break;
 80015d8:	e011      	b.n	80015fe <RFID+0x1f6>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 80015da:	4a3f      	ldr	r2, [pc, #252]	@ (80016d8 <RFID+0x2d0>)
 80015dc:	493d      	ldr	r1, [pc, #244]	@ (80016d4 <RFID+0x2cc>)
 80015de:	4832      	ldr	r0, [pc, #200]	@ (80016a8 <RFID+0x2a0>)
 80015e0:	f7fe ff0c 	bl	80003fc <CLCD_I2C_Display>
										break;
 80015e4:	e00b      	b.n	80015fe <RFID+0x1f6>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80015e6:	4a3d      	ldr	r2, [pc, #244]	@ (80016dc <RFID+0x2d4>)
 80015e8:	493a      	ldr	r1, [pc, #232]	@ (80016d4 <RFID+0x2cc>)
 80015ea:	482f      	ldr	r0, [pc, #188]	@ (80016a8 <RFID+0x2a0>)
 80015ec:	f7fe ff06 	bl	80003fc <CLCD_I2C_Display>
										break;
 80015f0:	e005      	b.n	80015fe <RFID+0x1f6>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Back");
 80015f2:	4a31      	ldr	r2, [pc, #196]	@ (80016b8 <RFID+0x2b0>)
 80015f4:	4937      	ldr	r1, [pc, #220]	@ (80016d4 <RFID+0x2cc>)
 80015f6:	482c      	ldr	r0, [pc, #176]	@ (80016a8 <RFID+0x2a0>)
 80015f8:	f7fe ff00 	bl	80003fc <CLCD_I2C_Display>
										break;
 80015fc:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 80015fe:	797b      	ldrb	r3, [r7, #5]
 8001600:	2b23      	cmp	r3, #35	@ 0x23
 8001602:	f040 80a2 	bne.w	800174a <RFID+0x342>
								{
									exitmenu = 15;
 8001606:	4b25      	ldr	r3, [pc, #148]	@ (800169c <RFID+0x294>)
 8001608:	220f      	movs	r2, #15
 800160a:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 800160c:	7dbb      	ldrb	r3, [r7, #22]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	b2da      	uxtb	r2, r3
 8001612:	7d3b      	ldrb	r3, [r7, #20]
 8001614:	4413      	add	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
									switch (statusadd1)
 8001618:	7d3b      	ldrb	r3, [r7, #20]
 800161a:	2b03      	cmp	r3, #3
 800161c:	d072      	beq.n	8001704 <RFID+0x2fc>
 800161e:	2b03      	cmp	r3, #3
 8001620:	f300 8090 	bgt.w	8001744 <RFID+0x33c>
 8001624:	2b01      	cmp	r3, #1
 8001626:	d002      	beq.n	800162e <RFID+0x226>
 8001628:	2b02      	cmp	r3, #2
 800162a:	d020      	beq.n	800166e <RFID+0x266>
 800162c:	e08a      	b.n	8001744 <RFID+0x33c>
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 800162e:	787b      	ldrb	r3, [r7, #1]
 8001630:	4618      	mov	r0, r3
 8001632:	f001 fb7f 	bl	8002d34 <CheckKey>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00e      	beq.n	800165a <RFID+0x252>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 1"," Card 1 Existed ");
 800163c:	4a28      	ldr	r2, [pc, #160]	@ (80016e0 <RFID+0x2d8>)
 800163e:	4929      	ldr	r1, [pc, #164]	@ (80016e4 <RFID+0x2dc>)
 8001640:	4819      	ldr	r0, [pc, #100]	@ (80016a8 <RFID+0x2a0>)
 8001642:	f7fe fedb 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8001646:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800164a:	f002 fcdd 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 800164e:	4a20      	ldr	r2, [pc, #128]	@ (80016d0 <RFID+0x2c8>)
 8001650:	4920      	ldr	r1, [pc, #128]	@ (80016d4 <RFID+0x2cc>)
 8001652:	4815      	ldr	r0, [pc, #84]	@ (80016a8 <RFID+0x2a0>)
 8001654:	f7fe fed2 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
										}
										break;
 8001658:	e077      	b.n	800174a <RFID+0x342>
											adduid(keyadd1);
 800165a:	787b      	ldrb	r3, [r7, #1]
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fa4b 	bl	8002af8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 8001662:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <RFID+0x2c8>)
 8001664:	491b      	ldr	r1, [pc, #108]	@ (80016d4 <RFID+0x2cc>)
 8001666:	4810      	ldr	r0, [pc, #64]	@ (80016a8 <RFID+0x2a0>)
 8001668:	f7fe fec8 	bl	80003fc <CLCD_I2C_Display>
										break;
 800166c:	e06d      	b.n	800174a <RFID+0x342>
									case 2:
										if (CheckKey(keyadd1) != 0)
 800166e:	787b      	ldrb	r3, [r7, #1]
 8001670:	4618      	mov	r0, r3
 8001672:	f001 fb5f 	bl	8002d34 <CheckKey>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d039      	beq.n	80016f0 <RFID+0x2e8>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 2"," Card 2 Existed ");
 800167c:	4a1a      	ldr	r2, [pc, #104]	@ (80016e8 <RFID+0x2e0>)
 800167e:	491b      	ldr	r1, [pc, #108]	@ (80016ec <RFID+0x2e4>)
 8001680:	4809      	ldr	r0, [pc, #36]	@ (80016a8 <RFID+0x2a0>)
 8001682:	f7fe febb 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8001686:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800168a:	f002 fcbd 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <RFID+0x2d0>)
 8001690:	4910      	ldr	r1, [pc, #64]	@ (80016d4 <RFID+0x2cc>)
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <RFID+0x2a0>)
 8001694:	f7fe feb2 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
										}
										break;
 8001698:	e057      	b.n	800174a <RFID+0x342>
 800169a:	bf00      	nop
 800169c:	20000020 	.word	0x20000020
 80016a0:	0800d6b0 	.word	0x0800d6b0
 80016a4:	0800d6c0 	.word	0x0800d6c0
 80016a8:	200003d8 	.word	0x200003d8
 80016ac:	0800d6d0 	.word	0x0800d6d0
 80016b0:	0800d6dc 	.word	0x0800d6dc
 80016b4:	0800d6ec 	.word	0x0800d6ec
 80016b8:	0800d6fc 	.word	0x0800d6fc
 80016bc:	0800d704 	.word	0x0800d704
 80016c0:	0800d710 	.word	0x0800d710
 80016c4:	0800d720 	.word	0x0800d720
 80016c8:	0800d730 	.word	0x0800d730
 80016cc:	0800d73c 	.word	0x0800d73c
 80016d0:	0800d74c 	.word	0x0800d74c
 80016d4:	0800d760 	.word	0x0800d760
 80016d8:	0800d770 	.word	0x0800d770
 80016dc:	0800d784 	.word	0x0800d784
 80016e0:	0800d798 	.word	0x0800d798
 80016e4:	0800d7ac 	.word	0x0800d7ac
 80016e8:	0800d7b8 	.word	0x0800d7b8
 80016ec:	0800d7cc 	.word	0x0800d7cc
											adduid(keyadd1);
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 fa00 	bl	8002af8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 80016f8:	4aa5      	ldr	r2, [pc, #660]	@ (8001990 <RFID+0x588>)
 80016fa:	49a6      	ldr	r1, [pc, #664]	@ (8001994 <RFID+0x58c>)
 80016fc:	48a6      	ldr	r0, [pc, #664]	@ (8001998 <RFID+0x590>)
 80016fe:	f7fe fe7d 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001702:	e022      	b.n	800174a <RFID+0x342>
									case 3:
										if (CheckKey(keyadd1) != 0)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	4618      	mov	r0, r3
 8001708:	f001 fb14 	bl	8002d34 <CheckKey>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00e      	beq.n	8001730 <RFID+0x328>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 3"," Card 3 Existed ");
 8001712:	4aa2      	ldr	r2, [pc, #648]	@ (800199c <RFID+0x594>)
 8001714:	49a2      	ldr	r1, [pc, #648]	@ (80019a0 <RFID+0x598>)
 8001716:	48a0      	ldr	r0, [pc, #640]	@ (8001998 <RFID+0x590>)
 8001718:	f7fe fe70 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800171c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001720:	f002 fc72 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 8001724:	4a9f      	ldr	r2, [pc, #636]	@ (80019a4 <RFID+0x59c>)
 8001726:	499b      	ldr	r1, [pc, #620]	@ (8001994 <RFID+0x58c>)
 8001728:	489b      	ldr	r0, [pc, #620]	@ (8001998 <RFID+0x590>)
 800172a:	f7fe fe67 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
										}
										break;
 800172e:	e00c      	b.n	800174a <RFID+0x342>
											adduid(keyadd1);
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	4618      	mov	r0, r3
 8001734:	f001 f9e0 	bl	8002af8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 8001738:	4a9a      	ldr	r2, [pc, #616]	@ (80019a4 <RFID+0x59c>)
 800173a:	4996      	ldr	r1, [pc, #600]	@ (8001994 <RFID+0x58c>)
 800173c:	4896      	ldr	r0, [pc, #600]	@ (8001998 <RFID+0x590>)
 800173e:	f7fe fe5d 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001742:	e002      	b.n	800174a <RFID+0x342>
									default:
										back11 = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	74fb      	strb	r3, [r7, #19]
										break;
 8001748:	bf00      	nop
							while (back11 == 1)
 800174a:	7cfb      	ldrb	r3, [r7, #19]
 800174c:	2b01      	cmp	r3, #1
 800174e:	f43f af12 	beq.w	8001576 <RFID+0x16e>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 8001752:	4a95      	ldr	r2, [pc, #596]	@ (80019a8 <RFID+0x5a0>)
 8001754:	4995      	ldr	r1, [pc, #596]	@ (80019ac <RFID+0x5a4>)
 8001756:	4890      	ldr	r0, [pc, #576]	@ (8001998 <RFID+0x590>)
 8001758:	f7fe fe50 	bl	80003fc <CLCD_I2C_Display>
							break;
 800175c:	e0d3      	b.n	8001906 <RFID+0x4fe>
						case 2:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800175e:	4a94      	ldr	r2, [pc, #592]	@ (80019b0 <RFID+0x5a8>)
 8001760:	4994      	ldr	r1, [pc, #592]	@ (80019b4 <RFID+0x5ac>)
 8001762:	488d      	ldr	r0, [pc, #564]	@ (8001998 <RFID+0x590>)
 8001764:	f7fe fe4a 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusadd2 = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 800176c:	2301      	movs	r3, #1
 800176e:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 8001770:	e0bc      	b.n	80018ec <RFID+0x4e4>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001772:	200a      	movs	r0, #10
 8001774:	f7fe ff9c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001778:	4603      	mov	r3, r0
 800177a:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 800177c:	4b8e      	ldr	r3, [pc, #568]	@ (80019b8 <RFID+0x5b0>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d108      	bne.n	8001796 <RFID+0x38e>
								{
									CLCD_I2C_Clear(&LCD1);
 8001784:	4884      	ldr	r0, [pc, #528]	@ (8001998 <RFID+0x590>)
 8001786:	f7fe fe29 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800178a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800178e:	f002 fc3b 	bl	8004008 <HAL_Delay>
									return;
 8001792:	f000 bcfa 	b.w	800218a <RFID+0xd82>
								}
								if (key_pressed =='*')
 8001796:	797b      	ldrb	r3, [r7, #5]
 8001798:	2b2a      	cmp	r3, #42	@ 0x2a
 800179a:	d12e      	bne.n	80017fa <RFID+0x3f2>
								{
									exitmenu = 15;
 800179c:	4b86      	ldr	r3, [pc, #536]	@ (80019b8 <RFID+0x5b0>)
 800179e:	220f      	movs	r2, #15
 80017a0:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 80017a2:	7cbb      	ldrb	r3, [r7, #18]
 80017a4:	3301      	adds	r3, #1
 80017a6:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 80017a8:	7cbb      	ldrb	r3, [r7, #18]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d801      	bhi.n	80017b2 <RFID+0x3aa>
 80017ae:	7cbb      	ldrb	r3, [r7, #18]
 80017b0:	e000      	b.n	80017b4 <RFID+0x3ac>
 80017b2:	2300      	movs	r3, #0
 80017b4:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 80017b6:	7cbb      	ldrb	r3, [r7, #18]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d012      	beq.n	80017e2 <RFID+0x3da>
 80017bc:	2b03      	cmp	r3, #3
 80017be:	dc16      	bgt.n	80017ee <RFID+0x3e6>
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d002      	beq.n	80017ca <RFID+0x3c2>
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d006      	beq.n	80017d6 <RFID+0x3ce>
 80017c8:	e011      	b.n	80017ee <RFID+0x3e6>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80017ca:	4a7c      	ldr	r2, [pc, #496]	@ (80019bc <RFID+0x5b4>)
 80017cc:	497c      	ldr	r1, [pc, #496]	@ (80019c0 <RFID+0x5b8>)
 80017ce:	4872      	ldr	r0, [pc, #456]	@ (8001998 <RFID+0x590>)
 80017d0:	f7fe fe14 	bl	80003fc <CLCD_I2C_Display>
										break;
 80017d4:	e011      	b.n	80017fa <RFID+0x3f2>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 80017d6:	4a7b      	ldr	r2, [pc, #492]	@ (80019c4 <RFID+0x5bc>)
 80017d8:	4979      	ldr	r1, [pc, #484]	@ (80019c0 <RFID+0x5b8>)
 80017da:	486f      	ldr	r0, [pc, #444]	@ (8001998 <RFID+0x590>)
 80017dc:	f7fe fe0e 	bl	80003fc <CLCD_I2C_Display>
										break;
 80017e0:	e00b      	b.n	80017fa <RFID+0x3f2>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 80017e2:	4a79      	ldr	r2, [pc, #484]	@ (80019c8 <RFID+0x5c0>)
 80017e4:	4976      	ldr	r1, [pc, #472]	@ (80019c0 <RFID+0x5b8>)
 80017e6:	486c      	ldr	r0, [pc, #432]	@ (8001998 <RFID+0x590>)
 80017e8:	f7fe fe08 	bl	80003fc <CLCD_I2C_Display>
										break;
 80017ec:	e005      	b.n	80017fa <RFID+0x3f2>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> Back");
 80017ee:	4a77      	ldr	r2, [pc, #476]	@ (80019cc <RFID+0x5c4>)
 80017f0:	4973      	ldr	r1, [pc, #460]	@ (80019c0 <RFID+0x5b8>)
 80017f2:	4869      	ldr	r0, [pc, #420]	@ (8001998 <RFID+0x590>)
 80017f4:	f7fe fe02 	bl	80003fc <CLCD_I2C_Display>
										break;
 80017f8:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 80017fa:	797b      	ldrb	r3, [r7, #5]
 80017fc:	2b23      	cmp	r3, #35	@ 0x23
 80017fe:	d175      	bne.n	80018ec <RFID+0x4e4>
								{
									exitmenu = 15;
 8001800:	4b6d      	ldr	r3, [pc, #436]	@ (80019b8 <RFID+0x5b0>)
 8001802:	220f      	movs	r2, #15
 8001804:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8001806:	7dbb      	ldrb	r3, [r7, #22]
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	b2da      	uxtb	r2, r3
 800180c:	7cbb      	ldrb	r3, [r7, #18]
 800180e:	4413      	add	r3, r2
 8001810:	70bb      	strb	r3, [r7, #2]
									switch (statusadd2)
 8001812:	7cbb      	ldrb	r3, [r7, #18]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d046      	beq.n	80018a6 <RFID+0x49e>
 8001818:	2b03      	cmp	r3, #3
 800181a:	dc64      	bgt.n	80018e6 <RFID+0x4de>
 800181c:	2b01      	cmp	r3, #1
 800181e:	d002      	beq.n	8001826 <RFID+0x41e>
 8001820:	2b02      	cmp	r3, #2
 8001822:	d020      	beq.n	8001866 <RFID+0x45e>
 8001824:	e05f      	b.n	80018e6 <RFID+0x4de>
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 8001826:	78bb      	ldrb	r3, [r7, #2]
 8001828:	4618      	mov	r0, r3
 800182a:	f001 fa83 	bl	8002d34 <CheckKey>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00e      	beq.n	8001852 <RFID+0x44a>
										{
											CLCD_I2C_Display(&LCD1,"     USER 1"," Card 1 Existed ");
 8001834:	4a66      	ldr	r2, [pc, #408]	@ (80019d0 <RFID+0x5c8>)
 8001836:	4967      	ldr	r1, [pc, #412]	@ (80019d4 <RFID+0x5cc>)
 8001838:	4857      	ldr	r0, [pc, #348]	@ (8001998 <RFID+0x590>)
 800183a:	f7fe fddf 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800183e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001842:	f002 fbe1 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 8001846:	4a5d      	ldr	r2, [pc, #372]	@ (80019bc <RFID+0x5b4>)
 8001848:	495d      	ldr	r1, [pc, #372]	@ (80019c0 <RFID+0x5b8>)
 800184a:	4853      	ldr	r0, [pc, #332]	@ (8001998 <RFID+0x590>)
 800184c:	f7fe fdd6 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
										}
										break;
 8001850:	e04c      	b.n	80018ec <RFID+0x4e4>
											adduid(keyadd2);
 8001852:	78bb      	ldrb	r3, [r7, #2]
 8001854:	4618      	mov	r0, r3
 8001856:	f001 f94f 	bl	8002af8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 800185a:	4a58      	ldr	r2, [pc, #352]	@ (80019bc <RFID+0x5b4>)
 800185c:	4958      	ldr	r1, [pc, #352]	@ (80019c0 <RFID+0x5b8>)
 800185e:	484e      	ldr	r0, [pc, #312]	@ (8001998 <RFID+0x590>)
 8001860:	f7fe fdcc 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001864:	e042      	b.n	80018ec <RFID+0x4e4>
									case 2:
										if (CheckKey(keyadd2) != 0)
 8001866:	78bb      	ldrb	r3, [r7, #2]
 8001868:	4618      	mov	r0, r3
 800186a:	f001 fa63 	bl	8002d34 <CheckKey>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00e      	beq.n	8001892 <RFID+0x48a>
										{
											CLCD_I2C_Display(&LCD1,"     USER 2"," Card 2 Existed ");
 8001874:	4a58      	ldr	r2, [pc, #352]	@ (80019d8 <RFID+0x5d0>)
 8001876:	4959      	ldr	r1, [pc, #356]	@ (80019dc <RFID+0x5d4>)
 8001878:	4847      	ldr	r0, [pc, #284]	@ (8001998 <RFID+0x590>)
 800187a:	f7fe fdbf 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800187e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001882:	f002 fbc1 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001886:	4a4f      	ldr	r2, [pc, #316]	@ (80019c4 <RFID+0x5bc>)
 8001888:	494d      	ldr	r1, [pc, #308]	@ (80019c0 <RFID+0x5b8>)
 800188a:	4843      	ldr	r0, [pc, #268]	@ (8001998 <RFID+0x590>)
 800188c:	f7fe fdb6 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
										}
										break;
 8001890:	e02c      	b.n	80018ec <RFID+0x4e4>
											adduid(keyadd2);
 8001892:	78bb      	ldrb	r3, [r7, #2]
 8001894:	4618      	mov	r0, r3
 8001896:	f001 f92f 	bl	8002af8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 800189a:	4a4a      	ldr	r2, [pc, #296]	@ (80019c4 <RFID+0x5bc>)
 800189c:	4948      	ldr	r1, [pc, #288]	@ (80019c0 <RFID+0x5b8>)
 800189e:	483e      	ldr	r0, [pc, #248]	@ (8001998 <RFID+0x590>)
 80018a0:	f7fe fdac 	bl	80003fc <CLCD_I2C_Display>
										break;
 80018a4:	e022      	b.n	80018ec <RFID+0x4e4>
									case 3:
										if (CheckKey(keyadd2) != 0)
 80018a6:	78bb      	ldrb	r3, [r7, #2]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 fa43 	bl	8002d34 <CheckKey>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00e      	beq.n	80018d2 <RFID+0x4ca>
										{
											CLCD_I2C_Display(&LCD1,"     USER 3"," Card 3 Existed ");
 80018b4:	4a39      	ldr	r2, [pc, #228]	@ (800199c <RFID+0x594>)
 80018b6:	494a      	ldr	r1, [pc, #296]	@ (80019e0 <RFID+0x5d8>)
 80018b8:	4837      	ldr	r0, [pc, #220]	@ (8001998 <RFID+0x590>)
 80018ba:	f7fe fd9f 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80018be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018c2:	f002 fba1 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 80018c6:	4a40      	ldr	r2, [pc, #256]	@ (80019c8 <RFID+0x5c0>)
 80018c8:	493d      	ldr	r1, [pc, #244]	@ (80019c0 <RFID+0x5b8>)
 80018ca:	4833      	ldr	r0, [pc, #204]	@ (8001998 <RFID+0x590>)
 80018cc:	f7fe fd96 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
										}
										break;
 80018d0:	e00c      	b.n	80018ec <RFID+0x4e4>
											adduid(keyadd2);
 80018d2:	78bb      	ldrb	r3, [r7, #2]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 f90f 	bl	8002af8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 80018da:	4a3b      	ldr	r2, [pc, #236]	@ (80019c8 <RFID+0x5c0>)
 80018dc:	4938      	ldr	r1, [pc, #224]	@ (80019c0 <RFID+0x5b8>)
 80018de:	482e      	ldr	r0, [pc, #184]	@ (8001998 <RFID+0x590>)
 80018e0:	f7fe fd8c 	bl	80003fc <CLCD_I2C_Display>
										break;
 80018e4:	e002      	b.n	80018ec <RFID+0x4e4>
									default:
										back12 = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	747b      	strb	r3, [r7, #17]
										break;
 80018ea:	bf00      	nop
							while (back12 == 1)
 80018ec:	7c7b      	ldrb	r3, [r7, #17]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	f43f af3f 	beq.w	8001772 <RFID+0x36a>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 80018f4:	4a3b      	ldr	r2, [pc, #236]	@ (80019e4 <RFID+0x5dc>)
 80018f6:	492d      	ldr	r1, [pc, #180]	@ (80019ac <RFID+0x5a4>)
 80018f8:	4827      	ldr	r0, [pc, #156]	@ (8001998 <RFID+0x590>)
 80018fa:	f7fe fd7f 	bl	80003fc <CLCD_I2C_Display>
							break;
 80018fe:	e002      	b.n	8001906 <RFID+0x4fe>
						default:
							back = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	757b      	strb	r3, [r7, #21]
							break;
 8001904:	bf00      	nop
				while (back == 1)
 8001906:	7d7b      	ldrb	r3, [r7, #21]
 8001908:	2b01      	cmp	r3, #1
 800190a:	f43f ade2 	beq.w	80014d2 <RFID+0xca>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 800190e:	4a36      	ldr	r2, [pc, #216]	@ (80019e8 <RFID+0x5e0>)
 8001910:	4936      	ldr	r1, [pc, #216]	@ (80019ec <RFID+0x5e4>)
 8001912:	4821      	ldr	r0, [pc, #132]	@ (8001998 <RFID+0x590>)
 8001914:	f7fe fd72 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001918:	f000 bc2f 	b.w	800217a <RFID+0xd72>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800191c:	4a24      	ldr	r2, [pc, #144]	@ (80019b0 <RFID+0x5a8>)
 800191e:	4925      	ldr	r1, [pc, #148]	@ (80019b4 <RFID+0x5ac>)
 8001920:	481d      	ldr	r0, [pc, #116]	@ (8001998 <RFID+0x590>)
 8001922:	f7fe fd6b 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 8001926:	23ff      	movs	r3, #255	@ 0xff
 8001928:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 800192e:	f000 bc0e 	b.w	800214e <RFID+0xd46>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001932:	200a      	movs	r0, #10
 8001934:	f7fe febc 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001938:	4603      	mov	r3, r0
 800193a:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 800193c:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <RFID+0x5b0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d108      	bne.n	8001956 <RFID+0x54e>
					{
						CLCD_I2C_Clear(&LCD1);
 8001944:	4814      	ldr	r0, [pc, #80]	@ (8001998 <RFID+0x590>)
 8001946:	f7fe fd49 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800194a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800194e:	f002 fb5b 	bl	8004008 <HAL_Delay>
						return;
 8001952:	f000 bc1a 	b.w	800218a <RFID+0xd82>
					}
					if (key_pressed =='*')
 8001956:	797b      	ldrb	r3, [r7, #5]
 8001958:	2b2a      	cmp	r3, #42	@ 0x2a
 800195a:	d159      	bne.n	8001a10 <RFID+0x608>
					{
						exitmenu = 15;
 800195c:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <RFID+0x5b0>)
 800195e:	220f      	movs	r2, #15
 8001960:	701a      	strb	r2, [r3, #0]
						statusremove++;
 8001962:	7c3b      	ldrb	r3, [r7, #16]
 8001964:	3301      	adds	r3, #1
 8001966:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 8001968:	7c3b      	ldrb	r3, [r7, #16]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d801      	bhi.n	8001972 <RFID+0x56a>
 800196e:	7c3b      	ldrb	r3, [r7, #16]
 8001970:	e000      	b.n	8001974 <RFID+0x56c>
 8001972:	2300      	movs	r3, #0
 8001974:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 8001976:	7c3b      	ldrb	r3, [r7, #16]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <RFID+0x57a>
 800197c:	2b01      	cmp	r3, #1
 800197e:	d03b      	beq.n	80019f8 <RFID+0x5f0>
 8001980:	e040      	b.n	8001a04 <RFID+0x5fc>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001982:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <RFID+0x5e8>)
 8001984:	491b      	ldr	r1, [pc, #108]	@ (80019f4 <RFID+0x5ec>)
 8001986:	4804      	ldr	r0, [pc, #16]	@ (8001998 <RFID+0x590>)
 8001988:	f7fe fd38 	bl	80003fc <CLCD_I2C_Display>
							break;
 800198c:	e040      	b.n	8001a10 <RFID+0x608>
 800198e:	bf00      	nop
 8001990:	0800d770 	.word	0x0800d770
 8001994:	0800d760 	.word	0x0800d760
 8001998:	200003d8 	.word	0x200003d8
 800199c:	0800d7d8 	.word	0x0800d7d8
 80019a0:	0800d7ec 	.word	0x0800d7ec
 80019a4:	0800d784 	.word	0x0800d784
 80019a8:	0800d720 	.word	0x0800d720
 80019ac:	0800d730 	.word	0x0800d730
 80019b0:	0800d704 	.word	0x0800d704
 80019b4:	0800d710 	.word	0x0800d710
 80019b8:	20000020 	.word	0x20000020
 80019bc:	0800d7f8 	.word	0x0800d7f8
 80019c0:	0800d808 	.word	0x0800d808
 80019c4:	0800d818 	.word	0x0800d818
 80019c8:	0800d828 	.word	0x0800d828
 80019cc:	0800d6fc 	.word	0x0800d6fc
 80019d0:	0800d798 	.word	0x0800d798
 80019d4:	0800d838 	.word	0x0800d838
 80019d8:	0800d7b8 	.word	0x0800d7b8
 80019dc:	0800d844 	.word	0x0800d844
 80019e0:	0800d850 	.word	0x0800d850
 80019e4:	0800d73c 	.word	0x0800d73c
 80019e8:	0800d6d0 	.word	0x0800d6d0
 80019ec:	0800d6c0 	.word	0x0800d6c0
 80019f0:	0800d85c 	.word	0x0800d85c
 80019f4:	0800d870 	.word	0x0800d870
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 80019f8:	4a9a      	ldr	r2, [pc, #616]	@ (8001c64 <RFID+0x85c>)
 80019fa:	499b      	ldr	r1, [pc, #620]	@ (8001c68 <RFID+0x860>)
 80019fc:	489b      	ldr	r0, [pc, #620]	@ (8001c6c <RFID+0x864>)
 80019fe:	f7fe fcfd 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001a02:	e005      	b.n	8001a10 <RFID+0x608>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 8001a04:	4a9a      	ldr	r2, [pc, #616]	@ (8001c70 <RFID+0x868>)
 8001a06:	4998      	ldr	r1, [pc, #608]	@ (8001c68 <RFID+0x860>)
 8001a08:	4898      	ldr	r0, [pc, #608]	@ (8001c6c <RFID+0x864>)
 8001a0a:	f7fe fcf7 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001a0e:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001a10:	797b      	ldrb	r3, [r7, #5]
 8001a12:	2b23      	cmp	r3, #35	@ 0x23
 8001a14:	f040 839b 	bne.w	800214e <RFID+0xd46>
					{
						CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001a18:	4a96      	ldr	r2, [pc, #600]	@ (8001c74 <RFID+0x86c>)
 8001a1a:	4997      	ldr	r1, [pc, #604]	@ (8001c78 <RFID+0x870>)
 8001a1c:	4893      	ldr	r0, [pc, #588]	@ (8001c6c <RFID+0x864>)
 8001a1e:	f7fe fced 	bl	80003fc <CLCD_I2C_Display>
						exitmenu = 15;
 8001a22:	4b96      	ldr	r3, [pc, #600]	@ (8001c7c <RFID+0x874>)
 8001a24:	220f      	movs	r2, #15
 8001a26:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001a28:	7c3b      	ldrb	r3, [r7, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <RFID+0x62e>
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	f000 8382 	beq.w	8002138 <RFID+0xd30>
 8001a34:	e388      	b.n	8002148 <RFID+0xd40>
						{
						case 0:
							uint8_t statusrm1 = -1;
 8001a36:	23ff      	movs	r3, #255	@ 0xff
 8001a38:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8001a3e:	e371      	b.n	8002124 <RFID+0xd1c>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001a40:	200a      	movs	r0, #10
 8001a42:	f7fe fe35 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001a46:	4603      	mov	r3, r0
 8001a48:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001a4a:	4b8c      	ldr	r3, [pc, #560]	@ (8001c7c <RFID+0x874>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d107      	bne.n	8001a62 <RFID+0x65a>
								{
									CLCD_I2C_Clear(&LCD1);
 8001a52:	4886      	ldr	r0, [pc, #536]	@ (8001c6c <RFID+0x864>)
 8001a54:	f7fe fcc2 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8001a58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a5c:	f002 fad4 	bl	8004008 <HAL_Delay>
									return;
 8001a60:	e393      	b.n	800218a <RFID+0xd82>
								}
								if (key_pressed =='*')
 8001a62:	797b      	ldrb	r3, [r7, #5]
 8001a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a66:	d121      	bne.n	8001aac <RFID+0x6a4>
								{
									statusrm1++;
 8001a68:	7bbb      	ldrb	r3, [r7, #14]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001a6e:	7bbb      	ldrb	r3, [r7, #14]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d801      	bhi.n	8001a78 <RFID+0x670>
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	e000      	b.n	8001a7a <RFID+0x672>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001a7c:	7bbb      	ldrb	r3, [r7, #14]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <RFID+0x680>
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d006      	beq.n	8001a94 <RFID+0x68c>
 8001a86:	e00b      	b.n	8001aa0 <RFID+0x698>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001a88:	4a7d      	ldr	r2, [pc, #500]	@ (8001c80 <RFID+0x878>)
 8001a8a:	497e      	ldr	r1, [pc, #504]	@ (8001c84 <RFID+0x87c>)
 8001a8c:	4877      	ldr	r0, [pc, #476]	@ (8001c6c <RFID+0x864>)
 8001a8e:	f7fe fcb5 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a92:	e00b      	b.n	8001aac <RFID+0x6a4>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001a94:	4a7c      	ldr	r2, [pc, #496]	@ (8001c88 <RFID+0x880>)
 8001a96:	497b      	ldr	r1, [pc, #492]	@ (8001c84 <RFID+0x87c>)
 8001a98:	4874      	ldr	r0, [pc, #464]	@ (8001c6c <RFID+0x864>)
 8001a9a:	f7fe fcaf 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a9e:	e005      	b.n	8001aac <RFID+0x6a4>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 8001aa0:	4a73      	ldr	r2, [pc, #460]	@ (8001c70 <RFID+0x868>)
 8001aa2:	4978      	ldr	r1, [pc, #480]	@ (8001c84 <RFID+0x87c>)
 8001aa4:	4871      	ldr	r0, [pc, #452]	@ (8001c6c <RFID+0x864>)
 8001aa6:	f7fe fca9 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001aaa:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001aac:	797b      	ldrb	r3, [r7, #5]
 8001aae:	2b23      	cmp	r3, #35	@ 0x23
 8001ab0:	f040 8338 	bne.w	8002124 <RFID+0xd1c>
								{
									exitmenu = 15;
 8001ab4:	4b71      	ldr	r3, [pc, #452]	@ (8001c7c <RFID+0x874>)
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <RFID+0x6c0>
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	f000 82d0 	beq.w	8002066 <RFID+0xc5e>
 8001ac6:	e32a      	b.n	800211e <RFID+0xd16>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001ac8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c74 <RFID+0x86c>)
 8001aca:	496b      	ldr	r1, [pc, #428]	@ (8001c78 <RFID+0x870>)
 8001acc:	4867      	ldr	r0, [pc, #412]	@ (8001c6c <RFID+0x864>)
 8001ace:	f7fe fc95 	bl	80003fc <CLCD_I2C_Display>
										uint8_t statusadd = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8001ada:	e2ba      	b.n	8002052 <RFID+0xc4a>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001adc:	200a      	movs	r0, #10
 8001ade:	f7fe fde7 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	717b      	strb	r3, [r7, #5]
											if (exitmenu == 0)
 8001ae6:	4b65      	ldr	r3, [pc, #404]	@ (8001c7c <RFID+0x874>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d107      	bne.n	8001afe <RFID+0x6f6>
											{
												CLCD_I2C_Clear(&LCD1);
 8001aee:	485f      	ldr	r0, [pc, #380]	@ (8001c6c <RFID+0x864>)
 8001af0:	f7fe fc74 	bl	80003dc <CLCD_I2C_Clear>
												HAL_Delay(1000);
 8001af4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001af8:	f002 fa86 	bl	8004008 <HAL_Delay>
												return;
 8001afc:	e345      	b.n	800218a <RFID+0xd82>
											}
											if (key_pressed =='*')
 8001afe:	797b      	ldrb	r3, [r7, #5]
 8001b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b02:	d124      	bne.n	8001b4e <RFID+0x746>
											{
												exitmenu = 15;
 8001b04:	4b5d      	ldr	r3, [pc, #372]	@ (8001c7c <RFID+0x874>)
 8001b06:	220f      	movs	r2, #15
 8001b08:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001b0a:	7b3b      	ldrb	r3, [r7, #12]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001b10:	7b3b      	ldrb	r3, [r7, #12]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d801      	bhi.n	8001b1a <RFID+0x712>
 8001b16:	7b3b      	ldrb	r3, [r7, #12]
 8001b18:	e000      	b.n	8001b1c <RFID+0x714>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001b1e:	7b3b      	ldrb	r3, [r7, #12]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d002      	beq.n	8001b2a <RFID+0x722>
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d006      	beq.n	8001b36 <RFID+0x72e>
 8001b28:	e00b      	b.n	8001b42 <RFID+0x73a>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001b2a:	4a58      	ldr	r2, [pc, #352]	@ (8001c8c <RFID+0x884>)
 8001b2c:	4958      	ldr	r1, [pc, #352]	@ (8001c90 <RFID+0x888>)
 8001b2e:	484f      	ldr	r0, [pc, #316]	@ (8001c6c <RFID+0x864>)
 8001b30:	f7fe fc64 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001b34:	e00b      	b.n	8001b4e <RFID+0x746>
												case 2:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001b36:	4a57      	ldr	r2, [pc, #348]	@ (8001c94 <RFID+0x88c>)
 8001b38:	4955      	ldr	r1, [pc, #340]	@ (8001c90 <RFID+0x888>)
 8001b3a:	484c      	ldr	r0, [pc, #304]	@ (8001c6c <RFID+0x864>)
 8001b3c:	f7fe fc5e 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001b40:	e005      	b.n	8001b4e <RFID+0x746>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");													break;
 8001b42:	4a4b      	ldr	r2, [pc, #300]	@ (8001c70 <RFID+0x868>)
 8001b44:	4952      	ldr	r1, [pc, #328]	@ (8001c90 <RFID+0x888>)
 8001b46:	4849      	ldr	r0, [pc, #292]	@ (8001c6c <RFID+0x864>)
 8001b48:	f7fe fc58 	bl	80003fc <CLCD_I2C_Display>
 8001b4c:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 8001b4e:	797b      	ldrb	r3, [r7, #5]
 8001b50:	2b23      	cmp	r3, #35	@ 0x23
 8001b52:	f040 827e 	bne.w	8002052 <RFID+0xc4a>
											{
												exitmenu = 15;
 8001b56:	4b49      	ldr	r3, [pc, #292]	@ (8001c7c <RFID+0x874>)
 8001b58:	220f      	movs	r2, #15
 8001b5a:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001b5c:	7b3b      	ldrb	r3, [r7, #12]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d003      	beq.n	8001b6a <RFID+0x762>
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	f000 8143 	beq.w	8001dee <RFID+0x9e6>
 8001b68:	e270      	b.n	800204c <RFID+0xc44>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001b6a:	4a42      	ldr	r2, [pc, #264]	@ (8001c74 <RFID+0x86c>)
 8001b6c:	4942      	ldr	r1, [pc, #264]	@ (8001c78 <RFID+0x870>)
 8001b6e:	483f      	ldr	r0, [pc, #252]	@ (8001c6c <RFID+0x864>)
 8001b70:	f7fe fc44 	bl	80003fc <CLCD_I2C_Display>
													uint8_t statusadd1 = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 8001b7c:	e12d      	b.n	8001dda <RFID+0x9d2>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001b7e:	200a      	movs	r0, #10
 8001b80:	f7fe fd96 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001b84:	4603      	mov	r3, r0
 8001b86:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001b88:	4b3c      	ldr	r3, [pc, #240]	@ (8001c7c <RFID+0x874>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <RFID+0x798>
														{
															CLCD_I2C_Clear(&LCD1);
 8001b90:	4836      	ldr	r0, [pc, #216]	@ (8001c6c <RFID+0x864>)
 8001b92:	f7fe fc23 	bl	80003dc <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001b96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b9a:	f002 fa35 	bl	8004008 <HAL_Delay>
															return;
 8001b9e:	e2f4      	b.n	800218a <RFID+0xd82>
														}
														if (key_pressed =='*')
 8001ba0:	797b      	ldrb	r3, [r7, #5]
 8001ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ba4:	d12e      	bne.n	8001c04 <RFID+0x7fc>
														{
															exitmenu = 15;
 8001ba6:	4b35      	ldr	r3, [pc, #212]	@ (8001c7c <RFID+0x874>)
 8001ba8:	220f      	movs	r2, #15
 8001baa:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001bac:	7abb      	ldrb	r3, [r7, #10]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 8001bb2:	7abb      	ldrb	r3, [r7, #10]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d801      	bhi.n	8001bbc <RFID+0x7b4>
 8001bb8:	7abb      	ldrb	r3, [r7, #10]
 8001bba:	e000      	b.n	8001bbe <RFID+0x7b6>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001bc0:	7abb      	ldrb	r3, [r7, #10]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d012      	beq.n	8001bec <RFID+0x7e4>
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	dc16      	bgt.n	8001bf8 <RFID+0x7f0>
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d002      	beq.n	8001bd4 <RFID+0x7cc>
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d006      	beq.n	8001be0 <RFID+0x7d8>
 8001bd2:	e011      	b.n	8001bf8 <RFID+0x7f0>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001bd4:	4a30      	ldr	r2, [pc, #192]	@ (8001c98 <RFID+0x890>)
 8001bd6:	4931      	ldr	r1, [pc, #196]	@ (8001c9c <RFID+0x894>)
 8001bd8:	4824      	ldr	r0, [pc, #144]	@ (8001c6c <RFID+0x864>)
 8001bda:	f7fe fc0f 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001bde:	e011      	b.n	8001c04 <RFID+0x7fc>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001be0:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca0 <RFID+0x898>)
 8001be2:	492e      	ldr	r1, [pc, #184]	@ (8001c9c <RFID+0x894>)
 8001be4:	4821      	ldr	r0, [pc, #132]	@ (8001c6c <RFID+0x864>)
 8001be6:	f7fe fc09 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001bea:	e00b      	b.n	8001c04 <RFID+0x7fc>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001bec:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca4 <RFID+0x89c>)
 8001bee:	492b      	ldr	r1, [pc, #172]	@ (8001c9c <RFID+0x894>)
 8001bf0:	481e      	ldr	r0, [pc, #120]	@ (8001c6c <RFID+0x864>)
 8001bf2:	f7fe fc03 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001bf6:	e005      	b.n	8001c04 <RFID+0x7fc>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> Back");
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c70 <RFID+0x868>)
 8001bfa:	4928      	ldr	r1, [pc, #160]	@ (8001c9c <RFID+0x894>)
 8001bfc:	481b      	ldr	r0, [pc, #108]	@ (8001c6c <RFID+0x864>)
 8001bfe:	f7fe fbfd 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001c02:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001c04:	797b      	ldrb	r3, [r7, #5]
 8001c06:	2b23      	cmp	r3, #35	@ 0x23
 8001c08:	f040 80e7 	bne.w	8001dda <RFID+0x9d2>
														{
															exitmenu = 15;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <RFID+0x874>)
 8001c0e:	220f      	movs	r2, #15
 8001c10:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001c12:	7b3b      	ldrb	r3, [r7, #12]
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	7abb      	ldrb	r3, [r7, #10]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	70fb      	strb	r3, [r7, #3]
															switch (statusadd1)
 8001c1e:	7abb      	ldrb	r3, [r7, #10]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	f000 809f 	beq.w	8001d64 <RFID+0x95c>
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	f300 80d4 	bgt.w	8001dd4 <RFID+0x9cc>
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d002      	beq.n	8001c36 <RFID+0x82e>
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d05f      	beq.n	8001cf4 <RFID+0x8ec>
 8001c34:	e0ce      	b.n	8001dd4 <RFID+0x9cc>
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 f87b 	bl	8002d34 <CheckKey>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d135      	bne.n	8001cb0 <RFID+0x8a8>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 1", "  Do Not Exist");
 8001c44:	4a18      	ldr	r2, [pc, #96]	@ (8001ca8 <RFID+0x8a0>)
 8001c46:	4919      	ldr	r1, [pc, #100]	@ (8001cac <RFID+0x8a4>)
 8001c48:	4808      	ldr	r0, [pc, #32]	@ (8001c6c <RFID+0x864>)
 8001c4a:	f7fe fbd7 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001c4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c52:	f002 f9d9 	bl	8004008 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <RFID+0x890>)
 8001c58:	4910      	ldr	r1, [pc, #64]	@ (8001c9c <RFID+0x894>)
 8001c5a:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <RFID+0x864>)
 8001c5c:	f7fe fbce 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
																	}
																}
																break;
 8001c60:	e0bb      	b.n	8001dda <RFID+0x9d2>
 8001c62:	bf00      	nop
 8001c64:	0800d880 	.word	0x0800d880
 8001c68:	0800d870 	.word	0x0800d870
 8001c6c:	200003d8 	.word	0x200003d8
 8001c70:	0800d6fc 	.word	0x0800d6fc
 8001c74:	0800d704 	.word	0x0800d704
 8001c78:	0800d710 	.word	0x0800d710
 8001c7c:	20000020 	.word	0x20000020
 8001c80:	0800d890 	.word	0x0800d890
 8001c84:	0800d8a0 	.word	0x0800d8a0
 8001c88:	0800d8b0 	.word	0x0800d8b0
 8001c8c:	0800d8c0 	.word	0x0800d8c0
 8001c90:	0800d8d4 	.word	0x0800d8d4
 8001c94:	0800d8e4 	.word	0x0800d8e4
 8001c98:	0800d8f4 	.word	0x0800d8f4
 8001c9c:	0800d904 	.word	0x0800d904
 8001ca0:	0800d914 	.word	0x0800d914
 8001ca4:	0800d924 	.word	0x0800d924
 8001ca8:	0800d934 	.word	0x0800d934
 8001cac:	0800d7ac 	.word	0x0800d7ac
																	removeuid(CheckKey(keyadd1));
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 f83e 	bl	8002d34 <CheckKey>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 f868 	bl	8002d90 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 1 ","   SUCCESSFUL  ");
 8001cc0:	4aab      	ldr	r2, [pc, #684]	@ (8001f70 <RFID+0xb68>)
 8001cc2:	49ac      	ldr	r1, [pc, #688]	@ (8001f74 <RFID+0xb6c>)
 8001cc4:	48ac      	ldr	r0, [pc, #688]	@ (8001f78 <RFID+0xb70>)
 8001cc6:	f7fe fb99 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001cca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cce:	f002 f99b 	bl	8004008 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001cd2:	f000 fedf 	bl	8002a94 <checkcountUID>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d105      	bne.n	8001ce8 <RFID+0x8e0>
																		startadd();
 8001cdc:	f001 f866 	bl	8002dac <startadd>
																		exitmenu = 0;
 8001ce0:	4ba6      	ldr	r3, [pc, #664]	@ (8001f7c <RFID+0xb74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
																break;
 8001ce6:	e078      	b.n	8001dda <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001ce8:	4aa5      	ldr	r2, [pc, #660]	@ (8001f80 <RFID+0xb78>)
 8001cea:	49a6      	ldr	r1, [pc, #664]	@ (8001f84 <RFID+0xb7c>)
 8001cec:	48a2      	ldr	r0, [pc, #648]	@ (8001f78 <RFID+0xb70>)
 8001cee:	f7fe fb85 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001cf2:	e072      	b.n	8001dda <RFID+0x9d2>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 f81c 	bl	8002d34 <CheckKey>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10e      	bne.n	8001d20 <RFID+0x918>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 2", "  Do Not Exist");
 8001d02:	4aa1      	ldr	r2, [pc, #644]	@ (8001f88 <RFID+0xb80>)
 8001d04:	49a1      	ldr	r1, [pc, #644]	@ (8001f8c <RFID+0xb84>)
 8001d06:	489c      	ldr	r0, [pc, #624]	@ (8001f78 <RFID+0xb70>)
 8001d08:	f7fe fb78 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001d0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d10:	f002 f97a 	bl	8004008 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001d14:	4a9e      	ldr	r2, [pc, #632]	@ (8001f90 <RFID+0xb88>)
 8001d16:	499b      	ldr	r1, [pc, #620]	@ (8001f84 <RFID+0xb7c>)
 8001d18:	4897      	ldr	r0, [pc, #604]	@ (8001f78 <RFID+0xb70>)
 8001d1a:	f7fe fb6f 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
																	}
																}
																break;
 8001d1e:	e05c      	b.n	8001dda <RFID+0x9d2>
																	removeuid(CheckKey(keyadd1));
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 f806 	bl	8002d34 <CheckKey>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f001 f830 	bl	8002d90 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 2 ","   SUCCESSFUL  ");
 8001d30:	4a8f      	ldr	r2, [pc, #572]	@ (8001f70 <RFID+0xb68>)
 8001d32:	4998      	ldr	r1, [pc, #608]	@ (8001f94 <RFID+0xb8c>)
 8001d34:	4890      	ldr	r0, [pc, #576]	@ (8001f78 <RFID+0xb70>)
 8001d36:	f7fe fb61 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001d3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d3e:	f002 f963 	bl	8004008 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001d42:	f000 fea7 	bl	8002a94 <checkcountUID>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <RFID+0x950>
																		startadd();
 8001d4c:	f001 f82e 	bl	8002dac <startadd>
																		exitmenu = 0;
 8001d50:	4b8a      	ldr	r3, [pc, #552]	@ (8001f7c <RFID+0xb74>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
																break;
 8001d56:	e040      	b.n	8001dda <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001d58:	4a8d      	ldr	r2, [pc, #564]	@ (8001f90 <RFID+0xb88>)
 8001d5a:	498a      	ldr	r1, [pc, #552]	@ (8001f84 <RFID+0xb7c>)
 8001d5c:	4886      	ldr	r0, [pc, #536]	@ (8001f78 <RFID+0xb70>)
 8001d5e:	f7fe fb4d 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001d62:	e03a      	b.n	8001dda <RFID+0x9d2>
															case 3:
																if (CheckKey(keyadd1) == 0)
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 ffe4 	bl	8002d34 <CheckKey>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10e      	bne.n	8001d90 <RFID+0x988>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 3", "  Do Not Exist");
 8001d72:	4a85      	ldr	r2, [pc, #532]	@ (8001f88 <RFID+0xb80>)
 8001d74:	4988      	ldr	r1, [pc, #544]	@ (8001f98 <RFID+0xb90>)
 8001d76:	4880      	ldr	r0, [pc, #512]	@ (8001f78 <RFID+0xb70>)
 8001d78:	f7fe fb40 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001d7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d80:	f002 f942 	bl	8004008 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001d84:	4a85      	ldr	r2, [pc, #532]	@ (8001f9c <RFID+0xb94>)
 8001d86:	497f      	ldr	r1, [pc, #508]	@ (8001f84 <RFID+0xb7c>)
 8001d88:	487b      	ldr	r0, [pc, #492]	@ (8001f78 <RFID+0xb70>)
 8001d8a:	f7fe fb37 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
																	}
																}
																break;
 8001d8e:	e024      	b.n	8001dda <RFID+0x9d2>
																	removeuid(CheckKey(keyadd1));
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 ffce 	bl	8002d34 <CheckKey>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fff8 	bl	8002d90 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 3 ","   SUCCESSFUL  ");
 8001da0:	4a73      	ldr	r2, [pc, #460]	@ (8001f70 <RFID+0xb68>)
 8001da2:	497f      	ldr	r1, [pc, #508]	@ (8001fa0 <RFID+0xb98>)
 8001da4:	4874      	ldr	r0, [pc, #464]	@ (8001f78 <RFID+0xb70>)
 8001da6:	f7fe fb29 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001daa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dae:	f002 f92b 	bl	8004008 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001db2:	f000 fe6f 	bl	8002a94 <checkcountUID>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <RFID+0x9c0>
																		startadd();
 8001dbc:	f000 fff6 	bl	8002dac <startadd>
																		exitmenu = 0;
 8001dc0:	4b6e      	ldr	r3, [pc, #440]	@ (8001f7c <RFID+0xb74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
																break;
 8001dc6:	e008      	b.n	8001dda <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001dc8:	4a74      	ldr	r2, [pc, #464]	@ (8001f9c <RFID+0xb94>)
 8001dca:	496e      	ldr	r1, [pc, #440]	@ (8001f84 <RFID+0xb7c>)
 8001dcc:	486a      	ldr	r0, [pc, #424]	@ (8001f78 <RFID+0xb70>)
 8001dce:	f7fe fb15 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001dd2:	e002      	b.n	8001dda <RFID+0x9d2>
															default:
																back11 = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	727b      	strb	r3, [r7, #9]
																break;
 8001dd8:	bf00      	nop
													while (back11 == 1)
 8001dda:	7a7b      	ldrb	r3, [r7, #9]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	f43f aece 	beq.w	8001b7e <RFID+0x776>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001de2:	4a70      	ldr	r2, [pc, #448]	@ (8001fa4 <RFID+0xb9c>)
 8001de4:	4970      	ldr	r1, [pc, #448]	@ (8001fa8 <RFID+0xba0>)
 8001de6:	4864      	ldr	r0, [pc, #400]	@ (8001f78 <RFID+0xb70>)
 8001de8:	f7fe fb08 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001dec:	e131      	b.n	8002052 <RFID+0xc4a>
												case 2:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001dee:	4a6f      	ldr	r2, [pc, #444]	@ (8001fac <RFID+0xba4>)
 8001df0:	496f      	ldr	r1, [pc, #444]	@ (8001fb0 <RFID+0xba8>)
 8001df2:	4861      	ldr	r0, [pc, #388]	@ (8001f78 <RFID+0xb70>)
 8001df4:	f7fe fb02 	bl	80003fc <CLCD_I2C_Display>
													uint8_t statusadd2 = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 8001e00:	e11a      	b.n	8002038 <RFID+0xc30>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001e02:	200a      	movs	r0, #10
 8001e04:	f7fe fc54 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001e0c:	4b5b      	ldr	r3, [pc, #364]	@ (8001f7c <RFID+0xb74>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <RFID+0xa1c>
														{
															CLCD_I2C_Clear(&LCD1);
 8001e14:	4858      	ldr	r0, [pc, #352]	@ (8001f78 <RFID+0xb70>)
 8001e16:	f7fe fae1 	bl	80003dc <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001e1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e1e:	f002 f8f3 	bl	8004008 <HAL_Delay>
															return;
 8001e22:	e1b2      	b.n	800218a <RFID+0xd82>
														}
														if (key_pressed =='*')
 8001e24:	797b      	ldrb	r3, [r7, #5]
 8001e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e28:	d12e      	bne.n	8001e88 <RFID+0xa80>
														{
															exitmenu = 15;
 8001e2a:	4b54      	ldr	r3, [pc, #336]	@ (8001f7c <RFID+0xb74>)
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8001e30:	7a3b      	ldrb	r3, [r7, #8]
 8001e32:	3301      	adds	r3, #1
 8001e34:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001e36:	7a3b      	ldrb	r3, [r7, #8]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d801      	bhi.n	8001e40 <RFID+0xa38>
 8001e3c:	7a3b      	ldrb	r3, [r7, #8]
 8001e3e:	e000      	b.n	8001e42 <RFID+0xa3a>
 8001e40:	2300      	movs	r3, #0
 8001e42:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 8001e44:	7a3b      	ldrb	r3, [r7, #8]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d012      	beq.n	8001e70 <RFID+0xa68>
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	dc16      	bgt.n	8001e7c <RFID+0xa74>
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d002      	beq.n	8001e58 <RFID+0xa50>
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d006      	beq.n	8001e64 <RFID+0xa5c>
 8001e56:	e011      	b.n	8001e7c <RFID+0xa74>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001e58:	4a56      	ldr	r2, [pc, #344]	@ (8001fb4 <RFID+0xbac>)
 8001e5a:	4957      	ldr	r1, [pc, #348]	@ (8001fb8 <RFID+0xbb0>)
 8001e5c:	4846      	ldr	r0, [pc, #280]	@ (8001f78 <RFID+0xb70>)
 8001e5e:	f7fe facd 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001e62:	e011      	b.n	8001e88 <RFID+0xa80>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001e64:	4a55      	ldr	r2, [pc, #340]	@ (8001fbc <RFID+0xbb4>)
 8001e66:	4954      	ldr	r1, [pc, #336]	@ (8001fb8 <RFID+0xbb0>)
 8001e68:	4843      	ldr	r0, [pc, #268]	@ (8001f78 <RFID+0xb70>)
 8001e6a:	f7fe fac7 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001e6e:	e00b      	b.n	8001e88 <RFID+0xa80>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001e70:	4a53      	ldr	r2, [pc, #332]	@ (8001fc0 <RFID+0xbb8>)
 8001e72:	4951      	ldr	r1, [pc, #324]	@ (8001fb8 <RFID+0xbb0>)
 8001e74:	4840      	ldr	r0, [pc, #256]	@ (8001f78 <RFID+0xb70>)
 8001e76:	f7fe fac1 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001e7a:	e005      	b.n	8001e88 <RFID+0xa80>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> Back");
 8001e7c:	4a51      	ldr	r2, [pc, #324]	@ (8001fc4 <RFID+0xbbc>)
 8001e7e:	494e      	ldr	r1, [pc, #312]	@ (8001fb8 <RFID+0xbb0>)
 8001e80:	483d      	ldr	r0, [pc, #244]	@ (8001f78 <RFID+0xb70>)
 8001e82:	f7fe fabb 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001e86:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001e88:	797b      	ldrb	r3, [r7, #5]
 8001e8a:	2b23      	cmp	r3, #35	@ 0x23
 8001e8c:	f040 80d4 	bne.w	8002038 <RFID+0xc30>
														{
															exitmenu = 15;
 8001e90:	4b3a      	ldr	r3, [pc, #232]	@ (8001f7c <RFID+0xb74>)
 8001e92:	220f      	movs	r2, #15
 8001e94:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8001e96:	7b3b      	ldrb	r3, [r7, #12]
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	7a3b      	ldrb	r3, [r7, #8]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	713b      	strb	r3, [r7, #4]
															switch (statusadd2)
 8001ea2:	7a3b      	ldrb	r3, [r7, #8]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	f000 8097 	beq.w	8001fd8 <RFID+0xbd0>
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	f300 80c1 	bgt.w	8002032 <RFID+0xc2a>
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d002      	beq.n	8001eba <RFID+0xab2>
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d02d      	beq.n	8001f14 <RFID+0xb0c>
 8001eb8:	e0bb      	b.n	8002032 <RFID+0xc2a>
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 8001eba:	793b      	ldrb	r3, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 ff39 	bl	8002d34 <CheckKey>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10e      	bne.n	8001ee6 <RFID+0xade>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 1","  Do Not Exist");
 8001ec8:	4a2f      	ldr	r2, [pc, #188]	@ (8001f88 <RFID+0xb80>)
 8001eca:	493f      	ldr	r1, [pc, #252]	@ (8001fc8 <RFID+0xbc0>)
 8001ecc:	482a      	ldr	r0, [pc, #168]	@ (8001f78 <RFID+0xb70>)
 8001ece:	f7fe fa95 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001ed2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ed6:	f002 f897 	bl	8004008 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001eda:	4a36      	ldr	r2, [pc, #216]	@ (8001fb4 <RFID+0xbac>)
 8001edc:	4936      	ldr	r1, [pc, #216]	@ (8001fb8 <RFID+0xbb0>)
 8001ede:	4826      	ldr	r0, [pc, #152]	@ (8001f78 <RFID+0xb70>)
 8001ee0:	f7fe fa8c 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
																}
																break;
 8001ee4:	e0a8      	b.n	8002038 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 8001ee6:	793b      	ldrb	r3, [r7, #4]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 ff23 	bl	8002d34 <CheckKey>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 ff4d 	bl	8002d90 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f70 <RFID+0xb68>)
 8001ef8:	4934      	ldr	r1, [pc, #208]	@ (8001fcc <RFID+0xbc4>)
 8001efa:	481f      	ldr	r0, [pc, #124]	@ (8001f78 <RFID+0xb70>)
 8001efc:	f7fe fa7e 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001f00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f04:	f002 f880 	bl	8004008 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001f08:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb4 <RFID+0xbac>)
 8001f0a:	492b      	ldr	r1, [pc, #172]	@ (8001fb8 <RFID+0xbb0>)
 8001f0c:	481a      	ldr	r0, [pc, #104]	@ (8001f78 <RFID+0xb70>)
 8001f0e:	f7fe fa75 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001f12:	e091      	b.n	8002038 <RFID+0xc30>
															case 2:
																if (CheckKey(keyadd2) == 0)
 8001f14:	793b      	ldrb	r3, [r7, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 ff0c 	bl	8002d34 <CheckKey>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10e      	bne.n	8001f40 <RFID+0xb38>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 2","  Do Not Exist");
 8001f22:	4a19      	ldr	r2, [pc, #100]	@ (8001f88 <RFID+0xb80>)
 8001f24:	492a      	ldr	r1, [pc, #168]	@ (8001fd0 <RFID+0xbc8>)
 8001f26:	4814      	ldr	r0, [pc, #80]	@ (8001f78 <RFID+0xb70>)
 8001f28:	f7fe fa68 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001f2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f30:	f002 f86a 	bl	8004008 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001f34:	4a21      	ldr	r2, [pc, #132]	@ (8001fbc <RFID+0xbb4>)
 8001f36:	4920      	ldr	r1, [pc, #128]	@ (8001fb8 <RFID+0xbb0>)
 8001f38:	480f      	ldr	r0, [pc, #60]	@ (8001f78 <RFID+0xb70>)
 8001f3a:	f7fe fa5f 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
																}
																break;
 8001f3e:	e07b      	b.n	8002038 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 8001f40:	793b      	ldrb	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fef6 	bl	8002d34 <CheckKey>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 ff20 	bl	8002d90 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
 8001f50:	4a07      	ldr	r2, [pc, #28]	@ (8001f70 <RFID+0xb68>)
 8001f52:	4920      	ldr	r1, [pc, #128]	@ (8001fd4 <RFID+0xbcc>)
 8001f54:	4808      	ldr	r0, [pc, #32]	@ (8001f78 <RFID+0xb70>)
 8001f56:	f7fe fa51 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001f5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f5e:	f002 f853 	bl	8004008 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001f62:	4a16      	ldr	r2, [pc, #88]	@ (8001fbc <RFID+0xbb4>)
 8001f64:	4914      	ldr	r1, [pc, #80]	@ (8001fb8 <RFID+0xbb0>)
 8001f66:	4804      	ldr	r0, [pc, #16]	@ (8001f78 <RFID+0xb70>)
 8001f68:	f7fe fa48 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001f6c:	e064      	b.n	8002038 <RFID+0xc30>
 8001f6e:	bf00      	nop
 8001f70:	0800d944 	.word	0x0800d944
 8001f74:	0800d954 	.word	0x0800d954
 8001f78:	200003d8 	.word	0x200003d8
 8001f7c:	20000020 	.word	0x20000020
 8001f80:	0800d8f4 	.word	0x0800d8f4
 8001f84:	0800d904 	.word	0x0800d904
 8001f88:	0800d934 	.word	0x0800d934
 8001f8c:	0800d7cc 	.word	0x0800d7cc
 8001f90:	0800d914 	.word	0x0800d914
 8001f94:	0800d968 	.word	0x0800d968
 8001f98:	0800d7ec 	.word	0x0800d7ec
 8001f9c:	0800d924 	.word	0x0800d924
 8001fa0:	0800d97c 	.word	0x0800d97c
 8001fa4:	0800d8c0 	.word	0x0800d8c0
 8001fa8:	0800d8d4 	.word	0x0800d8d4
 8001fac:	0800d704 	.word	0x0800d704
 8001fb0:	0800d710 	.word	0x0800d710
 8001fb4:	0800d990 	.word	0x0800d990
 8001fb8:	0800d9a0 	.word	0x0800d9a0
 8001fbc:	0800d9b0 	.word	0x0800d9b0
 8001fc0:	0800d9c0 	.word	0x0800d9c0
 8001fc4:	0800d6fc 	.word	0x0800d6fc
 8001fc8:	0800d838 	.word	0x0800d838
 8001fcc:	0800d9d0 	.word	0x0800d9d0
 8001fd0:	0800d844 	.word	0x0800d844
 8001fd4:	0800d9e4 	.word	0x0800d9e4
															case 3:
																if (CheckKey(keyadd2) == 0)
 8001fd8:	793b      	ldrb	r3, [r7, #4]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 feaa 	bl	8002d34 <CheckKey>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10e      	bne.n	8002004 <RFID+0xbfc>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 3","  Do Not Exist");
 8001fe6:	4a6a      	ldr	r2, [pc, #424]	@ (8002190 <RFID+0xd88>)
 8001fe8:	496a      	ldr	r1, [pc, #424]	@ (8002194 <RFID+0xd8c>)
 8001fea:	486b      	ldr	r0, [pc, #428]	@ (8002198 <RFID+0xd90>)
 8001fec:	f7fe fa06 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001ff0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ff4:	f002 f808 	bl	8004008 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001ff8:	4a68      	ldr	r2, [pc, #416]	@ (800219c <RFID+0xd94>)
 8001ffa:	4969      	ldr	r1, [pc, #420]	@ (80021a0 <RFID+0xd98>)
 8001ffc:	4866      	ldr	r0, [pc, #408]	@ (8002198 <RFID+0xd90>)
 8001ffe:	f7fe f9fd 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
																}
																break;
 8002002:	e019      	b.n	8002038 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 8002004:	793b      	ldrb	r3, [r7, #4]
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fe94 	bl	8002d34 <CheckKey>
 800200c:	4603      	mov	r3, r0
 800200e:	4618      	mov	r0, r3
 8002010:	f000 febe 	bl	8002d90 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
 8002014:	4a63      	ldr	r2, [pc, #396]	@ (80021a4 <RFID+0xd9c>)
 8002016:	4964      	ldr	r1, [pc, #400]	@ (80021a8 <RFID+0xda0>)
 8002018:	485f      	ldr	r0, [pc, #380]	@ (8002198 <RFID+0xd90>)
 800201a:	f7fe f9ef 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 800201e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002022:	f001 fff1 	bl	8004008 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8002026:	4a5d      	ldr	r2, [pc, #372]	@ (800219c <RFID+0xd94>)
 8002028:	495d      	ldr	r1, [pc, #372]	@ (80021a0 <RFID+0xd98>)
 800202a:	485b      	ldr	r0, [pc, #364]	@ (8002198 <RFID+0xd90>)
 800202c:	f7fe f9e6 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002030:	e002      	b.n	8002038 <RFID+0xc30>
															default:
																back12 = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	71fb      	strb	r3, [r7, #7]
																break;
 8002036:	bf00      	nop
													while (back12 == 1)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	2b01      	cmp	r3, #1
 800203c:	f43f aee1 	beq.w	8001e02 <RFID+0x9fa>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8002040:	4a5a      	ldr	r2, [pc, #360]	@ (80021ac <RFID+0xda4>)
 8002042:	495b      	ldr	r1, [pc, #364]	@ (80021b0 <RFID+0xda8>)
 8002044:	4854      	ldr	r0, [pc, #336]	@ (8002198 <RFID+0xd90>)
 8002046:	f7fe f9d9 	bl	80003fc <CLCD_I2C_Display>
													break;
 800204a:	e002      	b.n	8002052 <RFID+0xc4a>
												default:
													backrm10 = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	72fb      	strb	r3, [r7, #11]
													break;
 8002050:	bf00      	nop
										while (backrm10 == 1)
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	2b01      	cmp	r3, #1
 8002056:	f43f ad41 	beq.w	8001adc <RFID+0x6d4>
												}
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 800205a:	4a56      	ldr	r2, [pc, #344]	@ (80021b4 <RFID+0xdac>)
 800205c:	4956      	ldr	r1, [pc, #344]	@ (80021b8 <RFID+0xdb0>)
 800205e:	484e      	ldr	r0, [pc, #312]	@ (8002198 <RFID+0xd90>)
 8002060:	f7fe f9cc 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002064:	e05e      	b.n	8002124 <RFID+0xd1c>
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8002066:	4a55      	ldr	r2, [pc, #340]	@ (80021bc <RFID+0xdb4>)
 8002068:	4955      	ldr	r1, [pc, #340]	@ (80021c0 <RFID+0xdb8>)
 800206a:	484b      	ldr	r0, [pc, #300]	@ (8002198 <RFID+0xd90>)
 800206c:	f7fe f9c6 	bl	80003fc <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002074:	e04a      	b.n	800210c <RFID+0xd04>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002076:	200a      	movs	r0, #10
 8002078:	f7fe fb1a 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800207c:	4603      	mov	r3, r0
 800207e:	717b      	strb	r3, [r7, #5]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 8002080:	4850      	ldr	r0, [pc, #320]	@ (80021c4 <RFID+0xdbc>)
 8002082:	f001 fb29 	bl	80036d8 <TM_MFRC522_Check>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d13a      	bne.n	8002102 <RFID+0xcfa>
											{
												if (CheckListUID(CardID) != 0)
 800208c:	484d      	ldr	r0, [pc, #308]	@ (80021c4 <RFID+0xdbc>)
 800208e:	f000 fcd1 	bl	8002a34 <CheckListUID>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d026      	beq.n	80020e6 <RFID+0xcde>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8002098:	484a      	ldr	r0, [pc, #296]	@ (80021c4 <RFID+0xdbc>)
 800209a:	f000 fccb 	bl	8002a34 <CheckListUID>
 800209e:	4603      	mov	r3, r0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fe47 	bl	8002d34 <CheckKey>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fe71 	bl	8002d90 <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 80020ae:	4a3d      	ldr	r2, [pc, #244]	@ (80021a4 <RFID+0xd9c>)
 80020b0:	4945      	ldr	r1, [pc, #276]	@ (80021c8 <RFID+0xdc0>)
 80020b2:	4839      	ldr	r0, [pc, #228]	@ (8002198 <RFID+0xd90>)
 80020b4:	f7fe f9a2 	bl	80003fc <CLCD_I2C_Display>
													HAL_Delay(1000);
 80020b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020bc:	f001 ffa4 	bl	8004008 <HAL_Delay>
													if (checkcountUID() == 0)
 80020c0:	f000 fce8 	bl	8002a94 <checkcountUID>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d107      	bne.n	80020da <RFID+0xcd2>
													{
														startadd();
 80020ca:	f000 fe6f 	bl	8002dac <startadd>
														rmquet = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 80020d2:	4b3e      	ldr	r3, [pc, #248]	@ (80021cc <RFID+0xdc4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
														return;
 80020d8:	e057      	b.n	800218a <RFID+0xd82>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 80020da:	4a38      	ldr	r2, [pc, #224]	@ (80021bc <RFID+0xdb4>)
 80020dc:	4938      	ldr	r1, [pc, #224]	@ (80021c0 <RFID+0xdb8>)
 80020de:	482e      	ldr	r0, [pc, #184]	@ (8002198 <RFID+0xd90>)
 80020e0:	f7fe f98c 	bl	80003fc <CLCD_I2C_Display>
 80020e4:	e00d      	b.n	8002102 <RFID+0xcfa>
													}

												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   THIS CARD","  Do Not Exist");
 80020e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002190 <RFID+0xd88>)
 80020e8:	4939      	ldr	r1, [pc, #228]	@ (80021d0 <RFID+0xdc8>)
 80020ea:	482b      	ldr	r0, [pc, #172]	@ (8002198 <RFID+0xd90>)
 80020ec:	f7fe f986 	bl	80003fc <CLCD_I2C_Display>
													HAL_Delay(1000);
 80020f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020f4:	f001 ff88 	bl	8004008 <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 80020f8:	4a30      	ldr	r2, [pc, #192]	@ (80021bc <RFID+0xdb4>)
 80020fa:	4931      	ldr	r1, [pc, #196]	@ (80021c0 <RFID+0xdb8>)
 80020fc:	4826      	ldr	r0, [pc, #152]	@ (8002198 <RFID+0xd90>)
 80020fe:	f7fe f97d 	bl	80003fc <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 8002102:	797b      	ldrb	r3, [r7, #5]
 8002104:	2b23      	cmp	r3, #35	@ 0x23
 8002106:	d101      	bne.n	800210c <RFID+0xd04>
											{
												rmquet = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 800210c:	79bb      	ldrb	r3, [r7, #6]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1b1      	bne.n	8002076 <RFID+0xc6e>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8002112:	4a30      	ldr	r2, [pc, #192]	@ (80021d4 <RFID+0xdcc>)
 8002114:	4928      	ldr	r1, [pc, #160]	@ (80021b8 <RFID+0xdb0>)
 8002116:	4820      	ldr	r0, [pc, #128]	@ (8002198 <RFID+0xd90>)
 8002118:	f7fe f970 	bl	80003fc <CLCD_I2C_Display>
										break;
 800211c:	e002      	b.n	8002124 <RFID+0xd1c>
									default:
										backrm1 = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	737b      	strb	r3, [r7, #13]
										break;
 8002122:	bf00      	nop
							while (backrm1 == 1)
 8002124:	7b7b      	ldrb	r3, [r7, #13]
 8002126:	2b01      	cmp	r3, #1
 8002128:	f43f ac8a 	beq.w	8001a40 <RFID+0x638>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 800212c:	4a2a      	ldr	r2, [pc, #168]	@ (80021d8 <RFID+0xdd0>)
 800212e:	492b      	ldr	r1, [pc, #172]	@ (80021dc <RFID+0xdd4>)
 8002130:	4819      	ldr	r0, [pc, #100]	@ (8002198 <RFID+0xd90>)
 8002132:	f7fe f963 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002136:	e00a      	b.n	800214e <RFID+0xd46>
						case 1:
							remoall();
 8002138:	f000 fea8 	bl	8002e8c <remoall>
							startadd();
 800213c:	f000 fe36 	bl	8002dac <startadd>
							exitmenu = 0;
 8002140:	4b22      	ldr	r3, [pc, #136]	@ (80021cc <RFID+0xdc4>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
							break;
 8002146:	e002      	b.n	800214e <RFID+0xd46>
						default:
							backrm = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
							break;
 800214c:	bf00      	nop
				while (backrm == 1)
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b01      	cmp	r3, #1
 8002152:	f43f abee 	beq.w	8001932 <RFID+0x52a>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8002156:	4a22      	ldr	r2, [pc, #136]	@ (80021e0 <RFID+0xdd8>)
 8002158:	4922      	ldr	r1, [pc, #136]	@ (80021e4 <RFID+0xddc>)
 800215a:	480f      	ldr	r0, [pc, #60]	@ (8002198 <RFID+0xd90>)
 800215c:	f7fe f94e 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002160:	e00b      	b.n	800217a <RFID+0xd72>
			case 2:
				checkthe();
 8002162:	f000 fd39 	bl	8002bd8 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8002166:	4a20      	ldr	r2, [pc, #128]	@ (80021e8 <RFID+0xde0>)
 8002168:	491e      	ldr	r1, [pc, #120]	@ (80021e4 <RFID+0xddc>)
 800216a:	480b      	ldr	r0, [pc, #44]	@ (8002198 <RFID+0xd90>)
 800216c:	f7fe f946 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002170:	e003      	b.n	800217a <RFID+0xd72>
			default:
				exitmenu = 0;
 8002172:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <RFID+0xdc4>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
				break;
 8002178:	bf00      	nop
	while (exitmenu )
 800217a:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <RFID+0xdc4>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f47f a951 	bne.w	8001426 <RFID+0x1e>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002184:	4804      	ldr	r0, [pc, #16]	@ (8002198 <RFID+0xd90>)
 8002186:	f7fe f929 	bl	80003dc <CLCD_I2C_Clear>
}
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	0800d934 	.word	0x0800d934
 8002194:	0800d850 	.word	0x0800d850
 8002198:	200003d8 	.word	0x200003d8
 800219c:	0800d9c0 	.word	0x0800d9c0
 80021a0:	0800d9a0 	.word	0x0800d9a0
 80021a4:	0800d944 	.word	0x0800d944
 80021a8:	0800d9f8 	.word	0x0800d9f8
 80021ac:	0800d8e4 	.word	0x0800d8e4
 80021b0:	0800d8d4 	.word	0x0800d8d4
 80021b4:	0800d890 	.word	0x0800d890
 80021b8:	0800d8a0 	.word	0x0800d8a0
 80021bc:	0800d6fc 	.word	0x0800d6fc
 80021c0:	0800da0c 	.word	0x0800da0c
 80021c4:	200003e4 	.word	0x200003e4
 80021c8:	0800da1c 	.word	0x0800da1c
 80021cc:	20000020 	.word	0x20000020
 80021d0:	0800da2c 	.word	0x0800da2c
 80021d4:	0800d8b0 	.word	0x0800d8b0
 80021d8:	0800d85c 	.word	0x0800d85c
 80021dc:	0800d870 	.word	0x0800d870
 80021e0:	0800d6dc 	.word	0x0800d6dc
 80021e4:	0800d6c0 	.word	0x0800d6c0
 80021e8:	0800d6ec 	.word	0x0800d6ec

080021ec <FACEID>:
void FACEID(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
	exitmenu = Delaymenu;
 80021f2:	4ba8      	ldr	r3, [pc, #672]	@ (8002494 <FACEID+0x2a8>)
 80021f4:	2214      	movs	r2, #20
 80021f6:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80021f8:	23ff      	movs	r3, #255	@ 0xff
 80021fa:	73fb      	strb	r3, [r7, #15]
	CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","Pls Press DOWN");
 80021fc:	4aa6      	ldr	r2, [pc, #664]	@ (8002498 <FACEID+0x2ac>)
 80021fe:	49a7      	ldr	r1, [pc, #668]	@ (800249c <FACEID+0x2b0>)
 8002200:	48a7      	ldr	r0, [pc, #668]	@ (80024a0 <FACEID+0x2b4>)
 8002202:	f7fe f8fb 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002206:	e34f      	b.n	80028a8 <FACEID+0x6bc>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002208:	200a      	movs	r0, #10
 800220a:	f7fe fa51 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800220e:	4603      	mov	r3, r0
 8002210:	723b      	strb	r3, [r7, #8]
		if (key_pressed == '*')
 8002212:	7a3b      	ldrb	r3, [r7, #8]
 8002214:	2b2a      	cmp	r3, #42	@ 0x2a
 8002216:	d124      	bne.n	8002262 <FACEID+0x76>
		{
			exitmenu = Delaymenu;
 8002218:	4b9e      	ldr	r3, [pc, #632]	@ (8002494 <FACEID+0x2a8>)
 800221a:	2214      	movs	r2, #20
 800221c:	701a      	strb	r2, [r3, #0]
			status++;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	3301      	adds	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
			status = (status > 2) ? 0 : status;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d801      	bhi.n	800222e <FACEID+0x42>
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	e000      	b.n	8002230 <FACEID+0x44>
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
			switch (status)
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <FACEID+0x52>
 8002238:	2b01      	cmp	r3, #1
 800223a:	d006      	beq.n	800224a <FACEID+0x5e>
 800223c:	e00b      	b.n	8002256 <FACEID+0x6a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 800223e:	4a99      	ldr	r2, [pc, #612]	@ (80024a4 <FACEID+0x2b8>)
 8002240:	4996      	ldr	r1, [pc, #600]	@ (800249c <FACEID+0x2b0>)
 8002242:	4897      	ldr	r0, [pc, #604]	@ (80024a0 <FACEID+0x2b4>)
 8002244:	f7fe f8da 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002248:	e00b      	b.n	8002262 <FACEID+0x76>
			case 1:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 800224a:	4a97      	ldr	r2, [pc, #604]	@ (80024a8 <FACEID+0x2bc>)
 800224c:	4993      	ldr	r1, [pc, #588]	@ (800249c <FACEID+0x2b0>)
 800224e:	4894      	ldr	r0, [pc, #592]	@ (80024a0 <FACEID+0x2b4>)
 8002250:	f7fe f8d4 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002254:	e005      	b.n	8002262 <FACEID+0x76>
			default:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Back");
 8002256:	4a95      	ldr	r2, [pc, #596]	@ (80024ac <FACEID+0x2c0>)
 8002258:	4990      	ldr	r1, [pc, #576]	@ (800249c <FACEID+0x2b0>)
 800225a:	4891      	ldr	r0, [pc, #580]	@ (80024a0 <FACEID+0x2b4>)
 800225c:	f7fe f8ce 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002260:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002262:	7a3b      	ldrb	r3, [r7, #8]
 8002264:	2b23      	cmp	r3, #35	@ 0x23
 8002266:	f040 831f 	bne.w	80028a8 <FACEID+0x6bc>
		{
			exitmenu = Delaymenu;
 800226a:	4b8a      	ldr	r3, [pc, #552]	@ (8002494 <FACEID+0x2a8>)
 800226c:	2214      	movs	r2, #20
 800226e:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <FACEID+0x92>
 8002276:	2b01      	cmp	r3, #1
 8002278:	f000 8101 	beq.w	800247e <FACEID+0x292>
 800227c:	e310      	b.n	80028a0 <FACEID+0x6b4>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800227e:	4a8c      	ldr	r2, [pc, #560]	@ (80024b0 <FACEID+0x2c4>)
 8002280:	498c      	ldr	r1, [pc, #560]	@ (80024b4 <FACEID+0x2c8>)
 8002282:	4887      	ldr	r0, [pc, #540]	@ (80024a0 <FACEID+0x2b4>)
 8002284:	f7fe f8ba 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	73bb      	strb	r3, [r7, #14]
				uint8_t back = 1;
 800228c:	2301      	movs	r3, #1
 800228e:	737b      	strb	r3, [r7, #13]
				while (back == 1)
 8002290:	e0eb      	b.n	800246a <FACEID+0x27e>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002292:	200a      	movs	r0, #10
 8002294:	f7fe fa0c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002298:	4603      	mov	r3, r0
 800229a:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 800229c:	4b7d      	ldr	r3, [pc, #500]	@ (8002494 <FACEID+0x2a8>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <FACEID+0xc8>
					{
						CLCD_I2C_Clear(&LCD1);
 80022a4:	487e      	ldr	r0, [pc, #504]	@ (80024a0 <FACEID+0x2b4>)
 80022a6:	f7fe f899 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80022aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022ae:	f001 feab 	bl	8004008 <HAL_Delay>
						return;
 80022b2:	e301      	b.n	80028b8 <FACEID+0x6cc>
					}
					if (key_pressed == '*')
 80022b4:	7a3b      	ldrb	r3, [r7, #8]
 80022b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80022b8:	d13a      	bne.n	8002330 <FACEID+0x144>
					{
						exitmenu = Delaymenu;
 80022ba:	4b76      	ldr	r3, [pc, #472]	@ (8002494 <FACEID+0x2a8>)
 80022bc:	2214      	movs	r2, #20
 80022be:	701a      	strb	r2, [r3, #0]
						statusadd++;
 80022c0:	7bbb      	ldrb	r3, [r7, #14]
 80022c2:	3301      	adds	r3, #1
 80022c4:	73bb      	strb	r3, [r7, #14]
						statusadd = (statusadd > 4) ? 0 : statusadd;
 80022c6:	7bbb      	ldrb	r3, [r7, #14]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d801      	bhi.n	80022d0 <FACEID+0xe4>
 80022cc:	7bbb      	ldrb	r3, [r7, #14]
 80022ce:	e000      	b.n	80022d2 <FACEID+0xe6>
 80022d0:	2300      	movs	r3, #0
 80022d2:	73bb      	strb	r3, [r7, #14]
						switch (statusadd)
 80022d4:	7bbb      	ldrb	r3, [r7, #14]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d823      	bhi.n	8002324 <FACEID+0x138>
 80022dc:	a201      	add	r2, pc, #4	@ (adr r2, 80022e4 <FACEID+0xf8>)
 80022de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e2:	bf00      	nop
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	08002301 	.word	0x08002301
 80022ec:	0800230d 	.word	0x0800230d
 80022f0:	08002319 	.word	0x08002319
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 80022f4:	4a70      	ldr	r2, [pc, #448]	@ (80024b8 <FACEID+0x2cc>)
 80022f6:	4971      	ldr	r1, [pc, #452]	@ (80024bc <FACEID+0x2d0>)
 80022f8:	4869      	ldr	r0, [pc, #420]	@ (80024a0 <FACEID+0x2b4>)
 80022fa:	f7fe f87f 	bl	80003fc <CLCD_I2C_Display>
							break;
 80022fe:	e017      	b.n	8002330 <FACEID+0x144>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002300:	4a6f      	ldr	r2, [pc, #444]	@ (80024c0 <FACEID+0x2d4>)
 8002302:	496e      	ldr	r1, [pc, #440]	@ (80024bc <FACEID+0x2d0>)
 8002304:	4866      	ldr	r0, [pc, #408]	@ (80024a0 <FACEID+0x2b4>)
 8002306:	f7fe f879 	bl	80003fc <CLCD_I2C_Display>
							break;
 800230a:	e011      	b.n	8002330 <FACEID+0x144>
						case 3:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 800230c:	4a6d      	ldr	r2, [pc, #436]	@ (80024c4 <FACEID+0x2d8>)
 800230e:	496b      	ldr	r1, [pc, #428]	@ (80024bc <FACEID+0x2d0>)
 8002310:	4863      	ldr	r0, [pc, #396]	@ (80024a0 <FACEID+0x2b4>)
 8002312:	f7fe f873 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002316:	e00b      	b.n	8002330 <FACEID+0x144>
						case 4:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002318:	4a6b      	ldr	r2, [pc, #428]	@ (80024c8 <FACEID+0x2dc>)
 800231a:	4968      	ldr	r1, [pc, #416]	@ (80024bc <FACEID+0x2d0>)
 800231c:	4860      	ldr	r0, [pc, #384]	@ (80024a0 <FACEID+0x2b4>)
 800231e:	f7fe f86d 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002322:	e005      	b.n	8002330 <FACEID+0x144>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> Back");
 8002324:	4a61      	ldr	r2, [pc, #388]	@ (80024ac <FACEID+0x2c0>)
 8002326:	4965      	ldr	r1, [pc, #404]	@ (80024bc <FACEID+0x2d0>)
 8002328:	485d      	ldr	r0, [pc, #372]	@ (80024a0 <FACEID+0x2b4>)
 800232a:	f7fe f867 	bl	80003fc <CLCD_I2C_Display>
							break;
 800232e:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 8002330:	7a3b      	ldrb	r3, [r7, #8]
 8002332:	2b23      	cmp	r3, #35	@ 0x23
 8002334:	f040 8099 	bne.w	800246a <FACEID+0x27e>
					{
						exitmenu = Delaymenu;
 8002338:	4b56      	ldr	r3, [pc, #344]	@ (8002494 <FACEID+0x2a8>)
 800233a:	2214      	movs	r2, #20
 800233c:	701a      	strb	r2, [r3, #0]
						uint8_t keyadd1 = statusadd;
 800233e:	7bbb      	ldrb	r3, [r7, #14]
 8002340:	71bb      	strb	r3, [r7, #6]
						switch (statusadd)
 8002342:	7bbb      	ldrb	r3, [r7, #14]
 8002344:	3b01      	subs	r3, #1
 8002346:	2b03      	cmp	r3, #3
 8002348:	f200 808c 	bhi.w	8002464 <FACEID+0x278>
 800234c:	a201      	add	r2, pc, #4	@ (adr r2, 8002354 <FACEID+0x168>)
 800234e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002352:	bf00      	nop
 8002354:	08002365 	.word	0x08002365
 8002358:	080023a5 	.word	0x080023a5
 800235c:	080023e5 	.word	0x080023e5
 8002360:	08002425 	.word	0x08002425
						{
						case 1:
							if (checkfaceid(keyadd1) != 0)
 8002364:	79bb      	ldrb	r3, [r7, #6]
 8002366:	4618      	mov	r0, r3
 8002368:	f001 f868 	bl	800343c <checkfaceid>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00e      	beq.n	8002390 <FACEID+0x1a4>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 1"," Face 1 Existed ");
 8002372:	4a56      	ldr	r2, [pc, #344]	@ (80024cc <FACEID+0x2e0>)
 8002374:	4956      	ldr	r1, [pc, #344]	@ (80024d0 <FACEID+0x2e4>)
 8002376:	484a      	ldr	r0, [pc, #296]	@ (80024a0 <FACEID+0x2b4>)
 8002378:	f7fe f840 	bl	80003fc <CLCD_I2C_Display>
								HAL_Delay(1000);
 800237c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002380:	f001 fe42 	bl	8004008 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002384:	4a4c      	ldr	r2, [pc, #304]	@ (80024b8 <FACEID+0x2cc>)
 8002386:	494d      	ldr	r1, [pc, #308]	@ (80024bc <FACEID+0x2d0>)
 8002388:	4845      	ldr	r0, [pc, #276]	@ (80024a0 <FACEID+0x2b4>)
 800238a:	f7fe f837 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
							}
							break;
 800238e:	e06c      	b.n	800246a <FACEID+0x27e>
								addface(keyadd1);
 8002390:	79bb      	ldrb	r3, [r7, #6]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 ff9c 	bl	80032d0 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002398:	4a47      	ldr	r2, [pc, #284]	@ (80024b8 <FACEID+0x2cc>)
 800239a:	4948      	ldr	r1, [pc, #288]	@ (80024bc <FACEID+0x2d0>)
 800239c:	4840      	ldr	r0, [pc, #256]	@ (80024a0 <FACEID+0x2b4>)
 800239e:	f7fe f82d 	bl	80003fc <CLCD_I2C_Display>
							break;
 80023a2:	e062      	b.n	800246a <FACEID+0x27e>
						case 2:
							if (checkfaceid(keyadd1) != 0)
 80023a4:	79bb      	ldrb	r3, [r7, #6]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 f848 	bl	800343c <checkfaceid>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00e      	beq.n	80023d0 <FACEID+0x1e4>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 2"," Face 2 Existed ");
 80023b2:	4a48      	ldr	r2, [pc, #288]	@ (80024d4 <FACEID+0x2e8>)
 80023b4:	4948      	ldr	r1, [pc, #288]	@ (80024d8 <FACEID+0x2ec>)
 80023b6:	483a      	ldr	r0, [pc, #232]	@ (80024a0 <FACEID+0x2b4>)
 80023b8:	f7fe f820 	bl	80003fc <CLCD_I2C_Display>
								HAL_Delay(1000);
 80023bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023c0:	f001 fe22 	bl	8004008 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 80023c4:	4a3e      	ldr	r2, [pc, #248]	@ (80024c0 <FACEID+0x2d4>)
 80023c6:	493d      	ldr	r1, [pc, #244]	@ (80024bc <FACEID+0x2d0>)
 80023c8:	4835      	ldr	r0, [pc, #212]	@ (80024a0 <FACEID+0x2b4>)
 80023ca:	f7fe f817 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
							}
							break;
 80023ce:	e04c      	b.n	800246a <FACEID+0x27e>
								addface(keyadd1);
 80023d0:	79bb      	ldrb	r3, [r7, #6]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 ff7c 	bl	80032d0 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 80023d8:	4a39      	ldr	r2, [pc, #228]	@ (80024c0 <FACEID+0x2d4>)
 80023da:	4938      	ldr	r1, [pc, #224]	@ (80024bc <FACEID+0x2d0>)
 80023dc:	4830      	ldr	r0, [pc, #192]	@ (80024a0 <FACEID+0x2b4>)
 80023de:	f7fe f80d 	bl	80003fc <CLCD_I2C_Display>
							break;
 80023e2:	e042      	b.n	800246a <FACEID+0x27e>
						case 3:
							if (checkfaceid(keyadd1) != 0)
 80023e4:	79bb      	ldrb	r3, [r7, #6]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 f828 	bl	800343c <checkfaceid>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00e      	beq.n	8002410 <FACEID+0x224>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 3"," Face 3 Existed ");
 80023f2:	4a3a      	ldr	r2, [pc, #232]	@ (80024dc <FACEID+0x2f0>)
 80023f4:	493a      	ldr	r1, [pc, #232]	@ (80024e0 <FACEID+0x2f4>)
 80023f6:	482a      	ldr	r0, [pc, #168]	@ (80024a0 <FACEID+0x2b4>)
 80023f8:	f7fe f800 	bl	80003fc <CLCD_I2C_Display>
								HAL_Delay(1000);
 80023fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002400:	f001 fe02 	bl	8004008 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 8002404:	4a2f      	ldr	r2, [pc, #188]	@ (80024c4 <FACEID+0x2d8>)
 8002406:	492d      	ldr	r1, [pc, #180]	@ (80024bc <FACEID+0x2d0>)
 8002408:	4825      	ldr	r0, [pc, #148]	@ (80024a0 <FACEID+0x2b4>)
 800240a:	f7fd fff7 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
							}
							break;
 800240e:	e02c      	b.n	800246a <FACEID+0x27e>
								addface(keyadd1);
 8002410:	79bb      	ldrb	r3, [r7, #6]
 8002412:	4618      	mov	r0, r3
 8002414:	f000 ff5c 	bl	80032d0 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 8002418:	4a2a      	ldr	r2, [pc, #168]	@ (80024c4 <FACEID+0x2d8>)
 800241a:	4928      	ldr	r1, [pc, #160]	@ (80024bc <FACEID+0x2d0>)
 800241c:	4820      	ldr	r0, [pc, #128]	@ (80024a0 <FACEID+0x2b4>)
 800241e:	f7fd ffed 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002422:	e022      	b.n	800246a <FACEID+0x27e>
						case 4:
							if (checkfaceid(keyadd1) != 0)
 8002424:	79bb      	ldrb	r3, [r7, #6]
 8002426:	4618      	mov	r0, r3
 8002428:	f001 f808 	bl	800343c <checkfaceid>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00e      	beq.n	8002450 <FACEID+0x264>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 4"," Face 4 Existed ");
 8002432:	4a2c      	ldr	r2, [pc, #176]	@ (80024e4 <FACEID+0x2f8>)
 8002434:	492c      	ldr	r1, [pc, #176]	@ (80024e8 <FACEID+0x2fc>)
 8002436:	481a      	ldr	r0, [pc, #104]	@ (80024a0 <FACEID+0x2b4>)
 8002438:	f7fd ffe0 	bl	80003fc <CLCD_I2C_Display>
								HAL_Delay(1000);
 800243c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002440:	f001 fde2 	bl	8004008 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002444:	4a20      	ldr	r2, [pc, #128]	@ (80024c8 <FACEID+0x2dc>)
 8002446:	491d      	ldr	r1, [pc, #116]	@ (80024bc <FACEID+0x2d0>)
 8002448:	4815      	ldr	r0, [pc, #84]	@ (80024a0 <FACEID+0x2b4>)
 800244a:	f7fd ffd7 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
							}
							break;
 800244e:	e00c      	b.n	800246a <FACEID+0x27e>
								addface(keyadd1);
 8002450:	79bb      	ldrb	r3, [r7, #6]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 ff3c 	bl	80032d0 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002458:	4a1b      	ldr	r2, [pc, #108]	@ (80024c8 <FACEID+0x2dc>)
 800245a:	4918      	ldr	r1, [pc, #96]	@ (80024bc <FACEID+0x2d0>)
 800245c:	4810      	ldr	r0, [pc, #64]	@ (80024a0 <FACEID+0x2b4>)
 800245e:	f7fd ffcd 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002462:	e002      	b.n	800246a <FACEID+0x27e>
						default:
							back = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	737b      	strb	r3, [r7, #13]
							break;
 8002468:	bf00      	nop
				while (back == 1)
 800246a:	7b7b      	ldrb	r3, [r7, #13]
 800246c:	2b01      	cmp	r3, #1
 800246e:	f43f af10 	beq.w	8002292 <FACEID+0xa6>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 8002472:	4a0c      	ldr	r2, [pc, #48]	@ (80024a4 <FACEID+0x2b8>)
 8002474:	4909      	ldr	r1, [pc, #36]	@ (800249c <FACEID+0x2b0>)
 8002476:	480a      	ldr	r0, [pc, #40]	@ (80024a0 <FACEID+0x2b4>)
 8002478:	f7fd ffc0 	bl	80003fc <CLCD_I2C_Display>
				break;
 800247c:	e214      	b.n	80028a8 <FACEID+0x6bc>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800247e:	4a0c      	ldr	r2, [pc, #48]	@ (80024b0 <FACEID+0x2c4>)
 8002480:	490c      	ldr	r1, [pc, #48]	@ (80024b4 <FACEID+0x2c8>)
 8002482:	4807      	ldr	r0, [pc, #28]	@ (80024a0 <FACEID+0x2b4>)
 8002484:	f7fd ffba 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	733b      	strb	r3, [r7, #12]
				uint8_t backrm = 1;
 800248c:	2301      	movs	r3, #1
 800248e:	72fb      	strb	r3, [r7, #11]
				while (backrm == 1)
 8002490:	e1fc      	b.n	800288c <FACEID+0x6a0>
 8002492:	bf00      	nop
 8002494:	20000020 	.word	0x20000020
 8002498:	0800d6b0 	.word	0x0800d6b0
 800249c:	0800da3c 	.word	0x0800da3c
 80024a0:	200003d8 	.word	0x200003d8
 80024a4:	0800da50 	.word	0x0800da50
 80024a8:	0800da60 	.word	0x0800da60
 80024ac:	0800d6fc 	.word	0x0800d6fc
 80024b0:	0800d704 	.word	0x0800d704
 80024b4:	0800d710 	.word	0x0800d710
 80024b8:	0800da74 	.word	0x0800da74
 80024bc:	0800da80 	.word	0x0800da80
 80024c0:	0800da8c 	.word	0x0800da8c
 80024c4:	0800da98 	.word	0x0800da98
 80024c8:	0800daa4 	.word	0x0800daa4
 80024cc:	0800dab0 	.word	0x0800dab0
 80024d0:	0800dac4 	.word	0x0800dac4
 80024d4:	0800dad4 	.word	0x0800dad4
 80024d8:	0800dae8 	.word	0x0800dae8
 80024dc:	0800daf8 	.word	0x0800daf8
 80024e0:	0800db0c 	.word	0x0800db0c
 80024e4:	0800db1c 	.word	0x0800db1c
 80024e8:	0800db30 	.word	0x0800db30
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80024ec:	200a      	movs	r0, #10
 80024ee:	f7fe f8df 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80024f2:	4603      	mov	r3, r0
 80024f4:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 80024f6:	4bac      	ldr	r3, [pc, #688]	@ (80027a8 <FACEID+0x5bc>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d107      	bne.n	800250e <FACEID+0x322>
					{
						CLCD_I2C_Clear(&LCD1);
 80024fe:	48ab      	ldr	r0, [pc, #684]	@ (80027ac <FACEID+0x5c0>)
 8002500:	f7fd ff6c 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8002504:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002508:	f001 fd7e 	bl	8004008 <HAL_Delay>
						return;
 800250c:	e1d4      	b.n	80028b8 <FACEID+0x6cc>
					}
					if (key_pressed == '*')
 800250e:	7a3b      	ldrb	r3, [r7, #8]
 8002510:	2b2a      	cmp	r3, #42	@ 0x2a
 8002512:	d124      	bne.n	800255e <FACEID+0x372>
					{
						exitmenu = Delaymenu;
 8002514:	4ba4      	ldr	r3, [pc, #656]	@ (80027a8 <FACEID+0x5bc>)
 8002516:	2214      	movs	r2, #20
 8002518:	701a      	strb	r2, [r3, #0]
						statusrm++;
 800251a:	7b3b      	ldrb	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	733b      	strb	r3, [r7, #12]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 8002520:	7b3b      	ldrb	r3, [r7, #12]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d801      	bhi.n	800252a <FACEID+0x33e>
 8002526:	7b3b      	ldrb	r3, [r7, #12]
 8002528:	e000      	b.n	800252c <FACEID+0x340>
 800252a:	2300      	movs	r3, #0
 800252c:	733b      	strb	r3, [r7, #12]
						switch (statusrm)
 800252e:	7b3b      	ldrb	r3, [r7, #12]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d002      	beq.n	800253a <FACEID+0x34e>
 8002534:	2b02      	cmp	r3, #2
 8002536:	d006      	beq.n	8002546 <FACEID+0x35a>
 8002538:	e00b      	b.n	8002552 <FACEID+0x366>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 800253a:	4a9d      	ldr	r2, [pc, #628]	@ (80027b0 <FACEID+0x5c4>)
 800253c:	499d      	ldr	r1, [pc, #628]	@ (80027b4 <FACEID+0x5c8>)
 800253e:	489b      	ldr	r0, [pc, #620]	@ (80027ac <FACEID+0x5c0>)
 8002540:	f7fd ff5c 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002544:	e00b      	b.n	800255e <FACEID+0x372>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
 8002546:	4a9c      	ldr	r2, [pc, #624]	@ (80027b8 <FACEID+0x5cc>)
 8002548:	499a      	ldr	r1, [pc, #616]	@ (80027b4 <FACEID+0x5c8>)
 800254a:	4898      	ldr	r0, [pc, #608]	@ (80027ac <FACEID+0x5c0>)
 800254c:	f7fd ff56 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002550:	e005      	b.n	800255e <FACEID+0x372>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Back");
 8002552:	4a9a      	ldr	r2, [pc, #616]	@ (80027bc <FACEID+0x5d0>)
 8002554:	4997      	ldr	r1, [pc, #604]	@ (80027b4 <FACEID+0x5c8>)
 8002556:	4895      	ldr	r0, [pc, #596]	@ (80027ac <FACEID+0x5c0>)
 8002558:	f7fd ff50 	bl	80003fc <CLCD_I2C_Display>
							break;
 800255c:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 800255e:	7a3b      	ldrb	r3, [r7, #8]
 8002560:	2b23      	cmp	r3, #35	@ 0x23
 8002562:	f040 8193 	bne.w	800288c <FACEID+0x6a0>
					{
						exitmenu = Delaymenu;
 8002566:	4b90      	ldr	r3, [pc, #576]	@ (80027a8 <FACEID+0x5bc>)
 8002568:	2214      	movs	r2, #20
 800256a:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 800256c:	7b3b      	ldrb	r3, [r7, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d003      	beq.n	800257a <FACEID+0x38e>
 8002572:	2b02      	cmp	r3, #2
 8002574:	f000 8155 	beq.w	8002822 <FACEID+0x636>
 8002578:	e185      	b.n	8002886 <FACEID+0x69a>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800257a:	4a91      	ldr	r2, [pc, #580]	@ (80027c0 <FACEID+0x5d4>)
 800257c:	4991      	ldr	r1, [pc, #580]	@ (80027c4 <FACEID+0x5d8>)
 800257e:	488b      	ldr	r0, [pc, #556]	@ (80027ac <FACEID+0x5c0>)
 8002580:	f7fd ff3c 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusrm1 = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	72bb      	strb	r3, [r7, #10]
							uint8_t backrm1 = 1;
 8002588:	2301      	movs	r3, #1
 800258a:	727b      	strb	r3, [r7, #9]
							while (backrm1 == 1)
 800258c:	e13f      	b.n	800280e <FACEID+0x622>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 800258e:	200a      	movs	r0, #10
 8002590:	f7fe f88e 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002594:	4603      	mov	r3, r0
 8002596:	723b      	strb	r3, [r7, #8]
								if (exitmenu == 0)
 8002598:	4b83      	ldr	r3, [pc, #524]	@ (80027a8 <FACEID+0x5bc>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <FACEID+0x3c4>
								{
									CLCD_I2C_Clear(&LCD1);
 80025a0:	4882      	ldr	r0, [pc, #520]	@ (80027ac <FACEID+0x5c0>)
 80025a2:	f7fd ff1b 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 80025a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025aa:	f001 fd2d 	bl	8004008 <HAL_Delay>
									return;
 80025ae:	e183      	b.n	80028b8 <FACEID+0x6cc>
								}
								if (key_pressed == '*')
 80025b0:	7a3b      	ldrb	r3, [r7, #8]
 80025b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80025b4:	d13a      	bne.n	800262c <FACEID+0x440>
								{
									exitmenu = Delaymenu;
 80025b6:	4b7c      	ldr	r3, [pc, #496]	@ (80027a8 <FACEID+0x5bc>)
 80025b8:	2214      	movs	r2, #20
 80025ba:	701a      	strb	r2, [r3, #0]
									statusrm1++;
 80025bc:	7abb      	ldrb	r3, [r7, #10]
 80025be:	3301      	adds	r3, #1
 80025c0:	72bb      	strb	r3, [r7, #10]
									statusrm1 = (statusrm1 > 4) ? 0 : statusrm1;
 80025c2:	7abb      	ldrb	r3, [r7, #10]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d801      	bhi.n	80025cc <FACEID+0x3e0>
 80025c8:	7abb      	ldrb	r3, [r7, #10]
 80025ca:	e000      	b.n	80025ce <FACEID+0x3e2>
 80025cc:	2300      	movs	r3, #0
 80025ce:	72bb      	strb	r3, [r7, #10]
									switch (statusrm1)
 80025d0:	7abb      	ldrb	r3, [r7, #10]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d823      	bhi.n	8002620 <FACEID+0x434>
 80025d8:	a201      	add	r2, pc, #4	@ (adr r2, 80025e0 <FACEID+0x3f4>)
 80025da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025de:	bf00      	nop
 80025e0:	080025f1 	.word	0x080025f1
 80025e4:	080025fd 	.word	0x080025fd
 80025e8:	08002609 	.word	0x08002609
 80025ec:	08002615 	.word	0x08002615
									{
									case 1:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 80025f0:	4a75      	ldr	r2, [pc, #468]	@ (80027c8 <FACEID+0x5dc>)
 80025f2:	4976      	ldr	r1, [pc, #472]	@ (80027cc <FACEID+0x5e0>)
 80025f4:	486d      	ldr	r0, [pc, #436]	@ (80027ac <FACEID+0x5c0>)
 80025f6:	f7fd ff01 	bl	80003fc <CLCD_I2C_Display>
										break;
 80025fa:	e017      	b.n	800262c <FACEID+0x440>
									case 2:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 80025fc:	4a74      	ldr	r2, [pc, #464]	@ (80027d0 <FACEID+0x5e4>)
 80025fe:	4973      	ldr	r1, [pc, #460]	@ (80027cc <FACEID+0x5e0>)
 8002600:	486a      	ldr	r0, [pc, #424]	@ (80027ac <FACEID+0x5c0>)
 8002602:	f7fd fefb 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002606:	e011      	b.n	800262c <FACEID+0x440>
									case 3:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 8002608:	4a72      	ldr	r2, [pc, #456]	@ (80027d4 <FACEID+0x5e8>)
 800260a:	4970      	ldr	r1, [pc, #448]	@ (80027cc <FACEID+0x5e0>)
 800260c:	4867      	ldr	r0, [pc, #412]	@ (80027ac <FACEID+0x5c0>)
 800260e:	f7fd fef5 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002612:	e00b      	b.n	800262c <FACEID+0x440>
									case 4:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002614:	4a70      	ldr	r2, [pc, #448]	@ (80027d8 <FACEID+0x5ec>)
 8002616:	496d      	ldr	r1, [pc, #436]	@ (80027cc <FACEID+0x5e0>)
 8002618:	4864      	ldr	r0, [pc, #400]	@ (80027ac <FACEID+0x5c0>)
 800261a:	f7fd feef 	bl	80003fc <CLCD_I2C_Display>
										break;
 800261e:	e005      	b.n	800262c <FACEID+0x440>
									default:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=>  Back ");
 8002620:	4a6e      	ldr	r2, [pc, #440]	@ (80027dc <FACEID+0x5f0>)
 8002622:	496a      	ldr	r1, [pc, #424]	@ (80027cc <FACEID+0x5e0>)
 8002624:	4861      	ldr	r0, [pc, #388]	@ (80027ac <FACEID+0x5c0>)
 8002626:	f7fd fee9 	bl	80003fc <CLCD_I2C_Display>
										break;
 800262a:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 800262c:	7a3b      	ldrb	r3, [r7, #8]
 800262e:	2b23      	cmp	r3, #35	@ 0x23
 8002630:	f040 80ed 	bne.w	800280e <FACEID+0x622>
								{
									exitmenu = Delaymenu;
 8002634:	4b5c      	ldr	r3, [pc, #368]	@ (80027a8 <FACEID+0x5bc>)
 8002636:	2214      	movs	r2, #20
 8002638:	701a      	strb	r2, [r3, #0]
									uint8_t keyrm1 = statusrm1;
 800263a:	7abb      	ldrb	r3, [r7, #10]
 800263c:	71fb      	strb	r3, [r7, #7]
									switch (keyrm1)
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	3b01      	subs	r3, #1
 8002642:	2b03      	cmp	r3, #3
 8002644:	f200 80e0 	bhi.w	8002808 <FACEID+0x61c>
 8002648:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <FACEID+0x464>)
 800264a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264e:	bf00      	nop
 8002650:	08002661 	.word	0x08002661
 8002654:	080026b3 	.word	0x080026b3
 8002658:	08002705 	.word	0x08002705
 800265c:	08002757 	.word	0x08002757
									{
									case 1:
										if (checkfaceid(keyrm1) == 0)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 feea 	bl	800343c <checkfaceid>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10e      	bne.n	800268c <FACEID+0x4a0>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 1", "  Do Not Exist");
 800266e:	4a5c      	ldr	r2, [pc, #368]	@ (80027e0 <FACEID+0x5f4>)
 8002670:	495c      	ldr	r1, [pc, #368]	@ (80027e4 <FACEID+0x5f8>)
 8002672:	484e      	ldr	r0, [pc, #312]	@ (80027ac <FACEID+0x5c0>)
 8002674:	f7fd fec2 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002678:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800267c:	f001 fcc4 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002680:	4a51      	ldr	r2, [pc, #324]	@ (80027c8 <FACEID+0x5dc>)
 8002682:	4952      	ldr	r1, [pc, #328]	@ (80027cc <FACEID+0x5e0>)
 8002684:	4849      	ldr	r0, [pc, #292]	@ (80027ac <FACEID+0x5c0>)
 8002686:	f7fd feb9 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
										}
										break;
 800268a:	e0c0      	b.n	800280e <FACEID+0x622>
											removeface(keyrm1);
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fe7a 	bl	8003388 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
 8002694:	4a54      	ldr	r2, [pc, #336]	@ (80027e8 <FACEID+0x5fc>)
 8002696:	4955      	ldr	r1, [pc, #340]	@ (80027ec <FACEID+0x600>)
 8002698:	4844      	ldr	r0, [pc, #272]	@ (80027ac <FACEID+0x5c0>)
 800269a:	f7fd feaf 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800269e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026a2:	f001 fcb1 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 80026a6:	4a48      	ldr	r2, [pc, #288]	@ (80027c8 <FACEID+0x5dc>)
 80026a8:	4948      	ldr	r1, [pc, #288]	@ (80027cc <FACEID+0x5e0>)
 80026aa:	4840      	ldr	r0, [pc, #256]	@ (80027ac <FACEID+0x5c0>)
 80026ac:	f7fd fea6 	bl	80003fc <CLCD_I2C_Display>
										break;
 80026b0:	e0ad      	b.n	800280e <FACEID+0x622>
									case 2:
										if (checkfaceid(keyrm1) == 0)
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fec1 	bl	800343c <checkfaceid>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10e      	bne.n	80026de <FACEID+0x4f2>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 2", "  Do Not Exist");
 80026c0:	4a47      	ldr	r2, [pc, #284]	@ (80027e0 <FACEID+0x5f4>)
 80026c2:	494b      	ldr	r1, [pc, #300]	@ (80027f0 <FACEID+0x604>)
 80026c4:	4839      	ldr	r0, [pc, #228]	@ (80027ac <FACEID+0x5c0>)
 80026c6:	f7fd fe99 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80026ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026ce:	f001 fc9b 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 80026d2:	4a3f      	ldr	r2, [pc, #252]	@ (80027d0 <FACEID+0x5e4>)
 80026d4:	493d      	ldr	r1, [pc, #244]	@ (80027cc <FACEID+0x5e0>)
 80026d6:	4835      	ldr	r0, [pc, #212]	@ (80027ac <FACEID+0x5c0>)
 80026d8:	f7fd fe90 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
										}
										break;
 80026dc:	e097      	b.n	800280e <FACEID+0x622>
											removeface(keyrm1);
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fe51 	bl	8003388 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
 80026e6:	4a40      	ldr	r2, [pc, #256]	@ (80027e8 <FACEID+0x5fc>)
 80026e8:	4942      	ldr	r1, [pc, #264]	@ (80027f4 <FACEID+0x608>)
 80026ea:	4830      	ldr	r0, [pc, #192]	@ (80027ac <FACEID+0x5c0>)
 80026ec:	f7fd fe86 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80026f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026f4:	f001 fc88 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 80026f8:	4a35      	ldr	r2, [pc, #212]	@ (80027d0 <FACEID+0x5e4>)
 80026fa:	4934      	ldr	r1, [pc, #208]	@ (80027cc <FACEID+0x5e0>)
 80026fc:	482b      	ldr	r0, [pc, #172]	@ (80027ac <FACEID+0x5c0>)
 80026fe:	f7fd fe7d 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002702:	e084      	b.n	800280e <FACEID+0x622>
									case 3:
										if (checkfaceid(keyrm1) == 0)
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fe98 	bl	800343c <checkfaceid>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10e      	bne.n	8002730 <FACEID+0x544>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 3", "  Do Not Exist");
 8002712:	4a33      	ldr	r2, [pc, #204]	@ (80027e0 <FACEID+0x5f4>)
 8002714:	4938      	ldr	r1, [pc, #224]	@ (80027f8 <FACEID+0x60c>)
 8002716:	4825      	ldr	r0, [pc, #148]	@ (80027ac <FACEID+0x5c0>)
 8002718:	f7fd fe70 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800271c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002720:	f001 fc72 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 8002724:	4a2b      	ldr	r2, [pc, #172]	@ (80027d4 <FACEID+0x5e8>)
 8002726:	4929      	ldr	r1, [pc, #164]	@ (80027cc <FACEID+0x5e0>)
 8002728:	4820      	ldr	r0, [pc, #128]	@ (80027ac <FACEID+0x5c0>)
 800272a:	f7fd fe67 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
										}
										break;
 800272e:	e06e      	b.n	800280e <FACEID+0x622>
											removeface(keyrm1);
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fe28 	bl	8003388 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
 8002738:	4a2b      	ldr	r2, [pc, #172]	@ (80027e8 <FACEID+0x5fc>)
 800273a:	4930      	ldr	r1, [pc, #192]	@ (80027fc <FACEID+0x610>)
 800273c:	481b      	ldr	r0, [pc, #108]	@ (80027ac <FACEID+0x5c0>)
 800273e:	f7fd fe5d 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002742:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002746:	f001 fc5f 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 800274a:	4a22      	ldr	r2, [pc, #136]	@ (80027d4 <FACEID+0x5e8>)
 800274c:	491f      	ldr	r1, [pc, #124]	@ (80027cc <FACEID+0x5e0>)
 800274e:	4817      	ldr	r0, [pc, #92]	@ (80027ac <FACEID+0x5c0>)
 8002750:	f7fd fe54 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002754:	e05b      	b.n	800280e <FACEID+0x622>
									case 4:
										if (checkfaceid(keyrm1) == 0)
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fe6f 	bl	800343c <checkfaceid>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10e      	bne.n	8002782 <FACEID+0x596>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 4", "  Do Not Exist");
 8002764:	4a1e      	ldr	r2, [pc, #120]	@ (80027e0 <FACEID+0x5f4>)
 8002766:	4926      	ldr	r1, [pc, #152]	@ (8002800 <FACEID+0x614>)
 8002768:	4810      	ldr	r0, [pc, #64]	@ (80027ac <FACEID+0x5c0>)
 800276a:	f7fd fe47 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800276e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002772:	f001 fc49 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002776:	4a18      	ldr	r2, [pc, #96]	@ (80027d8 <FACEID+0x5ec>)
 8002778:	4914      	ldr	r1, [pc, #80]	@ (80027cc <FACEID+0x5e0>)
 800277a:	480c      	ldr	r0, [pc, #48]	@ (80027ac <FACEID+0x5c0>)
 800277c:	f7fd fe3e 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
										}
										break;
 8002780:	e045      	b.n	800280e <FACEID+0x622>
											removeface(keyrm1);
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fdff 	bl	8003388 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
 800278a:	4a17      	ldr	r2, [pc, #92]	@ (80027e8 <FACEID+0x5fc>)
 800278c:	491d      	ldr	r1, [pc, #116]	@ (8002804 <FACEID+0x618>)
 800278e:	4807      	ldr	r0, [pc, #28]	@ (80027ac <FACEID+0x5c0>)
 8002790:	f7fd fe34 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002798:	f001 fc36 	bl	8004008 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 800279c:	4a0e      	ldr	r2, [pc, #56]	@ (80027d8 <FACEID+0x5ec>)
 800279e:	490b      	ldr	r1, [pc, #44]	@ (80027cc <FACEID+0x5e0>)
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <FACEID+0x5c0>)
 80027a2:	f7fd fe2b 	bl	80003fc <CLCD_I2C_Display>
										break;
 80027a6:	e032      	b.n	800280e <FACEID+0x622>
 80027a8:	20000020 	.word	0x20000020
 80027ac:	200003d8 	.word	0x200003d8
 80027b0:	0800db40 	.word	0x0800db40
 80027b4:	0800db54 	.word	0x0800db54
 80027b8:	0800d880 	.word	0x0800d880
 80027bc:	0800d6fc 	.word	0x0800d6fc
 80027c0:	0800d704 	.word	0x0800d704
 80027c4:	0800d710 	.word	0x0800d710
 80027c8:	0800db64 	.word	0x0800db64
 80027cc:	0800d8a0 	.word	0x0800d8a0
 80027d0:	0800db78 	.word	0x0800db78
 80027d4:	0800db8c 	.word	0x0800db8c
 80027d8:	0800dba0 	.word	0x0800dba0
 80027dc:	0800dbb4 	.word	0x0800dbb4
 80027e0:	0800d934 	.word	0x0800d934
 80027e4:	0800dbc0 	.word	0x0800dbc0
 80027e8:	0800d944 	.word	0x0800d944
 80027ec:	0800dbd0 	.word	0x0800dbd0
 80027f0:	0800dbe0 	.word	0x0800dbe0
 80027f4:	0800dbf0 	.word	0x0800dbf0
 80027f8:	0800dc00 	.word	0x0800dc00
 80027fc:	0800dc10 	.word	0x0800dc10
 8002800:	0800dc20 	.word	0x0800dc20
 8002804:	0800dc30 	.word	0x0800dc30
									default:
										backrm1 = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	727b      	strb	r3, [r7, #9]
										break;
 800280c:	bf00      	nop
							while (backrm1 == 1)
 800280e:	7a7b      	ldrb	r3, [r7, #9]
 8002810:	2b01      	cmp	r3, #1
 8002812:	f43f aebc 	beq.w	800258e <FACEID+0x3a2>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 8002816:	4a2a      	ldr	r2, [pc, #168]	@ (80028c0 <FACEID+0x6d4>)
 8002818:	492a      	ldr	r1, [pc, #168]	@ (80028c4 <FACEID+0x6d8>)
 800281a:	482b      	ldr	r0, [pc, #172]	@ (80028c8 <FACEID+0x6dc>)
 800281c:	f7fd fdee 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002820:	e034      	b.n	800288c <FACEID+0x6a0>
						case 2:
							sprintf(Tx_Buffer , "Del.ALL" );
 8002822:	492a      	ldr	r1, [pc, #168]	@ (80028cc <FACEID+0x6e0>)
 8002824:	482a      	ldr	r0, [pc, #168]	@ (80028d0 <FACEID+0x6e4>)
 8002826:	f00a fa3f 	bl	800cca8 <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 7);
 800282a:	2107      	movs	r1, #7
 800282c:	4828      	ldr	r0, [pc, #160]	@ (80028d0 <FACEID+0x6e4>)
 800282e:	f009 fe29 	bl	800c484 <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002832:	4a28      	ldr	r2, [pc, #160]	@ (80028d4 <FACEID+0x6e8>)
 8002834:	4928      	ldr	r1, [pc, #160]	@ (80028d8 <FACEID+0x6ec>)
 8002836:	4824      	ldr	r0, [pc, #144]	@ (80028c8 <FACEID+0x6dc>)
 8002838:	f7fd fde0 	bl	80003fc <CLCD_I2C_Display>
							exitmenu = 60;
 800283c:	4b27      	ldr	r3, [pc, #156]	@ (80028dc <FACEID+0x6f0>)
 800283e:	223c      	movs	r2, #60	@ 0x3c
 8002840:	701a      	strb	r2, [r3, #0]
							memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002842:	2280      	movs	r2, #128	@ 0x80
 8002844:	2100      	movs	r1, #0
 8002846:	4826      	ldr	r0, [pc, #152]	@ (80028e0 <FACEID+0x6f4>)
 8002848:	f00a fa4e 	bl	800cce8 <memset>
							while(exitmenu != 0){
 800284c:	e013      	b.n	8002876 <FACEID+0x68a>
								if(Rx_Buffer[0] == 'T'){
 800284e:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <FACEID+0x6f4>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b25b      	sxtb	r3, r3
 8002854:	2b54      	cmp	r3, #84	@ 0x54
 8002856:	d10e      	bne.n	8002876 <FACEID+0x68a>
									CLCD_I2C_Display(&LCD1, "REMOVE ALL FACE","   SUCCESSFUL  ");
 8002858:	4a22      	ldr	r2, [pc, #136]	@ (80028e4 <FACEID+0x6f8>)
 800285a:	4923      	ldr	r1, [pc, #140]	@ (80028e8 <FACEID+0x6fc>)
 800285c:	481a      	ldr	r0, [pc, #104]	@ (80028c8 <FACEID+0x6dc>)
 800285e:	f7fd fdcd 	bl	80003fc <CLCD_I2C_Display>
									HAL_Delay(2000);
 8002862:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002866:	f001 fbcf 	bl	8004008 <HAL_Delay>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800286a:	2280      	movs	r2, #128	@ 0x80
 800286c:	2100      	movs	r1, #0
 800286e:	481c      	ldr	r0, [pc, #112]	@ (80028e0 <FACEID+0x6f4>)
 8002870:	f00a fa3a 	bl	800cce8 <memset>
									break;
 8002874:	e003      	b.n	800287e <FACEID+0x692>
							while(exitmenu != 0){
 8002876:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <FACEID+0x6f0>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e7      	bne.n	800284e <FACEID+0x662>
								}
							}
							exitmenu = 0;
 800287e:	4b17      	ldr	r3, [pc, #92]	@ (80028dc <FACEID+0x6f0>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
							// CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
							break;
 8002884:	e002      	b.n	800288c <FACEID+0x6a0>
						default:
							backrm=0;
 8002886:	2300      	movs	r3, #0
 8002888:	72fb      	strb	r3, [r7, #11]
							break;
 800288a:	bf00      	nop
				while (backrm == 1)
 800288c:	7afb      	ldrb	r3, [r7, #11]
 800288e:	2b01      	cmp	r3, #1
 8002890:	f43f ae2c 	beq.w	80024ec <FACEID+0x300>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002894:	4a15      	ldr	r2, [pc, #84]	@ (80028ec <FACEID+0x700>)
 8002896:	4916      	ldr	r1, [pc, #88]	@ (80028f0 <FACEID+0x704>)
 8002898:	480b      	ldr	r0, [pc, #44]	@ (80028c8 <FACEID+0x6dc>)
 800289a:	f7fd fdaf 	bl	80003fc <CLCD_I2C_Display>
				break;
 800289e:	e003      	b.n	80028a8 <FACEID+0x6bc>
			default:
				exitmenu=0;
 80028a0:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <FACEID+0x6f0>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
				break;
 80028a6:	bf00      	nop
	while (exitmenu )
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <FACEID+0x6f0>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f47f acab 	bne.w	8002208 <FACEID+0x1c>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 80028b2:	4805      	ldr	r0, [pc, #20]	@ (80028c8 <FACEID+0x6dc>)
 80028b4:	f7fd fd92 	bl	80003dc <CLCD_I2C_Clear>
}
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	0800db40 	.word	0x0800db40
 80028c4:	0800db54 	.word	0x0800db54
 80028c8:	200003d8 	.word	0x200003d8
 80028cc:	0800dc40 	.word	0x0800dc40
 80028d0:	200003d0 	.word	0x200003d0
 80028d4:	0800d630 	.word	0x0800d630
 80028d8:	0800dc48 	.word	0x0800dc48
 80028dc:	20000020 	.word	0x20000020
 80028e0:	20000350 	.word	0x20000350
 80028e4:	0800d944 	.word	0x0800d944
 80028e8:	0800dc54 	.word	0x0800dc54
 80028ec:	0800da60 	.word	0x0800da60
 80028f0:	0800da3c 	.word	0x0800da3c

080028f4 <FINGER>:
void FINGER()
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	add_finger();
 80028f8:	f000 faee 	bl	8002ed8 <add_finger>
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}

08002900 <PASSWORD>:
void PASSWORD(void) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
	exitmenu = Delaymenu;
 8002906:	4b2e      	ldr	r3, [pc, #184]	@ (80029c0 <PASSWORD+0xc0>)
 8002908:	2214      	movs	r2, #20
 800290a:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 800290c:	23ff      	movs	r3, #255	@ 0xff
 800290e:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","Pls Press DOWN");
 8002910:	4a2c      	ldr	r2, [pc, #176]	@ (80029c4 <PASSWORD+0xc4>)
 8002912:	492d      	ldr	r1, [pc, #180]	@ (80029c8 <PASSWORD+0xc8>)
 8002914:	482d      	ldr	r0, [pc, #180]	@ (80029cc <PASSWORD+0xcc>)
 8002916:	f7fd fd71 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 800291a:	e048      	b.n	80029ae <PASSWORD+0xae>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 800291c:	200a      	movs	r0, #10
 800291e:	f7fd fec7 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002922:	4603      	mov	r3, r0
 8002924:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 8002926:	79bb      	ldrb	r3, [r7, #6]
 8002928:	2b2a      	cmp	r3, #42	@ 0x2a
 800292a:	d124      	bne.n	8002976 <PASSWORD+0x76>
		{
			exitmenu = Delaymenu;
 800292c:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <PASSWORD+0xc0>)
 800292e:	2214      	movs	r2, #20
 8002930:	701a      	strb	r2, [r3, #0]
			status++;
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	3301      	adds	r3, #1
 8002936:	71fb      	strb	r3, [r7, #7]
			status = (status > 2) ? 0 : status;
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d801      	bhi.n	8002942 <PASSWORD+0x42>
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	e000      	b.n	8002944 <PASSWORD+0x44>
 8002942:	2300      	movs	r3, #0
 8002944:	71fb      	strb	r3, [r7, #7]
			switch (status)
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <PASSWORD+0x52>
 800294c:	2b01      	cmp	r3, #1
 800294e:	d006      	beq.n	800295e <PASSWORD+0x5e>
 8002950:	e00b      	b.n	800296a <PASSWORD+0x6a>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002952:	4a1f      	ldr	r2, [pc, #124]	@ (80029d0 <PASSWORD+0xd0>)
 8002954:	491c      	ldr	r1, [pc, #112]	@ (80029c8 <PASSWORD+0xc8>)
 8002956:	481d      	ldr	r0, [pc, #116]	@ (80029cc <PASSWORD+0xcc>)
 8002958:	f7fd fd50 	bl	80003fc <CLCD_I2C_Display>
				break;
 800295c:	e00b      	b.n	8002976 <PASSWORD+0x76>
			case 1:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 800295e:	4a1d      	ldr	r2, [pc, #116]	@ (80029d4 <PASSWORD+0xd4>)
 8002960:	4919      	ldr	r1, [pc, #100]	@ (80029c8 <PASSWORD+0xc8>)
 8002962:	481a      	ldr	r0, [pc, #104]	@ (80029cc <PASSWORD+0xcc>)
 8002964:	f7fd fd4a 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002968:	e005      	b.n	8002976 <PASSWORD+0x76>
			default:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Back");
 800296a:	4a1b      	ldr	r2, [pc, #108]	@ (80029d8 <PASSWORD+0xd8>)
 800296c:	4916      	ldr	r1, [pc, #88]	@ (80029c8 <PASSWORD+0xc8>)
 800296e:	4817      	ldr	r0, [pc, #92]	@ (80029cc <PASSWORD+0xcc>)
 8002970:	f7fd fd44 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002974:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002976:	79bb      	ldrb	r3, [r7, #6]
 8002978:	2b23      	cmp	r3, #35	@ 0x23
 800297a:	d118      	bne.n	80029ae <PASSWORD+0xae>
		{
			exitmenu = Delaymenu;
 800297c:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <PASSWORD+0xc0>)
 800297e:	2214      	movs	r2, #20
 8002980:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <PASSWORD+0x8e>
 8002988:	2b01      	cmp	r3, #1
 800298a:	d006      	beq.n	800299a <PASSWORD+0x9a>
 800298c:	e00b      	b.n	80029a6 <PASSWORD+0xa6>
			{
			case 0:
                exitmenu=40;
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <PASSWORD+0xc0>)
 8002990:	2228      	movs	r2, #40	@ 0x28
 8002992:	701a      	strb	r2, [r3, #0]
                change_password();
 8002994:	f000 fdbc 	bl	8003510 <change_password>
                break;
 8002998:	e009      	b.n	80029ae <PASSWORD+0xae>
            case 1:
                exitmenu=40;
 800299a:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <PASSWORD+0xc0>)
 800299c:	2228      	movs	r2, #40	@ 0x28
 800299e:	701a      	strb	r2, [r3, #0]
                set_default_password();
 80029a0:	f000 fe18 	bl	80035d4 <set_default_password>
                break;
 80029a4:	e003      	b.n	80029ae <PASSWORD+0xae>
            default:
                exitmenu = 0;
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <PASSWORD+0xc0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
                break;
 80029ac:	bf00      	nop
	while (exitmenu )
 80029ae:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <PASSWORD+0xc0>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1b2      	bne.n	800291c <PASSWORD+0x1c>
            }
        }
    }
}
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000020 	.word	0x20000020
 80029c4:	0800d6b0 	.word	0x0800d6b0
 80029c8:	0800dc64 	.word	0x0800dc64
 80029cc:	200003d8 	.word	0x200003d8
 80029d0:	0800dc78 	.word	0x0800dc78
 80029d4:	0800dc88 	.word	0x0800dc88
 80029d8:	0800d6fc 	.word	0x0800d6fc

080029dc <CheckUID>:

uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 80029e6:	f107 030c 	add.w	r3, r7, #12
 80029ea:	2208      	movs	r2, #8
 80029ec:	4619      	mov	r1, r3
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	f7fe f934 	bl	8000c5c <Flash_Read_Array>
	if (arr[6] != 0xFF)
 80029f4:	7cbb      	ldrb	r3, [r7, #18]
 80029f6:	2bff      	cmp	r3, #255	@ 0xff
 80029f8:	d001      	beq.n	80029fe <CheckUID+0x22>
		return 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e016      	b.n	8002a2c <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]
 8002a02:	e00f      	b.n	8002a24 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	3318      	adds	r3, #24
 8002a10:	443b      	add	r3, r7
 8002a12:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <CheckUID+0x42>
			return 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e006      	b.n	8002a2c <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
 8002a20:	3301      	adds	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d9ec      	bls.n	8002a04 <CheckUID+0x28>
	}
	return 1;
 8002a2a:	2301      	movs	r3, #1
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002a3c:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <CheckListUID+0x5c>)
 8002a3e:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002a40:	e018      	b.n	8002a74 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3306      	adds	r3, #6
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe f8ef 	bl	8000c2a <Flash_Read_2Byte>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d10a      	bne.n	8002a6e <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002a58:	68f9      	ldr	r1, [r7, #12]
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ffbe 	bl	80029dc <CheckUID>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d103      	bne.n	8002a6e <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3305      	adds	r3, #5
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	e00b      	b.n	8002a86 <CheckListUID+0x52>
		}
		pt = pt + 8;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3308      	adds	r3, #8
 8002a72:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3305      	adds	r3, #5
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe f8ca 	bl	8000c12 <Flash_Read_Byte>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2bff      	cmp	r3, #255	@ 0xff
 8002a82:	d1de      	bne.n	8002a42 <CheckListUID+0xe>
	}
	return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	0800f000 	.word	0x0800f000

08002a94 <checkcountUID>:

uint8_t checkcountUID(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <checkcountUID+0x60>)
 8002a9c:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002aa2:	e01a      	b.n	8002ada <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3306      	adds	r3, #6
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe f8be 	bl	8000c2a <Flash_Read_2Byte>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d10c      	bne.n	8002ad4 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3305      	adds	r3, #5
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe f8a7 	bl	8000c12 <Flash_Read_Byte>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d102      	bne.n	8002ad4 <checkcountUID+0x40>
			{
				count++;
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3305      	adds	r3, #5
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe f897 	bl	8000c12 <Flash_Read_Byte>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2bff      	cmp	r3, #255	@ 0xff
 8002ae8:	d1dc      	bne.n	8002aa4 <checkcountUID+0x10>
	}
	return count;
 8002aea:	78fb      	ldrb	r3, [r7, #3]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	0800f000 	.word	0x0800f000

08002af8 <adduid>:

void adduid(uint8_t key)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
	setaddress();
 8002b02:	f000 f9a7 	bl	8002e54 <setaddress>
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002b06:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb8 <adduid+0xc0>)
 8002b08:	492c      	ldr	r1, [pc, #176]	@ (8002bbc <adduid+0xc4>)
 8002b0a:	482d      	ldr	r0, [pc, #180]	@ (8002bc0 <adduid+0xc8>)
 8002b0c:	f7fd fc76 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu)
 8002b10:	e049      	b.n	8002ba6 <adduid+0xae>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002b12:	482c      	ldr	r0, [pc, #176]	@ (8002bc4 <adduid+0xcc>)
 8002b14:	f000 fde0 	bl	80036d8 <TM_MFRC522_Check>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d13d      	bne.n	8002b9a <adduid+0xa2>
		{
			HAL_Delay(100);
 8002b1e:	2064      	movs	r0, #100	@ 0x64
 8002b20:	f001 fa72 	bl	8004008 <HAL_Delay>
			if (CheckListUID(CardID) == 0)
 8002b24:	4827      	ldr	r0, [pc, #156]	@ (8002bc4 <adduid+0xcc>)
 8002b26:	f7ff ff85 	bl	8002a34 <CheckListUID>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11f      	bne.n	8002b70 <adduid+0x78>
			{
				CardID[5] = key;
 8002b30:	4a24      	ldr	r2, [pc, #144]	@ (8002bc4 <adduid+0xcc>)
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002b36:	4b24      	ldr	r3, [pc, #144]	@ (8002bc8 <adduid+0xd0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2206      	movs	r2, #6
 8002b3c:	4921      	ldr	r1, [pc, #132]	@ (8002bc4 <adduid+0xcc>)
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe f844 	bl	8000bcc <Flash_Write_Array>
				AddressUID += 8;
 8002b44:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <adduid+0xd0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3308      	adds	r3, #8
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc8 <adduid+0xd0>)
 8002b4c:	6013      	str	r3, [r2, #0]
				CLCD_I2C_Clear(&LCD1);
 8002b4e:	481c      	ldr	r0, [pc, #112]	@ (8002bc0 <adduid+0xc8>)
 8002b50:	f7fd fc44 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2100      	movs	r1, #0
 8002b58:	4819      	ldr	r0, [pc, #100]	@ (8002bc0 <adduid+0xc8>)
 8002b5a:	f7fd fbd5 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 8002b5e:	491b      	ldr	r1, [pc, #108]	@ (8002bcc <adduid+0xd4>)
 8002b60:	4817      	ldr	r0, [pc, #92]	@ (8002bc0 <adduid+0xc8>)
 8002b62:	f7fd fc24 	bl	80003ae <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002b66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b6a:	f001 fa4d 	bl	8004008 <HAL_Delay>
				return;
 8002b6e:	e020      	b.n	8002bb2 <adduid+0xba>
			}
			else
			{
				CLCD_I2C_Clear(&LCD1);
 8002b70:	4813      	ldr	r0, [pc, #76]	@ (8002bc0 <adduid+0xc8>)
 8002b72:	f7fd fc33 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4811      	ldr	r0, [pc, #68]	@ (8002bc0 <adduid+0xc8>)
 8002b7c:	f7fd fbc4 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 8002b80:	4913      	ldr	r1, [pc, #76]	@ (8002bd0 <adduid+0xd8>)
 8002b82:	480f      	ldr	r0, [pc, #60]	@ (8002bc0 <adduid+0xc8>)
 8002b84:	f7fd fc13 	bl	80003ae <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002b88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b8c:	f001 fa3c 	bl	8004008 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002b90:	4a09      	ldr	r2, [pc, #36]	@ (8002bb8 <adduid+0xc0>)
 8002b92:	490a      	ldr	r1, [pc, #40]	@ (8002bbc <adduid+0xc4>)
 8002b94:	480a      	ldr	r0, [pc, #40]	@ (8002bc0 <adduid+0xc8>)
 8002b96:	f7fd fc31 	bl	80003fc <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8002b9a:	2064      	movs	r0, #100	@ 0x64
 8002b9c:	f7fd fd88 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b23      	cmp	r3, #35	@ 0x23
 8002ba4:	d004      	beq.n	8002bb0 <adduid+0xb8>
	while (exitmenu)
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <adduid+0xdc>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1b1      	bne.n	8002b12 <adduid+0x1a>
 8002bae:	e000      	b.n	8002bb2 <adduid+0xba>
		{
			return;
 8002bb0:	bf00      	nop
		}
	}
}
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	0800d6fc 	.word	0x0800d6fc
 8002bbc:	0800dc98 	.word	0x0800dc98
 8002bc0:	200003d8 	.word	0x200003d8
 8002bc4:	200003e4 	.word	0x200003e4
 8002bc8:	20000024 	.word	0x20000024
 8002bcc:	0800dca4 	.word	0x0800dca4
 8002bd0:	0800dcb4 	.word	0x0800dcb4
 8002bd4:	20000020 	.word	0x20000020

08002bd8 <checkthe>:

void checkthe(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002bde:	4b49      	ldr	r3, [pc, #292]	@ (8002d04 <checkthe+0x12c>)
 8002be0:	221e      	movs	r2, #30
 8002be2:	701a      	strb	r2, [r3, #0]
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002be4:	4a48      	ldr	r2, [pc, #288]	@ (8002d08 <checkthe+0x130>)
 8002be6:	4949      	ldr	r1, [pc, #292]	@ (8002d0c <checkthe+0x134>)
 8002be8:	4849      	ldr	r0, [pc, #292]	@ (8002d10 <checkthe+0x138>)
 8002bea:	f7fd fc07 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002bee:	e07e      	b.n	8002cee <checkthe+0x116>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002bf0:	4848      	ldr	r0, [pc, #288]	@ (8002d14 <checkthe+0x13c>)
 8002bf2:	f000 fd71 	bl	80036d8 <TM_MFRC522_Check>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d172      	bne.n	8002ce2 <checkthe+0x10a>
		{
			if (CheckListUID(CardID) == 0)
 8002bfc:	4845      	ldr	r0, [pc, #276]	@ (8002d14 <checkthe+0x13c>)
 8002bfe:	f7ff ff19 	bl	8002a34 <CheckListUID>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d119      	bne.n	8002c3c <checkthe+0x64>
			{
				CLCD_I2C_Clear(&LCD1);
 8002c08:	4841      	ldr	r0, [pc, #260]	@ (8002d10 <checkthe+0x138>)
 8002c0a:	f7fd fbe7 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2100      	movs	r1, #0
 8002c12:	483f      	ldr	r0, [pc, #252]	@ (8002d10 <checkthe+0x138>)
 8002c14:	f7fd fb78 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 8002c18:	493f      	ldr	r1, [pc, #252]	@ (8002d18 <checkthe+0x140>)
 8002c1a:	483d      	ldr	r0, [pc, #244]	@ (8002d10 <checkthe+0x138>)
 8002c1c:	f7fd fbc7 	bl	80003ae <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002c20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c24:	f001 f9f0 	bl	8004008 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002c28:	4a37      	ldr	r2, [pc, #220]	@ (8002d08 <checkthe+0x130>)
 8002c2a:	4938      	ldr	r1, [pc, #224]	@ (8002d0c <checkthe+0x134>)
 8002c2c:	4838      	ldr	r0, [pc, #224]	@ (8002d10 <checkthe+0x138>)
 8002c2e:	f7fd fbe5 	bl	80003fc <CLCD_I2C_Display>
				HAL_Delay(1000);
 8002c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c36:	f001 f9e7 	bl	8004008 <HAL_Delay>
 8002c3a:	e052      	b.n	8002ce2 <checkthe+0x10a>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 8002c3c:	4835      	ldr	r0, [pc, #212]	@ (8002d14 <checkthe+0x13c>)
 8002c3e:	f7ff fef9 	bl	8002a34 <CheckListUID>
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	717b      	strb	r3, [r7, #5]
				CLCD_I2C_Clear(&LCD1);
 8002c54:	482e      	ldr	r0, [pc, #184]	@ (8002d10 <checkthe+0x138>)
 8002c56:	f7fd fbc1 	bl	80003dc <CLCD_I2C_Clear>
				switch (key1)
 8002c5a:	797b      	ldrb	r3, [r7, #5]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d109      	bne.n	8002c74 <checkthe+0x9c>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2100      	movs	r1, #0
 8002c64:	482a      	ldr	r0, [pc, #168]	@ (8002d10 <checkthe+0x138>)
 8002c66:	f7fd fb4f 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 8002c6a:	492c      	ldr	r1, [pc, #176]	@ (8002d1c <checkthe+0x144>)
 8002c6c:	4828      	ldr	r0, [pc, #160]	@ (8002d10 <checkthe+0x138>)
 8002c6e:	f7fd fb9e 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8002c72:	e009      	b.n	8002c88 <checkthe+0xb0>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	2100      	movs	r1, #0
 8002c78:	4825      	ldr	r0, [pc, #148]	@ (8002d10 <checkthe+0x138>)
 8002c7a:	f7fd fb45 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "USER CARD");
 8002c7e:	4928      	ldr	r1, [pc, #160]	@ (8002d20 <checkthe+0x148>)
 8002c80:	4823      	ldr	r0, [pc, #140]	@ (8002d10 <checkthe+0x138>)
 8002c82:	f7fd fb94 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8002c86:	bf00      	nop
				}
				switch (key2)
 8002c88:	79bb      	ldrb	r3, [r7, #6]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d002      	beq.n	8002c94 <checkthe+0xbc>
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d00a      	beq.n	8002ca8 <checkthe+0xd0>
 8002c92:	e013      	b.n	8002cbc <checkthe+0xe4>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002c94:	2201      	movs	r2, #1
 8002c96:	2100      	movs	r1, #0
 8002c98:	481d      	ldr	r0, [pc, #116]	@ (8002d10 <checkthe+0x138>)
 8002c9a:	f7fd fb35 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 1");
 8002c9e:	4921      	ldr	r1, [pc, #132]	@ (8002d24 <checkthe+0x14c>)
 8002ca0:	481b      	ldr	r0, [pc, #108]	@ (8002d10 <checkthe+0x138>)
 8002ca2:	f7fd fb84 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8002ca6:	e013      	b.n	8002cd0 <checkthe+0xf8>
				case 2:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002ca8:	2201      	movs	r2, #1
 8002caa:	2100      	movs	r1, #0
 8002cac:	4818      	ldr	r0, [pc, #96]	@ (8002d10 <checkthe+0x138>)
 8002cae:	f7fd fb2b 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 2");
 8002cb2:	491d      	ldr	r1, [pc, #116]	@ (8002d28 <checkthe+0x150>)
 8002cb4:	4816      	ldr	r0, [pc, #88]	@ (8002d10 <checkthe+0x138>)
 8002cb6:	f7fd fb7a 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8002cba:	e009      	b.n	8002cd0 <checkthe+0xf8>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4813      	ldr	r0, [pc, #76]	@ (8002d10 <checkthe+0x138>)
 8002cc2:	f7fd fb21 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 3");
 8002cc6:	4919      	ldr	r1, [pc, #100]	@ (8002d2c <checkthe+0x154>)
 8002cc8:	4811      	ldr	r0, [pc, #68]	@ (8002d10 <checkthe+0x138>)
 8002cca:	f7fd fb70 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8002cce:	bf00      	nop
				}
				HAL_Delay(1000);
 8002cd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cd4:	f001 f998 	bl	8004008 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 8002cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002d08 <checkthe+0x130>)
 8002cda:	4915      	ldr	r1, [pc, #84]	@ (8002d30 <checkthe+0x158>)
 8002cdc:	480c      	ldr	r0, [pc, #48]	@ (8002d10 <checkthe+0x138>)
 8002cde:	f7fd fb8d 	bl	80003fc <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8002ce2:	2064      	movs	r0, #100	@ 0x64
 8002ce4:	f7fd fce4 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b23      	cmp	r3, #35	@ 0x23
 8002cec:	d005      	beq.n	8002cfa <checkthe+0x122>
	while (exitmenu )
 8002cee:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <checkthe+0x12c>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f47f af7c 	bne.w	8002bf0 <checkthe+0x18>
 8002cf8:	e000      	b.n	8002cfc <checkthe+0x124>
		{
			return;
 8002cfa:	bf00      	nop
		}
	}
}
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000020 	.word	0x20000020
 8002d08:	0800d6fc 	.word	0x0800d6fc
 8002d0c:	0800dc98 	.word	0x0800dc98
 8002d10:	200003d8 	.word	0x200003d8
 8002d14:	200003e4 	.word	0x200003e4
 8002d18:	0800dcc4 	.word	0x0800dcc4
 8002d1c:	0800dcd4 	.word	0x0800dcd4
 8002d20:	0800dce0 	.word	0x0800dce0
 8002d24:	0800dcec 	.word	0x0800dcec
 8002d28:	0800dcf4 	.word	0x0800dcf4
 8002d2c:	0800dcfc 	.word	0x0800dcfc
 8002d30:	0800da0c 	.word	0x0800da0c

08002d34 <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 8002d3e:	4b13      	ldr	r3, [pc, #76]	@ (8002d8c <CheckKey+0x58>)
 8002d40:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002d42:	e015      	b.n	8002d70 <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3306      	adds	r3, #6
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd ff6e 	bl	8000c2a <Flash_Read_2Byte>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d107      	bne.n	8002d6a <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3305      	adds	r3, #5
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	79fa      	ldrb	r2, [r7, #7]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d101      	bne.n	8002d6a <CheckKey+0x36>
				return pt;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	e00b      	b.n	8002d82 <CheckKey+0x4e>
		}
		pt = pt + 8;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3308      	adds	r3, #8
 8002d6e:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3305      	adds	r3, #5
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd ff4c 	bl	8000c12 <Flash_Read_Byte>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2bff      	cmp	r3, #255	@ 0xff
 8002d7e:	d1e1      	bne.n	8002d44 <CheckKey+0x10>
	}
	return 0;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	0800f000 	.word	0x0800f000

08002d90 <removeuid>:
void removeuid(uint32_t addressrm)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3306      	adds	r3, #6
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fefc 	bl	8000b9c <Flash_Write_2Byte>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <startadd>:
void startadd(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002db0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e30 <startadd+0x84>)
 8002db2:	4920      	ldr	r1, [pc, #128]	@ (8002e34 <startadd+0x88>)
 8002db4:	4820      	ldr	r0, [pc, #128]	@ (8002e38 <startadd+0x8c>)
 8002db6:	f7fd fb21 	bl	80003fc <CLCD_I2C_Display>
	setaddress();
 8002dba:	f000 f84b 	bl	8002e54 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002dbe:	481f      	ldr	r0, [pc, #124]	@ (8002e3c <startadd+0x90>)
 8002dc0:	f000 fc8a 	bl	80036d8 <TM_MFRC522_Check>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f9      	bne.n	8002dbe <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 8002dca:	481c      	ldr	r0, [pc, #112]	@ (8002e3c <startadd+0x90>)
 8002dcc:	f7ff fe32 	bl	8002a34 <CheckListUID>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <startadd+0x4a>
				{
					CardID[5] = 0x11;
 8002dd6:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <startadd+0x90>)
 8002dd8:	2211      	movs	r2, #17
 8002dda:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8002ddc:	4b18      	ldr	r3, [pc, #96]	@ (8002e40 <startadd+0x94>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2206      	movs	r2, #6
 8002de2:	4916      	ldr	r1, [pc, #88]	@ (8002e3c <startadd+0x90>)
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fef1 	bl	8000bcc <Flash_Write_Array>
					AddressUID += 8;
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <startadd+0x94>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3308      	adds	r3, #8
 8002df0:	4a13      	ldr	r2, [pc, #76]	@ (8002e40 <startadd+0x94>)
 8002df2:	6013      	str	r3, [r2, #0]
					break;
 8002df4:	e00e      	b.n	8002e14 <startadd+0x68>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 8002df6:	4a13      	ldr	r2, [pc, #76]	@ (8002e44 <startadd+0x98>)
 8002df8:	4913      	ldr	r1, [pc, #76]	@ (8002e48 <startadd+0x9c>)
 8002dfa:	480f      	ldr	r0, [pc, #60]	@ (8002e38 <startadd+0x8c>)
 8002dfc:	f7fd fafe 	bl	80003fc <CLCD_I2C_Display>
					HAL_Delay(1000);
 8002e00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e04:	f001 f900 	bl	8004008 <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002e08:	4a09      	ldr	r2, [pc, #36]	@ (8002e30 <startadd+0x84>)
 8002e0a:	490a      	ldr	r1, [pc, #40]	@ (8002e34 <startadd+0x88>)
 8002e0c:	480a      	ldr	r0, [pc, #40]	@ (8002e38 <startadd+0x8c>)
 8002e0e:	f7fd faf5 	bl	80003fc <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002e12:	e7d4      	b.n	8002dbe <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 8002e14:	4a0d      	ldr	r2, [pc, #52]	@ (8002e4c <startadd+0xa0>)
 8002e16:	490e      	ldr	r1, [pc, #56]	@ (8002e50 <startadd+0xa4>)
 8002e18:	4807      	ldr	r0, [pc, #28]	@ (8002e38 <startadd+0x8c>)
 8002e1a:	f7fd faef 	bl	80003fc <CLCD_I2C_Display>
	HAL_Delay(1000);
 8002e1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e22:	f001 f8f1 	bl	8004008 <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 8002e26:	4804      	ldr	r0, [pc, #16]	@ (8002e38 <startadd+0x8c>)
 8002e28:	f7fd fad8 	bl	80003dc <CLCD_I2C_Clear>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	0800dd04 	.word	0x0800dd04
 8002e34:	0800da0c 	.word	0x0800da0c
 8002e38:	200003d8 	.word	0x200003d8
 8002e3c:	200003e4 	.word	0x200003e4
 8002e40:	20000024 	.word	0x20000024
 8002e44:	0800dd18 	.word	0x0800dd18
 8002e48:	0800dd2c 	.word	0x0800dd2c
 8002e4c:	0800dd3c 	.word	0x0800dd3c
 8002e50:	0800dd4c 	.word	0x0800dd4c

08002e54 <setaddress>:
void setaddress(void){
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <setaddress+0x30>)
 8002e5c:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002e5e:	e002      	b.n	8002e66 <setaddress+0x12>
	{
		pt = pt + 8;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3308      	adds	r3, #8
 8002e64:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3305      	adds	r3, #5
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fed1 	bl	8000c12 <Flash_Read_Byte>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2bff      	cmp	r3, #255	@ 0xff
 8002e74:	d1f4      	bne.n	8002e60 <setaddress+0xc>
	}
	AddressUID = pt;
 8002e76:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <setaddress+0x34>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	0800f000 	.word	0x0800f000
 8002e88:	20000024 	.word	0x20000024

08002e8c <remoall>:

void remoall(){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002e92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <remoall+0x44>)
 8002e94:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8002e96:	e00a      	b.n	8002eae <remoall+0x22>
		Flash_Erase(pt);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7fd fe63 	bl	8000b64 <Flash_Erase>
		pt = pt + 0x400;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ea4:	607b      	str	r3, [r7, #4]
		if(pt == 0x800FC00)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <remoall+0x48>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <remoall+0x3a>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fd fec7 	bl	8000c42 <Flash_Read_8Byte>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	bf08      	it	eq
 8002ebe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8002ec2:	d1e9      	bne.n	8002e98 <remoall+0xc>
			break;
	}
}
 8002ec4:	e000      	b.n	8002ec8 <remoall+0x3c>
			break;
 8002ec6:	bf00      	nop
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	0800f000 	.word	0x0800f000
 8002ed4:	0800fc00 	.word	0x0800fc00

08002ed8 <add_finger>:
	}
}

//---------- them van tay---------------
void add_finger()
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
    uint8_t id = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	71fb      	strb	r3, [r7, #7]
    CLCD_I2C_Display(&LCD1, "Enter ID (1-9):", "ID= ");
 8002ee2:	4a8d      	ldr	r2, [pc, #564]	@ (8003118 <add_finger+0x240>)
 8002ee4:	498d      	ldr	r1, [pc, #564]	@ (800311c <add_finger+0x244>)
 8002ee6:	488e      	ldr	r0, [pc, #568]	@ (8003120 <add_finger+0x248>)
 8002ee8:	f7fd fa88 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 8002eec:	200a      	movs	r0, #10
 8002eee:	f7fd fbdf 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71bb      	strb	r3, [r7, #6]
        if (key >= '1' && key <= '9')
 8002ef6:	79bb      	ldrb	r3, [r7, #6]
 8002ef8:	2b30      	cmp	r3, #48	@ 0x30
 8002efa:	d9f7      	bls.n	8002eec <add_finger+0x14>
 8002efc:	79bb      	ldrb	r3, [r7, #6]
 8002efe:	2b39      	cmp	r3, #57	@ 0x39
 8002f00:	d8f4      	bhi.n	8002eec <add_finger+0x14>
        {
            id = key - '0';
 8002f02:	79bb      	ldrb	r3, [r7, #6]
 8002f04:	3b30      	subs	r3, #48	@ 0x30
 8002f06:	71fb      	strb	r3, [r7, #7]
            break;
 8002f08:	bf00      	nop
        }
    }
    ID = id;
 8002f0a:	4a86      	ldr	r2, [pc, #536]	@ (8003124 <add_finger+0x24c>)
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	7013      	strb	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8002f10:	2201      	movs	r2, #1
 8002f12:	2104      	movs	r1, #4
 8002f14:	4882      	ldr	r0, [pc, #520]	@ (8003120 <add_finger+0x248>)
 8002f16:	f7fd f9f7 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteChar(&LCD1, '0' + ID);
 8002f1a:	4b82      	ldr	r3, [pc, #520]	@ (8003124 <add_finger+0x24c>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	3330      	adds	r3, #48	@ 0x30
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	4619      	mov	r1, r3
 8002f24:	487e      	ldr	r0, [pc, #504]	@ (8003120 <add_finger+0x248>)
 8002f26:	f7fd fa32 	bl	800038e <CLCD_I2C_WriteChar>
    HAL_Delay(1000);
 8002f2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f2e:	f001 f86b 	bl	8004008 <HAL_Delay>

    vitri2:
    while(1)
    {
        collect_finger();
 8002f32:	f7fd fcdd 	bl	80008f0 <collect_finger>
        CLCD_I2C_Display(&LCD1, "  Them Van Tay!!     ", "Dat Van Tay!!     ");
 8002f36:	4a7c      	ldr	r2, [pc, #496]	@ (8003128 <add_finger+0x250>)
 8002f38:	497c      	ldr	r1, [pc, #496]	@ (800312c <add_finger+0x254>)
 8002f3a:	4879      	ldr	r0, [pc, #484]	@ (8003120 <add_finger+0x248>)
 8002f3c:	f7fd fa5e 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 8002f40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f44:	f001 f860 	bl	8004008 <HAL_Delay>
    // dat tay vao
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4874      	ldr	r0, [pc, #464]	@ (8003120 <add_finger+0x248>)
 8002f4e:	f7fd f9db 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8002f52:	4977      	ldr	r1, [pc, #476]	@ (8003130 <add_finger+0x258>)
 8002f54:	4872      	ldr	r0, [pc, #456]	@ (8003120 <add_finger+0x248>)
 8002f56:	f7fd fa2a 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8002f5a:	4b76      	ldr	r3, [pc, #472]	@ (8003134 <add_finger+0x25c>)
 8002f5c:	22ff      	movs	r2, #255	@ 0xff
 8002f5e:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8002f60:	e008      	b.n	8002f74 <add_finger+0x9c>
            collect_finger();
 8002f62:	f7fd fcc5 	bl	80008f0 <collect_finger>
            collect_finger();
 8002f66:	f7fd fcc3 	bl	80008f0 <collect_finger>
            tmp= collect_finger();
 8002f6a:	f7fd fcc1 	bl	80008f0 <collect_finger>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a70      	ldr	r2, [pc, #448]	@ (8003134 <add_finger+0x25c>)
 8002f72:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00){
 8002f74:	4b6f      	ldr	r3, [pc, #444]	@ (8003134 <add_finger+0x25c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f2      	bne.n	8002f62 <add_finger+0x8a>
        }
        tmp=0xff;
 8002f7c:	4b6d      	ldr	r3, [pc, #436]	@ (8003134 <add_finger+0x25c>)
 8002f7e:	22ff      	movs	r2, #255	@ 0xff
 8002f80:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002f82:	2201      	movs	r2, #1
 8002f84:	2100      	movs	r1, #0
 8002f86:	4866      	ldr	r0, [pc, #408]	@ (8003120 <add_finger+0x248>)
 8002f88:	f7fd f9be 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8002f8c:	496a      	ldr	r1, [pc, #424]	@ (8003138 <add_finger+0x260>)
 8002f8e:	4864      	ldr	r0, [pc, #400]	@ (8003120 <add_finger+0x248>)
 8002f90:	f7fd fa0d 	bl	80003ae <CLCD_I2C_WriteString>
 8002f94:	2064      	movs	r0, #100	@ 0x64
 8002f96:	f001 f837 	bl	8004008 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4860      	ldr	r0, [pc, #384]	@ (8003120 <add_finger+0x248>)
 8002fa0:	f7fd f9b2 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8002fa4:	4965      	ldr	r1, [pc, #404]	@ (800313c <add_finger+0x264>)
 8002fa6:	485e      	ldr	r0, [pc, #376]	@ (8003120 <add_finger+0x248>)
 8002fa8:	f7fd fa01 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8002fac:	4b61      	ldr	r3, [pc, #388]	@ (8003134 <add_finger+0x25c>)
 8002fae:	22ff      	movs	r2, #255	@ 0xff
 8002fb0:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8002fb2:	e005      	b.n	8002fc0 <add_finger+0xe8>
        tmp=img2tz(0x01);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7fd fcc7 	bl	8000948 <img2tz>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8003134 <add_finger+0x25c>)
 8002fbe:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00){
 8002fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8003134 <add_finger+0x25c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f5      	bne.n	8002fb4 <add_finger+0xdc>
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4854      	ldr	r0, [pc, #336]	@ (8003120 <add_finger+0x248>)
 8002fce:	f7fd f99b 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"dat lai van tay !!   ");HAL_Delay(100);
 8002fd2:	495b      	ldr	r1, [pc, #364]	@ (8003140 <add_finger+0x268>)
 8002fd4:	4852      	ldr	r0, [pc, #328]	@ (8003120 <add_finger+0x248>)
 8002fd6:	f7fd f9ea 	bl	80003ae <CLCD_I2C_WriteString>
 8002fda:	2064      	movs	r0, #100	@ 0x64
 8002fdc:	f001 f814 	bl	8004008 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	484e      	ldr	r0, [pc, #312]	@ (8003120 <add_finger+0x248>)
 8002fe6:	f7fd f98f 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8002fea:	4951      	ldr	r1, [pc, #324]	@ (8003130 <add_finger+0x258>)
 8002fec:	484c      	ldr	r0, [pc, #304]	@ (8003120 <add_finger+0x248>)
 8002fee:	f7fd f9de 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8002ff2:	4b50      	ldr	r3, [pc, #320]	@ (8003134 <add_finger+0x25c>)
 8002ff4:	22ff      	movs	r2, #255	@ 0xff
 8002ff6:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)    {
 8002ff8:	e008      	b.n	800300c <add_finger+0x134>
            collect_finger();
 8002ffa:	f7fd fc79 	bl	80008f0 <collect_finger>
            collect_finger();
 8002ffe:	f7fd fc77 	bl	80008f0 <collect_finger>
            tmp=collect_finger();
 8003002:	f7fd fc75 	bl	80008f0 <collect_finger>
 8003006:	4603      	mov	r3, r0
 8003008:	4a4a      	ldr	r2, [pc, #296]	@ (8003134 <add_finger+0x25c>)
 800300a:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00)    {
 800300c:	4b49      	ldr	r3, [pc, #292]	@ (8003134 <add_finger+0x25c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f2      	bne.n	8002ffa <add_finger+0x122>
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003014:	2201      	movs	r2, #1
 8003016:	2100      	movs	r1, #0
 8003018:	4841      	ldr	r0, [pc, #260]	@ (8003120 <add_finger+0x248>)
 800301a:	f7fd f975 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 800301e:	4946      	ldr	r1, [pc, #280]	@ (8003138 <add_finger+0x260>)
 8003020:	483f      	ldr	r0, [pc, #252]	@ (8003120 <add_finger+0x248>)
 8003022:	f7fd f9c4 	bl	80003ae <CLCD_I2C_WriteString>
 8003026:	2064      	movs	r0, #100	@ 0x64
 8003028:	f000 ffee 	bl	8004008 <HAL_Delay>
        tmp=0xff;
 800302c:	4b41      	ldr	r3, [pc, #260]	@ (8003134 <add_finger+0x25c>)
 800302e:	22ff      	movs	r2, #255	@ 0xff
 8003030:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003032:	2201      	movs	r2, #1
 8003034:	2100      	movs	r1, #0
 8003036:	483a      	ldr	r0, [pc, #232]	@ (8003120 <add_finger+0x248>)
 8003038:	f7fd f966 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 800303c:	493f      	ldr	r1, [pc, #252]	@ (800313c <add_finger+0x264>)
 800303e:	4838      	ldr	r0, [pc, #224]	@ (8003120 <add_finger+0x248>)
 8003040:	f7fd f9b5 	bl	80003ae <CLCD_I2C_WriteString>
        while(tmp!=0x00)    {tmp=img2tz(0x02);}
 8003044:	e005      	b.n	8003052 <add_finger+0x17a>
 8003046:	2002      	movs	r0, #2
 8003048:	f7fd fc7e 	bl	8000948 <img2tz>
 800304c:	4603      	mov	r3, r0
 800304e:	4a39      	ldr	r2, [pc, #228]	@ (8003134 <add_finger+0x25c>)
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	4b38      	ldr	r3, [pc, #224]	@ (8003134 <add_finger+0x25c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f5      	bne.n	8003046 <add_finger+0x16e>
        tmp=0xff;
 800305a:	4b36      	ldr	r3, [pc, #216]	@ (8003134 <add_finger+0x25c>)
 800305c:	22ff      	movs	r2, #255	@ 0xff
 800305e:	601a      	str	r2, [r3, #0]
        // kiem tra 2 buff co trung nhau khong
        while(tmp!=0x00)
 8003060:	e01a      	b.n	8003098 <add_finger+0x1c0>
        {
            tmp=match();    //HAL_Delay(100);
 8003062:	f7fd fcad 	bl	80009c0 <match>
 8003066:	4603      	mov	r3, r0
 8003068:	4a32      	ldr	r2, [pc, #200]	@ (8003134 <add_finger+0x25c>)
 800306a:	6013      	str	r3, [r2, #0]
            if(tmp==0x08||tmp==0x01)
 800306c:	4b31      	ldr	r3, [pc, #196]	@ (8003134 <add_finger+0x25c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d003      	beq.n	800307c <add_finger+0x1a4>
 8003074:	4b2f      	ldr	r3, [pc, #188]	@ (8003134 <add_finger+0x25c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d10d      	bne.n	8003098 <add_finger+0x1c0>
            {
                // loi, lam lai
                    CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800307c:	2201      	movs	r2, #1
 800307e:	2100      	movs	r1, #0
 8003080:	4827      	ldr	r0, [pc, #156]	@ (8003120 <add_finger+0x248>)
 8003082:	f7fd f941 	bl	8000308 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1,"LOI, Lam Lai!!   ");HAL_Delay(1500);
 8003086:	492f      	ldr	r1, [pc, #188]	@ (8003144 <add_finger+0x26c>)
 8003088:	4825      	ldr	r0, [pc, #148]	@ (8003120 <add_finger+0x248>)
 800308a:	f7fd f990 	bl	80003ae <CLCD_I2C_WriteString>
 800308e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003092:	f000 ffb9 	bl	8004008 <HAL_Delay>
                goto vitri2;
 8003096:	e74c      	b.n	8002f32 <add_finger+0x5a>
        while(tmp!=0x00)
 8003098:	4b26      	ldr	r3, [pc, #152]	@ (8003134 <add_finger+0x25c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e0      	bne.n	8003062 <add_finger+0x18a>
            }
        }
        tmp=0xff;
 80030a0:	4b24      	ldr	r3, [pc, #144]	@ (8003134 <add_finger+0x25c>)
 80030a2:	22ff      	movs	r2, #255	@ 0xff
 80030a4:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){tmp=regmodel();HAL_Delay(100);}
 80030a6:	e007      	b.n	80030b8 <add_finger+0x1e0>
 80030a8:	f7fd fcb6 	bl	8000a18 <regmodel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4a21      	ldr	r2, [pc, #132]	@ (8003134 <add_finger+0x25c>)
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	2064      	movs	r0, #100	@ 0x64
 80030b4:	f000 ffa8 	bl	8004008 <HAL_Delay>
 80030b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003134 <add_finger+0x25c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f3      	bne.n	80030a8 <add_finger+0x1d0>
        tmp=0xff;
 80030c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003134 <add_finger+0x25c>)
 80030c2:	22ff      	movs	r2, #255	@ 0xff
 80030c4:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){tmp=store(ID);HAL_Delay(100);}            // luu id
 80030c6:	e00a      	b.n	80030de <add_finger+0x206>
 80030c8:	4b16      	ldr	r3, [pc, #88]	@ (8003124 <add_finger+0x24c>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fccf 	bl	8000a70 <store>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <add_finger+0x25c>)
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	2064      	movs	r0, #100	@ 0x64
 80030da:	f000 ff95 	bl	8004008 <HAL_Delay>
 80030de:	4b15      	ldr	r3, [pc, #84]	@ (8003134 <add_finger+0x25c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <add_finger+0x1f0>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80030e6:	2201      	movs	r2, #1
 80030e8:	2100      	movs	r1, #0
 80030ea:	480d      	ldr	r0, [pc, #52]	@ (8003120 <add_finger+0x248>)
 80030ec:	f7fd f90c 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 80030f0:	4915      	ldr	r1, [pc, #84]	@ (8003148 <add_finger+0x270>)
 80030f2:	480b      	ldr	r0, [pc, #44]	@ (8003120 <add_finger+0x248>)
 80030f4:	f7fd f95b 	bl	80003ae <CLCD_I2C_WriteString>
                /***************** DA LUU XONG**************************/
        HAL_Delay(1500);
 80030f8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80030fc:	f000 ff84 	bl	8004008 <HAL_Delay>
        tmp=0xff;
 8003100:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <add_finger+0x25c>)
 8003102:	22ff      	movs	r2, #255	@ 0xff
 8003104:	601a      	str	r2, [r3, #0]
        CLCD_I2C_Clear(&LCD1);
 8003106:	4806      	ldr	r0, [pc, #24]	@ (8003120 <add_finger+0x248>)
 8003108:	f7fd f968 	bl	80003dc <CLCD_I2C_Clear>
        break;
 800310c:	bf00      	nop
    }
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	0800dd5c 	.word	0x0800dd5c
 800311c:	0800dd64 	.word	0x0800dd64
 8003120:	200003d8 	.word	0x200003d8
 8003124:	20000408 	.word	0x20000408
 8003128:	0800dd74 	.word	0x0800dd74
 800312c:	0800dd88 	.word	0x0800dd88
 8003130:	0800dda0 	.word	0x0800dda0
 8003134:	20000404 	.word	0x20000404
 8003138:	0800ddbc 	.word	0x0800ddbc
 800313c:	0800ddd0 	.word	0x0800ddd0
 8003140:	0800dde8 	.word	0x0800dde8
 8003144:	0800de00 	.word	0x0800de00
 8003148:	0800de14 	.word	0x0800de14

0800314c <read_finger>:
                        //----------end them van tay---------------
void read_finger()
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 8003150:	4b3b      	ldr	r3, [pc, #236]	@ (8003240 <read_finger+0xf4>)
 8003152:	22ff      	movs	r2, #255	@ 0xff
 8003154:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 8003156:	f000 ff4d 	bl	8003ff4 <HAL_GetTick>
 800315a:	4603      	mov	r3, r0
 800315c:	4a39      	ldr	r2, [pc, #228]	@ (8003244 <read_finger+0xf8>)
 800315e:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 8003160:	e013      	b.n	800318a <read_finger+0x3e>
		tmp=collect_finger();
 8003162:	f7fd fbc5 	bl	80008f0 <collect_finger>
 8003166:	4603      	mov	r3, r0
 8003168:	4a35      	ldr	r2, [pc, #212]	@ (8003240 <read_finger+0xf4>)
 800316a:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 800316c:	f000 ff42 	bl	8003ff4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	4b34      	ldr	r3, [pc, #208]	@ (8003244 <read_finger+0xf8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800317c:	d305      	bcc.n	800318a <read_finger+0x3e>
		time_cho=HAL_GetTick();
 800317e:	f000 ff39 	bl	8003ff4 <HAL_GetTick>
 8003182:	4603      	mov	r3, r0
 8003184:	4a2f      	ldr	r2, [pc, #188]	@ (8003244 <read_finger+0xf8>)
 8003186:	6013      	str	r3, [r2, #0]
		return;}
 8003188:	e059      	b.n	800323e <read_finger+0xf2>
	while(tmp!=0x00){
 800318a:	4b2d      	ldr	r3, [pc, #180]	@ (8003240 <read_finger+0xf4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e7      	bne.n	8003162 <read_finger+0x16>

	}
	tmp=0xff;
 8003192:	4b2b      	ldr	r3, [pc, #172]	@ (8003240 <read_finger+0xf4>)
 8003194:	22ff      	movs	r2, #255	@ 0xff
 8003196:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 8003198:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <read_finger+0xf4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <read_finger+0x60>
 80031a0:	2001      	movs	r0, #1
 80031a2:	f7fd fbd1 	bl	8000948 <img2tz>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4a25      	ldr	r2, [pc, #148]	@ (8003240 <read_finger+0xf4>)
 80031aa:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 80031ac:	4b24      	ldr	r3, [pc, #144]	@ (8003240 <read_finger+0xf4>)
 80031ae:	22ff      	movs	r2, #255	@ 0xff
 80031b0:	601a      	str	r2, [r3, #0]
	tmp=search();
 80031b2:	f7fd fc9c 	bl	8000aee <search>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4a21      	ldr	r2, [pc, #132]	@ (8003240 <read_finger+0xf4>)
 80031ba:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 80031bc:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <read_finger+0xf4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d11d      	bne.n	8003200 <read_finger+0xb4>
	{
		tmp=0xff;	// co van tay
 80031c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003240 <read_finger+0xf4>)
 80031c6:	22ff      	movs	r2, #255	@ 0xff
 80031c8:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80031ca:	2201      	movs	r2, #1
 80031cc:	2100      	movs	r1, #0
 80031ce:	481e      	ldr	r0, [pc, #120]	@ (8003248 <read_finger+0xfc>)
 80031d0:	f7fd f89a 	bl	8000308 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Mo Cua!");
 80031d4:	491d      	ldr	r1, [pc, #116]	@ (800324c <read_finger+0x100>)
 80031d6:	481c      	ldr	r0, [pc, #112]	@ (8003248 <read_finger+0xfc>)
 80031d8:	f7fd f8e9 	bl	80003ae <CLCD_I2C_WriteString>
		sprintf(mess," #id = %d  ", pID); // Use %d for integer
 80031dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <read_finger+0x104>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	491c      	ldr	r1, [pc, #112]	@ (8003254 <read_finger+0x108>)
 80031e4:	481c      	ldr	r0, [pc, #112]	@ (8003258 <read_finger+0x10c>)
 80031e6:	f009 fd5f 	bl	800cca8 <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 80031ea:	491b      	ldr	r1, [pc, #108]	@ (8003258 <read_finger+0x10c>)
 80031ec:	4816      	ldr	r0, [pc, #88]	@ (8003248 <read_finger+0xfc>)
 80031ee:	f7fd f8de 	bl	80003ae <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 80031f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031f6:	f000 ff07 	bl	8004008 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 80031fa:	4813      	ldr	r0, [pc, #76]	@ (8003248 <read_finger+0xfc>)
 80031fc:	f7fd f8ee 	bl	80003dc <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 8003200:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <read_finger+0xf4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b09      	cmp	r3, #9
 8003206:	d11a      	bne.n	800323e <read_finger+0xf2>
	{
		tmp=0xff;
 8003208:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <read_finger+0xf4>)
 800320a:	22ff      	movs	r2, #255	@ 0xff
 800320c:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800320e:	2201      	movs	r2, #1
 8003210:	2100      	movs	r1, #0
 8003212:	480d      	ldr	r0, [pc, #52]	@ (8003248 <read_finger+0xfc>)
 8003214:	f7fd f878 	bl	8000308 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1," Van Tay Sai!!     "); HAL_Delay(1000);
 8003218:	4910      	ldr	r1, [pc, #64]	@ (800325c <read_finger+0x110>)
 800321a:	480b      	ldr	r0, [pc, #44]	@ (8003248 <read_finger+0xfc>)
 800321c:	f7fd f8c7 	bl	80003ae <CLCD_I2C_WriteString>
 8003220:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003224:	f000 fef0 	bl	8004008 <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 8003228:	490b      	ldr	r1, [pc, #44]	@ (8003258 <read_finger+0x10c>)
 800322a:	4807      	ldr	r0, [pc, #28]	@ (8003248 <read_finger+0xfc>)
 800322c:	f7fd f8bf 	bl	80003ae <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 8003230:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003234:	f000 fee8 	bl	8004008 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8003238:	4803      	ldr	r0, [pc, #12]	@ (8003248 <read_finger+0xfc>)
 800323a:	f7fd f8cf 	bl	80003dc <CLCD_I2C_Clear>
	}
}
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000404 	.word	0x20000404
 8003244:	200003f4 	.word	0x200003f4
 8003248:	200003d8 	.word	0x200003d8
 800324c:	0800de28 	.word	0x0800de28
 8003250:	20000218 	.word	0x20000218
 8003254:	0800de30 	.word	0x0800de30
 8003258:	200003f8 	.word	0x200003f8
 800325c:	0800de3c 	.word	0x0800de3c

08003260 <startface>:
void startface(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
	if(Rx_Buffer[0] == 'Y'){
 8003264:	4b15      	ldr	r3, [pc, #84]	@ (80032bc <startface+0x5c>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b25b      	sxtb	r3, r3
 800326a:	2b59      	cmp	r3, #89	@ 0x59
 800326c:	d110      	bne.n	8003290 <startface+0x30>
        CLCD_I2C_Clear(&LCD1);
 800326e:	4814      	ldr	r0, [pc, #80]	@ (80032c0 <startface+0x60>)
 8003270:	f7fd f8b4 	bl	80003dc <CLCD_I2C_Clear>
        CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	4811      	ldr	r0, [pc, #68]	@ (80032c0 <startface+0x60>)
 800327a:	f7fd f845 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 800327e:	4911      	ldr	r1, [pc, #68]	@ (80032c4 <startface+0x64>)
 8003280:	480f      	ldr	r0, [pc, #60]	@ (80032c0 <startface+0x60>)
 8003282:	f7fd f894 	bl	80003ae <CLCD_I2C_WriteString>
        HAL_Delay(2000);
 8003286:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800328a:	f000 febd 	bl	8004008 <HAL_Delay>
 800328e:	e00d      	b.n	80032ac <startface+0x4c>
	}else if(Rx_Buffer[0] == 'N'){
 8003290:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <startface+0x5c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	b25b      	sxtb	r3, r3
 8003296:	2b4e      	cmp	r3, #78	@ 0x4e
 8003298:	d108      	bne.n	80032ac <startface+0x4c>
		CLCD_I2C_Display(&LCD1, "  WRONG FACEID", "CAN NOT ACCESS");
 800329a:	4a0b      	ldr	r2, [pc, #44]	@ (80032c8 <startface+0x68>)
 800329c:	490b      	ldr	r1, [pc, #44]	@ (80032cc <startface+0x6c>)
 800329e:	4808      	ldr	r0, [pc, #32]	@ (80032c0 <startface+0x60>)
 80032a0:	f7fd f8ac 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(2000);
 80032a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80032a8:	f000 feae 	bl	8004008 <HAL_Delay>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80032ac:	2280      	movs	r2, #128	@ 0x80
 80032ae:	2100      	movs	r1, #0
 80032b0:	4802      	ldr	r0, [pc, #8]	@ (80032bc <startface+0x5c>)
 80032b2:	f009 fd19 	bl	800cce8 <memset>
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000350 	.word	0x20000350
 80032c0:	200003d8 	.word	0x200003d8
 80032c4:	0800d644 	.word	0x0800d644
 80032c8:	0800de50 	.word	0x0800de50
 80032cc:	0800de60 	.word	0x0800de60

080032d0 <addface>:
void addface(uint8_t key)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80032da:	2280      	movs	r2, #128	@ 0x80
 80032dc:	2100      	movs	r1, #0
 80032de:	4820      	ldr	r0, [pc, #128]	@ (8003360 <addface+0x90>)
 80032e0:	f009 fd02 	bl	800cce8 <memset>
	sprintf(Tx_Buffer , "Add.%d", key );
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	461a      	mov	r2, r3
 80032e8:	491e      	ldr	r1, [pc, #120]	@ (8003364 <addface+0x94>)
 80032ea:	481f      	ldr	r0, [pc, #124]	@ (8003368 <addface+0x98>)
 80032ec:	f009 fcdc 	bl	800cca8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 80032f0:	2105      	movs	r1, #5
 80032f2:	481d      	ldr	r0, [pc, #116]	@ (8003368 <addface+0x98>)
 80032f4:	f009 f8c6 	bl	800c484 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80032f8:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <addface+0x9c>)
 80032fa:	491d      	ldr	r1, [pc, #116]	@ (8003370 <addface+0xa0>)
 80032fc:	481d      	ldr	r0, [pc, #116]	@ (8003374 <addface+0xa4>)
 80032fe:	f7fd f87d 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 8003302:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <addface+0xa8>)
 8003304:	223c      	movs	r2, #60	@ 0x3c
 8003306:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8003308:	e01d      	b.n	8003346 <addface+0x76>
		if(Rx_Buffer[0] == 'T'){
 800330a:	4b15      	ldr	r3, [pc, #84]	@ (8003360 <addface+0x90>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b25b      	sxtb	r3, r3
 8003310:	2b54      	cmp	r3, #84	@ 0x54
 8003312:	d109      	bne.n	8003328 <addface+0x58>
			CLCD_I2C_Display(&LCD1, "   ADD FACEID", "   SUCCESSFUL");
 8003314:	4a19      	ldr	r2, [pc, #100]	@ (800337c <addface+0xac>)
 8003316:	491a      	ldr	r1, [pc, #104]	@ (8003380 <addface+0xb0>)
 8003318:	4816      	ldr	r0, [pc, #88]	@ (8003374 <addface+0xa4>)
 800331a:	f7fd f86f 	bl	80003fc <CLCD_I2C_Display>
			HAL_Delay(2000);
 800331e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003322:	f000 fe71 	bl	8004008 <HAL_Delay>
			break;
 8003326:	e012      	b.n	800334e <addface+0x7e>
		}
		else if(Rx_Buffer[0] == 'F'){
 8003328:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <addface+0x90>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b25b      	sxtb	r3, r3
 800332e:	2b46      	cmp	r3, #70	@ 0x46
 8003330:	d109      	bne.n	8003346 <addface+0x76>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKNOWN", "");
 8003332:	4a0e      	ldr	r2, [pc, #56]	@ (800336c <addface+0x9c>)
 8003334:	4913      	ldr	r1, [pc, #76]	@ (8003384 <addface+0xb4>)
 8003336:	480f      	ldr	r0, [pc, #60]	@ (8003374 <addface+0xa4>)
 8003338:	f7fd f860 	bl	80003fc <CLCD_I2C_Display>
			HAL_Delay(2000);
 800333c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003340:	f000 fe62 	bl	8004008 <HAL_Delay>
			break;
 8003344:	e003      	b.n	800334e <addface+0x7e>
	while(exitmenu != 0){
 8003346:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <addface+0xa8>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1dd      	bne.n	800330a <addface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800334e:	2280      	movs	r2, #128	@ 0x80
 8003350:	2100      	movs	r1, #0
 8003352:	4803      	ldr	r0, [pc, #12]	@ (8003360 <addface+0x90>)
 8003354:	f009 fcc8 	bl	800cce8 <memset>
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20000350 	.word	0x20000350
 8003364:	0800de70 	.word	0x0800de70
 8003368:	200003d0 	.word	0x200003d0
 800336c:	0800d630 	.word	0x0800d630
 8003370:	0800dc48 	.word	0x0800dc48
 8003374:	200003d8 	.word	0x200003d8
 8003378:	20000020 	.word	0x20000020
 800337c:	0800dca4 	.word	0x0800dca4
 8003380:	0800de78 	.word	0x0800de78
 8003384:	0800de88 	.word	0x0800de88

08003388 <removeface>:
void removeface(uint8_t key)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003392:	2280      	movs	r2, #128	@ 0x80
 8003394:	2100      	movs	r1, #0
 8003396:	4820      	ldr	r0, [pc, #128]	@ (8003418 <removeface+0x90>)
 8003398:	f009 fca6 	bl	800cce8 <memset>
	sprintf(Tx_Buffer , "Rem.%d", key );
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	461a      	mov	r2, r3
 80033a0:	491e      	ldr	r1, [pc, #120]	@ (800341c <removeface+0x94>)
 80033a2:	481f      	ldr	r0, [pc, #124]	@ (8003420 <removeface+0x98>)
 80033a4:	f009 fc80 	bl	800cca8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 80033a8:	2105      	movs	r1, #5
 80033aa:	481d      	ldr	r0, [pc, #116]	@ (8003420 <removeface+0x98>)
 80033ac:	f009 f86a 	bl	800c484 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80033b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003424 <removeface+0x9c>)
 80033b2:	491d      	ldr	r1, [pc, #116]	@ (8003428 <removeface+0xa0>)
 80033b4:	481d      	ldr	r0, [pc, #116]	@ (800342c <removeface+0xa4>)
 80033b6:	f7fd f821 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 80033ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003430 <removeface+0xa8>)
 80033bc:	223c      	movs	r2, #60	@ 0x3c
 80033be:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 80033c0:	e01d      	b.n	80033fe <removeface+0x76>
		if(Rx_Buffer[0] == 'T'){
 80033c2:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <removeface+0x90>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b25b      	sxtb	r3, r3
 80033c8:	2b54      	cmp	r3, #84	@ 0x54
 80033ca:	d109      	bne.n	80033e0 <removeface+0x58>
			CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 80033cc:	4a15      	ldr	r2, [pc, #84]	@ (8003424 <removeface+0x9c>)
 80033ce:	4919      	ldr	r1, [pc, #100]	@ (8003434 <removeface+0xac>)
 80033d0:	4816      	ldr	r0, [pc, #88]	@ (800342c <removeface+0xa4>)
 80033d2:	f7fd f813 	bl	80003fc <CLCD_I2C_Display>
			HAL_Delay(2000);
 80033d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033da:	f000 fe15 	bl	8004008 <HAL_Delay>
			break;
 80033de:	e012      	b.n	8003406 <removeface+0x7e>
		}
		else if(Rx_Buffer[0] == 'F'){
 80033e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <removeface+0x90>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b25b      	sxtb	r3, r3
 80033e6:	2b46      	cmp	r3, #70	@ 0x46
 80033e8:	d109      	bne.n	80033fe <removeface+0x76>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKOWN", "");
 80033ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003424 <removeface+0x9c>)
 80033ec:	4912      	ldr	r1, [pc, #72]	@ (8003438 <removeface+0xb0>)
 80033ee:	480f      	ldr	r0, [pc, #60]	@ (800342c <removeface+0xa4>)
 80033f0:	f7fd f804 	bl	80003fc <CLCD_I2C_Display>
			HAL_Delay(2000);
 80033f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033f8:	f000 fe06 	bl	8004008 <HAL_Delay>
			break;
 80033fc:	e003      	b.n	8003406 <removeface+0x7e>
	while(exitmenu != 0){
 80033fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <removeface+0xa8>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1dd      	bne.n	80033c2 <removeface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003406:	2280      	movs	r2, #128	@ 0x80
 8003408:	2100      	movs	r1, #0
 800340a:	4803      	ldr	r0, [pc, #12]	@ (8003418 <removeface+0x90>)
 800340c:	f009 fc6c 	bl	800cce8 <memset>
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000350 	.word	0x20000350
 800341c:	0800de98 	.word	0x0800de98
 8003420:	200003d0 	.word	0x200003d0
 8003424:	0800d630 	.word	0x0800d630
 8003428:	0800dc48 	.word	0x0800dc48
 800342c:	200003d8 	.word	0x200003d8
 8003430:	20000020 	.word	0x20000020
 8003434:	0800dea0 	.word	0x0800dea0
 8003438:	0800deb0 	.word	0x0800deb0

0800343c <checkfaceid>:
uint8_t checkfaceid(uint8_t key){
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003446:	2280      	movs	r2, #128	@ 0x80
 8003448:	2100      	movs	r1, #0
 800344a:	4817      	ldr	r0, [pc, #92]	@ (80034a8 <checkfaceid+0x6c>)
 800344c:	f009 fc4c 	bl	800cce8 <memset>
	sprintf(Tx_Buffer , "Che.%d", key );
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	461a      	mov	r2, r3
 8003454:	4915      	ldr	r1, [pc, #84]	@ (80034ac <checkfaceid+0x70>)
 8003456:	4816      	ldr	r0, [pc, #88]	@ (80034b0 <checkfaceid+0x74>)
 8003458:	f009 fc26 	bl	800cca8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 800345c:	2105      	movs	r1, #5
 800345e:	4814      	ldr	r0, [pc, #80]	@ (80034b0 <checkfaceid+0x74>)
 8003460:	f009 f810 	bl	800c484 <CDC_Transmit_FS>
	while(Rx_Buffer[0] ==0){
 8003464:	e000      	b.n	8003468 <checkfaceid+0x2c>
			continue;
 8003466:	bf00      	nop
	while(Rx_Buffer[0] ==0){
 8003468:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <checkfaceid+0x6c>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b25b      	sxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f9      	beq.n	8003466 <checkfaceid+0x2a>
		}
//	CLCD_I2C_Display(&LCD1, Rx_Buffer, "");
	HAL_Delay(1000);
 8003472:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003476:	f000 fdc7 	bl	8004008 <HAL_Delay>
	if(Rx_Buffer[0] == 'T'){
 800347a:	4b0b      	ldr	r3, [pc, #44]	@ (80034a8 <checkfaceid+0x6c>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	b25b      	sxtb	r3, r3
 8003480:	2b54      	cmp	r3, #84	@ 0x54
 8003482:	d101      	bne.n	8003488 <checkfaceid+0x4c>
		return key;
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	e00b      	b.n	80034a0 <checkfaceid+0x64>
	}else if(Rx_Buffer[0] == 'F'){
 8003488:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <checkfaceid+0x6c>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b25b      	sxtb	r3, r3
 800348e:	2b46      	cmp	r3, #70	@ 0x46
 8003490:	d101      	bne.n	8003496 <checkfaceid+0x5a>
		return 0;
 8003492:	2300      	movs	r3, #0
 8003494:	e004      	b.n	80034a0 <checkfaceid+0x64>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003496:	2280      	movs	r2, #128	@ 0x80
 8003498:	2100      	movs	r1, #0
 800349a:	4803      	ldr	r0, [pc, #12]	@ (80034a8 <checkfaceid+0x6c>)
 800349c:	f009 fc24 	bl	800cce8 <memset>
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000350 	.word	0x20000350
 80034ac:	0800dec0 	.word	0x0800dec0
 80034b0:	200003d0 	.word	0x200003d0

080034b4 <enter_password>:

void enter_password(char *password) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 6; i++) {
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e019      	b.n	80034f6 <enter_password+0x42>
        char key;
        do {
            key = KeyPad_WaitForKeyGetChar(10);
 80034c2:	200a      	movs	r0, #10
 80034c4:	f7fd f8f4 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80034c8:	4603      	mov	r3, r0
 80034ca:	72fb      	strb	r3, [r7, #11]
        } while (key == 0 || (key < '0' || key > '9')); // Only accept numeric keys
 80034cc:	7afb      	ldrb	r3, [r7, #11]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f7      	beq.n	80034c2 <enter_password+0xe>
 80034d2:	7afb      	ldrb	r3, [r7, #11]
 80034d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80034d6:	d9f4      	bls.n	80034c2 <enter_password+0xe>
 80034d8:	7afb      	ldrb	r3, [r7, #11]
 80034da:	2b39      	cmp	r3, #57	@ 0x39
 80034dc:	d8f1      	bhi.n	80034c2 <enter_password+0xe>
        password[i] = key;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	7afa      	ldrb	r2, [r7, #11]
 80034e6:	701a      	strb	r2, [r3, #0]
        CLCD_I2C_WriteChar(&LCD1, '*');
 80034e8:	212a      	movs	r1, #42	@ 0x2a
 80034ea:	4808      	ldr	r0, [pc, #32]	@ (800350c <enter_password+0x58>)
 80034ec:	f7fc ff4f 	bl	800038e <CLCD_I2C_WriteChar>
    for (int i = 0; i < 6; i++) {
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3301      	adds	r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	dde2      	ble.n	80034c2 <enter_password+0xe>
    }
    password[6] = '\0';
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3306      	adds	r3, #6
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	200003d8 	.word	0x200003d8

08003510 <change_password>:

void change_password(void) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
    char new_password[7] = {0};
 8003516:	2300      	movs	r3, #0
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	2100      	movs	r1, #0
 800351e:	460a      	mov	r2, r1
 8003520:	801a      	strh	r2, [r3, #0]
 8003522:	460a      	mov	r2, r1
 8003524:	709a      	strb	r2, [r3, #2]
    CLCD_I2C_Display(&LCD1, "NEW PASSWORD", "");
 8003526:	4a11      	ldr	r2, [pc, #68]	@ (800356c <change_password+0x5c>)
 8003528:	4911      	ldr	r1, [pc, #68]	@ (8003570 <change_password+0x60>)
 800352a:	4812      	ldr	r0, [pc, #72]	@ (8003574 <change_password+0x64>)
 800352c:	f7fc ff66 	bl	80003fc <CLCD_I2C_Display>
    enter_password(new_password);
 8003530:	463b      	mov	r3, r7
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff ffbe 	bl	80034b4 <enter_password>
    // Erase the flash memory at the password address before writing the new password
    Flash_Erase(StartAddressPassword);
 8003538:	480f      	ldr	r0, [pc, #60]	@ (8003578 <change_password+0x68>)
 800353a:	f7fd fb13 	bl	8000b64 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)new_password, 6);
 800353e:	463b      	mov	r3, r7
 8003540:	2206      	movs	r2, #6
 8003542:	4619      	mov	r1, r3
 8003544:	480c      	ldr	r0, [pc, #48]	@ (8003578 <change_password+0x68>)
 8003546:	f7fd fb41 	bl	8000bcc <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, "PASSWORD CHANGED", "");
 800354a:	4a08      	ldr	r2, [pc, #32]	@ (800356c <change_password+0x5c>)
 800354c:	490b      	ldr	r1, [pc, #44]	@ (800357c <change_password+0x6c>)
 800354e:	4809      	ldr	r0, [pc, #36]	@ (8003574 <change_password+0x64>)
 8003550:	f7fc ff54 	bl	80003fc <CLCD_I2C_Display>
    HAL_Delay(2000);
 8003554:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003558:	f000 fd56 	bl	8004008 <HAL_Delay>
    exitmenu = 0;
 800355c:	4b08      	ldr	r3, [pc, #32]	@ (8003580 <change_password+0x70>)
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	0800d630 	.word	0x0800d630
 8003570:	0800dec8 	.word	0x0800dec8
 8003574:	200003d8 	.word	0x200003d8
 8003578:	0800f400 	.word	0x0800f400
 800357c:	0800ded8 	.word	0x0800ded8
 8003580:	20000020 	.word	0x20000020

08003584 <check_password>:

uint8_t check_password(char *password) {
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
    char stored_password[7] = {0};
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	2100      	movs	r1, #0
 8003596:	460a      	mov	r2, r1
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	460a      	mov	r2, r1
 800359c:	709a      	strb	r2, [r3, #2]
    Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 800359e:	f107 0308 	add.w	r3, r7, #8
 80035a2:	2206      	movs	r2, #6
 80035a4:	4619      	mov	r1, r3
 80035a6:	480a      	ldr	r0, [pc, #40]	@ (80035d0 <check_password+0x4c>)
 80035a8:	f7fd fb58 	bl	8000c5c <Flash_Read_Array>
    stored_password[6] = '\0';
 80035ac:	2300      	movs	r3, #0
 80035ae:	73bb      	strb	r3, [r7, #14]
    return strcmp(password, stored_password) == 0;
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	4619      	mov	r1, r3
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fc fdc8 	bl	800014c <strcmp>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	0800f400 	.word	0x0800f400

080035d4 <set_default_password>:

void set_default_password(void) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
    char default_password[6] = "111111";
 80035da:	4a10      	ldr	r2, [pc, #64]	@ (800361c <set_default_password+0x48>)
 80035dc:	463b      	mov	r3, r7
 80035de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035e2:	6018      	str	r0, [r3, #0]
 80035e4:	3304      	adds	r3, #4
 80035e6:	8019      	strh	r1, [r3, #0]
    // Erase the flash memory at the password address before writing the default password
    Flash_Erase(StartAddressPassword);
 80035e8:	480d      	ldr	r0, [pc, #52]	@ (8003620 <set_default_password+0x4c>)
 80035ea:	f7fd fabb 	bl	8000b64 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)default_password, 6);
 80035ee:	463b      	mov	r3, r7
 80035f0:	2206      	movs	r2, #6
 80035f2:	4619      	mov	r1, r3
 80035f4:	480a      	ldr	r0, [pc, #40]	@ (8003620 <set_default_password+0x4c>)
 80035f6:	f7fd fae9 	bl	8000bcc <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, "RESET PASSWORD", "SUCCESSFULLY");
 80035fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <set_default_password+0x50>)
 80035fc:	490a      	ldr	r1, [pc, #40]	@ (8003628 <set_default_password+0x54>)
 80035fe:	480b      	ldr	r0, [pc, #44]	@ (800362c <set_default_password+0x58>)
 8003600:	f7fc fefc 	bl	80003fc <CLCD_I2C_Display>
    HAL_Delay(2000);
 8003604:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003608:	f000 fcfe 	bl	8004008 <HAL_Delay>
    exitmenu=0;
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <set_default_password+0x5c>)
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	0800df0c 	.word	0x0800df0c
 8003620:	0800f400 	.word	0x0800f400
 8003624:	0800deec 	.word	0x0800deec
 8003628:	0800defc 	.word	0x0800defc
 800362c:	200003d8 	.word	0x200003d8
 8003630:	20000020 	.word	0x20000020

08003634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003638:	b672      	cpsid	i
}
 800363a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <Error_Handler+0x8>

08003640 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af02      	add	r7, sp, #8
 8003646:	4603      	mov	r3, r0
 8003648:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 800364e:	bf00      	nop
 8003650:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <TM_SPI_Send+0x4c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b02      	cmp	r3, #2
 800365c:	d1f8      	bne.n	8003650 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 800365e:	f107 0208 	add.w	r2, r7, #8
 8003662:	f107 010c 	add.w	r1, r7, #12
 8003666:	230a      	movs	r3, #10
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2301      	movs	r3, #1
 800366c:	4807      	ldr	r0, [pc, #28]	@ (800368c <TM_SPI_Send+0x4c>)
 800366e:	f003 feff 	bl	8007470 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8003672:	bf00      	nop
 8003674:	4b05      	ldr	r3, [pc, #20]	@ (800368c <TM_SPI_Send+0x4c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b80      	cmp	r3, #128	@ 0x80
 8003680:	d0f8      	beq.n	8003674 <TM_SPI_Send+0x34>
	return data_re[0];
 8003682:	7a3b      	ldrb	r3, [r7, #8]

}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000270 	.word	0x20000270

08003690 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8003694:	f000 f8d5 	bl	8003842 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003698:	218d      	movs	r1, #141	@ 0x8d
 800369a:	202a      	movs	r0, #42	@ 0x2a
 800369c:	f000 f836 	bl	800370c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80036a0:	213e      	movs	r1, #62	@ 0x3e
 80036a2:	202b      	movs	r0, #43	@ 0x2b
 80036a4:	f000 f832 	bl	800370c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 80036a8:	211e      	movs	r1, #30
 80036aa:	202d      	movs	r0, #45	@ 0x2d
 80036ac:	f000 f82e 	bl	800370c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80036b0:	2100      	movs	r1, #0
 80036b2:	202c      	movs	r0, #44	@ 0x2c
 80036b4:	f000 f82a 	bl	800370c <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 80036b8:	2170      	movs	r1, #112	@ 0x70
 80036ba:	2026      	movs	r0, #38	@ 0x26
 80036bc:	f000 f826 	bl	800370c <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80036c0:	2140      	movs	r1, #64	@ 0x40
 80036c2:	2015      	movs	r0, #21
 80036c4:	f000 f822 	bl	800370c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80036c8:	213d      	movs	r1, #61	@ 0x3d
 80036ca:	2011      	movs	r0, #17
 80036cc:	f000 f81e 	bl	800370c <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 80036d0:	f000 f8a2 	bl	8003818 <TM_MFRC522_AntennaOn>
}
 80036d4:	bf00      	nop
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	2026      	movs	r0, #38	@ 0x26
 80036e4:	f000 f8b5 	bl	8003852 <TM_MFRC522_Request>
 80036e8:	4603      	mov	r3, r0
 80036ea:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f9a1 	bl	8003a3a <TM_MFRC522_Anticoll>
 80036f8:	4603      	mov	r3, r0
 80036fa:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 80036fc:	f000 fa23 	bl	8003b46 <TM_MFRC522_Halt>
	return status;
 8003700:	7bfb      	ldrb	r3, [r7, #15]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	460a      	mov	r2, r1
 8003716:	71fb      	strb	r3, [r7, #7]
 8003718:	4613      	mov	r3, r2
 800371a:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 800371c:	2200      	movs	r2, #0
 800371e:	2110      	movs	r1, #16
 8003720:	480c      	ldr	r0, [pc, #48]	@ (8003754 <TM_MFRC522_WriteRegister+0x48>)
 8003722:	f001 f93e 	bl	80049a2 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003730:	b2db      	uxtb	r3, r3
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff ff84 	bl	8003640 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003738:	79bb      	ldrb	r3, [r7, #6]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff ff80 	bl	8003640 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003740:	2201      	movs	r2, #1
 8003742:	2110      	movs	r1, #16
 8003744:	4803      	ldr	r0, [pc, #12]	@ (8003754 <TM_MFRC522_WriteRegister+0x48>)
 8003746:	f001 f92c 	bl	80049a2 <HAL_GPIO_WritePin>
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40010800 	.word	0x40010800

08003758 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8003762:	2200      	movs	r2, #0
 8003764:	2110      	movs	r1, #16
 8003766:	480f      	ldr	r0, [pc, #60]	@ (80037a4 <TM_MFRC522_ReadRegister+0x4c>)
 8003768:	f001 f91b 	bl	80049a2 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	b25b      	sxtb	r3, r3
 8003772:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003776:	b25b      	sxtb	r3, r3
 8003778:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800377c:	b25b      	sxtb	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff5d 	bl	8003640 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8003786:	2000      	movs	r0, #0
 8003788:	f7ff ff5a 	bl	8003640 <TM_SPI_Send>
 800378c:	4603      	mov	r3, r0
 800378e:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003790:	2201      	movs	r2, #1
 8003792:	2110      	movs	r1, #16
 8003794:	4803      	ldr	r0, [pc, #12]	@ (80037a4 <TM_MFRC522_ReadRegister+0x4c>)
 8003796:	f001 f904 	bl	80049a2 <HAL_GPIO_WritePin>

	return val;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40010800 	.word	0x40010800

080037a8 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	460a      	mov	r2, r1
 80037b2:	71fb      	strb	r3, [r7, #7]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ffcc 	bl	8003758 <TM_MFRC522_ReadRegister>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	79bb      	ldrb	r3, [r7, #6]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ff9c 	bl	800370c <TM_MFRC522_WriteRegister>
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	460a      	mov	r2, r1
 80037e6:	71fb      	strb	r3, [r7, #7]
 80037e8:	4613      	mov	r3, r2
 80037ea:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff ffb2 	bl	8003758 <TM_MFRC522_ReadRegister>
 80037f4:	4603      	mov	r3, r0
 80037f6:	b25a      	sxtb	r2, r3
 80037f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	b25b      	sxtb	r3, r3
 8003800:	4013      	ands	r3, r2
 8003802:	b25b      	sxtb	r3, r3
 8003804:	b2da      	uxtb	r2, r3
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ff7e 	bl	800370c <TM_MFRC522_WriteRegister>
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800381e:	2014      	movs	r0, #20
 8003820:	f7ff ff9a 	bl	8003758 <TM_MFRC522_ReadRegister>
 8003824:	4603      	mov	r3, r0
 8003826:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003832:	2103      	movs	r1, #3
 8003834:	2014      	movs	r0, #20
 8003836:	f7ff ffb7 	bl	80037a8 <TM_MFRC522_SetBitMask>
	}
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003842:	b580      	push	{r7, lr}
 8003844:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8003846:	210f      	movs	r1, #15
 8003848:	2001      	movs	r0, #1
 800384a:	f7ff ff5f 	bl	800370c <TM_MFRC522_WriteRegister>
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}

08003852 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003852:	b580      	push	{r7, lr}
 8003854:	b086      	sub	sp, #24
 8003856:	af02      	add	r7, sp, #8
 8003858:	4603      	mov	r3, r0
 800385a:	6039      	str	r1, [r7, #0]
 800385c:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 800385e:	2107      	movs	r1, #7
 8003860:	200d      	movs	r0, #13
 8003862:	f7ff ff53 	bl	800370c <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	79fa      	ldrb	r2, [r7, #7]
 800386a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2201      	movs	r2, #1
 8003876:	6839      	ldr	r1, [r7, #0]
 8003878:	200c      	movs	r0, #12
 800387a:	f000 f80f 	bl	800389c <TM_MFRC522_ToCard>
 800387e:	4603      	mov	r3, r0
 8003880:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <TM_MFRC522_Request+0x3c>
 8003888:	89bb      	ldrh	r3, [r7, #12]
 800388a:	2b10      	cmp	r3, #16
 800388c:	d001      	beq.n	8003892 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 800388e:	2302      	movs	r3, #2
 8003890:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	4603      	mov	r3, r0
 80038a8:	73fb      	strb	r3, [r7, #15]
 80038aa:	4613      	mov	r3, r2
 80038ac:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 80038ae:	2302      	movs	r3, #2
 80038b0:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80038b6:	2300      	movs	r3, #0
 80038b8:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	d006      	beq.n	80038ce <TM_MFRC522_ToCard+0x32>
 80038c0:	2b0e      	cmp	r3, #14
 80038c2:	d109      	bne.n	80038d8 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80038c4:	2312      	movs	r3, #18
 80038c6:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80038c8:	2310      	movs	r3, #16
 80038ca:	757b      	strb	r3, [r7, #21]
			break;
 80038cc:	e005      	b.n	80038da <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80038ce:	2377      	movs	r3, #119	@ 0x77
 80038d0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80038d2:	2330      	movs	r3, #48	@ 0x30
 80038d4:	757b      	strb	r3, [r7, #21]
			break;
 80038d6:	e000      	b.n	80038da <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80038d8:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80038da:	7dbb      	ldrb	r3, [r7, #22]
 80038dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4619      	mov	r1, r3
 80038e4:	2002      	movs	r0, #2
 80038e6:	f7ff ff11 	bl	800370c <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80038ea:	2180      	movs	r1, #128	@ 0x80
 80038ec:	2004      	movs	r0, #4
 80038ee:	f7ff ff75 	bl	80037dc <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80038f2:	2180      	movs	r1, #128	@ 0x80
 80038f4:	200a      	movs	r0, #10
 80038f6:	f7ff ff57 	bl	80037a8 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80038fa:	2100      	movs	r1, #0
 80038fc:	2001      	movs	r0, #1
 80038fe:	f7ff ff05 	bl	800370c <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8003902:	2300      	movs	r3, #0
 8003904:	827b      	strh	r3, [r7, #18]
 8003906:	e00a      	b.n	800391e <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8003908:	8a7b      	ldrh	r3, [r7, #18]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	4413      	add	r3, r2
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	4619      	mov	r1, r3
 8003912:	2009      	movs	r0, #9
 8003914:	f7ff fefa 	bl	800370c <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8003918:	8a7b      	ldrh	r3, [r7, #18]
 800391a:	3301      	adds	r3, #1
 800391c:	827b      	strh	r3, [r7, #18]
 800391e:	7bbb      	ldrb	r3, [r7, #14]
 8003920:	b29b      	uxth	r3, r3
 8003922:	8a7a      	ldrh	r2, [r7, #18]
 8003924:	429a      	cmp	r2, r3
 8003926:	d3ef      	bcc.n	8003908 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	4619      	mov	r1, r3
 800392c:	2001      	movs	r0, #1
 800392e:	f7ff feed 	bl	800370c <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b0c      	cmp	r3, #12
 8003936:	d103      	bne.n	8003940 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003938:	2180      	movs	r1, #128	@ 0x80
 800393a:	200d      	movs	r0, #13
 800393c:	f7ff ff34 	bl	80037a8 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003940:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003944:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8003946:	2004      	movs	r0, #4
 8003948:	f7ff ff06 	bl	8003758 <TM_MFRC522_ReadRegister>
 800394c:	4603      	mov	r3, r0
 800394e:	753b      	strb	r3, [r7, #20]
		i--;
 8003950:	8a7b      	ldrh	r3, [r7, #18]
 8003952:	3b01      	subs	r3, #1
 8003954:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003956:	8a7b      	ldrh	r3, [r7, #18]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <TM_MFRC522_ToCard+0xd6>
 800395c:	7d3b      	ldrb	r3, [r7, #20]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d105      	bne.n	8003972 <TM_MFRC522_ToCard+0xd6>
 8003966:	7d3a      	ldrb	r2, [r7, #20]
 8003968:	7d7b      	ldrb	r3, [r7, #21]
 800396a:	4013      	ands	r3, r2
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0e9      	beq.n	8003946 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8003972:	2180      	movs	r1, #128	@ 0x80
 8003974:	200d      	movs	r0, #13
 8003976:	f7ff ff31 	bl	80037dc <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 800397a:	8a7b      	ldrh	r3, [r7, #18]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d057      	beq.n	8003a30 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003980:	2006      	movs	r0, #6
 8003982:	f7ff fee9 	bl	8003758 <TM_MFRC522_ReadRegister>
 8003986:	4603      	mov	r3, r0
 8003988:	f003 031b 	and.w	r3, r3, #27
 800398c:	2b00      	cmp	r3, #0
 800398e:	d14d      	bne.n	8003a2c <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 8003994:	7d3a      	ldrb	r2, [r7, #20]
 8003996:	7dbb      	ldrb	r3, [r7, #22]
 8003998:	4013      	ands	r3, r2
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b0c      	cmp	r3, #12
 80039ac:	d140      	bne.n	8003a30 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80039ae:	200a      	movs	r0, #10
 80039b0:	f7ff fed2 	bl	8003758 <TM_MFRC522_ReadRegister>
 80039b4:	4603      	mov	r3, r0
 80039b6:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80039b8:	200c      	movs	r0, #12
 80039ba:	f7ff fecd 	bl	8003758 <TM_MFRC522_ReadRegister>
 80039be:	4603      	mov	r3, r0
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 80039c6:	7c7b      	ldrb	r3, [r7, #17]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00b      	beq.n	80039e4 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 80039cc:	7d3b      	ldrb	r3, [r7, #20]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	7c7b      	ldrb	r3, [r7, #17]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	4413      	add	r3, r2
 80039dc:	b29a      	uxth	r2, r3
 80039de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e0:	801a      	strh	r2, [r3, #0]
 80039e2:	e005      	b.n	80039f0 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 80039e4:	7d3b      	ldrb	r3, [r7, #20]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ee:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 80039f0:	7d3b      	ldrb	r3, [r7, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <TM_MFRC522_ToCard+0x15e>
					n = 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 80039fa:	7d3b      	ldrb	r3, [r7, #20]
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d901      	bls.n	8003a04 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8003a00:	2310      	movs	r3, #16
 8003a02:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8003a04:	2300      	movs	r3, #0
 8003a06:	827b      	strh	r3, [r7, #18]
 8003a08:	e00a      	b.n	8003a20 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8003a0a:	8a7b      	ldrh	r3, [r7, #18]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	18d4      	adds	r4, r2, r3
 8003a10:	2009      	movs	r0, #9
 8003a12:	f7ff fea1 	bl	8003758 <TM_MFRC522_ReadRegister>
 8003a16:	4603      	mov	r3, r0
 8003a18:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8003a1a:	8a7b      	ldrh	r3, [r7, #18]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	827b      	strh	r3, [r7, #18]
 8003a20:	7d3b      	ldrb	r3, [r7, #20]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	8a7a      	ldrh	r2, [r7, #18]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d3ef      	bcc.n	8003a0a <TM_MFRC522_ToCard+0x16e>
 8003a2a:	e001      	b.n	8003a30 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd90      	pop	{r4, r7, pc}

08003a3a <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af02      	add	r7, sp, #8
 8003a40:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8003a46:	2100      	movs	r1, #0
 8003a48:	200d      	movs	r0, #13
 8003a4a:	f7ff fe5f 	bl	800370c <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2293      	movs	r2, #147	@ 0x93
 8003a52:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3301      	adds	r3, #1
 8003a58:	2220      	movs	r2, #32
 8003a5a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003a5c:	f107 030a 	add.w	r3, r7, #10
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	200c      	movs	r0, #12
 8003a6a:	f7ff ff17 	bl	800389c <TM_MFRC522_ToCard>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d118      	bne.n	8003aaa <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8003a78:	2300      	movs	r3, #0
 8003a7a:	73bb      	strb	r3, [r7, #14]
 8003a7c:	e009      	b.n	8003a92 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8003a7e:	7bbb      	ldrb	r3, [r7, #14]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	7b7b      	ldrb	r3, [r7, #13]
 8003a88:	4053      	eors	r3, r2
 8003a8a:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8003a8c:	7bbb      	ldrb	r3, [r7, #14]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	73bb      	strb	r3, [r7, #14]
 8003a92:	7bbb      	ldrb	r3, [r7, #14]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d9f2      	bls.n	8003a7e <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	7b7a      	ldrb	r2, [r7, #13]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d001      	beq.n	8003aaa <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8003ab4:	b590      	push	{r4, r7, lr}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	460b      	mov	r3, r1
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8003ac2:	2104      	movs	r1, #4
 8003ac4:	2005      	movs	r0, #5
 8003ac6:	f7ff fe89 	bl	80037dc <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8003aca:	2180      	movs	r1, #128	@ 0x80
 8003acc:	200a      	movs	r0, #10
 8003ace:	f7ff fe6b 	bl	80037a8 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	75fb      	strb	r3, [r7, #23]
 8003ad6:	e00a      	b.n	8003aee <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	2009      	movs	r0, #9
 8003ae4:	f7ff fe12 	bl	800370c <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	3301      	adds	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
 8003aee:	7dfa      	ldrb	r2, [r7, #23]
 8003af0:	7afb      	ldrb	r3, [r7, #11]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d3f0      	bcc.n	8003ad8 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8003af6:	2103      	movs	r1, #3
 8003af8:	2001      	movs	r0, #1
 8003afa:	f7ff fe07 	bl	800370c <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8003afe:	23ff      	movs	r3, #255	@ 0xff
 8003b00:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8003b02:	2005      	movs	r0, #5
 8003b04:	f7ff fe28 	bl	8003758 <TM_MFRC522_ReadRegister>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	75bb      	strb	r3, [r7, #22]
		i--;
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <TM_MFRC522_CalculateCRC+0x6e>
 8003b18:	7dbb      	ldrb	r3, [r7, #22]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0ef      	beq.n	8003b02 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8003b22:	2022      	movs	r0, #34	@ 0x22
 8003b24:	f7ff fe18 	bl	8003758 <TM_MFRC522_ReadRegister>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	1c5c      	adds	r4, r3, #1
 8003b34:	2021      	movs	r0, #33	@ 0x21
 8003b36:	f7ff fe0f 	bl	8003758 <TM_MFRC522_ReadRegister>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	7023      	strb	r3, [r4, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd90      	pop	{r4, r7, pc}

08003b46 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8003b4c:	2350      	movs	r3, #80	@ 0x50
 8003b4e:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003b54:	463b      	mov	r3, r7
 8003b56:	1c9a      	adds	r2, r3, #2
 8003b58:	463b      	mov	r3, r7
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff ffa9 	bl	8003ab4 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8003b62:	463a      	mov	r2, r7
 8003b64:	4639      	mov	r1, r7
 8003b66:	1dbb      	adds	r3, r7, #6
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	200c      	movs	r0, #12
 8003b70:	f7ff fe94 	bl	800389c <TM_MFRC522_ToCard>



}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b82:	4b15      	ldr	r3, [pc, #84]	@ (8003bd8 <HAL_MspInit+0x5c>)
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	4a14      	ldr	r2, [pc, #80]	@ (8003bd8 <HAL_MspInit+0x5c>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6193      	str	r3, [r2, #24]
 8003b8e:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <HAL_MspInit+0x5c>)
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <HAL_MspInit+0x5c>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003bd8 <HAL_MspInit+0x5c>)
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ba4:	61d3      	str	r3, [r2, #28]
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <HAL_MspInit+0x5c>)
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bdc <HAL_MspInit+0x60>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	4a04      	ldr	r2, [pc, #16]	@ (8003bdc <HAL_MspInit+0x60>)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40010000 	.word	0x40010000

08003be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	f107 0310 	add.w	r3, r7, #16
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a16      	ldr	r2, [pc, #88]	@ (8003c54 <HAL_I2C_MspInit+0x74>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d124      	bne.n	8003c4a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c00:	4b15      	ldr	r3, [pc, #84]	@ (8003c58 <HAL_I2C_MspInit+0x78>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	4a14      	ldr	r2, [pc, #80]	@ (8003c58 <HAL_I2C_MspInit+0x78>)
 8003c06:	f043 0308 	orr.w	r3, r3, #8
 8003c0a:	6193      	str	r3, [r2, #24]
 8003c0c:	4b12      	ldr	r3, [pc, #72]	@ (8003c58 <HAL_I2C_MspInit+0x78>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c1e:	2312      	movs	r3, #18
 8003c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c22:	2303      	movs	r3, #3
 8003c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c26:	f107 0310 	add.w	r3, r7, #16
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	480b      	ldr	r0, [pc, #44]	@ (8003c5c <HAL_I2C_MspInit+0x7c>)
 8003c2e:	f000 fd1d 	bl	800466c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003c32:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <HAL_I2C_MspInit+0x78>)
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	4a08      	ldr	r2, [pc, #32]	@ (8003c58 <HAL_I2C_MspInit+0x78>)
 8003c38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c3c:	61d3      	str	r3, [r2, #28]
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_I2C_MspInit+0x78>)
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003c4a:	bf00      	nop
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40005800 	.word	0x40005800
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40010c00 	.word	0x40010c00

08003c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c68:	f107 0310 	add.w	r3, r7, #16
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce8 <HAL_SPI_MspInit+0x88>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d12f      	bne.n	8003ce0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c80:	4b1a      	ldr	r3, [pc, #104]	@ (8003cec <HAL_SPI_MspInit+0x8c>)
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	4a19      	ldr	r2, [pc, #100]	@ (8003cec <HAL_SPI_MspInit+0x8c>)
 8003c86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c8a:	6193      	str	r3, [r2, #24]
 8003c8c:	4b17      	ldr	r3, [pc, #92]	@ (8003cec <HAL_SPI_MspInit+0x8c>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c98:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <HAL_SPI_MspInit+0x8c>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <HAL_SPI_MspInit+0x8c>)
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	6193      	str	r3, [r2, #24]
 8003ca4:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <HAL_SPI_MspInit+0x8c>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003cb0:	23a0      	movs	r3, #160	@ 0xa0
 8003cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cbc:	f107 0310 	add.w	r3, r7, #16
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	480b      	ldr	r0, [pc, #44]	@ (8003cf0 <HAL_SPI_MspInit+0x90>)
 8003cc4:	f000 fcd2 	bl	800466c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003cc8:	2340      	movs	r3, #64	@ 0x40
 8003cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd4:	f107 0310 	add.w	r3, r7, #16
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4805      	ldr	r0, [pc, #20]	@ (8003cf0 <HAL_SPI_MspInit+0x90>)
 8003cdc:	f000 fcc6 	bl	800466c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003ce0:	bf00      	nop
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40013000 	.word	0x40013000
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40010800 	.word	0x40010800

08003cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d04:	d113      	bne.n	8003d2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d06:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <HAL_TIM_Base_MspInit+0x44>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8003d38 <HAL_TIM_Base_MspInit+0x44>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	61d3      	str	r3, [r2, #28]
 8003d12:	4b09      	ldr	r3, [pc, #36]	@ (8003d38 <HAL_TIM_Base_MspInit+0x44>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2100      	movs	r1, #0
 8003d22:	201c      	movs	r0, #28
 8003d24:	f000 fa6b 	bl	80041fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d28:	201c      	movs	r0, #28
 8003d2a:	f000 fa84 	bl	8004236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000

08003d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	@ 0x28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f107 0314 	add.w	r3, r7, #20
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a22      	ldr	r2, [pc, #136]	@ (8003de0 <HAL_UART_MspInit+0xa4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d13d      	bne.n	8003dd8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d5c:	4b21      	ldr	r3, [pc, #132]	@ (8003de4 <HAL_UART_MspInit+0xa8>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4a20      	ldr	r2, [pc, #128]	@ (8003de4 <HAL_UART_MspInit+0xa8>)
 8003d62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d66:	6193      	str	r3, [r2, #24]
 8003d68:	4b1e      	ldr	r3, [pc, #120]	@ (8003de4 <HAL_UART_MspInit+0xa8>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d74:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <HAL_UART_MspInit+0xa8>)
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	4a1a      	ldr	r2, [pc, #104]	@ (8003de4 <HAL_UART_MspInit+0xa8>)
 8003d7a:	f043 0308 	orr.w	r3, r3, #8
 8003d7e:	6193      	str	r3, [r2, #24]
 8003d80:	4b18      	ldr	r3, [pc, #96]	@ (8003de4 <HAL_UART_MspInit+0xa8>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d8c:	2340      	movs	r3, #64	@ 0x40
 8003d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d90:	2302      	movs	r3, #2
 8003d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d94:	2303      	movs	r3, #3
 8003d96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4812      	ldr	r0, [pc, #72]	@ (8003de8 <HAL_UART_MspInit+0xac>)
 8003da0:	f000 fc64 	bl	800466c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003da4:	2380      	movs	r3, #128	@ 0x80
 8003da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	4619      	mov	r1, r3
 8003db6:	480c      	ldr	r0, [pc, #48]	@ (8003de8 <HAL_UART_MspInit+0xac>)
 8003db8:	f000 fc58 	bl	800466c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <HAL_UART_MspInit+0xb0>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	f043 0304 	orr.w	r3, r3, #4
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd2:	4a06      	ldr	r2, [pc, #24]	@ (8003dec <HAL_UART_MspInit+0xb0>)
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003dd8:	bf00      	nop
 8003dda:	3728      	adds	r7, #40	@ 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40013800 	.word	0x40013800
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40010c00 	.word	0x40010c00
 8003dec:	40010000 	.word	0x40010000

08003df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003df4:	bf00      	nop
 8003df6:	e7fd      	b.n	8003df4 <NMI_Handler+0x4>

08003df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dfc:	bf00      	nop
 8003dfe:	e7fd      	b.n	8003dfc <HardFault_Handler+0x4>

08003e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e04:	bf00      	nop
 8003e06:	e7fd      	b.n	8003e04 <MemManage_Handler+0x4>

08003e08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e0c:	bf00      	nop
 8003e0e:	e7fd      	b.n	8003e0c <BusFault_Handler+0x4>

08003e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e14:	bf00      	nop
 8003e16:	e7fd      	b.n	8003e14 <UsageFault_Handler+0x4>

08003e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e40:	f000 f8c6 	bl	8003fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e44:	bf00      	nop
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003e4c:	4802      	ldr	r0, [pc, #8]	@ (8003e58 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003e4e:	f001 fb5e 	bl	800550e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200010d0 	.word	0x200010d0

08003e5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003e60:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003e64:	f000 fdb6 	bl	80049d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e70:	4802      	ldr	r0, [pc, #8]	@ (8003e7c <TIM2_IRQHandler+0x10>)
 8003e72:	f003 fde7 	bl	8007a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	200002c8 	.word	0x200002c8

08003e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e88:	4a14      	ldr	r2, [pc, #80]	@ (8003edc <_sbrk+0x5c>)
 8003e8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ee0 <_sbrk+0x60>)
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e94:	4b13      	ldr	r3, [pc, #76]	@ (8003ee4 <_sbrk+0x64>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ee4 <_sbrk+0x64>)
 8003e9e:	4a12      	ldr	r2, [pc, #72]	@ (8003ee8 <_sbrk+0x68>)
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ea2:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <_sbrk+0x64>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d207      	bcs.n	8003ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eb0:	f008 ff22 	bl	800ccf8 <__errno>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	e009      	b.n	8003ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ec0:	4b08      	ldr	r3, [pc, #32]	@ (8003ee4 <_sbrk+0x64>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ec6:	4b07      	ldr	r3, [pc, #28]	@ (8003ee4 <_sbrk+0x64>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	4a05      	ldr	r2, [pc, #20]	@ (8003ee4 <_sbrk+0x64>)
 8003ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20005000 	.word	0x20005000
 8003ee0:	00000400 	.word	0x00000400
 8003ee4:	2000040c 	.word	0x2000040c
 8003ee8:	20001728 	.word	0x20001728

08003eec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003ef8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003efa:	e003      	b.n	8003f04 <LoopCopyDataInit>

08003efc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003efc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003efe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003f00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003f02:	3104      	adds	r1, #4

08003f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003f04:	480a      	ldr	r0, [pc, #40]	@ (8003f30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003f06:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003f08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003f0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003f0c:	d3f6      	bcc.n	8003efc <CopyDataInit>
  ldr r2, =_sbss
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003f10:	e002      	b.n	8003f18 <LoopFillZerobss>

08003f12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003f12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003f14:	f842 3b04 	str.w	r3, [r2], #4

08003f18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003f18:	4b08      	ldr	r3, [pc, #32]	@ (8003f3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003f1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003f1c:	d3f9      	bcc.n	8003f12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f1e:	f7ff ffe5 	bl	8003eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f22:	f008 feef 	bl	800cd04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f26:	f7fc fef9 	bl	8000d1c <main>
  bx lr
 8003f2a:	4770      	bx	lr
  ldr r3, =_sidata
 8003f2c:	0800dfd8 	.word	0x0800dfd8
  ldr r0, =_sdata
 8003f30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003f34:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8003f38:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003f3c:	20001724 	.word	0x20001724

08003f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f40:	e7fe      	b.n	8003f40 <ADC1_2_IRQHandler>
	...

08003f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f48:	4b08      	ldr	r3, [pc, #32]	@ (8003f6c <HAL_Init+0x28>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a07      	ldr	r2, [pc, #28]	@ (8003f6c <HAL_Init+0x28>)
 8003f4e:	f043 0310 	orr.w	r3, r3, #16
 8003f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f54:	2003      	movs	r0, #3
 8003f56:	f000 f947 	bl	80041e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	f000 f808 	bl	8003f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f60:	f7ff fe0c 	bl	8003b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40022000 	.word	0x40022000

08003f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f78:	4b12      	ldr	r3, [pc, #72]	@ (8003fc4 <HAL_InitTick+0x54>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4b12      	ldr	r3, [pc, #72]	@ (8003fc8 <HAL_InitTick+0x58>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	4619      	mov	r1, r3
 8003f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f95f 	bl	8004252 <HAL_SYSTICK_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e00e      	b.n	8003fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b0f      	cmp	r3, #15
 8003fa2:	d80a      	bhi.n	8003fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	f000 f927 	bl	80041fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fb0:	4a06      	ldr	r2, [pc, #24]	@ (8003fcc <HAL_InitTick+0x5c>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e000      	b.n	8003fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000028 	.word	0x20000028
 8003fc8:	20000030 	.word	0x20000030
 8003fcc:	2000002c 	.word	0x2000002c

08003fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fd4:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_IncTick+0x1c>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <HAL_IncTick+0x20>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4413      	add	r3, r2
 8003fe0:	4a03      	ldr	r2, [pc, #12]	@ (8003ff0 <HAL_IncTick+0x20>)
 8003fe2:	6013      	str	r3, [r2, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	20000030 	.word	0x20000030
 8003ff0:	20000410 	.word	0x20000410

08003ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ff8:	4b02      	ldr	r3, [pc, #8]	@ (8004004 <HAL_GetTick+0x10>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr
 8004004:	20000410 	.word	0x20000410

08004008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004010:	f7ff fff0 	bl	8003ff4 <HAL_GetTick>
 8004014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d005      	beq.n	800402e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004022:	4b0a      	ldr	r3, [pc, #40]	@ (800404c <HAL_Delay+0x44>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800402e:	bf00      	nop
 8004030:	f7ff ffe0 	bl	8003ff4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	429a      	cmp	r2, r3
 800403e:	d8f7      	bhi.n	8004030 <HAL_Delay+0x28>
  {
  }
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000030 	.word	0x20000030

08004050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004060:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800406c:	4013      	ands	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800407c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004082:	4a04      	ldr	r2, [pc, #16]	@ (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	60d3      	str	r3, [r2, #12]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800409c:	4b04      	ldr	r3, [pc, #16]	@ (80040b0 <__NVIC_GetPriorityGrouping+0x18>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	f003 0307 	and.w	r3, r3, #7
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	db0b      	blt.n	80040de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	f003 021f 	and.w	r2, r3, #31
 80040cc:	4906      	ldr	r1, [pc, #24]	@ (80040e8 <__NVIC_EnableIRQ+0x34>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2001      	movs	r0, #1
 80040d6:	fa00 f202 	lsl.w	r2, r0, r2
 80040da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	e000e100 	.word	0xe000e100

080040ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	6039      	str	r1, [r7, #0]
 80040f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	db0a      	blt.n	8004116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	b2da      	uxtb	r2, r3
 8004104:	490c      	ldr	r1, [pc, #48]	@ (8004138 <__NVIC_SetPriority+0x4c>)
 8004106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410a:	0112      	lsls	r2, r2, #4
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	440b      	add	r3, r1
 8004110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004114:	e00a      	b.n	800412c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	4908      	ldr	r1, [pc, #32]	@ (800413c <__NVIC_SetPriority+0x50>)
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	3b04      	subs	r3, #4
 8004124:	0112      	lsls	r2, r2, #4
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	440b      	add	r3, r1
 800412a:	761a      	strb	r2, [r3, #24]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	e000e100 	.word	0xe000e100
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004140:	b480      	push	{r7}
 8004142:	b089      	sub	sp, #36	@ 0x24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f1c3 0307 	rsb	r3, r3, #7
 800415a:	2b04      	cmp	r3, #4
 800415c:	bf28      	it	cs
 800415e:	2304      	movcs	r3, #4
 8004160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3304      	adds	r3, #4
 8004166:	2b06      	cmp	r3, #6
 8004168:	d902      	bls.n	8004170 <NVIC_EncodePriority+0x30>
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3b03      	subs	r3, #3
 800416e:	e000      	b.n	8004172 <NVIC_EncodePriority+0x32>
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004174:	f04f 32ff 	mov.w	r2, #4294967295
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43da      	mvns	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	401a      	ands	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004188:	f04f 31ff 	mov.w	r1, #4294967295
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	43d9      	mvns	r1, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004198:	4313      	orrs	r3, r2
         );
}
 800419a:	4618      	mov	r0, r3
 800419c:	3724      	adds	r7, #36	@ 0x24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041b4:	d301      	bcc.n	80041ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041b6:	2301      	movs	r3, #1
 80041b8:	e00f      	b.n	80041da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ba:	4a0a      	ldr	r2, [pc, #40]	@ (80041e4 <SysTick_Config+0x40>)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3b01      	subs	r3, #1
 80041c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041c2:	210f      	movs	r1, #15
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	f7ff ff90 	bl	80040ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <SysTick_Config+0x40>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041d2:	4b04      	ldr	r3, [pc, #16]	@ (80041e4 <SysTick_Config+0x40>)
 80041d4:	2207      	movs	r2, #7
 80041d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	e000e010 	.word	0xe000e010

080041e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ff2d 	bl	8004050 <__NVIC_SetPriorityGrouping>
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	4603      	mov	r3, r0
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004210:	f7ff ff42 	bl	8004098 <__NVIC_GetPriorityGrouping>
 8004214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	6978      	ldr	r0, [r7, #20]
 800421c:	f7ff ff90 	bl	8004140 <NVIC_EncodePriority>
 8004220:	4602      	mov	r2, r0
 8004222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff ff5f 	bl	80040ec <__NVIC_SetPriority>
}
 800422e:	bf00      	nop
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	4603      	mov	r3, r0
 800423e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff ff35 	bl	80040b4 <__NVIC_EnableIRQ>
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff ffa2 	bl	80041a4 <SysTick_Config>
 8004260:	4603      	mov	r3, r0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800426c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004286:	4b2f      	ldr	r3, [pc, #188]	@ (8004344 <HAL_FLASH_Program+0xd8>)
 8004288:	7e1b      	ldrb	r3, [r3, #24]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_FLASH_Program+0x26>
 800428e:	2302      	movs	r3, #2
 8004290:	e054      	b.n	800433c <HAL_FLASH_Program+0xd0>
 8004292:	4b2c      	ldr	r3, [pc, #176]	@ (8004344 <HAL_FLASH_Program+0xd8>)
 8004294:	2201      	movs	r2, #1
 8004296:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004298:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800429c:	f000 f8a8 	bl	80043f0 <FLASH_WaitForLastOperation>
 80042a0:	4603      	mov	r3, r0
 80042a2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d144      	bne.n	8004334 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d102      	bne.n	80042b6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80042b0:	2301      	movs	r3, #1
 80042b2:	757b      	strb	r3, [r7, #21]
 80042b4:	e007      	b.n	80042c6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d102      	bne.n	80042c2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80042bc:	2302      	movs	r3, #2
 80042be:	757b      	strb	r3, [r7, #21]
 80042c0:	e001      	b.n	80042c6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80042c2:	2304      	movs	r3, #4
 80042c4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80042c6:	2300      	movs	r3, #0
 80042c8:	75bb      	strb	r3, [r7, #22]
 80042ca:	e02d      	b.n	8004328 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80042cc:	7dbb      	ldrb	r3, [r7, #22]
 80042ce:	005a      	lsls	r2, r3, #1
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	eb02 0c03 	add.w	ip, r2, r3
 80042d6:	7dbb      	ldrb	r3, [r7, #22]
 80042d8:	0119      	lsls	r1, r3, #4
 80042da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042de:	f1c1 0620 	rsb	r6, r1, #32
 80042e2:	f1a1 0020 	sub.w	r0, r1, #32
 80042e6:	fa22 f401 	lsr.w	r4, r2, r1
 80042ea:	fa03 f606 	lsl.w	r6, r3, r6
 80042ee:	4334      	orrs	r4, r6
 80042f0:	fa23 f000 	lsr.w	r0, r3, r0
 80042f4:	4304      	orrs	r4, r0
 80042f6:	fa23 f501 	lsr.w	r5, r3, r1
 80042fa:	b2a3      	uxth	r3, r4
 80042fc:	4619      	mov	r1, r3
 80042fe:	4660      	mov	r0, ip
 8004300:	f000 f85a 	bl	80043b8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004304:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004308:	f000 f872 	bl	80043f0 <FLASH_WaitForLastOperation>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004310:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <HAL_FLASH_Program+0xdc>)
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	4a0c      	ldr	r2, [pc, #48]	@ (8004348 <HAL_FLASH_Program+0xdc>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d107      	bne.n	8004332 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004322:	7dbb      	ldrb	r3, [r7, #22]
 8004324:	3301      	adds	r3, #1
 8004326:	75bb      	strb	r3, [r7, #22]
 8004328:	7dba      	ldrb	r2, [r7, #22]
 800432a:	7d7b      	ldrb	r3, [r7, #21]
 800432c:	429a      	cmp	r2, r3
 800432e:	d3cd      	bcc.n	80042cc <HAL_FLASH_Program+0x60>
 8004330:	e000      	b.n	8004334 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004332:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004334:	4b03      	ldr	r3, [pc, #12]	@ (8004344 <HAL_FLASH_Program+0xd8>)
 8004336:	2200      	movs	r2, #0
 8004338:	761a      	strb	r2, [r3, #24]

  return status;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
}
 800433c:	4618      	mov	r0, r3
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004344:	20000418 	.word	0x20000418
 8004348:	40022000 	.word	0x40022000

0800434c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004356:	4b0d      	ldr	r3, [pc, #52]	@ (800438c <HAL_FLASH_Unlock+0x40>)
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004362:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <HAL_FLASH_Unlock+0x40>)
 8004364:	4a0a      	ldr	r2, [pc, #40]	@ (8004390 <HAL_FLASH_Unlock+0x44>)
 8004366:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004368:	4b08      	ldr	r3, [pc, #32]	@ (800438c <HAL_FLASH_Unlock+0x40>)
 800436a:	4a0a      	ldr	r2, [pc, #40]	@ (8004394 <HAL_FLASH_Unlock+0x48>)
 800436c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800436e:	4b07      	ldr	r3, [pc, #28]	@ (800438c <HAL_FLASH_Unlock+0x40>)
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800437e:	79fb      	ldrb	r3, [r7, #7]
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40022000 	.word	0x40022000
 8004390:	45670123 	.word	0x45670123
 8004394:	cdef89ab 	.word	0xcdef89ab

08004398 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800439c:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <HAL_FLASH_Lock+0x1c>)
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	4a04      	ldr	r2, [pc, #16]	@ (80043b4 <HAL_FLASH_Lock+0x1c>)
 80043a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40022000 	.word	0x40022000

080043b8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043c4:	4b08      	ldr	r3, [pc, #32]	@ (80043e8 <FLASH_Program_HalfWord+0x30>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80043ca:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <FLASH_Program_HalfWord+0x34>)
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	4a07      	ldr	r2, [pc, #28]	@ (80043ec <FLASH_Program_HalfWord+0x34>)
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	887a      	ldrh	r2, [r7, #2]
 80043da:	801a      	strh	r2, [r3, #0]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000418 	.word	0x20000418
 80043ec:	40022000 	.word	0x40022000

080043f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80043f8:	f7ff fdfc 	bl	8003ff4 <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80043fe:	e010      	b.n	8004422 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004406:	d00c      	beq.n	8004422 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <FLASH_WaitForLastOperation+0x2e>
 800440e:	f7ff fdf1 	bl	8003ff4 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d201      	bcs.n	8004422 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e025      	b.n	800446e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004422:	4b15      	ldr	r3, [pc, #84]	@ (8004478 <FLASH_WaitForLastOperation+0x88>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e8      	bne.n	8004400 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800442e:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <FLASH_WaitForLastOperation+0x88>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800443a:	4b0f      	ldr	r3, [pc, #60]	@ (8004478 <FLASH_WaitForLastOperation+0x88>)
 800443c:	2220      	movs	r2, #32
 800443e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004440:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <FLASH_WaitForLastOperation+0x88>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10b      	bne.n	8004464 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800444c:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <FLASH_WaitForLastOperation+0x88>)
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004454:	2b00      	cmp	r3, #0
 8004456:	d105      	bne.n	8004464 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004458:	4b07      	ldr	r3, [pc, #28]	@ (8004478 <FLASH_WaitForLastOperation+0x88>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004464:	f000 f80a 	bl	800447c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40022000 	.word	0x40022000

0800447c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004486:	4b23      	ldr	r3, [pc, #140]	@ (8004514 <FLASH_SetErrorCode+0x98>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004492:	4b21      	ldr	r3, [pc, #132]	@ (8004518 <FLASH_SetErrorCode+0x9c>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f043 0302 	orr.w	r3, r3, #2
 800449a:	4a1f      	ldr	r2, [pc, #124]	@ (8004518 <FLASH_SetErrorCode+0x9c>)
 800449c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f043 0310 	orr.w	r3, r3, #16
 80044a4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80044a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004514 <FLASH_SetErrorCode+0x98>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80044b2:	4b19      	ldr	r3, [pc, #100]	@ (8004518 <FLASH_SetErrorCode+0x9c>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	4a17      	ldr	r2, [pc, #92]	@ (8004518 <FLASH_SetErrorCode+0x9c>)
 80044bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f043 0304 	orr.w	r3, r3, #4
 80044c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80044c6:	4b13      	ldr	r3, [pc, #76]	@ (8004514 <FLASH_SetErrorCode+0x98>)
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80044d2:	4b11      	ldr	r3, [pc, #68]	@ (8004518 <FLASH_SetErrorCode+0x9c>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	4a0f      	ldr	r2, [pc, #60]	@ (8004518 <FLASH_SetErrorCode+0x9c>)
 80044dc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <FLASH_SetErrorCode+0x98>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004514 <FLASH_SetErrorCode+0x98>)
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f240 1201 	movw	r2, #257	@ 0x101
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d106      	bne.n	8004502 <FLASH_SetErrorCode+0x86>
 80044f4:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <FLASH_SetErrorCode+0x98>)
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	4a06      	ldr	r2, [pc, #24]	@ (8004514 <FLASH_SetErrorCode+0x98>)
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	61d3      	str	r3, [r2, #28]
}  
 8004500:	e002      	b.n	8004508 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004502:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <FLASH_SetErrorCode+0x98>)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	60d3      	str	r3, [r2, #12]
}  
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40022000 	.word	0x40022000
 8004518:	20000418 	.word	0x20000418

0800451c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800452e:	4b2f      	ldr	r3, [pc, #188]	@ (80045ec <HAL_FLASHEx_Erase+0xd0>)
 8004530:	7e1b      	ldrb	r3, [r3, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_FLASHEx_Erase+0x1e>
 8004536:	2302      	movs	r3, #2
 8004538:	e053      	b.n	80045e2 <HAL_FLASHEx_Erase+0xc6>
 800453a:	4b2c      	ldr	r3, [pc, #176]	@ (80045ec <HAL_FLASHEx_Erase+0xd0>)
 800453c:	2201      	movs	r2, #1
 800453e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d116      	bne.n	8004576 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004548:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800454c:	f7ff ff50 	bl	80043f0 <FLASH_WaitForLastOperation>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d141      	bne.n	80045da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004556:	2001      	movs	r0, #1
 8004558:	f000 f84c 	bl	80045f4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800455c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004560:	f7ff ff46 	bl	80043f0 <FLASH_WaitForLastOperation>
 8004564:	4603      	mov	r3, r0
 8004566:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004568:	4b21      	ldr	r3, [pc, #132]	@ (80045f0 <HAL_FLASHEx_Erase+0xd4>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	4a20      	ldr	r2, [pc, #128]	@ (80045f0 <HAL_FLASHEx_Erase+0xd4>)
 800456e:	f023 0304 	bic.w	r3, r3, #4
 8004572:	6113      	str	r3, [r2, #16]
 8004574:	e031      	b.n	80045da <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004576:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800457a:	f7ff ff39 	bl	80043f0 <FLASH_WaitForLastOperation>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d12a      	bne.n	80045da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f04f 32ff 	mov.w	r2, #4294967295
 800458a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	e019      	b.n	80045c8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004594:	68b8      	ldr	r0, [r7, #8]
 8004596:	f000 f849 	bl	800462c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800459a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800459e:	f7ff ff27 	bl	80043f0 <FLASH_WaitForLastOperation>
 80045a2:	4603      	mov	r3, r0
 80045a4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80045a6:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <HAL_FLASHEx_Erase+0xd4>)
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	4a11      	ldr	r2, [pc, #68]	@ (80045f0 <HAL_FLASHEx_Erase+0xd4>)
 80045ac:	f023 0302 	bic.w	r3, r3, #2
 80045b0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	601a      	str	r2, [r3, #0]
            break;
 80045be:	e00c      	b.n	80045da <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045c6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	029a      	lsls	r2, r3, #10
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	4413      	add	r3, r2
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d3dc      	bcc.n	8004594 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80045da:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <HAL_FLASHEx_Erase+0xd0>)
 80045dc:	2200      	movs	r2, #0
 80045de:	761a      	strb	r2, [r3, #24]

  return status;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000418 	.word	0x20000418
 80045f0:	40022000 	.word	0x40022000

080045f4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80045fc:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <FLASH_MassErase+0x30>)
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004602:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <FLASH_MassErase+0x34>)
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	4a08      	ldr	r2, [pc, #32]	@ (8004628 <FLASH_MassErase+0x34>)
 8004608:	f043 0304 	orr.w	r3, r3, #4
 800460c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800460e:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <FLASH_MassErase+0x34>)
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	4a05      	ldr	r2, [pc, #20]	@ (8004628 <FLASH_MassErase+0x34>)
 8004614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004618:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	20000418 	.word	0x20000418
 8004628:	40022000 	.word	0x40022000

0800462c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004634:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <FLASH_PageErase+0x38>)
 8004636:	2200      	movs	r2, #0
 8004638:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800463a:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <FLASH_PageErase+0x3c>)
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	4a0a      	ldr	r2, [pc, #40]	@ (8004668 <FLASH_PageErase+0x3c>)
 8004640:	f043 0302 	orr.w	r3, r3, #2
 8004644:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004646:	4a08      	ldr	r2, [pc, #32]	@ (8004668 <FLASH_PageErase+0x3c>)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800464c:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <FLASH_PageErase+0x3c>)
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	4a05      	ldr	r2, [pc, #20]	@ (8004668 <FLASH_PageErase+0x3c>)
 8004652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004656:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	20000418 	.word	0x20000418
 8004668:	40022000 	.word	0x40022000

0800466c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800466c:	b480      	push	{r7}
 800466e:	b08b      	sub	sp, #44	@ 0x2c
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004676:	2300      	movs	r3, #0
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800467e:	e169      	b.n	8004954 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004680:	2201      	movs	r2, #1
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	429a      	cmp	r2, r3
 800469a:	f040 8158 	bne.w	800494e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4a9a      	ldr	r2, [pc, #616]	@ (800490c <HAL_GPIO_Init+0x2a0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d05e      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
 80046a8:	4a98      	ldr	r2, [pc, #608]	@ (800490c <HAL_GPIO_Init+0x2a0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d875      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046ae:	4a98      	ldr	r2, [pc, #608]	@ (8004910 <HAL_GPIO_Init+0x2a4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d058      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
 80046b4:	4a96      	ldr	r2, [pc, #600]	@ (8004910 <HAL_GPIO_Init+0x2a4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d86f      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046ba:	4a96      	ldr	r2, [pc, #600]	@ (8004914 <HAL_GPIO_Init+0x2a8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d052      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
 80046c0:	4a94      	ldr	r2, [pc, #592]	@ (8004914 <HAL_GPIO_Init+0x2a8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d869      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046c6:	4a94      	ldr	r2, [pc, #592]	@ (8004918 <HAL_GPIO_Init+0x2ac>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d04c      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
 80046cc:	4a92      	ldr	r2, [pc, #584]	@ (8004918 <HAL_GPIO_Init+0x2ac>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d863      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046d2:	4a92      	ldr	r2, [pc, #584]	@ (800491c <HAL_GPIO_Init+0x2b0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d046      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
 80046d8:	4a90      	ldr	r2, [pc, #576]	@ (800491c <HAL_GPIO_Init+0x2b0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d85d      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046de:	2b12      	cmp	r3, #18
 80046e0:	d82a      	bhi.n	8004738 <HAL_GPIO_Init+0xcc>
 80046e2:	2b12      	cmp	r3, #18
 80046e4:	d859      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046e6:	a201      	add	r2, pc, #4	@ (adr r2, 80046ec <HAL_GPIO_Init+0x80>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	08004767 	.word	0x08004767
 80046f0:	08004741 	.word	0x08004741
 80046f4:	08004753 	.word	0x08004753
 80046f8:	08004795 	.word	0x08004795
 80046fc:	0800479b 	.word	0x0800479b
 8004700:	0800479b 	.word	0x0800479b
 8004704:	0800479b 	.word	0x0800479b
 8004708:	0800479b 	.word	0x0800479b
 800470c:	0800479b 	.word	0x0800479b
 8004710:	0800479b 	.word	0x0800479b
 8004714:	0800479b 	.word	0x0800479b
 8004718:	0800479b 	.word	0x0800479b
 800471c:	0800479b 	.word	0x0800479b
 8004720:	0800479b 	.word	0x0800479b
 8004724:	0800479b 	.word	0x0800479b
 8004728:	0800479b 	.word	0x0800479b
 800472c:	0800479b 	.word	0x0800479b
 8004730:	08004749 	.word	0x08004749
 8004734:	0800475d 	.word	0x0800475d
 8004738:	4a79      	ldr	r2, [pc, #484]	@ (8004920 <HAL_GPIO_Init+0x2b4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800473e:	e02c      	b.n	800479a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	623b      	str	r3, [r7, #32]
          break;
 8004746:	e029      	b.n	800479c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	3304      	adds	r3, #4
 800474e:	623b      	str	r3, [r7, #32]
          break;
 8004750:	e024      	b.n	800479c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	3308      	adds	r3, #8
 8004758:	623b      	str	r3, [r7, #32]
          break;
 800475a:	e01f      	b.n	800479c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	330c      	adds	r3, #12
 8004762:	623b      	str	r3, [r7, #32]
          break;
 8004764:	e01a      	b.n	800479c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d102      	bne.n	8004774 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800476e:	2304      	movs	r3, #4
 8004770:	623b      	str	r3, [r7, #32]
          break;
 8004772:	e013      	b.n	800479c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d105      	bne.n	8004788 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800477c:	2308      	movs	r3, #8
 800477e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	611a      	str	r2, [r3, #16]
          break;
 8004786:	e009      	b.n	800479c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004788:	2308      	movs	r3, #8
 800478a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	615a      	str	r2, [r3, #20]
          break;
 8004792:	e003      	b.n	800479c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004794:	2300      	movs	r3, #0
 8004796:	623b      	str	r3, [r7, #32]
          break;
 8004798:	e000      	b.n	800479c <HAL_GPIO_Init+0x130>
          break;
 800479a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2bff      	cmp	r3, #255	@ 0xff
 80047a0:	d801      	bhi.n	80047a6 <HAL_GPIO_Init+0x13a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	e001      	b.n	80047aa <HAL_GPIO_Init+0x13e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2bff      	cmp	r3, #255	@ 0xff
 80047b0:	d802      	bhi.n	80047b8 <HAL_GPIO_Init+0x14c>
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	e002      	b.n	80047be <HAL_GPIO_Init+0x152>
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	3b08      	subs	r3, #8
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	210f      	movs	r1, #15
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	401a      	ands	r2, r3
 80047d0:	6a39      	ldr	r1, [r7, #32]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	fa01 f303 	lsl.w	r3, r1, r3
 80047d8:	431a      	orrs	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 80b1 	beq.w	800494e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80047ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004924 <HAL_GPIO_Init+0x2b8>)
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	4a4c      	ldr	r2, [pc, #304]	@ (8004924 <HAL_GPIO_Init+0x2b8>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6193      	str	r3, [r2, #24]
 80047f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004924 <HAL_GPIO_Init+0x2b8>)
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004804:	4a48      	ldr	r2, [pc, #288]	@ (8004928 <HAL_GPIO_Init+0x2bc>)
 8004806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	3302      	adds	r3, #2
 800480c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004810:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	220f      	movs	r2, #15
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	43db      	mvns	r3, r3
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a40      	ldr	r2, [pc, #256]	@ (800492c <HAL_GPIO_Init+0x2c0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <HAL_GPIO_Init+0x1ec>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3f      	ldr	r2, [pc, #252]	@ (8004930 <HAL_GPIO_Init+0x2c4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00d      	beq.n	8004854 <HAL_GPIO_Init+0x1e8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3e      	ldr	r2, [pc, #248]	@ (8004934 <HAL_GPIO_Init+0x2c8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <HAL_GPIO_Init+0x1e4>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3d      	ldr	r2, [pc, #244]	@ (8004938 <HAL_GPIO_Init+0x2cc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <HAL_GPIO_Init+0x1e0>
 8004848:	2303      	movs	r3, #3
 800484a:	e006      	b.n	800485a <HAL_GPIO_Init+0x1ee>
 800484c:	2304      	movs	r3, #4
 800484e:	e004      	b.n	800485a <HAL_GPIO_Init+0x1ee>
 8004850:	2302      	movs	r3, #2
 8004852:	e002      	b.n	800485a <HAL_GPIO_Init+0x1ee>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <HAL_GPIO_Init+0x1ee>
 8004858:	2300      	movs	r3, #0
 800485a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485c:	f002 0203 	and.w	r2, r2, #3
 8004860:	0092      	lsls	r2, r2, #2
 8004862:	4093      	lsls	r3, r2
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800486a:	492f      	ldr	r1, [pc, #188]	@ (8004928 <HAL_GPIO_Init+0x2bc>)
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	089b      	lsrs	r3, r3, #2
 8004870:	3302      	adds	r3, #2
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004884:	4b2d      	ldr	r3, [pc, #180]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	492c      	ldr	r1, [pc, #176]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]
 8004890:	e006      	b.n	80048a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004892:	4b2a      	ldr	r3, [pc, #168]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	43db      	mvns	r3, r3
 800489a:	4928      	ldr	r1, [pc, #160]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 800489c:	4013      	ands	r3, r2
 800489e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80048ac:	4b23      	ldr	r3, [pc, #140]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	4922      	ldr	r1, [pc, #136]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
 80048b8:	e006      	b.n	80048c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048ba:	4b20      	ldr	r3, [pc, #128]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	491e      	ldr	r1, [pc, #120]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048d4:	4b19      	ldr	r3, [pc, #100]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	4918      	ldr	r1, [pc, #96]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	608b      	str	r3, [r1, #8]
 80048e0:	e006      	b.n	80048f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048e2:	4b16      	ldr	r3, [pc, #88]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	4914      	ldr	r1, [pc, #80]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d021      	beq.n	8004940 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048fc:	4b0f      	ldr	r3, [pc, #60]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	490e      	ldr	r1, [pc, #56]	@ (800493c <HAL_GPIO_Init+0x2d0>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	4313      	orrs	r3, r2
 8004906:	60cb      	str	r3, [r1, #12]
 8004908:	e021      	b.n	800494e <HAL_GPIO_Init+0x2e2>
 800490a:	bf00      	nop
 800490c:	10320000 	.word	0x10320000
 8004910:	10310000 	.word	0x10310000
 8004914:	10220000 	.word	0x10220000
 8004918:	10210000 	.word	0x10210000
 800491c:	10120000 	.word	0x10120000
 8004920:	10110000 	.word	0x10110000
 8004924:	40021000 	.word	0x40021000
 8004928:	40010000 	.word	0x40010000
 800492c:	40010800 	.word	0x40010800
 8004930:	40010c00 	.word	0x40010c00
 8004934:	40011000 	.word	0x40011000
 8004938:	40011400 	.word	0x40011400
 800493c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004940:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <HAL_GPIO_Init+0x304>)
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	43db      	mvns	r3, r3
 8004948:	4909      	ldr	r1, [pc, #36]	@ (8004970 <HAL_GPIO_Init+0x304>)
 800494a:	4013      	ands	r3, r2
 800494c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	3301      	adds	r3, #1
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	fa22 f303 	lsr.w	r3, r2, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	f47f ae8e 	bne.w	8004680 <HAL_GPIO_Init+0x14>
  }
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	372c      	adds	r7, #44	@ 0x2c
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	40010400 	.word	0x40010400

08004974 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	887b      	ldrh	r3, [r7, #2]
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800498c:	2301      	movs	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]
 8004990:	e001      	b.n	8004996 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004992:	2300      	movs	r3, #0
 8004994:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004996:	7bfb      	ldrb	r3, [r7, #15]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr

080049a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	460b      	mov	r3, r1
 80049ac:	807b      	strh	r3, [r7, #2]
 80049ae:	4613      	mov	r3, r2
 80049b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049b2:	787b      	ldrb	r3, [r7, #1]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049b8:	887a      	ldrh	r2, [r7, #2]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049be:	e003      	b.n	80049c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	041a      	lsls	r2, r3, #16
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	611a      	str	r2, [r3, #16]
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049de:	4b08      	ldr	r3, [pc, #32]	@ (8004a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d006      	beq.n	80049f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049ea:	4a05      	ldr	r2, [pc, #20]	@ (8004a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f806 	bl	8004a04 <HAL_GPIO_EXTI_Callback>
  }
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40010400 	.word	0x40010400

08004a04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e12b      	b.n	8004c82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff f8ce 	bl	8003be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	@ 0x24
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0201 	bic.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a7c:	f002 fb78 	bl	8007170 <HAL_RCC_GetPCLK1Freq>
 8004a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4a81      	ldr	r2, [pc, #516]	@ (8004c8c <HAL_I2C_Init+0x274>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d807      	bhi.n	8004a9c <HAL_I2C_Init+0x84>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4a80      	ldr	r2, [pc, #512]	@ (8004c90 <HAL_I2C_Init+0x278>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	bf94      	ite	ls
 8004a94:	2301      	movls	r3, #1
 8004a96:	2300      	movhi	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e006      	b.n	8004aaa <HAL_I2C_Init+0x92>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a7d      	ldr	r2, [pc, #500]	@ (8004c94 <HAL_I2C_Init+0x27c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bf94      	ite	ls
 8004aa4:	2301      	movls	r3, #1
 8004aa6:	2300      	movhi	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e0e7      	b.n	8004c82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a78      	ldr	r2, [pc, #480]	@ (8004c98 <HAL_I2C_Init+0x280>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	0c9b      	lsrs	r3, r3, #18
 8004abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8004c8c <HAL_I2C_Init+0x274>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d802      	bhi.n	8004aec <HAL_I2C_Init+0xd4>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	e009      	b.n	8004b00 <HAL_I2C_Init+0xe8>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	4a69      	ldr	r2, [pc, #420]	@ (8004c9c <HAL_I2C_Init+0x284>)
 8004af8:	fba2 2303 	umull	r2, r3, r2, r3
 8004afc:	099b      	lsrs	r3, r3, #6
 8004afe:	3301      	adds	r3, #1
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	495c      	ldr	r1, [pc, #368]	@ (8004c8c <HAL_I2C_Init+0x274>)
 8004b1c:	428b      	cmp	r3, r1
 8004b1e:	d819      	bhi.n	8004b54 <HAL_I2C_Init+0x13c>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1e59      	subs	r1, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b2e:	1c59      	adds	r1, r3, #1
 8004b30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b34:	400b      	ands	r3, r1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_I2C_Init+0x138>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1e59      	subs	r1, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b48:	3301      	adds	r3, #1
 8004b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4e:	e051      	b.n	8004bf4 <HAL_I2C_Init+0x1dc>
 8004b50:	2304      	movs	r3, #4
 8004b52:	e04f      	b.n	8004bf4 <HAL_I2C_Init+0x1dc>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d111      	bne.n	8004b80 <HAL_I2C_Init+0x168>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1e58      	subs	r0, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	440b      	add	r3, r1
 8004b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e012      	b.n	8004ba6 <HAL_I2C_Init+0x18e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1e58      	subs	r0, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	0099      	lsls	r1, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_I2C_Init+0x196>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e022      	b.n	8004bf4 <HAL_I2C_Init+0x1dc>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_I2C_Init+0x1bc>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1e58      	subs	r0, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6859      	ldr	r1, [r3, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	440b      	add	r3, r1
 8004bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bd2:	e00f      	b.n	8004bf4 <HAL_I2C_Init+0x1dc>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e58      	subs	r0, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	0099      	lsls	r1, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bea:	3301      	adds	r3, #1
 8004bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	6809      	ldr	r1, [r1, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69da      	ldr	r2, [r3, #28]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6911      	ldr	r1, [r2, #16]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68d2      	ldr	r2, [r2, #12]
 8004c2e:	4311      	orrs	r1, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	000186a0 	.word	0x000186a0
 8004c90:	001e847f 	.word	0x001e847f
 8004c94:	003d08ff 	.word	0x003d08ff
 8004c98:	431bde83 	.word	0x431bde83
 8004c9c:	10624dd3 	.word	0x10624dd3

08004ca0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	461a      	mov	r2, r3
 8004cac:	460b      	mov	r3, r1
 8004cae:	817b      	strh	r3, [r7, #10]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cb4:	f7ff f99e 	bl	8003ff4 <HAL_GetTick>
 8004cb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	f040 80e0 	bne.w	8004e88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2319      	movs	r3, #25
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4970      	ldr	r1, [pc, #448]	@ (8004e94 <HAL_I2C_Master_Transmit+0x1f4>)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f964 	bl	8004fa0 <I2C_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e0d3      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_I2C_Master_Transmit+0x50>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e0cc      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d007      	beq.n	8004d16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2221      	movs	r2, #33	@ 0x21
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2210      	movs	r2, #16
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	893a      	ldrh	r2, [r7, #8]
 8004d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a50      	ldr	r2, [pc, #320]	@ (8004e98 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d58:	8979      	ldrh	r1, [r7, #10]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f89c 	bl	8004e9c <I2C_MasterRequestWrite>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e08d      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d84:	e066      	b.n	8004e54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	6a39      	ldr	r1, [r7, #32]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f9de 	bl	800514c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d107      	bne.n	8004dae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e06b      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d11b      	bne.n	8004e28 <HAL_I2C_Master_Transmit+0x188>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d017      	beq.n	8004e28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	6a39      	ldr	r1, [r7, #32]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f9ce 	bl	80051ce <I2C_WaitOnBTFFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d107      	bne.n	8004e50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e01a      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d194      	bne.n	8004d86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	00100002 	.word	0x00100002
 8004e98:	ffff0000 	.word	0xffff0000

08004e9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d006      	beq.n	8004ec6 <I2C_MasterRequestWrite+0x2a>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d003      	beq.n	8004ec6 <I2C_MasterRequestWrite+0x2a>
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ec4:	d108      	bne.n	8004ed8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e00b      	b.n	8004ef0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004edc:	2b12      	cmp	r3, #18
 8004ede:	d107      	bne.n	8004ef0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f84f 	bl	8004fa0 <I2C_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00d      	beq.n	8004f24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f16:	d103      	bne.n	8004f20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e035      	b.n	8004f90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f2c:	d108      	bne.n	8004f40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f2e:	897b      	ldrh	r3, [r7, #10]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f3c:	611a      	str	r2, [r3, #16]
 8004f3e:	e01b      	b.n	8004f78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f40:	897b      	ldrh	r3, [r7, #10]
 8004f42:	11db      	asrs	r3, r3, #7
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f003 0306 	and.w	r3, r3, #6
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	f063 030f 	orn	r3, r3, #15
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	490e      	ldr	r1, [pc, #56]	@ (8004f98 <I2C_MasterRequestWrite+0xfc>)
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f875 	bl	800504e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e010      	b.n	8004f90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f6e:	897b      	ldrh	r3, [r7, #10]
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	4907      	ldr	r1, [pc, #28]	@ (8004f9c <I2C_MasterRequestWrite+0x100>)
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f865 	bl	800504e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	00010008 	.word	0x00010008
 8004f9c:	00010002 	.word	0x00010002

08004fa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fb0:	e025      	b.n	8004ffe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d021      	beq.n	8004ffe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fba:	f7ff f81b 	bl	8003ff4 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d116      	bne.n	8004ffe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	f043 0220 	orr.w	r2, r3, #32
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e023      	b.n	8005046 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d10d      	bne.n	8005024 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	43da      	mvns	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4013      	ands	r3, r2
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	bf0c      	ite	eq
 800501a:	2301      	moveq	r3, #1
 800501c:	2300      	movne	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	e00c      	b.n	800503e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	43da      	mvns	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4013      	ands	r3, r2
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	bf0c      	ite	eq
 8005036:	2301      	moveq	r3, #1
 8005038:	2300      	movne	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	461a      	mov	r2, r3
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	429a      	cmp	r2, r3
 8005042:	d0b6      	beq.n	8004fb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800505c:	e051      	b.n	8005102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800506c:	d123      	bne.n	80050b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800507c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005086:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	f043 0204 	orr.w	r2, r3, #4
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e046      	b.n	8005144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d021      	beq.n	8005102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050be:	f7fe ff99 	bl	8003ff4 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d302      	bcc.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d116      	bne.n	8005102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e020      	b.n	8005144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d10c      	bne.n	8005126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	43da      	mvns	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4013      	ands	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf14      	ite	ne
 800511e:	2301      	movne	r3, #1
 8005120:	2300      	moveq	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e00b      	b.n	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	43da      	mvns	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4013      	ands	r3, r2
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d18d      	bne.n	800505e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005158:	e02d      	b.n	80051b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f878 	bl	8005250 <I2C_IsAcknowledgeFailed>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e02d      	b.n	80051c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d021      	beq.n	80051b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005172:	f7fe ff3f 	bl	8003ff4 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	d302      	bcc.n	8005188 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d116      	bne.n	80051b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e007      	b.n	80051c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c0:	2b80      	cmp	r3, #128	@ 0x80
 80051c2:	d1ca      	bne.n	800515a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051da:	e02d      	b.n	8005238 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f837 	bl	8005250 <I2C_IsAcknowledgeFailed>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e02d      	b.n	8005248 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d021      	beq.n	8005238 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f4:	f7fe fefe 	bl	8003ff4 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	d302      	bcc.n	800520a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d116      	bne.n	8005238 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	f043 0220 	orr.w	r2, r3, #32
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e007      	b.n	8005248 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b04      	cmp	r3, #4
 8005244:	d1ca      	bne.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005266:	d11b      	bne.n	80052a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005270:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528c:	f043 0204 	orr.w	r2, r3, #4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ae:	b08b      	sub	sp, #44	@ 0x2c
 80052b0:	af06      	add	r7, sp, #24
 80052b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e0fd      	b.n	80054ba <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f007 fa0a 	bl	800c6ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2203      	movs	r2, #3
 80052dc:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f003 f981 	bl	80085ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	687e      	ldr	r6, [r7, #4]
 80052f2:	466d      	mov	r5, sp
 80052f4:	f106 0410 	add.w	r4, r6, #16
 80052f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	602b      	str	r3, [r5, #0]
 8005300:	1d33      	adds	r3, r6, #4
 8005302:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005304:	6838      	ldr	r0, [r7, #0]
 8005306:	f003 f94b 	bl	80085a0 <USB_CoreInit>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0ce      	b.n	80054ba <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f003 f97c 	bl	8008620 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005328:	2300      	movs	r3, #0
 800532a:	73fb      	strb	r3, [r7, #15]
 800532c:	e04c      	b.n	80053c8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	3301      	adds	r3, #1
 8005340:	2201      	movs	r2, #1
 8005342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	440b      	add	r3, r1
 8005354:	7bfa      	ldrb	r2, [r7, #15]
 8005356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005358:	7bfa      	ldrb	r2, [r7, #15]
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	b298      	uxth	r0, r3
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	440b      	add	r3, r1
 800536a:	3336      	adds	r3, #54	@ 0x36
 800536c:	4602      	mov	r2, r0
 800536e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	440b      	add	r3, r1
 8005380:	3303      	adds	r3, #3
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005386:	7bfa      	ldrb	r2, [r7, #15]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	3338      	adds	r3, #56	@ 0x38
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800539a:	7bfa      	ldrb	r2, [r7, #15]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	440b      	add	r3, r1
 80053a8:	333c      	adds	r3, #60	@ 0x3c
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053ae:	7bfa      	ldrb	r2, [r7, #15]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	440b      	add	r3, r1
 80053bc:	3340      	adds	r3, #64	@ 0x40
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	3301      	adds	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	7bfa      	ldrb	r2, [r7, #15]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d3ad      	bcc.n	800532e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
 80053d6:	e044      	b.n	8005462 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80053d8:	7bfa      	ldrb	r2, [r7, #15]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	440b      	add	r3, r1
 80053e6:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053ee:	7bfa      	ldrb	r2, [r7, #15]
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	440b      	add	r3, r1
 80053fc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005400:	7bfa      	ldrb	r2, [r7, #15]
 8005402:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005404:	7bfa      	ldrb	r2, [r7, #15]
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	440b      	add	r3, r1
 8005412:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8005416:	2200      	movs	r2, #0
 8005418:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800541a:	7bfa      	ldrb	r2, [r7, #15]
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	440b      	add	r3, r1
 8005428:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005430:	7bfa      	ldrb	r2, [r7, #15]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	440b      	add	r3, r1
 800543e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005446:	7bfa      	ldrb	r2, [r7, #15]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	440b      	add	r3, r1
 8005454:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	3301      	adds	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
 8005462:	7bfa      	ldrb	r2, [r7, #15]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d3b5      	bcc.n	80053d8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	603b      	str	r3, [r7, #0]
 8005472:	687e      	ldr	r6, [r7, #4]
 8005474:	466d      	mov	r5, sp
 8005476:	f106 0410 	add.w	r4, r6, #16
 800547a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800547c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	602b      	str	r3, [r5, #0]
 8005482:	1d33      	adds	r3, r6, #4
 8005484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005486:	6838      	ldr	r0, [r7, #0]
 8005488:	f003 f8d6 	bl	8008638 <USB_DevInit>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e00d      	b.n	80054ba <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f005 faf7 	bl	800aaa6 <USB_DevDisconnect>

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_PCD_Start+0x16>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e016      	b.n	8005506 <HAL_PCD_Start+0x44>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f003 f86b 	bl	80085c0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80054ea:	2101      	movs	r1, #1
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f007 fb70 	bl	800cbd2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f005 facb 	bl	800aa92 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b088      	sub	sp, #32
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f005 facd 	bl	800aaba <USB_ReadInterrupts>
 8005520:	4603      	mov	r3, r0
 8005522:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005526:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800552a:	d102      	bne.n	8005532 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fb5f 	bl	8005bf0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f005 fabf 	bl	800aaba <USB_ReadInterrupts>
 800553c:	4603      	mov	r3, r0
 800553e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005546:	d112      	bne.n	800556e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800555a:	b292      	uxth	r2, r2
 800555c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f007 f93e 	bl	800c7e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005566:	2100      	movs	r1, #0
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f923 	bl	80057b4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f005 faa1 	bl	800aaba <USB_ReadInterrupts>
 8005578:	4603      	mov	r3, r0
 800557a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800557e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005582:	d10b      	bne.n	800559c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800558c:	b29a      	uxth	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005596:	b292      	uxth	r2, r2
 8005598:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f005 fa8a 	bl	800aaba <USB_ReadInterrupts>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055b0:	d10b      	bne.n	80055ca <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055c4:	b292      	uxth	r2, r2
 80055c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f005 fa73 	bl	800aaba <USB_ReadInterrupts>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055de:	d126      	bne.n	800562e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0204 	bic.w	r2, r2, #4
 80055f2:	b292      	uxth	r2, r2
 80055f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005600:	b29a      	uxth	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0208 	bic.w	r2, r2, #8
 800560a:	b292      	uxth	r2, r2
 800560c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f007 f91f 	bl	800c854 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800561e:	b29a      	uxth	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005628:	b292      	uxth	r2, r2
 800562a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f005 fa41 	bl	800aaba <USB_ReadInterrupts>
 8005638:	4603      	mov	r3, r0
 800563a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800563e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005642:	f040 8082 	bne.w	800574a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005646:	2300      	movs	r3, #0
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e010      	b.n	800566e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	7ffb      	ldrb	r3, [r7, #31]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	441a      	add	r2, r3
 8005658:	7ffb      	ldrb	r3, [r7, #31]
 800565a:	8812      	ldrh	r2, [r2, #0]
 800565c:	b292      	uxth	r2, r2
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	3320      	adds	r3, #32
 8005662:	443b      	add	r3, r7
 8005664:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005668:	7ffb      	ldrb	r3, [r7, #31]
 800566a:	3301      	adds	r3, #1
 800566c:	77fb      	strb	r3, [r7, #31]
 800566e:	7ffb      	ldrb	r3, [r7, #31]
 8005670:	2b07      	cmp	r3, #7
 8005672:	d9eb      	bls.n	800564c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800567c:	b29a      	uxth	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	b292      	uxth	r2, r2
 8005688:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005694:	b29a      	uxth	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	b292      	uxth	r2, r2
 80056a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80056a4:	bf00      	nop
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f6      	beq.n	80056a6 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ca:	b292      	uxth	r2, r2
 80056cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80056d0:	2300      	movs	r3, #0
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e00f      	b.n	80056f6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80056d6:	7ffb      	ldrb	r3, [r7, #31]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	4611      	mov	r1, r2
 80056de:	7ffa      	ldrb	r2, [r7, #31]
 80056e0:	0092      	lsls	r2, r2, #2
 80056e2:	440a      	add	r2, r1
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	3320      	adds	r3, #32
 80056e8:	443b      	add	r3, r7
 80056ea:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80056ee:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80056f0:	7ffb      	ldrb	r3, [r7, #31]
 80056f2:	3301      	adds	r3, #1
 80056f4:	77fb      	strb	r3, [r7, #31]
 80056f6:	7ffb      	ldrb	r3, [r7, #31]
 80056f8:	2b07      	cmp	r3, #7
 80056fa:	d9ec      	bls.n	80056d6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005704:	b29a      	uxth	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0208 	orr.w	r2, r2, #8
 800570e:	b292      	uxth	r2, r2
 8005710:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800571c:	b29a      	uxth	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005726:	b292      	uxth	r2, r2
 8005728:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0204 	orr.w	r2, r2, #4
 800573e:	b292      	uxth	r2, r2
 8005740:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f007 f86b 	bl	800c820 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f005 f9b3 	bl	800aaba <USB_ReadInterrupts>
 8005754:	4603      	mov	r3, r0
 8005756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800575a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800575e:	d10e      	bne.n	800577e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005768:	b29a      	uxth	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005772:	b292      	uxth	r2, r2
 8005774:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f007 f824 	bl	800c7c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f005 f999 	bl	800aaba <USB_ReadInterrupts>
 8005788:	4603      	mov	r3, r0
 800578a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005792:	d10b      	bne.n	80057ac <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800579c:	b29a      	uxth	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057a6:	b292      	uxth	r2, r2
 80057a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 80057ac:	bf00      	nop
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_PCD_SetAddress+0x1a>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e013      	b.n	80057f6 <HAL_PCD_SetAddress+0x42>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	78fa      	ldrb	r2, [r7, #3]
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f005 f940 	bl	800aa6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	4608      	mov	r0, r1
 8005808:	4611      	mov	r1, r2
 800580a:	461a      	mov	r2, r3
 800580c:	4603      	mov	r3, r0
 800580e:	70fb      	strb	r3, [r7, #3]
 8005810:	460b      	mov	r3, r1
 8005812:	803b      	strh	r3, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800581c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005820:	2b00      	cmp	r3, #0
 8005822:	da0e      	bge.n	8005842 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	4413      	add	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	705a      	strb	r2, [r3, #1]
 8005840:	e00e      	b.n	8005860 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	f003 0207 	and.w	r2, r3, #7
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	4413      	add	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800586c:	883a      	ldrh	r2, [r7, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	78ba      	ldrb	r2, [r7, #2]
 8005876:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800588a:	78bb      	ldrb	r3, [r7, #2]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d102      	bne.n	8005896 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_PCD_EP_Open+0xa6>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e00e      	b.n	80058c2 <HAL_PCD_EP_Open+0xc4>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68f9      	ldr	r1, [r7, #12]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f002 fee0 	bl	8008678 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80058c0:	7afb      	ldrb	r3, [r7, #11]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	460b      	mov	r3, r1
 80058d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	da0e      	bge.n	80058fc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	705a      	strb	r2, [r3, #1]
 80058fa:	e00e      	b.n	800591a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	f003 0207 	and.w	r2, r3, #7
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4413      	add	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_PCD_EP_Close+0x6a>
 8005930:	2302      	movs	r3, #2
 8005932:	e00e      	b.n	8005952 <HAL_PCD_EP_Close+0x88>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68f9      	ldr	r1, [r7, #12]
 8005942:	4618      	mov	r0, r3
 8005944:	f003 fa02 	bl	8008d4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b086      	sub	sp, #24
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	460b      	mov	r3, r1
 8005968:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800596a:	7afb      	ldrb	r3, [r7, #11]
 800596c:	f003 0207 	and.w	r2, r3, #7
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2200      	movs	r2, #0
 8005992:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2200      	movs	r2, #0
 8005998:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800599a:	7afb      	ldrb	r3, [r7, #11]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059a6:	7afb      	ldrb	r3, [r7, #11]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d106      	bne.n	80059be <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6979      	ldr	r1, [r7, #20]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f003 fbb4 	bl	8009124 <USB_EPStartXfer>
 80059bc:	e005      	b.n	80059ca <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6979      	ldr	r1, [r7, #20]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f003 fbad 	bl	8009124 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	f003 0207 	and.w	r2, r3, #7
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	440b      	add	r3, r1
 80059f2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80059f6:	681b      	ldr	r3, [r3, #0]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b086      	sub	sp, #24
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a12:	7afb      	ldrb	r3, [r7, #11]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a5a:	7afb      	ldrb	r3, [r7, #11]
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6979      	ldr	r1, [r7, #20]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f003 fb5a 	bl	8009124 <USB_EPStartXfer>
 8005a70:	e005      	b.n	8005a7e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6979      	ldr	r1, [r7, #20]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f003 fb53 	bl	8009124 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	f003 0207 	and.w	r2, r3, #7
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d901      	bls.n	8005aa6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e04c      	b.n	8005b40 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	da0e      	bge.n	8005acc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	705a      	strb	r2, [r3, #1]
 8005aca:	e00c      	b.n	8005ae6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005acc:	78fa      	ldrb	r2, [r7, #3]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_PCD_EP_SetStall+0x7e>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e01c      	b.n	8005b40 <HAL_PCD_EP_SetStall+0xb8>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f004 feac 	bl	800a872 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d108      	bne.n	8005b36 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f004 ffd1 	bl	800aad8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	f003 020f 	and.w	r2, r3, #15
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d901      	bls.n	8005b66 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e040      	b.n	8005be8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	da0e      	bge.n	8005b8c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4413      	add	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	705a      	strb	r2, [r3, #1]
 8005b8a:	e00e      	b.n	8005baa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	f003 0207 	and.w	r2, r3, #7
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_PCD_EP_ClrStall+0x82>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e00e      	b.n	8005be8 <HAL_PCD_EP_ClrStall+0xa0>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f004 fe9a 	bl	800a912 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08e      	sub	sp, #56	@ 0x38
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005bf8:	e2de      	b.n	80061b8 <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c02:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005c04:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 8005c10:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 8157 	bne.w	8005ec8 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005c1a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d151      	bne.n	8005cc8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c34:	81fb      	strh	r3, [r7, #14]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	89fb      	ldrh	r3, [r7, #14]
 8005c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3328      	adds	r3, #40	@ 0x28
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4413      	add	r3, r2
 8005c62:	3302      	adds	r3, #2
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6812      	ldr	r2, [r2, #0]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	695a      	ldr	r2, [r3, #20]
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	441a      	add	r2, r3
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005c88:	2100      	movs	r1, #0
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f006 fd81 	bl	800c792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 828d 	beq.w	80061b8 <PCD_EP_ISR_Handler+0x5c8>
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f040 8288 	bne.w	80061b8 <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005cc6:	e277      	b.n	80061b8 <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005cd8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d034      	beq.n	8005d4c <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3306      	adds	r3, #6
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f004 ff28 	bl	800ab76 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005d32:	4013      	ands	r3, r2
 8005d34:	823b      	strh	r3, [r7, #16]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	8a3a      	ldrh	r2, [r7, #16]
 8005d3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d40:	b292      	uxth	r2, r2
 8005d42:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f006 fcf7 	bl	800c738 <HAL_PCD_SetupStageCallback>
 8005d4a:	e235      	b.n	80061b8 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f280 8231 	bge.w	80061b8 <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005d62:	4013      	ands	r3, r2
 8005d64:	83bb      	strh	r3, [r7, #28]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	8bba      	ldrh	r2, [r7, #28]
 8005d6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d70:	b292      	uxth	r2, r2
 8005d72:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4413      	add	r3, r2
 8005d88:	3306      	adds	r3, #6
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d019      	beq.n	8005ddc <PCD_EP_ISR_Handler+0x1ec>
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d015      	beq.n	8005ddc <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	6959      	ldr	r1, [r3, #20]
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f004 fed8 	bl	800ab76 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	695a      	ldr	r2, [r3, #20]
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	441a      	add	r2, r3
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f006 fcc0 	bl	800c75c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	4413      	add	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d112      	bne.n	8005e2a <PCD_EP_ISR_Handler+0x23a>
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	801a      	strh	r2, [r3, #0]
 8005e28:	e02f      	b.n	8005e8a <PCD_EP_ISR_Handler+0x29a>
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e30:	d813      	bhi.n	8005e5a <PCD_EP_ISR_Handler+0x26a>
 8005e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <PCD_EP_ISR_Handler+0x25c>
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	3301      	adds	r3, #1
 8005e4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	029b      	lsls	r3, r3, #10
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	e017      	b.n	8005e8a <PCD_EP_ISR_Handler+0x29a>
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <PCD_EP_ISR_Handler+0x284>
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	3b01      	subs	r3, #1
 8005e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	029b      	lsls	r3, r3, #10
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9a:	827b      	strh	r3, [r7, #18]
 8005e9c:	8a7b      	ldrh	r3, [r7, #18]
 8005e9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ea2:	827b      	strh	r3, [r7, #18]
 8005ea4:	8a7b      	ldrh	r3, [r7, #18]
 8005ea6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005eaa:	827b      	strh	r3, [r7, #18]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	8a7b      	ldrh	r3, [r7, #18]
 8005eb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	8013      	strh	r3, [r2, #0]
 8005ec6:	e177      	b.n	80061b8 <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005eda:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f280 80ea 	bge.w	80060b8 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005efa:	4013      	ands	r3, r2
 8005efc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005f0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f12:	b292      	uxth	r2, r2
 8005f14:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005f16:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	4413      	add	r3, r2
 8005f2a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2e:	7b1b      	ldrb	r3, [r3, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d122      	bne.n	8005f7a <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	4413      	add	r3, r2
 8005f48:	3306      	adds	r3, #6
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6812      	ldr	r2, [r2, #0]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f5c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 8005f5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8087 	beq.w	8006074 <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	6959      	ldr	r1, [r3, #20]
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	88da      	ldrh	r2, [r3, #6]
 8005f72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f74:	f004 fdff 	bl	800ab76 <USB_ReadPMA>
 8005f78:	e07c      	b.n	8006074 <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	78db      	ldrb	r3, [r3, #3]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d108      	bne.n	8005f94 <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005f82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005f84:	461a      	mov	r2, r3
 8005f86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f923 	bl	80061d4 <HAL_PCD_EP_DB_Receive>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005f92:	e06f      	b.n	8006074 <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	441a      	add	r2, r3
 8005fbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d021      	beq.n	8006032 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4413      	add	r3, r2
 8006002:	3302      	adds	r3, #2
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006016:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8006018:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800601a:	2b00      	cmp	r3, #0
 800601c:	d02a      	beq.n	8006074 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	6959      	ldr	r1, [r3, #20]
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	891a      	ldrh	r2, [r3, #8]
 800602a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800602c:	f004 fda3 	bl	800ab76 <USB_ReadPMA>
 8006030:	e020      	b.n	8006074 <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4413      	add	r3, r2
 8006046:	3306      	adds	r3, #6
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800605a:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 800605c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	6959      	ldr	r1, [r3, #20]
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	895a      	ldrh	r2, [r3, #10]
 800606e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006070:	f004 fd81 	bl	800ab76 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800607a:	441a      	add	r2, r3
 800607c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006082:	695a      	ldr	r2, [r3, #20]
 8006084:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006086:	441a      	add	r2, r3
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <PCD_EP_ISR_Handler+0x4ae>
 8006094:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	429a      	cmp	r2, r3
 800609c:	d206      	bcs.n	80060ac <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f006 fb59 	bl	800c75c <HAL_PCD_DataOutStageCallback>
 80060aa:	e005      	b.n	80060b8 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060b2:	4618      	mov	r0, r3
 80060b4:	f003 f836 	bl	8009124 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80060b8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80060ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d07a      	beq.n	80061b8 <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 80060c2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	4413      	add	r3, r2
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80060ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f0:	843b      	strh	r3, [r7, #32]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	441a      	add	r2, r3
 8006100:	8c3b      	ldrh	r3, [r7, #32]
 8006102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610a:	b29b      	uxth	r3, r3
 800610c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	78db      	ldrb	r3, [r3, #3]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d108      	bne.n	8006128 <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800611a:	2b02      	cmp	r3, #2
 800611c:	d146      	bne.n	80061ac <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800611e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006124:	2b00      	cmp	r3, #0
 8006126:	d141      	bne.n	80061ac <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006130:	b29b      	uxth	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	4413      	add	r3, r2
 800613c:	3302      	adds	r3, #2
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006150:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	8bfb      	ldrh	r3, [r7, #30]
 8006158:	429a      	cmp	r2, r3
 800615a:	d906      	bls.n	800616a <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	8bfb      	ldrh	r3, [r7, #30]
 8006162:	1ad2      	subs	r2, r2, r3
 8006164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006166:	619a      	str	r2, [r3, #24]
 8006168:	e002      	b.n	8006170 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	2200      	movs	r2, #0
 800616e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d106      	bne.n	8006186 <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f006 fb07 	bl	800c792 <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 8006184:	e018      	b.n	80061b8 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	695a      	ldr	r2, [r3, #20]
 800618a:	8bfb      	ldrh	r3, [r7, #30]
 800618c:	441a      	add	r2, r3
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006194:	69da      	ldr	r2, [r3, #28]
 8006196:	8bfb      	ldrh	r3, [r7, #30]
 8006198:	441a      	add	r2, r3
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061a4:	4618      	mov	r0, r3
 80061a6:	f002 ffbd 	bl	8009124 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80061aa:	e005      	b.n	80061b8 <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80061ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80061ae:	461a      	mov	r2, r3
 80061b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f91b 	bl	80063ee <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	b21b      	sxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f6ff ad18 	blt.w	8005bfa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3738      	adds	r7, #56	@ 0x38
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d07e      	beq.n	80062ea <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	4413      	add	r3, r2
 8006200:	3302      	adds	r3, #2
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006214:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	8b7b      	ldrh	r3, [r7, #26]
 800621c:	429a      	cmp	r2, r3
 800621e:	d306      	bcc.n	800622e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	699a      	ldr	r2, [r3, #24]
 8006224:	8b7b      	ldrh	r3, [r7, #26]
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	619a      	str	r2, [r3, #24]
 800622c:	e002      	b.n	8006234 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2200      	movs	r2, #0
 8006232:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d123      	bne.n	8006284 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006256:	833b      	strh	r3, [r7, #24]
 8006258:	8b3b      	ldrh	r3, [r7, #24]
 800625a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800625e:	833b      	strh	r3, [r7, #24]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	8b3b      	ldrh	r3, [r7, #24]
 8006270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006278:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800627c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006280:	b29b      	uxth	r3, r3
 8006282:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d01f      	beq.n	80062ce <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a8:	82fb      	strh	r3, [r7, #22]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	441a      	add	r2, r3
 80062b8:	8afb      	ldrh	r3, [r7, #22]
 80062ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80062ce:	8b7b      	ldrh	r3, [r7, #26]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 8087 	beq.w	80063e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6959      	ldr	r1, [r3, #20]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	891a      	ldrh	r2, [r3, #8]
 80062e2:	8b7b      	ldrh	r3, [r7, #26]
 80062e4:	f004 fc47 	bl	800ab76 <USB_ReadPMA>
 80062e8:	e07c      	b.n	80063e4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	4413      	add	r3, r2
 80062fe:	3306      	adds	r3, #6
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006312:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	8b7b      	ldrh	r3, [r7, #26]
 800631a:	429a      	cmp	r2, r3
 800631c:	d306      	bcc.n	800632c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	8b7b      	ldrh	r3, [r7, #26]
 8006324:	1ad2      	subs	r2, r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	619a      	str	r2, [r3, #24]
 800632a:	e002      	b.n	8006332 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2200      	movs	r2, #0
 8006330:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d123      	bne.n	8006382 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006350:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006354:	83fb      	strh	r3, [r7, #30]
 8006356:	8bfb      	ldrh	r3, [r7, #30]
 8006358:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800635c:	83fb      	strh	r3, [r7, #30]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	441a      	add	r2, r3
 800636c:	8bfb      	ldrh	r3, [r7, #30]
 800636e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800637a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800637e:	b29b      	uxth	r3, r3
 8006380:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006382:	88fb      	ldrh	r3, [r7, #6]
 8006384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d11f      	bne.n	80063cc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a6:	83bb      	strh	r3, [r7, #28]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	441a      	add	r2, r3
 80063b6:	8bbb      	ldrh	r3, [r7, #28]
 80063b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80063cc:	8b7b      	ldrh	r3, [r7, #26]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d008      	beq.n	80063e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6959      	ldr	r1, [r3, #20]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	895a      	ldrh	r2, [r3, #10]
 80063de:	8b7b      	ldrh	r3, [r7, #26]
 80063e0:	f004 fbc9 	bl	800ab76 <USB_ReadPMA>
    }
  }

  return count;
 80063e4:	8b7b      	ldrh	r3, [r7, #26]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3720      	adds	r7, #32
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b094      	sub	sp, #80	@ 0x50
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	60f8      	str	r0, [r7, #12]
 80063f6:	60b9      	str	r1, [r7, #8]
 80063f8:	4613      	mov	r3, r2
 80063fa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8138 	beq.w	8006678 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006410:	b29b      	uxth	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4413      	add	r3, r2
 800641c:	3302      	adds	r3, #2
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006430:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800643c:	429a      	cmp	r2, r3
 800643e:	d907      	bls.n	8006450 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006448:	1ad2      	subs	r2, r2, r3
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	619a      	str	r2, [r3, #24]
 800644e:	e002      	b.n	8006456 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2200      	movs	r2, #0
 8006454:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d12c      	bne.n	80064b8 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	4619      	mov	r1, r3
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f006 f994 	bl	800c792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 823a 	beq.w	80068ea <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800648c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006490:	82fb      	strh	r3, [r7, #22]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	441a      	add	r2, r3
 80064a0:	8afb      	ldrh	r3, [r7, #22]
 80064a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	8013      	strh	r3, [r2, #0]
 80064b6:	e218      	b.n	80068ea <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d01f      	beq.n	8006502 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	441a      	add	r2, r3
 80064ec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80064ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064fe:	b29b      	uxth	r3, r3
 8006500:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006508:	2b01      	cmp	r3, #1
 800650a:	f040 81ee 	bne.w	80068ea <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	695a      	ldr	r2, [r3, #20]
 8006512:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006516:	441a      	add	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006524:	441a      	add	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6a1a      	ldr	r2, [r3, #32]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	429a      	cmp	r2, r3
 8006534:	d309      	bcc.n	800654a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6a1a      	ldr	r2, [r3, #32]
 8006540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006542:	1ad2      	subs	r2, r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	621a      	str	r2, [r3, #32]
 8006548:	e015      	b.n	8006576 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d107      	bne.n	8006562 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8006552:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006556:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006560:	e009      	b.n	8006576 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2200      	movs	r2, #0
 8006574:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d155      	bne.n	800662a <HAL_PCD_EP_DB_Transmit+0x23c>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800658c:	b29b      	uxth	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	011a      	lsls	r2, r3, #4
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	4413      	add	r3, r2
 80065a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d112      	bne.n	80065d2 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	801a      	strh	r2, [r3, #0]
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	e047      	b.n	8006662 <HAL_PCD_EP_DB_Transmit+0x274>
 80065d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80065d6:	d811      	bhi.n	80065fc <HAL_PCD_EP_DB_Transmit+0x20e>
 80065d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <HAL_PCD_EP_DB_Transmit+0x200>
 80065e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ea:	3301      	adds	r3, #1
 80065ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	029b      	lsls	r3, r3, #10
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	e032      	b.n	8006662 <HAL_PCD_EP_DB_Transmit+0x274>
 80065fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	2b00      	cmp	r3, #0
 800660a:	d102      	bne.n	8006612 <HAL_PCD_EP_DB_Transmit+0x224>
 800660c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660e:	3b01      	subs	r3, #1
 8006610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006614:	b29b      	uxth	r3, r3
 8006616:	029b      	lsls	r3, r3, #10
 8006618:	b29b      	uxth	r3, r3
 800661a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800661e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006622:	b29a      	uxth	r2, r3
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	801a      	strh	r2, [r3, #0]
 8006628:	e01b      	b.n	8006662 <HAL_PCD_EP_DB_Transmit+0x274>
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	785b      	ldrb	r3, [r3, #1]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d117      	bne.n	8006662 <HAL_PCD_EP_DB_Transmit+0x274>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006640:	b29b      	uxth	r3, r3
 8006642:	461a      	mov	r2, r3
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	4413      	add	r3, r2
 8006648:	627b      	str	r3, [r7, #36]	@ 0x24
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	011a      	lsls	r2, r3, #4
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	4413      	add	r3, r2
 8006654:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006658:	623b      	str	r3, [r7, #32]
 800665a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800665c:	b29a      	uxth	r2, r3
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6959      	ldr	r1, [r3, #20]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	891a      	ldrh	r2, [r3, #8]
 800666e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006670:	b29b      	uxth	r3, r3
 8006672:	f004 fa3c 	bl	800aaee <USB_WritePMA>
 8006676:	e138      	b.n	80068ea <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006680:	b29b      	uxth	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	4413      	add	r3, r2
 800668c:	3306      	adds	r3, #6
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	699a      	ldr	r2, [r3, #24]
 80066a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d307      	bcc.n	80066c0 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	699a      	ldr	r2, [r3, #24]
 80066b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80066b8:	1ad2      	subs	r2, r2, r3
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	619a      	str	r2, [r3, #24]
 80066be:	e002      	b.n	80066c6 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2200      	movs	r2, #0
 80066c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d12e      	bne.n	800672c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	4619      	mov	r1, r3
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f006 f85c 	bl	800c792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f040 8102 	bne.w	80068ea <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006700:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	441a      	add	r2, r3
 8006712:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800671a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800671e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006726:	b29b      	uxth	r3, r3
 8006728:	8013      	strh	r3, [r2, #0]
 800672a:	e0de      	b.n	80068ea <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800672c:	88fb      	ldrh	r3, [r7, #6]
 800672e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d11f      	bne.n	8006776 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800674c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006750:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	441a      	add	r2, r3
 8006760:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800676a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800676e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006772:	b29b      	uxth	r3, r3
 8006774:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800677c:	2b01      	cmp	r3, #1
 800677e:	f040 80b4 	bne.w	80068ea <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800678a:	441a      	add	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	69da      	ldr	r2, [r3, #28]
 8006794:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006798:	441a      	add	r2, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6a1a      	ldr	r2, [r3, #32]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d309      	bcc.n	80067be <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	6a1a      	ldr	r2, [r3, #32]
 80067b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067b6:	1ad2      	subs	r2, r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	621a      	str	r2, [r3, #32]
 80067bc:	e015      	b.n	80067ea <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d107      	bne.n	80067d6 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80067c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80067ca:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80067d4:	e009      	b.n	80067ea <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	785b      	ldrb	r3, [r3, #1]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d155      	bne.n	80068a4 <HAL_PCD_EP_DB_Transmit+0x4b6>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006806:	b29b      	uxth	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680c:	4413      	add	r3, r2
 800680e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	011a      	lsls	r2, r3, #4
 8006816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006818:	4413      	add	r3, r2
 800681a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006822:	2b00      	cmp	r3, #0
 8006824:	d112      	bne.n	800684c <HAL_PCD_EP_DB_Transmit+0x45e>
 8006826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006830:	b29a      	uxth	r2, r3
 8006832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006834:	801a      	strh	r2, [r3, #0]
 8006836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006844:	b29a      	uxth	r2, r3
 8006846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006848:	801a      	strh	r2, [r3, #0]
 800684a:	e044      	b.n	80068d6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800684c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800684e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006850:	d811      	bhi.n	8006876 <HAL_PCD_EP_DB_Transmit+0x488>
 8006852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006854:	085b      	lsrs	r3, r3, #1
 8006856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006864:	3301      	adds	r3, #1
 8006866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800686a:	b29b      	uxth	r3, r3
 800686c:	029b      	lsls	r3, r3, #10
 800686e:	b29a      	uxth	r2, r3
 8006870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	e02f      	b.n	80068d6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800687c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800687e:	f003 031f 	and.w	r3, r3, #31
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <HAL_PCD_EP_DB_Transmit+0x49e>
 8006886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006888:	3b01      	subs	r3, #1
 800688a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800688c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800688e:	b29b      	uxth	r3, r3
 8006890:	029b      	lsls	r3, r3, #10
 8006892:	b29b      	uxth	r3, r3
 8006894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689c:	b29a      	uxth	r2, r3
 800689e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e018      	b.n	80068d6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d114      	bne.n	80068d6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ba:	4413      	add	r3, r2
 80068bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	011a      	lsls	r2, r3, #4
 80068c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c6:	4413      	add	r3, r2
 80068c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068d4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6959      	ldr	r1, [r3, #20]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	895a      	ldrh	r2, [r3, #10]
 80068e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f004 f902 	bl	800aaee <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006904:	82bb      	strh	r3, [r7, #20]
 8006906:	8abb      	ldrh	r3, [r7, #20]
 8006908:	f083 0310 	eor.w	r3, r3, #16
 800690c:	82bb      	strh	r3, [r7, #20]
 800690e:	8abb      	ldrh	r3, [r7, #20]
 8006910:	f083 0320 	eor.w	r3, r3, #32
 8006914:	82bb      	strh	r3, [r7, #20]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	441a      	add	r2, r3
 8006924:	8abb      	ldrh	r3, [r7, #20]
 8006926:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800692a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800692e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006936:	b29b      	uxth	r3, r3
 8006938:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3750      	adds	r7, #80	@ 0x50
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	607b      	str	r3, [r7, #4]
 800694e:	460b      	mov	r3, r1
 8006950:	817b      	strh	r3, [r7, #10]
 8006952:	4613      	mov	r3, r2
 8006954:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006956:	897b      	ldrh	r3, [r7, #10]
 8006958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800695c:	b29b      	uxth	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006962:	897b      	ldrh	r3, [r7, #10]
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	e009      	b.n	800698e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800697a:	897a      	ldrh	r2, [r7, #10]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800698e:	893b      	ldrh	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d107      	bne.n	80069a4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2200      	movs	r2, #0
 8006998:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	b29a      	uxth	r2, r3
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	80da      	strh	r2, [r3, #6]
 80069a2:	e00b      	b.n	80069bc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2201      	movs	r2, #1
 80069a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	0c1b      	lsrs	r3, r3, #16
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr

080069c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e272      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8087 	beq.w	8006af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069e8:	4b92      	ldr	r3, [pc, #584]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f003 030c 	and.w	r3, r3, #12
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d00c      	beq.n	8006a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80069f4:	4b8f      	ldr	r3, [pc, #572]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f003 030c 	and.w	r3, r3, #12
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d112      	bne.n	8006a26 <HAL_RCC_OscConfig+0x5e>
 8006a00:	4b8c      	ldr	r3, [pc, #560]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a0c:	d10b      	bne.n	8006a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a0e:	4b89      	ldr	r3, [pc, #548]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d06c      	beq.n	8006af4 <HAL_RCC_OscConfig+0x12c>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d168      	bne.n	8006af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e24c      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a2e:	d106      	bne.n	8006a3e <HAL_RCC_OscConfig+0x76>
 8006a30:	4b80      	ldr	r3, [pc, #512]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a7f      	ldr	r2, [pc, #508]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	e02e      	b.n	8006a9c <HAL_RCC_OscConfig+0xd4>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10c      	bne.n	8006a60 <HAL_RCC_OscConfig+0x98>
 8006a46:	4b7b      	ldr	r3, [pc, #492]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a7a      	ldr	r2, [pc, #488]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	4b78      	ldr	r3, [pc, #480]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a77      	ldr	r2, [pc, #476]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	e01d      	b.n	8006a9c <HAL_RCC_OscConfig+0xd4>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCC_OscConfig+0xbc>
 8006a6a:	4b72      	ldr	r3, [pc, #456]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a71      	ldr	r2, [pc, #452]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	4b6f      	ldr	r3, [pc, #444]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	e00b      	b.n	8006a9c <HAL_RCC_OscConfig+0xd4>
 8006a84:	4b6b      	ldr	r3, [pc, #428]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a6a      	ldr	r2, [pc, #424]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	4b68      	ldr	r3, [pc, #416]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a67      	ldr	r2, [pc, #412]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d013      	beq.n	8006acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa4:	f7fd faa6 	bl	8003ff4 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aac:	f7fd faa2 	bl	8003ff4 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b64      	cmp	r3, #100	@ 0x64
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e200      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006abe:	4b5d      	ldr	r3, [pc, #372]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCC_OscConfig+0xe4>
 8006aca:	e014      	b.n	8006af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006acc:	f7fd fa92 	bl	8003ff4 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ad4:	f7fd fa8e 	bl	8003ff4 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b64      	cmp	r3, #100	@ 0x64
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e1ec      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ae6:	4b53      	ldr	r3, [pc, #332]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f0      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x10c>
 8006af2:	e000      	b.n	8006af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d063      	beq.n	8006bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b02:	4b4c      	ldr	r3, [pc, #304]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f003 030c 	and.w	r3, r3, #12
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006b0e:	4b49      	ldr	r3, [pc, #292]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f003 030c 	and.w	r3, r3, #12
 8006b16:	2b08      	cmp	r3, #8
 8006b18:	d11c      	bne.n	8006b54 <HAL_RCC_OscConfig+0x18c>
 8006b1a:	4b46      	ldr	r3, [pc, #280]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d116      	bne.n	8006b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b26:	4b43      	ldr	r3, [pc, #268]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_RCC_OscConfig+0x176>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d001      	beq.n	8006b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e1c0      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	4939      	ldr	r1, [pc, #228]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b52:	e03a      	b.n	8006bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d020      	beq.n	8006b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b5c:	4b36      	ldr	r3, [pc, #216]	@ (8006c38 <HAL_RCC_OscConfig+0x270>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b62:	f7fd fa47 	bl	8003ff4 <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b6a:	f7fd fa43 	bl	8003ff4 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e1a1      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0f0      	beq.n	8006b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b88:	4b2a      	ldr	r3, [pc, #168]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	4927      	ldr	r1, [pc, #156]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	600b      	str	r3, [r1, #0]
 8006b9c:	e015      	b.n	8006bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b9e:	4b26      	ldr	r3, [pc, #152]	@ (8006c38 <HAL_RCC_OscConfig+0x270>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba4:	f7fd fa26 	bl	8003ff4 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bac:	f7fd fa22 	bl	8003ff4 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e180      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d03a      	beq.n	8006c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d019      	beq.n	8006c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bde:	4b17      	ldr	r3, [pc, #92]	@ (8006c3c <HAL_RCC_OscConfig+0x274>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be4:	f7fd fa06 	bl	8003ff4 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bec:	f7fd fa02 	bl	8003ff4 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e160      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	f000 fad8 	bl	80071c0 <RCC_Delay>
 8006c10:	e01c      	b.n	8006c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c12:	4b0a      	ldr	r3, [pc, #40]	@ (8006c3c <HAL_RCC_OscConfig+0x274>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c18:	f7fd f9ec 	bl	8003ff4 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c1e:	e00f      	b.n	8006c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c20:	f7fd f9e8 	bl	8003ff4 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d908      	bls.n	8006c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e146      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
 8006c32:	bf00      	nop
 8006c34:	40021000 	.word	0x40021000
 8006c38:	42420000 	.word	0x42420000
 8006c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c40:	4b92      	ldr	r3, [pc, #584]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e9      	bne.n	8006c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0304 	and.w	r3, r3, #4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 80a6 	beq.w	8006da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10d      	bne.n	8006c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c6a:	4b88      	ldr	r3, [pc, #544]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	4a87      	ldr	r2, [pc, #540]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c74:	61d3      	str	r3, [r2, #28]
 8006c76:	4b85      	ldr	r3, [pc, #532]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c7e:	60bb      	str	r3, [r7, #8]
 8006c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c82:	2301      	movs	r3, #1
 8006c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c86:	4b82      	ldr	r3, [pc, #520]	@ (8006e90 <HAL_RCC_OscConfig+0x4c8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d118      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c92:	4b7f      	ldr	r3, [pc, #508]	@ (8006e90 <HAL_RCC_OscConfig+0x4c8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a7e      	ldr	r2, [pc, #504]	@ (8006e90 <HAL_RCC_OscConfig+0x4c8>)
 8006c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c9e:	f7fd f9a9 	bl	8003ff4 <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca6:	f7fd f9a5 	bl	8003ff4 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b64      	cmp	r3, #100	@ 0x64
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e103      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cb8:	4b75      	ldr	r3, [pc, #468]	@ (8006e90 <HAL_RCC_OscConfig+0x4c8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0f0      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d106      	bne.n	8006cda <HAL_RCC_OscConfig+0x312>
 8006ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006cd2:	f043 0301 	orr.w	r3, r3, #1
 8006cd6:	6213      	str	r3, [r2, #32]
 8006cd8:	e02d      	b.n	8006d36 <HAL_RCC_OscConfig+0x36e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10c      	bne.n	8006cfc <HAL_RCC_OscConfig+0x334>
 8006ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	4a69      	ldr	r2, [pc, #420]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	6213      	str	r3, [r2, #32]
 8006cee:	4b67      	ldr	r3, [pc, #412]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	4a66      	ldr	r2, [pc, #408]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006cf4:	f023 0304 	bic.w	r3, r3, #4
 8006cf8:	6213      	str	r3, [r2, #32]
 8006cfa:	e01c      	b.n	8006d36 <HAL_RCC_OscConfig+0x36e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2b05      	cmp	r3, #5
 8006d02:	d10c      	bne.n	8006d1e <HAL_RCC_OscConfig+0x356>
 8006d04:	4b61      	ldr	r3, [pc, #388]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	4a60      	ldr	r2, [pc, #384]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006d0a:	f043 0304 	orr.w	r3, r3, #4
 8006d0e:	6213      	str	r3, [r2, #32]
 8006d10:	4b5e      	ldr	r3, [pc, #376]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	4a5d      	ldr	r2, [pc, #372]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006d16:	f043 0301 	orr.w	r3, r3, #1
 8006d1a:	6213      	str	r3, [r2, #32]
 8006d1c:	e00b      	b.n	8006d36 <HAL_RCC_OscConfig+0x36e>
 8006d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	4a5a      	ldr	r2, [pc, #360]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006d24:	f023 0301 	bic.w	r3, r3, #1
 8006d28:	6213      	str	r3, [r2, #32]
 8006d2a:	4b58      	ldr	r3, [pc, #352]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	4a57      	ldr	r2, [pc, #348]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006d30:	f023 0304 	bic.w	r3, r3, #4
 8006d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d015      	beq.n	8006d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d3e:	f7fd f959 	bl	8003ff4 <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d44:	e00a      	b.n	8006d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d46:	f7fd f955 	bl	8003ff4 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e0b1      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0ee      	beq.n	8006d46 <HAL_RCC_OscConfig+0x37e>
 8006d68:	e014      	b.n	8006d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d6a:	f7fd f943 	bl	8003ff4 <HAL_GetTick>
 8006d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d70:	e00a      	b.n	8006d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d72:	f7fd f93f 	bl	8003ff4 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e09b      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d88:	4b40      	ldr	r3, [pc, #256]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ee      	bne.n	8006d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d105      	bne.n	8006da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	4a3b      	ldr	r2, [pc, #236]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 8087 	beq.w	8006ebe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006db0:	4b36      	ldr	r3, [pc, #216]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f003 030c 	and.w	r3, r3, #12
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d061      	beq.n	8006e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d146      	bne.n	8006e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc4:	4b33      	ldr	r3, [pc, #204]	@ (8006e94 <HAL_RCC_OscConfig+0x4cc>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dca:	f7fd f913 	bl	8003ff4 <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dd0:	e008      	b.n	8006de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd2:	f7fd f90f 	bl	8003ff4 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e06d      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006de4:	4b29      	ldr	r3, [pc, #164]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1f0      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006df8:	d108      	bne.n	8006e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006dfa:	4b24      	ldr	r3, [pc, #144]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	4921      	ldr	r1, [pc, #132]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a19      	ldr	r1, [r3, #32]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	491b      	ldr	r1, [pc, #108]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e24:	4b1b      	ldr	r3, [pc, #108]	@ (8006e94 <HAL_RCC_OscConfig+0x4cc>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e2a:	f7fd f8e3 	bl	8003ff4 <HAL_GetTick>
 8006e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e30:	e008      	b.n	8006e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e32:	f7fd f8df 	bl	8003ff4 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e03d      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e44:	4b11      	ldr	r3, [pc, #68]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0f0      	beq.n	8006e32 <HAL_RCC_OscConfig+0x46a>
 8006e50:	e035      	b.n	8006ebe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e52:	4b10      	ldr	r3, [pc, #64]	@ (8006e94 <HAL_RCC_OscConfig+0x4cc>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e58:	f7fd f8cc 	bl	8003ff4 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e60:	f7fd f8c8 	bl	8003ff4 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e026      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e72:	4b06      	ldr	r3, [pc, #24]	@ (8006e8c <HAL_RCC_OscConfig+0x4c4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f0      	bne.n	8006e60 <HAL_RCC_OscConfig+0x498>
 8006e7e:	e01e      	b.n	8006ebe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d107      	bne.n	8006e98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e019      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	40007000 	.word	0x40007000
 8006e94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e98:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <HAL_RCC_OscConfig+0x500>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d106      	bne.n	8006eba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d001      	beq.n	8006ebe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40021000 	.word	0x40021000

08006ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e0d0      	b.n	8007082 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800708c <HAL_RCC_ClockConfig+0x1c0>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0307 	and.w	r3, r3, #7
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d910      	bls.n	8006f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eee:	4b67      	ldr	r3, [pc, #412]	@ (800708c <HAL_RCC_ClockConfig+0x1c0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f023 0207 	bic.w	r2, r3, #7
 8006ef6:	4965      	ldr	r1, [pc, #404]	@ (800708c <HAL_RCC_ClockConfig+0x1c0>)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efe:	4b63      	ldr	r3, [pc, #396]	@ (800708c <HAL_RCC_ClockConfig+0x1c0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0307 	and.w	r3, r3, #7
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d001      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e0b8      	b.n	8007082 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d020      	beq.n	8006f5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f28:	4b59      	ldr	r3, [pc, #356]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	4a58      	ldr	r2, [pc, #352]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006f2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f40:	4b53      	ldr	r3, [pc, #332]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	4a52      	ldr	r2, [pc, #328]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006f46:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006f4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f4c:	4b50      	ldr	r3, [pc, #320]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	494d      	ldr	r1, [pc, #308]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d040      	beq.n	8006fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d107      	bne.n	8006f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f72:	4b47      	ldr	r3, [pc, #284]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d115      	bne.n	8006faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e07f      	b.n	8007082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d107      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f8a:	4b41      	ldr	r3, [pc, #260]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e073      	b.n	8007082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e06b      	b.n	8007082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006faa:	4b39      	ldr	r3, [pc, #228]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f023 0203 	bic.w	r2, r3, #3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	4936      	ldr	r1, [pc, #216]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fbc:	f7fd f81a 	bl	8003ff4 <HAL_GetTick>
 8006fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fc2:	e00a      	b.n	8006fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fc4:	f7fd f816 	bl	8003ff4 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e053      	b.n	8007082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fda:	4b2d      	ldr	r3, [pc, #180]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f003 020c 	and.w	r2, r3, #12
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d1eb      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fec:	4b27      	ldr	r3, [pc, #156]	@ (800708c <HAL_RCC_ClockConfig+0x1c0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d210      	bcs.n	800701c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ffa:	4b24      	ldr	r3, [pc, #144]	@ (800708c <HAL_RCC_ClockConfig+0x1c0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f023 0207 	bic.w	r2, r3, #7
 8007002:	4922      	ldr	r1, [pc, #136]	@ (800708c <HAL_RCC_ClockConfig+0x1c0>)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	4313      	orrs	r3, r2
 8007008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800700a:	4b20      	ldr	r3, [pc, #128]	@ (800708c <HAL_RCC_ClockConfig+0x1c0>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e032      	b.n	8007082 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d008      	beq.n	800703a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007028:	4b19      	ldr	r3, [pc, #100]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	4916      	ldr	r1, [pc, #88]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8007036:	4313      	orrs	r3, r2
 8007038:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0308 	and.w	r3, r3, #8
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007046:	4b12      	ldr	r3, [pc, #72]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	490e      	ldr	r1, [pc, #56]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8007056:	4313      	orrs	r3, r2
 8007058:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800705a:	f000 f821 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 800705e:	4602      	mov	r2, r0
 8007060:	4b0b      	ldr	r3, [pc, #44]	@ (8007090 <HAL_RCC_ClockConfig+0x1c4>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	091b      	lsrs	r3, r3, #4
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	490a      	ldr	r1, [pc, #40]	@ (8007094 <HAL_RCC_ClockConfig+0x1c8>)
 800706c:	5ccb      	ldrb	r3, [r1, r3]
 800706e:	fa22 f303 	lsr.w	r3, r2, r3
 8007072:	4a09      	ldr	r2, [pc, #36]	@ (8007098 <HAL_RCC_ClockConfig+0x1cc>)
 8007074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007076:	4b09      	ldr	r3, [pc, #36]	@ (800709c <HAL_RCC_ClockConfig+0x1d0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4618      	mov	r0, r3
 800707c:	f7fc ff78 	bl	8003f70 <HAL_InitTick>

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	40022000 	.word	0x40022000
 8007090:	40021000 	.word	0x40021000
 8007094:	0800df7c 	.word	0x0800df7c
 8007098:	20000028 	.word	0x20000028
 800709c:	2000002c 	.word	0x2000002c

080070a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070a0:	b490      	push	{r4, r7}
 80070a2:	b08a      	sub	sp, #40	@ 0x28
 80070a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80070a6:	4b29      	ldr	r3, [pc, #164]	@ (800714c <HAL_RCC_GetSysClockFreq+0xac>)
 80070a8:	1d3c      	adds	r4, r7, #4
 80070aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80070b0:	f240 2301 	movw	r3, #513	@ 0x201
 80070b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	2300      	movs	r3, #0
 80070bc:	61bb      	str	r3, [r7, #24]
 80070be:	2300      	movs	r3, #0
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80070ca:	4b21      	ldr	r3, [pc, #132]	@ (8007150 <HAL_RCC_GetSysClockFreq+0xb0>)
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f003 030c 	and.w	r3, r3, #12
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d002      	beq.n	80070e0 <HAL_RCC_GetSysClockFreq+0x40>
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d003      	beq.n	80070e6 <HAL_RCC_GetSysClockFreq+0x46>
 80070de:	e02b      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80070e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007154 <HAL_RCC_GetSysClockFreq+0xb4>)
 80070e2:	623b      	str	r3, [r7, #32]
      break;
 80070e4:	e02b      	b.n	800713e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	0c9b      	lsrs	r3, r3, #18
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	3328      	adds	r3, #40	@ 0x28
 80070f0:	443b      	add	r3, r7
 80070f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80070f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d012      	beq.n	8007128 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007102:	4b13      	ldr	r3, [pc, #76]	@ (8007150 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	0c5b      	lsrs	r3, r3, #17
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	3328      	adds	r3, #40	@ 0x28
 800710e:	443b      	add	r3, r7
 8007110:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007114:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	4a0e      	ldr	r2, [pc, #56]	@ (8007154 <HAL_RCC_GetSysClockFreq+0xb4>)
 800711a:	fb03 f202 	mul.w	r2, r3, r2
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	fbb2 f3f3 	udiv	r3, r2, r3
 8007124:	627b      	str	r3, [r7, #36]	@ 0x24
 8007126:	e004      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	4a0b      	ldr	r2, [pc, #44]	@ (8007158 <HAL_RCC_GetSysClockFreq+0xb8>)
 800712c:	fb02 f303 	mul.w	r3, r2, r3
 8007130:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8007132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007134:	623b      	str	r3, [r7, #32]
      break;
 8007136:	e002      	b.n	800713e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007138:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <HAL_RCC_GetSysClockFreq+0xb4>)
 800713a:	623b      	str	r3, [r7, #32]
      break;
 800713c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800713e:	6a3b      	ldr	r3, [r7, #32]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3728      	adds	r7, #40	@ 0x28
 8007144:	46bd      	mov	sp, r7
 8007146:	bc90      	pop	{r4, r7}
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	0800df14 	.word	0x0800df14
 8007150:	40021000 	.word	0x40021000
 8007154:	007a1200 	.word	0x007a1200
 8007158:	003d0900 	.word	0x003d0900

0800715c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007160:	4b02      	ldr	r3, [pc, #8]	@ (800716c <HAL_RCC_GetHCLKFreq+0x10>)
 8007162:	681b      	ldr	r3, [r3, #0]
}
 8007164:	4618      	mov	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr
 800716c:	20000028 	.word	0x20000028

08007170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007174:	f7ff fff2 	bl	800715c <HAL_RCC_GetHCLKFreq>
 8007178:	4602      	mov	r2, r0
 800717a:	4b05      	ldr	r3, [pc, #20]	@ (8007190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	0a1b      	lsrs	r3, r3, #8
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	4903      	ldr	r1, [pc, #12]	@ (8007194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007186:	5ccb      	ldrb	r3, [r1, r3]
 8007188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800718c:	4618      	mov	r0, r3
 800718e:	bd80      	pop	{r7, pc}
 8007190:	40021000 	.word	0x40021000
 8007194:	0800df8c 	.word	0x0800df8c

08007198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800719c:	f7ff ffde 	bl	800715c <HAL_RCC_GetHCLKFreq>
 80071a0:	4602      	mov	r2, r0
 80071a2:	4b05      	ldr	r3, [pc, #20]	@ (80071b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	0adb      	lsrs	r3, r3, #11
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	4903      	ldr	r1, [pc, #12]	@ (80071bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80071ae:	5ccb      	ldrb	r3, [r1, r3]
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40021000 	.word	0x40021000
 80071bc:	0800df8c 	.word	0x0800df8c

080071c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80071c8:	4b0a      	ldr	r3, [pc, #40]	@ (80071f4 <RCC_Delay+0x34>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a0a      	ldr	r2, [pc, #40]	@ (80071f8 <RCC_Delay+0x38>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	0a5b      	lsrs	r3, r3, #9
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	fb02 f303 	mul.w	r3, r2, r3
 80071da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80071dc:	bf00      	nop
  }
  while (Delay --);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	1e5a      	subs	r2, r3, #1
 80071e2:	60fa      	str	r2, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1f9      	bne.n	80071dc <RCC_Delay+0x1c>
}
 80071e8:	bf00      	nop
 80071ea:	bf00      	nop
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bc80      	pop	{r7}
 80071f2:	4770      	bx	lr
 80071f4:	20000028 	.word	0x20000028
 80071f8:	10624dd3 	.word	0x10624dd3

080071fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	613b      	str	r3, [r7, #16]
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b00      	cmp	r3, #0
 8007216:	d07d      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007218:	2300      	movs	r3, #0
 800721a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800721c:	4b4f      	ldr	r3, [pc, #316]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10d      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007228:	4b4c      	ldr	r3, [pc, #304]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	4a4b      	ldr	r2, [pc, #300]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800722e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007232:	61d3      	str	r3, [r2, #28]
 8007234:	4b49      	ldr	r3, [pc, #292]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007244:	4b46      	ldr	r3, [pc, #280]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d118      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007250:	4b43      	ldr	r3, [pc, #268]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a42      	ldr	r2, [pc, #264]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800725a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800725c:	f7fc feca 	bl	8003ff4 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007262:	e008      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007264:	f7fc fec6 	bl	8003ff4 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b64      	cmp	r3, #100	@ 0x64
 8007270:	d901      	bls.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e06d      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007276:	4b3a      	ldr	r3, [pc, #232]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f0      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007282:	4b36      	ldr	r3, [pc, #216]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800728a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d02e      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	429a      	cmp	r2, r3
 800729e:	d027      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a0:	4b2e      	ldr	r3, [pc, #184]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072aa:	4b2e      	ldr	r3, [pc, #184]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072ac:	2201      	movs	r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072b0:	4b2c      	ldr	r3, [pc, #176]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80072b6:	4a29      	ldr	r2, [pc, #164]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d014      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c6:	f7fc fe95 	bl	8003ff4 <HAL_GetTick>
 80072ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072cc:	e00a      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ce:	f7fc fe91 	bl	8003ff4 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072dc:	4293      	cmp	r3, r2
 80072de:	d901      	bls.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e036      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e4:	4b1d      	ldr	r3, [pc, #116]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0ee      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072f0:	4b1a      	ldr	r3, [pc, #104]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	4917      	ldr	r1, [pc, #92]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d105      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007308:	4b14      	ldr	r3, [pc, #80]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	4a13      	ldr	r2, [pc, #76]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800730e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007312:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d008      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007320:	4b0e      	ldr	r3, [pc, #56]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	490b      	ldr	r1, [pc, #44]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732e:	4313      	orrs	r3, r2
 8007330:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	2b00      	cmp	r3, #0
 800733c:	d008      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800733e:	4b07      	ldr	r3, [pc, #28]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	4904      	ldr	r1, [pc, #16]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800734c:	4313      	orrs	r3, r2
 800734e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	40021000 	.word	0x40021000
 8007360:	40007000 	.word	0x40007000
 8007364:	42420440 	.word	0x42420440

08007368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e076      	b.n	8007468 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737e:	2b00      	cmp	r3, #0
 8007380:	d108      	bne.n	8007394 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800738a:	d009      	beq.n	80073a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	61da      	str	r2, [r3, #28]
 8007392:	e005      	b.n	80073a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fc fc50 	bl	8003c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007424:	ea42 0103 	orr.w	r1, r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	0c1a      	lsrs	r2, r3, #16
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f002 0204 	and.w	r2, r2, #4
 8007446:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	69da      	ldr	r2, [r3, #28]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007456:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08c      	sub	sp, #48	@ 0x30
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800747e:	2301      	movs	r3, #1
 8007480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_SPI_TransmitReceive+0x26>
 8007492:	2302      	movs	r3, #2
 8007494:	e18a      	b.n	80077ac <HAL_SPI_TransmitReceive+0x33c>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800749e:	f7fc fda9 	bl	8003ff4 <HAL_GetTick>
 80074a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074b4:	887b      	ldrh	r3, [r7, #2]
 80074b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d00f      	beq.n	80074e0 <HAL_SPI_TransmitReceive+0x70>
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074c6:	d107      	bne.n	80074d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d103      	bne.n	80074d8 <HAL_SPI_TransmitReceive+0x68>
 80074d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d003      	beq.n	80074e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80074d8:	2302      	movs	r3, #2
 80074da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80074de:	e15b      	b.n	8007798 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d005      	beq.n	80074f2 <HAL_SPI_TransmitReceive+0x82>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <HAL_SPI_TransmitReceive+0x82>
 80074ec:	887b      	ldrh	r3, [r7, #2]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d103      	bne.n	80074fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80074f8:	e14e      	b.n	8007798 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b04      	cmp	r3, #4
 8007504:	d003      	beq.n	800750e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2205      	movs	r2, #5
 800750a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	887a      	ldrh	r2, [r7, #2]
 800751e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	887a      	ldrh	r2, [r7, #2]
 8007524:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	887a      	ldrh	r2, [r7, #2]
 8007530:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	887a      	ldrh	r2, [r7, #2]
 8007536:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754e:	2b40      	cmp	r3, #64	@ 0x40
 8007550:	d007      	beq.n	8007562 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007560:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800756a:	d178      	bne.n	800765e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <HAL_SPI_TransmitReceive+0x10a>
 8007574:	8b7b      	ldrh	r3, [r7, #26]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d166      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757e:	881a      	ldrh	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758a:	1c9a      	adds	r2, r3, #2
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800759e:	e053      	b.n	8007648 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d11b      	bne.n	80075e6 <HAL_SPI_TransmitReceive+0x176>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d016      	beq.n	80075e6 <HAL_SPI_TransmitReceive+0x176>
 80075b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d113      	bne.n	80075e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c2:	881a      	ldrh	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ce:	1c9a      	adds	r2, r3, #2
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3b01      	subs	r3, #1
 80075dc:	b29a      	uxth	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d119      	bne.n	8007628 <HAL_SPI_TransmitReceive+0x1b8>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d014      	beq.n	8007628 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007608:	b292      	uxth	r2, r2
 800760a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007610:	1c9a      	adds	r2, r3, #2
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007624:	2301      	movs	r3, #1
 8007626:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007628:	f7fc fce4 	bl	8003ff4 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007634:	429a      	cmp	r2, r3
 8007636:	d807      	bhi.n	8007648 <HAL_SPI_TransmitReceive+0x1d8>
 8007638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763e:	d003      	beq.n	8007648 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007646:	e0a7      	b.n	8007798 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1a6      	bne.n	80075a0 <HAL_SPI_TransmitReceive+0x130>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007656:	b29b      	uxth	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1a1      	bne.n	80075a0 <HAL_SPI_TransmitReceive+0x130>
 800765c:	e07c      	b.n	8007758 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <HAL_SPI_TransmitReceive+0x1fc>
 8007666:	8b7b      	ldrh	r3, [r7, #26]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d16b      	bne.n	8007744 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	330c      	adds	r3, #12
 8007676:	7812      	ldrb	r2, [r2, #0]
 8007678:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007692:	e057      	b.n	8007744 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d11c      	bne.n	80076dc <HAL_SPI_TransmitReceive+0x26c>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d017      	beq.n	80076dc <HAL_SPI_TransmitReceive+0x26c>
 80076ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d114      	bne.n	80076dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	330c      	adds	r3, #12
 80076bc:	7812      	ldrb	r2, [r2, #0]
 80076be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	3b01      	subs	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d119      	bne.n	800771e <HAL_SPI_TransmitReceive+0x2ae>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d014      	beq.n	800771e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b29a      	uxth	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800771a:	2301      	movs	r3, #1
 800771c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800771e:	f7fc fc69 	bl	8003ff4 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800772a:	429a      	cmp	r2, r3
 800772c:	d803      	bhi.n	8007736 <HAL_SPI_TransmitReceive+0x2c6>
 800772e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007734:	d102      	bne.n	800773c <HAL_SPI_TransmitReceive+0x2cc>
 8007736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007738:	2b00      	cmp	r3, #0
 800773a:	d103      	bne.n	8007744 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007742:	e029      	b.n	8007798 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1a2      	bne.n	8007694 <HAL_SPI_TransmitReceive+0x224>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d19d      	bne.n	8007694 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800775a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f8b1 	bl	80078c4 <SPI_EndRxTxTransaction>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d006      	beq.n	8007776 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2220      	movs	r2, #32
 8007772:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007774:	e010      	b.n	8007798 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10b      	bne.n	8007796 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	e000      	b.n	8007798 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007796:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80077a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3730      	adds	r7, #48	@ 0x30
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	4613      	mov	r3, r2
 80077c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077c4:	f7fc fc16 	bl	8003ff4 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077cc:	1a9b      	subs	r3, r3, r2
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	4413      	add	r3, r2
 80077d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077d4:	f7fc fc0e 	bl	8003ff4 <HAL_GetTick>
 80077d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077da:	4b39      	ldr	r3, [pc, #228]	@ (80078c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	015b      	lsls	r3, r3, #5
 80077e0:	0d1b      	lsrs	r3, r3, #20
 80077e2:	69fa      	ldr	r2, [r7, #28]
 80077e4:	fb02 f303 	mul.w	r3, r2, r3
 80077e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ea:	e054      	b.n	8007896 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f2:	d050      	beq.n	8007896 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077f4:	f7fc fbfe 	bl	8003ff4 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	429a      	cmp	r2, r3
 8007802:	d902      	bls.n	800780a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d13d      	bne.n	8007886 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007818:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007822:	d111      	bne.n	8007848 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800782c:	d004      	beq.n	8007838 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007836:	d107      	bne.n	8007848 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007846:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007850:	d10f      	bne.n	8007872 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007870:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e017      	b.n	80078b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	3b01      	subs	r3, #1
 8007894:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4013      	ands	r3, r2
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	bf0c      	ite	eq
 80078a6:	2301      	moveq	r3, #1
 80078a8:	2300      	movne	r3, #0
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	461a      	mov	r2, r3
 80078ae:	79fb      	ldrb	r3, [r7, #7]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d19b      	bne.n	80077ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3720      	adds	r7, #32
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000028 	.word	0x20000028

080078c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af02      	add	r7, sp, #8
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2200      	movs	r2, #0
 80078d8:	2180      	movs	r1, #128	@ 0x80
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7ff ff6a 	bl	80077b4 <SPI_WaitFlagStateUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d007      	beq.n	80078f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ea:	f043 0220 	orr.w	r2, r3, #32
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e000      	b.n	80078f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e041      	b.n	8007996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fc f9e4 	bl	8003cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3304      	adds	r3, #4
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f000 fa70 	bl	8007e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d001      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e03a      	b.n	8007a2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a18      	ldr	r2, [pc, #96]	@ (8007a38 <HAL_TIM_Base_Start_IT+0x98>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00e      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x58>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079e2:	d009      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x58>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a14      	ldr	r2, [pc, #80]	@ (8007a3c <HAL_TIM_Base_Start_IT+0x9c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d004      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x58>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a13      	ldr	r2, [pc, #76]	@ (8007a40 <HAL_TIM_Base_Start_IT+0xa0>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d111      	bne.n	8007a1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b06      	cmp	r3, #6
 8007a08:	d010      	beq.n	8007a2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0201 	orr.w	r2, r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1a:	e007      	b.n	8007a2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr
 8007a38:	40012c00 	.word	0x40012c00
 8007a3c:	40000400 	.word	0x40000400
 8007a40:	40000800 	.word	0x40000800

08007a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d122      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d11b      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0202 	mvn.w	r2, #2
 8007a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f9b1 	bl	8007dee <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f9a4 	bl	8007ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f9b3 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d122      	bne.n	8007af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d11b      	bne.n	8007af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f06f 0204 	mvn.w	r2, #4
 8007ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f987 	bl	8007dee <HAL_TIM_IC_CaptureCallback>
 8007ae0:	e005      	b.n	8007aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f97a 	bl	8007ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f989 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0308 	and.w	r3, r3, #8
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	d122      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d11b      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0208 	mvn.w	r2, #8
 8007b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2204      	movs	r2, #4
 8007b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f95d 	bl	8007dee <HAL_TIM_IC_CaptureCallback>
 8007b34:	e005      	b.n	8007b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f950 	bl	8007ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f95f 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	2b10      	cmp	r3, #16
 8007b54:	d122      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0310 	and.w	r3, r3, #16
 8007b60:	2b10      	cmp	r3, #16
 8007b62:	d11b      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0210 	mvn.w	r2, #16
 8007b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2208      	movs	r2, #8
 8007b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f933 	bl	8007dee <HAL_TIM_IC_CaptureCallback>
 8007b88:	e005      	b.n	8007b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f926 	bl	8007ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f935 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d10e      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d107      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0201 	mvn.w	r2, #1
 8007bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7f9 f86c 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd2:	2b80      	cmp	r3, #128	@ 0x80
 8007bd4:	d10e      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be0:	2b80      	cmp	r3, #128	@ 0x80
 8007be2:	d107      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fa77 	bl	80080e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bfe:	2b40      	cmp	r3, #64	@ 0x40
 8007c00:	d10e      	bne.n	8007c20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0c:	2b40      	cmp	r3, #64	@ 0x40
 8007c0e:	d107      	bne.n	8007c20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f8f9 	bl	8007e12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0320 	and.w	r3, r3, #32
 8007c2a:	2b20      	cmp	r3, #32
 8007c2c:	d10e      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f003 0320 	and.w	r3, r3, #32
 8007c38:	2b20      	cmp	r3, #32
 8007c3a:	d107      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f06f 0220 	mvn.w	r2, #32
 8007c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa42 	bl	80080d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d101      	bne.n	8007c6c <HAL_TIM_ConfigClockSource+0x18>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	e0b3      	b.n	8007dd4 <HAL_TIM_ConfigClockSource+0x180>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007c8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ca4:	d03e      	beq.n	8007d24 <HAL_TIM_ConfigClockSource+0xd0>
 8007ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007caa:	f200 8087 	bhi.w	8007dbc <HAL_TIM_ConfigClockSource+0x168>
 8007cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cb2:	f000 8085 	beq.w	8007dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8007cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cba:	d87f      	bhi.n	8007dbc <HAL_TIM_ConfigClockSource+0x168>
 8007cbc:	2b70      	cmp	r3, #112	@ 0x70
 8007cbe:	d01a      	beq.n	8007cf6 <HAL_TIM_ConfigClockSource+0xa2>
 8007cc0:	2b70      	cmp	r3, #112	@ 0x70
 8007cc2:	d87b      	bhi.n	8007dbc <HAL_TIM_ConfigClockSource+0x168>
 8007cc4:	2b60      	cmp	r3, #96	@ 0x60
 8007cc6:	d050      	beq.n	8007d6a <HAL_TIM_ConfigClockSource+0x116>
 8007cc8:	2b60      	cmp	r3, #96	@ 0x60
 8007cca:	d877      	bhi.n	8007dbc <HAL_TIM_ConfigClockSource+0x168>
 8007ccc:	2b50      	cmp	r3, #80	@ 0x50
 8007cce:	d03c      	beq.n	8007d4a <HAL_TIM_ConfigClockSource+0xf6>
 8007cd0:	2b50      	cmp	r3, #80	@ 0x50
 8007cd2:	d873      	bhi.n	8007dbc <HAL_TIM_ConfigClockSource+0x168>
 8007cd4:	2b40      	cmp	r3, #64	@ 0x40
 8007cd6:	d058      	beq.n	8007d8a <HAL_TIM_ConfigClockSource+0x136>
 8007cd8:	2b40      	cmp	r3, #64	@ 0x40
 8007cda:	d86f      	bhi.n	8007dbc <HAL_TIM_ConfigClockSource+0x168>
 8007cdc:	2b30      	cmp	r3, #48	@ 0x30
 8007cde:	d064      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x156>
 8007ce0:	2b30      	cmp	r3, #48	@ 0x30
 8007ce2:	d86b      	bhi.n	8007dbc <HAL_TIM_ConfigClockSource+0x168>
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	d060      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x156>
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	d867      	bhi.n	8007dbc <HAL_TIM_ConfigClockSource+0x168>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d05c      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x156>
 8007cf0:	2b10      	cmp	r3, #16
 8007cf2:	d05a      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007cf4:	e062      	b.n	8007dbc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	6899      	ldr	r1, [r3, #8]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f000 f966 	bl	8007fd6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	609a      	str	r2, [r3, #8]
      break;
 8007d22:	e04e      	b.n	8007dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	6899      	ldr	r1, [r3, #8]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f000 f94f 	bl	8007fd6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689a      	ldr	r2, [r3, #8]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d46:	609a      	str	r2, [r3, #8]
      break;
 8007d48:	e03b      	b.n	8007dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6818      	ldr	r0, [r3, #0]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	6859      	ldr	r1, [r3, #4]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f000 f8c6 	bl	8007ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2150      	movs	r1, #80	@ 0x50
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 f91d 	bl	8007fa2 <TIM_ITRx_SetConfig>
      break;
 8007d68:	e02b      	b.n	8007dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	6859      	ldr	r1, [r3, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	461a      	mov	r2, r3
 8007d78:	f000 f8e4 	bl	8007f44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2160      	movs	r1, #96	@ 0x60
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f90d 	bl	8007fa2 <TIM_ITRx_SetConfig>
      break;
 8007d88:	e01b      	b.n	8007dc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	6859      	ldr	r1, [r3, #4]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	461a      	mov	r2, r3
 8007d98:	f000 f8a6 	bl	8007ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2140      	movs	r1, #64	@ 0x40
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 f8fd 	bl	8007fa2 <TIM_ITRx_SetConfig>
      break;
 8007da8:	e00b      	b.n	8007dc2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f000 f8f4 	bl	8007fa2 <TIM_ITRx_SetConfig>
        break;
 8007dba:	e002      	b.n	8007dc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007dbc:	bf00      	nop
 8007dbe:	e000      	b.n	8007dc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007dc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr

08007dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bc80      	pop	{r7}
 8007dfe:	4770      	bx	lr

08007e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr

08007e12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a29      	ldr	r2, [pc, #164]	@ (8007edc <TIM_Base_SetConfig+0xb8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00b      	beq.n	8007e54 <TIM_Base_SetConfig+0x30>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e42:	d007      	beq.n	8007e54 <TIM_Base_SetConfig+0x30>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a26      	ldr	r2, [pc, #152]	@ (8007ee0 <TIM_Base_SetConfig+0xbc>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_Base_SetConfig+0x30>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a25      	ldr	r2, [pc, #148]	@ (8007ee4 <TIM_Base_SetConfig+0xc0>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d108      	bne.n	8007e66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a1c      	ldr	r2, [pc, #112]	@ (8007edc <TIM_Base_SetConfig+0xb8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00b      	beq.n	8007e86 <TIM_Base_SetConfig+0x62>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e74:	d007      	beq.n	8007e86 <TIM_Base_SetConfig+0x62>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a19      	ldr	r2, [pc, #100]	@ (8007ee0 <TIM_Base_SetConfig+0xbc>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d003      	beq.n	8007e86 <TIM_Base_SetConfig+0x62>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a18      	ldr	r2, [pc, #96]	@ (8007ee4 <TIM_Base_SetConfig+0xc0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d108      	bne.n	8007e98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a07      	ldr	r2, [pc, #28]	@ (8007edc <TIM_Base_SetConfig+0xb8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d103      	bne.n	8007ecc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	691a      	ldr	r2, [r3, #16]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	615a      	str	r2, [r3, #20]
}
 8007ed2:	bf00      	nop
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bc80      	pop	{r7}
 8007eda:	4770      	bx	lr
 8007edc:	40012c00 	.word	0x40012c00
 8007ee0:	40000400 	.word	0x40000400
 8007ee4:	40000800 	.word	0x40000800

08007ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	f023 0201 	bic.w	r2, r3, #1
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f023 030a 	bic.w	r3, r3, #10
 8007f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	621a      	str	r2, [r3, #32]
}
 8007f3a:	bf00      	nop
 8007f3c:	371c      	adds	r7, #28
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr

08007f44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b087      	sub	sp, #28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	f023 0210 	bic.w	r2, r3, #16
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	031b      	lsls	r3, r3, #12
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	621a      	str	r2, [r3, #32]
}
 8007f98:	bf00      	nop
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bc80      	pop	{r7}
 8007fa0:	4770      	bx	lr

08007fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b085      	sub	sp, #20
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	f043 0307 	orr.w	r3, r3, #7
 8007fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	609a      	str	r2, [r3, #8]
}
 8007fcc:	bf00      	nop
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr

08007fd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b087      	sub	sp, #28
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	607a      	str	r2, [r7, #4]
 8007fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	021a      	lsls	r2, r3, #8
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	609a      	str	r2, [r3, #8]
}
 800800a:	bf00      	nop
 800800c:	371c      	adds	r7, #28
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr

08008014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008028:	2302      	movs	r3, #2
 800802a:	e046      	b.n	80080ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a16      	ldr	r2, [pc, #88]	@ (80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00e      	beq.n	800808e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008078:	d009      	beq.n	800808e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a12      	ldr	r2, [pc, #72]	@ (80080c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d004      	beq.n	800808e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a10      	ldr	r2, [pc, #64]	@ (80080cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d10c      	bne.n	80080a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	4313      	orrs	r3, r2
 800809e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr
 80080c4:	40012c00 	.word	0x40012c00
 80080c8:	40000400 	.word	0x40000400
 80080cc:	40000800 	.word	0x40000800

080080d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	bc80      	pop	{r7}
 80080e0:	4770      	bx	lr

080080e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b083      	sub	sp, #12
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr

080080f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e03f      	b.n	8008186 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7fb fe0e 	bl	8003d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2224      	movs	r2, #36	@ 0x24
 8008124:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f9a3 	bl	8008484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	691a      	ldr	r2, [r3, #16]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800814c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	695a      	ldr	r2, [r3, #20]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800815c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800816c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2220      	movs	r2, #32
 8008178:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b08a      	sub	sp, #40	@ 0x28
 8008192:	af02      	add	r7, sp, #8
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	4613      	mov	r3, r2
 800819c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b20      	cmp	r3, #32
 80081ac:	d17c      	bne.n	80082a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <HAL_UART_Transmit+0x2c>
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e075      	b.n	80082aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d101      	bne.n	80081cc <HAL_UART_Transmit+0x3e>
 80081c8:	2302      	movs	r3, #2
 80081ca:	e06e      	b.n	80082aa <HAL_UART_Transmit+0x11c>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2221      	movs	r2, #33	@ 0x21
 80081de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80081e2:	f7fb ff07 	bl	8003ff4 <HAL_GetTick>
 80081e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	88fa      	ldrh	r2, [r7, #6]
 80081ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	88fa      	ldrh	r2, [r7, #6]
 80081f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081fc:	d108      	bne.n	8008210 <HAL_UART_Transmit+0x82>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d104      	bne.n	8008210 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008206:	2300      	movs	r3, #0
 8008208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	e003      	b.n	8008218 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008214:	2300      	movs	r3, #0
 8008216:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8008220:	e02a      	b.n	8008278 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2200      	movs	r2, #0
 800822a:	2180      	movs	r1, #128	@ 0x80
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 f8df 	bl	80083f0 <UART_WaitOnFlagUntilTimeout>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e036      	b.n	80082aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10b      	bne.n	800825a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008250:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	3302      	adds	r3, #2
 8008256:	61bb      	str	r3, [r7, #24]
 8008258:	e007      	b.n	800826a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	781a      	ldrb	r2, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	3301      	adds	r3, #1
 8008268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800826e:	b29b      	uxth	r3, r3
 8008270:	3b01      	subs	r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800827c:	b29b      	uxth	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1cf      	bne.n	8008222 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2200      	movs	r2, #0
 800828a:	2140      	movs	r1, #64	@ 0x40
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 f8af 	bl	80083f0 <UART_WaitOnFlagUntilTimeout>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e006      	b.n	80082aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	e000      	b.n	80082aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80082a8:	2302      	movs	r3, #2
  }
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3720      	adds	r7, #32
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b08a      	sub	sp, #40	@ 0x28
 80082b6:	af02      	add	r7, sp, #8
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	603b      	str	r3, [r7, #0]
 80082be:	4613      	mov	r3, r2
 80082c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	f040 8089 	bne.w	80083e6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <HAL_UART_Receive+0x2e>
 80082da:	88fb      	ldrh	r3, [r7, #6]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e081      	b.n	80083e8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_UART_Receive+0x40>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e07a      	b.n	80083e8 <HAL_UART_Receive+0x136>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2222      	movs	r2, #34	@ 0x22
 8008304:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008308:	f7fb fe74 	bl	8003ff4 <HAL_GetTick>
 800830c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	88fa      	ldrh	r2, [r7, #6]
 8008312:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	88fa      	ldrh	r2, [r7, #6]
 8008318:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008322:	d108      	bne.n	8008336 <HAL_UART_Receive+0x84>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800832c:	2300      	movs	r3, #0
 800832e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	61bb      	str	r3, [r7, #24]
 8008334:	e003      	b.n	800833e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800833a:	2300      	movs	r3, #0
 800833c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008346:	e043      	b.n	80083d0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2200      	movs	r2, #0
 8008350:	2120      	movs	r1, #32
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 f84c 	bl	80083f0 <UART_WaitOnFlagUntilTimeout>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e042      	b.n	80083e8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10c      	bne.n	8008382 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	b29b      	uxth	r3, r3
 8008370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008374:	b29a      	uxth	r2, r3
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	3302      	adds	r3, #2
 800837e:	61bb      	str	r3, [r7, #24]
 8008380:	e01f      	b.n	80083c2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800838a:	d007      	beq.n	800839c <HAL_UART_Receive+0xea>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <HAL_UART_Receive+0xf8>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d106      	bne.n	80083aa <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	e008      	b.n	80083bc <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	3301      	adds	r3, #1
 80083c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1b6      	bne.n	8008348 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2220      	movs	r2, #32
 80083de:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	e000      	b.n	80083e8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80083e6:	2302      	movs	r3, #2
  }
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3720      	adds	r7, #32
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	603b      	str	r3, [r7, #0]
 80083fc:	4613      	mov	r3, r2
 80083fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008400:	e02c      	b.n	800845c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008408:	d028      	beq.n	800845c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d007      	beq.n	8008420 <UART_WaitOnFlagUntilTimeout+0x30>
 8008410:	f7fb fdf0 	bl	8003ff4 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	429a      	cmp	r2, r3
 800841e:	d21d      	bcs.n	800845c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800842e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	695a      	ldr	r2, [r3, #20]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0201 	bic.w	r2, r2, #1
 800843e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2220      	movs	r2, #32
 800844c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e00f      	b.n	800847c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	4013      	ands	r3, r2
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	429a      	cmp	r2, r3
 800846a:	bf0c      	ite	eq
 800846c:	2301      	moveq	r3, #1
 800846e:	2300      	movne	r3, #0
 8008470:	b2db      	uxtb	r3, r3
 8008472:	461a      	mov	r2, r3
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	429a      	cmp	r2, r3
 8008478:	d0c3      	beq.n	8008402 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80084be:	f023 030c 	bic.w	r3, r3, #12
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	6812      	ldr	r2, [r2, #0]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	430b      	orrs	r3, r1
 80084ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	699a      	ldr	r2, [r3, #24]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008598 <UART_SetConfig+0x114>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d103      	bne.n	80084f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80084ec:	f7fe fe54 	bl	8007198 <HAL_RCC_GetPCLK2Freq>
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	e002      	b.n	80084fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80084f4:	f7fe fe3c 	bl	8007170 <HAL_RCC_GetPCLK1Freq>
 80084f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	009a      	lsls	r2, r3, #2
 8008504:	441a      	add	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008510:	4a22      	ldr	r2, [pc, #136]	@ (800859c <UART_SetConfig+0x118>)
 8008512:	fba2 2303 	umull	r2, r3, r2, r3
 8008516:	095b      	lsrs	r3, r3, #5
 8008518:	0119      	lsls	r1, r3, #4
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009a      	lsls	r2, r3, #2
 8008524:	441a      	add	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008530:	4b1a      	ldr	r3, [pc, #104]	@ (800859c <UART_SetConfig+0x118>)
 8008532:	fba3 0302 	umull	r0, r3, r3, r2
 8008536:	095b      	lsrs	r3, r3, #5
 8008538:	2064      	movs	r0, #100	@ 0x64
 800853a:	fb00 f303 	mul.w	r3, r0, r3
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	3332      	adds	r3, #50	@ 0x32
 8008544:	4a15      	ldr	r2, [pc, #84]	@ (800859c <UART_SetConfig+0x118>)
 8008546:	fba2 2303 	umull	r2, r3, r2, r3
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008550:	4419      	add	r1, r3
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	4613      	mov	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	009a      	lsls	r2, r3, #2
 800855c:	441a      	add	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	fbb2 f2f3 	udiv	r2, r2, r3
 8008568:	4b0c      	ldr	r3, [pc, #48]	@ (800859c <UART_SetConfig+0x118>)
 800856a:	fba3 0302 	umull	r0, r3, r3, r2
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	2064      	movs	r0, #100	@ 0x64
 8008572:	fb00 f303 	mul.w	r3, r0, r3
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	011b      	lsls	r3, r3, #4
 800857a:	3332      	adds	r3, #50	@ 0x32
 800857c:	4a07      	ldr	r2, [pc, #28]	@ (800859c <UART_SetConfig+0x118>)
 800857e:	fba2 2303 	umull	r2, r3, r2, r3
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	f003 020f 	and.w	r2, r3, #15
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	440a      	add	r2, r1
 800858e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	40013800 	.word	0x40013800
 800859c:	51eb851f 	.word	0x51eb851f

080085a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80085a0:	b084      	sub	sp, #16
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	f107 0014 	add.w	r0, r7, #20
 80085ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bc80      	pop	{r7}
 80085bc:	b004      	add	sp, #16
 80085be:	4770      	bx	lr

080085c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80085d0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80085d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	b29a      	uxth	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bc80      	pop	{r7}
 80085ea:	4770      	bx	lr

080085ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80085f4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80085f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	b29b      	uxth	r3, r3
 8008606:	43db      	mvns	r3, r3
 8008608:	b29b      	uxth	r3, r3
 800860a:	4013      	ands	r3, r2
 800860c:	b29a      	uxth	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr

08008620 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	bc80      	pop	{r7}
 8008636:	4770      	bx	lr

08008638 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008638:	b084      	sub	sp, #16
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	f107 0014 	add.w	r0, r7, #20
 8008646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	b004      	add	sp, #16
 8008676:	4770      	bx	lr

08008678 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008678:	b480      	push	{r7}
 800867a:	b09b      	sub	sp, #108	@ 0x6c
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800869a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	78db      	ldrb	r3, [r3, #3]
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d81f      	bhi.n	80086ea <USB_ActivateEndpoint+0x72>
 80086aa:	a201      	add	r2, pc, #4	@ (adr r2, 80086b0 <USB_ActivateEndpoint+0x38>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086c1 	.word	0x080086c1
 80086b4:	080086dd 	.word	0x080086dd
 80086b8:	080086f3 	.word	0x080086f3
 80086bc:	080086cf 	.word	0x080086cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80086c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80086c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086c8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 80086cc:	e012      	b.n	80086f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80086ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80086d2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80086d6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 80086da:	e00b      	b.n	80086f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80086dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80086e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80086e4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 80086e8:	e004      	b.n	80086f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 80086f0:	e000      	b.n	80086f4 <USB_ActivateEndpoint+0x7c>
      break;
 80086f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	441a      	add	r2, r3
 80086fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800870a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800870e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008712:	b29b      	uxth	r3, r3
 8008714:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	b29b      	uxth	r3, r3
 8008724:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800872c:	b29b      	uxth	r3, r3
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	7812      	ldrb	r2, [r2, #0]
 8008732:	4313      	orrs	r3, r2
 8008734:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	441a      	add	r2, r3
 8008742:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800874a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800874e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008756:	b29b      	uxth	r3, r3
 8008758:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	7b1b      	ldrb	r3, [r3, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f040 8149 	bne.w	80089f6 <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	785b      	ldrb	r3, [r3, #1]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 8084 	beq.w	8008876 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	617b      	str	r3, [r7, #20]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008778:	b29b      	uxth	r3, r3
 800877a:	461a      	mov	r2, r3
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	4413      	add	r3, r2
 8008780:	617b      	str	r3, [r7, #20]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	011a      	lsls	r2, r3, #4
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	4413      	add	r3, r2
 800878c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008790:	613b      	str	r3, [r7, #16]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	88db      	ldrh	r3, [r3, #6]
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	b29b      	uxth	r3, r3
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	b29a      	uxth	r2, r3
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	81fb      	strh	r3, [r7, #14]
 80087b0:	89fb      	ldrh	r3, [r7, #14]
 80087b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01b      	beq.n	80087f2 <USB_ActivateEndpoint+0x17a>
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087d0:	81bb      	strh	r3, [r7, #12]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	441a      	add	r2, r3
 80087dc:	89bb      	ldrh	r3, [r7, #12]
 80087de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	78db      	ldrb	r3, [r3, #3]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d020      	beq.n	800883c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	b29b      	uxth	r3, r3
 8008808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800880c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008810:	813b      	strh	r3, [r7, #8]
 8008812:	893b      	ldrh	r3, [r7, #8]
 8008814:	f083 0320 	eor.w	r3, r3, #32
 8008818:	813b      	strh	r3, [r7, #8]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	441a      	add	r2, r3
 8008824:	893b      	ldrh	r3, [r7, #8]
 8008826:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800882a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800882e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008836:	b29b      	uxth	r3, r3
 8008838:	8013      	strh	r3, [r2, #0]
 800883a:	e27f      	b.n	8008d3c <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29b      	uxth	r3, r3
 800884a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800884e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008852:	817b      	strh	r3, [r7, #10]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	441a      	add	r2, r3
 800885e:	897b      	ldrh	r3, [r7, #10]
 8008860:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008864:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800886c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008870:	b29b      	uxth	r3, r3
 8008872:	8013      	strh	r3, [r2, #0]
 8008874:	e262      	b.n	8008d3c <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008880:	b29b      	uxth	r3, r3
 8008882:	461a      	mov	r2, r3
 8008884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008886:	4413      	add	r3, r2
 8008888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	011a      	lsls	r2, r3, #4
 8008890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008892:	4413      	add	r3, r2
 8008894:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	88db      	ldrh	r3, [r3, #6]
 800889e:	085b      	lsrs	r3, r3, #1
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a8:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ba:	4413      	add	r3, r2
 80088bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	011a      	lsls	r2, r3, #4
 80088c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c6:	4413      	add	r3, r2
 80088c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80088cc:	623b      	str	r3, [r7, #32]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d112      	bne.n	80088fc <USB_ActivateEndpoint+0x284>
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	e02f      	b.n	800895c <USB_ActivateEndpoint+0x2e4>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b3e      	cmp	r3, #62	@ 0x3e
 8008902:	d813      	bhi.n	800892c <USB_ActivateEndpoint+0x2b4>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	663b      	str	r3, [r7, #96]	@ 0x60
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <USB_ActivateEndpoint+0x2a6>
 8008918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800891a:	3301      	adds	r3, #1
 800891c:	663b      	str	r3, [r7, #96]	@ 0x60
 800891e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008920:	b29b      	uxth	r3, r3
 8008922:	029b      	lsls	r3, r3, #10
 8008924:	b29a      	uxth	r2, r3
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	801a      	strh	r2, [r3, #0]
 800892a:	e017      	b.n	800895c <USB_ActivateEndpoint+0x2e4>
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	095b      	lsrs	r3, r3, #5
 8008932:	663b      	str	r3, [r7, #96]	@ 0x60
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	f003 031f 	and.w	r3, r3, #31
 800893c:	2b00      	cmp	r3, #0
 800893e:	d102      	bne.n	8008946 <USB_ActivateEndpoint+0x2ce>
 8008940:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008942:	3b01      	subs	r3, #1
 8008944:	663b      	str	r3, [r7, #96]	@ 0x60
 8008946:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008948:	b29b      	uxth	r3, r3
 800894a:	029b      	lsls	r3, r3, #10
 800894c:	b29b      	uxth	r3, r3
 800894e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008956:	b29a      	uxth	r2, r3
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	83fb      	strh	r3, [r7, #30]
 800896a:	8bfb      	ldrh	r3, [r7, #30]
 800896c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01b      	beq.n	80089ac <USB_ActivateEndpoint+0x334>
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	b29b      	uxth	r3, r3
 8008982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800898a:	83bb      	strh	r3, [r7, #28]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	441a      	add	r2, r3
 8008996:	8bbb      	ldrh	r3, [r7, #28]
 8008998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800899c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089c2:	837b      	strh	r3, [r7, #26]
 80089c4:	8b7b      	ldrh	r3, [r7, #26]
 80089c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089ca:	837b      	strh	r3, [r7, #26]
 80089cc:	8b7b      	ldrh	r3, [r7, #26]
 80089ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80089d2:	837b      	strh	r3, [r7, #26]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	441a      	add	r2, r3
 80089de:	8b7b      	ldrh	r3, [r7, #26]
 80089e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	8013      	strh	r3, [r2, #0]
 80089f4:	e1a2      	b.n	8008d3c <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a0c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	441a      	add	r2, r3
 8008a1a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008a1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a26:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	461a      	mov	r2, r3
 8008a40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a42:	4413      	add	r3, r2
 8008a44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	011a      	lsls	r2, r3, #4
 8008a4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a54:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	891b      	ldrh	r3, [r3, #8]
 8008a5a:	085b      	lsrs	r3, r3, #1
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	005b      	lsls	r3, r3, #1
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a64:	801a      	strh	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	461a      	mov	r2, r3
 8008a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a76:	4413      	add	r3, r2
 8008a78:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	011a      	lsls	r2, r3, #4
 8008a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	895b      	ldrh	r3, [r3, #10]
 8008a8e:	085b      	lsrs	r3, r3, #1
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	005b      	lsls	r3, r3, #1
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a98:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	785b      	ldrb	r3, [r3, #1]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f040 8091 	bne.w	8008bc6 <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008ab2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d01b      	beq.n	8008af4 <USB_ActivateEndpoint+0x47c>
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	881b      	ldrh	r3, [r3, #0]
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	441a      	add	r2, r3
 8008ade:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008ae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ae8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008b02:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01b      	beq.n	8008b44 <USB_ActivateEndpoint+0x4cc>
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b22:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	441a      	add	r2, r3
 8008b2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008b30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b5a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008b5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008b5e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008b62:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008b64:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008b66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b6a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	441a      	add	r2, r3
 8008b76:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ba2:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	441a      	add	r2, r3
 8008bae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	8013      	strh	r3, [r2, #0]
 8008bc4:	e0ba      	b.n	8008d3c <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008bd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01d      	beq.n	8008c1e <USB_ActivateEndpoint+0x5a6>
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	441a      	add	r2, r3
 8008c06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008c2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d01d      	beq.n	8008c76 <USB_ActivateEndpoint+0x5fe>
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c50:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	441a      	add	r2, r3
 8008c5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008c62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	78db      	ldrb	r3, [r3, #3]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d024      	beq.n	8008cc8 <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	881b      	ldrh	r3, [r3, #0]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c94:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008c98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008c9c:	f083 0320 	eor.w	r3, r3, #32
 8008ca0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	441a      	add	r2, r3
 8008cae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	8013      	strh	r3, [r2, #0]
 8008cc6:	e01d      	b.n	8008d04 <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cde:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	441a      	add	r2, r3
 8008cec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008cf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d1a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	441a      	add	r2, r3
 8008d26:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008d28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008d3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	376c      	adds	r7, #108	@ 0x6c
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop

08008d4c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b08d      	sub	sp, #52	@ 0x34
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	7b1b      	ldrb	r3, [r3, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f040 808e 	bne.w	8008e7c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	785b      	ldrb	r3, [r3, #1]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d044      	beq.n	8008df2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	81bb      	strh	r3, [r7, #12]
 8008d76:	89bb      	ldrh	r3, [r7, #12]
 8008d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01b      	beq.n	8008db8 <USB_DeactivateEndpoint+0x6c>
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d96:	817b      	strh	r3, [r7, #10]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	441a      	add	r2, r3
 8008da2:	897b      	ldrh	r3, [r7, #10]
 8008da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008da8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008db0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dce:	813b      	strh	r3, [r7, #8]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	441a      	add	r2, r3
 8008dda:	893b      	ldrh	r3, [r7, #8]
 8008ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	8013      	strh	r3, [r2, #0]
 8008df0:	e192      	b.n	8009118 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	827b      	strh	r3, [r7, #18]
 8008e00:	8a7b      	ldrh	r3, [r7, #18]
 8008e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d01b      	beq.n	8008e42 <USB_DeactivateEndpoint+0xf6>
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e20:	823b      	strh	r3, [r7, #16]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	441a      	add	r2, r3
 8008e2c:	8a3b      	ldrh	r3, [r7, #16]
 8008e2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e58:	81fb      	strh	r3, [r7, #14]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	441a      	add	r2, r3
 8008e64:	89fb      	ldrh	r3, [r7, #14]
 8008e66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	8013      	strh	r3, [r2, #0]
 8008e7a:	e14d      	b.n	8009118 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	785b      	ldrb	r3, [r3, #1]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f040 80a5 	bne.w	8008fd0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	843b      	strh	r3, [r7, #32]
 8008e94:	8c3b      	ldrh	r3, [r7, #32]
 8008e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d01b      	beq.n	8008ed6 <USB_DeactivateEndpoint+0x18a>
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eb4:	83fb      	strh	r3, [r7, #30]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	441a      	add	r2, r3
 8008ec0:	8bfb      	ldrh	r3, [r7, #30]
 8008ec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	83bb      	strh	r3, [r7, #28]
 8008ee4:	8bbb      	ldrh	r3, [r7, #28]
 8008ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d01b      	beq.n	8008f26 <USB_DeactivateEndpoint+0x1da>
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f04:	837b      	strh	r3, [r7, #26]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	441a      	add	r2, r3
 8008f10:	8b7b      	ldrh	r3, [r7, #26]
 8008f12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f3c:	833b      	strh	r3, [r7, #24]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	441a      	add	r2, r3
 8008f48:	8b3b      	ldrh	r3, [r7, #24]
 8008f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f74:	82fb      	strh	r3, [r7, #22]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	441a      	add	r2, r3
 8008f80:	8afb      	ldrh	r3, [r7, #22]
 8008f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fac:	82bb      	strh	r3, [r7, #20]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	441a      	add	r2, r3
 8008fb8:	8abb      	ldrh	r3, [r7, #20]
 8008fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	8013      	strh	r3, [r2, #0]
 8008fce:	e0a3      	b.n	8009118 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008fde:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d01b      	beq.n	8009020 <USB_DeactivateEndpoint+0x2d4>
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	881b      	ldrh	r3, [r3, #0]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ffe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	441a      	add	r2, r3
 800900a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800900c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009014:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800901c:	b29b      	uxth	r3, r3
 800901e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800902e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01b      	beq.n	8009070 <USB_DeactivateEndpoint+0x324>
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	b29b      	uxth	r3, r3
 8009046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800904a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800904e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	441a      	add	r2, r3
 800905a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800905c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009068:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800906c:	b29b      	uxth	r3, r3
 800906e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	b29b      	uxth	r3, r3
 800907e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009086:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	441a      	add	r2, r3
 8009092:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800909c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	441a      	add	r2, r3
 80090ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090dc:	b29b      	uxth	r3, r3
 80090de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090f6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	441a      	add	r2, r3
 8009102:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800910c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009114:	b29b      	uxth	r3, r3
 8009116:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3734      	adds	r7, #52	@ 0x34
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr

08009124 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b0c4      	sub	sp, #272	@ 0x110
 8009128:	af00      	add	r7, sp, #0
 800912a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800912e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009132:	6018      	str	r0, [r3, #0]
 8009134:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009138:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800913c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800913e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009142:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	785b      	ldrb	r3, [r3, #1]
 800914a:	2b01      	cmp	r3, #1
 800914c:	f040 86ec 	bne.w	8009f28 <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009150:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009154:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	699a      	ldr	r2, [r3, #24]
 800915c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009160:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	429a      	cmp	r2, r3
 800916a:	d908      	bls.n	800917e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800916c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009170:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800917c:	e007      	b.n	800918e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800917e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009182:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800918e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009192:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	7b1b      	ldrb	r3, [r3, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d142      	bne.n	8009224 <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800919e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6959      	ldr	r1, [r3, #20]
 80091aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	88da      	ldrh	r2, [r3, #6]
 80091b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80091c0:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80091c4:	6800      	ldr	r0, [r0, #0]
 80091c6:	f001 fc92 	bl	800aaee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	617b      	str	r3, [r7, #20]
 80091d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	4413      	add	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	011a      	lsls	r2, r3, #4
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	4413      	add	r3, r2
 8009200:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 8009204:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009208:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009212:	b29a      	uxth	r2, r3
 8009214:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009218:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	801a      	strh	r2, [r3, #0]
 8009220:	f000 be34 	b.w	8009e8c <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009224:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009228:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	78db      	ldrb	r3, [r3, #3]
 8009230:	2b02      	cmp	r3, #2
 8009232:	f040 843b 	bne.w	8009aac <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800923a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6a1a      	ldr	r2, [r3, #32]
 8009242:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009246:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	429a      	cmp	r2, r3
 8009250:	f240 83b8 	bls.w	80099c4 <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009254:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009258:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009262:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	b29b      	uxth	r3, r3
 8009272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800927a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800927e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009282:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800928c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	441a      	add	r2, r3
 8009298:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800929c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092a4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80092a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80092b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6a1a      	ldr	r2, [r3, #32]
 80092bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092c0:	1ad2      	subs	r2, r2, r3
 80092c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80092ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 81b4 	beq.w	800965e <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	637b      	str	r3, [r7, #52]	@ 0x34
 8009302:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009306:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	785b      	ldrb	r3, [r3, #1]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d16d      	bne.n	80093ee <USB_EPStartXfer+0x2ca>
 8009312:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009316:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800931e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009322:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800932c:	b29b      	uxth	r3, r3
 800932e:	461a      	mov	r2, r3
 8009330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009332:	4413      	add	r3, r2
 8009334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009336:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800933a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	011a      	lsls	r2, r3, #4
 8009344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009346:	4413      	add	r3, r2
 8009348:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800934c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800934e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009352:	2b00      	cmp	r3, #0
 8009354:	d112      	bne.n	800937c <USB_EPStartXfer+0x258>
 8009356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009360:	b29a      	uxth	r2, r3
 8009362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009364:	801a      	strh	r2, [r3, #0]
 8009366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	b29b      	uxth	r3, r3
 800936c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009374:	b29a      	uxth	r2, r3
 8009376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009378:	801a      	strh	r2, [r3, #0]
 800937a:	e05d      	b.n	8009438 <USB_EPStartXfer+0x314>
 800937c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009380:	2b3e      	cmp	r3, #62	@ 0x3e
 8009382:	d817      	bhi.n	80093b4 <USB_EPStartXfer+0x290>
 8009384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009388:	085b      	lsrs	r3, r3, #1
 800938a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800938e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d004      	beq.n	80093a4 <USB_EPStartXfer+0x280>
 800939a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939e:	3301      	adds	r3, #1
 80093a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80093a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	029b      	lsls	r3, r3, #10
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b0:	801a      	strh	r2, [r3, #0]
 80093b2:	e041      	b.n	8009438 <USB_EPStartXfer+0x314>
 80093b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093b8:	095b      	lsrs	r3, r3, #5
 80093ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80093be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093c2:	f003 031f 	and.w	r3, r3, #31
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d104      	bne.n	80093d4 <USB_EPStartXfer+0x2b0>
 80093ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ce:	3b01      	subs	r3, #1
 80093d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80093d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d8:	b29b      	uxth	r3, r3
 80093da:	029b      	lsls	r3, r3, #10
 80093dc:	b29b      	uxth	r3, r3
 80093de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	e024      	b.n	8009438 <USB_EPStartXfer+0x314>
 80093ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	785b      	ldrb	r3, [r3, #1]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d11c      	bne.n	8009438 <USB_EPStartXfer+0x314>
 80093fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009402:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800940c:	b29b      	uxth	r3, r3
 800940e:	461a      	mov	r2, r3
 8009410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009412:	4413      	add	r3, r2
 8009414:	637b      	str	r3, [r7, #52]	@ 0x34
 8009416:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800941a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	011a      	lsls	r2, r3, #4
 8009424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009426:	4413      	add	r3, r2
 8009428:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800942c:	633b      	str	r3, [r7, #48]	@ 0x30
 800942e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009432:	b29a      	uxth	r2, r3
 8009434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009436:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009438:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800943c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	895b      	ldrh	r3, [r3, #10]
 8009444:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009448:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800944c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6959      	ldr	r1, [r3, #20]
 8009454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009458:	b29b      	uxth	r3, r3
 800945a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800945e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009462:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009466:	6800      	ldr	r0, [r0, #0]
 8009468:	f001 fb41 	bl	800aaee <USB_WritePMA>
            ep->xfer_buff += len;
 800946c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009470:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	695a      	ldr	r2, [r3, #20]
 8009478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800947c:	441a      	add	r2, r3
 800947e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009482:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800948a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800948e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6a1a      	ldr	r2, [r3, #32]
 8009496:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800949a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d90f      	bls.n	80094c6 <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 80094a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6a1a      	ldr	r2, [r3, #32]
 80094b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094b6:	1ad2      	subs	r2, r2, r3
 80094b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	621a      	str	r2, [r3, #32]
 80094c4:	e00e      	b.n	80094e4 <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 80094c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 80094d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2200      	movs	r2, #0
 80094e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	785b      	ldrb	r3, [r3, #1]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d16d      	bne.n	80095d0 <USB_EPStartXfer+0x4ac>
 80094f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	61fb      	str	r3, [r7, #28]
 8009500:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009504:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800950e:	b29b      	uxth	r3, r3
 8009510:	461a      	mov	r2, r3
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	4413      	add	r3, r2
 8009516:	61fb      	str	r3, [r7, #28]
 8009518:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800951c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	011a      	lsls	r2, r3, #4
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	4413      	add	r3, r2
 800952a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800952e:	61bb      	str	r3, [r7, #24]
 8009530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009534:	2b00      	cmp	r3, #0
 8009536:	d112      	bne.n	800955e <USB_EPStartXfer+0x43a>
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	881b      	ldrh	r3, [r3, #0]
 800953c:	b29b      	uxth	r3, r3
 800953e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009542:	b29a      	uxth	r2, r3
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	801a      	strh	r2, [r3, #0]
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	b29b      	uxth	r3, r3
 800954e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009556:	b29a      	uxth	r2, r3
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	801a      	strh	r2, [r3, #0]
 800955c:	e063      	b.n	8009626 <USB_EPStartXfer+0x502>
 800955e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009562:	2b3e      	cmp	r3, #62	@ 0x3e
 8009564:	d817      	bhi.n	8009596 <USB_EPStartXfer+0x472>
 8009566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800956a:	085b      	lsrs	r3, r3, #1
 800956c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009570:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	d004      	beq.n	8009586 <USB_EPStartXfer+0x462>
 800957c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009580:	3301      	adds	r3, #1
 8009582:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009586:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800958a:	b29b      	uxth	r3, r3
 800958c:	029b      	lsls	r3, r3, #10
 800958e:	b29a      	uxth	r2, r3
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	801a      	strh	r2, [r3, #0]
 8009594:	e047      	b.n	8009626 <USB_EPStartXfer+0x502>
 8009596:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800959a:	095b      	lsrs	r3, r3, #5
 800959c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095a4:	f003 031f 	and.w	r3, r3, #31
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d104      	bne.n	80095b6 <USB_EPStartXfer+0x492>
 80095ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80095b0:	3b01      	subs	r3, #1
 80095b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	029b      	lsls	r3, r3, #10
 80095be:	b29b      	uxth	r3, r3
 80095c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	801a      	strh	r2, [r3, #0]
 80095ce:	e02a      	b.n	8009626 <USB_EPStartXfer+0x502>
 80095d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d122      	bne.n	8009626 <USB_EPStartXfer+0x502>
 80095e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80095ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	461a      	mov	r2, r3
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	4413      	add	r3, r2
 8009602:	627b      	str	r3, [r7, #36]	@ 0x24
 8009604:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009608:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	011a      	lsls	r2, r3, #4
 8009612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009614:	4413      	add	r3, r2
 8009616:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800961a:	623b      	str	r3, [r7, #32]
 800961c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009620:	b29a      	uxth	r2, r3
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800962a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	891b      	ldrh	r3, [r3, #8]
 8009632:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800963a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6959      	ldr	r1, [r3, #20]
 8009642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009646:	b29b      	uxth	r3, r3
 8009648:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800964c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009650:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009654:	6800      	ldr	r0, [r0, #0]
 8009656:	f001 fa4a 	bl	800aaee <USB_WritePMA>
 800965a:	f000 bc17 	b.w	8009e8c <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800965e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009662:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	785b      	ldrb	r3, [r3, #1]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d16d      	bne.n	800974a <USB_EPStartXfer+0x626>
 800966e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009672:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800967a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800967e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009688:	b29b      	uxth	r3, r3
 800968a:	461a      	mov	r2, r3
 800968c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800968e:	4413      	add	r3, r2
 8009690:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009692:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009696:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	011a      	lsls	r2, r3, #4
 80096a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096a2:	4413      	add	r3, r2
 80096a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80096a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d112      	bne.n	80096d8 <USB_EPStartXfer+0x5b4>
 80096b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80096bc:	b29a      	uxth	r2, r3
 80096be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096c0:	801a      	strh	r2, [r3, #0]
 80096c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096d4:	801a      	strh	r2, [r3, #0]
 80096d6:	e063      	b.n	80097a0 <USB_EPStartXfer+0x67c>
 80096d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80096de:	d817      	bhi.n	8009710 <USB_EPStartXfer+0x5ec>
 80096e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096e4:	085b      	lsrs	r3, r3, #1
 80096e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d004      	beq.n	8009700 <USB_EPStartXfer+0x5dc>
 80096f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096fa:	3301      	adds	r3, #1
 80096fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009704:	b29b      	uxth	r3, r3
 8009706:	029b      	lsls	r3, r3, #10
 8009708:	b29a      	uxth	r2, r3
 800970a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800970c:	801a      	strh	r2, [r3, #0]
 800970e:	e047      	b.n	80097a0 <USB_EPStartXfer+0x67c>
 8009710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009714:	095b      	lsrs	r3, r3, #5
 8009716:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800971a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800971e:	f003 031f 	and.w	r3, r3, #31
 8009722:	2b00      	cmp	r3, #0
 8009724:	d104      	bne.n	8009730 <USB_EPStartXfer+0x60c>
 8009726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800972a:	3b01      	subs	r3, #1
 800972c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009734:	b29b      	uxth	r3, r3
 8009736:	029b      	lsls	r3, r3, #10
 8009738:	b29b      	uxth	r3, r3
 800973a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800973e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009742:	b29a      	uxth	r2, r3
 8009744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009746:	801a      	strh	r2, [r3, #0]
 8009748:	e02a      	b.n	80097a0 <USB_EPStartXfer+0x67c>
 800974a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800974e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	785b      	ldrb	r3, [r3, #1]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d122      	bne.n	80097a0 <USB_EPStartXfer+0x67c>
 800975a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800975e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	657b      	str	r3, [r7, #84]	@ 0x54
 8009766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800976a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009774:	b29b      	uxth	r3, r3
 8009776:	461a      	mov	r2, r3
 8009778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800977a:	4413      	add	r3, r2
 800977c:	657b      	str	r3, [r7, #84]	@ 0x54
 800977e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009782:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	011a      	lsls	r2, r3, #4
 800978c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800978e:	4413      	add	r3, r2
 8009790:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009794:	653b      	str	r3, [r7, #80]	@ 0x50
 8009796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800979a:	b29a      	uxth	r2, r3
 800979c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800979e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80097a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	891b      	ldrh	r3, [r3, #8]
 80097ac:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	6959      	ldr	r1, [r3, #20]
 80097bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80097c6:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80097ca:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80097ce:	6800      	ldr	r0, [r0, #0]
 80097d0:	f001 f98d 	bl	800aaee <USB_WritePMA>
            ep->xfer_buff += len;
 80097d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	695a      	ldr	r2, [r3, #20]
 80097e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e4:	441a      	add	r2, r3
 80097e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80097f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6a1a      	ldr	r2, [r3, #32]
 80097fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009802:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	429a      	cmp	r2, r3
 800980c:	d90f      	bls.n	800982e <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 800980e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009812:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6a1a      	ldr	r2, [r3, #32]
 800981a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800981e:	1ad2      	subs	r2, r2, r3
 8009820:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009824:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	621a      	str	r2, [r3, #32]
 800982c:	e00e      	b.n	800984c <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 800982e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009832:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 800983e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009842:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2200      	movs	r2, #0
 800984a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800984c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009850:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	647b      	str	r3, [r7, #68]	@ 0x44
 8009858:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800985c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	785b      	ldrb	r3, [r3, #1]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d16d      	bne.n	8009944 <USB_EPStartXfer+0x820>
 8009868:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800986c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009874:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009878:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009882:	b29b      	uxth	r3, r3
 8009884:	461a      	mov	r2, r3
 8009886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009888:	4413      	add	r3, r2
 800988a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800988c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009890:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	011a      	lsls	r2, r3, #4
 800989a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800989c:	4413      	add	r3, r2
 800989e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80098a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d112      	bne.n	80098d2 <USB_EPStartXfer+0x7ae>
 80098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ae:	881b      	ldrh	r3, [r3, #0]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ba:	801a      	strh	r2, [r3, #0]
 80098bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ce:	801a      	strh	r2, [r3, #0]
 80098d0:	e05d      	b.n	800998e <USB_EPStartXfer+0x86a>
 80098d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80098d8:	d817      	bhi.n	800990a <USB_EPStartXfer+0x7e6>
 80098da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098de:	085b      	lsrs	r3, r3, #1
 80098e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80098e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d004      	beq.n	80098fa <USB_EPStartXfer+0x7d6>
 80098f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098f4:	3301      	adds	r3, #1
 80098f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80098fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098fe:	b29b      	uxth	r3, r3
 8009900:	029b      	lsls	r3, r3, #10
 8009902:	b29a      	uxth	r2, r3
 8009904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009906:	801a      	strh	r2, [r3, #0]
 8009908:	e041      	b.n	800998e <USB_EPStartXfer+0x86a>
 800990a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800990e:	095b      	lsrs	r3, r3, #5
 8009910:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009918:	f003 031f 	and.w	r3, r3, #31
 800991c:	2b00      	cmp	r3, #0
 800991e:	d104      	bne.n	800992a <USB_EPStartXfer+0x806>
 8009920:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009924:	3b01      	subs	r3, #1
 8009926:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800992a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800992e:	b29b      	uxth	r3, r3
 8009930:	029b      	lsls	r3, r3, #10
 8009932:	b29b      	uxth	r3, r3
 8009934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800993c:	b29a      	uxth	r2, r3
 800993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009940:	801a      	strh	r2, [r3, #0]
 8009942:	e024      	b.n	800998e <USB_EPStartXfer+0x86a>
 8009944:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009948:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	785b      	ldrb	r3, [r3, #1]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d11c      	bne.n	800998e <USB_EPStartXfer+0x86a>
 8009954:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009958:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009962:	b29b      	uxth	r3, r3
 8009964:	461a      	mov	r2, r3
 8009966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009968:	4413      	add	r3, r2
 800996a:	647b      	str	r3, [r7, #68]	@ 0x44
 800996c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009970:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	011a      	lsls	r2, r3, #4
 800997a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800997c:	4413      	add	r3, r2
 800997e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009982:	643b      	str	r3, [r7, #64]	@ 0x40
 8009984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009988:	b29a      	uxth	r2, r3
 800998a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800998c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800998e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009992:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	895b      	ldrh	r3, [r3, #10]
 800999a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800999e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6959      	ldr	r1, [r3, #20]
 80099aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80099b4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80099b8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80099bc:	6800      	ldr	r0, [r0, #0]
 80099be:	f001 f896 	bl	800aaee <USB_WritePMA>
 80099c2:	e263      	b.n	8009e8c <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80099c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80099d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80099f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099fa:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80099fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	441a      	add	r2, r3
 8009a18:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009a30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a50:	4413      	add	r3, r2
 8009a52:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	011a      	lsls	r2, r3, #4
 8009a62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a64:	4413      	add	r3, r2
 8009a66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	891b      	ldrh	r3, [r3, #8]
 8009a82:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6959      	ldr	r1, [r3, #20]
 8009a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009a9c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009aa0:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009aa4:	6800      	ldr	r0, [r0, #0]
 8009aa6:	f001 f822 	bl	800aaee <USB_WritePMA>
 8009aaa:	e1ef      	b.n	8009e8c <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009aac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ab0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009aba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f000 80aa 	beq.w	8009c28 <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ad4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ad8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ae0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ae4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	785b      	ldrb	r3, [r3, #1]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d16d      	bne.n	8009bcc <USB_EPStartXfer+0xaa8>
 8009af0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009af4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	673b      	str	r3, [r7, #112]	@ 0x70
 8009afc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b10:	4413      	add	r3, r2
 8009b12:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	011a      	lsls	r2, r3, #4
 8009b22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b24:	4413      	add	r3, r2
 8009b26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d112      	bne.n	8009b5a <USB_EPStartXfer+0xa36>
 8009b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b42:	801a      	strh	r2, [r3, #0]
 8009b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b56:	801a      	strh	r2, [r3, #0]
 8009b58:	e05d      	b.n	8009c16 <USB_EPStartXfer+0xaf2>
 8009b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b60:	d817      	bhi.n	8009b92 <USB_EPStartXfer+0xa6e>
 8009b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b66:	085b      	lsrs	r3, r3, #1
 8009b68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d004      	beq.n	8009b82 <USB_EPStartXfer+0xa5e>
 8009b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	029b      	lsls	r3, r3, #10
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b8e:	801a      	strh	r2, [r3, #0]
 8009b90:	e041      	b.n	8009c16 <USB_EPStartXfer+0xaf2>
 8009b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b96:	095b      	lsrs	r3, r3, #5
 8009b98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba0:	f003 031f 	and.w	r3, r3, #31
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d104      	bne.n	8009bb2 <USB_EPStartXfer+0xa8e>
 8009ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bac:	3b01      	subs	r3, #1
 8009bae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	029b      	lsls	r3, r3, #10
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bc8:	801a      	strh	r2, [r3, #0]
 8009bca:	e024      	b.n	8009c16 <USB_EPStartXfer+0xaf2>
 8009bcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	785b      	ldrb	r3, [r3, #1]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d11c      	bne.n	8009c16 <USB_EPStartXfer+0xaf2>
 8009bdc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009be0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	461a      	mov	r2, r3
 8009bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bf0:	4413      	add	r3, r2
 8009bf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009bf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bf8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	011a      	lsls	r2, r3, #4
 8009c02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c04:	4413      	add	r3, r2
 8009c06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009c0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009c16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	895b      	ldrh	r3, [r3, #10]
 8009c22:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 8009c26:	e0b2      	b.n	8009d8e <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d171      	bne.n	8009d1c <USB_EPStartXfer+0xbf8>
 8009c38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	461a      	mov	r2, r3
 8009c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c66:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	011a      	lsls	r2, r3, #4
 8009c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c74:	4413      	add	r3, r2
 8009c76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d112      	bne.n	8009caa <USB_EPStartXfer+0xb86>
 8009c84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ca6:	801a      	strh	r2, [r3, #0]
 8009ca8:	e069      	b.n	8009d7e <USB_EPStartXfer+0xc5a>
 8009caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cae:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cb0:	d817      	bhi.n	8009ce2 <USB_EPStartXfer+0xbbe>
 8009cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cb6:	085b      	lsrs	r3, r3, #1
 8009cb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d004      	beq.n	8009cd2 <USB_EPStartXfer+0xbae>
 8009cc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009ccc:	3301      	adds	r3, #1
 8009cce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009cd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	029b      	lsls	r3, r3, #10
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009cde:	801a      	strh	r2, [r3, #0]
 8009ce0:	e04d      	b.n	8009d7e <USB_EPStartXfer+0xc5a>
 8009ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ce6:	095b      	lsrs	r3, r3, #5
 8009ce8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cf0:	f003 031f 	and.w	r3, r3, #31
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d104      	bne.n	8009d02 <USB_EPStartXfer+0xbde>
 8009cf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	029b      	lsls	r3, r3, #10
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d18:	801a      	strh	r2, [r3, #0]
 8009d1a:	e030      	b.n	8009d7e <USB_EPStartXfer+0xc5a>
 8009d1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	785b      	ldrb	r3, [r3, #1]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d128      	bne.n	8009d7e <USB_EPStartXfer+0xc5a>
 8009d2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d50:	4413      	add	r3, r2
 8009d52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	011a      	lsls	r2, r3, #4
 8009d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d68:	4413      	add	r3, r2
 8009d6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009d6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009d7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	891b      	ldrh	r3, [r3, #8]
 8009d8a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6959      	ldr	r1, [r3, #20]
 8009d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009da4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009da8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009dac:	6800      	ldr	r0, [r0, #0]
 8009dae:	f000 fe9e 	bl	800aaee <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009db2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009db6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d12e      	bne.n	8009e20 <USB_EPStartXfer+0xcfc>
 8009dc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009de8:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009dec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009df0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dfa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	441a      	add	r2, r3
 8009e06:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009e0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	8013      	strh	r3, [r2, #0]
 8009e1e:	e035      	b.n	8009e8c <USB_EPStartXfer+0xd68>
 8009e20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d12d      	bne.n	8009e8c <USB_EPStartXfer+0xd68>
 8009e30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	881b      	ldrh	r3, [r3, #0]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e56:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009e5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	441a      	add	r2, r3
 8009e74:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009e8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e9a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009eae:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eba:	8013      	strh	r3, [r2, #0]
 8009ebc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ec0:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009ec4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009ec8:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009ecc:	8812      	ldrh	r2, [r2, #0]
 8009ece:	f082 0210 	eor.w	r2, r2, #16
 8009ed2:	801a      	strh	r2, [r3, #0]
 8009ed4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ed8:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009edc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009ee0:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009ee4:	8812      	ldrh	r2, [r2, #0]
 8009ee6:	f082 0220 	eor.w	r2, r2, #32
 8009eea:	801a      	strh	r2, [r3, #0]
 8009eec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ef0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009efa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	441a      	add	r2, r3
 8009f06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f0a:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	8013      	strh	r3, [r2, #0]
 8009f24:	f000 bc9f 	b.w	800a866 <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009f28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	7b1b      	ldrb	r3, [r3, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f040 80ae 	bne.w	800a096 <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009f3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d917      	bls.n	8009f86 <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 8009f56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 8009f66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f6a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	699a      	ldr	r2, [r3, #24]
 8009f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f76:	1ad2      	subs	r2, r2, r3
 8009f78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	619a      	str	r2, [r3, #24]
 8009f84:	e00e      	b.n	8009fa4 <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 8009f86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 8009f96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f9a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009fa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009fb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009fc8:	4413      	add	r3, r2
 8009fca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009fce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	011a      	lsls	r2, r3, #4
 8009fdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d116      	bne.n	800a020 <USB_EPStartXfer+0xefc>
 8009ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ff6:	881b      	ldrh	r3, [r3, #0]
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a004:	801a      	strh	r2, [r3, #0]
 800a006:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a016:	b29a      	uxth	r2, r3
 800a018:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a01c:	801a      	strh	r2, [r3, #0]
 800a01e:	e3e8      	b.n	800a7f2 <USB_EPStartXfer+0x16ce>
 800a020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a024:	2b3e      	cmp	r3, #62	@ 0x3e
 800a026:	d818      	bhi.n	800a05a <USB_EPStartXfer+0xf36>
 800a028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a02c:	085b      	lsrs	r3, r3, #1
 800a02e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d004      	beq.n	800a048 <USB_EPStartXfer+0xf24>
 800a03e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a042:	3301      	adds	r3, #1
 800a044:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a048:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	029b      	lsls	r3, r3, #10
 800a050:	b29a      	uxth	r2, r3
 800a052:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a056:	801a      	strh	r2, [r3, #0]
 800a058:	e3cb      	b.n	800a7f2 <USB_EPStartXfer+0x16ce>
 800a05a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a05e:	095b      	lsrs	r3, r3, #5
 800a060:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a068:	f003 031f 	and.w	r3, r3, #31
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d104      	bne.n	800a07a <USB_EPStartXfer+0xf56>
 800a070:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a074:	3b01      	subs	r3, #1
 800a076:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a07a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a07e:	b29b      	uxth	r3, r3
 800a080:	029b      	lsls	r3, r3, #10
 800a082:	b29b      	uxth	r3, r3
 800a084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a092:	801a      	strh	r2, [r3, #0]
 800a094:	e3ad      	b.n	800a7f2 <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a09a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	78db      	ldrb	r3, [r3, #3]
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	f040 8200 	bne.w	800a4a8 <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a0a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	785b      	ldrb	r3, [r3, #1]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f040 8091 	bne.w	800a1dc <USB_EPStartXfer+0x10b8>
 800a0ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	461a      	mov	r2, r3
 800a0da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a0de:	4413      	add	r3, r2
 800a0e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	011a      	lsls	r2, r3, #4
 800a0f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a0fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a100:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a104:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d116      	bne.n	800a13e <USB_EPStartXfer+0x101a>
 800a110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	b29b      	uxth	r3, r3
 800a118:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a122:	801a      	strh	r2, [r3, #0]
 800a124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a128:	881b      	ldrh	r3, [r3, #0]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a134:	b29a      	uxth	r2, r3
 800a136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a13a:	801a      	strh	r2, [r3, #0]
 800a13c:	e083      	b.n	800a246 <USB_EPStartXfer+0x1122>
 800a13e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a142:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a14c:	d820      	bhi.n	800a190 <USB_EPStartXfer+0x106c>
 800a14e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a152:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	085b      	lsrs	r3, r3, #1
 800a15c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a160:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a164:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	f003 0301 	and.w	r3, r3, #1
 800a170:	2b00      	cmp	r3, #0
 800a172:	d004      	beq.n	800a17e <USB_EPStartXfer+0x105a>
 800a174:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a178:	3301      	adds	r3, #1
 800a17a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a17e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a182:	b29b      	uxth	r3, r3
 800a184:	029b      	lsls	r3, r3, #10
 800a186:	b29a      	uxth	r2, r3
 800a188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a18c:	801a      	strh	r2, [r3, #0]
 800a18e:	e05a      	b.n	800a246 <USB_EPStartXfer+0x1122>
 800a190:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a194:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	095b      	lsrs	r3, r3, #5
 800a19e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a1a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f003 031f 	and.w	r3, r3, #31
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d104      	bne.n	800a1c0 <USB_EPStartXfer+0x109c>
 800a1b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a1c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	029b      	lsls	r3, r3, #10
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1d8:	801a      	strh	r2, [r3, #0]
 800a1da:	e034      	b.n	800a246 <USB_EPStartXfer+0x1122>
 800a1dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	785b      	ldrb	r3, [r3, #1]
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d12c      	bne.n	800a246 <USB_EPStartXfer+0x1122>
 800a1ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a208:	b29b      	uxth	r3, r3
 800a20a:	461a      	mov	r2, r3
 800a20c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a210:	4413      	add	r3, r2
 800a212:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a216:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a21a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	011a      	lsls	r2, r3, #4
 800a224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a228:	4413      	add	r3, r2
 800a22a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a22e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a232:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a236:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	b29a      	uxth	r2, r3
 800a240:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a244:	801a      	strh	r2, [r3, #0]
 800a246:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a24a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a254:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a258:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	785b      	ldrb	r3, [r3, #1]
 800a260:	2b00      	cmp	r3, #0
 800a262:	f040 8091 	bne.w	800a388 <USB_EPStartXfer+0x1264>
 800a266:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a26a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a274:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a278:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a282:	b29b      	uxth	r3, r3
 800a284:	461a      	mov	r2, r3
 800a286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a28a:	4413      	add	r3, r2
 800a28c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a290:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a294:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	011a      	lsls	r2, r3, #4
 800a29e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a2a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a2ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d116      	bne.n	800a2ea <USB_EPStartXfer+0x11c6>
 800a2bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2ce:	801a      	strh	r2, [r3, #0]
 800a2d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2e6:	801a      	strh	r2, [r3, #0]
 800a2e8:	e07c      	b.n	800a3e4 <USB_EPStartXfer+0x12c0>
 800a2ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2f8:	d820      	bhi.n	800a33c <USB_EPStartXfer+0x1218>
 800a2fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	085b      	lsrs	r3, r3, #1
 800a308:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a30c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a310:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <USB_EPStartXfer+0x1206>
 800a320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a324:	3301      	adds	r3, #1
 800a326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a32e:	b29b      	uxth	r3, r3
 800a330:	029b      	lsls	r3, r3, #10
 800a332:	b29a      	uxth	r2, r3
 800a334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a338:	801a      	strh	r2, [r3, #0]
 800a33a:	e053      	b.n	800a3e4 <USB_EPStartXfer+0x12c0>
 800a33c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a340:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	095b      	lsrs	r3, r3, #5
 800a34a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a34e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a352:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	f003 031f 	and.w	r3, r3, #31
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d104      	bne.n	800a36c <USB_EPStartXfer+0x1248>
 800a362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a366:	3b01      	subs	r3, #1
 800a368:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a370:	b29b      	uxth	r3, r3
 800a372:	029b      	lsls	r3, r3, #10
 800a374:	b29b      	uxth	r3, r3
 800a376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a37a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a37e:	b29a      	uxth	r2, r3
 800a380:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a384:	801a      	strh	r2, [r3, #0]
 800a386:	e02d      	b.n	800a3e4 <USB_EPStartXfer+0x12c0>
 800a388:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a38c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	785b      	ldrb	r3, [r3, #1]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d125      	bne.n	800a3e4 <USB_EPStartXfer+0x12c0>
 800a398:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a39c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a3b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	011a      	lsls	r2, r3, #4
 800a3c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a3cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a3d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3e2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a3e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 81fe 	beq.w	800a7f2 <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a3f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a404:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4413      	add	r3, r2
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a416:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a41a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d005      	beq.n	800a42e <USB_EPStartXfer+0x130a>
 800a422:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10d      	bne.n	800a44a <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a42e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a436:	2b00      	cmp	r3, #0
 800a438:	f040 81db 	bne.w	800a7f2 <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a43c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a444:	2b00      	cmp	r3, #0
 800a446:	f040 81d4 	bne.w	800a7f2 <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a44a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a44e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a458:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	b29b      	uxth	r3, r3
 800a468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a46c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a470:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800a474:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a478:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a482:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	441a      	add	r2, r3
 800a48e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800a492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a49a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a49e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	8013      	strh	r3, [r2, #0]
 800a4a6:	e1a4      	b.n	800a7f2 <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a4a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	78db      	ldrb	r3, [r3, #3]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	f040 819a 	bne.w	800a7ee <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a4ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	699a      	ldr	r2, [r3, #24]
 800a4c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d917      	bls.n	800a506 <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800a4d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800a4e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	699a      	ldr	r2, [r3, #24]
 800a4f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4f6:	1ad2      	subs	r2, r2, r3
 800a4f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	619a      	str	r2, [r3, #24]
 800a504:	e00e      	b.n	800a524 <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800a506:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a50a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800a516:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a51a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2200      	movs	r2, #0
 800a522:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a524:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a528:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	785b      	ldrb	r3, [r3, #1]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d178      	bne.n	800a626 <USB_EPStartXfer+0x1502>
 800a534:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a538:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a542:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a546:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a550:	b29b      	uxth	r3, r3
 800a552:	461a      	mov	r2, r3
 800a554:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a558:	4413      	add	r3, r2
 800a55a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a55e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a562:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	011a      	lsls	r2, r3, #4
 800a56c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a570:	4413      	add	r3, r2
 800a572:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a576:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a57a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d116      	bne.n	800a5b0 <USB_EPStartXfer+0x148c>
 800a582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a58e:	b29a      	uxth	r2, r3
 800a590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a594:	801a      	strh	r2, [r3, #0]
 800a596:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a5ac:	801a      	strh	r2, [r3, #0]
 800a5ae:	e06b      	b.n	800a688 <USB_EPStartXfer+0x1564>
 800a5b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5b4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5b6:	d818      	bhi.n	800a5ea <USB_EPStartXfer+0x14c6>
 800a5b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5bc:	085b      	lsrs	r3, r3, #1
 800a5be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a5c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d004      	beq.n	800a5d8 <USB_EPStartXfer+0x14b4>
 800a5ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	029b      	lsls	r3, r3, #10
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a5e6:	801a      	strh	r2, [r3, #0]
 800a5e8:	e04e      	b.n	800a688 <USB_EPStartXfer+0x1564>
 800a5ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5ee:	095b      	lsrs	r3, r3, #5
 800a5f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a5f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5f8:	f003 031f 	and.w	r3, r3, #31
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d104      	bne.n	800a60a <USB_EPStartXfer+0x14e6>
 800a600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a604:	3b01      	subs	r3, #1
 800a606:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a60a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a60e:	b29b      	uxth	r3, r3
 800a610:	029b      	lsls	r3, r3, #10
 800a612:	b29b      	uxth	r3, r3
 800a614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a622:	801a      	strh	r2, [r3, #0]
 800a624:	e030      	b.n	800a688 <USB_EPStartXfer+0x1564>
 800a626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a62a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	785b      	ldrb	r3, [r3, #1]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d128      	bne.n	800a688 <USB_EPStartXfer+0x1564>
 800a636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a63a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a644:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a648:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a652:	b29b      	uxth	r3, r3
 800a654:	461a      	mov	r2, r3
 800a656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a65a:	4413      	add	r3, r2
 800a65c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a660:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a664:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	011a      	lsls	r2, r3, #4
 800a66e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a672:	4413      	add	r3, r2
 800a674:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a678:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a680:	b29a      	uxth	r2, r3
 800a682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a686:	801a      	strh	r2, [r3, #0]
 800a688:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a68c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a696:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a69a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	785b      	ldrb	r3, [r3, #1]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d178      	bne.n	800a798 <USB_EPStartXfer+0x1674>
 800a6a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	011a      	lsls	r2, r3, #4
 800a6de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a6e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a6ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d116      	bne.n	800a722 <USB_EPStartXfer+0x15fe>
 800a6f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a700:	b29a      	uxth	r2, r3
 800a702:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a706:	801a      	strh	r2, [r3, #0]
 800a708:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	b29b      	uxth	r3, r3
 800a710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a718:	b29a      	uxth	r2, r3
 800a71a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a71e:	801a      	strh	r2, [r3, #0]
 800a720:	e067      	b.n	800a7f2 <USB_EPStartXfer+0x16ce>
 800a722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a726:	2b3e      	cmp	r3, #62	@ 0x3e
 800a728:	d818      	bhi.n	800a75c <USB_EPStartXfer+0x1638>
 800a72a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a72e:	085b      	lsrs	r3, r3, #1
 800a730:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d004      	beq.n	800a74a <USB_EPStartXfer+0x1626>
 800a740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a744:	3301      	adds	r3, #1
 800a746:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a74a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a74e:	b29b      	uxth	r3, r3
 800a750:	029b      	lsls	r3, r3, #10
 800a752:	b29a      	uxth	r2, r3
 800a754:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a758:	801a      	strh	r2, [r3, #0]
 800a75a:	e04a      	b.n	800a7f2 <USB_EPStartXfer+0x16ce>
 800a75c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a760:	095b      	lsrs	r3, r3, #5
 800a762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a76a:	f003 031f 	and.w	r3, r3, #31
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d104      	bne.n	800a77c <USB_EPStartXfer+0x1658>
 800a772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a776:	3b01      	subs	r3, #1
 800a778:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a77c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a780:	b29b      	uxth	r3, r3
 800a782:	029b      	lsls	r3, r3, #10
 800a784:	b29b      	uxth	r3, r3
 800a786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a78a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a78e:	b29a      	uxth	r2, r3
 800a790:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a794:	801a      	strh	r2, [r3, #0]
 800a796:	e02c      	b.n	800a7f2 <USB_EPStartXfer+0x16ce>
 800a798:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a79c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	785b      	ldrb	r3, [r3, #1]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d124      	bne.n	800a7f2 <USB_EPStartXfer+0x16ce>
 800a7a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7be:	4413      	add	r3, r2
 800a7c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a7c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	011a      	lsls	r2, r3, #4
 800a7d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a7dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a7e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a7ea:	801a      	strh	r2, [r3, #0]
 800a7ec:	e001      	b.n	800a7f2 <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e03a      	b.n	800a868 <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a7f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a800:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a818:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a81c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a820:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a824:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a828:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a82c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a830:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a834:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a838:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a842:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	441a      	add	r2, r3
 800a84e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a856:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a85a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a85e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a862:	b29b      	uxth	r3, r3
 800a864:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a872:	b480      	push	{r7}
 800a874:	b085      	sub	sp, #20
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	785b      	ldrb	r3, [r3, #1]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d020      	beq.n	800a8c6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29b      	uxth	r3, r3
 800a892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a89a:	81bb      	strh	r3, [r7, #12]
 800a89c:	89bb      	ldrh	r3, [r7, #12]
 800a89e:	f083 0310 	eor.w	r3, r3, #16
 800a8a2:	81bb      	strh	r3, [r7, #12]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	441a      	add	r2, r3
 800a8ae:	89bb      	ldrh	r3, [r7, #12]
 800a8b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	8013      	strh	r3, [r2, #0]
 800a8c4:	e01f      	b.n	800a906 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8dc:	81fb      	strh	r3, [r7, #14]
 800a8de:	89fb      	ldrh	r3, [r7, #14]
 800a8e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a8e4:	81fb      	strh	r3, [r7, #14]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	441a      	add	r2, r3
 800a8f0:	89fb      	ldrh	r3, [r7, #14]
 800a8f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a902:	b29b      	uxth	r3, r3
 800a904:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bc80      	pop	{r7}
 800a910:	4770      	bx	lr

0800a912 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a912:	b480      	push	{r7}
 800a914:	b087      	sub	sp, #28
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	7b1b      	ldrb	r3, [r3, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	f040 809d 	bne.w	800aa60 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	785b      	ldrb	r3, [r3, #1]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d04c      	beq.n	800a9c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	823b      	strh	r3, [r7, #16]
 800a93c:	8a3b      	ldrh	r3, [r7, #16]
 800a93e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a942:	2b00      	cmp	r3, #0
 800a944:	d01b      	beq.n	800a97e <USB_EPClearStall+0x6c>
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4413      	add	r3, r2
 800a950:	881b      	ldrh	r3, [r3, #0]
 800a952:	b29b      	uxth	r3, r3
 800a954:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a95c:	81fb      	strh	r3, [r7, #14]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	441a      	add	r2, r3
 800a968:	89fb      	ldrh	r3, [r7, #14]
 800a96a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a96e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a976:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	78db      	ldrb	r3, [r3, #3]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d06c      	beq.n	800aa60 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	881b      	ldrh	r3, [r3, #0]
 800a992:	b29b      	uxth	r3, r3
 800a994:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a99c:	81bb      	strh	r3, [r7, #12]
 800a99e:	89bb      	ldrh	r3, [r7, #12]
 800a9a0:	f083 0320 	eor.w	r3, r3, #32
 800a9a4:	81bb      	strh	r3, [r7, #12]
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	441a      	add	r2, r3
 800a9b0:	89bb      	ldrh	r3, [r7, #12]
 800a9b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	8013      	strh	r3, [r2, #0]
 800a9c6:	e04b      	b.n	800aa60 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	82fb      	strh	r3, [r7, #22]
 800a9d6:	8afb      	ldrh	r3, [r7, #22]
 800a9d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d01b      	beq.n	800aa18 <USB_EPClearStall+0x106>
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9f6:	82bb      	strh	r3, [r7, #20]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	441a      	add	r2, r3
 800aa02:	8abb      	ldrh	r3, [r7, #20]
 800aa04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aa10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa2e:	827b      	strh	r3, [r7, #18]
 800aa30:	8a7b      	ldrh	r3, [r7, #18]
 800aa32:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa36:	827b      	strh	r3, [r7, #18]
 800aa38:	8a7b      	ldrh	r3, [r7, #18]
 800aa3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aa3e:	827b      	strh	r3, [r7, #18]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	441a      	add	r2, r3
 800aa4a:	8a7b      	ldrh	r3, [r7, #18]
 800aa4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	371c      	adds	r7, #28
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bc80      	pop	{r7}
 800aa6a:	4770      	bx	lr

0800aa6c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d103      	bne.n	800aa86 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2280      	movs	r2, #128	@ 0x80
 800aa82:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bc80      	pop	{r7}
 800aa90:	4770      	bx	lr

0800aa92 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b083      	sub	sp, #12
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bc80      	pop	{r7}
 800aaa4:	4770      	bx	lr

0800aaa6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b083      	sub	sp, #12
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bc80      	pop	{r7}
 800aab8:	4770      	bx	lr

0800aaba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b085      	sub	sp, #20
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aacc:	68fb      	ldr	r3, [r7, #12]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bc80      	pop	{r7}
 800aad6:	4770      	bx	lr

0800aad8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bc80      	pop	{r7}
 800aaec:	4770      	bx	lr

0800aaee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b08d      	sub	sp, #52	@ 0x34
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	60f8      	str	r0, [r7, #12]
 800aaf6:	60b9      	str	r1, [r7, #8]
 800aaf8:	4611      	mov	r1, r2
 800aafa:	461a      	mov	r2, r3
 800aafc:	460b      	mov	r3, r1
 800aafe:	80fb      	strh	r3, [r7, #6]
 800ab00:	4613      	mov	r3, r2
 800ab02:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ab04:	88bb      	ldrh	r3, [r7, #4]
 800ab06:	3301      	adds	r3, #1
 800ab08:	085b      	lsrs	r3, r3, #1
 800ab0a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ab14:	88fb      	ldrh	r3, [r7, #6]
 800ab16:	005a      	lsls	r2, r3, #1
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab20:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800ab22:	6a3b      	ldr	r3, [r7, #32]
 800ab24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab26:	e01d      	b.n	800ab64 <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800ab28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	3301      	adds	r3, #1
 800ab32:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ab34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	021b      	lsls	r3, r3, #8
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ab4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4e:	3302      	adds	r3, #2
 800ab50:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800ab52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab54:	3302      	adds	r3, #2
 800ab56:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800ab58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800ab5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab60:	3b01      	subs	r3, #1
 800ab62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1de      	bne.n	800ab28 <USB_WritePMA+0x3a>
  }
}
 800ab6a:	bf00      	nop
 800ab6c:	bf00      	nop
 800ab6e:	3734      	adds	r7, #52	@ 0x34
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bc80      	pop	{r7}
 800ab74:	4770      	bx	lr

0800ab76 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b08b      	sub	sp, #44	@ 0x2c
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	60f8      	str	r0, [r7, #12]
 800ab7e:	60b9      	str	r1, [r7, #8]
 800ab80:	4611      	mov	r1, r2
 800ab82:	461a      	mov	r2, r3
 800ab84:	460b      	mov	r3, r1
 800ab86:	80fb      	strh	r3, [r7, #6]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ab8c:	88bb      	ldrh	r3, [r7, #4]
 800ab8e:	085b      	lsrs	r3, r3, #1
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ab9c:	88fb      	ldrh	r3, [r7, #6]
 800ab9e:	005a      	lsls	r2, r3, #1
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aba8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	627b      	str	r3, [r7, #36]	@ 0x24
 800abae:	e01b      	b.n	800abe8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800abb0:	6a3b      	ldr	r3, [r7, #32]
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800abb8:	6a3b      	ldr	r3, [r7, #32]
 800abba:	3302      	adds	r3, #2
 800abbc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	3301      	adds	r3, #1
 800abca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	0a1b      	lsrs	r3, r3, #8
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	3301      	adds	r3, #1
 800abda:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	3302      	adds	r3, #2
 800abe0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	3b01      	subs	r3, #1
 800abe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800abe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1e0      	bne.n	800abb0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800abee:	88bb      	ldrh	r3, [r7, #4]
 800abf0:	f003 0301 	and.w	r3, r3, #1
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d007      	beq.n	800ac0a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	b2da      	uxtb	r2, r3
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	701a      	strb	r2, [r3, #0]
  }
}
 800ac0a:	bf00      	nop
 800ac0c:	372c      	adds	r7, #44	@ 0x2c
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bc80      	pop	{r7}
 800ac12:	4770      	bx	lr

0800ac14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7c1b      	ldrb	r3, [r3, #16]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d115      	bne.n	800ac58 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac30:	2202      	movs	r2, #2
 800ac32:	2181      	movs	r1, #129	@ 0x81
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f001 fe90 	bl	800c95a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac44:	2202      	movs	r2, #2
 800ac46:	2101      	movs	r1, #1
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f001 fe86 	bl	800c95a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800ac56:	e012      	b.n	800ac7e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac58:	2340      	movs	r3, #64	@ 0x40
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	2181      	movs	r1, #129	@ 0x81
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f001 fe7b 	bl	800c95a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac6a:	2340      	movs	r3, #64	@ 0x40
 800ac6c:	2202      	movs	r2, #2
 800ac6e:	2101      	movs	r1, #1
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f001 fe72 	bl	800c95a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac7e:	2308      	movs	r3, #8
 800ac80:	2203      	movs	r2, #3
 800ac82:	2182      	movs	r1, #130	@ 0x82
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f001 fe68 	bl	800c95a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac90:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ac94:	f001 ff88 	bl	800cba8 <USBD_static_malloc>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d102      	bne.n	800acb0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800acaa:	2301      	movs	r3, #1
 800acac:	73fb      	strb	r3, [r7, #15]
 800acae:	e026      	b.n	800acfe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	7c1b      	ldrb	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d109      	bne.n	800acee <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ace0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ace4:	2101      	movs	r1, #1
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f001 ff28 	bl	800cb3c <USBD_LL_PrepareReceive>
 800acec:	e007      	b.n	800acfe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acf4:	2340      	movs	r3, #64	@ 0x40
 800acf6:	2101      	movs	r1, #1
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f001 ff1f 	bl	800cb3c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ad14:	2300      	movs	r3, #0
 800ad16:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ad18:	2181      	movs	r1, #129	@ 0x81
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f001 fe43 	bl	800c9a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ad26:	2101      	movs	r1, #1
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f001 fe3c 	bl	800c9a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ad36:	2182      	movs	r1, #130	@ 0x82
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 fe34 	bl	800c9a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00e      	beq.n	800ad6c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f001 ff2e 	bl	800cbc0 <USBD_static_free>
    pdev->pClassData = NULL;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b086      	sub	sp, #24
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
 800ad7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad86:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d039      	beq.n	800ae14 <USBD_CDC_Setup+0x9e>
 800ada0:	2b20      	cmp	r3, #32
 800ada2:	d17f      	bne.n	800aea4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	88db      	ldrh	r3, [r3, #6]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d029      	beq.n	800ae00 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	b25b      	sxtb	r3, r3
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	da11      	bge.n	800adda <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800adc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	88d2      	ldrh	r2, [r2, #6]
 800adc8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800adca:	6939      	ldr	r1, [r7, #16]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	88db      	ldrh	r3, [r3, #6]
 800add0:	461a      	mov	r2, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f001 fa06 	bl	800c1e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800add8:	e06b      	b.n	800aeb2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	785a      	ldrb	r2, [r3, #1]
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	88db      	ldrh	r3, [r3, #6]
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800adf0:	6939      	ldr	r1, [r7, #16]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	88db      	ldrh	r3, [r3, #6]
 800adf6:	461a      	mov	r2, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fa21 	bl	800c240 <USBD_CtlPrepareRx>
      break;
 800adfe:	e058      	b.n	800aeb2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	7850      	ldrb	r0, [r2, #1]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	4798      	blx	r3
      break;
 800ae12:	e04e      	b.n	800aeb2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	785b      	ldrb	r3, [r3, #1]
 800ae18:	2b0b      	cmp	r3, #11
 800ae1a:	d02e      	beq.n	800ae7a <USBD_CDC_Setup+0x104>
 800ae1c:	2b0b      	cmp	r3, #11
 800ae1e:	dc38      	bgt.n	800ae92 <USBD_CDC_Setup+0x11c>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <USBD_CDC_Setup+0xb4>
 800ae24:	2b0a      	cmp	r3, #10
 800ae26:	d014      	beq.n	800ae52 <USBD_CDC_Setup+0xdc>
 800ae28:	e033      	b.n	800ae92 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d107      	bne.n	800ae44 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ae34:	f107 030c 	add.w	r3, r7, #12
 800ae38:	2202      	movs	r2, #2
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f001 f9d1 	bl	800c1e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae42:	e02e      	b.n	800aea2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f001 f962 	bl	800c110 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	75fb      	strb	r3, [r7, #23]
          break;
 800ae50:	e027      	b.n	800aea2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	d107      	bne.n	800ae6c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae5c:	f107 030f 	add.w	r3, r7, #15
 800ae60:	2201      	movs	r2, #1
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f001 f9bd 	bl	800c1e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae6a:	e01a      	b.n	800aea2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f001 f94e 	bl	800c110 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae74:	2302      	movs	r3, #2
 800ae76:	75fb      	strb	r3, [r7, #23]
          break;
 800ae78:	e013      	b.n	800aea2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae80:	2b03      	cmp	r3, #3
 800ae82:	d00d      	beq.n	800aea0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f001 f942 	bl	800c110 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae90:	e006      	b.n	800aea0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f001 f93b 	bl	800c110 <USBD_CtlError>
          ret = USBD_FAIL;
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	75fb      	strb	r3, [r7, #23]
          break;
 800ae9e:	e000      	b.n	800aea2 <USBD_CDC_Setup+0x12c>
          break;
 800aea0:	bf00      	nop
      }
      break;
 800aea2:	e006      	b.n	800aeb2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f001 f932 	bl	800c110 <USBD_CtlError>
      ret = USBD_FAIL;
 800aeac:	2302      	movs	r3, #2
 800aeae:	75fb      	strb	r3, [r7, #23]
      break;
 800aeb0:	bf00      	nop
  }

  return ret;
 800aeb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aece:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aed6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d03a      	beq.n	800af58 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aee2:	78fa      	ldrb	r2, [r7, #3]
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	4613      	mov	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	440b      	add	r3, r1
 800aef0:	331c      	adds	r3, #28
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d029      	beq.n	800af4c <USBD_CDC_DataIn+0x90>
 800aef8:	78fa      	ldrb	r2, [r7, #3]
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	440b      	add	r3, r1
 800af06:	331c      	adds	r3, #28
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	78f9      	ldrb	r1, [r7, #3]
 800af0c:	68b8      	ldr	r0, [r7, #8]
 800af0e:	460b      	mov	r3, r1
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	440b      	add	r3, r1
 800af14:	00db      	lsls	r3, r3, #3
 800af16:	4403      	add	r3, r0
 800af18:	3338      	adds	r3, #56	@ 0x38
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	fbb2 f1f3 	udiv	r1, r2, r3
 800af20:	fb01 f303 	mul.w	r3, r1, r3
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d110      	bne.n	800af4c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800af2a:	78fa      	ldrb	r2, [r7, #3]
 800af2c:	6879      	ldr	r1, [r7, #4]
 800af2e:	4613      	mov	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	440b      	add	r3, r1
 800af38:	331c      	adds	r3, #28
 800af3a:	2200      	movs	r2, #0
 800af3c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af3e:	78f9      	ldrb	r1, [r7, #3]
 800af40:	2300      	movs	r3, #0
 800af42:	2200      	movs	r2, #0
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f001 fdd6 	bl	800caf6 <USBD_LL_Transmit>
 800af4a:	e003      	b.n	800af54 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	e000      	b.n	800af5a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800af58:	2302      	movs	r3, #2
  }
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	460b      	mov	r3, r1
 800af6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af74:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800af76:	78fb      	ldrb	r3, [r7, #3]
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f001 fe01 	bl	800cb82 <USBD_LL_GetRxDataSize>
 800af80:	4602      	mov	r2, r0
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00d      	beq.n	800afae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800afa6:	4611      	mov	r1, r2
 800afa8:	4798      	blx	r3

    return USBD_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	e000      	b.n	800afb0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800afae:	2302      	movs	r3, #2
  }
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afc6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d014      	beq.n	800affc <USBD_CDC_EP0_RxReady+0x44>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800afd8:	2bff      	cmp	r3, #255	@ 0xff
 800afda:	d00f      	beq.n	800affc <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800afea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aff2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	22ff      	movs	r2, #255	@ 0xff
 800aff8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
	...

0800b008 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2243      	movs	r2, #67	@ 0x43
 800b014:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b016:	4b03      	ldr	r3, [pc, #12]	@ (800b024 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b018:	4618      	mov	r0, r3
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bc80      	pop	{r7}
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	200000bc 	.word	0x200000bc

0800b028 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2243      	movs	r2, #67	@ 0x43
 800b034:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b036:	4b03      	ldr	r3, [pc, #12]	@ (800b044 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b038:	4618      	mov	r0, r3
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bc80      	pop	{r7}
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	20000078 	.word	0x20000078

0800b048 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2243      	movs	r2, #67	@ 0x43
 800b054:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b056:	4b03      	ldr	r3, [pc, #12]	@ (800b064 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bc80      	pop	{r7}
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	20000100 	.word	0x20000100

0800b068 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	220a      	movs	r2, #10
 800b074:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b076:	4b03      	ldr	r3, [pc, #12]	@ (800b084 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bc80      	pop	{r7}
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	20000034 	.word	0x20000034

0800b088 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b092:	2302      	movs	r3, #2
 800b094:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d005      	beq.n	800b0a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3714      	adds	r7, #20
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bc80      	pop	{r7}
 800b0b2:	4770      	bx	lr

0800b0b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b087      	sub	sp, #28
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b0d2:	88fa      	ldrh	r2, [r7, #6]
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	371c      	adds	r7, #28
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bc80      	pop	{r7}
 800b0e4:	4770      	bx	lr

0800b0e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b085      	sub	sp, #20
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	bc80      	pop	{r7}
 800b10a:	4770      	bx	lr

0800b10c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b11a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b122:	2b00      	cmp	r3, #0
 800b124:	d01c      	beq.n	800b160 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d115      	bne.n	800b15c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2201      	movs	r2, #1
 800b134:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b14e:	b29b      	uxth	r3, r3
 800b150:	2181      	movs	r1, #129	@ 0x81
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f001 fccf 	bl	800caf6 <USBD_LL_Transmit>

      return USBD_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	e002      	b.n	800b162 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e000      	b.n	800b162 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b160:	2302      	movs	r3, #2
  }
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b178:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b180:	2b00      	cmp	r3, #0
 800b182:	d017      	beq.n	800b1b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	7c1b      	ldrb	r3, [r3, #16]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d109      	bne.n	800b1a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b192:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b196:	2101      	movs	r1, #1
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f001 fccf 	bl	800cb3c <USBD_LL_PrepareReceive>
 800b19e:	e007      	b.n	800b1b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1a6:	2340      	movs	r3, #64	@ 0x40
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f001 fcc6 	bl	800cb3c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	e000      	b.n	800b1b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b1b4:	2302      	movs	r3, #2
  }
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	60f8      	str	r0, [r7, #12]
 800b1c6:	60b9      	str	r1, [r7, #8]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	e01a      	b.n	800b20c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d003      	beq.n	800b1e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	79fa      	ldrb	r2, [r7, #7]
 800b202:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f001 fb33 	bl	800c870 <USBD_LL_Init>

  return USBD_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d006      	beq.n	800b236 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b230:	2300      	movs	r3, #0
 800b232:	73fb      	strb	r3, [r7, #15]
 800b234:	e001      	b.n	800b23a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b236:	2302      	movs	r3, #2
 800b238:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	bc80      	pop	{r7}
 800b244:	4770      	bx	lr

0800b246 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b082      	sub	sp, #8
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f001 fb68 	bl	800c924 <USBD_LL_Start>

  return USBD_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b25e:	b480      	push	{r7}
 800b260:	b083      	sub	sp, #12
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bc80      	pop	{r7}
 800b270:	4770      	bx	lr

0800b272 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b084      	sub	sp, #16
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	460b      	mov	r3, r1
 800b27c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b27e:	2302      	movs	r3, #2
 800b280:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00c      	beq.n	800b2a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	78fa      	ldrb	r2, [r7, #3]
 800b296:	4611      	mov	r1, r2
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	4798      	blx	r3
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	78fa      	ldrb	r2, [r7, #3]
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	4798      	blx	r3

  return USBD_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b082      	sub	sp, #8
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b2e6:	6839      	ldr	r1, [r7, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 fed8 	bl	800c09e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b30a:	f003 031f 	and.w	r3, r3, #31
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d016      	beq.n	800b340 <USBD_LL_SetupStage+0x6a>
 800b312:	2b02      	cmp	r3, #2
 800b314:	d81c      	bhi.n	800b350 <USBD_LL_SetupStage+0x7a>
 800b316:	2b00      	cmp	r3, #0
 800b318:	d002      	beq.n	800b320 <USBD_LL_SetupStage+0x4a>
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d008      	beq.n	800b330 <USBD_LL_SetupStage+0x5a>
 800b31e:	e017      	b.n	800b350 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f9cb 	bl	800b6c4 <USBD_StdDevReq>
      break;
 800b32e:	e01a      	b.n	800b366 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fa2d 	bl	800b798 <USBD_StdItfReq>
      break;
 800b33e:	e012      	b.n	800b366 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b346:	4619      	mov	r1, r3
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fa6d 	bl	800b828 <USBD_StdEPReq>
      break;
 800b34e:	e00a      	b.n	800b366 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b356:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	4619      	mov	r1, r3
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f001 fb40 	bl	800c9e4 <USBD_LL_StallEP>
      break;
 800b364:	bf00      	nop
  }

  return USBD_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	460b      	mov	r3, r1
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b37e:	7afb      	ldrb	r3, [r7, #11]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d14b      	bne.n	800b41c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b38a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b392:	2b03      	cmp	r3, #3
 800b394:	d134      	bne.n	800b400 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	68da      	ldr	r2, [r3, #12]
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d919      	bls.n	800b3d6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	68da      	ldr	r2, [r3, #12]
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	1ad2      	subs	r2, r2, r3
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	68da      	ldr	r2, [r3, #12]
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d203      	bcs.n	800b3c4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	e002      	b.n	800b3ca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f000 ff54 	bl	800c27c <USBD_CtlContinueRx>
 800b3d4:	e038      	b.n	800b448 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b3e8:	2b03      	cmp	r3, #3
 800b3ea:	d105      	bne.n	800b3f8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 ff51 	bl	800c2a0 <USBD_CtlSendStatus>
 800b3fe:	e023      	b.n	800b448 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b406:	2b05      	cmp	r3, #5
 800b408:	d11e      	bne.n	800b448 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b412:	2100      	movs	r1, #0
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f001 fae5 	bl	800c9e4 <USBD_LL_StallEP>
 800b41a:	e015      	b.n	800b448 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00d      	beq.n	800b444 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d108      	bne.n	800b444 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	7afa      	ldrb	r2, [r7, #11]
 800b43c:	4611      	mov	r1, r2
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	4798      	blx	r3
 800b442:	e001      	b.n	800b448 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b444:	2302      	movs	r3, #2
 800b446:	e000      	b.n	800b44a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3718      	adds	r7, #24
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b086      	sub	sp, #24
 800b456:	af00      	add	r7, sp, #0
 800b458:	60f8      	str	r0, [r7, #12]
 800b45a:	460b      	mov	r3, r1
 800b45c:	607a      	str	r2, [r7, #4]
 800b45e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b460:	7afb      	ldrb	r3, [r7, #11]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d17f      	bne.n	800b566 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3314      	adds	r3, #20
 800b46a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b472:	2b02      	cmp	r3, #2
 800b474:	d15c      	bne.n	800b530 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	68da      	ldr	r2, [r3, #12]
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d915      	bls.n	800b4ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	68da      	ldr	r2, [r3, #12]
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	1ad2      	subs	r2, r2, r3
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	b29b      	uxth	r3, r3
 800b496:	461a      	mov	r2, r3
 800b498:	6879      	ldr	r1, [r7, #4]
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f000 febe 	bl	800c21c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	68f8      	ldr	r0, [r7, #12]
 800b4a8:	f001 fb48 	bl	800cb3c <USBD_LL_PrepareReceive>
 800b4ac:	e04e      	b.n	800b54c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	6912      	ldr	r2, [r2, #16]
 800b4b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4ba:	fb01 f202 	mul.w	r2, r1, r2
 800b4be:	1a9b      	subs	r3, r3, r2
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d11c      	bne.n	800b4fe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	689a      	ldr	r2, [r3, #8]
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d316      	bcc.n	800b4fe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d20f      	bcs.n	800b4fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f000 fe9a 	bl	800c21c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f001 fb20 	bl	800cb3c <USBD_LL_PrepareReceive>
 800b4fc:	e026      	b.n	800b54c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00a      	beq.n	800b520 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b510:	2b03      	cmp	r3, #3
 800b512:	d105      	bne.n	800b520 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b520:	2180      	movs	r1, #128	@ 0x80
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f001 fa5e 	bl	800c9e4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f000 fecc 	bl	800c2c6 <USBD_CtlReceiveStatus>
 800b52e:	e00d      	b.n	800b54c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b536:	2b04      	cmp	r3, #4
 800b538:	d004      	beq.n	800b544 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b540:	2b00      	cmp	r3, #0
 800b542:	d103      	bne.n	800b54c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b544:	2180      	movs	r1, #128	@ 0x80
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f001 fa4c 	bl	800c9e4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b552:	2b01      	cmp	r3, #1
 800b554:	d11d      	bne.n	800b592 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f7ff fe81 	bl	800b25e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b564:	e015      	b.n	800b592 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00d      	beq.n	800b58e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b578:	2b03      	cmp	r3, #3
 800b57a:	d108      	bne.n	800b58e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	7afa      	ldrb	r2, [r7, #11]
 800b586:	4611      	mov	r1, r2
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	4798      	blx	r3
 800b58c:	e001      	b.n	800b592 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b58e:	2302      	movs	r3, #2
 800b590:	e000      	b.n	800b594 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3718      	adds	r7, #24
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5a4:	2340      	movs	r3, #64	@ 0x40
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f001 f9d5 	bl	800c95a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2240      	movs	r2, #64	@ 0x40
 800b5bc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5c0:	2340      	movs	r3, #64	@ 0x40
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2180      	movs	r1, #128	@ 0x80
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f001 f9c7 	bl	800c95a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2240      	movs	r2, #64	@ 0x40
 800b5d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d009      	beq.n	800b614 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	6852      	ldr	r2, [r2, #4]
 800b60c:	b2d2      	uxtb	r2, r2
 800b60e:	4611      	mov	r1, r2
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	4798      	blx	r3
  }

  return USBD_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b61e:	b480      	push	{r7}
 800b620:	b083      	sub	sp, #12
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	460b      	mov	r3, r1
 800b628:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	78fa      	ldrb	r2, [r7, #3]
 800b62e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	bc80      	pop	{r7}
 800b63a:	4770      	bx	lr

0800b63c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2204      	movs	r2, #4
 800b654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	bc80      	pop	{r7}
 800b662:	4770      	bx	lr

0800b664 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b672:	2b04      	cmp	r3, #4
 800b674:	d105      	bne.n	800b682 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	bc80      	pop	{r7}
 800b68c:	4770      	bx	lr

0800b68e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b082      	sub	sp, #8
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b69c:	2b03      	cmp	r3, #3
 800b69e:	d10b      	bne.n	800b6b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6a6:	69db      	ldr	r3, [r3, #28]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d005      	beq.n	800b6b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6b2:	69db      	ldr	r3, [r3, #28]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
	...

0800b6c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b6da:	2b40      	cmp	r3, #64	@ 0x40
 800b6dc:	d005      	beq.n	800b6ea <USBD_StdDevReq+0x26>
 800b6de:	2b40      	cmp	r3, #64	@ 0x40
 800b6e0:	d84f      	bhi.n	800b782 <USBD_StdDevReq+0xbe>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d009      	beq.n	800b6fa <USBD_StdDevReq+0x36>
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	d14b      	bne.n	800b782 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	4798      	blx	r3
      break;
 800b6f8:	e048      	b.n	800b78c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	2b09      	cmp	r3, #9
 800b700:	d839      	bhi.n	800b776 <USBD_StdDevReq+0xb2>
 800b702:	a201      	add	r2, pc, #4	@ (adr r2, 800b708 <USBD_StdDevReq+0x44>)
 800b704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b708:	0800b759 	.word	0x0800b759
 800b70c:	0800b76d 	.word	0x0800b76d
 800b710:	0800b777 	.word	0x0800b777
 800b714:	0800b763 	.word	0x0800b763
 800b718:	0800b777 	.word	0x0800b777
 800b71c:	0800b73b 	.word	0x0800b73b
 800b720:	0800b731 	.word	0x0800b731
 800b724:	0800b777 	.word	0x0800b777
 800b728:	0800b74f 	.word	0x0800b74f
 800b72c:	0800b745 	.word	0x0800b745
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f9dc 	bl	800baf0 <USBD_GetDescriptor>
          break;
 800b738:	e022      	b.n	800b780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fb3f 	bl	800bdc0 <USBD_SetAddress>
          break;
 800b742:	e01d      	b.n	800b780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fb7e 	bl	800be48 <USBD_SetConfig>
          break;
 800b74c:	e018      	b.n	800b780 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b74e:	6839      	ldr	r1, [r7, #0]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fc07 	bl	800bf64 <USBD_GetConfig>
          break;
 800b756:	e013      	b.n	800b780 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fc37 	bl	800bfce <USBD_GetStatus>
          break;
 800b760:	e00e      	b.n	800b780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b762:	6839      	ldr	r1, [r7, #0]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fc65 	bl	800c034 <USBD_SetFeature>
          break;
 800b76a:	e009      	b.n	800b780 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fc74 	bl	800c05c <USBD_ClrFeature>
          break;
 800b774:	e004      	b.n	800b780 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fcc9 	bl	800c110 <USBD_CtlError>
          break;
 800b77e:	bf00      	nop
      }
      break;
 800b780:	e004      	b.n	800b78c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fcc3 	bl	800c110 <USBD_CtlError>
      break;
 800b78a:	bf00      	nop
  }

  return ret;
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop

0800b798 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7ae:	2b40      	cmp	r3, #64	@ 0x40
 800b7b0:	d005      	beq.n	800b7be <USBD_StdItfReq+0x26>
 800b7b2:	2b40      	cmp	r3, #64	@ 0x40
 800b7b4:	d82e      	bhi.n	800b814 <USBD_StdItfReq+0x7c>
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <USBD_StdItfReq+0x26>
 800b7ba:	2b20      	cmp	r3, #32
 800b7bc:	d12a      	bne.n	800b814 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d81d      	bhi.n	800b806 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	889b      	ldrh	r3, [r3, #4]
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d813      	bhi.n	800b7fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	4798      	blx	r3
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	88db      	ldrh	r3, [r3, #6]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d110      	bne.n	800b810 <USBD_StdItfReq+0x78>
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10d      	bne.n	800b810 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fd53 	bl	800c2a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b7fa:	e009      	b.n	800b810 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fc86 	bl	800c110 <USBD_CtlError>
          break;
 800b804:	e004      	b.n	800b810 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fc81 	bl	800c110 <USBD_CtlError>
          break;
 800b80e:	e000      	b.n	800b812 <USBD_StdItfReq+0x7a>
          break;
 800b810:	bf00      	nop
      }
      break;
 800b812:	e004      	b.n	800b81e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fc7a 	bl	800c110 <USBD_CtlError>
      break;
 800b81c:	bf00      	nop
  }

  return USBD_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	889b      	ldrh	r3, [r3, #4]
 800b83a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b844:	2b40      	cmp	r3, #64	@ 0x40
 800b846:	d007      	beq.n	800b858 <USBD_StdEPReq+0x30>
 800b848:	2b40      	cmp	r3, #64	@ 0x40
 800b84a:	f200 8146 	bhi.w	800bada <USBD_StdEPReq+0x2b2>
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00a      	beq.n	800b868 <USBD_StdEPReq+0x40>
 800b852:	2b20      	cmp	r3, #32
 800b854:	f040 8141 	bne.w	800bada <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	4798      	blx	r3
      break;
 800b866:	e13d      	b.n	800bae4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b870:	2b20      	cmp	r3, #32
 800b872:	d10a      	bne.n	800b88a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	4798      	blx	r3
 800b882:	4603      	mov	r3, r0
 800b884:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b886:	7bfb      	ldrb	r3, [r7, #15]
 800b888:	e12d      	b.n	800bae6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	785b      	ldrb	r3, [r3, #1]
 800b88e:	2b03      	cmp	r3, #3
 800b890:	d007      	beq.n	800b8a2 <USBD_StdEPReq+0x7a>
 800b892:	2b03      	cmp	r3, #3
 800b894:	f300 811b 	bgt.w	800bace <USBD_StdEPReq+0x2a6>
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d072      	beq.n	800b982 <USBD_StdEPReq+0x15a>
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d03a      	beq.n	800b916 <USBD_StdEPReq+0xee>
 800b8a0:	e115      	b.n	800bace <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d002      	beq.n	800b8b2 <USBD_StdEPReq+0x8a>
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d015      	beq.n	800b8dc <USBD_StdEPReq+0xb4>
 800b8b0:	e02b      	b.n	800b90a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8b2:	7bbb      	ldrb	r3, [r7, #14]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00c      	beq.n	800b8d2 <USBD_StdEPReq+0xaa>
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	2b80      	cmp	r3, #128	@ 0x80
 800b8bc:	d009      	beq.n	800b8d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f001 f88e 	bl	800c9e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b8c8:	2180      	movs	r1, #128	@ 0x80
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f001 f88a 	bl	800c9e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8d0:	e020      	b.n	800b914 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b8d2:	6839      	ldr	r1, [r7, #0]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fc1b 	bl	800c110 <USBD_CtlError>
              break;
 800b8da:	e01b      	b.n	800b914 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	885b      	ldrh	r3, [r3, #2]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10e      	bne.n	800b902 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00b      	beq.n	800b902 <USBD_StdEPReq+0xda>
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	2b80      	cmp	r3, #128	@ 0x80
 800b8ee:	d008      	beq.n	800b902 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	88db      	ldrh	r3, [r3, #6]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d104      	bne.n	800b902 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f001 f871 	bl	800c9e4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fccc 	bl	800c2a0 <USBD_CtlSendStatus>

              break;
 800b908:	e004      	b.n	800b914 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fbff 	bl	800c110 <USBD_CtlError>
              break;
 800b912:	bf00      	nop
          }
          break;
 800b914:	e0e0      	b.n	800bad8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d002      	beq.n	800b926 <USBD_StdEPReq+0xfe>
 800b920:	2b03      	cmp	r3, #3
 800b922:	d015      	beq.n	800b950 <USBD_StdEPReq+0x128>
 800b924:	e026      	b.n	800b974 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00c      	beq.n	800b946 <USBD_StdEPReq+0x11e>
 800b92c:	7bbb      	ldrb	r3, [r7, #14]
 800b92e:	2b80      	cmp	r3, #128	@ 0x80
 800b930:	d009      	beq.n	800b946 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f001 f854 	bl	800c9e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b93c:	2180      	movs	r1, #128	@ 0x80
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f001 f850 	bl	800c9e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b944:	e01c      	b.n	800b980 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fbe1 	bl	800c110 <USBD_CtlError>
              break;
 800b94e:	e017      	b.n	800b980 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	885b      	ldrh	r3, [r3, #2]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d112      	bne.n	800b97e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b958:	7bbb      	ldrb	r3, [r7, #14]
 800b95a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d004      	beq.n	800b96c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b962:	7bbb      	ldrb	r3, [r7, #14]
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f001 f85b 	bl	800ca22 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 fc97 	bl	800c2a0 <USBD_CtlSendStatus>
              }
              break;
 800b972:	e004      	b.n	800b97e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fbca 	bl	800c110 <USBD_CtlError>
              break;
 800b97c:	e000      	b.n	800b980 <USBD_StdEPReq+0x158>
              break;
 800b97e:	bf00      	nop
          }
          break;
 800b980:	e0aa      	b.n	800bad8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d002      	beq.n	800b992 <USBD_StdEPReq+0x16a>
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d032      	beq.n	800b9f6 <USBD_StdEPReq+0x1ce>
 800b990:	e097      	b.n	800bac2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d007      	beq.n	800b9a8 <USBD_StdEPReq+0x180>
 800b998:	7bbb      	ldrb	r3, [r7, #14]
 800b99a:	2b80      	cmp	r3, #128	@ 0x80
 800b99c:	d004      	beq.n	800b9a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b99e:	6839      	ldr	r1, [r7, #0]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fbb5 	bl	800c110 <USBD_CtlError>
                break;
 800b9a6:	e091      	b.n	800bacc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	da0b      	bge.n	800b9c8 <USBD_StdEPReq+0x1a0>
 800b9b0:	7bbb      	ldrb	r3, [r7, #14]
 800b9b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	4413      	add	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	3310      	adds	r3, #16
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	e00b      	b.n	800b9e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9c8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	4413      	add	r3, r2
 800b9de:	3304      	adds	r3, #4
 800b9e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fbf8 	bl	800c1e4 <USBD_CtlSendData>
              break;
 800b9f4:	e06a      	b.n	800bacc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b9f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	da11      	bge.n	800ba22 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ba00:	f003 020f 	and.w	r2, r3, #15
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	4613      	mov	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	440b      	add	r3, r1
 800ba10:	3318      	adds	r3, #24
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d117      	bne.n	800ba48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fb78 	bl	800c110 <USBD_CtlError>
                  break;
 800ba20:	e054      	b.n	800bacc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	f003 020f 	and.w	r2, r3, #15
 800ba28:	6879      	ldr	r1, [r7, #4]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	440b      	add	r3, r1
 800ba34:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d104      	bne.n	800ba48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ba3e:	6839      	ldr	r1, [r7, #0]
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fb65 	bl	800c110 <USBD_CtlError>
                  break;
 800ba46:	e041      	b.n	800bacc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	da0b      	bge.n	800ba68 <USBD_StdEPReq+0x240>
 800ba50:	7bbb      	ldrb	r3, [r7, #14]
 800ba52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba56:	4613      	mov	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4413      	add	r3, r2
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	3310      	adds	r3, #16
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	4413      	add	r3, r2
 800ba64:	3304      	adds	r3, #4
 800ba66:	e00b      	b.n	800ba80 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba68:	7bbb      	ldrb	r3, [r7, #14]
 800ba6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba6e:	4613      	mov	r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	3304      	adds	r3, #4
 800ba80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba82:	7bbb      	ldrb	r3, [r7, #14]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <USBD_StdEPReq+0x266>
 800ba88:	7bbb      	ldrb	r3, [r7, #14]
 800ba8a:	2b80      	cmp	r3, #128	@ 0x80
 800ba8c:	d103      	bne.n	800ba96 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	2200      	movs	r2, #0
 800ba92:	601a      	str	r2, [r3, #0]
 800ba94:	e00e      	b.n	800bab4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ba96:	7bbb      	ldrb	r3, [r7, #14]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 ffe0 	bl	800ca60 <USBD_LL_IsStallEP>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d003      	beq.n	800baae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	2201      	movs	r2, #1
 800baaa:	601a      	str	r2, [r3, #0]
 800baac:	e002      	b.n	800bab4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	2200      	movs	r2, #0
 800bab2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	2202      	movs	r2, #2
 800bab8:	4619      	mov	r1, r3
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fb92 	bl	800c1e4 <USBD_CtlSendData>
              break;
 800bac0:	e004      	b.n	800bacc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fb23 	bl	800c110 <USBD_CtlError>
              break;
 800baca:	bf00      	nop
          }
          break;
 800bacc:	e004      	b.n	800bad8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bace:	6839      	ldr	r1, [r7, #0]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fb1d 	bl	800c110 <USBD_CtlError>
          break;
 800bad6:	bf00      	nop
      }
      break;
 800bad8:	e004      	b.n	800bae4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fb17 	bl	800c110 <USBD_CtlError>
      break;
 800bae2:	bf00      	nop
  }

  return ret;
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
	...

0800baf0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bafa:	2300      	movs	r3, #0
 800bafc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb02:	2300      	movs	r3, #0
 800bb04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	885b      	ldrh	r3, [r3, #2]
 800bb0a:	0a1b      	lsrs	r3, r3, #8
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	2b06      	cmp	r3, #6
 800bb12:	f200 8128 	bhi.w	800bd66 <USBD_GetDescriptor+0x276>
 800bb16:	a201      	add	r2, pc, #4	@ (adr r2, 800bb1c <USBD_GetDescriptor+0x2c>)
 800bb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1c:	0800bb39 	.word	0x0800bb39
 800bb20:	0800bb51 	.word	0x0800bb51
 800bb24:	0800bb91 	.word	0x0800bb91
 800bb28:	0800bd67 	.word	0x0800bd67
 800bb2c:	0800bd67 	.word	0x0800bd67
 800bb30:	0800bd07 	.word	0x0800bd07
 800bb34:	0800bd33 	.word	0x0800bd33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	7c12      	ldrb	r2, [r2, #16]
 800bb44:	f107 0108 	add.w	r1, r7, #8
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4798      	blx	r3
 800bb4c:	60f8      	str	r0, [r7, #12]
      break;
 800bb4e:	e112      	b.n	800bd76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	7c1b      	ldrb	r3, [r3, #16]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10d      	bne.n	800bb74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb60:	f107 0208 	add.w	r2, r7, #8
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
 800bb68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	2202      	movs	r2, #2
 800bb70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb72:	e100      	b.n	800bd76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb7c:	f107 0208 	add.w	r2, r7, #8
 800bb80:	4610      	mov	r0, r2
 800bb82:	4798      	blx	r3
 800bb84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	701a      	strb	r2, [r3, #0]
      break;
 800bb8e:	e0f2      	b.n	800bd76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	885b      	ldrh	r3, [r3, #2]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b05      	cmp	r3, #5
 800bb98:	f200 80ac 	bhi.w	800bcf4 <USBD_GetDescriptor+0x204>
 800bb9c:	a201      	add	r2, pc, #4	@ (adr r2, 800bba4 <USBD_GetDescriptor+0xb4>)
 800bb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba2:	bf00      	nop
 800bba4:	0800bbbd 	.word	0x0800bbbd
 800bba8:	0800bbf1 	.word	0x0800bbf1
 800bbac:	0800bc25 	.word	0x0800bc25
 800bbb0:	0800bc59 	.word	0x0800bc59
 800bbb4:	0800bc8d 	.word	0x0800bc8d
 800bbb8:	0800bcc1 	.word	0x0800bcc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00b      	beq.n	800bbe0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	7c12      	ldrb	r2, [r2, #16]
 800bbd4:	f107 0108 	add.w	r1, r7, #8
 800bbd8:	4610      	mov	r0, r2
 800bbda:	4798      	blx	r3
 800bbdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbde:	e091      	b.n	800bd04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fa94 	bl	800c110 <USBD_CtlError>
            err++;
 800bbe8:	7afb      	ldrb	r3, [r7, #11]
 800bbea:	3301      	adds	r3, #1
 800bbec:	72fb      	strb	r3, [r7, #11]
          break;
 800bbee:	e089      	b.n	800bd04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00b      	beq.n	800bc14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	7c12      	ldrb	r2, [r2, #16]
 800bc08:	f107 0108 	add.w	r1, r7, #8
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	4798      	blx	r3
 800bc10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc12:	e077      	b.n	800bd04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fa7a 	bl	800c110 <USBD_CtlError>
            err++;
 800bc1c:	7afb      	ldrb	r3, [r7, #11]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	72fb      	strb	r3, [r7, #11]
          break;
 800bc22:	e06f      	b.n	800bd04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00b      	beq.n	800bc48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	7c12      	ldrb	r2, [r2, #16]
 800bc3c:	f107 0108 	add.w	r1, r7, #8
 800bc40:	4610      	mov	r0, r2
 800bc42:	4798      	blx	r3
 800bc44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc46:	e05d      	b.n	800bd04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fa60 	bl	800c110 <USBD_CtlError>
            err++;
 800bc50:	7afb      	ldrb	r3, [r7, #11]
 800bc52:	3301      	adds	r3, #1
 800bc54:	72fb      	strb	r3, [r7, #11]
          break;
 800bc56:	e055      	b.n	800bd04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bc5e:	691b      	ldr	r3, [r3, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00b      	beq.n	800bc7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	7c12      	ldrb	r2, [r2, #16]
 800bc70:	f107 0108 	add.w	r1, r7, #8
 800bc74:	4610      	mov	r0, r2
 800bc76:	4798      	blx	r3
 800bc78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc7a:	e043      	b.n	800bd04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fa46 	bl	800c110 <USBD_CtlError>
            err++;
 800bc84:	7afb      	ldrb	r3, [r7, #11]
 800bc86:	3301      	adds	r3, #1
 800bc88:	72fb      	strb	r3, [r7, #11]
          break;
 800bc8a:	e03b      	b.n	800bd04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bc9e:	695b      	ldr	r3, [r3, #20]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	7c12      	ldrb	r2, [r2, #16]
 800bca4:	f107 0108 	add.w	r1, r7, #8
 800bca8:	4610      	mov	r0, r2
 800bcaa:	4798      	blx	r3
 800bcac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcae:	e029      	b.n	800bd04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fa2c 	bl	800c110 <USBD_CtlError>
            err++;
 800bcb8:	7afb      	ldrb	r3, [r7, #11]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcbe:	e021      	b.n	800bd04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bcc6:	699b      	ldr	r3, [r3, #24]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bcd2:	699b      	ldr	r3, [r3, #24]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	7c12      	ldrb	r2, [r2, #16]
 800bcd8:	f107 0108 	add.w	r1, r7, #8
 800bcdc:	4610      	mov	r0, r2
 800bcde:	4798      	blx	r3
 800bce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bce2:	e00f      	b.n	800bd04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fa12 	bl	800c110 <USBD_CtlError>
            err++;
 800bcec:	7afb      	ldrb	r3, [r7, #11]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcf2:	e007      	b.n	800bd04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fa0a 	bl	800c110 <USBD_CtlError>
          err++;
 800bcfc:	7afb      	ldrb	r3, [r7, #11]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bd02:	e038      	b.n	800bd76 <USBD_GetDescriptor+0x286>
 800bd04:	e037      	b.n	800bd76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	7c1b      	ldrb	r3, [r3, #16]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d109      	bne.n	800bd22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd16:	f107 0208 	add.w	r2, r7, #8
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	4798      	blx	r3
 800bd1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd20:	e029      	b.n	800bd76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f9f3 	bl	800c110 <USBD_CtlError>
        err++;
 800bd2a:	7afb      	ldrb	r3, [r7, #11]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd30:	e021      	b.n	800bd76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	7c1b      	ldrb	r3, [r3, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10d      	bne.n	800bd56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd42:	f107 0208 	add.w	r2, r7, #8
 800bd46:	4610      	mov	r0, r2
 800bd48:	4798      	blx	r3
 800bd4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	2207      	movs	r2, #7
 800bd52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd54:	e00f      	b.n	800bd76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd56:	6839      	ldr	r1, [r7, #0]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f9d9 	bl	800c110 <USBD_CtlError>
        err++;
 800bd5e:	7afb      	ldrb	r3, [r7, #11]
 800bd60:	3301      	adds	r3, #1
 800bd62:	72fb      	strb	r3, [r7, #11]
      break;
 800bd64:	e007      	b.n	800bd76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f9d1 	bl	800c110 <USBD_CtlError>
      err++;
 800bd6e:	7afb      	ldrb	r3, [r7, #11]
 800bd70:	3301      	adds	r3, #1
 800bd72:	72fb      	strb	r3, [r7, #11]
      break;
 800bd74:	bf00      	nop
  }

  if (err != 0U)
 800bd76:	7afb      	ldrb	r3, [r7, #11]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d11c      	bne.n	800bdb6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bd7c:	893b      	ldrh	r3, [r7, #8]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d011      	beq.n	800bda6 <USBD_GetDescriptor+0x2b6>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	88db      	ldrh	r3, [r3, #6]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00d      	beq.n	800bda6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	88da      	ldrh	r2, [r3, #6]
 800bd8e:	893b      	ldrh	r3, [r7, #8]
 800bd90:	4293      	cmp	r3, r2
 800bd92:	bf28      	it	cs
 800bd94:	4613      	movcs	r3, r2
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd9a:	893b      	ldrh	r3, [r7, #8]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	68f9      	ldr	r1, [r7, #12]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fa1f 	bl	800c1e4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	88db      	ldrh	r3, [r3, #6]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d104      	bne.n	800bdb8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fa76 	bl	800c2a0 <USBD_CtlSendStatus>
 800bdb4:	e000      	b.n	800bdb8 <USBD_GetDescriptor+0x2c8>
    return;
 800bdb6:	bf00      	nop
    }
  }
}
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop

0800bdc0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	889b      	ldrh	r3, [r3, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d130      	bne.n	800be34 <USBD_SetAddress+0x74>
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	88db      	ldrh	r3, [r3, #6]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d12c      	bne.n	800be34 <USBD_SetAddress+0x74>
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	885b      	ldrh	r3, [r3, #2]
 800bdde:	2b7f      	cmp	r3, #127	@ 0x7f
 800bde0:	d828      	bhi.n	800be34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	885b      	ldrh	r3, [r3, #2]
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdf4:	2b03      	cmp	r3, #3
 800bdf6:	d104      	bne.n	800be02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f988 	bl	800c110 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be00:	e01d      	b.n	800be3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	7bfa      	ldrb	r2, [r7, #15]
 800be06:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fe52 	bl	800cab8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fa43 	bl	800c2a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d004      	beq.n	800be2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be28:	e009      	b.n	800be3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be32:	e004      	b.n	800be3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f96a 	bl	800c110 <USBD_CtlError>
  }
}
 800be3c:	bf00      	nop
 800be3e:	bf00      	nop
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
	...

0800be48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	885b      	ldrh	r3, [r3, #2]
 800be56:	b2da      	uxtb	r2, r3
 800be58:	4b41      	ldr	r3, [pc, #260]	@ (800bf60 <USBD_SetConfig+0x118>)
 800be5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be5c:	4b40      	ldr	r3, [pc, #256]	@ (800bf60 <USBD_SetConfig+0x118>)
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d904      	bls.n	800be6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f952 	bl	800c110 <USBD_CtlError>
 800be6c:	e075      	b.n	800bf5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be74:	2b02      	cmp	r3, #2
 800be76:	d002      	beq.n	800be7e <USBD_SetConfig+0x36>
 800be78:	2b03      	cmp	r3, #3
 800be7a:	d023      	beq.n	800bec4 <USBD_SetConfig+0x7c>
 800be7c:	e062      	b.n	800bf44 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800be7e:	4b38      	ldr	r3, [pc, #224]	@ (800bf60 <USBD_SetConfig+0x118>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d01a      	beq.n	800bebc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800be86:	4b36      	ldr	r3, [pc, #216]	@ (800bf60 <USBD_SetConfig+0x118>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	461a      	mov	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2203      	movs	r2, #3
 800be94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800be98:	4b31      	ldr	r3, [pc, #196]	@ (800bf60 <USBD_SetConfig+0x118>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	4619      	mov	r1, r3
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7ff f9e7 	bl	800b272 <USBD_SetClassConfig>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d104      	bne.n	800beb4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 f92f 	bl	800c110 <USBD_CtlError>
            return;
 800beb2:	e052      	b.n	800bf5a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 f9f3 	bl	800c2a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800beba:	e04e      	b.n	800bf5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f9ef 	bl	800c2a0 <USBD_CtlSendStatus>
        break;
 800bec2:	e04a      	b.n	800bf5a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bec4:	4b26      	ldr	r3, [pc, #152]	@ (800bf60 <USBD_SetConfig+0x118>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d112      	bne.n	800bef2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2202      	movs	r2, #2
 800bed0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800bed4:	4b22      	ldr	r3, [pc, #136]	@ (800bf60 <USBD_SetConfig+0x118>)
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	461a      	mov	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bede:	4b20      	ldr	r3, [pc, #128]	@ (800bf60 <USBD_SetConfig+0x118>)
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f7ff f9e3 	bl	800b2b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f9d8 	bl	800c2a0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bef0:	e033      	b.n	800bf5a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bef2:	4b1b      	ldr	r3, [pc, #108]	@ (800bf60 <USBD_SetConfig+0x118>)
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	429a      	cmp	r2, r3
 800befe:	d01d      	beq.n	800bf3c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	4619      	mov	r1, r3
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f7ff f9d1 	bl	800b2b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bf0e:	4b14      	ldr	r3, [pc, #80]	@ (800bf60 <USBD_SetConfig+0x118>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bf18:	4b11      	ldr	r3, [pc, #68]	@ (800bf60 <USBD_SetConfig+0x118>)
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7ff f9a7 	bl	800b272 <USBD_SetClassConfig>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d104      	bne.n	800bf34 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 f8ef 	bl	800c110 <USBD_CtlError>
            return;
 800bf32:	e012      	b.n	800bf5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 f9b3 	bl	800c2a0 <USBD_CtlSendStatus>
        break;
 800bf3a:	e00e      	b.n	800bf5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f9af 	bl	800c2a0 <USBD_CtlSendStatus>
        break;
 800bf42:	e00a      	b.n	800bf5a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bf44:	6839      	ldr	r1, [r7, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f8e2 	bl	800c110 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bf4c:	4b04      	ldr	r3, [pc, #16]	@ (800bf60 <USBD_SetConfig+0x118>)
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	4619      	mov	r1, r3
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7ff f9ac 	bl	800b2b0 <USBD_ClrClassConfig>
        break;
 800bf58:	bf00      	nop
    }
  }
}
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	20000438 	.word	0x20000438

0800bf64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	88db      	ldrh	r3, [r3, #6]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d004      	beq.n	800bf80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f8c9 	bl	800c110 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf7e:	e022      	b.n	800bfc6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	dc02      	bgt.n	800bf90 <USBD_GetConfig+0x2c>
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	dc03      	bgt.n	800bf96 <USBD_GetConfig+0x32>
 800bf8e:	e015      	b.n	800bfbc <USBD_GetConfig+0x58>
 800bf90:	2b03      	cmp	r3, #3
 800bf92:	d00b      	beq.n	800bfac <USBD_GetConfig+0x48>
 800bf94:	e012      	b.n	800bfbc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f91d 	bl	800c1e4 <USBD_CtlSendData>
        break;
 800bfaa:	e00c      	b.n	800bfc6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3304      	adds	r3, #4
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f915 	bl	800c1e4 <USBD_CtlSendData>
        break;
 800bfba:	e004      	b.n	800bfc6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bfbc:	6839      	ldr	r1, [r7, #0]
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f8a6 	bl	800c110 <USBD_CtlError>
        break;
 800bfc4:	bf00      	nop
}
 800bfc6:	bf00      	nop
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b082      	sub	sp, #8
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	d81e      	bhi.n	800c022 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	88db      	ldrh	r3, [r3, #6]
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d004      	beq.n	800bff6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f88e 	bl	800c110 <USBD_CtlError>
        break;
 800bff4:	e01a      	b.n	800c02c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2201      	movs	r2, #1
 800bffa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c002:	2b00      	cmp	r3, #0
 800c004:	d005      	beq.n	800c012 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	f043 0202 	orr.w	r2, r3, #2
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	330c      	adds	r3, #12
 800c016:	2202      	movs	r2, #2
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f8e2 	bl	800c1e4 <USBD_CtlSendData>
      break;
 800c020:	e004      	b.n	800c02c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 f873 	bl	800c110 <USBD_CtlError>
      break;
 800c02a:	bf00      	nop
  }
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	885b      	ldrh	r3, [r3, #2]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d106      	bne.n	800c054 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2201      	movs	r2, #1
 800c04a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 f926 	bl	800c2a0 <USBD_CtlSendStatus>
  }
}
 800c054:	bf00      	nop
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c06c:	3b01      	subs	r3, #1
 800c06e:	2b02      	cmp	r3, #2
 800c070:	d80b      	bhi.n	800c08a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	885b      	ldrh	r3, [r3, #2]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d10c      	bne.n	800c094 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f90c 	bl	800c2a0 <USBD_CtlSendStatus>
      }
      break;
 800c088:	e004      	b.n	800c094 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c08a:	6839      	ldr	r1, [r7, #0]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f83f 	bl	800c110 <USBD_CtlError>
      break;
 800c092:	e000      	b.n	800c096 <USBD_ClrFeature+0x3a>
      break;
 800c094:	bf00      	nop
  }
}
 800c096:	bf00      	nop
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b083      	sub	sp, #12
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	781a      	ldrb	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	785a      	ldrb	r2, [r3, #1]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	3302      	adds	r3, #2
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	3303      	adds	r3, #3
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	021b      	lsls	r3, r3, #8
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	4413      	add	r3, r2
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	3305      	adds	r3, #5
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	021b      	lsls	r3, r3, #8
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	4413      	add	r3, r2
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	3306      	adds	r3, #6
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	3307      	adds	r3, #7
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	021b      	lsls	r3, r3, #8
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	4413      	add	r3, r2
 800c100:	b29a      	uxth	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	80da      	strh	r2, [r3, #6]

}
 800c106:	bf00      	nop
 800c108:	370c      	adds	r7, #12
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bc80      	pop	{r7}
 800c10e:	4770      	bx	lr

0800c110 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c11a:	2180      	movs	r1, #128	@ 0x80
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fc61 	bl	800c9e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c122:	2100      	movs	r1, #0
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fc5d 	bl	800c9e4 <USBD_LL_StallEP>
}
 800c12a:	bf00      	nop
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b086      	sub	sp, #24
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c13e:	2300      	movs	r3, #0
 800c140:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d032      	beq.n	800c1ae <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f000 f834 	bl	800c1b6 <USBD_GetLen>
 800c14e:	4603      	mov	r3, r0
 800c150:	3301      	adds	r3, #1
 800c152:	b29b      	uxth	r3, r3
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	b29a      	uxth	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c15c:	7dfb      	ldrb	r3, [r7, #23]
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	75fa      	strb	r2, [r7, #23]
 800c162:	461a      	mov	r2, r3
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	4413      	add	r3, r2
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	7812      	ldrb	r2, [r2, #0]
 800c16c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c16e:	7dfb      	ldrb	r3, [r7, #23]
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	75fa      	strb	r2, [r7, #23]
 800c174:	461a      	mov	r2, r3
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	4413      	add	r3, r2
 800c17a:	2203      	movs	r2, #3
 800c17c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c17e:	e012      	b.n	800c1a6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	60fa      	str	r2, [r7, #12]
 800c186:	7dfa      	ldrb	r2, [r7, #23]
 800c188:	1c51      	adds	r1, r2, #1
 800c18a:	75f9      	strb	r1, [r7, #23]
 800c18c:	4611      	mov	r1, r2
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	440a      	add	r2, r1
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c196:	7dfb      	ldrb	r3, [r7, #23]
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	75fa      	strb	r2, [r7, #23]
 800c19c:	461a      	mov	r2, r3
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1e8      	bne.n	800c180 <USBD_GetString+0x4e>
    }
  }
}
 800c1ae:	bf00      	nop
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b085      	sub	sp, #20
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c1c2:	e005      	b.n	800c1d0 <USBD_GetLen+0x1a>
  {
    len++;
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1f5      	bne.n	800c1c4 <USBD_GetLen+0xe>
  }

  return len;
 800c1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3714      	adds	r7, #20
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bc80      	pop	{r7}
 800c1e2:	4770      	bx	lr

0800c1e4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c1fa:	88fa      	ldrh	r2, [r7, #6]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c200:	88fa      	ldrh	r2, [r7, #6]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c206:	88fb      	ldrh	r3, [r7, #6]
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	2100      	movs	r1, #0
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f000 fc72 	bl	800caf6 <USBD_LL_Transmit>

  return USBD_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	4613      	mov	r3, r2
 800c228:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c22a:	88fb      	ldrh	r3, [r7, #6]
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	2100      	movs	r1, #0
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f000 fc60 	bl	800caf6 <USBD_LL_Transmit>

  return USBD_OK;
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	4613      	mov	r3, r2
 800c24c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2203      	movs	r2, #3
 800c252:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c256:	88fa      	ldrh	r2, [r7, #6]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c25e:	88fa      	ldrh	r2, [r7, #6]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c266:	88fb      	ldrh	r3, [r7, #6]
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	2100      	movs	r1, #0
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 fc65 	bl	800cb3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3710      	adds	r7, #16
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	4613      	mov	r3, r2
 800c288:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c28a:	88fb      	ldrh	r3, [r7, #6]
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	2100      	movs	r1, #0
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f000 fc53 	bl	800cb3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2204      	movs	r2, #4
 800c2ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fc1d 	bl	800caf6 <USBD_LL_Transmit>

  return USBD_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3708      	adds	r7, #8
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b082      	sub	sp, #8
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2205      	movs	r2, #5
 800c2d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2100      	movs	r1, #0
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fc2d 	bl	800cb3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	4912      	ldr	r1, [pc, #72]	@ (800c33c <MX_USB_DEVICE_Init+0x50>)
 800c2f4:	4812      	ldr	r0, [pc, #72]	@ (800c340 <MX_USB_DEVICE_Init+0x54>)
 800c2f6:	f7fe ff62 	bl	800b1be <USBD_Init>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d001      	beq.n	800c304 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c300:	f7f7 f998 	bl	8003634 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c304:	490f      	ldr	r1, [pc, #60]	@ (800c344 <MX_USB_DEVICE_Init+0x58>)
 800c306:	480e      	ldr	r0, [pc, #56]	@ (800c340 <MX_USB_DEVICE_Init+0x54>)
 800c308:	f7fe ff84 	bl	800b214 <USBD_RegisterClass>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c312:	f7f7 f98f 	bl	8003634 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c316:	490c      	ldr	r1, [pc, #48]	@ (800c348 <MX_USB_DEVICE_Init+0x5c>)
 800c318:	4809      	ldr	r0, [pc, #36]	@ (800c340 <MX_USB_DEVICE_Init+0x54>)
 800c31a:	f7fe feb5 	bl	800b088 <USBD_CDC_RegisterInterface>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d001      	beq.n	800c328 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c324:	f7f7 f986 	bl	8003634 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c328:	4805      	ldr	r0, [pc, #20]	@ (800c340 <MX_USB_DEVICE_Init+0x54>)
 800c32a:	f7fe ff8c 	bl	800b246 <USBD_Start>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d001      	beq.n	800c338 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c334:	f7f7 f97e 	bl	8003634 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c338:	bf00      	nop
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	20000154 	.word	0x20000154
 800c340:	2000043c 	.word	0x2000043c
 800c344:	20000040 	.word	0x20000040
 800c348:	20000144 	.word	0x20000144

0800c34c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c350:	2200      	movs	r2, #0
 800c352:	4905      	ldr	r1, [pc, #20]	@ (800c368 <CDC_Init_FS+0x1c>)
 800c354:	4805      	ldr	r0, [pc, #20]	@ (800c36c <CDC_Init_FS+0x20>)
 800c356:	f7fe fead 	bl	800b0b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c35a:	4905      	ldr	r1, [pc, #20]	@ (800c370 <CDC_Init_FS+0x24>)
 800c35c:	4803      	ldr	r0, [pc, #12]	@ (800c36c <CDC_Init_FS+0x20>)
 800c35e:	f7fe fec2 	bl	800b0e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c362:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c364:	4618      	mov	r0, r3
 800c366:	bd80      	pop	{r7, pc}
 800c368:	20000ae8 	.word	0x20000ae8
 800c36c:	2000043c 	.word	0x2000043c
 800c370:	20000700 	.word	0x20000700

0800c374 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c374:	b480      	push	{r7}
 800c376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c378:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bc80      	pop	{r7}
 800c380:	4770      	bx	lr
	...

0800c384 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	4603      	mov	r3, r0
 800c38c:	6039      	str	r1, [r7, #0]
 800c38e:	71fb      	strb	r3, [r7, #7]
 800c390:	4613      	mov	r3, r2
 800c392:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c394:	79fb      	ldrb	r3, [r7, #7]
 800c396:	2b23      	cmp	r3, #35	@ 0x23
 800c398:	d84a      	bhi.n	800c430 <CDC_Control_FS+0xac>
 800c39a:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a0 <CDC_Control_FS+0x1c>)
 800c39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a0:	0800c431 	.word	0x0800c431
 800c3a4:	0800c431 	.word	0x0800c431
 800c3a8:	0800c431 	.word	0x0800c431
 800c3ac:	0800c431 	.word	0x0800c431
 800c3b0:	0800c431 	.word	0x0800c431
 800c3b4:	0800c431 	.word	0x0800c431
 800c3b8:	0800c431 	.word	0x0800c431
 800c3bc:	0800c431 	.word	0x0800c431
 800c3c0:	0800c431 	.word	0x0800c431
 800c3c4:	0800c431 	.word	0x0800c431
 800c3c8:	0800c431 	.word	0x0800c431
 800c3cc:	0800c431 	.word	0x0800c431
 800c3d0:	0800c431 	.word	0x0800c431
 800c3d4:	0800c431 	.word	0x0800c431
 800c3d8:	0800c431 	.word	0x0800c431
 800c3dc:	0800c431 	.word	0x0800c431
 800c3e0:	0800c431 	.word	0x0800c431
 800c3e4:	0800c431 	.word	0x0800c431
 800c3e8:	0800c431 	.word	0x0800c431
 800c3ec:	0800c431 	.word	0x0800c431
 800c3f0:	0800c431 	.word	0x0800c431
 800c3f4:	0800c431 	.word	0x0800c431
 800c3f8:	0800c431 	.word	0x0800c431
 800c3fc:	0800c431 	.word	0x0800c431
 800c400:	0800c431 	.word	0x0800c431
 800c404:	0800c431 	.word	0x0800c431
 800c408:	0800c431 	.word	0x0800c431
 800c40c:	0800c431 	.word	0x0800c431
 800c410:	0800c431 	.word	0x0800c431
 800c414:	0800c431 	.word	0x0800c431
 800c418:	0800c431 	.word	0x0800c431
 800c41c:	0800c431 	.word	0x0800c431
 800c420:	0800c431 	.word	0x0800c431
 800c424:	0800c431 	.word	0x0800c431
 800c428:	0800c431 	.word	0x0800c431
 800c42c:	0800c431 	.word	0x0800c431
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c430:	bf00      	nop
  }

  return (USBD_OK);
 800c432:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c434:	4618      	mov	r0, r3
 800c436:	370c      	adds	r7, #12
 800c438:	46bd      	mov	sp, r7
 800c43a:	bc80      	pop	{r7}
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop

0800c440 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c44a:	6879      	ldr	r1, [r7, #4]
 800c44c:	480a      	ldr	r0, [pc, #40]	@ (800c478 <CDC_Receive_FS+0x38>)
 800c44e:	f7fe fe4a 	bl	800b0e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c452:	4809      	ldr	r0, [pc, #36]	@ (800c478 <CDC_Receive_FS+0x38>)
 800c454:	f7fe fe89 	bl	800b16a <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d006      	beq.n	800c46e <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	461a      	mov	r2, r3
 800c466:	4905      	ldr	r1, [pc, #20]	@ (800c47c <CDC_Receive_FS+0x3c>)
 800c468:	4805      	ldr	r0, [pc, #20]	@ (800c480 <CDC_Receive_FS+0x40>)
 800c46a:	f000 fc71 	bl	800cd50 <memcpy>
  }
  return (USBD_OK);
 800c46e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c470:	4618      	mov	r0, r3
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	2000043c 	.word	0x2000043c
 800c47c:	20000700 	.word	0x20000700
 800c480:	20000350 	.word	0x20000350

0800c484 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	460b      	mov	r3, r1
 800c48e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c490:	2300      	movs	r3, #0
 800c492:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c494:	4b0d      	ldr	r3, [pc, #52]	@ (800c4cc <CDC_Transmit_FS+0x48>)
 800c496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c49a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e00b      	b.n	800c4c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c4aa:	887b      	ldrh	r3, [r7, #2]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	6879      	ldr	r1, [r7, #4]
 800c4b0:	4806      	ldr	r0, [pc, #24]	@ (800c4cc <CDC_Transmit_FS+0x48>)
 800c4b2:	f7fe fdff 	bl	800b0b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c4b6:	4805      	ldr	r0, [pc, #20]	@ (800c4cc <CDC_Transmit_FS+0x48>)
 800c4b8:	f7fe fe28 	bl	800b10c <USBD_CDC_TransmitPacket>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	2000043c 	.word	0x2000043c

0800c4d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	6039      	str	r1, [r7, #0]
 800c4da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	2212      	movs	r2, #18
 800c4e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c4e2:	4b03      	ldr	r3, [pc, #12]	@ (800c4f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bc80      	pop	{r7}
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	20000170 	.word	0x20000170

0800c4f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	6039      	str	r1, [r7, #0]
 800c4fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2204      	movs	r2, #4
 800c504:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c506:	4b03      	ldr	r3, [pc, #12]	@ (800c514 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c508:	4618      	mov	r0, r3
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bc80      	pop	{r7}
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	20000184 	.word	0x20000184

0800c518 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	6039      	str	r1, [r7, #0]
 800c522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d105      	bne.n	800c536 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	4907      	ldr	r1, [pc, #28]	@ (800c54c <USBD_FS_ProductStrDescriptor+0x34>)
 800c52e:	4808      	ldr	r0, [pc, #32]	@ (800c550 <USBD_FS_ProductStrDescriptor+0x38>)
 800c530:	f7ff fdff 	bl	800c132 <USBD_GetString>
 800c534:	e004      	b.n	800c540 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	4904      	ldr	r1, [pc, #16]	@ (800c54c <USBD_FS_ProductStrDescriptor+0x34>)
 800c53a:	4805      	ldr	r0, [pc, #20]	@ (800c550 <USBD_FS_ProductStrDescriptor+0x38>)
 800c53c:	f7ff fdf9 	bl	800c132 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c540:	4b02      	ldr	r3, [pc, #8]	@ (800c54c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	20000ed0 	.word	0x20000ed0
 800c550:	0800df24 	.word	0x0800df24

0800c554 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	4603      	mov	r3, r0
 800c55c:	6039      	str	r1, [r7, #0]
 800c55e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	4904      	ldr	r1, [pc, #16]	@ (800c574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c564:	4804      	ldr	r0, [pc, #16]	@ (800c578 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c566:	f7ff fde4 	bl	800c132 <USBD_GetString>
  return USBD_StrDesc;
 800c56a:	4b02      	ldr	r3, [pc, #8]	@ (800c574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	20000ed0 	.word	0x20000ed0
 800c578:	0800df3c 	.word	0x0800df3c

0800c57c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	6039      	str	r1, [r7, #0]
 800c586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	221a      	movs	r2, #26
 800c58c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c58e:	f000 f843 	bl	800c618 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c592:	4b02      	ldr	r3, [pc, #8]	@ (800c59c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c594:	4618      	mov	r0, r3
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	20000188 	.word	0x20000188

0800c5a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	6039      	str	r1, [r7, #0]
 800c5aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5ac:	79fb      	ldrb	r3, [r7, #7]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d105      	bne.n	800c5be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	4907      	ldr	r1, [pc, #28]	@ (800c5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5b6:	4808      	ldr	r0, [pc, #32]	@ (800c5d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5b8:	f7ff fdbb 	bl	800c132 <USBD_GetString>
 800c5bc:	e004      	b.n	800c5c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	4904      	ldr	r1, [pc, #16]	@ (800c5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5c2:	4805      	ldr	r0, [pc, #20]	@ (800c5d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5c4:	f7ff fdb5 	bl	800c132 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5c8:	4b02      	ldr	r3, [pc, #8]	@ (800c5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3708      	adds	r7, #8
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	20000ed0 	.word	0x20000ed0
 800c5d8:	0800df50 	.word	0x0800df50

0800c5dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	6039      	str	r1, [r7, #0]
 800c5e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5e8:	79fb      	ldrb	r3, [r7, #7]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d105      	bne.n	800c5fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5ee:	683a      	ldr	r2, [r7, #0]
 800c5f0:	4907      	ldr	r1, [pc, #28]	@ (800c610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5f2:	4808      	ldr	r0, [pc, #32]	@ (800c614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5f4:	f7ff fd9d 	bl	800c132 <USBD_GetString>
 800c5f8:	e004      	b.n	800c604 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	4904      	ldr	r1, [pc, #16]	@ (800c610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5fe:	4805      	ldr	r0, [pc, #20]	@ (800c614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c600:	f7ff fd97 	bl	800c132 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c604:	4b02      	ldr	r3, [pc, #8]	@ (800c610 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c606:	4618      	mov	r0, r3
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	20000ed0 	.word	0x20000ed0
 800c614:	0800df5c 	.word	0x0800df5c

0800c618 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c61e:	4b0f      	ldr	r3, [pc, #60]	@ (800c65c <Get_SerialNum+0x44>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c624:	4b0e      	ldr	r3, [pc, #56]	@ (800c660 <Get_SerialNum+0x48>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c62a:	4b0e      	ldr	r3, [pc, #56]	@ (800c664 <Get_SerialNum+0x4c>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4413      	add	r3, r2
 800c636:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d009      	beq.n	800c652 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c63e:	2208      	movs	r2, #8
 800c640:	4909      	ldr	r1, [pc, #36]	@ (800c668 <Get_SerialNum+0x50>)
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f000 f814 	bl	800c670 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c648:	2204      	movs	r2, #4
 800c64a:	4908      	ldr	r1, [pc, #32]	@ (800c66c <Get_SerialNum+0x54>)
 800c64c:	68b8      	ldr	r0, [r7, #8]
 800c64e:	f000 f80f 	bl	800c670 <IntToUnicode>
  }
}
 800c652:	bf00      	nop
 800c654:	3710      	adds	r7, #16
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	1ffff7e8 	.word	0x1ffff7e8
 800c660:	1ffff7ec 	.word	0x1ffff7ec
 800c664:	1ffff7f0 	.word	0x1ffff7f0
 800c668:	2000018a 	.word	0x2000018a
 800c66c:	2000019a 	.word	0x2000019a

0800c670 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c670:	b480      	push	{r7}
 800c672:	b087      	sub	sp, #28
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	4613      	mov	r3, r2
 800c67c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c682:	2300      	movs	r3, #0
 800c684:	75fb      	strb	r3, [r7, #23]
 800c686:	e027      	b.n	800c6d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	0f1b      	lsrs	r3, r3, #28
 800c68c:	2b09      	cmp	r3, #9
 800c68e:	d80b      	bhi.n	800c6a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	0f1b      	lsrs	r3, r3, #28
 800c694:	b2da      	uxtb	r2, r3
 800c696:	7dfb      	ldrb	r3, [r7, #23]
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	4619      	mov	r1, r3
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	440b      	add	r3, r1
 800c6a0:	3230      	adds	r2, #48	@ 0x30
 800c6a2:	b2d2      	uxtb	r2, r2
 800c6a4:	701a      	strb	r2, [r3, #0]
 800c6a6:	e00a      	b.n	800c6be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	0f1b      	lsrs	r3, r3, #28
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	7dfb      	ldrb	r3, [r7, #23]
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	440b      	add	r3, r1
 800c6b8:	3237      	adds	r2, #55	@ 0x37
 800c6ba:	b2d2      	uxtb	r2, r2
 800c6bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	011b      	lsls	r3, r3, #4
 800c6c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c6c4:	7dfb      	ldrb	r3, [r7, #23]
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	75fb      	strb	r3, [r7, #23]
 800c6d8:	7dfa      	ldrb	r2, [r7, #23]
 800c6da:	79fb      	ldrb	r3, [r7, #7]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d3d3      	bcc.n	800c688 <IntToUnicode+0x18>
  }
}
 800c6e0:	bf00      	nop
 800c6e2:	bf00      	nop
 800c6e4:	371c      	adds	r7, #28
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bc80      	pop	{r7}
 800c6ea:	4770      	bx	lr

0800c6ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a0d      	ldr	r2, [pc, #52]	@ (800c730 <HAL_PCD_MspInit+0x44>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d113      	bne.n	800c726 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c6fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c734 <HAL_PCD_MspInit+0x48>)
 800c700:	69db      	ldr	r3, [r3, #28]
 800c702:	4a0c      	ldr	r2, [pc, #48]	@ (800c734 <HAL_PCD_MspInit+0x48>)
 800c704:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c708:	61d3      	str	r3, [r2, #28]
 800c70a:	4b0a      	ldr	r3, [pc, #40]	@ (800c734 <HAL_PCD_MspInit+0x48>)
 800c70c:	69db      	ldr	r3, [r3, #28]
 800c70e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c712:	60fb      	str	r3, [r7, #12]
 800c714:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c716:	2200      	movs	r2, #0
 800c718:	2100      	movs	r1, #0
 800c71a:	2014      	movs	r0, #20
 800c71c:	f7f7 fd6f 	bl	80041fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c720:	2014      	movs	r0, #20
 800c722:	f7f7 fd88 	bl	8004236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c726:	bf00      	nop
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	40005c00 	.word	0x40005c00
 800c734:	40021000 	.word	0x40021000

0800c738 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f7fe fdc1 	bl	800b2d6 <USBD_LL_SetupStage>
}
 800c754:	bf00      	nop
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	460b      	mov	r3, r1
 800c766:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800c76e:	78fa      	ldrb	r2, [r7, #3]
 800c770:	6879      	ldr	r1, [r7, #4]
 800c772:	4613      	mov	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	4413      	add	r3, r2
 800c778:	00db      	lsls	r3, r3, #3
 800c77a:	440b      	add	r3, r1
 800c77c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	78fb      	ldrb	r3, [r7, #3]
 800c784:	4619      	mov	r1, r3
 800c786:	f7fe fdf3 	bl	800b370 <USBD_LL_DataOutStage>
}
 800c78a:	bf00      	nop
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b082      	sub	sp, #8
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	460b      	mov	r3, r1
 800c79c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800c7a4:	78fa      	ldrb	r2, [r7, #3]
 800c7a6:	6879      	ldr	r1, [r7, #4]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	440b      	add	r3, r1
 800c7b2:	333c      	adds	r3, #60	@ 0x3c
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	78fb      	ldrb	r3, [r7, #3]
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	f7fe fe4a 	bl	800b452 <USBD_LL_DataInStage>
}
 800c7be:	bf00      	nop
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b082      	sub	sp, #8
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7fe ff5a 	bl	800b68e <USBD_LL_SOF>
}
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b084      	sub	sp, #16
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d001      	beq.n	800c7fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c7f6:	f7f6 ff1d 	bl	8003634 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c800:	7bfa      	ldrb	r2, [r7, #15]
 800c802:	4611      	mov	r1, r2
 800c804:	4618      	mov	r0, r3
 800c806:	f7fe ff0a 	bl	800b61e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c810:	4618      	mov	r0, r3
 800c812:	f7fe fec3 	bl	800b59c <USBD_LL_Reset>
}
 800c816:	bf00      	nop
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
	...

0800c820 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fe ff04 	bl	800b63c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d005      	beq.n	800c848 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c83c:	4b04      	ldr	r3, [pc, #16]	@ (800c850 <HAL_PCD_SuspendCallback+0x30>)
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	4a03      	ldr	r2, [pc, #12]	@ (800c850 <HAL_PCD_SuspendCallback+0x30>)
 800c842:	f043 0306 	orr.w	r3, r3, #6
 800c846:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c848:	bf00      	nop
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	e000ed00 	.word	0xe000ed00

0800c854 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c862:	4618      	mov	r0, r3
 800c864:	f7fe fefe 	bl	800b664 <USBD_LL_Resume>
}
 800c868:	bf00      	nop
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c878:	4a28      	ldr	r2, [pc, #160]	@ (800c91c <USBD_LL_Init+0xac>)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a26      	ldr	r2, [pc, #152]	@ (800c91c <USBD_LL_Init+0xac>)
 800c884:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c888:	4b24      	ldr	r3, [pc, #144]	@ (800c91c <USBD_LL_Init+0xac>)
 800c88a:	4a25      	ldr	r2, [pc, #148]	@ (800c920 <USBD_LL_Init+0xb0>)
 800c88c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c88e:	4b23      	ldr	r3, [pc, #140]	@ (800c91c <USBD_LL_Init+0xac>)
 800c890:	2208      	movs	r2, #8
 800c892:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c894:	4b21      	ldr	r3, [pc, #132]	@ (800c91c <USBD_LL_Init+0xac>)
 800c896:	2202      	movs	r2, #2
 800c898:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c89a:	4b20      	ldr	r3, [pc, #128]	@ (800c91c <USBD_LL_Init+0xac>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c8a0:	4b1e      	ldr	r3, [pc, #120]	@ (800c91c <USBD_LL_Init+0xac>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c8a6:	4b1d      	ldr	r3, [pc, #116]	@ (800c91c <USBD_LL_Init+0xac>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c8ac:	481b      	ldr	r0, [pc, #108]	@ (800c91c <USBD_LL_Init+0xac>)
 800c8ae:	f7f8 fcfd 	bl	80052ac <HAL_PCD_Init>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d001      	beq.n	800c8bc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c8b8:	f7f6 febc 	bl	8003634 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c8c2:	2318      	movs	r3, #24
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	f7fa f83c 	bl	8006944 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c8d2:	2358      	movs	r3, #88	@ 0x58
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2180      	movs	r1, #128	@ 0x80
 800c8d8:	f7fa f834 	bl	8006944 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c8e2:	23c0      	movs	r3, #192	@ 0xc0
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	2181      	movs	r1, #129	@ 0x81
 800c8e8:	f7fa f82c 	bl	8006944 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c8f2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	2101      	movs	r1, #1
 800c8fa:	f7fa f823 	bl	8006944 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c908:	2200      	movs	r2, #0
 800c90a:	2182      	movs	r1, #130	@ 0x82
 800c90c:	f7fa f81a 	bl	8006944 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	200010d0 	.word	0x200010d0
 800c920:	40005c00 	.word	0x40005c00

0800c924 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7f8 fdc1 	bl	80054c2 <HAL_PCD_Start>
 800c940:	4603      	mov	r3, r0
 800c942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c944:	7bfb      	ldrb	r3, [r7, #15]
 800c946:	4618      	mov	r0, r3
 800c948:	f000 f94e 	bl	800cbe8 <USBD_Get_USB_Status>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c950:	7bbb      	ldrb	r3, [r7, #14]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	4608      	mov	r0, r1
 800c964:	4611      	mov	r1, r2
 800c966:	461a      	mov	r2, r3
 800c968:	4603      	mov	r3, r0
 800c96a:	70fb      	strb	r3, [r7, #3]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70bb      	strb	r3, [r7, #2]
 800c970:	4613      	mov	r3, r2
 800c972:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c974:	2300      	movs	r3, #0
 800c976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c978:	2300      	movs	r3, #0
 800c97a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c982:	78bb      	ldrb	r3, [r7, #2]
 800c984:	883a      	ldrh	r2, [r7, #0]
 800c986:	78f9      	ldrb	r1, [r7, #3]
 800c988:	f7f8 ff39 	bl	80057fe <HAL_PCD_EP_Open>
 800c98c:	4603      	mov	r3, r0
 800c98e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c990:	7bfb      	ldrb	r3, [r7, #15]
 800c992:	4618      	mov	r0, r3
 800c994:	f000 f928 	bl	800cbe8 <USBD_Get_USB_Status>
 800c998:	4603      	mov	r3, r0
 800c99a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c99c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b084      	sub	sp, #16
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c9c0:	78fa      	ldrb	r2, [r7, #3]
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7f8 ff80 	bl	80058ca <HAL_PCD_EP_Close>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9ce:	7bfb      	ldrb	r3, [r7, #15]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f000 f909 	bl	800cbe8 <USBD_Get_USB_Status>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9da:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c9fe:	78fa      	ldrb	r2, [r7, #3]
 800ca00:	4611      	mov	r1, r2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7f9 f840 	bl	8005a88 <HAL_PCD_EP_SetStall>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f000 f8ea 	bl	800cbe8 <USBD_Get_USB_Status>
 800ca14:	4603      	mov	r3, r0
 800ca16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b084      	sub	sp, #16
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca32:	2300      	movs	r3, #0
 800ca34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ca3c:	78fa      	ldrb	r2, [r7, #3]
 800ca3e:	4611      	mov	r1, r2
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7f9 f881 	bl	8005b48 <HAL_PCD_EP_ClrStall>
 800ca46:	4603      	mov	r3, r0
 800ca48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca4a:	7bfb      	ldrb	r3, [r7, #15]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 f8cb 	bl	800cbe8 <USBD_Get_USB_Status>
 800ca52:	4603      	mov	r3, r0
 800ca54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	460b      	mov	r3, r1
 800ca6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ca72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ca74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	da0c      	bge.n	800ca96 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca7c:	78fb      	ldrb	r3, [r7, #3]
 800ca7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca82:	68f9      	ldr	r1, [r7, #12]
 800ca84:	1c5a      	adds	r2, r3, #1
 800ca86:	4613      	mov	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	00db      	lsls	r3, r3, #3
 800ca8e:	440b      	add	r3, r1
 800ca90:	3302      	adds	r3, #2
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	e00b      	b.n	800caae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca96:	78fb      	ldrb	r3, [r7, #3]
 800ca98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca9c:	68f9      	ldr	r1, [r7, #12]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4413      	add	r3, r2
 800caa4:	00db      	lsls	r3, r3, #3
 800caa6:	440b      	add	r3, r1
 800caa8:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800caac:	781b      	ldrb	r3, [r3, #0]
  }
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3714      	adds	r7, #20
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bc80      	pop	{r7}
 800cab6:	4770      	bx	lr

0800cab8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	460b      	mov	r3, r1
 800cac2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cac8:	2300      	movs	r3, #0
 800caca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cad2:	78fa      	ldrb	r2, [r7, #3]
 800cad4:	4611      	mov	r1, r2
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7f8 fe6c 	bl	80057b4 <HAL_PCD_SetAddress>
 800cadc:	4603      	mov	r3, r0
 800cade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cae0:	7bfb      	ldrb	r3, [r7, #15]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 f880 	bl	800cbe8 <USBD_Get_USB_Status>
 800cae8:	4603      	mov	r3, r0
 800caea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caec:	7bbb      	ldrb	r3, [r7, #14]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b086      	sub	sp, #24
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	60f8      	str	r0, [r7, #12]
 800cafe:	607a      	str	r2, [r7, #4]
 800cb00:	461a      	mov	r2, r3
 800cb02:	460b      	mov	r3, r1
 800cb04:	72fb      	strb	r3, [r7, #11]
 800cb06:	4613      	mov	r3, r2
 800cb08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb18:	893b      	ldrh	r3, [r7, #8]
 800cb1a:	7af9      	ldrb	r1, [r7, #11]
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	f7f8 ff70 	bl	8005a02 <HAL_PCD_EP_Transmit>
 800cb22:	4603      	mov	r3, r0
 800cb24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f000 f85d 	bl	800cbe8 <USBD_Get_USB_Status>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb32:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3718      	adds	r7, #24
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	607a      	str	r2, [r7, #4]
 800cb46:	461a      	mov	r2, r3
 800cb48:	460b      	mov	r3, r1
 800cb4a:	72fb      	strb	r3, [r7, #11]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb54:	2300      	movs	r3, #0
 800cb56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb5e:	893b      	ldrh	r3, [r7, #8]
 800cb60:	7af9      	ldrb	r1, [r7, #11]
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	f7f8 fef9 	bl	800595a <HAL_PCD_EP_Receive>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb6c:	7dfb      	ldrb	r3, [r7, #23]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f000 f83a 	bl	800cbe8 <USBD_Get_USB_Status>
 800cb74:	4603      	mov	r3, r0
 800cb76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb78:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3718      	adds	r7, #24
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b082      	sub	sp, #8
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cb94:	78fa      	ldrb	r2, [r7, #3]
 800cb96:	4611      	mov	r1, r2
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7f8 ff1b 	bl	80059d4 <HAL_PCD_EP_GetRxCount>
 800cb9e:	4603      	mov	r3, r0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cbb0:	4b02      	ldr	r3, [pc, #8]	@ (800cbbc <USBD_static_malloc+0x14>)
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	370c      	adds	r7, #12
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bc80      	pop	{r7}
 800cbba:	4770      	bx	lr
 800cbbc:	200013bc 	.word	0x200013bc

0800cbc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]

}
 800cbc8:	bf00      	nop
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bc80      	pop	{r7}
 800cbd0:	4770      	bx	lr

0800cbd2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbd2:	b480      	push	{r7}
 800cbd4:	b083      	sub	sp, #12
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	460b      	mov	r3, r1
 800cbdc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cbde:	bf00      	nop
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bc80      	pop	{r7}
 800cbe6:	4770      	bx	lr

0800cbe8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cbf6:	79fb      	ldrb	r3, [r7, #7]
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d817      	bhi.n	800cc2c <USBD_Get_USB_Status+0x44>
 800cbfc:	a201      	add	r2, pc, #4	@ (adr r2, 800cc04 <USBD_Get_USB_Status+0x1c>)
 800cbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc02:	bf00      	nop
 800cc04:	0800cc15 	.word	0x0800cc15
 800cc08:	0800cc1b 	.word	0x0800cc1b
 800cc0c:	0800cc21 	.word	0x0800cc21
 800cc10:	0800cc27 	.word	0x0800cc27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cc14:	2300      	movs	r3, #0
 800cc16:	73fb      	strb	r3, [r7, #15]
    break;
 800cc18:	e00b      	b.n	800cc32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc1a:	2302      	movs	r3, #2
 800cc1c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc1e:	e008      	b.n	800cc32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc20:	2301      	movs	r3, #1
 800cc22:	73fb      	strb	r3, [r7, #15]
    break;
 800cc24:	e005      	b.n	800cc32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc26:	2302      	movs	r3, #2
 800cc28:	73fb      	strb	r3, [r7, #15]
    break;
 800cc2a:	e002      	b.n	800cc32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc30:	bf00      	nop
  }
  return usb_status;
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bc80      	pop	{r7}
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop

0800cc40 <sniprintf>:
 800cc40:	b40c      	push	{r2, r3}
 800cc42:	b530      	push	{r4, r5, lr}
 800cc44:	4b17      	ldr	r3, [pc, #92]	@ (800cca4 <sniprintf+0x64>)
 800cc46:	1e0c      	subs	r4, r1, #0
 800cc48:	681d      	ldr	r5, [r3, #0]
 800cc4a:	b09d      	sub	sp, #116	@ 0x74
 800cc4c:	da08      	bge.n	800cc60 <sniprintf+0x20>
 800cc4e:	238b      	movs	r3, #139	@ 0x8b
 800cc50:	f04f 30ff 	mov.w	r0, #4294967295
 800cc54:	602b      	str	r3, [r5, #0]
 800cc56:	b01d      	add	sp, #116	@ 0x74
 800cc58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc5c:	b002      	add	sp, #8
 800cc5e:	4770      	bx	lr
 800cc60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cc64:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cc68:	bf0c      	ite	eq
 800cc6a:	4623      	moveq	r3, r4
 800cc6c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cc70:	9304      	str	r3, [sp, #16]
 800cc72:	9307      	str	r3, [sp, #28]
 800cc74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc78:	9002      	str	r0, [sp, #8]
 800cc7a:	9006      	str	r0, [sp, #24]
 800cc7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cc80:	4628      	mov	r0, r5
 800cc82:	ab21      	add	r3, sp, #132	@ 0x84
 800cc84:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cc86:	a902      	add	r1, sp, #8
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	f000 f9c1 	bl	800d010 <_svfiprintf_r>
 800cc8e:	1c43      	adds	r3, r0, #1
 800cc90:	bfbc      	itt	lt
 800cc92:	238b      	movlt	r3, #139	@ 0x8b
 800cc94:	602b      	strlt	r3, [r5, #0]
 800cc96:	2c00      	cmp	r4, #0
 800cc98:	d0dd      	beq.n	800cc56 <sniprintf+0x16>
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	9b02      	ldr	r3, [sp, #8]
 800cc9e:	701a      	strb	r2, [r3, #0]
 800cca0:	e7d9      	b.n	800cc56 <sniprintf+0x16>
 800cca2:	bf00      	nop
 800cca4:	200001a4 	.word	0x200001a4

0800cca8 <siprintf>:
 800cca8:	b40e      	push	{r1, r2, r3}
 800ccaa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ccae:	b500      	push	{lr}
 800ccb0:	b09c      	sub	sp, #112	@ 0x70
 800ccb2:	ab1d      	add	r3, sp, #116	@ 0x74
 800ccb4:	9002      	str	r0, [sp, #8]
 800ccb6:	9006      	str	r0, [sp, #24]
 800ccb8:	9107      	str	r1, [sp, #28]
 800ccba:	9104      	str	r1, [sp, #16]
 800ccbc:	4808      	ldr	r0, [pc, #32]	@ (800cce0 <siprintf+0x38>)
 800ccbe:	4909      	ldr	r1, [pc, #36]	@ (800cce4 <siprintf+0x3c>)
 800ccc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccc4:	9105      	str	r1, [sp, #20]
 800ccc6:	6800      	ldr	r0, [r0, #0]
 800ccc8:	a902      	add	r1, sp, #8
 800ccca:	9301      	str	r3, [sp, #4]
 800cccc:	f000 f9a0 	bl	800d010 <_svfiprintf_r>
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	9b02      	ldr	r3, [sp, #8]
 800ccd4:	701a      	strb	r2, [r3, #0]
 800ccd6:	b01c      	add	sp, #112	@ 0x70
 800ccd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccdc:	b003      	add	sp, #12
 800ccde:	4770      	bx	lr
 800cce0:	200001a4 	.word	0x200001a4
 800cce4:	ffff0208 	.word	0xffff0208

0800cce8 <memset>:
 800cce8:	4603      	mov	r3, r0
 800ccea:	4402      	add	r2, r0
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d100      	bne.n	800ccf2 <memset+0xa>
 800ccf0:	4770      	bx	lr
 800ccf2:	f803 1b01 	strb.w	r1, [r3], #1
 800ccf6:	e7f9      	b.n	800ccec <memset+0x4>

0800ccf8 <__errno>:
 800ccf8:	4b01      	ldr	r3, [pc, #4]	@ (800cd00 <__errno+0x8>)
 800ccfa:	6818      	ldr	r0, [r3, #0]
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	200001a4 	.word	0x200001a4

0800cd04 <__libc_init_array>:
 800cd04:	b570      	push	{r4, r5, r6, lr}
 800cd06:	2600      	movs	r6, #0
 800cd08:	4d0c      	ldr	r5, [pc, #48]	@ (800cd3c <__libc_init_array+0x38>)
 800cd0a:	4c0d      	ldr	r4, [pc, #52]	@ (800cd40 <__libc_init_array+0x3c>)
 800cd0c:	1b64      	subs	r4, r4, r5
 800cd0e:	10a4      	asrs	r4, r4, #2
 800cd10:	42a6      	cmp	r6, r4
 800cd12:	d109      	bne.n	800cd28 <__libc_init_array+0x24>
 800cd14:	f000 fc78 	bl	800d608 <_init>
 800cd18:	2600      	movs	r6, #0
 800cd1a:	4d0a      	ldr	r5, [pc, #40]	@ (800cd44 <__libc_init_array+0x40>)
 800cd1c:	4c0a      	ldr	r4, [pc, #40]	@ (800cd48 <__libc_init_array+0x44>)
 800cd1e:	1b64      	subs	r4, r4, r5
 800cd20:	10a4      	asrs	r4, r4, #2
 800cd22:	42a6      	cmp	r6, r4
 800cd24:	d105      	bne.n	800cd32 <__libc_init_array+0x2e>
 800cd26:	bd70      	pop	{r4, r5, r6, pc}
 800cd28:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd2c:	4798      	blx	r3
 800cd2e:	3601      	adds	r6, #1
 800cd30:	e7ee      	b.n	800cd10 <__libc_init_array+0xc>
 800cd32:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd36:	4798      	blx	r3
 800cd38:	3601      	adds	r6, #1
 800cd3a:	e7f2      	b.n	800cd22 <__libc_init_array+0x1e>
 800cd3c:	0800dfd0 	.word	0x0800dfd0
 800cd40:	0800dfd0 	.word	0x0800dfd0
 800cd44:	0800dfd0 	.word	0x0800dfd0
 800cd48:	0800dfd4 	.word	0x0800dfd4

0800cd4c <__retarget_lock_acquire_recursive>:
 800cd4c:	4770      	bx	lr

0800cd4e <__retarget_lock_release_recursive>:
 800cd4e:	4770      	bx	lr

0800cd50 <memcpy>:
 800cd50:	440a      	add	r2, r1
 800cd52:	4291      	cmp	r1, r2
 800cd54:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd58:	d100      	bne.n	800cd5c <memcpy+0xc>
 800cd5a:	4770      	bx	lr
 800cd5c:	b510      	push	{r4, lr}
 800cd5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd62:	4291      	cmp	r1, r2
 800cd64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd68:	d1f9      	bne.n	800cd5e <memcpy+0xe>
 800cd6a:	bd10      	pop	{r4, pc}

0800cd6c <_free_r>:
 800cd6c:	b538      	push	{r3, r4, r5, lr}
 800cd6e:	4605      	mov	r5, r0
 800cd70:	2900      	cmp	r1, #0
 800cd72:	d040      	beq.n	800cdf6 <_free_r+0x8a>
 800cd74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd78:	1f0c      	subs	r4, r1, #4
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	bfb8      	it	lt
 800cd7e:	18e4      	addlt	r4, r4, r3
 800cd80:	f000 f8de 	bl	800cf40 <__malloc_lock>
 800cd84:	4a1c      	ldr	r2, [pc, #112]	@ (800cdf8 <_free_r+0x8c>)
 800cd86:	6813      	ldr	r3, [r2, #0]
 800cd88:	b933      	cbnz	r3, 800cd98 <_free_r+0x2c>
 800cd8a:	6063      	str	r3, [r4, #4]
 800cd8c:	6014      	str	r4, [r2, #0]
 800cd8e:	4628      	mov	r0, r5
 800cd90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd94:	f000 b8da 	b.w	800cf4c <__malloc_unlock>
 800cd98:	42a3      	cmp	r3, r4
 800cd9a:	d908      	bls.n	800cdae <_free_r+0x42>
 800cd9c:	6820      	ldr	r0, [r4, #0]
 800cd9e:	1821      	adds	r1, r4, r0
 800cda0:	428b      	cmp	r3, r1
 800cda2:	bf01      	itttt	eq
 800cda4:	6819      	ldreq	r1, [r3, #0]
 800cda6:	685b      	ldreq	r3, [r3, #4]
 800cda8:	1809      	addeq	r1, r1, r0
 800cdaa:	6021      	streq	r1, [r4, #0]
 800cdac:	e7ed      	b.n	800cd8a <_free_r+0x1e>
 800cdae:	461a      	mov	r2, r3
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	b10b      	cbz	r3, 800cdb8 <_free_r+0x4c>
 800cdb4:	42a3      	cmp	r3, r4
 800cdb6:	d9fa      	bls.n	800cdae <_free_r+0x42>
 800cdb8:	6811      	ldr	r1, [r2, #0]
 800cdba:	1850      	adds	r0, r2, r1
 800cdbc:	42a0      	cmp	r0, r4
 800cdbe:	d10b      	bne.n	800cdd8 <_free_r+0x6c>
 800cdc0:	6820      	ldr	r0, [r4, #0]
 800cdc2:	4401      	add	r1, r0
 800cdc4:	1850      	adds	r0, r2, r1
 800cdc6:	4283      	cmp	r3, r0
 800cdc8:	6011      	str	r1, [r2, #0]
 800cdca:	d1e0      	bne.n	800cd8e <_free_r+0x22>
 800cdcc:	6818      	ldr	r0, [r3, #0]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	4408      	add	r0, r1
 800cdd2:	6010      	str	r0, [r2, #0]
 800cdd4:	6053      	str	r3, [r2, #4]
 800cdd6:	e7da      	b.n	800cd8e <_free_r+0x22>
 800cdd8:	d902      	bls.n	800cde0 <_free_r+0x74>
 800cdda:	230c      	movs	r3, #12
 800cddc:	602b      	str	r3, [r5, #0]
 800cdde:	e7d6      	b.n	800cd8e <_free_r+0x22>
 800cde0:	6820      	ldr	r0, [r4, #0]
 800cde2:	1821      	adds	r1, r4, r0
 800cde4:	428b      	cmp	r3, r1
 800cde6:	bf01      	itttt	eq
 800cde8:	6819      	ldreq	r1, [r3, #0]
 800cdea:	685b      	ldreq	r3, [r3, #4]
 800cdec:	1809      	addeq	r1, r1, r0
 800cdee:	6021      	streq	r1, [r4, #0]
 800cdf0:	6063      	str	r3, [r4, #4]
 800cdf2:	6054      	str	r4, [r2, #4]
 800cdf4:	e7cb      	b.n	800cd8e <_free_r+0x22>
 800cdf6:	bd38      	pop	{r3, r4, r5, pc}
 800cdf8:	20001720 	.word	0x20001720

0800cdfc <sbrk_aligned>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	4e0f      	ldr	r6, [pc, #60]	@ (800ce3c <sbrk_aligned+0x40>)
 800ce00:	460c      	mov	r4, r1
 800ce02:	6831      	ldr	r1, [r6, #0]
 800ce04:	4605      	mov	r5, r0
 800ce06:	b911      	cbnz	r1, 800ce0e <sbrk_aligned+0x12>
 800ce08:	f000 fbaa 	bl	800d560 <_sbrk_r>
 800ce0c:	6030      	str	r0, [r6, #0]
 800ce0e:	4621      	mov	r1, r4
 800ce10:	4628      	mov	r0, r5
 800ce12:	f000 fba5 	bl	800d560 <_sbrk_r>
 800ce16:	1c43      	adds	r3, r0, #1
 800ce18:	d103      	bne.n	800ce22 <sbrk_aligned+0x26>
 800ce1a:	f04f 34ff 	mov.w	r4, #4294967295
 800ce1e:	4620      	mov	r0, r4
 800ce20:	bd70      	pop	{r4, r5, r6, pc}
 800ce22:	1cc4      	adds	r4, r0, #3
 800ce24:	f024 0403 	bic.w	r4, r4, #3
 800ce28:	42a0      	cmp	r0, r4
 800ce2a:	d0f8      	beq.n	800ce1e <sbrk_aligned+0x22>
 800ce2c:	1a21      	subs	r1, r4, r0
 800ce2e:	4628      	mov	r0, r5
 800ce30:	f000 fb96 	bl	800d560 <_sbrk_r>
 800ce34:	3001      	adds	r0, #1
 800ce36:	d1f2      	bne.n	800ce1e <sbrk_aligned+0x22>
 800ce38:	e7ef      	b.n	800ce1a <sbrk_aligned+0x1e>
 800ce3a:	bf00      	nop
 800ce3c:	2000171c 	.word	0x2000171c

0800ce40 <_malloc_r>:
 800ce40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce44:	1ccd      	adds	r5, r1, #3
 800ce46:	f025 0503 	bic.w	r5, r5, #3
 800ce4a:	3508      	adds	r5, #8
 800ce4c:	2d0c      	cmp	r5, #12
 800ce4e:	bf38      	it	cc
 800ce50:	250c      	movcc	r5, #12
 800ce52:	2d00      	cmp	r5, #0
 800ce54:	4606      	mov	r6, r0
 800ce56:	db01      	blt.n	800ce5c <_malloc_r+0x1c>
 800ce58:	42a9      	cmp	r1, r5
 800ce5a:	d904      	bls.n	800ce66 <_malloc_r+0x26>
 800ce5c:	230c      	movs	r3, #12
 800ce5e:	6033      	str	r3, [r6, #0]
 800ce60:	2000      	movs	r0, #0
 800ce62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf3c <_malloc_r+0xfc>
 800ce6a:	f000 f869 	bl	800cf40 <__malloc_lock>
 800ce6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce72:	461c      	mov	r4, r3
 800ce74:	bb44      	cbnz	r4, 800cec8 <_malloc_r+0x88>
 800ce76:	4629      	mov	r1, r5
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f7ff ffbf 	bl	800cdfc <sbrk_aligned>
 800ce7e:	1c43      	adds	r3, r0, #1
 800ce80:	4604      	mov	r4, r0
 800ce82:	d158      	bne.n	800cf36 <_malloc_r+0xf6>
 800ce84:	f8d8 4000 	ldr.w	r4, [r8]
 800ce88:	4627      	mov	r7, r4
 800ce8a:	2f00      	cmp	r7, #0
 800ce8c:	d143      	bne.n	800cf16 <_malloc_r+0xd6>
 800ce8e:	2c00      	cmp	r4, #0
 800ce90:	d04b      	beq.n	800cf2a <_malloc_r+0xea>
 800ce92:	6823      	ldr	r3, [r4, #0]
 800ce94:	4639      	mov	r1, r7
 800ce96:	4630      	mov	r0, r6
 800ce98:	eb04 0903 	add.w	r9, r4, r3
 800ce9c:	f000 fb60 	bl	800d560 <_sbrk_r>
 800cea0:	4581      	cmp	r9, r0
 800cea2:	d142      	bne.n	800cf2a <_malloc_r+0xea>
 800cea4:	6821      	ldr	r1, [r4, #0]
 800cea6:	4630      	mov	r0, r6
 800cea8:	1a6d      	subs	r5, r5, r1
 800ceaa:	4629      	mov	r1, r5
 800ceac:	f7ff ffa6 	bl	800cdfc <sbrk_aligned>
 800ceb0:	3001      	adds	r0, #1
 800ceb2:	d03a      	beq.n	800cf2a <_malloc_r+0xea>
 800ceb4:	6823      	ldr	r3, [r4, #0]
 800ceb6:	442b      	add	r3, r5
 800ceb8:	6023      	str	r3, [r4, #0]
 800ceba:	f8d8 3000 	ldr.w	r3, [r8]
 800cebe:	685a      	ldr	r2, [r3, #4]
 800cec0:	bb62      	cbnz	r2, 800cf1c <_malloc_r+0xdc>
 800cec2:	f8c8 7000 	str.w	r7, [r8]
 800cec6:	e00f      	b.n	800cee8 <_malloc_r+0xa8>
 800cec8:	6822      	ldr	r2, [r4, #0]
 800ceca:	1b52      	subs	r2, r2, r5
 800cecc:	d420      	bmi.n	800cf10 <_malloc_r+0xd0>
 800cece:	2a0b      	cmp	r2, #11
 800ced0:	d917      	bls.n	800cf02 <_malloc_r+0xc2>
 800ced2:	1961      	adds	r1, r4, r5
 800ced4:	42a3      	cmp	r3, r4
 800ced6:	6025      	str	r5, [r4, #0]
 800ced8:	bf18      	it	ne
 800ceda:	6059      	strne	r1, [r3, #4]
 800cedc:	6863      	ldr	r3, [r4, #4]
 800cede:	bf08      	it	eq
 800cee0:	f8c8 1000 	streq.w	r1, [r8]
 800cee4:	5162      	str	r2, [r4, r5]
 800cee6:	604b      	str	r3, [r1, #4]
 800cee8:	4630      	mov	r0, r6
 800ceea:	f000 f82f 	bl	800cf4c <__malloc_unlock>
 800ceee:	f104 000b 	add.w	r0, r4, #11
 800cef2:	1d23      	adds	r3, r4, #4
 800cef4:	f020 0007 	bic.w	r0, r0, #7
 800cef8:	1ac2      	subs	r2, r0, r3
 800cefa:	bf1c      	itt	ne
 800cefc:	1a1b      	subne	r3, r3, r0
 800cefe:	50a3      	strne	r3, [r4, r2]
 800cf00:	e7af      	b.n	800ce62 <_malloc_r+0x22>
 800cf02:	6862      	ldr	r2, [r4, #4]
 800cf04:	42a3      	cmp	r3, r4
 800cf06:	bf0c      	ite	eq
 800cf08:	f8c8 2000 	streq.w	r2, [r8]
 800cf0c:	605a      	strne	r2, [r3, #4]
 800cf0e:	e7eb      	b.n	800cee8 <_malloc_r+0xa8>
 800cf10:	4623      	mov	r3, r4
 800cf12:	6864      	ldr	r4, [r4, #4]
 800cf14:	e7ae      	b.n	800ce74 <_malloc_r+0x34>
 800cf16:	463c      	mov	r4, r7
 800cf18:	687f      	ldr	r7, [r7, #4]
 800cf1a:	e7b6      	b.n	800ce8a <_malloc_r+0x4a>
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	42a3      	cmp	r3, r4
 800cf22:	d1fb      	bne.n	800cf1c <_malloc_r+0xdc>
 800cf24:	2300      	movs	r3, #0
 800cf26:	6053      	str	r3, [r2, #4]
 800cf28:	e7de      	b.n	800cee8 <_malloc_r+0xa8>
 800cf2a:	230c      	movs	r3, #12
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	6033      	str	r3, [r6, #0]
 800cf30:	f000 f80c 	bl	800cf4c <__malloc_unlock>
 800cf34:	e794      	b.n	800ce60 <_malloc_r+0x20>
 800cf36:	6005      	str	r5, [r0, #0]
 800cf38:	e7d6      	b.n	800cee8 <_malloc_r+0xa8>
 800cf3a:	bf00      	nop
 800cf3c:	20001720 	.word	0x20001720

0800cf40 <__malloc_lock>:
 800cf40:	4801      	ldr	r0, [pc, #4]	@ (800cf48 <__malloc_lock+0x8>)
 800cf42:	f7ff bf03 	b.w	800cd4c <__retarget_lock_acquire_recursive>
 800cf46:	bf00      	nop
 800cf48:	20001718 	.word	0x20001718

0800cf4c <__malloc_unlock>:
 800cf4c:	4801      	ldr	r0, [pc, #4]	@ (800cf54 <__malloc_unlock+0x8>)
 800cf4e:	f7ff befe 	b.w	800cd4e <__retarget_lock_release_recursive>
 800cf52:	bf00      	nop
 800cf54:	20001718 	.word	0x20001718

0800cf58 <__ssputs_r>:
 800cf58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf5c:	461f      	mov	r7, r3
 800cf5e:	688e      	ldr	r6, [r1, #8]
 800cf60:	4682      	mov	sl, r0
 800cf62:	42be      	cmp	r6, r7
 800cf64:	460c      	mov	r4, r1
 800cf66:	4690      	mov	r8, r2
 800cf68:	680b      	ldr	r3, [r1, #0]
 800cf6a:	d82d      	bhi.n	800cfc8 <__ssputs_r+0x70>
 800cf6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf74:	d026      	beq.n	800cfc4 <__ssputs_r+0x6c>
 800cf76:	6965      	ldr	r5, [r4, #20]
 800cf78:	6909      	ldr	r1, [r1, #16]
 800cf7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf7e:	eba3 0901 	sub.w	r9, r3, r1
 800cf82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf86:	1c7b      	adds	r3, r7, #1
 800cf88:	444b      	add	r3, r9
 800cf8a:	106d      	asrs	r5, r5, #1
 800cf8c:	429d      	cmp	r5, r3
 800cf8e:	bf38      	it	cc
 800cf90:	461d      	movcc	r5, r3
 800cf92:	0553      	lsls	r3, r2, #21
 800cf94:	d527      	bpl.n	800cfe6 <__ssputs_r+0x8e>
 800cf96:	4629      	mov	r1, r5
 800cf98:	f7ff ff52 	bl	800ce40 <_malloc_r>
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	b360      	cbz	r0, 800cffa <__ssputs_r+0xa2>
 800cfa0:	464a      	mov	r2, r9
 800cfa2:	6921      	ldr	r1, [r4, #16]
 800cfa4:	f7ff fed4 	bl	800cd50 <memcpy>
 800cfa8:	89a3      	ldrh	r3, [r4, #12]
 800cfaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cfae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfb2:	81a3      	strh	r3, [r4, #12]
 800cfb4:	6126      	str	r6, [r4, #16]
 800cfb6:	444e      	add	r6, r9
 800cfb8:	6026      	str	r6, [r4, #0]
 800cfba:	463e      	mov	r6, r7
 800cfbc:	6165      	str	r5, [r4, #20]
 800cfbe:	eba5 0509 	sub.w	r5, r5, r9
 800cfc2:	60a5      	str	r5, [r4, #8]
 800cfc4:	42be      	cmp	r6, r7
 800cfc6:	d900      	bls.n	800cfca <__ssputs_r+0x72>
 800cfc8:	463e      	mov	r6, r7
 800cfca:	4632      	mov	r2, r6
 800cfcc:	4641      	mov	r1, r8
 800cfce:	6820      	ldr	r0, [r4, #0]
 800cfd0:	f000 faac 	bl	800d52c <memmove>
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	68a3      	ldr	r3, [r4, #8]
 800cfd8:	1b9b      	subs	r3, r3, r6
 800cfda:	60a3      	str	r3, [r4, #8]
 800cfdc:	6823      	ldr	r3, [r4, #0]
 800cfde:	4433      	add	r3, r6
 800cfe0:	6023      	str	r3, [r4, #0]
 800cfe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe6:	462a      	mov	r2, r5
 800cfe8:	f000 fad8 	bl	800d59c <_realloc_r>
 800cfec:	4606      	mov	r6, r0
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d1e0      	bne.n	800cfb4 <__ssputs_r+0x5c>
 800cff2:	4650      	mov	r0, sl
 800cff4:	6921      	ldr	r1, [r4, #16]
 800cff6:	f7ff feb9 	bl	800cd6c <_free_r>
 800cffa:	230c      	movs	r3, #12
 800cffc:	f8ca 3000 	str.w	r3, [sl]
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	f04f 30ff 	mov.w	r0, #4294967295
 800d006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	e7e9      	b.n	800cfe2 <__ssputs_r+0x8a>
	...

0800d010 <_svfiprintf_r>:
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	4698      	mov	r8, r3
 800d016:	898b      	ldrh	r3, [r1, #12]
 800d018:	4607      	mov	r7, r0
 800d01a:	061b      	lsls	r3, r3, #24
 800d01c:	460d      	mov	r5, r1
 800d01e:	4614      	mov	r4, r2
 800d020:	b09d      	sub	sp, #116	@ 0x74
 800d022:	d510      	bpl.n	800d046 <_svfiprintf_r+0x36>
 800d024:	690b      	ldr	r3, [r1, #16]
 800d026:	b973      	cbnz	r3, 800d046 <_svfiprintf_r+0x36>
 800d028:	2140      	movs	r1, #64	@ 0x40
 800d02a:	f7ff ff09 	bl	800ce40 <_malloc_r>
 800d02e:	6028      	str	r0, [r5, #0]
 800d030:	6128      	str	r0, [r5, #16]
 800d032:	b930      	cbnz	r0, 800d042 <_svfiprintf_r+0x32>
 800d034:	230c      	movs	r3, #12
 800d036:	603b      	str	r3, [r7, #0]
 800d038:	f04f 30ff 	mov.w	r0, #4294967295
 800d03c:	b01d      	add	sp, #116	@ 0x74
 800d03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d042:	2340      	movs	r3, #64	@ 0x40
 800d044:	616b      	str	r3, [r5, #20]
 800d046:	2300      	movs	r3, #0
 800d048:	9309      	str	r3, [sp, #36]	@ 0x24
 800d04a:	2320      	movs	r3, #32
 800d04c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d050:	2330      	movs	r3, #48	@ 0x30
 800d052:	f04f 0901 	mov.w	r9, #1
 800d056:	f8cd 800c 	str.w	r8, [sp, #12]
 800d05a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d1f4 <_svfiprintf_r+0x1e4>
 800d05e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d062:	4623      	mov	r3, r4
 800d064:	469a      	mov	sl, r3
 800d066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d06a:	b10a      	cbz	r2, 800d070 <_svfiprintf_r+0x60>
 800d06c:	2a25      	cmp	r2, #37	@ 0x25
 800d06e:	d1f9      	bne.n	800d064 <_svfiprintf_r+0x54>
 800d070:	ebba 0b04 	subs.w	fp, sl, r4
 800d074:	d00b      	beq.n	800d08e <_svfiprintf_r+0x7e>
 800d076:	465b      	mov	r3, fp
 800d078:	4622      	mov	r2, r4
 800d07a:	4629      	mov	r1, r5
 800d07c:	4638      	mov	r0, r7
 800d07e:	f7ff ff6b 	bl	800cf58 <__ssputs_r>
 800d082:	3001      	adds	r0, #1
 800d084:	f000 80a7 	beq.w	800d1d6 <_svfiprintf_r+0x1c6>
 800d088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d08a:	445a      	add	r2, fp
 800d08c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d08e:	f89a 3000 	ldrb.w	r3, [sl]
 800d092:	2b00      	cmp	r3, #0
 800d094:	f000 809f 	beq.w	800d1d6 <_svfiprintf_r+0x1c6>
 800d098:	2300      	movs	r3, #0
 800d09a:	f04f 32ff 	mov.w	r2, #4294967295
 800d09e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0a2:	f10a 0a01 	add.w	sl, sl, #1
 800d0a6:	9304      	str	r3, [sp, #16]
 800d0a8:	9307      	str	r3, [sp, #28]
 800d0aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0b0:	4654      	mov	r4, sl
 800d0b2:	2205      	movs	r2, #5
 800d0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b8:	484e      	ldr	r0, [pc, #312]	@ (800d1f4 <_svfiprintf_r+0x1e4>)
 800d0ba:	f000 fa61 	bl	800d580 <memchr>
 800d0be:	9a04      	ldr	r2, [sp, #16]
 800d0c0:	b9d8      	cbnz	r0, 800d0fa <_svfiprintf_r+0xea>
 800d0c2:	06d0      	lsls	r0, r2, #27
 800d0c4:	bf44      	itt	mi
 800d0c6:	2320      	movmi	r3, #32
 800d0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0cc:	0711      	lsls	r1, r2, #28
 800d0ce:	bf44      	itt	mi
 800d0d0:	232b      	movmi	r3, #43	@ 0x2b
 800d0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d0da:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0dc:	d015      	beq.n	800d10a <_svfiprintf_r+0xfa>
 800d0de:	4654      	mov	r4, sl
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	f04f 0c0a 	mov.w	ip, #10
 800d0e6:	9a07      	ldr	r2, [sp, #28]
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0ee:	3b30      	subs	r3, #48	@ 0x30
 800d0f0:	2b09      	cmp	r3, #9
 800d0f2:	d94b      	bls.n	800d18c <_svfiprintf_r+0x17c>
 800d0f4:	b1b0      	cbz	r0, 800d124 <_svfiprintf_r+0x114>
 800d0f6:	9207      	str	r2, [sp, #28]
 800d0f8:	e014      	b.n	800d124 <_svfiprintf_r+0x114>
 800d0fa:	eba0 0308 	sub.w	r3, r0, r8
 800d0fe:	fa09 f303 	lsl.w	r3, r9, r3
 800d102:	4313      	orrs	r3, r2
 800d104:	46a2      	mov	sl, r4
 800d106:	9304      	str	r3, [sp, #16]
 800d108:	e7d2      	b.n	800d0b0 <_svfiprintf_r+0xa0>
 800d10a:	9b03      	ldr	r3, [sp, #12]
 800d10c:	1d19      	adds	r1, r3, #4
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	9103      	str	r1, [sp, #12]
 800d112:	2b00      	cmp	r3, #0
 800d114:	bfbb      	ittet	lt
 800d116:	425b      	neglt	r3, r3
 800d118:	f042 0202 	orrlt.w	r2, r2, #2
 800d11c:	9307      	strge	r3, [sp, #28]
 800d11e:	9307      	strlt	r3, [sp, #28]
 800d120:	bfb8      	it	lt
 800d122:	9204      	strlt	r2, [sp, #16]
 800d124:	7823      	ldrb	r3, [r4, #0]
 800d126:	2b2e      	cmp	r3, #46	@ 0x2e
 800d128:	d10a      	bne.n	800d140 <_svfiprintf_r+0x130>
 800d12a:	7863      	ldrb	r3, [r4, #1]
 800d12c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d12e:	d132      	bne.n	800d196 <_svfiprintf_r+0x186>
 800d130:	9b03      	ldr	r3, [sp, #12]
 800d132:	3402      	adds	r4, #2
 800d134:	1d1a      	adds	r2, r3, #4
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	9203      	str	r2, [sp, #12]
 800d13a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d13e:	9305      	str	r3, [sp, #20]
 800d140:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d1f8 <_svfiprintf_r+0x1e8>
 800d144:	2203      	movs	r2, #3
 800d146:	4650      	mov	r0, sl
 800d148:	7821      	ldrb	r1, [r4, #0]
 800d14a:	f000 fa19 	bl	800d580 <memchr>
 800d14e:	b138      	cbz	r0, 800d160 <_svfiprintf_r+0x150>
 800d150:	2240      	movs	r2, #64	@ 0x40
 800d152:	9b04      	ldr	r3, [sp, #16]
 800d154:	eba0 000a 	sub.w	r0, r0, sl
 800d158:	4082      	lsls	r2, r0
 800d15a:	4313      	orrs	r3, r2
 800d15c:	3401      	adds	r4, #1
 800d15e:	9304      	str	r3, [sp, #16]
 800d160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d164:	2206      	movs	r2, #6
 800d166:	4825      	ldr	r0, [pc, #148]	@ (800d1fc <_svfiprintf_r+0x1ec>)
 800d168:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d16c:	f000 fa08 	bl	800d580 <memchr>
 800d170:	2800      	cmp	r0, #0
 800d172:	d036      	beq.n	800d1e2 <_svfiprintf_r+0x1d2>
 800d174:	4b22      	ldr	r3, [pc, #136]	@ (800d200 <_svfiprintf_r+0x1f0>)
 800d176:	bb1b      	cbnz	r3, 800d1c0 <_svfiprintf_r+0x1b0>
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	3307      	adds	r3, #7
 800d17c:	f023 0307 	bic.w	r3, r3, #7
 800d180:	3308      	adds	r3, #8
 800d182:	9303      	str	r3, [sp, #12]
 800d184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d186:	4433      	add	r3, r6
 800d188:	9309      	str	r3, [sp, #36]	@ 0x24
 800d18a:	e76a      	b.n	800d062 <_svfiprintf_r+0x52>
 800d18c:	460c      	mov	r4, r1
 800d18e:	2001      	movs	r0, #1
 800d190:	fb0c 3202 	mla	r2, ip, r2, r3
 800d194:	e7a8      	b.n	800d0e8 <_svfiprintf_r+0xd8>
 800d196:	2300      	movs	r3, #0
 800d198:	f04f 0c0a 	mov.w	ip, #10
 800d19c:	4619      	mov	r1, r3
 800d19e:	3401      	adds	r4, #1
 800d1a0:	9305      	str	r3, [sp, #20]
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1a8:	3a30      	subs	r2, #48	@ 0x30
 800d1aa:	2a09      	cmp	r2, #9
 800d1ac:	d903      	bls.n	800d1b6 <_svfiprintf_r+0x1a6>
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d0c6      	beq.n	800d140 <_svfiprintf_r+0x130>
 800d1b2:	9105      	str	r1, [sp, #20]
 800d1b4:	e7c4      	b.n	800d140 <_svfiprintf_r+0x130>
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1be:	e7f0      	b.n	800d1a2 <_svfiprintf_r+0x192>
 800d1c0:	ab03      	add	r3, sp, #12
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	462a      	mov	r2, r5
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d204 <_svfiprintf_r+0x1f4>)
 800d1ca:	a904      	add	r1, sp, #16
 800d1cc:	f3af 8000 	nop.w
 800d1d0:	1c42      	adds	r2, r0, #1
 800d1d2:	4606      	mov	r6, r0
 800d1d4:	d1d6      	bne.n	800d184 <_svfiprintf_r+0x174>
 800d1d6:	89ab      	ldrh	r3, [r5, #12]
 800d1d8:	065b      	lsls	r3, r3, #25
 800d1da:	f53f af2d 	bmi.w	800d038 <_svfiprintf_r+0x28>
 800d1de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1e0:	e72c      	b.n	800d03c <_svfiprintf_r+0x2c>
 800d1e2:	ab03      	add	r3, sp, #12
 800d1e4:	9300      	str	r3, [sp, #0]
 800d1e6:	462a      	mov	r2, r5
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	4b06      	ldr	r3, [pc, #24]	@ (800d204 <_svfiprintf_r+0x1f4>)
 800d1ec:	a904      	add	r1, sp, #16
 800d1ee:	f000 f87d 	bl	800d2ec <_printf_i>
 800d1f2:	e7ed      	b.n	800d1d0 <_svfiprintf_r+0x1c0>
 800d1f4:	0800df94 	.word	0x0800df94
 800d1f8:	0800df9a 	.word	0x0800df9a
 800d1fc:	0800df9e 	.word	0x0800df9e
 800d200:	00000000 	.word	0x00000000
 800d204:	0800cf59 	.word	0x0800cf59

0800d208 <_printf_common>:
 800d208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d20c:	4616      	mov	r6, r2
 800d20e:	4698      	mov	r8, r3
 800d210:	688a      	ldr	r2, [r1, #8]
 800d212:	690b      	ldr	r3, [r1, #16]
 800d214:	4607      	mov	r7, r0
 800d216:	4293      	cmp	r3, r2
 800d218:	bfb8      	it	lt
 800d21a:	4613      	movlt	r3, r2
 800d21c:	6033      	str	r3, [r6, #0]
 800d21e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d222:	460c      	mov	r4, r1
 800d224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d228:	b10a      	cbz	r2, 800d22e <_printf_common+0x26>
 800d22a:	3301      	adds	r3, #1
 800d22c:	6033      	str	r3, [r6, #0]
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	0699      	lsls	r1, r3, #26
 800d232:	bf42      	ittt	mi
 800d234:	6833      	ldrmi	r3, [r6, #0]
 800d236:	3302      	addmi	r3, #2
 800d238:	6033      	strmi	r3, [r6, #0]
 800d23a:	6825      	ldr	r5, [r4, #0]
 800d23c:	f015 0506 	ands.w	r5, r5, #6
 800d240:	d106      	bne.n	800d250 <_printf_common+0x48>
 800d242:	f104 0a19 	add.w	sl, r4, #25
 800d246:	68e3      	ldr	r3, [r4, #12]
 800d248:	6832      	ldr	r2, [r6, #0]
 800d24a:	1a9b      	subs	r3, r3, r2
 800d24c:	42ab      	cmp	r3, r5
 800d24e:	dc2b      	bgt.n	800d2a8 <_printf_common+0xa0>
 800d250:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d254:	6822      	ldr	r2, [r4, #0]
 800d256:	3b00      	subs	r3, #0
 800d258:	bf18      	it	ne
 800d25a:	2301      	movne	r3, #1
 800d25c:	0692      	lsls	r2, r2, #26
 800d25e:	d430      	bmi.n	800d2c2 <_printf_common+0xba>
 800d260:	4641      	mov	r1, r8
 800d262:	4638      	mov	r0, r7
 800d264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d268:	47c8      	blx	r9
 800d26a:	3001      	adds	r0, #1
 800d26c:	d023      	beq.n	800d2b6 <_printf_common+0xae>
 800d26e:	6823      	ldr	r3, [r4, #0]
 800d270:	6922      	ldr	r2, [r4, #16]
 800d272:	f003 0306 	and.w	r3, r3, #6
 800d276:	2b04      	cmp	r3, #4
 800d278:	bf14      	ite	ne
 800d27a:	2500      	movne	r5, #0
 800d27c:	6833      	ldreq	r3, [r6, #0]
 800d27e:	f04f 0600 	mov.w	r6, #0
 800d282:	bf08      	it	eq
 800d284:	68e5      	ldreq	r5, [r4, #12]
 800d286:	f104 041a 	add.w	r4, r4, #26
 800d28a:	bf08      	it	eq
 800d28c:	1aed      	subeq	r5, r5, r3
 800d28e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d292:	bf08      	it	eq
 800d294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d298:	4293      	cmp	r3, r2
 800d29a:	bfc4      	itt	gt
 800d29c:	1a9b      	subgt	r3, r3, r2
 800d29e:	18ed      	addgt	r5, r5, r3
 800d2a0:	42b5      	cmp	r5, r6
 800d2a2:	d11a      	bne.n	800d2da <_printf_common+0xd2>
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	e008      	b.n	800d2ba <_printf_common+0xb2>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	4652      	mov	r2, sl
 800d2ac:	4641      	mov	r1, r8
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	47c8      	blx	r9
 800d2b2:	3001      	adds	r0, #1
 800d2b4:	d103      	bne.n	800d2be <_printf_common+0xb6>
 800d2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2be:	3501      	adds	r5, #1
 800d2c0:	e7c1      	b.n	800d246 <_printf_common+0x3e>
 800d2c2:	2030      	movs	r0, #48	@ 0x30
 800d2c4:	18e1      	adds	r1, r4, r3
 800d2c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d2ca:	1c5a      	adds	r2, r3, #1
 800d2cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d2d0:	4422      	add	r2, r4
 800d2d2:	3302      	adds	r3, #2
 800d2d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d2d8:	e7c2      	b.n	800d260 <_printf_common+0x58>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	4622      	mov	r2, r4
 800d2de:	4641      	mov	r1, r8
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	47c8      	blx	r9
 800d2e4:	3001      	adds	r0, #1
 800d2e6:	d0e6      	beq.n	800d2b6 <_printf_common+0xae>
 800d2e8:	3601      	adds	r6, #1
 800d2ea:	e7d9      	b.n	800d2a0 <_printf_common+0x98>

0800d2ec <_printf_i>:
 800d2ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f0:	7e0f      	ldrb	r7, [r1, #24]
 800d2f2:	4691      	mov	r9, r2
 800d2f4:	2f78      	cmp	r7, #120	@ 0x78
 800d2f6:	4680      	mov	r8, r0
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	469a      	mov	sl, r3
 800d2fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d2fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d302:	d807      	bhi.n	800d314 <_printf_i+0x28>
 800d304:	2f62      	cmp	r7, #98	@ 0x62
 800d306:	d80a      	bhi.n	800d31e <_printf_i+0x32>
 800d308:	2f00      	cmp	r7, #0
 800d30a:	f000 80d3 	beq.w	800d4b4 <_printf_i+0x1c8>
 800d30e:	2f58      	cmp	r7, #88	@ 0x58
 800d310:	f000 80ba 	beq.w	800d488 <_printf_i+0x19c>
 800d314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d318:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d31c:	e03a      	b.n	800d394 <_printf_i+0xa8>
 800d31e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d322:	2b15      	cmp	r3, #21
 800d324:	d8f6      	bhi.n	800d314 <_printf_i+0x28>
 800d326:	a101      	add	r1, pc, #4	@ (adr r1, 800d32c <_printf_i+0x40>)
 800d328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d32c:	0800d385 	.word	0x0800d385
 800d330:	0800d399 	.word	0x0800d399
 800d334:	0800d315 	.word	0x0800d315
 800d338:	0800d315 	.word	0x0800d315
 800d33c:	0800d315 	.word	0x0800d315
 800d340:	0800d315 	.word	0x0800d315
 800d344:	0800d399 	.word	0x0800d399
 800d348:	0800d315 	.word	0x0800d315
 800d34c:	0800d315 	.word	0x0800d315
 800d350:	0800d315 	.word	0x0800d315
 800d354:	0800d315 	.word	0x0800d315
 800d358:	0800d49b 	.word	0x0800d49b
 800d35c:	0800d3c3 	.word	0x0800d3c3
 800d360:	0800d455 	.word	0x0800d455
 800d364:	0800d315 	.word	0x0800d315
 800d368:	0800d315 	.word	0x0800d315
 800d36c:	0800d4bd 	.word	0x0800d4bd
 800d370:	0800d315 	.word	0x0800d315
 800d374:	0800d3c3 	.word	0x0800d3c3
 800d378:	0800d315 	.word	0x0800d315
 800d37c:	0800d315 	.word	0x0800d315
 800d380:	0800d45d 	.word	0x0800d45d
 800d384:	6833      	ldr	r3, [r6, #0]
 800d386:	1d1a      	adds	r2, r3, #4
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6032      	str	r2, [r6, #0]
 800d38c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d390:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d394:	2301      	movs	r3, #1
 800d396:	e09e      	b.n	800d4d6 <_printf_i+0x1ea>
 800d398:	6833      	ldr	r3, [r6, #0]
 800d39a:	6820      	ldr	r0, [r4, #0]
 800d39c:	1d19      	adds	r1, r3, #4
 800d39e:	6031      	str	r1, [r6, #0]
 800d3a0:	0606      	lsls	r6, r0, #24
 800d3a2:	d501      	bpl.n	800d3a8 <_printf_i+0xbc>
 800d3a4:	681d      	ldr	r5, [r3, #0]
 800d3a6:	e003      	b.n	800d3b0 <_printf_i+0xc4>
 800d3a8:	0645      	lsls	r5, r0, #25
 800d3aa:	d5fb      	bpl.n	800d3a4 <_printf_i+0xb8>
 800d3ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d3b0:	2d00      	cmp	r5, #0
 800d3b2:	da03      	bge.n	800d3bc <_printf_i+0xd0>
 800d3b4:	232d      	movs	r3, #45	@ 0x2d
 800d3b6:	426d      	negs	r5, r5
 800d3b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3bc:	230a      	movs	r3, #10
 800d3be:	4859      	ldr	r0, [pc, #356]	@ (800d524 <_printf_i+0x238>)
 800d3c0:	e011      	b.n	800d3e6 <_printf_i+0xfa>
 800d3c2:	6821      	ldr	r1, [r4, #0]
 800d3c4:	6833      	ldr	r3, [r6, #0]
 800d3c6:	0608      	lsls	r0, r1, #24
 800d3c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d3cc:	d402      	bmi.n	800d3d4 <_printf_i+0xe8>
 800d3ce:	0649      	lsls	r1, r1, #25
 800d3d0:	bf48      	it	mi
 800d3d2:	b2ad      	uxthmi	r5, r5
 800d3d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d3d6:	6033      	str	r3, [r6, #0]
 800d3d8:	bf14      	ite	ne
 800d3da:	230a      	movne	r3, #10
 800d3dc:	2308      	moveq	r3, #8
 800d3de:	4851      	ldr	r0, [pc, #324]	@ (800d524 <_printf_i+0x238>)
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d3e6:	6866      	ldr	r6, [r4, #4]
 800d3e8:	2e00      	cmp	r6, #0
 800d3ea:	bfa8      	it	ge
 800d3ec:	6821      	ldrge	r1, [r4, #0]
 800d3ee:	60a6      	str	r6, [r4, #8]
 800d3f0:	bfa4      	itt	ge
 800d3f2:	f021 0104 	bicge.w	r1, r1, #4
 800d3f6:	6021      	strge	r1, [r4, #0]
 800d3f8:	b90d      	cbnz	r5, 800d3fe <_printf_i+0x112>
 800d3fa:	2e00      	cmp	r6, #0
 800d3fc:	d04b      	beq.n	800d496 <_printf_i+0x1aa>
 800d3fe:	4616      	mov	r6, r2
 800d400:	fbb5 f1f3 	udiv	r1, r5, r3
 800d404:	fb03 5711 	mls	r7, r3, r1, r5
 800d408:	5dc7      	ldrb	r7, [r0, r7]
 800d40a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d40e:	462f      	mov	r7, r5
 800d410:	42bb      	cmp	r3, r7
 800d412:	460d      	mov	r5, r1
 800d414:	d9f4      	bls.n	800d400 <_printf_i+0x114>
 800d416:	2b08      	cmp	r3, #8
 800d418:	d10b      	bne.n	800d432 <_printf_i+0x146>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	07df      	lsls	r7, r3, #31
 800d41e:	d508      	bpl.n	800d432 <_printf_i+0x146>
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	6861      	ldr	r1, [r4, #4]
 800d424:	4299      	cmp	r1, r3
 800d426:	bfde      	ittt	le
 800d428:	2330      	movle	r3, #48	@ 0x30
 800d42a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d42e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d432:	1b92      	subs	r2, r2, r6
 800d434:	6122      	str	r2, [r4, #16]
 800d436:	464b      	mov	r3, r9
 800d438:	4621      	mov	r1, r4
 800d43a:	4640      	mov	r0, r8
 800d43c:	f8cd a000 	str.w	sl, [sp]
 800d440:	aa03      	add	r2, sp, #12
 800d442:	f7ff fee1 	bl	800d208 <_printf_common>
 800d446:	3001      	adds	r0, #1
 800d448:	d14a      	bne.n	800d4e0 <_printf_i+0x1f4>
 800d44a:	f04f 30ff 	mov.w	r0, #4294967295
 800d44e:	b004      	add	sp, #16
 800d450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d454:	6823      	ldr	r3, [r4, #0]
 800d456:	f043 0320 	orr.w	r3, r3, #32
 800d45a:	6023      	str	r3, [r4, #0]
 800d45c:	2778      	movs	r7, #120	@ 0x78
 800d45e:	4832      	ldr	r0, [pc, #200]	@ (800d528 <_printf_i+0x23c>)
 800d460:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	6831      	ldr	r1, [r6, #0]
 800d468:	061f      	lsls	r7, r3, #24
 800d46a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d46e:	d402      	bmi.n	800d476 <_printf_i+0x18a>
 800d470:	065f      	lsls	r7, r3, #25
 800d472:	bf48      	it	mi
 800d474:	b2ad      	uxthmi	r5, r5
 800d476:	6031      	str	r1, [r6, #0]
 800d478:	07d9      	lsls	r1, r3, #31
 800d47a:	bf44      	itt	mi
 800d47c:	f043 0320 	orrmi.w	r3, r3, #32
 800d480:	6023      	strmi	r3, [r4, #0]
 800d482:	b11d      	cbz	r5, 800d48c <_printf_i+0x1a0>
 800d484:	2310      	movs	r3, #16
 800d486:	e7ab      	b.n	800d3e0 <_printf_i+0xf4>
 800d488:	4826      	ldr	r0, [pc, #152]	@ (800d524 <_printf_i+0x238>)
 800d48a:	e7e9      	b.n	800d460 <_printf_i+0x174>
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	f023 0320 	bic.w	r3, r3, #32
 800d492:	6023      	str	r3, [r4, #0]
 800d494:	e7f6      	b.n	800d484 <_printf_i+0x198>
 800d496:	4616      	mov	r6, r2
 800d498:	e7bd      	b.n	800d416 <_printf_i+0x12a>
 800d49a:	6833      	ldr	r3, [r6, #0]
 800d49c:	6825      	ldr	r5, [r4, #0]
 800d49e:	1d18      	adds	r0, r3, #4
 800d4a0:	6961      	ldr	r1, [r4, #20]
 800d4a2:	6030      	str	r0, [r6, #0]
 800d4a4:	062e      	lsls	r6, r5, #24
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	d501      	bpl.n	800d4ae <_printf_i+0x1c2>
 800d4aa:	6019      	str	r1, [r3, #0]
 800d4ac:	e002      	b.n	800d4b4 <_printf_i+0x1c8>
 800d4ae:	0668      	lsls	r0, r5, #25
 800d4b0:	d5fb      	bpl.n	800d4aa <_printf_i+0x1be>
 800d4b2:	8019      	strh	r1, [r3, #0]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	4616      	mov	r6, r2
 800d4b8:	6123      	str	r3, [r4, #16]
 800d4ba:	e7bc      	b.n	800d436 <_printf_i+0x14a>
 800d4bc:	6833      	ldr	r3, [r6, #0]
 800d4be:	2100      	movs	r1, #0
 800d4c0:	1d1a      	adds	r2, r3, #4
 800d4c2:	6032      	str	r2, [r6, #0]
 800d4c4:	681e      	ldr	r6, [r3, #0]
 800d4c6:	6862      	ldr	r2, [r4, #4]
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f000 f859 	bl	800d580 <memchr>
 800d4ce:	b108      	cbz	r0, 800d4d4 <_printf_i+0x1e8>
 800d4d0:	1b80      	subs	r0, r0, r6
 800d4d2:	6060      	str	r0, [r4, #4]
 800d4d4:	6863      	ldr	r3, [r4, #4]
 800d4d6:	6123      	str	r3, [r4, #16]
 800d4d8:	2300      	movs	r3, #0
 800d4da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4de:	e7aa      	b.n	800d436 <_printf_i+0x14a>
 800d4e0:	4632      	mov	r2, r6
 800d4e2:	4649      	mov	r1, r9
 800d4e4:	4640      	mov	r0, r8
 800d4e6:	6923      	ldr	r3, [r4, #16]
 800d4e8:	47d0      	blx	sl
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	d0ad      	beq.n	800d44a <_printf_i+0x15e>
 800d4ee:	6823      	ldr	r3, [r4, #0]
 800d4f0:	079b      	lsls	r3, r3, #30
 800d4f2:	d413      	bmi.n	800d51c <_printf_i+0x230>
 800d4f4:	68e0      	ldr	r0, [r4, #12]
 800d4f6:	9b03      	ldr	r3, [sp, #12]
 800d4f8:	4298      	cmp	r0, r3
 800d4fa:	bfb8      	it	lt
 800d4fc:	4618      	movlt	r0, r3
 800d4fe:	e7a6      	b.n	800d44e <_printf_i+0x162>
 800d500:	2301      	movs	r3, #1
 800d502:	4632      	mov	r2, r6
 800d504:	4649      	mov	r1, r9
 800d506:	4640      	mov	r0, r8
 800d508:	47d0      	blx	sl
 800d50a:	3001      	adds	r0, #1
 800d50c:	d09d      	beq.n	800d44a <_printf_i+0x15e>
 800d50e:	3501      	adds	r5, #1
 800d510:	68e3      	ldr	r3, [r4, #12]
 800d512:	9903      	ldr	r1, [sp, #12]
 800d514:	1a5b      	subs	r3, r3, r1
 800d516:	42ab      	cmp	r3, r5
 800d518:	dcf2      	bgt.n	800d500 <_printf_i+0x214>
 800d51a:	e7eb      	b.n	800d4f4 <_printf_i+0x208>
 800d51c:	2500      	movs	r5, #0
 800d51e:	f104 0619 	add.w	r6, r4, #25
 800d522:	e7f5      	b.n	800d510 <_printf_i+0x224>
 800d524:	0800dfa5 	.word	0x0800dfa5
 800d528:	0800dfb6 	.word	0x0800dfb6

0800d52c <memmove>:
 800d52c:	4288      	cmp	r0, r1
 800d52e:	b510      	push	{r4, lr}
 800d530:	eb01 0402 	add.w	r4, r1, r2
 800d534:	d902      	bls.n	800d53c <memmove+0x10>
 800d536:	4284      	cmp	r4, r0
 800d538:	4623      	mov	r3, r4
 800d53a:	d807      	bhi.n	800d54c <memmove+0x20>
 800d53c:	1e43      	subs	r3, r0, #1
 800d53e:	42a1      	cmp	r1, r4
 800d540:	d008      	beq.n	800d554 <memmove+0x28>
 800d542:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d54a:	e7f8      	b.n	800d53e <memmove+0x12>
 800d54c:	4601      	mov	r1, r0
 800d54e:	4402      	add	r2, r0
 800d550:	428a      	cmp	r2, r1
 800d552:	d100      	bne.n	800d556 <memmove+0x2a>
 800d554:	bd10      	pop	{r4, pc}
 800d556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d55a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d55e:	e7f7      	b.n	800d550 <memmove+0x24>

0800d560 <_sbrk_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	2300      	movs	r3, #0
 800d564:	4d05      	ldr	r5, [pc, #20]	@ (800d57c <_sbrk_r+0x1c>)
 800d566:	4604      	mov	r4, r0
 800d568:	4608      	mov	r0, r1
 800d56a:	602b      	str	r3, [r5, #0]
 800d56c:	f7f6 fc88 	bl	8003e80 <_sbrk>
 800d570:	1c43      	adds	r3, r0, #1
 800d572:	d102      	bne.n	800d57a <_sbrk_r+0x1a>
 800d574:	682b      	ldr	r3, [r5, #0]
 800d576:	b103      	cbz	r3, 800d57a <_sbrk_r+0x1a>
 800d578:	6023      	str	r3, [r4, #0]
 800d57a:	bd38      	pop	{r3, r4, r5, pc}
 800d57c:	20001714 	.word	0x20001714

0800d580 <memchr>:
 800d580:	4603      	mov	r3, r0
 800d582:	b510      	push	{r4, lr}
 800d584:	b2c9      	uxtb	r1, r1
 800d586:	4402      	add	r2, r0
 800d588:	4293      	cmp	r3, r2
 800d58a:	4618      	mov	r0, r3
 800d58c:	d101      	bne.n	800d592 <memchr+0x12>
 800d58e:	2000      	movs	r0, #0
 800d590:	e003      	b.n	800d59a <memchr+0x1a>
 800d592:	7804      	ldrb	r4, [r0, #0]
 800d594:	3301      	adds	r3, #1
 800d596:	428c      	cmp	r4, r1
 800d598:	d1f6      	bne.n	800d588 <memchr+0x8>
 800d59a:	bd10      	pop	{r4, pc}

0800d59c <_realloc_r>:
 800d59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a0:	4680      	mov	r8, r0
 800d5a2:	4615      	mov	r5, r2
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	b921      	cbnz	r1, 800d5b2 <_realloc_r+0x16>
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ae:	f7ff bc47 	b.w	800ce40 <_malloc_r>
 800d5b2:	b92a      	cbnz	r2, 800d5c0 <_realloc_r+0x24>
 800d5b4:	f7ff fbda 	bl	800cd6c <_free_r>
 800d5b8:	2400      	movs	r4, #0
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c0:	f000 f81a 	bl	800d5f8 <_malloc_usable_size_r>
 800d5c4:	4285      	cmp	r5, r0
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	d802      	bhi.n	800d5d0 <_realloc_r+0x34>
 800d5ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d5ce:	d8f4      	bhi.n	800d5ba <_realloc_r+0x1e>
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	f7ff fc34 	bl	800ce40 <_malloc_r>
 800d5d8:	4607      	mov	r7, r0
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d0ec      	beq.n	800d5b8 <_realloc_r+0x1c>
 800d5de:	42b5      	cmp	r5, r6
 800d5e0:	462a      	mov	r2, r5
 800d5e2:	4621      	mov	r1, r4
 800d5e4:	bf28      	it	cs
 800d5e6:	4632      	movcs	r2, r6
 800d5e8:	f7ff fbb2 	bl	800cd50 <memcpy>
 800d5ec:	4621      	mov	r1, r4
 800d5ee:	4640      	mov	r0, r8
 800d5f0:	f7ff fbbc 	bl	800cd6c <_free_r>
 800d5f4:	463c      	mov	r4, r7
 800d5f6:	e7e0      	b.n	800d5ba <_realloc_r+0x1e>

0800d5f8 <_malloc_usable_size_r>:
 800d5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5fc:	1f18      	subs	r0, r3, #4
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	bfbc      	itt	lt
 800d602:	580b      	ldrlt	r3, [r1, r0]
 800d604:	18c0      	addlt	r0, r0, r3
 800d606:	4770      	bx	lr

0800d608 <_init>:
 800d608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60a:	bf00      	nop
 800d60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d60e:	bc08      	pop	{r3}
 800d610:	469e      	mov	lr, r3
 800d612:	4770      	bx	lr

0800d614 <_fini>:
 800d614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d616:	bf00      	nop
 800d618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d61a:	bc08      	pop	{r3}
 800d61c:	469e      	mov	lr, r3
 800d61e:	4770      	bx	lr

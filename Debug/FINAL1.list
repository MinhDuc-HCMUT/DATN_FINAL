
FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad0  0800dcf8  0800dcf8  0000ecf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7c8  0800e7c8  000101f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7c8  0800e7c8  0000f7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7d0  0800e7d0  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7d0  0800e7d0  0000f7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e7d4  0800e7d4  0000f7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e7d8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001f8  0800e9cc  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800e9cc  00010724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa09  00000000  00000000  0001021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048a8  00000000  00000000  0002ac26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  0002f4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c4  00000000  00000000  00030fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c759  00000000  00000000  00032474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021272  00000000  00000000  0004ebcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a44  00000000  00000000  0006fe3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104883  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075c0  00000000  00000000  001048c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010be88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800dce0 	.word	0x0800dce0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800dce0 	.word	0x0800dce0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f004 fab7 	bl	80046e0 <HAL_Delay>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b086      	sub	sp, #24
 800017e:	af02      	add	r7, sp, #8
 8000180:	6078      	str	r0, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	70fb      	strb	r3, [r7, #3]
 8000186:	4613      	mov	r3, r2
 8000188:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7adb      	ldrb	r3, [r3, #11]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d007      	beq.n	80001b0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001b0:	78bb      	ldrb	r3, [r7, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d108      	bne.n	80001c8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00a      	b.n	80001de <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001c8:	78bb      	ldrb	r3, [r7, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d107      	bne.n	80001de <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0301 	bic.w	r3, r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffb9 	bl	8000160 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffaf 	bl	8000160 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	4619      	mov	r1, r3
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2304      	movs	r3, #4
 800021c:	f005 f8ac 	bl	8005378 <HAL_I2C_Master_Transmit>
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	460b      	mov	r3, r1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7e3a      	ldrb	r2, [r7, #24]
 8000254:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2228      	movs	r2, #40	@ 0x28
 800025a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2206      	movs	r2, #6
 8000260:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	220c      	movs	r2, #12
 8000266:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2214      	movs	r2, #20
 800026c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2208      	movs	r2, #8
 8000272:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000274:	2032      	movs	r0, #50	@ 0x32
 8000276:	f7ff ff73 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800027a:	2200      	movs	r2, #0
 800027c:	2133      	movs	r1, #51	@ 0x33
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f7ff ff7b 	bl	800017a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000284:	2200      	movs	r2, #0
 8000286:	2133      	movs	r1, #51	@ 0x33
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f7ff ff76 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff66 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2132      	movs	r1, #50	@ 0x32
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff6e 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff5e 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2120      	movs	r1, #32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff66 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff56 	bl	8000160 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	79db      	ldrb	r3, [r3, #7]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ff5c 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	7a1b      	ldrb	r3, [r3, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f7ff ff55 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff4e 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff47 	bl	800017a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff42 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f7ff ff3d 	bl	800017a <CLCD_WriteI2C>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
 8000314:	4613      	mov	r3, r2
 8000316:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000318:	2300      	movs	r3, #0
 800031a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	78fa      	ldrb	r2, [r7, #3]
 8000322:	429a      	cmp	r2, r3
 8000324:	d303      	bcc.n	800032e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	795b      	ldrb	r3, [r3, #5]
 800032a:	3b01      	subs	r3, #1
 800032c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	799b      	ldrb	r3, [r3, #6]
 8000332:	78ba      	ldrb	r2, [r7, #2]
 8000334:	429a      	cmp	r2, r3
 8000336:	d303      	bcc.n	8000340 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	799b      	ldrb	r3, [r3, #6]
 800033c:	3b01      	subs	r3, #1
 800033e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e013      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800034c:	78bb      	ldrb	r3, [r7, #2]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d103      	bne.n	800035a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000352:	78fb      	ldrb	r3, [r7, #3]
 8000354:	3340      	adds	r3, #64	@ 0x40
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e00c      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800035a:	78bb      	ldrb	r3, [r7, #2]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d103      	bne.n	8000368 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	3314      	adds	r3, #20
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e005      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	2b03      	cmp	r3, #3
 800036c:	d102      	bne.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	3354      	adds	r3, #84	@ 0x54
 8000372:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2200      	movs	r2, #0
 800037e:	4619      	mov	r1, r3
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff fefa 	bl	800017a <CLCD_WriteI2C>
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b082      	sub	sp, #8
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff feea 	bl	800017a <CLCD_WriteI2C>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b082      	sub	sp, #8
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003b8:	e007      	b.n	80003ca <CLCD_I2C_WriteString+0x1c>
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	1c5a      	adds	r2, r3, #1
 80003be:	603a      	str	r2, [r7, #0]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	4619      	mov	r1, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffe2 	bl	800038e <CLCD_I2C_WriteChar>
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d1f3      	bne.n	80003ba <CLCD_I2C_WriteString+0xc>
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff fec6 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003ee:	2005      	movs	r0, #5
 80003f0:	f7ff feb6 	bl	8000160 <CLCD_Delay>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f7ff ffe7 	bl	80003dc <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f7ff ff78 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000418:	68b9      	ldr	r1, [r7, #8]
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	f7ff ffc7 	bl	80003ae <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	2100      	movs	r1, #0
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f7ff ff6f 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f7ff ffbe 	bl	80003ae <CLCD_I2C_WriteString>
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8000442:	4b2a      	ldr	r3, [pc, #168]	@ (80004ec <KeyPad_Init+0xb0>)
 8000444:	2204      	movs	r2, #4
 8000446:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000448:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <KeyPad_Init+0xb0>)
 800044a:	2204      	movs	r2, #4
 800044c:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	75fb      	strb	r3, [r7, #23]
 8000452:	e022      	b.n	800049a <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8000460:	7dfb      	ldrb	r3, [r7, #23]
 8000462:	4a23      	ldr	r2, [pc, #140]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000468:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 800046a:	7dfb      	ldrb	r3, [r7, #23]
 800046c:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <KeyPad_Init+0xb8>)
 800046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000472:	1d3a      	adds	r2, r7, #4
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f004 fc64 	bl	8004d44 <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 800047c:	7dfb      	ldrb	r3, [r7, #23]
 800047e:	4a1d      	ldr	r2, [pc, #116]	@ (80004f4 <KeyPad_Init+0xb8>)
 8000480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	4a1a      	ldr	r2, [pc, #104]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	f004 fdf3 	bl	800507a <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	3301      	adds	r3, #1
 8000498:	75fb      	strb	r3, [r7, #23]
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <KeyPad_Init+0xb0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	7dfa      	ldrb	r2, [r7, #23]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d3d7      	bcc.n	8000454 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	75bb      	strb	r3, [r7, #22]
 80004a8:	e016      	b.n	80004d8 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004b6:	7dbb      	ldrb	r3, [r7, #22]
 80004b8:	4a0f      	ldr	r2, [pc, #60]	@ (80004f8 <KeyPad_Init+0xbc>)
 80004ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004be:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004c0:	7dbb      	ldrb	r3, [r7, #22]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <KeyPad_Init+0xc0>)
 80004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f004 fc39 	bl	8004d44 <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004d2:	7dbb      	ldrb	r3, [r7, #22]
 80004d4:	3301      	adds	r3, #1
 80004d6:	75bb      	strb	r3, [r7, #22]
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <KeyPad_Init+0xb0>)
 80004da:	785b      	ldrb	r3, [r3, #1]
 80004dc:	7dba      	ldrb	r2, [r7, #22]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d3e3      	bcc.n	80004aa <KeyPad_Init+0x6e>
  }
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000214 	.word	0x20000214
 80004f0:	0800e76c 	.word	0x0800e76c
 80004f4:	20000000 	.word	0x20000000
 80004f8:	0800e774 	.word	0x0800e774
 80004fc:	20000010 	.word	0x20000010

08000500 <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8000506:	2300      	movs	r3, #0
 8000508:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	e07e      	b.n	800060e <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000510:	2300      	movs	r3, #0
 8000512:	71bb      	strb	r3, [r7, #6]
 8000514:	e00e      	b.n	8000534 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	4a42      	ldr	r2, [pc, #264]	@ (8000624 <KeyPad_Scan+0x124>)
 800051a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	4a41      	ldr	r2, [pc, #260]	@ (8000628 <KeyPad_Scan+0x128>)
 8000522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	f004 fda6 	bl	800507a <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	3301      	adds	r3, #1
 8000532:	71bb      	strb	r3, [r7, #6]
 8000534:	4b3d      	ldr	r3, [pc, #244]	@ (800062c <KeyPad_Scan+0x12c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3eb      	bcc.n	8000516 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4a38      	ldr	r2, [pc, #224]	@ (8000624 <KeyPad_Scan+0x124>)
 8000542:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a37      	ldr	r2, [pc, #220]	@ (8000628 <KeyPad_Scan+0x128>)
 800054a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fd92 	bl	800507a <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000556:	2005      	movs	r0, #5
 8000558:	f004 f8c2 	bl	80046e0 <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 800055c:	2300      	movs	r3, #0
 800055e:	717b      	strb	r3, [r7, #5]
 8000560:	e04d      	b.n	80005fe <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	4a32      	ldr	r2, [pc, #200]	@ (8000630 <KeyPad_Scan+0x130>)
 8000566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	4931      	ldr	r1, [pc, #196]	@ (8000634 <KeyPad_Scan+0x134>)
 800056e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000572:	4619      	mov	r1, r3
 8000574:	4610      	mov	r0, r2
 8000576:	f004 fd69 	bl	800504c <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d13b      	bne.n	80005f8 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000580:	2014      	movs	r0, #20
 8000582:	f004 f8ad 	bl	80046e0 <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <KeyPad_Scan+0x130>)
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	797b      	ldrb	r3, [r7, #5]
 8000590:	4928      	ldr	r1, [pc, #160]	@ (8000634 <KeyPad_Scan+0x134>)
 8000592:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000596:	4619      	mov	r1, r3
 8000598:	4610      	mov	r0, r2
 800059a:	f004 fd57 	bl	800504c <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d129      	bne.n	80005f8 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2201      	movs	r2, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	3308      	adds	r3, #8
 80005bc:	2201      	movs	r2, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b21b      	sxth	r3, r3
 80005cc:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005ce:	e002      	b.n	80005d6 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005d0:	2005      	movs	r0, #5
 80005d2:	f004 f885 	bl	80046e0 <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <KeyPad_Scan+0x130>)
 80005da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	4914      	ldr	r1, [pc, #80]	@ (8000634 <KeyPad_Scan+0x134>)
 80005e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4610      	mov	r0, r2
 80005ea:	f004 fd2f 	bl	800504c <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0ed      	beq.n	80005d0 <KeyPad_Scan+0xd0>
          return key;
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	e011      	b.n	800061c <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	3301      	adds	r3, #1
 80005fc:	717b      	strb	r3, [r7, #5]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <KeyPad_Scan+0x12c>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	797a      	ldrb	r2, [r7, #5]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3ac      	bcc.n	8000562 <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3301      	adds	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <KeyPad_Scan+0x12c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	429a      	cmp	r2, r3
 8000616:	f4ff af7b 	bcc.w	8000510 <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 800061a:	887b      	ldrh	r3, [r7, #2]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	0800e76c 	.word	0x0800e76c
 800062c:	20000214 	.word	0x20000214
 8000630:	20000010 	.word	0x20000010
 8000634:	0800e774 	.word	0x0800e774

08000638 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 8000640:	e00e      	b.n	8000660 <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 8000642:	f7ff ff5d 	bl	8000500 <KeyPad_Scan>
 8000646:	4603      	mov	r3, r0
 8000648:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 800064a:	897b      	ldrh	r3, [r7, #10]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 8000650:	4a16      	ldr	r2, [pc, #88]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000656:	897b      	ldrh	r3, [r7, #10]
 8000658:	e024      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800065a:	2014      	movs	r0, #20
 800065c:	f004 f840 	bl	80046e0 <HAL_Delay>
  while(Timeout_ms==0)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0ed      	beq.n	8000642 <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000666:	f004 f831 	bl	80046cc <HAL_GetTick>
 800066a:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800066c:	e00e      	b.n	800068c <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800066e:	f7ff ff47 	bl	8000500 <KeyPad_Scan>
 8000672:	4603      	mov	r3, r0
 8000674:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000676:	897b      	ldrh	r3, [r7, #10]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d004      	beq.n	8000686 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800067e:	897b      	ldrh	r3, [r7, #10]
 8000680:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000682:	897b      	ldrh	r3, [r7, #10]
 8000684:	e00e      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000686:	2014      	movs	r0, #20
 8000688:	f004 f82a 	bl	80046e0 <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800068c:	f004 f81e 	bl	80046cc <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8e8      	bhi.n	800066e <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	805a      	strh	r2, [r3, #2]
	return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000214 	.word	0x20000214

080006b0 <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffbd 	bl	8000638 <KeyPad_WaitForKey>
 80006be:	4603      	mov	r3, r0
 80006c0:	f640 0208 	movw	r2, #2056	@ 0x808
 80006c4:	4293      	cmp	r3, r2
 80006c6:	f300 809f 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ce:	dc1a      	bgt.n	8000706 <KeyPad_WaitForKeyGetChar+0x56>
 80006d0:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006d4:	f300 8098 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006dc:	dc2a      	bgt.n	8000734 <KeyPad_WaitForKeyGetChar+0x84>
 80006de:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006e2:	f300 8091 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006ea:	dc3b      	bgt.n	8000764 <KeyPad_WaitForKeyGetChar+0xb4>
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d069      	beq.n	80007c4 <KeyPad_WaitForKeyGetChar+0x114>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f2c0 8089 	blt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006f6:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80006fa:	f300 8085 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000702:	dc47      	bgt.n	8000794 <KeyPad_WaitForKeyGetChar+0xe4>
 8000704:	e080      	b.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 8000706:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 800070a:	2b07      	cmp	r3, #7
 800070c:	d87c      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800070e:	a201      	add	r2, pc, #4	@ (adr r2, 8000714 <KeyPad_WaitForKeyGetChar+0x64>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	080007d5 	.word	0x080007d5
 8000718:	080007e5 	.word	0x080007e5
 800071c:	08000809 	.word	0x08000809
 8000720:	080007f5 	.word	0x080007f5
 8000724:	08000809 	.word	0x08000809
 8000728:	08000809 	.word	0x08000809
 800072c:	08000809 	.word	0x08000809
 8000730:	08000805 	.word	0x08000805
 8000734:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000738:	2b07      	cmp	r3, #7
 800073a:	d865      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800073c:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <KeyPad_WaitForKeyGetChar+0x94>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	080007d1 	.word	0x080007d1
 8000748:	080007e1 	.word	0x080007e1
 800074c:	08000809 	.word	0x08000809
 8000750:	080007f1 	.word	0x080007f1
 8000754:	08000809 	.word	0x08000809
 8000758:	08000809 	.word	0x08000809
 800075c:	08000809 	.word	0x08000809
 8000760:	08000801 	.word	0x08000801
 8000764:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000768:	2b07      	cmp	r3, #7
 800076a:	d84d      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800076c:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <KeyPad_WaitForKeyGetChar+0xc4>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	080007cd 	.word	0x080007cd
 8000778:	080007dd 	.word	0x080007dd
 800077c:	08000809 	.word	0x08000809
 8000780:	080007ed 	.word	0x080007ed
 8000784:	08000809 	.word	0x08000809
 8000788:	08000809 	.word	0x08000809
 800078c:	08000809 	.word	0x08000809
 8000790:	080007fd 	.word	0x080007fd
 8000794:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000798:	2b07      	cmp	r3, #7
 800079a:	d835      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800079c:	a201      	add	r2, pc, #4	@ (adr r2, 80007a4 <KeyPad_WaitForKeyGetChar+0xf4>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007c9 	.word	0x080007c9
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	08000809 	.word	0x08000809
 80007b0:	080007e9 	.word	0x080007e9
 80007b4:	08000809 	.word	0x08000809
 80007b8:	08000809 	.word	0x08000809
 80007bc:	08000809 	.word	0x08000809
 80007c0:	080007f9 	.word	0x080007f9
  {
    case 0x0000:
      return 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e020      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007c8:	2331      	movs	r3, #49	@ 0x31
 80007ca:	e01e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007cc:	2332      	movs	r3, #50	@ 0x32
 80007ce:	e01c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007d0:	2333      	movs	r3, #51	@ 0x33
 80007d2:	e01a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007d4:	2341      	movs	r3, #65	@ 0x41
 80007d6:	e018      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007d8:	2334      	movs	r3, #52	@ 0x34
 80007da:	e016      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007dc:	2335      	movs	r3, #53	@ 0x35
 80007de:	e014      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007e0:	2336      	movs	r3, #54	@ 0x36
 80007e2:	e012      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007e4:	2342      	movs	r3, #66	@ 0x42
 80007e6:	e010      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007e8:	2337      	movs	r3, #55	@ 0x37
 80007ea:	e00e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007ec:	2338      	movs	r3, #56	@ 0x38
 80007ee:	e00c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 80007f0:	2339      	movs	r3, #57	@ 0x39
 80007f2:	e00a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 80007f4:	2343      	movs	r3, #67	@ 0x43
 80007f6:	e008      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 80007f8:	232a      	movs	r3, #42	@ 0x2a
 80007fa:	e006      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 80007fc:	2330      	movs	r3, #48	@ 0x30
 80007fe:	e004      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 8000800:	2323      	movs	r3, #35	@ 0x23
 8000802:	e002      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8000804:	2344      	movs	r3, #68	@ 0x44
 8000806:	e000      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 8000808:	2300      	movs	r3, #0
	}
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop

08000814 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800081e:	1df9      	adds	r1, r7, #7
 8000820:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000824:	2201      	movs	r2, #1
 8000826:	4803      	ldr	r0, [pc, #12]	@ (8000834 <USART_SendByte+0x20>)
 8000828:	f008 f81d 	bl	8008866 <HAL_UART_Transmit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000310 	.word	0x20000310

08000838 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 8000842:	bf00      	nop
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 0108 	add.w	r1, r7, #8
 800084c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <receive_finger+0x3c>)
 8000852:	f008 f89a 	bl	800898a <HAL_UART_Receive>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f3      	beq.n	8000844 <receive_finger+0xc>
	p=D[len-3];
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3b03      	subs	r3, #3
 8000860:	3318      	adds	r3, #24
 8000862:	443b      	add	r3, r7
 8000864:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000868:	75fb      	strb	r3, [r7, #23]
	return p;
 800086a:	7dfb      	ldrb	r3, [r7, #23]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000310 	.word	0x20000310

08000878 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
	HAL_UART_Receive(&huart1,D,len,1000);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	b29a      	uxth	r2, r3
 8000886:	f107 0108 	add.w	r1, r7, #8
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	4807      	ldr	r0, [pc, #28]	@ (80008ac <receive_finger_match+0x34>)
 8000890:	f008 f87b 	bl	800898a <HAL_UART_Receive>
	p=D[len-5];
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	3b05      	subs	r3, #5
 8000898:	3318      	adds	r3, #24
 800089a:	443b      	add	r3, r7
 800089c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008a0:	75fb      	strb	r3, [r7, #23]
	return p;
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000310 	.word	0x20000310

080008b0 <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
	HAL_UART_Receive(&huart1,D,len,200);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 010c 	add.w	r1, r7, #12
 80008c2:	23c8      	movs	r3, #200	@ 0xc8
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <receive_finger_search+0x38>)
 80008c6:	f008 f860 	bl	800898a <HAL_UART_Receive>
	p=D[len-7];
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b07      	subs	r3, #7
 80008ce:	3320      	adds	r3, #32
 80008d0:	443b      	add	r3, r7
 80008d2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008d6:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008d8:	7dfa      	ldrb	r2, [r7, #23]
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <receive_finger_search+0x3c>)
 80008dc:	701a      	strb	r2, [r3, #0]

	return p;
 80008de:	7ffb      	ldrb	r3, [r7, #31]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000310 	.word	0x20000310
 80008ec:	20000218 	.word	0x20000218

080008f0 <collect_finger>:
int collect_finger(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 80008f4:	20ef      	movs	r0, #239	@ 0xef
 80008f6:	f7ff ff8d 	bl	8000814 <USART_SendByte>
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ff8a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000900:	20ff      	movs	r0, #255	@ 0xff
 8000902:	f7ff ff87 	bl	8000814 <USART_SendByte>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	f7ff ff84 	bl	8000814 <USART_SendByte>
 800090c:	20ff      	movs	r0, #255	@ 0xff
 800090e:	f7ff ff81 	bl	8000814 <USART_SendByte>
 8000912:	20ff      	movs	r0, #255	@ 0xff
 8000914:	f7ff ff7e 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff ff7b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff78 	bl	8000814 <USART_SendByte>
 8000924:	2003      	movs	r0, #3
 8000926:	f7ff ff75 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff ff72 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff6f 	bl	8000814 <USART_SendByte>
 8000936:	2005      	movs	r0, #5
 8000938:	f7ff ff6c 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 800093c:	200c      	movs	r0, #12
 800093e:	f7ff ff7b 	bl	8000838 <receive_finger>
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	bd80      	pop	{r7, pc}

08000948 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	3307      	adds	r3, #7
 800095a:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 800095c:	20ef      	movs	r0, #239	@ 0xef
 800095e:	f7ff ff59 	bl	8000814 <USART_SendByte>
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff ff56 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000968:	20ff      	movs	r0, #255	@ 0xff
 800096a:	f7ff ff53 	bl	8000814 <USART_SendByte>
 800096e:	20ff      	movs	r0, #255	@ 0xff
 8000970:	f7ff ff50 	bl	8000814 <USART_SendByte>
 8000974:	20ff      	movs	r0, #255	@ 0xff
 8000976:	f7ff ff4d 	bl	8000814 <USART_SendByte>
 800097a:	20ff      	movs	r0, #255	@ 0xff
 800097c:	f7ff ff4a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff ff47 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff44 	bl	8000814 <USART_SendByte>
 800098c:	2004      	movs	r0, #4
 800098e:	f7ff ff41 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x02);
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff ff3e 	bl	8000814 <USART_SendByte>
   USART_SendByte(local);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff3a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff37 	bl	8000814 <USART_SendByte>
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff32 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 80009b0:	200c      	movs	r0, #12
 80009b2:	f7ff ff41 	bl	8000838 <receive_finger>
 80009b6:	4603      	mov	r3, r0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009c4:	20ef      	movs	r0, #239	@ 0xef
 80009c6:	f7ff ff25 	bl	8000814 <USART_SendByte>
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff ff22 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009d0:	20ff      	movs	r0, #255	@ 0xff
 80009d2:	f7ff ff1f 	bl	8000814 <USART_SendByte>
 80009d6:	20ff      	movs	r0, #255	@ 0xff
 80009d8:	f7ff ff1c 	bl	8000814 <USART_SendByte>
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	f7ff ff19 	bl	8000814 <USART_SendByte>
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	f7ff ff16 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ff13 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff ff10 	bl	8000814 <USART_SendByte>
 80009f4:	2003      	movs	r0, #3
 80009f6:	f7ff ff0d 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x03);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff ff0a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ff07 	bl	8000814 <USART_SendByte>
 8000a06:	2007      	movs	r0, #7
 8000a08:	f7ff ff04 	bl	8000814 <USART_SendByte>
   return receive_finger_match(14);
 8000a0c:	200e      	movs	r0, #14
 8000a0e:	f7ff ff33 	bl	8000878 <receive_finger_match>
 8000a12:	4603      	mov	r3, r0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a1c:	20ef      	movs	r0, #239	@ 0xef
 8000a1e:	f7ff fef9 	bl	8000814 <USART_SendByte>
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fef6 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a28:	20ff      	movs	r0, #255	@ 0xff
 8000a2a:	f7ff fef3 	bl	8000814 <USART_SendByte>
 8000a2e:	20ff      	movs	r0, #255	@ 0xff
 8000a30:	f7ff fef0 	bl	8000814 <USART_SendByte>
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	f7ff feed 	bl	8000814 <USART_SendByte>
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	f7ff feea 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fee7 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fee4 	bl	8000814 <USART_SendByte>
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f7ff fee1 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x05);
 8000a52:	2005      	movs	r0, #5
 8000a54:	f7ff fede 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fedb 	bl	8000814 <USART_SendByte>
 8000a5e:	2009      	movs	r0, #9
 8000a60:	f7ff fed8 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000a64:	200c      	movs	r0, #12
 8000a66:	f7ff fee7 	bl	8000838 <receive_finger>
 8000a6a:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	330e      	adds	r3, #14
 8000a7e:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a80:	20ef      	movs	r0, #239	@ 0xef
 8000a82:	f7ff fec7 	bl	8000814 <USART_SendByte>
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fec4 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a8c:	20ff      	movs	r0, #255	@ 0xff
 8000a8e:	f7ff fec1 	bl	8000814 <USART_SendByte>
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	f7ff febe 	bl	8000814 <USART_SendByte>
 8000a98:	20ff      	movs	r0, #255	@ 0xff
 8000a9a:	f7ff febb 	bl	8000814 <USART_SendByte>
 8000a9e:	20ff      	movs	r0, #255	@ 0xff
 8000aa0:	f7ff feb8 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff feb5 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff feb2 	bl	8000814 <USART_SendByte>
 8000ab0:	2006      	movs	r0, #6
 8000ab2:	f7ff feaf 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x06);
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	f7ff feac 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fea9 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fea6 	bl	8000814 <USART_SendByte>
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fea2 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fe9f 	bl	8000814 <USART_SendByte>
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe9b 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f7ff feaa 	bl	8000838 <receive_finger>
 8000ae4:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000af2:	20ef      	movs	r0, #239	@ 0xef
 8000af4:	f7ff fe8e 	bl	8000814 <USART_SendByte>
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fe8b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000afe:	20ff      	movs	r0, #255	@ 0xff
 8000b00:	f7ff fe88 	bl	8000814 <USART_SendByte>
 8000b04:	20ff      	movs	r0, #255	@ 0xff
 8000b06:	f7ff fe85 	bl	8000814 <USART_SendByte>
 8000b0a:	20ff      	movs	r0, #255	@ 0xff
 8000b0c:	f7ff fe82 	bl	8000814 <USART_SendByte>
 8000b10:	20ff      	movs	r0, #255	@ 0xff
 8000b12:	f7ff fe7f 	bl	8000814 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fe7c 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe79 	bl	8000814 <USART_SendByte>
 8000b22:	2008      	movs	r0, #8
 8000b24:	f7ff fe76 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x04);
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f7ff fe73 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe70 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe6d 	bl	8000814 <USART_SendByte>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe6a 	bl	8000814 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fe67 	bl	8000814 <USART_SendByte>
 8000b46:	20ff      	movs	r0, #255	@ 0xff
 8000b48:	f7ff fe64 	bl	8000814 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fe61 	bl	8000814 <USART_SendByte>
 8000b52:	200d      	movs	r0, #13
 8000b54:	f7ff fe5e 	bl	8000814 <USART_SendByte>
   return receive_finger_search(16);
 8000b58:	2010      	movs	r0, #16
 8000b5a:	f7ff fea9 	bl	80008b0 <receive_finger_search>
 8000b5e:	4603      	mov	r3, r0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <empty>:
//		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
   return receive_finger_search(16);

}
int empty(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
//   tmp=0xFF;
//	int D[20];
 //  for(i=0;i<20;i++) D[i]=0xDD;
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000b68:	20ef      	movs	r0, #239	@ 0xef
 8000b6a:	f7ff fe53 	bl	8000814 <USART_SendByte>
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff fe50 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000b74:	20ff      	movs	r0, #255	@ 0xff
 8000b76:	f7ff fe4d 	bl	8000814 <USART_SendByte>
 8000b7a:	20ff      	movs	r0, #255	@ 0xff
 8000b7c:	f7ff fe4a 	bl	8000814 <USART_SendByte>
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	f7ff fe47 	bl	8000814 <USART_SendByte>
 8000b86:	20ff      	movs	r0, #255	@ 0xff
 8000b88:	f7ff fe44 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff fe41 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff fe3e 	bl	8000814 <USART_SendByte>
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f7ff fe3b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x0D);
 8000b9e:	200d      	movs	r0, #13
 8000ba0:	f7ff fe38 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x11);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff fe35 	bl	8000814 <USART_SendByte>
 8000baa:	2011      	movs	r0, #17
 8000bac:	f7ff fe32 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000bb0:	200c      	movs	r0, #12
 8000bb2:	f7ff fe41 	bl	8000838 <receive_finger>
 8000bb6:	4603      	mov	r3, r0

}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <delete_id_finger>:
int delete_id_finger(uint8_t id)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	uint8_t sum1;
    sum1 = 0x15 + id;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	3315      	adds	r3, #21
 8000bca:	73fb      	strb	r3, [r7, #15]
    USART_SendByte(0xEF);USART_SendByte(0x01);
 8000bcc:	20ef      	movs	r0, #239	@ 0xef
 8000bce:	f7ff fe21 	bl	8000814 <USART_SendByte>
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff fe1e 	bl	8000814 <USART_SendByte>
    USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000bd8:	20ff      	movs	r0, #255	@ 0xff
 8000bda:	f7ff fe1b 	bl	8000814 <USART_SendByte>
 8000bde:	20ff      	movs	r0, #255	@ 0xff
 8000be0:	f7ff fe18 	bl	8000814 <USART_SendByte>
 8000be4:	20ff      	movs	r0, #255	@ 0xff
 8000be6:	f7ff fe15 	bl	8000814 <USART_SendByte>
 8000bea:	20ff      	movs	r0, #255	@ 0xff
 8000bec:	f7ff fe12 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x01);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff fe0f 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x07);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fe0c 	bl	8000814 <USART_SendByte>
 8000bfc:	2007      	movs	r0, #7
 8000bfe:	f7ff fe09 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x0C);
 8000c02:	200c      	movs	r0, #12
 8000c04:	f7ff fe06 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(id);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff fe03 	bl	8000814 <USART_SendByte>
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fdff 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x01);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fdfc 	bl	8000814 <USART_SendByte>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f7ff fdf9 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(sum1);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fdf6 	bl	8000814 <USART_SendByte>
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fdf2 	bl	8000814 <USART_SendByte>
    return receive_finger(12);
 8000c30:	200c      	movs	r0, #12
 8000c32:	f7ff fe01 	bl	8000838 <receive_finger>
 8000c36:	4603      	mov	r3, r0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <Flash_Erase>:
#include <flash.h>

void Flash_Erase(uint32_t address){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000c48:	f003 feec 	bl	8004a24 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000c5c:	f107 020c 	add.w	r2, r7, #12
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 ffc4 	bl	8004bf4 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000c6c:	f003 ff00 	bl	8004a70 <HAL_FLASH_Lock>
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000c84:	f003 fece 	bl	8004a24 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	4615      	mov	r5, r2
 8000c90:	4622      	mov	r2, r4
 8000c92:	462b      	mov	r3, r5
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	2001      	movs	r0, #1
 8000c98:	f003 fe54 	bl	8004944 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000c9c:	f003 fee8 	bl	8004a70 <HAL_FLASH_Lock>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bdb0      	pop	{r4, r5, r7, pc}

08000ca8 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000cb6:	f003 feb5 	bl	8004a24 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000cba:	2300      	movs	r3, #0
 8000cbc:	82fb      	strh	r3, [r7, #22]
 8000cbe:	e00c      	b.n	8000cda <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000cc0:	8afa      	ldrh	r2, [r7, #22]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	18d0      	adds	r0, r2, r3
 8000cc6:	8afb      	ldrh	r3, [r7, #22]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	4413      	add	r3, r2
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f7ff ffd2 	bl	8000c78 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	82fb      	strh	r3, [r7, #22]
 8000cda:	8afa      	ldrh	r2, [r7, #22]
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d3ee      	bcc.n	8000cc0 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000ce2:	f003 fec5 	bl	8004a70 <HAL_FLASH_Lock>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	b29b      	uxth	r3, r3
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	4613      	mov	r3, r2
 8000d44:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000d46:	2300      	movs	r3, #0
 8000d48:	82fb      	strh	r3, [r7, #22]
 8000d4a:	e00c      	b.n	8000d66 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000d4c:	8afa      	ldrh	r2, [r7, #22]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	8afb      	ldrh	r3, [r7, #22]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	4413      	add	r3, r2
 8000d5a:	780a      	ldrb	r2, [r1, #0]
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000d60:	8afb      	ldrh	r3, [r7, #22]
 8000d62:	3301      	adds	r3, #1
 8000d64:	82fb      	strh	r3, [r7, #22]
 8000d66:	8afa      	ldrh	r2, [r7, #22]
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d3ee      	bcc.n	8000d4c <Flash_Read_Array+0x14>
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
	...

08000d7c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d96:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000d98:	e002      	b.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000020 	.word	0x20000020

08000db0 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000db6:	f7ff fd9b 	bl	80008f0 <collect_finger>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <check_fingerprint_status+0x24>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
    }
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000409 	.word	0x20000409

08000dd8 <process_fingerprint>:
void process_fingerprint()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <process_fingerprint+0x1c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d004      	beq.n	8000dee <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <process_fingerprint+0x1c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000dea:	f002 fcaf 	bl	800374c <read_finger>
    }
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000409 	.word	0x20000409

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b090      	sub	sp, #64	@ 0x40
 8000dfc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfe:	f003 fc0d 	bl	800461c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e02:	f000 f9a7 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e06:	f000 fadd 	bl	80013c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e0a:	f000 fa2d 	bl	8001268 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000e0e:	f000 f9fd 	bl	800120c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000e12:	f000 faad 	bl	8001370 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e16:	f000 fa5d 	bl	80012d4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000e1a:	f00b fdd3 	bl	800c9c4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000e1e:	f002 ffa3 	bl	8003d68 <TM_MFRC522_Init>
  KeyPad_Init();
 8000e22:	f7ff fb0b 	bl	800043c <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000e26:	2302      	movs	r3, #2
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	224e      	movs	r2, #78	@ 0x4e
 8000e2e:	49b7      	ldr	r1, [pc, #732]	@ (800110c <main+0x314>)
 8000e30:	48b7      	ldr	r0, [pc, #732]	@ (8001110 <main+0x318>)
 8000e32:	f7ff f9f9 	bl	8000228 <CLCD_I2C_Init>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3c:	48b5      	ldr	r0, [pc, #724]	@ (8001114 <main+0x31c>)
 8000e3e:	f004 f91c 	bl	800507a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e48:	48b2      	ldr	r0, [pc, #712]	@ (8001114 <main+0x31c>)
 8000e4a:	f004 f916 	bl	800507a <HAL_GPIO_WritePin>

  // Check if the password is set, if not, set the default password
  char stored_password[7] = {0};
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	2100      	movs	r1, #0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	801a      	strh	r2, [r3, #0]
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	709a      	strb	r2, [r3, #2]
  Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	2206      	movs	r2, #6
 8000e66:	4619      	mov	r1, r3
 8000e68:	48ab      	ldr	r0, [pc, #684]	@ (8001118 <main+0x320>)
 8000e6a:	f7ff ff65 	bl	8000d38 <Flash_Read_Array>
  stored_password[6] = '\0';
 8000e6e:	2300      	movs	r3, #0
 8000e70:	77bb      	strb	r3, [r7, #30]
  int is_empty = 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
  for (int i = 0; i < 6; i++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e7a:	e00c      	b.n	8000e96 <main+0x9e>
      if (stored_password[i] != (char)0xFF) {
 8000e7c:	f107 0218 	add.w	r2, r7, #24
 8000e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2bff      	cmp	r3, #255	@ 0xff
 8000e88:	d002      	beq.n	8000e90 <main+0x98>
          is_empty = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8000e8e:	e005      	b.n	8000e9c <main+0xa4>
  for (int i = 0; i < 6; i++) {
 8000e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e92:	3301      	adds	r3, #1
 8000e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	ddef      	ble.n	8000e7c <main+0x84>
      }
  }
  if (is_empty) {
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <main+0xae>
      set_default_password();
 8000ea2:	f002 fe7f 	bl	8003ba4 <set_default_password>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ea6:	489d      	ldr	r0, [pc, #628]	@ (800111c <main+0x324>)
 8000ea8:	f007 f8e6 	bl	8008078 <HAL_TIM_Base_Start_IT>
  if (checkcountUID() == 0)
 8000eac:	f001 ffd6 	bl	8002e5c <checkcountUID>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <main+0xc2>
  {
      startadd();
 8000eb6:	f002 f96d 	bl	8003194 <startadd>
  }
  int incorrect_attempts = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    CLCD_I2C_Clear(&LCD1);
 8000ebe:	4894      	ldr	r0, [pc, #592]	@ (8001110 <main+0x318>)
 8000ec0:	f7ff fa8c 	bl	80003dc <CLCD_I2C_Clear>
    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4891      	ldr	r0, [pc, #580]	@ (8001110 <main+0x318>)
 8000eca:	f7ff fa1d 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 8000ece:	4994      	ldr	r1, [pc, #592]	@ (8001120 <main+0x328>)
 8000ed0:	488f      	ldr	r0, [pc, #572]	@ (8001110 <main+0x318>)
 8000ed2:	f7ff fa6c 	bl	80003ae <CLCD_I2C_WriteString>

    char selected_key = KeyPad_WaitForKeyGetChar(10); // Ch�? vô hạn cho đến khi có phím nhấn.
 8000ed6:	200a      	movs	r0, #10
 8000ed8:	f7ff fbea 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    if (selected_key == '#')
 8000ee2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000ee6:	2b23      	cmp	r3, #35	@ 0x23
 8000ee8:	d166      	bne.n	8000fb8 <main+0x1c0>
    {
    	buzzer(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f002 feea 	bl	8003cc4 <buzzer>
        char entered_password[7] = {0};
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2100      	movs	r1, #0
 8000efa:	460a      	mov	r2, r1
 8000efc:	801a      	strh	r2, [r3, #0]
 8000efe:	460a      	mov	r2, r1
 8000f00:	709a      	strb	r2, [r3, #2]
        CLCD_I2C_Display(&LCD1, "ENTER PASSWORD", "");
 8000f02:	4a88      	ldr	r2, [pc, #544]	@ (8001124 <main+0x32c>)
 8000f04:	4988      	ldr	r1, [pc, #544]	@ (8001128 <main+0x330>)
 8000f06:	4882      	ldr	r0, [pc, #520]	@ (8001110 <main+0x318>)
 8000f08:	f7ff fa78 	bl	80003fc <CLCD_I2C_Display>
        enter_password(entered_password);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fda7 	bl	8003a64 <enter_password>
        if (check_password(entered_password)) {
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fe1a 	bl	8003b54 <check_password>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d009      	beq.n	8000f3a <main+0x142>
            CLCD_I2C_Display(&LCD1, "    WELCOME", "");
 8000f26:	4a7f      	ldr	r2, [pc, #508]	@ (8001124 <main+0x32c>)
 8000f28:	4980      	ldr	r1, [pc, #512]	@ (800112c <main+0x334>)
 8000f2a:	4879      	ldr	r0, [pc, #484]	@ (8001110 <main+0x318>)
 8000f2c:	f7ff fa66 	bl	80003fc <CLCD_I2C_Display>
            opendoor();
 8000f30:	f002 fe78 	bl	8003c24 <opendoor>
            incorrect_attempts = 0; // Reset incorrect attempts on successful login
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f38:	e036      	b.n	8000fa8 <main+0x1b0>
        } else {
            incorrect_attempts++;
 8000f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            CLCD_I2C_Display(&LCD1, "WRONG PASSWORD", "");
 8000f40:	4a78      	ldr	r2, [pc, #480]	@ (8001124 <main+0x32c>)
 8000f42:	497b      	ldr	r1, [pc, #492]	@ (8001130 <main+0x338>)
 8000f44:	4872      	ldr	r0, [pc, #456]	@ (8001110 <main+0x318>)
 8000f46:	f7ff fa59 	bl	80003fc <CLCD_I2C_Display>
            buzzer(5);
 8000f4a:	2005      	movs	r0, #5
 8000f4c:	f002 feba 	bl	8003cc4 <buzzer>
            int delay_time = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (incorrect_attempts == 1) {
 8000f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d102      	bne.n	8000f60 <main+0x168>
                delay_time = 5;
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f5e:	e00a      	b.n	8000f76 <main+0x17e>
            } else if (incorrect_attempts == 2) {
 8000f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d102      	bne.n	8000f6c <main+0x174>
                delay_time = 10;
 8000f66:	230a      	movs	r3, #10
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f6a:	e004      	b.n	8000f76 <main+0x17e>
            } else if (incorrect_attempts >= 3) {
 8000f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	dd01      	ble.n	8000f76 <main+0x17e>
                delay_time = 20;
 8000f72:	2314      	movs	r3, #20
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            for (int i = delay_time; i > 0; i--) {
 8000f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f7a:	e012      	b.n	8000fa2 <main+0x1aa>
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "     WAIT %ds", i);
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f80:	4a6c      	ldr	r2, [pc, #432]	@ (8001134 <main+0x33c>)
 8000f82:	2110      	movs	r1, #16
 8000f84:	f00c f9c8 	bl	800d318 <sniprintf>
                CLCD_I2C_Display(&LCD1, buffer, "  TO TRY AGAIN");
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4a6b      	ldr	r2, [pc, #428]	@ (8001138 <main+0x340>)
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4860      	ldr	r0, [pc, #384]	@ (8001110 <main+0x318>)
 8000f90:	f7ff fa34 	bl	80003fc <CLCD_I2C_Display>
                HAL_Delay(1000);
 8000f94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f98:	f003 fba2 	bl	80046e0 <HAL_Delay>
            for (int i = delay_time; i > 0; i--) {
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dce9      	bgt.n	8000f7c <main+0x184>
            }
        }
        HAL_Delay(2000);
 8000fa8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fac:	f003 fb98 	bl	80046e0 <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 8000fb0:	4857      	ldr	r0, [pc, #348]	@ (8001110 <main+0x318>)
 8000fb2:	f7ff fa13 	bl	80003dc <CLCD_I2C_Clear>
 8000fb6:	e0a3      	b.n	8001100 <main+0x308>
    }
    else if (selected_key != 0)
 8000fb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d067      	beq.n	8001090 <main+0x298>
    {
    	buzzer(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f002 fe7f 	bl	8003cc4 <buzzer>
        uint8_t key = 0; // Key quản lý quy�?n truy cập.
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        exitmenu = 15;
 8000fcc:	4b5b      	ldr	r3, [pc, #364]	@ (800113c <main+0x344>)
 8000fce:	220f      	movs	r2, #15
 8000fd0:	701a      	strb	r2, [r3, #0]

        switch (selected_key)
 8000fd2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fd6:	3b41      	subs	r3, #65	@ 0x41
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	f200 8090 	bhi.w	80010fe <main+0x306>
        {
        case 'A': // RFID
        case 'B': // FACEID
        case 'C': // FINGER
        case 'D': // PASSWORD
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	484b      	ldr	r0, [pc, #300]	@ (8001110 <main+0x318>)
 8000fe4:	f7ff f990 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 8000fe8:	4955      	ldr	r1, [pc, #340]	@ (8001140 <main+0x348>)
 8000fea:	4849      	ldr	r0, [pc, #292]	@ (8001110 <main+0x318>)
 8000fec:	f7ff f9df 	bl	80003ae <CLCD_I2C_WriteString>

            while (exitmenu)
 8000ff0:	e011      	b.n	8001016 <main+0x21e>
            {
                if (TM_MFRC522_Check(CardID) == MI_OK)
 8000ff2:	4854      	ldr	r0, [pc, #336]	@ (8001144 <main+0x34c>)
 8000ff4:	f002 fedc 	bl	8003db0 <TM_MFRC522_Check>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10b      	bne.n	8001016 <main+0x21e>
                {
                    key = CheckListUID(CardID);
 8000ffe:	4851      	ldr	r0, [pc, #324]	@ (8001144 <main+0x34c>)
 8001000:	f001 fefc 	bl	8002dfc <CheckListUID>
 8001004:	4603      	mov	r3, r0
 8001006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    key = key >> 4;
 800100a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    break;
 8001014:	e003      	b.n	800101e <main+0x226>
            while (exitmenu)
 8001016:	4b49      	ldr	r3, [pc, #292]	@ (800113c <main+0x344>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1e9      	bne.n	8000ff2 <main+0x1fa>
                }
            }

            switch (key)
 800101e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001022:	2b01      	cmp	r3, #1
 8001024:	d11b      	bne.n	800105e <main+0x266>
            {
            case 1:
                if (selected_key == 'A')
 8001026:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800102a:	2b41      	cmp	r3, #65	@ 0x41
 800102c:	d102      	bne.n	8001034 <main+0x23c>
                    RFID();
 800102e:	f000 fa9b 	bl	8001568 <RFID>
                    FACEID();
                else if (selected_key == 'C')
                    FINGER();
                else if (selected_key == 'D')
                    PASSWORD();
                break;
 8001032:	e02b      	b.n	800108c <main+0x294>
                else if (selected_key == 'B')
 8001034:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001038:	2b42      	cmp	r3, #66	@ 0x42
 800103a:	d102      	bne.n	8001042 <main+0x24a>
                    FACEID();
 800103c:	f001 f9e8 	bl	8002410 <FACEID>
                break;
 8001040:	e024      	b.n	800108c <main+0x294>
                else if (selected_key == 'C')
 8001042:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001046:	2b43      	cmp	r3, #67	@ 0x43
 8001048:	d102      	bne.n	8001050 <main+0x258>
                    FINGER();
 800104a:	f001 fd9b 	bl	8002b84 <FINGER>
                break;
 800104e:	e01d      	b.n	800108c <main+0x294>
                else if (selected_key == 'D')
 8001050:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001054:	2b44      	cmp	r3, #68	@ 0x44
 8001056:	d119      	bne.n	800108c <main+0x294>
                    PASSWORD();
 8001058:	f001 fe28 	bl	8002cac <PASSWORD>
                break;
 800105c:	e016      	b.n	800108c <main+0x294>
            default:
                CLCD_I2C_Clear(&LCD1);
 800105e:	482c      	ldr	r0, [pc, #176]	@ (8001110 <main+0x318>)
 8001060:	f7ff f9bc 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	4829      	ldr	r0, [pc, #164]	@ (8001110 <main+0x318>)
 800106a:	f7ff f94d 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 800106e:	4936      	ldr	r1, [pc, #216]	@ (8001148 <main+0x350>)
 8001070:	4827      	ldr	r0, [pc, #156]	@ (8001110 <main+0x318>)
 8001072:	f7ff f99c 	bl	80003ae <CLCD_I2C_WriteString>
                buzzer(5);
 8001076:	2005      	movs	r0, #5
 8001078:	f002 fe24 	bl	8003cc4 <buzzer>
                HAL_Delay(2000);
 800107c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001080:	f003 fb2e 	bl	80046e0 <HAL_Delay>
                CLCD_I2C_Clear(&LCD1);
 8001084:	4822      	ldr	r0, [pc, #136]	@ (8001110 <main+0x318>)
 8001086:	f7ff f9a9 	bl	80003dc <CLCD_I2C_Clear>
                break;
 800108a:	e000      	b.n	800108e <main+0x296>
                break;
 800108c:	bf00      	nop
            }
            break;
 800108e:	e037      	b.n	8001100 <main+0x308>

        default:
            break;
        }
    }
    else if (TM_MFRC522_Check(CardID) == MI_OK)
 8001090:	482c      	ldr	r0, [pc, #176]	@ (8001144 <main+0x34c>)
 8001092:	f002 fe8d 	bl	8003db0 <TM_MFRC522_Check>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d128      	bne.n	80010ee <main+0x2f6>
    {
        if (CheckListUID(CardID) != 0)
 800109c:	4829      	ldr	r0, [pc, #164]	@ (8001144 <main+0x34c>)
 800109e:	f001 fead 	bl	8002dfc <CheckListUID>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00e      	beq.n	80010c6 <main+0x2ce>
        {
            CLCD_I2C_Clear(&LCD1);
 80010a8:	4819      	ldr	r0, [pc, #100]	@ (8001110 <main+0x318>)
 80010aa:	f7ff f997 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	4817      	ldr	r0, [pc, #92]	@ (8001110 <main+0x318>)
 80010b4:	f7ff f928 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 80010b8:	491c      	ldr	r1, [pc, #112]	@ (800112c <main+0x334>)
 80010ba:	4815      	ldr	r0, [pc, #84]	@ (8001110 <main+0x318>)
 80010bc:	f7ff f977 	bl	80003ae <CLCD_I2C_WriteString>
            opendoor();
 80010c0:	f002 fdb0 	bl	8003c24 <opendoor>
 80010c4:	e01c      	b.n	8001100 <main+0x308>
        }
        else
        {
            CLCD_I2C_Clear(&LCD1);
 80010c6:	4812      	ldr	r0, [pc, #72]	@ (8001110 <main+0x318>)
 80010c8:	f7ff f988 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	480f      	ldr	r0, [pc, #60]	@ (8001110 <main+0x318>)
 80010d2:	f7ff f919 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 80010d6:	491d      	ldr	r1, [pc, #116]	@ (800114c <main+0x354>)
 80010d8:	480d      	ldr	r0, [pc, #52]	@ (8001110 <main+0x318>)
 80010da:	f7ff f968 	bl	80003ae <CLCD_I2C_WriteString>
            buzzer(5);
 80010de:	2005      	movs	r0, #5
 80010e0:	f002 fdf0 	bl	8003cc4 <buzzer>
            HAL_Delay(2000);
 80010e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010e8:	f003 fafa 	bl	80046e0 <HAL_Delay>
 80010ec:	e008      	b.n	8001100 <main+0x308>
        }
    }
    else if(Rx_Buffer[0]!= 0)
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <main+0x358>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <main+0x308>
    {
        startface();
 80010f8:	f002 fc7c 	bl	80039f4 <startface>
 80010fc:	e000      	b.n	8001100 <main+0x308>
            break;
 80010fe:	bf00      	nop
    }

    // Kiểm tra trạng thái vân tay định kỳ
    check_fingerprint_status();
 8001100:	f7ff fe56 	bl	8000db0 <check_fingerprint_status>

    // Xử lý vân tay nếu phát hiện
    process_fingerprint();
 8001104:	f7ff fe68 	bl	8000dd8 <process_fingerprint>
  {
 8001108:	e6d9      	b.n	8000ebe <main+0xc6>
 800110a:	bf00      	nop
 800110c:	2000021c 	.word	0x2000021c
 8001110:	200003d8 	.word	0x200003d8
 8001114:	40010800 	.word	0x40010800
 8001118:	0800f400 	.word	0x0800f400
 800111c:	200002c8 	.word	0x200002c8
 8001120:	0800dcf8 	.word	0x0800dcf8
 8001124:	0800dd08 	.word	0x0800dd08
 8001128:	0800dd0c 	.word	0x0800dd0c
 800112c:	0800dd1c 	.word	0x0800dd1c
 8001130:	0800dd28 	.word	0x0800dd28
 8001134:	0800dd38 	.word	0x0800dd38
 8001138:	0800dd48 	.word	0x0800dd48
 800113c:	20000020 	.word	0x20000020
 8001140:	0800dd58 	.word	0x0800dd58
 8001144:	200003e4 	.word	0x200003e4
 8001148:	0800dd68 	.word	0x0800dd68
 800114c:	0800dd78 	.word	0x0800dd78
 8001150:	20000350 	.word	0x20000350

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b094      	sub	sp, #80	@ 0x50
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800115e:	2228      	movs	r2, #40	@ 0x28
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f00c f92c 	bl	800d3c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001184:	2301      	movs	r3, #1
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001188:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001192:	2301      	movs	r3, #1
 8001194:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800119e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80011a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 ff78 	bl	80070a0 <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011b6:	f002 fda9 	bl	8003d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ba:	230f      	movs	r3, #15
 80011bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f006 f9e4 	bl	80075a4 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011e2:	f002 fd93 	bl	8003d0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011e6:	2310      	movs	r3, #16
 80011e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ee:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4618      	mov	r0, r3
 80011f4:	f006 fb6e 	bl	80078d4 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011fe:	f002 fd85 	bl	8003d0c <Error_Handler>
  }
}
 8001202:	bf00      	nop
 8001204:	3750      	adds	r7, #80	@ 0x50
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_I2C2_Init+0x50>)
 8001212:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <MX_I2C2_Init+0x54>)
 8001214:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_I2C2_Init+0x50>)
 8001218:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <MX_I2C2_Init+0x58>)
 800121a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_I2C2_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_I2C2_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_I2C2_Init+0x50>)
 800122a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800122e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <MX_I2C2_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_I2C2_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <MX_I2C2_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_I2C2_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_I2C2_Init+0x50>)
 800124a:	f003 ff51 	bl	80050f0 <HAL_I2C_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001254:	f002 fd5a 	bl	8003d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000021c 	.word	0x2000021c
 8001260:	40005800 	.word	0x40005800
 8001264:	000186a0 	.word	0x000186a0

08001268 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800126c:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_SPI1_Init+0x64>)
 800126e:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <MX_SPI1_Init+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001274:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_SPI1_Init+0x64>)
 8001294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001298:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_SPI1_Init+0x64>)
 800129c:	2230      	movs	r2, #48	@ 0x30
 800129e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012b4:	220a      	movs	r2, #10
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_SPI1_Init+0x64>)
 80012ba:	f006 fbc1 	bl	8007a40 <HAL_SPI_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c4:	f002 fd22 	bl	8003d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000270 	.word	0x20000270
 80012d0:	40013000 	.word	0x40013000

080012d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f0:	4b1e      	ldr	r3, [pc, #120]	@ (800136c <MX_TIM2_Init+0x98>)
 80012f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <MX_TIM2_Init+0x98>)
 80012fa:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80012fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_TIM2_Init+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <MX_TIM2_Init+0x98>)
 8001308:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800130c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_TIM2_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_TIM2_Init+0x98>)
 8001316:	2280      	movs	r2, #128	@ 0x80
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131a:	4814      	ldr	r0, [pc, #80]	@ (800136c <MX_TIM2_Init+0x98>)
 800131c:	f006 fe5c 	bl	8007fd8 <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001326:	f002 fcf1 	bl	8003d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	@ (800136c <MX_TIM2_Init+0x98>)
 8001338:	f006 fff8 	bl	800832c <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001342:	f002 fce3 	bl	8003d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <MX_TIM2_Init+0x98>)
 8001354:	f007 f9ca 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800135e:	f002 fcd5 	bl	8003d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200002c8 	.word	0x200002c8

08001370 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <MX_USART1_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 800137c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_USART1_UART_Init+0x4c>)
 80013a8:	f007 fa10 	bl	80087cc <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013b2:	f002 fcab 	bl	8003d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000310 	.word	0x20000310
 80013c0:	40013800 	.word	0x40013800

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b58      	ldr	r3, [pc, #352]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a57      	ldr	r2, [pc, #348]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b55      	ldr	r3, [pc, #340]	@ (8001554 <MX_GPIO_Init+0x190>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <MX_GPIO_Init+0x190>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a51      	ldr	r2, [pc, #324]	@ (8001554 <MX_GPIO_Init+0x190>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b4f      	ldr	r3, [pc, #316]	@ (8001554 <MX_GPIO_Init+0x190>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b4c      	ldr	r3, [pc, #304]	@ (8001554 <MX_GPIO_Init+0x190>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a4b      	ldr	r2, [pc, #300]	@ (8001554 <MX_GPIO_Init+0x190>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b49      	ldr	r3, [pc, #292]	@ (8001554 <MX_GPIO_Init+0x190>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800143e:	4846      	ldr	r0, [pc, #280]	@ (8001558 <MX_GPIO_Init+0x194>)
 8001440:	f003 fe1b 	bl	800507a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8001444:	2200      	movs	r2, #0
 8001446:	f24f 0108 	movw	r1, #61448	@ 0xf008
 800144a:	4844      	ldr	r0, [pc, #272]	@ (800155c <MX_GPIO_Init+0x198>)
 800144c:	f003 fe15 	bl	800507a <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001456:	4840      	ldr	r0, [pc, #256]	@ (8001558 <MX_GPIO_Init+0x194>)
 8001458:	f003 fe0f 	bl	800507a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 800145c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	483b      	ldr	r0, [pc, #236]	@ (8001560 <MX_GPIO_Init+0x19c>)
 8001472:	f003 fc67 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8001476:	2303      	movs	r3, #3
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	4833      	ldr	r0, [pc, #204]	@ (8001558 <MX_GPIO_Init+0x194>)
 800148a:	f003 fc5b 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800148e:	2310      	movs	r3, #16
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2302      	movs	r3, #2
 800149c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	482c      	ldr	r0, [pc, #176]	@ (8001558 <MX_GPIO_Init+0x194>)
 80014a6:	f003 fc4d 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 80014aa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	4826      	ldr	r0, [pc, #152]	@ (800155c <MX_GPIO_Init+0x198>)
 80014c4:	f003 fc3e 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80014c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014ce:	2311      	movs	r3, #17
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	481d      	ldr	r0, [pc, #116]	@ (8001558 <MX_GPIO_Init+0x194>)
 80014e2:	f003 fc2f 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOCK_Pin */
  GPIO_InitStruct.Pin = LOCK_Pin;
 80014e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOCK_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4619      	mov	r1, r3
 80014fe:	4816      	ldr	r0, [pc, #88]	@ (8001558 <MX_GPIO_Init+0x194>)
 8001500:	f003 fc20 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 8001504:	2308      	movs	r3, #8
 8001506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2302      	movs	r3, #2
 8001512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	4810      	ldr	r0, [pc, #64]	@ (800155c <MX_GPIO_Init+0x198>)
 800151c:	f003 fc12 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001520:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_GPIO_Init+0x1a0>)
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4619      	mov	r1, r3
 8001534:	4809      	ldr	r0, [pc, #36]	@ (800155c <MX_GPIO_Init+0x198>)
 8001536:	f003 fc05 	bl	8004d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2101      	movs	r1, #1
 800153e:	2017      	movs	r0, #23
 8001540:	f003 f9c9 	bl	80048d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001544:	2017      	movs	r0, #23
 8001546:	f003 f9e2 	bl	800490e <HAL_NVIC_EnableIRQ>

}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	40010800 	.word	0x40010800
 800155c:	40010c00 	.word	0x40010c00
 8001560:	40011000 	.word	0x40011000
 8001564:	10110000 	.word	0x10110000

08001568 <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
	buzzer(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f002 fba8 	bl	8003cc4 <buzzer>
	exitmenu = 15;
 8001574:	4ba2      	ldr	r3, [pc, #648]	@ (8001800 <RFID+0x298>)
 8001576:	220f      	movs	r2, #15
 8001578:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 800157a:	23ff      	movs	r3, #255	@ 0xff
 800157c:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press DOWN");
 800157e:	4aa1      	ldr	r2, [pc, #644]	@ (8001804 <RFID+0x29c>)
 8001580:	49a1      	ldr	r1, [pc, #644]	@ (8001808 <RFID+0x2a0>)
 8001582:	48a2      	ldr	r0, [pc, #648]	@ (800180c <RFID+0x2a4>)
 8001584:	f7fe ff3a 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8001588:	f000 befc 	b.w	8002384 <RFID+0xe1c>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 800158c:	200a      	movs	r0, #10
 800158e:	f7ff f88f 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001592:	4603      	mov	r3, r0
 8001594:	717b      	strb	r3, [r7, #5]
		if (key_pressed =='*')
 8001596:	797b      	ldrb	r3, [r7, #5]
 8001598:	2b2a      	cmp	r3, #42	@ 0x2a
 800159a:	d131      	bne.n	8001600 <RFID+0x98>
		{
			buzzer(1);
 800159c:	2001      	movs	r0, #1
 800159e:	f002 fb91 	bl	8003cc4 <buzzer>
			exitmenu = 15;
 80015a2:	4b97      	ldr	r3, [pc, #604]	@ (8001800 <RFID+0x298>)
 80015a4:	220f      	movs	r2, #15
 80015a6:	701a      	strb	r2, [r3, #0]
			status++;
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	3301      	adds	r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d801      	bhi.n	80015b8 <RFID+0x50>
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	e000      	b.n	80015ba <RFID+0x52>
 80015b8:	2300      	movs	r3, #0
 80015ba:	75fb      	strb	r3, [r7, #23]
			switch (status)
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d012      	beq.n	80015e8 <RFID+0x80>
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	dc16      	bgt.n	80015f4 <RFID+0x8c>
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <RFID+0x68>
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d006      	beq.n	80015dc <RFID+0x74>
 80015ce:	e011      	b.n	80015f4 <RFID+0x8c>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 80015d0:	4a8f      	ldr	r2, [pc, #572]	@ (8001810 <RFID+0x2a8>)
 80015d2:	498d      	ldr	r1, [pc, #564]	@ (8001808 <RFID+0x2a0>)
 80015d4:	488d      	ldr	r0, [pc, #564]	@ (800180c <RFID+0x2a4>)
 80015d6:	f7fe ff11 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015da:	e011      	b.n	8001600 <RFID+0x98>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 80015dc:	4a8d      	ldr	r2, [pc, #564]	@ (8001814 <RFID+0x2ac>)
 80015de:	498a      	ldr	r1, [pc, #552]	@ (8001808 <RFID+0x2a0>)
 80015e0:	488a      	ldr	r0, [pc, #552]	@ (800180c <RFID+0x2a4>)
 80015e2:	f7fe ff0b 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015e6:	e00b      	b.n	8001600 <RFID+0x98>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 80015e8:	4a8b      	ldr	r2, [pc, #556]	@ (8001818 <RFID+0x2b0>)
 80015ea:	4987      	ldr	r1, [pc, #540]	@ (8001808 <RFID+0x2a0>)
 80015ec:	4887      	ldr	r0, [pc, #540]	@ (800180c <RFID+0x2a4>)
 80015ee:	f7fe ff05 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015f2:	e005      	b.n	8001600 <RFID+0x98>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 80015f4:	4a89      	ldr	r2, [pc, #548]	@ (800181c <RFID+0x2b4>)
 80015f6:	4984      	ldr	r1, [pc, #528]	@ (8001808 <RFID+0x2a0>)
 80015f8:	4884      	ldr	r0, [pc, #528]	@ (800180c <RFID+0x2a4>)
 80015fa:	f7fe feff 	bl	80003fc <CLCD_I2C_Display>
				break;
 80015fe:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 8001600:	797b      	ldrb	r3, [r7, #5]
 8001602:	2b23      	cmp	r3, #35	@ 0x23
 8001604:	f040 86be 	bne.w	8002384 <RFID+0xe1c>
		{
			buzzer(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f002 fb5b 	bl	8003cc4 <buzzer>
			exitmenu = 15;
 800160e:	4b7c      	ldr	r3, [pc, #496]	@ (8001800 <RFID+0x298>)
 8001610:	220f      	movs	r2, #15
 8001612:	701a      	strb	r2, [r3, #0]
			switch (status)
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	2b02      	cmp	r3, #2
 8001618:	f000 86a8 	beq.w	800236c <RFID+0xe04>
 800161c:	2b02      	cmp	r3, #2
 800161e:	f300 86ad 	bgt.w	800237c <RFID+0xe14>
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <RFID+0xc8>
 8001626:	2b01      	cmp	r3, #1
 8001628:	f000 8252 	beq.w	8001ad0 <RFID+0x568>
 800162c:	f000 bea6 	b.w	800237c <RFID+0xe14>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001630:	4a7b      	ldr	r2, [pc, #492]	@ (8001820 <RFID+0x2b8>)
 8001632:	497c      	ldr	r1, [pc, #496]	@ (8001824 <RFID+0x2bc>)
 8001634:	4875      	ldr	r0, [pc, #468]	@ (800180c <RFID+0x2a4>)
 8001636:	f7fe fee1 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8001642:	e23a      	b.n	8001aba <RFID+0x552>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001644:	200a      	movs	r0, #10
 8001646:	f7ff f833 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800164a:	4603      	mov	r3, r0
 800164c:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 800164e:	4b6c      	ldr	r3, [pc, #432]	@ (8001800 <RFID+0x298>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d108      	bne.n	8001668 <RFID+0x100>
					{
						CLCD_I2C_Clear(&LCD1);
 8001656:	486d      	ldr	r0, [pc, #436]	@ (800180c <RFID+0x2a4>)
 8001658:	f7fe fec0 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800165c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001660:	f003 f83e 	bl	80046e0 <HAL_Delay>
						return;
 8001664:	f000 be96 	b.w	8002394 <RFID+0xe2c>
					}
					if (key_pressed =='*')
 8001668:	797b      	ldrb	r3, [r7, #5]
 800166a:	2b2a      	cmp	r3, #42	@ 0x2a
 800166c:	d127      	bne.n	80016be <RFID+0x156>
					{
						buzzer(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f002 fb28 	bl	8003cc4 <buzzer>
						exitmenu = 15;
 8001674:	4b62      	ldr	r3, [pc, #392]	@ (8001800 <RFID+0x298>)
 8001676:	220f      	movs	r2, #15
 8001678:	701a      	strb	r2, [r3, #0]
						statusadd++;
 800167a:	7dbb      	ldrb	r3, [r7, #22]
 800167c:	3301      	adds	r3, #1
 800167e:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8001680:	7dbb      	ldrb	r3, [r7, #22]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d801      	bhi.n	800168a <RFID+0x122>
 8001686:	7dbb      	ldrb	r3, [r7, #22]
 8001688:	e000      	b.n	800168c <RFID+0x124>
 800168a:	2300      	movs	r3, #0
 800168c:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 800168e:	7dbb      	ldrb	r3, [r7, #22]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d002      	beq.n	800169a <RFID+0x132>
 8001694:	2b02      	cmp	r3, #2
 8001696:	d006      	beq.n	80016a6 <RFID+0x13e>
 8001698:	e00b      	b.n	80016b2 <RFID+0x14a>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 800169a:	4a63      	ldr	r2, [pc, #396]	@ (8001828 <RFID+0x2c0>)
 800169c:	4963      	ldr	r1, [pc, #396]	@ (800182c <RFID+0x2c4>)
 800169e:	485b      	ldr	r0, [pc, #364]	@ (800180c <RFID+0x2a4>)
 80016a0:	f7fe feac 	bl	80003fc <CLCD_I2C_Display>
							break;
 80016a4:	e00b      	b.n	80016be <RFID+0x156>
						case 2:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 80016a6:	4a62      	ldr	r2, [pc, #392]	@ (8001830 <RFID+0x2c8>)
 80016a8:	4960      	ldr	r1, [pc, #384]	@ (800182c <RFID+0x2c4>)
 80016aa:	4858      	ldr	r0, [pc, #352]	@ (800180c <RFID+0x2a4>)
 80016ac:	f7fe fea6 	bl	80003fc <CLCD_I2C_Display>
							break;
 80016b0:	e005      	b.n	80016be <RFID+0x156>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 80016b2:	4a5a      	ldr	r2, [pc, #360]	@ (800181c <RFID+0x2b4>)
 80016b4:	495d      	ldr	r1, [pc, #372]	@ (800182c <RFID+0x2c4>)
 80016b6:	4855      	ldr	r0, [pc, #340]	@ (800180c <RFID+0x2a4>)
 80016b8:	f7fe fea0 	bl	80003fc <CLCD_I2C_Display>
							break;
 80016bc:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 80016be:	797b      	ldrb	r3, [r7, #5]
 80016c0:	2b23      	cmp	r3, #35	@ 0x23
 80016c2:	f040 81fa 	bne.w	8001aba <RFID+0x552>
					{
						buzzer(1);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f002 fafc 	bl	8003cc4 <buzzer>
						exitmenu = 15;
 80016cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001800 <RFID+0x298>)
 80016ce:	220f      	movs	r2, #15
 80016d0:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 80016d2:	7dbb      	ldrb	r3, [r7, #22]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d003      	beq.n	80016e0 <RFID+0x178>
 80016d8:	2b02      	cmp	r3, #2
 80016da:	f000 810a 	beq.w	80018f2 <RFID+0x38a>
 80016de:	e1e9      	b.n	8001ab4 <RFID+0x54c>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80016e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001820 <RFID+0x2b8>)
 80016e2:	4950      	ldr	r1, [pc, #320]	@ (8001824 <RFID+0x2bc>)
 80016e4:	4849      	ldr	r0, [pc, #292]	@ (800180c <RFID+0x2a4>)
 80016e6:	f7fe fe89 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusadd1 = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 80016f2:	e0f4      	b.n	80018de <RFID+0x376>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80016f4:	200a      	movs	r0, #10
 80016f6:	f7fe ffdb 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80016fa:	4603      	mov	r3, r0
 80016fc:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 80016fe:	4b40      	ldr	r3, [pc, #256]	@ (8001800 <RFID+0x298>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d108      	bne.n	8001718 <RFID+0x1b0>
								{
									CLCD_I2C_Clear(&LCD1);
 8001706:	4841      	ldr	r0, [pc, #260]	@ (800180c <RFID+0x2a4>)
 8001708:	f7fe fe68 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800170c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001710:	f002 ffe6 	bl	80046e0 <HAL_Delay>
									return;
 8001714:	f000 be3e 	b.w	8002394 <RFID+0xe2c>
								}
								if (key_pressed =='*')
 8001718:	797b      	ldrb	r3, [r7, #5]
 800171a:	2b2a      	cmp	r3, #42	@ 0x2a
 800171c:	d131      	bne.n	8001782 <RFID+0x21a>
								{
									buzzer(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f002 fad0 	bl	8003cc4 <buzzer>
									exitmenu = 15;
 8001724:	4b36      	ldr	r3, [pc, #216]	@ (8001800 <RFID+0x298>)
 8001726:	220f      	movs	r2, #15
 8001728:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 800172a:	7d3b      	ldrb	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 8001730:	7d3b      	ldrb	r3, [r7, #20]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d801      	bhi.n	800173a <RFID+0x1d2>
 8001736:	7d3b      	ldrb	r3, [r7, #20]
 8001738:	e000      	b.n	800173c <RFID+0x1d4>
 800173a:	2300      	movs	r3, #0
 800173c:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 800173e:	7d3b      	ldrb	r3, [r7, #20]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d012      	beq.n	800176a <RFID+0x202>
 8001744:	2b03      	cmp	r3, #3
 8001746:	dc16      	bgt.n	8001776 <RFID+0x20e>
 8001748:	2b01      	cmp	r3, #1
 800174a:	d002      	beq.n	8001752 <RFID+0x1ea>
 800174c:	2b02      	cmp	r3, #2
 800174e:	d006      	beq.n	800175e <RFID+0x1f6>
 8001750:	e011      	b.n	8001776 <RFID+0x20e>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 8001752:	4a38      	ldr	r2, [pc, #224]	@ (8001834 <RFID+0x2cc>)
 8001754:	4938      	ldr	r1, [pc, #224]	@ (8001838 <RFID+0x2d0>)
 8001756:	482d      	ldr	r0, [pc, #180]	@ (800180c <RFID+0x2a4>)
 8001758:	f7fe fe50 	bl	80003fc <CLCD_I2C_Display>
										break;
 800175c:	e011      	b.n	8001782 <RFID+0x21a>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 800175e:	4a37      	ldr	r2, [pc, #220]	@ (800183c <RFID+0x2d4>)
 8001760:	4935      	ldr	r1, [pc, #212]	@ (8001838 <RFID+0x2d0>)
 8001762:	482a      	ldr	r0, [pc, #168]	@ (800180c <RFID+0x2a4>)
 8001764:	f7fe fe4a 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001768:	e00b      	b.n	8001782 <RFID+0x21a>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 800176a:	4a35      	ldr	r2, [pc, #212]	@ (8001840 <RFID+0x2d8>)
 800176c:	4932      	ldr	r1, [pc, #200]	@ (8001838 <RFID+0x2d0>)
 800176e:	4827      	ldr	r0, [pc, #156]	@ (800180c <RFID+0x2a4>)
 8001770:	f7fe fe44 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001774:	e005      	b.n	8001782 <RFID+0x21a>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Back");
 8001776:	4a29      	ldr	r2, [pc, #164]	@ (800181c <RFID+0x2b4>)
 8001778:	492f      	ldr	r1, [pc, #188]	@ (8001838 <RFID+0x2d0>)
 800177a:	4824      	ldr	r0, [pc, #144]	@ (800180c <RFID+0x2a4>)
 800177c:	f7fe fe3e 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001780:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001782:	797b      	ldrb	r3, [r7, #5]
 8001784:	2b23      	cmp	r3, #35	@ 0x23
 8001786:	f040 80aa 	bne.w	80018de <RFID+0x376>
								{
									buzzer(1);
 800178a:	2001      	movs	r0, #1
 800178c:	f002 fa9a 	bl	8003cc4 <buzzer>
									exitmenu = 15;
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <RFID+0x298>)
 8001792:	220f      	movs	r2, #15
 8001794:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001796:	7dbb      	ldrb	r3, [r7, #22]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	b2da      	uxtb	r2, r3
 800179c:	7d3b      	ldrb	r3, [r7, #20]
 800179e:	4413      	add	r3, r2
 80017a0:	707b      	strb	r3, [r7, #1]
									switch (statusadd1)
 80017a2:	7d3b      	ldrb	r3, [r7, #20]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d074      	beq.n	8001892 <RFID+0x32a>
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	f300 8095 	bgt.w	80018d8 <RFID+0x370>
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d002      	beq.n	80017b8 <RFID+0x250>
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d04a      	beq.n	800184c <RFID+0x2e4>
 80017b6:	e08f      	b.n	80018d8 <RFID+0x370>
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 80017b8:	787b      	ldrb	r3, [r7, #1]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 fcae 	bl	800311c <CheckKey>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d011      	beq.n	80017ea <RFID+0x282>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 1"," Card 1 Existed ");
 80017c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001844 <RFID+0x2dc>)
 80017c8:	491f      	ldr	r1, [pc, #124]	@ (8001848 <RFID+0x2e0>)
 80017ca:	4810      	ldr	r0, [pc, #64]	@ (800180c <RFID+0x2a4>)
 80017cc:	f7fe fe16 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f002 fa77 	bl	8003cc4 <buzzer>
											HAL_Delay(1000);
 80017d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017da:	f002 ff81 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80017de:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <RFID+0x2cc>)
 80017e0:	4915      	ldr	r1, [pc, #84]	@ (8001838 <RFID+0x2d0>)
 80017e2:	480a      	ldr	r0, [pc, #40]	@ (800180c <RFID+0x2a4>)
 80017e4:	f7fe fe0a 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
										}
										break;
 80017e8:	e079      	b.n	80018de <RFID+0x376>
											adduid(keyadd1);
 80017ea:	787b      	ldrb	r3, [r7, #1]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fb67 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80017f2:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <RFID+0x2cc>)
 80017f4:	4910      	ldr	r1, [pc, #64]	@ (8001838 <RFID+0x2d0>)
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <RFID+0x2a4>)
 80017f8:	f7fe fe00 	bl	80003fc <CLCD_I2C_Display>
										break;
 80017fc:	e06f      	b.n	80018de <RFID+0x376>
 80017fe:	bf00      	nop
 8001800:	20000020 	.word	0x20000020
 8001804:	0800dd88 	.word	0x0800dd88
 8001808:	0800dd98 	.word	0x0800dd98
 800180c:	200003d8 	.word	0x200003d8
 8001810:	0800dda8 	.word	0x0800dda8
 8001814:	0800ddb4 	.word	0x0800ddb4
 8001818:	0800ddc4 	.word	0x0800ddc4
 800181c:	0800ddd4 	.word	0x0800ddd4
 8001820:	0800dddc 	.word	0x0800dddc
 8001824:	0800dde8 	.word	0x0800dde8
 8001828:	0800ddf8 	.word	0x0800ddf8
 800182c:	0800de08 	.word	0x0800de08
 8001830:	0800de14 	.word	0x0800de14
 8001834:	0800de24 	.word	0x0800de24
 8001838:	0800de38 	.word	0x0800de38
 800183c:	0800de48 	.word	0x0800de48
 8001840:	0800de5c 	.word	0x0800de5c
 8001844:	0800de70 	.word	0x0800de70
 8001848:	0800de84 	.word	0x0800de84
									case 2:
										if (CheckKey(keyadd1) != 0)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fc64 	bl	800311c <CheckKey>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d011      	beq.n	800187e <RFID+0x316>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 2"," Card 2 Existed ");
 800185a:	4aac      	ldr	r2, [pc, #688]	@ (8001b0c <RFID+0x5a4>)
 800185c:	49ac      	ldr	r1, [pc, #688]	@ (8001b10 <RFID+0x5a8>)
 800185e:	48ad      	ldr	r0, [pc, #692]	@ (8001b14 <RFID+0x5ac>)
 8001860:	f7fe fdcc 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8001864:	2003      	movs	r0, #3
 8001866:	f002 fa2d 	bl	8003cc4 <buzzer>
											HAL_Delay(1000);
 800186a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800186e:	f002 ff37 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 8001872:	4aa9      	ldr	r2, [pc, #676]	@ (8001b18 <RFID+0x5b0>)
 8001874:	49a9      	ldr	r1, [pc, #676]	@ (8001b1c <RFID+0x5b4>)
 8001876:	48a7      	ldr	r0, [pc, #668]	@ (8001b14 <RFID+0x5ac>)
 8001878:	f7fe fdc0 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
										}
										break;
 800187c:	e02f      	b.n	80018de <RFID+0x376>
											adduid(keyadd1);
 800187e:	787b      	ldrb	r3, [r7, #1]
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fb1d 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 8001886:	4aa4      	ldr	r2, [pc, #656]	@ (8001b18 <RFID+0x5b0>)
 8001888:	49a4      	ldr	r1, [pc, #656]	@ (8001b1c <RFID+0x5b4>)
 800188a:	48a2      	ldr	r0, [pc, #648]	@ (8001b14 <RFID+0x5ac>)
 800188c:	f7fe fdb6 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001890:	e025      	b.n	80018de <RFID+0x376>
									case 3:
										if (CheckKey(keyadd1) != 0)
 8001892:	787b      	ldrb	r3, [r7, #1]
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fc41 	bl	800311c <CheckKey>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d011      	beq.n	80018c4 <RFID+0x35c>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 3"," Card 3 Existed ");
 80018a0:	4a9f      	ldr	r2, [pc, #636]	@ (8001b20 <RFID+0x5b8>)
 80018a2:	49a0      	ldr	r1, [pc, #640]	@ (8001b24 <RFID+0x5bc>)
 80018a4:	489b      	ldr	r0, [pc, #620]	@ (8001b14 <RFID+0x5ac>)
 80018a6:	f7fe fda9 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80018aa:	2003      	movs	r0, #3
 80018ac:	f002 fa0a 	bl	8003cc4 <buzzer>
											HAL_Delay(1000);
 80018b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018b4:	f002 ff14 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80018b8:	4a9b      	ldr	r2, [pc, #620]	@ (8001b28 <RFID+0x5c0>)
 80018ba:	4998      	ldr	r1, [pc, #608]	@ (8001b1c <RFID+0x5b4>)
 80018bc:	4895      	ldr	r0, [pc, #596]	@ (8001b14 <RFID+0x5ac>)
 80018be:	f7fe fd9d 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
										}
										break;
 80018c2:	e00c      	b.n	80018de <RFID+0x376>
											adduid(keyadd1);
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 fafa 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80018cc:	4a96      	ldr	r2, [pc, #600]	@ (8001b28 <RFID+0x5c0>)
 80018ce:	4993      	ldr	r1, [pc, #588]	@ (8001b1c <RFID+0x5b4>)
 80018d0:	4890      	ldr	r0, [pc, #576]	@ (8001b14 <RFID+0x5ac>)
 80018d2:	f7fe fd93 	bl	80003fc <CLCD_I2C_Display>
										break;
 80018d6:	e002      	b.n	80018de <RFID+0x376>
									default:
										back11 = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	74fb      	strb	r3, [r7, #19]
										break;
 80018dc:	bf00      	nop
							while (back11 == 1)
 80018de:	7cfb      	ldrb	r3, [r7, #19]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	f43f af07 	beq.w	80016f4 <RFID+0x18c>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80018e6:	4a91      	ldr	r2, [pc, #580]	@ (8001b2c <RFID+0x5c4>)
 80018e8:	4991      	ldr	r1, [pc, #580]	@ (8001b30 <RFID+0x5c8>)
 80018ea:	488a      	ldr	r0, [pc, #552]	@ (8001b14 <RFID+0x5ac>)
 80018ec:	f7fe fd86 	bl	80003fc <CLCD_I2C_Display>
							break;
 80018f0:	e0e3      	b.n	8001aba <RFID+0x552>
						case 2:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80018f2:	4a90      	ldr	r2, [pc, #576]	@ (8001b34 <RFID+0x5cc>)
 80018f4:	4990      	ldr	r1, [pc, #576]	@ (8001b38 <RFID+0x5d0>)
 80018f6:	4887      	ldr	r0, [pc, #540]	@ (8001b14 <RFID+0x5ac>)
 80018f8:	f7fe fd80 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusadd2 = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 8001900:	2301      	movs	r3, #1
 8001902:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 8001904:	e0cc      	b.n	8001aa0 <RFID+0x538>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001906:	200a      	movs	r0, #10
 8001908:	f7fe fed2 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800190c:	4603      	mov	r3, r0
 800190e:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001910:	4b8a      	ldr	r3, [pc, #552]	@ (8001b3c <RFID+0x5d4>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d108      	bne.n	800192a <RFID+0x3c2>
								{
									CLCD_I2C_Clear(&LCD1);
 8001918:	487e      	ldr	r0, [pc, #504]	@ (8001b14 <RFID+0x5ac>)
 800191a:	f7fe fd5f 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800191e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001922:	f002 fedd 	bl	80046e0 <HAL_Delay>
									return;
 8001926:	f000 bd35 	b.w	8002394 <RFID+0xe2c>
								}
								if (key_pressed =='*')
 800192a:	797b      	ldrb	r3, [r7, #5]
 800192c:	2b2a      	cmp	r3, #42	@ 0x2a
 800192e:	d131      	bne.n	8001994 <RFID+0x42c>
								{
									buzzer(1);
 8001930:	2001      	movs	r0, #1
 8001932:	f002 f9c7 	bl	8003cc4 <buzzer>
									exitmenu = 15;
 8001936:	4b81      	ldr	r3, [pc, #516]	@ (8001b3c <RFID+0x5d4>)
 8001938:	220f      	movs	r2, #15
 800193a:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 800193c:	7cbb      	ldrb	r3, [r7, #18]
 800193e:	3301      	adds	r3, #1
 8001940:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001942:	7cbb      	ldrb	r3, [r7, #18]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d801      	bhi.n	800194c <RFID+0x3e4>
 8001948:	7cbb      	ldrb	r3, [r7, #18]
 800194a:	e000      	b.n	800194e <RFID+0x3e6>
 800194c:	2300      	movs	r3, #0
 800194e:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 8001950:	7cbb      	ldrb	r3, [r7, #18]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d012      	beq.n	800197c <RFID+0x414>
 8001956:	2b03      	cmp	r3, #3
 8001958:	dc16      	bgt.n	8001988 <RFID+0x420>
 800195a:	2b01      	cmp	r3, #1
 800195c:	d002      	beq.n	8001964 <RFID+0x3fc>
 800195e:	2b02      	cmp	r3, #2
 8001960:	d006      	beq.n	8001970 <RFID+0x408>
 8001962:	e011      	b.n	8001988 <RFID+0x420>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 8001964:	4a76      	ldr	r2, [pc, #472]	@ (8001b40 <RFID+0x5d8>)
 8001966:	4977      	ldr	r1, [pc, #476]	@ (8001b44 <RFID+0x5dc>)
 8001968:	486a      	ldr	r0, [pc, #424]	@ (8001b14 <RFID+0x5ac>)
 800196a:	f7fe fd47 	bl	80003fc <CLCD_I2C_Display>
										break;
 800196e:	e011      	b.n	8001994 <RFID+0x42c>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001970:	4a75      	ldr	r2, [pc, #468]	@ (8001b48 <RFID+0x5e0>)
 8001972:	4974      	ldr	r1, [pc, #464]	@ (8001b44 <RFID+0x5dc>)
 8001974:	4867      	ldr	r0, [pc, #412]	@ (8001b14 <RFID+0x5ac>)
 8001976:	f7fe fd41 	bl	80003fc <CLCD_I2C_Display>
										break;
 800197a:	e00b      	b.n	8001994 <RFID+0x42c>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 800197c:	4a73      	ldr	r2, [pc, #460]	@ (8001b4c <RFID+0x5e4>)
 800197e:	4971      	ldr	r1, [pc, #452]	@ (8001b44 <RFID+0x5dc>)
 8001980:	4864      	ldr	r0, [pc, #400]	@ (8001b14 <RFID+0x5ac>)
 8001982:	f7fe fd3b 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001986:	e005      	b.n	8001994 <RFID+0x42c>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> Back");
 8001988:	4a71      	ldr	r2, [pc, #452]	@ (8001b50 <RFID+0x5e8>)
 800198a:	496e      	ldr	r1, [pc, #440]	@ (8001b44 <RFID+0x5dc>)
 800198c:	4861      	ldr	r0, [pc, #388]	@ (8001b14 <RFID+0x5ac>)
 800198e:	f7fe fd35 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001992:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001994:	797b      	ldrb	r3, [r7, #5]
 8001996:	2b23      	cmp	r3, #35	@ 0x23
 8001998:	f040 8082 	bne.w	8001aa0 <RFID+0x538>
								{
									buzzer(1);
 800199c:	2001      	movs	r0, #1
 800199e:	f002 f991 	bl	8003cc4 <buzzer>
									exitmenu = 15;
 80019a2:	4b66      	ldr	r3, [pc, #408]	@ (8001b3c <RFID+0x5d4>)
 80019a4:	220f      	movs	r2, #15
 80019a6:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 80019a8:	7dbb      	ldrb	r3, [r7, #22]
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	7cbb      	ldrb	r3, [r7, #18]
 80019b0:	4413      	add	r3, r2
 80019b2:	70bb      	strb	r3, [r7, #2]
									switch (statusadd2)
 80019b4:	7cbb      	ldrb	r3, [r7, #18]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d04c      	beq.n	8001a54 <RFID+0x4ec>
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	dc6d      	bgt.n	8001a9a <RFID+0x532>
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d002      	beq.n	80019c8 <RFID+0x460>
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d023      	beq.n	8001a0e <RFID+0x4a6>
 80019c6:	e068      	b.n	8001a9a <RFID+0x532>
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 80019c8:	78bb      	ldrb	r3, [r7, #2]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 fba6 	bl	800311c <CheckKey>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d011      	beq.n	80019fa <RFID+0x492>
										{
											CLCD_I2C_Display(&LCD1,"     USER 1"," Card 1 Existed ");
 80019d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001b54 <RFID+0x5ec>)
 80019d8:	495f      	ldr	r1, [pc, #380]	@ (8001b58 <RFID+0x5f0>)
 80019da:	484e      	ldr	r0, [pc, #312]	@ (8001b14 <RFID+0x5ac>)
 80019dc:	f7fe fd0e 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f002 f96f 	bl	8003cc4 <buzzer>
											HAL_Delay(1000);
 80019e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ea:	f002 fe79 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80019ee:	4a54      	ldr	r2, [pc, #336]	@ (8001b40 <RFID+0x5d8>)
 80019f0:	4954      	ldr	r1, [pc, #336]	@ (8001b44 <RFID+0x5dc>)
 80019f2:	4848      	ldr	r0, [pc, #288]	@ (8001b14 <RFID+0x5ac>)
 80019f4:	f7fe fd02 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
										}
										break;
 80019f8:	e052      	b.n	8001aa0 <RFID+0x538>
											adduid(keyadd2);
 80019fa:	78bb      	ldrb	r3, [r7, #2]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 fa5f 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 8001a02:	4a4f      	ldr	r2, [pc, #316]	@ (8001b40 <RFID+0x5d8>)
 8001a04:	494f      	ldr	r1, [pc, #316]	@ (8001b44 <RFID+0x5dc>)
 8001a06:	4843      	ldr	r0, [pc, #268]	@ (8001b14 <RFID+0x5ac>)
 8001a08:	f7fe fcf8 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a0c:	e048      	b.n	8001aa0 <RFID+0x538>
									case 2:
										if (CheckKey(keyadd2) != 0)
 8001a0e:	78bb      	ldrb	r3, [r7, #2]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fb83 	bl	800311c <CheckKey>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d011      	beq.n	8001a40 <RFID+0x4d8>
										{
											CLCD_I2C_Display(&LCD1,"     USER 2"," Card 2 Existed ");
 8001a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b0c <RFID+0x5a4>)
 8001a1e:	494f      	ldr	r1, [pc, #316]	@ (8001b5c <RFID+0x5f4>)
 8001a20:	483c      	ldr	r0, [pc, #240]	@ (8001b14 <RFID+0x5ac>)
 8001a22:	f7fe fceb 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8001a26:	2003      	movs	r0, #3
 8001a28:	f002 f94c 	bl	8003cc4 <buzzer>
											HAL_Delay(1000);
 8001a2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a30:	f002 fe56 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001a34:	4a44      	ldr	r2, [pc, #272]	@ (8001b48 <RFID+0x5e0>)
 8001a36:	4943      	ldr	r1, [pc, #268]	@ (8001b44 <RFID+0x5dc>)
 8001a38:	4836      	ldr	r0, [pc, #216]	@ (8001b14 <RFID+0x5ac>)
 8001a3a:	f7fe fcdf 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
										}
										break;
 8001a3e:	e02f      	b.n	8001aa0 <RFID+0x538>
											adduid(keyadd2);
 8001a40:	78bb      	ldrb	r3, [r7, #2]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 fa3c 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001a48:	4a3f      	ldr	r2, [pc, #252]	@ (8001b48 <RFID+0x5e0>)
 8001a4a:	493e      	ldr	r1, [pc, #248]	@ (8001b44 <RFID+0x5dc>)
 8001a4c:	4831      	ldr	r0, [pc, #196]	@ (8001b14 <RFID+0x5ac>)
 8001a4e:	f7fe fcd5 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a52:	e025      	b.n	8001aa0 <RFID+0x538>
									case 3:
										if (CheckKey(keyadd2) != 0)
 8001a54:	78bb      	ldrb	r3, [r7, #2]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 fb60 	bl	800311c <CheckKey>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d011      	beq.n	8001a86 <RFID+0x51e>
										{
											CLCD_I2C_Display(&LCD1,"     USER 3"," Card 3 Existed ");
 8001a62:	4a2f      	ldr	r2, [pc, #188]	@ (8001b20 <RFID+0x5b8>)
 8001a64:	493e      	ldr	r1, [pc, #248]	@ (8001b60 <RFID+0x5f8>)
 8001a66:	482b      	ldr	r0, [pc, #172]	@ (8001b14 <RFID+0x5ac>)
 8001a68:	f7fe fcc8 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f002 f929 	bl	8003cc4 <buzzer>
											HAL_Delay(1000);
 8001a72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a76:	f002 fe33 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001a7a:	4a34      	ldr	r2, [pc, #208]	@ (8001b4c <RFID+0x5e4>)
 8001a7c:	4931      	ldr	r1, [pc, #196]	@ (8001b44 <RFID+0x5dc>)
 8001a7e:	4825      	ldr	r0, [pc, #148]	@ (8001b14 <RFID+0x5ac>)
 8001a80:	f7fe fcbc 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
										}
										break;
 8001a84:	e00c      	b.n	8001aa0 <RFID+0x538>
											adduid(keyadd2);
 8001a86:	78bb      	ldrb	r3, [r7, #2]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fa19 	bl	8002ec0 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001b4c <RFID+0x5e4>)
 8001a90:	492c      	ldr	r1, [pc, #176]	@ (8001b44 <RFID+0x5dc>)
 8001a92:	4820      	ldr	r0, [pc, #128]	@ (8001b14 <RFID+0x5ac>)
 8001a94:	f7fe fcb2 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001a98:	e002      	b.n	8001aa0 <RFID+0x538>
									default:
										back12 = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	747b      	strb	r3, [r7, #17]
										break;
 8001a9e:	bf00      	nop
							while (back12 == 1)
 8001aa0:	7c7b      	ldrb	r3, [r7, #17]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	f43f af2f 	beq.w	8001906 <RFID+0x39e>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b64 <RFID+0x5fc>)
 8001aaa:	4921      	ldr	r1, [pc, #132]	@ (8001b30 <RFID+0x5c8>)
 8001aac:	4819      	ldr	r0, [pc, #100]	@ (8001b14 <RFID+0x5ac>)
 8001aae:	f7fe fca5 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001ab2:	e002      	b.n	8001aba <RFID+0x552>
						default:
							back = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	757b      	strb	r3, [r7, #21]
							break;
 8001ab8:	bf00      	nop
				while (back == 1)
 8001aba:	7d7b      	ldrb	r3, [r7, #21]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	f43f adc1 	beq.w	8001644 <RFID+0xdc>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 8001ac2:	4a29      	ldr	r2, [pc, #164]	@ (8001b68 <RFID+0x600>)
 8001ac4:	4929      	ldr	r1, [pc, #164]	@ (8001b6c <RFID+0x604>)
 8001ac6:	4813      	ldr	r0, [pc, #76]	@ (8001b14 <RFID+0x5ac>)
 8001ac8:	f7fe fc98 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001acc:	f000 bc5a 	b.w	8002384 <RFID+0xe1c>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001ad0:	4a18      	ldr	r2, [pc, #96]	@ (8001b34 <RFID+0x5cc>)
 8001ad2:	4919      	ldr	r1, [pc, #100]	@ (8001b38 <RFID+0x5d0>)
 8001ad4:	480f      	ldr	r0, [pc, #60]	@ (8001b14 <RFID+0x5ac>)
 8001ad6:	f7fe fc91 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 8001ada:	23ff      	movs	r3, #255	@ 0xff
 8001adc:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 8001ae2:	f000 bc39 	b.w	8002358 <RFID+0xdf0>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f7fe fde2 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001aec:	4603      	mov	r3, r0
 8001aee:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 8001af0:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <RFID+0x5d4>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d13b      	bne.n	8001b70 <RFID+0x608>
					{
						CLCD_I2C_Clear(&LCD1);
 8001af8:	4806      	ldr	r0, [pc, #24]	@ (8001b14 <RFID+0x5ac>)
 8001afa:	f7fe fc6f 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8001afe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b02:	f002 fded 	bl	80046e0 <HAL_Delay>
						return;
 8001b06:	f000 bc45 	b.w	8002394 <RFID+0xe2c>
 8001b0a:	bf00      	nop
 8001b0c:	0800de90 	.word	0x0800de90
 8001b10:	0800dea4 	.word	0x0800dea4
 8001b14:	200003d8 	.word	0x200003d8
 8001b18:	0800de48 	.word	0x0800de48
 8001b1c:	0800de38 	.word	0x0800de38
 8001b20:	0800deb0 	.word	0x0800deb0
 8001b24:	0800dec4 	.word	0x0800dec4
 8001b28:	0800de5c 	.word	0x0800de5c
 8001b2c:	0800ddf8 	.word	0x0800ddf8
 8001b30:	0800de08 	.word	0x0800de08
 8001b34:	0800dddc 	.word	0x0800dddc
 8001b38:	0800dde8 	.word	0x0800dde8
 8001b3c:	20000020 	.word	0x20000020
 8001b40:	0800ded0 	.word	0x0800ded0
 8001b44:	0800dee0 	.word	0x0800dee0
 8001b48:	0800def0 	.word	0x0800def0
 8001b4c:	0800df00 	.word	0x0800df00
 8001b50:	0800ddd4 	.word	0x0800ddd4
 8001b54:	0800de70 	.word	0x0800de70
 8001b58:	0800df10 	.word	0x0800df10
 8001b5c:	0800df1c 	.word	0x0800df1c
 8001b60:	0800df28 	.word	0x0800df28
 8001b64:	0800de14 	.word	0x0800de14
 8001b68:	0800dda8 	.word	0x0800dda8
 8001b6c:	0800dd98 	.word	0x0800dd98
					}
					if (key_pressed =='*')
 8001b70:	797b      	ldrb	r3, [r7, #5]
 8001b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b74:	d127      	bne.n	8001bc6 <RFID+0x65e>
					{
						buzzer(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f002 f8a4 	bl	8003cc4 <buzzer>
						exitmenu = 15;
 8001b7c:	4b95      	ldr	r3, [pc, #596]	@ (8001dd4 <RFID+0x86c>)
 8001b7e:	220f      	movs	r2, #15
 8001b80:	701a      	strb	r2, [r3, #0]
						statusremove++;
 8001b82:	7c3b      	ldrb	r3, [r7, #16]
 8001b84:	3301      	adds	r3, #1
 8001b86:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 8001b88:	7c3b      	ldrb	r3, [r7, #16]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d801      	bhi.n	8001b92 <RFID+0x62a>
 8001b8e:	7c3b      	ldrb	r3, [r7, #16]
 8001b90:	e000      	b.n	8001b94 <RFID+0x62c>
 8001b92:	2300      	movs	r3, #0
 8001b94:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 8001b96:	7c3b      	ldrb	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <RFID+0x63a>
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d006      	beq.n	8001bae <RFID+0x646>
 8001ba0:	e00b      	b.n	8001bba <RFID+0x652>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001ba2:	4a8d      	ldr	r2, [pc, #564]	@ (8001dd8 <RFID+0x870>)
 8001ba4:	498d      	ldr	r1, [pc, #564]	@ (8001ddc <RFID+0x874>)
 8001ba6:	488e      	ldr	r0, [pc, #568]	@ (8001de0 <RFID+0x878>)
 8001ba8:	f7fe fc28 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001bac:	e00b      	b.n	8001bc6 <RFID+0x65e>
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 8001bae:	4a8d      	ldr	r2, [pc, #564]	@ (8001de4 <RFID+0x87c>)
 8001bb0:	498a      	ldr	r1, [pc, #552]	@ (8001ddc <RFID+0x874>)
 8001bb2:	488b      	ldr	r0, [pc, #556]	@ (8001de0 <RFID+0x878>)
 8001bb4:	f7fe fc22 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001bb8:	e005      	b.n	8001bc6 <RFID+0x65e>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 8001bba:	4a8b      	ldr	r2, [pc, #556]	@ (8001de8 <RFID+0x880>)
 8001bbc:	4987      	ldr	r1, [pc, #540]	@ (8001ddc <RFID+0x874>)
 8001bbe:	4888      	ldr	r0, [pc, #544]	@ (8001de0 <RFID+0x878>)
 8001bc0:	f7fe fc1c 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001bc4:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001bc6:	797b      	ldrb	r3, [r7, #5]
 8001bc8:	2b23      	cmp	r3, #35	@ 0x23
 8001bca:	f040 83c5 	bne.w	8002358 <RFID+0xdf0>
					{
						buzzer(1);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f002 f878 	bl	8003cc4 <buzzer>
						CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001bd4:	4a85      	ldr	r2, [pc, #532]	@ (8001dec <RFID+0x884>)
 8001bd6:	4986      	ldr	r1, [pc, #536]	@ (8001df0 <RFID+0x888>)
 8001bd8:	4881      	ldr	r0, [pc, #516]	@ (8001de0 <RFID+0x878>)
 8001bda:	f7fe fc0f 	bl	80003fc <CLCD_I2C_Display>
						exitmenu = 15;
 8001bde:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd4 <RFID+0x86c>)
 8001be0:	220f      	movs	r2, #15
 8001be2:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001be4:	7c3b      	ldrb	r3, [r7, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <RFID+0x68a>
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	f000 83a9 	beq.w	8002342 <RFID+0xdda>
 8001bf0:	e3af      	b.n	8002352 <RFID+0xdea>
						{
						case 0:
							uint8_t statusrm1 = -1;
 8001bf2:	23ff      	movs	r3, #255	@ 0xff
 8001bf4:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8001bfa:	e398      	b.n	800232e <RFID+0xdc6>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001bfc:	200a      	movs	r0, #10
 8001bfe:	f7fe fd57 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001c02:	4603      	mov	r3, r0
 8001c04:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001c06:	4b73      	ldr	r3, [pc, #460]	@ (8001dd4 <RFID+0x86c>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d107      	bne.n	8001c1e <RFID+0x6b6>
								{
									CLCD_I2C_Clear(&LCD1);
 8001c0e:	4874      	ldr	r0, [pc, #464]	@ (8001de0 <RFID+0x878>)
 8001c10:	f7fe fbe4 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8001c14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c18:	f002 fd62 	bl	80046e0 <HAL_Delay>
									return;
 8001c1c:	e3ba      	b.n	8002394 <RFID+0xe2c>
								}
								if (key_pressed =='*')
 8001c1e:	797b      	ldrb	r3, [r7, #5]
 8001c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c22:	d124      	bne.n	8001c6e <RFID+0x706>
								{
									buzzer(1);
 8001c24:	2001      	movs	r0, #1
 8001c26:	f002 f84d 	bl	8003cc4 <buzzer>
									statusrm1++;
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001c30:	7bbb      	ldrb	r3, [r7, #14]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d801      	bhi.n	8001c3a <RFID+0x6d2>
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	e000      	b.n	8001c3c <RFID+0x6d4>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <RFID+0x6e2>
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d006      	beq.n	8001c56 <RFID+0x6ee>
 8001c48:	e00b      	b.n	8001c62 <RFID+0x6fa>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001c4a:	4a6a      	ldr	r2, [pc, #424]	@ (8001df4 <RFID+0x88c>)
 8001c4c:	496a      	ldr	r1, [pc, #424]	@ (8001df8 <RFID+0x890>)
 8001c4e:	4864      	ldr	r0, [pc, #400]	@ (8001de0 <RFID+0x878>)
 8001c50:	f7fe fbd4 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001c54:	e00b      	b.n	8001c6e <RFID+0x706>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001c56:	4a69      	ldr	r2, [pc, #420]	@ (8001dfc <RFID+0x894>)
 8001c58:	4967      	ldr	r1, [pc, #412]	@ (8001df8 <RFID+0x890>)
 8001c5a:	4861      	ldr	r0, [pc, #388]	@ (8001de0 <RFID+0x878>)
 8001c5c:	f7fe fbce 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001c60:	e005      	b.n	8001c6e <RFID+0x706>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 8001c62:	4a61      	ldr	r2, [pc, #388]	@ (8001de8 <RFID+0x880>)
 8001c64:	4964      	ldr	r1, [pc, #400]	@ (8001df8 <RFID+0x890>)
 8001c66:	485e      	ldr	r0, [pc, #376]	@ (8001de0 <RFID+0x878>)
 8001c68:	f7fe fbc8 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001c6c:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001c6e:	797b      	ldrb	r3, [r7, #5]
 8001c70:	2b23      	cmp	r3, #35	@ 0x23
 8001c72:	f040 835c 	bne.w	800232e <RFID+0xdc6>
								{
									buzzer(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f002 f824 	bl	8003cc4 <buzzer>
									exitmenu = 15;
 8001c7c:	4b55      	ldr	r3, [pc, #340]	@ (8001dd4 <RFID+0x86c>)
 8001c7e:	220f      	movs	r2, #15
 8001c80:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001c82:	7bbb      	ldrb	r3, [r7, #14]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <RFID+0x728>
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	f000 82eb 	beq.w	8002264 <RFID+0xcfc>
 8001c8e:	e34b      	b.n	8002328 <RFID+0xdc0>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001c90:	4a56      	ldr	r2, [pc, #344]	@ (8001dec <RFID+0x884>)
 8001c92:	4957      	ldr	r1, [pc, #348]	@ (8001df0 <RFID+0x888>)
 8001c94:	4852      	ldr	r0, [pc, #328]	@ (8001de0 <RFID+0x878>)
 8001c96:	f7fe fbb1 	bl	80003fc <CLCD_I2C_Display>
										uint8_t statusadd = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8001ca2:	e2d5      	b.n	8002250 <RFID+0xce8>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f7fe fd03 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001caa:	4603      	mov	r3, r0
 8001cac:	717b      	strb	r3, [r7, #5]
											if (exitmenu == 0)
 8001cae:	4b49      	ldr	r3, [pc, #292]	@ (8001dd4 <RFID+0x86c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d107      	bne.n	8001cc6 <RFID+0x75e>
											{
												CLCD_I2C_Clear(&LCD1);
 8001cb6:	484a      	ldr	r0, [pc, #296]	@ (8001de0 <RFID+0x878>)
 8001cb8:	f7fe fb90 	bl	80003dc <CLCD_I2C_Clear>
												HAL_Delay(1000);
 8001cbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cc0:	f002 fd0e 	bl	80046e0 <HAL_Delay>
												return;
 8001cc4:	e366      	b.n	8002394 <RFID+0xe2c>
											}
											if (key_pressed =='*')
 8001cc6:	797b      	ldrb	r3, [r7, #5]
 8001cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cca:	d127      	bne.n	8001d1c <RFID+0x7b4>
											{
												buzzer(1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f001 fff9 	bl	8003cc4 <buzzer>
												exitmenu = 15;
 8001cd2:	4b40      	ldr	r3, [pc, #256]	@ (8001dd4 <RFID+0x86c>)
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001cd8:	7b3b      	ldrb	r3, [r7, #12]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001cde:	7b3b      	ldrb	r3, [r7, #12]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d801      	bhi.n	8001ce8 <RFID+0x780>
 8001ce4:	7b3b      	ldrb	r3, [r7, #12]
 8001ce6:	e000      	b.n	8001cea <RFID+0x782>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001cec:	7b3b      	ldrb	r3, [r7, #12]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d002      	beq.n	8001cf8 <RFID+0x790>
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d006      	beq.n	8001d04 <RFID+0x79c>
 8001cf6:	e00b      	b.n	8001d10 <RFID+0x7a8>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001cf8:	4a41      	ldr	r2, [pc, #260]	@ (8001e00 <RFID+0x898>)
 8001cfa:	4942      	ldr	r1, [pc, #264]	@ (8001e04 <RFID+0x89c>)
 8001cfc:	4838      	ldr	r0, [pc, #224]	@ (8001de0 <RFID+0x878>)
 8001cfe:	f7fe fb7d 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001d02:	e00b      	b.n	8001d1c <RFID+0x7b4>
												case 2:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001d04:	4a40      	ldr	r2, [pc, #256]	@ (8001e08 <RFID+0x8a0>)
 8001d06:	493f      	ldr	r1, [pc, #252]	@ (8001e04 <RFID+0x89c>)
 8001d08:	4835      	ldr	r0, [pc, #212]	@ (8001de0 <RFID+0x878>)
 8001d0a:	f7fe fb77 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001d0e:	e005      	b.n	8001d1c <RFID+0x7b4>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");													break;
 8001d10:	4a35      	ldr	r2, [pc, #212]	@ (8001de8 <RFID+0x880>)
 8001d12:	493c      	ldr	r1, [pc, #240]	@ (8001e04 <RFID+0x89c>)
 8001d14:	4832      	ldr	r0, [pc, #200]	@ (8001de0 <RFID+0x878>)
 8001d16:	f7fe fb71 	bl	80003fc <CLCD_I2C_Display>
 8001d1a:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 8001d1c:	797b      	ldrb	r3, [r7, #5]
 8001d1e:	2b23      	cmp	r3, #35	@ 0x23
 8001d20:	f040 8296 	bne.w	8002250 <RFID+0xce8>
											{
												buzzer(1);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f001 ffcd 	bl	8003cc4 <buzzer>
												exitmenu = 15;
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <RFID+0x86c>)
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001d30:	7b3b      	ldrb	r3, [r7, #12]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d003      	beq.n	8001d3e <RFID+0x7d6>
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	f000 814f 	beq.w	8001fda <RFID+0xa72>
 8001d3c:	e285      	b.n	800224a <RFID+0xce2>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8001dec <RFID+0x884>)
 8001d40:	492b      	ldr	r1, [pc, #172]	@ (8001df0 <RFID+0x888>)
 8001d42:	4827      	ldr	r0, [pc, #156]	@ (8001de0 <RFID+0x878>)
 8001d44:	f7fe fb5a 	bl	80003fc <CLCD_I2C_Display>
													uint8_t statusadd1 = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 8001d50:	e139      	b.n	8001fc6 <RFID+0xa5e>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001d52:	200a      	movs	r0, #10
 8001d54:	f7fe fcac 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <RFID+0x86c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <RFID+0x80c>
														{
															CLCD_I2C_Clear(&LCD1);
 8001d64:	481e      	ldr	r0, [pc, #120]	@ (8001de0 <RFID+0x878>)
 8001d66:	f7fe fb39 	bl	80003dc <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001d6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d6e:	f002 fcb7 	bl	80046e0 <HAL_Delay>
															return;
 8001d72:	e30f      	b.n	8002394 <RFID+0xe2c>
														}
														if (key_pressed =='*')
 8001d74:	797b      	ldrb	r3, [r7, #5]
 8001d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d78:	d156      	bne.n	8001e28 <RFID+0x8c0>
														{
															buzzer(1);
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f001 ffa2 	bl	8003cc4 <buzzer>
															exitmenu = 15;
 8001d80:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <RFID+0x86c>)
 8001d82:	220f      	movs	r2, #15
 8001d84:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001d86:	7abb      	ldrb	r3, [r7, #10]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 8001d8c:	7abb      	ldrb	r3, [r7, #10]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d801      	bhi.n	8001d96 <RFID+0x82e>
 8001d92:	7abb      	ldrb	r3, [r7, #10]
 8001d94:	e000      	b.n	8001d98 <RFID+0x830>
 8001d96:	2300      	movs	r3, #0
 8001d98:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001d9a:	7abb      	ldrb	r3, [r7, #10]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d012      	beq.n	8001dc6 <RFID+0x85e>
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	dc3b      	bgt.n	8001e1c <RFID+0x8b4>
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d002      	beq.n	8001dae <RFID+0x846>
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d006      	beq.n	8001dba <RFID+0x852>
 8001dac:	e036      	b.n	8001e1c <RFID+0x8b4>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001dae:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <RFID+0x8a4>)
 8001db0:	4917      	ldr	r1, [pc, #92]	@ (8001e10 <RFID+0x8a8>)
 8001db2:	480b      	ldr	r0, [pc, #44]	@ (8001de0 <RFID+0x878>)
 8001db4:	f7fe fb22 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001db8:	e036      	b.n	8001e28 <RFID+0x8c0>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001dba:	4a16      	ldr	r2, [pc, #88]	@ (8001e14 <RFID+0x8ac>)
 8001dbc:	4914      	ldr	r1, [pc, #80]	@ (8001e10 <RFID+0x8a8>)
 8001dbe:	4808      	ldr	r0, [pc, #32]	@ (8001de0 <RFID+0x878>)
 8001dc0:	f7fe fb1c 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001dc4:	e030      	b.n	8001e28 <RFID+0x8c0>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001dc6:	4a14      	ldr	r2, [pc, #80]	@ (8001e18 <RFID+0x8b0>)
 8001dc8:	4911      	ldr	r1, [pc, #68]	@ (8001e10 <RFID+0x8a8>)
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <RFID+0x878>)
 8001dcc:	f7fe fb16 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001dd0:	e02a      	b.n	8001e28 <RFID+0x8c0>
 8001dd2:	bf00      	nop
 8001dd4:	20000020 	.word	0x20000020
 8001dd8:	0800df34 	.word	0x0800df34
 8001ddc:	0800df48 	.word	0x0800df48
 8001de0:	200003d8 	.word	0x200003d8
 8001de4:	0800df58 	.word	0x0800df58
 8001de8:	0800ddd4 	.word	0x0800ddd4
 8001dec:	0800dddc 	.word	0x0800dddc
 8001df0:	0800dde8 	.word	0x0800dde8
 8001df4:	0800df68 	.word	0x0800df68
 8001df8:	0800df78 	.word	0x0800df78
 8001dfc:	0800df88 	.word	0x0800df88
 8001e00:	0800df98 	.word	0x0800df98
 8001e04:	0800dfac 	.word	0x0800dfac
 8001e08:	0800dfbc 	.word	0x0800dfbc
 8001e0c:	0800dfcc 	.word	0x0800dfcc
 8001e10:	0800dfdc 	.word	0x0800dfdc
 8001e14:	0800dfec 	.word	0x0800dfec
 8001e18:	0800dffc 	.word	0x0800dffc
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> Back");
 8001e1c:	4aa5      	ldr	r2, [pc, #660]	@ (80020b4 <RFID+0xb4c>)
 8001e1e:	49a6      	ldr	r1, [pc, #664]	@ (80020b8 <RFID+0xb50>)
 8001e20:	48a6      	ldr	r0, [pc, #664]	@ (80020bc <RFID+0xb54>)
 8001e22:	f7fe faeb 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001e26:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001e28:	797b      	ldrb	r3, [r7, #5]
 8001e2a:	2b23      	cmp	r3, #35	@ 0x23
 8001e2c:	f040 80cb 	bne.w	8001fc6 <RFID+0xa5e>
														{
															buzzer(1);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f001 ff47 	bl	8003cc4 <buzzer>
															exitmenu = 15;
 8001e36:	4ba2      	ldr	r3, [pc, #648]	@ (80020c0 <RFID+0xb58>)
 8001e38:	220f      	movs	r2, #15
 8001e3a:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001e3c:	7b3b      	ldrb	r3, [r7, #12]
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	7abb      	ldrb	r3, [r7, #10]
 8001e44:	4413      	add	r3, r2
 8001e46:	70fb      	strb	r3, [r7, #3]
															switch (statusadd1)
 8001e48:	7abb      	ldrb	r3, [r7, #10]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d07d      	beq.n	8001f4a <RFID+0x9e2>
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	f300 80b6 	bgt.w	8001fc0 <RFID+0xa58>
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d002      	beq.n	8001e5e <RFID+0x8f6>
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d03b      	beq.n	8001ed4 <RFID+0x96c>
 8001e5c:	e0b0      	b.n	8001fc0 <RFID+0xa58>
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 f95b 	bl	800311c <CheckKey>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <RFID+0x928>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 1", "  Do Not Exist");
 8001e6c:	4a95      	ldr	r2, [pc, #596]	@ (80020c4 <RFID+0xb5c>)
 8001e6e:	4996      	ldr	r1, [pc, #600]	@ (80020c8 <RFID+0xb60>)
 8001e70:	4892      	ldr	r0, [pc, #584]	@ (80020bc <RFID+0xb54>)
 8001e72:	f7fe fac3 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8001e76:	2003      	movs	r0, #3
 8001e78:	f001 ff24 	bl	8003cc4 <buzzer>
																	HAL_Delay(1000);
 8001e7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e80:	f002 fc2e 	bl	80046e0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001e84:	4a91      	ldr	r2, [pc, #580]	@ (80020cc <RFID+0xb64>)
 8001e86:	498c      	ldr	r1, [pc, #560]	@ (80020b8 <RFID+0xb50>)
 8001e88:	488c      	ldr	r0, [pc, #560]	@ (80020bc <RFID+0xb54>)
 8001e8a:	f7fe fab7 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
																	}
																}
																break;
 8001e8e:	e09a      	b.n	8001fc6 <RFID+0xa5e>
																	removeuid(CheckKey(keyadd1));
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 f942 	bl	800311c <CheckKey>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 f96c 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 1 ","   SUCCESSFUL  ");
 8001ea0:	4a8b      	ldr	r2, [pc, #556]	@ (80020d0 <RFID+0xb68>)
 8001ea2:	498c      	ldr	r1, [pc, #560]	@ (80020d4 <RFID+0xb6c>)
 8001ea4:	4885      	ldr	r0, [pc, #532]	@ (80020bc <RFID+0xb54>)
 8001ea6:	f7fe faa9 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001eaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eae:	f002 fc17 	bl	80046e0 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001eb2:	f000 ffd3 	bl	8002e5c <checkcountUID>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <RFID+0x960>
																		startadd();
 8001ebc:	f001 f96a 	bl	8003194 <startadd>
																		exitmenu = 0;
 8001ec0:	4b7f      	ldr	r3, [pc, #508]	@ (80020c0 <RFID+0xb58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
																break;
 8001ec6:	e07e      	b.n	8001fc6 <RFID+0xa5e>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001ec8:	4a80      	ldr	r2, [pc, #512]	@ (80020cc <RFID+0xb64>)
 8001eca:	497b      	ldr	r1, [pc, #492]	@ (80020b8 <RFID+0xb50>)
 8001ecc:	487b      	ldr	r0, [pc, #492]	@ (80020bc <RFID+0xb54>)
 8001ece:	f7fe fa95 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001ed2:	e078      	b.n	8001fc6 <RFID+0xa5e>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f001 f920 	bl	800311c <CheckKey>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d111      	bne.n	8001f06 <RFID+0x99e>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 2", "  Do Not Exist");
 8001ee2:	4a78      	ldr	r2, [pc, #480]	@ (80020c4 <RFID+0xb5c>)
 8001ee4:	497c      	ldr	r1, [pc, #496]	@ (80020d8 <RFID+0xb70>)
 8001ee6:	4875      	ldr	r0, [pc, #468]	@ (80020bc <RFID+0xb54>)
 8001ee8:	f7fe fa88 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f001 fee9 	bl	8003cc4 <buzzer>
																	HAL_Delay(1000);
 8001ef2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ef6:	f002 fbf3 	bl	80046e0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001efa:	4a78      	ldr	r2, [pc, #480]	@ (80020dc <RFID+0xb74>)
 8001efc:	496e      	ldr	r1, [pc, #440]	@ (80020b8 <RFID+0xb50>)
 8001efe:	486f      	ldr	r0, [pc, #444]	@ (80020bc <RFID+0xb54>)
 8001f00:	f7fe fa7c 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
																	}
																}
																break;
 8001f04:	e05f      	b.n	8001fc6 <RFID+0xa5e>
																	removeuid(CheckKey(keyadd1));
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f001 f907 	bl	800311c <CheckKey>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 f931 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 2 ","   SUCCESSFUL  ");
 8001f16:	4a6e      	ldr	r2, [pc, #440]	@ (80020d0 <RFID+0xb68>)
 8001f18:	4971      	ldr	r1, [pc, #452]	@ (80020e0 <RFID+0xb78>)
 8001f1a:	4868      	ldr	r0, [pc, #416]	@ (80020bc <RFID+0xb54>)
 8001f1c:	f7fe fa6e 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001f20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f24:	f002 fbdc 	bl	80046e0 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001f28:	f000 ff98 	bl	8002e5c <checkcountUID>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <RFID+0x9d6>
																		startadd();
 8001f32:	f001 f92f 	bl	8003194 <startadd>
																		exitmenu = 0;
 8001f36:	4b62      	ldr	r3, [pc, #392]	@ (80020c0 <RFID+0xb58>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
																break;
 8001f3c:	e043      	b.n	8001fc6 <RFID+0xa5e>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001f3e:	4a67      	ldr	r2, [pc, #412]	@ (80020dc <RFID+0xb74>)
 8001f40:	495d      	ldr	r1, [pc, #372]	@ (80020b8 <RFID+0xb50>)
 8001f42:	485e      	ldr	r0, [pc, #376]	@ (80020bc <RFID+0xb54>)
 8001f44:	f7fe fa5a 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001f48:	e03d      	b.n	8001fc6 <RFID+0xa5e>
															case 3:
																if (CheckKey(keyadd1) == 0)
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f001 f8e5 	bl	800311c <CheckKey>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d111      	bne.n	8001f7c <RFID+0xa14>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 3", "  Do Not Exist");
 8001f58:	4a5a      	ldr	r2, [pc, #360]	@ (80020c4 <RFID+0xb5c>)
 8001f5a:	4962      	ldr	r1, [pc, #392]	@ (80020e4 <RFID+0xb7c>)
 8001f5c:	4857      	ldr	r0, [pc, #348]	@ (80020bc <RFID+0xb54>)
 8001f5e:	f7fe fa4d 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8001f62:	2003      	movs	r0, #3
 8001f64:	f001 feae 	bl	8003cc4 <buzzer>
																	HAL_Delay(1000);
 8001f68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f6c:	f002 fbb8 	bl	80046e0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001f70:	4a5d      	ldr	r2, [pc, #372]	@ (80020e8 <RFID+0xb80>)
 8001f72:	4951      	ldr	r1, [pc, #324]	@ (80020b8 <RFID+0xb50>)
 8001f74:	4851      	ldr	r0, [pc, #324]	@ (80020bc <RFID+0xb54>)
 8001f76:	f7fe fa41 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
																	}
																}
																break;
 8001f7a:	e024      	b.n	8001fc6 <RFID+0xa5e>
																	removeuid(CheckKey(keyadd1));
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 f8cc 	bl	800311c <CheckKey>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f8f6 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 3 ","   SUCCESSFUL  ");
 8001f8c:	4a50      	ldr	r2, [pc, #320]	@ (80020d0 <RFID+0xb68>)
 8001f8e:	4957      	ldr	r1, [pc, #348]	@ (80020ec <RFID+0xb84>)
 8001f90:	484a      	ldr	r0, [pc, #296]	@ (80020bc <RFID+0xb54>)
 8001f92:	f7fe fa33 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001f96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f9a:	f002 fba1 	bl	80046e0 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001f9e:	f000 ff5d 	bl	8002e5c <checkcountUID>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <RFID+0xa4c>
																		startadd();
 8001fa8:	f001 f8f4 	bl	8003194 <startadd>
																		exitmenu = 0;
 8001fac:	4b44      	ldr	r3, [pc, #272]	@ (80020c0 <RFID+0xb58>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
																break;
 8001fb2:	e008      	b.n	8001fc6 <RFID+0xa5e>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80020e8 <RFID+0xb80>)
 8001fb6:	4940      	ldr	r1, [pc, #256]	@ (80020b8 <RFID+0xb50>)
 8001fb8:	4840      	ldr	r0, [pc, #256]	@ (80020bc <RFID+0xb54>)
 8001fba:	f7fe fa1f 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001fbe:	e002      	b.n	8001fc6 <RFID+0xa5e>
															default:
																back11 = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	727b      	strb	r3, [r7, #9]
																break;
 8001fc4:	bf00      	nop
													while (back11 == 1)
 8001fc6:	7a7b      	ldrb	r3, [r7, #9]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	f43f aec2 	beq.w	8001d52 <RFID+0x7ea>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001fce:	4a48      	ldr	r2, [pc, #288]	@ (80020f0 <RFID+0xb88>)
 8001fd0:	4948      	ldr	r1, [pc, #288]	@ (80020f4 <RFID+0xb8c>)
 8001fd2:	483a      	ldr	r0, [pc, #232]	@ (80020bc <RFID+0xb54>)
 8001fd4:	f7fe fa12 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001fd8:	e13a      	b.n	8002250 <RFID+0xce8>
												case 2:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001fda:	4a47      	ldr	r2, [pc, #284]	@ (80020f8 <RFID+0xb90>)
 8001fdc:	4947      	ldr	r1, [pc, #284]	@ (80020fc <RFID+0xb94>)
 8001fde:	4837      	ldr	r0, [pc, #220]	@ (80020bc <RFID+0xb54>)
 8001fe0:	f7fe fa0c 	bl	80003fc <CLCD_I2C_Display>
													uint8_t statusadd2 = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 8001fec:	e123      	b.n	8002236 <RFID+0xcce>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001fee:	200a      	movs	r0, #10
 8001ff0:	f7fe fb5e 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001ff8:	4b31      	ldr	r3, [pc, #196]	@ (80020c0 <RFID+0xb58>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <RFID+0xaa8>
														{
															CLCD_I2C_Clear(&LCD1);
 8002000:	482e      	ldr	r0, [pc, #184]	@ (80020bc <RFID+0xb54>)
 8002002:	f7fe f9eb 	bl	80003dc <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8002006:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800200a:	f002 fb69 	bl	80046e0 <HAL_Delay>
															return;
 800200e:	e1c1      	b.n	8002394 <RFID+0xe2c>
														}
														if (key_pressed =='*')
 8002010:	797b      	ldrb	r3, [r7, #5]
 8002012:	2b2a      	cmp	r3, #42	@ 0x2a
 8002014:	d131      	bne.n	800207a <RFID+0xb12>
														{
															buzzer(1);
 8002016:	2001      	movs	r0, #1
 8002018:	f001 fe54 	bl	8003cc4 <buzzer>
															exitmenu = 15;
 800201c:	4b28      	ldr	r3, [pc, #160]	@ (80020c0 <RFID+0xb58>)
 800201e:	220f      	movs	r2, #15
 8002020:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8002022:	7a3b      	ldrb	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8002028:	7a3b      	ldrb	r3, [r7, #8]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d801      	bhi.n	8002032 <RFID+0xaca>
 800202e:	7a3b      	ldrb	r3, [r7, #8]
 8002030:	e000      	b.n	8002034 <RFID+0xacc>
 8002032:	2300      	movs	r3, #0
 8002034:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 8002036:	7a3b      	ldrb	r3, [r7, #8]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d012      	beq.n	8002062 <RFID+0xafa>
 800203c:	2b03      	cmp	r3, #3
 800203e:	dc16      	bgt.n	800206e <RFID+0xb06>
 8002040:	2b01      	cmp	r3, #1
 8002042:	d002      	beq.n	800204a <RFID+0xae2>
 8002044:	2b02      	cmp	r3, #2
 8002046:	d006      	beq.n	8002056 <RFID+0xaee>
 8002048:	e011      	b.n	800206e <RFID+0xb06>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 800204a:	4a2d      	ldr	r2, [pc, #180]	@ (8002100 <RFID+0xb98>)
 800204c:	492d      	ldr	r1, [pc, #180]	@ (8002104 <RFID+0xb9c>)
 800204e:	481b      	ldr	r0, [pc, #108]	@ (80020bc <RFID+0xb54>)
 8002050:	f7fe f9d4 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002054:	e011      	b.n	800207a <RFID+0xb12>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8002056:	4a2c      	ldr	r2, [pc, #176]	@ (8002108 <RFID+0xba0>)
 8002058:	492a      	ldr	r1, [pc, #168]	@ (8002104 <RFID+0xb9c>)
 800205a:	4818      	ldr	r0, [pc, #96]	@ (80020bc <RFID+0xb54>)
 800205c:	f7fe f9ce 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002060:	e00b      	b.n	800207a <RFID+0xb12>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8002062:	4a2a      	ldr	r2, [pc, #168]	@ (800210c <RFID+0xba4>)
 8002064:	4927      	ldr	r1, [pc, #156]	@ (8002104 <RFID+0xb9c>)
 8002066:	4815      	ldr	r0, [pc, #84]	@ (80020bc <RFID+0xb54>)
 8002068:	f7fe f9c8 	bl	80003fc <CLCD_I2C_Display>
																break;
 800206c:	e005      	b.n	800207a <RFID+0xb12>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> Back");
 800206e:	4a11      	ldr	r2, [pc, #68]	@ (80020b4 <RFID+0xb4c>)
 8002070:	4924      	ldr	r1, [pc, #144]	@ (8002104 <RFID+0xb9c>)
 8002072:	4812      	ldr	r0, [pc, #72]	@ (80020bc <RFID+0xb54>)
 8002074:	f7fe f9c2 	bl	80003fc <CLCD_I2C_Display>
																break;
 8002078:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 800207a:	797b      	ldrb	r3, [r7, #5]
 800207c:	2b23      	cmp	r3, #35	@ 0x23
 800207e:	f040 80da 	bne.w	8002236 <RFID+0xcce>
														{
															buzzer(1);
 8002082:	2001      	movs	r0, #1
 8002084:	f001 fe1e 	bl	8003cc4 <buzzer>
															exitmenu = 15;
 8002088:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <RFID+0xb58>)
 800208a:	220f      	movs	r2, #15
 800208c:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 800208e:	7b3b      	ldrb	r3, [r7, #12]
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	b2da      	uxtb	r2, r3
 8002094:	7a3b      	ldrb	r3, [r7, #8]
 8002096:	4413      	add	r3, r2
 8002098:	713b      	strb	r3, [r7, #4]
															switch (statusadd2)
 800209a:	7a3b      	ldrb	r3, [r7, #8]
 800209c:	2b03      	cmp	r3, #3
 800209e:	f000 8097 	beq.w	80021d0 <RFID+0xc68>
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	f300 80c4 	bgt.w	8002230 <RFID+0xcc8>
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d031      	beq.n	8002110 <RFID+0xba8>
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d05f      	beq.n	8002170 <RFID+0xc08>
 80020b0:	e0be      	b.n	8002230 <RFID+0xcc8>
 80020b2:	bf00      	nop
 80020b4:	0800ddd4 	.word	0x0800ddd4
 80020b8:	0800dfdc 	.word	0x0800dfdc
 80020bc:	200003d8 	.word	0x200003d8
 80020c0:	20000020 	.word	0x20000020
 80020c4:	0800e00c 	.word	0x0800e00c
 80020c8:	0800de84 	.word	0x0800de84
 80020cc:	0800dfcc 	.word	0x0800dfcc
 80020d0:	0800e01c 	.word	0x0800e01c
 80020d4:	0800e02c 	.word	0x0800e02c
 80020d8:	0800dea4 	.word	0x0800dea4
 80020dc:	0800dfec 	.word	0x0800dfec
 80020e0:	0800e040 	.word	0x0800e040
 80020e4:	0800dec4 	.word	0x0800dec4
 80020e8:	0800dffc 	.word	0x0800dffc
 80020ec:	0800e054 	.word	0x0800e054
 80020f0:	0800df98 	.word	0x0800df98
 80020f4:	0800dfac 	.word	0x0800dfac
 80020f8:	0800dddc 	.word	0x0800dddc
 80020fc:	0800dde8 	.word	0x0800dde8
 8002100:	0800e068 	.word	0x0800e068
 8002104:	0800e078 	.word	0x0800e078
 8002108:	0800e088 	.word	0x0800e088
 800210c:	0800e098 	.word	0x0800e098
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 8002110:	793b      	ldrb	r3, [r7, #4]
 8002112:	4618      	mov	r0, r3
 8002114:	f001 f802 	bl	800311c <CheckKey>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d111      	bne.n	8002142 <RFID+0xbda>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 1","  Do Not Exist");
 800211e:	4a9f      	ldr	r2, [pc, #636]	@ (800239c <RFID+0xe34>)
 8002120:	499f      	ldr	r1, [pc, #636]	@ (80023a0 <RFID+0xe38>)
 8002122:	48a0      	ldr	r0, [pc, #640]	@ (80023a4 <RFID+0xe3c>)
 8002124:	f7fe f96a 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8002128:	2003      	movs	r0, #3
 800212a:	f001 fdcb 	bl	8003cc4 <buzzer>
																	HAL_Delay(1000);
 800212e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002132:	f002 fad5 	bl	80046e0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8002136:	4a9c      	ldr	r2, [pc, #624]	@ (80023a8 <RFID+0xe40>)
 8002138:	499c      	ldr	r1, [pc, #624]	@ (80023ac <RFID+0xe44>)
 800213a:	489a      	ldr	r0, [pc, #616]	@ (80023a4 <RFID+0xe3c>)
 800213c:	f7fe f95e 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
																}
																break;
 8002140:	e079      	b.n	8002236 <RFID+0xcce>
																	removeuid(CheckKey(keyadd2));
 8002142:	793b      	ldrb	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	f000 ffe9 	bl	800311c <CheckKey>
 800214a:	4603      	mov	r3, r0
 800214c:	4618      	mov	r0, r3
 800214e:	f001 f813 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
 8002152:	4a97      	ldr	r2, [pc, #604]	@ (80023b0 <RFID+0xe48>)
 8002154:	4997      	ldr	r1, [pc, #604]	@ (80023b4 <RFID+0xe4c>)
 8002156:	4893      	ldr	r0, [pc, #588]	@ (80023a4 <RFID+0xe3c>)
 8002158:	f7fe f950 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 800215c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002160:	f002 fabe 	bl	80046e0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8002164:	4a90      	ldr	r2, [pc, #576]	@ (80023a8 <RFID+0xe40>)
 8002166:	4991      	ldr	r1, [pc, #580]	@ (80023ac <RFID+0xe44>)
 8002168:	488e      	ldr	r0, [pc, #568]	@ (80023a4 <RFID+0xe3c>)
 800216a:	f7fe f947 	bl	80003fc <CLCD_I2C_Display>
																break;
 800216e:	e062      	b.n	8002236 <RFID+0xcce>
															case 2:
																if (CheckKey(keyadd2) == 0)
 8002170:	793b      	ldrb	r3, [r7, #4]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 ffd2 	bl	800311c <CheckKey>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d111      	bne.n	80021a2 <RFID+0xc3a>
																{

																	CLCD_I2C_Display(&LCD1, "     USER 2","  Do Not Exist");
 800217e:	4a87      	ldr	r2, [pc, #540]	@ (800239c <RFID+0xe34>)
 8002180:	498d      	ldr	r1, [pc, #564]	@ (80023b8 <RFID+0xe50>)
 8002182:	4888      	ldr	r0, [pc, #544]	@ (80023a4 <RFID+0xe3c>)
 8002184:	f7fe f93a 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 8002188:	2003      	movs	r0, #3
 800218a:	f001 fd9b 	bl	8003cc4 <buzzer>
																	HAL_Delay(1000);
 800218e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002192:	f002 faa5 	bl	80046e0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8002196:	4a89      	ldr	r2, [pc, #548]	@ (80023bc <RFID+0xe54>)
 8002198:	4984      	ldr	r1, [pc, #528]	@ (80023ac <RFID+0xe44>)
 800219a:	4882      	ldr	r0, [pc, #520]	@ (80023a4 <RFID+0xe3c>)
 800219c:	f7fe f92e 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
																}
																break;
 80021a0:	e049      	b.n	8002236 <RFID+0xcce>
																	removeuid(CheckKey(keyadd2));
 80021a2:	793b      	ldrb	r3, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 ffb9 	bl	800311c <CheckKey>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 ffe3 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
 80021b2:	4a7f      	ldr	r2, [pc, #508]	@ (80023b0 <RFID+0xe48>)
 80021b4:	4982      	ldr	r1, [pc, #520]	@ (80023c0 <RFID+0xe58>)
 80021b6:	487b      	ldr	r0, [pc, #492]	@ (80023a4 <RFID+0xe3c>)
 80021b8:	f7fe f920 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 80021bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021c0:	f002 fa8e 	bl	80046e0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 80021c4:	4a7d      	ldr	r2, [pc, #500]	@ (80023bc <RFID+0xe54>)
 80021c6:	4979      	ldr	r1, [pc, #484]	@ (80023ac <RFID+0xe44>)
 80021c8:	4876      	ldr	r0, [pc, #472]	@ (80023a4 <RFID+0xe3c>)
 80021ca:	f7fe f917 	bl	80003fc <CLCD_I2C_Display>
																break;
 80021ce:	e032      	b.n	8002236 <RFID+0xcce>
															case 3:
																if (CheckKey(keyadd2) == 0)
 80021d0:	793b      	ldrb	r3, [r7, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 ffa2 	bl	800311c <CheckKey>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d111      	bne.n	8002202 <RFID+0xc9a>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 3","  Do Not Exist");
 80021de:	4a6f      	ldr	r2, [pc, #444]	@ (800239c <RFID+0xe34>)
 80021e0:	4978      	ldr	r1, [pc, #480]	@ (80023c4 <RFID+0xe5c>)
 80021e2:	4870      	ldr	r0, [pc, #448]	@ (80023a4 <RFID+0xe3c>)
 80021e4:	f7fe f90a 	bl	80003fc <CLCD_I2C_Display>
																	buzzer(3);
 80021e8:	2003      	movs	r0, #3
 80021ea:	f001 fd6b 	bl	8003cc4 <buzzer>
																	HAL_Delay(1000);
 80021ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021f2:	f002 fa75 	bl	80046e0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 80021f6:	4a74      	ldr	r2, [pc, #464]	@ (80023c8 <RFID+0xe60>)
 80021f8:	496c      	ldr	r1, [pc, #432]	@ (80023ac <RFID+0xe44>)
 80021fa:	486a      	ldr	r0, [pc, #424]	@ (80023a4 <RFID+0xe3c>)
 80021fc:	f7fe f8fe 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
																}
																break;
 8002200:	e019      	b.n	8002236 <RFID+0xcce>
																	removeuid(CheckKey(keyadd2));
 8002202:	793b      	ldrb	r3, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 ff89 	bl	800311c <CheckKey>
 800220a:	4603      	mov	r3, r0
 800220c:	4618      	mov	r0, r3
 800220e:	f000 ffb3 	bl	8003178 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
 8002212:	4a67      	ldr	r2, [pc, #412]	@ (80023b0 <RFID+0xe48>)
 8002214:	496d      	ldr	r1, [pc, #436]	@ (80023cc <RFID+0xe64>)
 8002216:	4863      	ldr	r0, [pc, #396]	@ (80023a4 <RFID+0xe3c>)
 8002218:	f7fe f8f0 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 800221c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002220:	f002 fa5e 	bl	80046e0 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8002224:	4a68      	ldr	r2, [pc, #416]	@ (80023c8 <RFID+0xe60>)
 8002226:	4961      	ldr	r1, [pc, #388]	@ (80023ac <RFID+0xe44>)
 8002228:	485e      	ldr	r0, [pc, #376]	@ (80023a4 <RFID+0xe3c>)
 800222a:	f7fe f8e7 	bl	80003fc <CLCD_I2C_Display>
																break;
 800222e:	e002      	b.n	8002236 <RFID+0xcce>
															default:
																back12 = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	71fb      	strb	r3, [r7, #7]
																break;
 8002234:	bf00      	nop
													while (back12 == 1)
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b01      	cmp	r3, #1
 800223a:	f43f aed8 	beq.w	8001fee <RFID+0xa86>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 800223e:	4a64      	ldr	r2, [pc, #400]	@ (80023d0 <RFID+0xe68>)
 8002240:	4964      	ldr	r1, [pc, #400]	@ (80023d4 <RFID+0xe6c>)
 8002242:	4858      	ldr	r0, [pc, #352]	@ (80023a4 <RFID+0xe3c>)
 8002244:	f7fe f8da 	bl	80003fc <CLCD_I2C_Display>
													break;
 8002248:	e002      	b.n	8002250 <RFID+0xce8>
												default:
													backrm10 = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	72fb      	strb	r3, [r7, #11]
													break;
 800224e:	bf00      	nop
										while (backrm10 == 1)
 8002250:	7afb      	ldrb	r3, [r7, #11]
 8002252:	2b01      	cmp	r3, #1
 8002254:	f43f ad26 	beq.w	8001ca4 <RFID+0x73c>
												}
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8002258:	4a5f      	ldr	r2, [pc, #380]	@ (80023d8 <RFID+0xe70>)
 800225a:	4960      	ldr	r1, [pc, #384]	@ (80023dc <RFID+0xe74>)
 800225c:	4851      	ldr	r0, [pc, #324]	@ (80023a4 <RFID+0xe3c>)
 800225e:	f7fe f8cd 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002262:	e064      	b.n	800232e <RFID+0xdc6>
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8002264:	4a5e      	ldr	r2, [pc, #376]	@ (80023e0 <RFID+0xe78>)
 8002266:	495f      	ldr	r1, [pc, #380]	@ (80023e4 <RFID+0xe7c>)
 8002268:	484e      	ldr	r0, [pc, #312]	@ (80023a4 <RFID+0xe3c>)
 800226a:	f7fe f8c7 	bl	80003fc <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002272:	e050      	b.n	8002316 <RFID+0xdae>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002274:	200a      	movs	r0, #10
 8002276:	f7fe fa1b 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800227a:	4603      	mov	r3, r0
 800227c:	717b      	strb	r3, [r7, #5]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 800227e:	485a      	ldr	r0, [pc, #360]	@ (80023e8 <RFID+0xe80>)
 8002280:	f001 fd96 	bl	8003db0 <TM_MFRC522_Check>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d13d      	bne.n	8002306 <RFID+0xd9e>
											{
												if (CheckListUID(CardID) != 0)
 800228a:	4857      	ldr	r0, [pc, #348]	@ (80023e8 <RFID+0xe80>)
 800228c:	f000 fdb6 	bl	8002dfc <CheckListUID>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d026      	beq.n	80022e4 <RFID+0xd7c>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8002296:	4854      	ldr	r0, [pc, #336]	@ (80023e8 <RFID+0xe80>)
 8002298:	f000 fdb0 	bl	8002dfc <CheckListUID>
 800229c:	4603      	mov	r3, r0
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 ff3c 	bl	800311c <CheckKey>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 ff66 	bl	8003178 <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 80022ac:	4a40      	ldr	r2, [pc, #256]	@ (80023b0 <RFID+0xe48>)
 80022ae:	494f      	ldr	r1, [pc, #316]	@ (80023ec <RFID+0xe84>)
 80022b0:	483c      	ldr	r0, [pc, #240]	@ (80023a4 <RFID+0xe3c>)
 80022b2:	f7fe f8a3 	bl	80003fc <CLCD_I2C_Display>
													HAL_Delay(1000);
 80022b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022ba:	f002 fa11 	bl	80046e0 <HAL_Delay>
													if (checkcountUID() == 0)
 80022be:	f000 fdcd 	bl	8002e5c <checkcountUID>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <RFID+0xd70>
													{
														startadd();
 80022c8:	f000 ff64 	bl	8003194 <startadd>
														rmquet = 1;
 80022cc:	2301      	movs	r3, #1
 80022ce:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 80022d0:	4b47      	ldr	r3, [pc, #284]	@ (80023f0 <RFID+0xe88>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
														return;
 80022d6:	e05d      	b.n	8002394 <RFID+0xe2c>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 80022d8:	4a41      	ldr	r2, [pc, #260]	@ (80023e0 <RFID+0xe78>)
 80022da:	4942      	ldr	r1, [pc, #264]	@ (80023e4 <RFID+0xe7c>)
 80022dc:	4831      	ldr	r0, [pc, #196]	@ (80023a4 <RFID+0xe3c>)
 80022de:	f7fe f88d 	bl	80003fc <CLCD_I2C_Display>
 80022e2:	e010      	b.n	8002306 <RFID+0xd9e>
													}

												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   THIS CARD","  Do Not Exist");
 80022e4:	4a2d      	ldr	r2, [pc, #180]	@ (800239c <RFID+0xe34>)
 80022e6:	4943      	ldr	r1, [pc, #268]	@ (80023f4 <RFID+0xe8c>)
 80022e8:	482e      	ldr	r0, [pc, #184]	@ (80023a4 <RFID+0xe3c>)
 80022ea:	f7fe f887 	bl	80003fc <CLCD_I2C_Display>
													buzzer(3);
 80022ee:	2003      	movs	r0, #3
 80022f0:	f001 fce8 	bl	8003cc4 <buzzer>
													HAL_Delay(1000);
 80022f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022f8:	f002 f9f2 	bl	80046e0 <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 80022fc:	4a38      	ldr	r2, [pc, #224]	@ (80023e0 <RFID+0xe78>)
 80022fe:	4939      	ldr	r1, [pc, #228]	@ (80023e4 <RFID+0xe7c>)
 8002300:	4828      	ldr	r0, [pc, #160]	@ (80023a4 <RFID+0xe3c>)
 8002302:	f7fe f87b 	bl	80003fc <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 8002306:	797b      	ldrb	r3, [r7, #5]
 8002308:	2b23      	cmp	r3, #35	@ 0x23
 800230a:	d104      	bne.n	8002316 <RFID+0xdae>
											{
												buzzer(1);
 800230c:	2001      	movs	r0, #1
 800230e:	f001 fcd9 	bl	8003cc4 <buzzer>
												rmquet = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002316:	79bb      	ldrb	r3, [r7, #6]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ab      	bne.n	8002274 <RFID+0xd0c>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 800231c:	4a36      	ldr	r2, [pc, #216]	@ (80023f8 <RFID+0xe90>)
 800231e:	492f      	ldr	r1, [pc, #188]	@ (80023dc <RFID+0xe74>)
 8002320:	4820      	ldr	r0, [pc, #128]	@ (80023a4 <RFID+0xe3c>)
 8002322:	f7fe f86b 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002326:	e002      	b.n	800232e <RFID+0xdc6>
									default:
										backrm1 = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	737b      	strb	r3, [r7, #13]
										break;
 800232c:	bf00      	nop
							while (backrm1 == 1)
 800232e:	7b7b      	ldrb	r3, [r7, #13]
 8002330:	2b01      	cmp	r3, #1
 8002332:	f43f ac63 	beq.w	8001bfc <RFID+0x694>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8002336:	4a31      	ldr	r2, [pc, #196]	@ (80023fc <RFID+0xe94>)
 8002338:	4931      	ldr	r1, [pc, #196]	@ (8002400 <RFID+0xe98>)
 800233a:	481a      	ldr	r0, [pc, #104]	@ (80023a4 <RFID+0xe3c>)
 800233c:	f7fe f85e 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002340:	e00a      	b.n	8002358 <RFID+0xdf0>
						case 1:
							remoall();
 8002342:	f000 ff9d 	bl	8003280 <remoall>
							startadd();
 8002346:	f000 ff25 	bl	8003194 <startadd>
							exitmenu = 0;
 800234a:	4b29      	ldr	r3, [pc, #164]	@ (80023f0 <RFID+0xe88>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
							break;
 8002350:	e002      	b.n	8002358 <RFID+0xdf0>
						default:
							backrm = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
							break;
 8002356:	bf00      	nop
				while (backrm == 1)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b01      	cmp	r3, #1
 800235c:	f43f abc3 	beq.w	8001ae6 <RFID+0x57e>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8002360:	4a28      	ldr	r2, [pc, #160]	@ (8002404 <RFID+0xe9c>)
 8002362:	4929      	ldr	r1, [pc, #164]	@ (8002408 <RFID+0xea0>)
 8002364:	480f      	ldr	r0, [pc, #60]	@ (80023a4 <RFID+0xe3c>)
 8002366:	f7fe f849 	bl	80003fc <CLCD_I2C_Display>
				break;
 800236a:	e00b      	b.n	8002384 <RFID+0xe1c>
			case 2:
				checkthe();
 800236c:	f000 fe20 	bl	8002fb0 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8002370:	4a26      	ldr	r2, [pc, #152]	@ (800240c <RFID+0xea4>)
 8002372:	4925      	ldr	r1, [pc, #148]	@ (8002408 <RFID+0xea0>)
 8002374:	480b      	ldr	r0, [pc, #44]	@ (80023a4 <RFID+0xe3c>)
 8002376:	f7fe f841 	bl	80003fc <CLCD_I2C_Display>
				break;
 800237a:	e003      	b.n	8002384 <RFID+0xe1c>
			default:
				exitmenu = 0;
 800237c:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <RFID+0xe88>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
				break;
 8002382:	bf00      	nop
	while (exitmenu )
 8002384:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <RFID+0xe88>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f47f a8ff 	bne.w	800158c <RFID+0x24>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 800238e:	4805      	ldr	r0, [pc, #20]	@ (80023a4 <RFID+0xe3c>)
 8002390:	f7fe f824 	bl	80003dc <CLCD_I2C_Clear>
}
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	0800e00c 	.word	0x0800e00c
 80023a0:	0800df10 	.word	0x0800df10
 80023a4:	200003d8 	.word	0x200003d8
 80023a8:	0800e068 	.word	0x0800e068
 80023ac:	0800e078 	.word	0x0800e078
 80023b0:	0800e01c 	.word	0x0800e01c
 80023b4:	0800e0a8 	.word	0x0800e0a8
 80023b8:	0800df1c 	.word	0x0800df1c
 80023bc:	0800e088 	.word	0x0800e088
 80023c0:	0800e0bc 	.word	0x0800e0bc
 80023c4:	0800df28 	.word	0x0800df28
 80023c8:	0800e098 	.word	0x0800e098
 80023cc:	0800e0d0 	.word	0x0800e0d0
 80023d0:	0800dfbc 	.word	0x0800dfbc
 80023d4:	0800dfac 	.word	0x0800dfac
 80023d8:	0800df68 	.word	0x0800df68
 80023dc:	0800df78 	.word	0x0800df78
 80023e0:	0800ddd4 	.word	0x0800ddd4
 80023e4:	0800e0e4 	.word	0x0800e0e4
 80023e8:	200003e4 	.word	0x200003e4
 80023ec:	0800e0f4 	.word	0x0800e0f4
 80023f0:	20000020 	.word	0x20000020
 80023f4:	0800e104 	.word	0x0800e104
 80023f8:	0800df88 	.word	0x0800df88
 80023fc:	0800df34 	.word	0x0800df34
 8002400:	0800df48 	.word	0x0800df48
 8002404:	0800ddb4 	.word	0x0800ddb4
 8002408:	0800dd98 	.word	0x0800dd98
 800240c:	0800ddc4 	.word	0x0800ddc4

08002410 <FACEID>:
void FACEID(void) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
	buzzer(1);
 8002416:	2001      	movs	r0, #1
 8002418:	f001 fc54 	bl	8003cc4 <buzzer>
	exitmenu = Delaymenu;
 800241c:	4bae      	ldr	r3, [pc, #696]	@ (80026d8 <FACEID+0x2c8>)
 800241e:	2214      	movs	r2, #20
 8002420:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002422:	23ff      	movs	r3, #255	@ 0xff
 8002424:	73fb      	strb	r3, [r7, #15]
	CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","Pls Press DOWN");
 8002426:	4aad      	ldr	r2, [pc, #692]	@ (80026dc <FACEID+0x2cc>)
 8002428:	49ad      	ldr	r1, [pc, #692]	@ (80026e0 <FACEID+0x2d0>)
 800242a:	48ae      	ldr	r0, [pc, #696]	@ (80026e4 <FACEID+0x2d4>)
 800242c:	f7fd ffe6 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002430:	e378      	b.n	8002b24 <FACEID+0x714>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002432:	200a      	movs	r0, #10
 8002434:	f7fe f93c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002438:	4603      	mov	r3, r0
 800243a:	723b      	strb	r3, [r7, #8]
		if (key_pressed == '*')
 800243c:	7a3b      	ldrb	r3, [r7, #8]
 800243e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002440:	d127      	bne.n	8002492 <FACEID+0x82>
		{
			buzzer(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f001 fc3e 	bl	8003cc4 <buzzer>
			exitmenu = Delaymenu;
 8002448:	4ba3      	ldr	r3, [pc, #652]	@ (80026d8 <FACEID+0x2c8>)
 800244a:	2214      	movs	r2, #20
 800244c:	701a      	strb	r2, [r3, #0]
			status++;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	3301      	adds	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
			status = (status > 2) ? 0 : status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d801      	bhi.n	800245e <FACEID+0x4e>
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	e000      	b.n	8002460 <FACEID+0x50>
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
			switch (status)
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <FACEID+0x5e>
 8002468:	2b01      	cmp	r3, #1
 800246a:	d006      	beq.n	800247a <FACEID+0x6a>
 800246c:	e00b      	b.n	8002486 <FACEID+0x76>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 800246e:	4a9e      	ldr	r2, [pc, #632]	@ (80026e8 <FACEID+0x2d8>)
 8002470:	499b      	ldr	r1, [pc, #620]	@ (80026e0 <FACEID+0x2d0>)
 8002472:	489c      	ldr	r0, [pc, #624]	@ (80026e4 <FACEID+0x2d4>)
 8002474:	f7fd ffc2 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002478:	e00b      	b.n	8002492 <FACEID+0x82>
			case 1:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 800247a:	4a9c      	ldr	r2, [pc, #624]	@ (80026ec <FACEID+0x2dc>)
 800247c:	4998      	ldr	r1, [pc, #608]	@ (80026e0 <FACEID+0x2d0>)
 800247e:	4899      	ldr	r0, [pc, #612]	@ (80026e4 <FACEID+0x2d4>)
 8002480:	f7fd ffbc 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002484:	e005      	b.n	8002492 <FACEID+0x82>
			default:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Back");
 8002486:	4a9a      	ldr	r2, [pc, #616]	@ (80026f0 <FACEID+0x2e0>)
 8002488:	4995      	ldr	r1, [pc, #596]	@ (80026e0 <FACEID+0x2d0>)
 800248a:	4896      	ldr	r0, [pc, #600]	@ (80026e4 <FACEID+0x2d4>)
 800248c:	f7fd ffb6 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002490:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002492:	7a3b      	ldrb	r3, [r7, #8]
 8002494:	2b23      	cmp	r3, #35	@ 0x23
 8002496:	f040 8345 	bne.w	8002b24 <FACEID+0x714>
		{
			buzzer(1);
 800249a:	2001      	movs	r0, #1
 800249c:	f001 fc12 	bl	8003cc4 <buzzer>
			exitmenu = Delaymenu;
 80024a0:	4b8d      	ldr	r3, [pc, #564]	@ (80026d8 <FACEID+0x2c8>)
 80024a2:	2214      	movs	r2, #20
 80024a4:	701a      	strb	r2, [r3, #0]
			switch (status)
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <FACEID+0xa4>
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	f000 813f 	beq.w	8002730 <FACEID+0x320>
 80024b2:	e333      	b.n	8002b1c <FACEID+0x70c>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80024b4:	4a8f      	ldr	r2, [pc, #572]	@ (80026f4 <FACEID+0x2e4>)
 80024b6:	4990      	ldr	r1, [pc, #576]	@ (80026f8 <FACEID+0x2e8>)
 80024b8:	488a      	ldr	r0, [pc, #552]	@ (80026e4 <FACEID+0x2d4>)
 80024ba:	f7fd ff9f 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	73bb      	strb	r3, [r7, #14]
				uint8_t back = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	737b      	strb	r3, [r7, #13]
				while (back == 1)
 80024c6:	e0fc      	b.n	80026c2 <FACEID+0x2b2>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80024c8:	200a      	movs	r0, #10
 80024ca:	f7fe f8f1 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80024ce:	4603      	mov	r3, r0
 80024d0:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 80024d2:	4b81      	ldr	r3, [pc, #516]	@ (80026d8 <FACEID+0x2c8>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d107      	bne.n	80024ea <FACEID+0xda>
					{
						CLCD_I2C_Clear(&LCD1);
 80024da:	4882      	ldr	r0, [pc, #520]	@ (80026e4 <FACEID+0x2d4>)
 80024dc:	f7fd ff7e 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80024e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024e4:	f002 f8fc 	bl	80046e0 <HAL_Delay>
						return;
 80024e8:	e324      	b.n	8002b34 <FACEID+0x724>
					}
					if (key_pressed == '*')
 80024ea:	7a3b      	ldrb	r3, [r7, #8]
 80024ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80024ee:	d13d      	bne.n	800256c <FACEID+0x15c>
					{
						buzzer(1);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f001 fbe7 	bl	8003cc4 <buzzer>
						exitmenu = Delaymenu;
 80024f6:	4b78      	ldr	r3, [pc, #480]	@ (80026d8 <FACEID+0x2c8>)
 80024f8:	2214      	movs	r2, #20
 80024fa:	701a      	strb	r2, [r3, #0]
						statusadd++;
 80024fc:	7bbb      	ldrb	r3, [r7, #14]
 80024fe:	3301      	adds	r3, #1
 8002500:	73bb      	strb	r3, [r7, #14]
						statusadd = (statusadd > 4) ? 0 : statusadd;
 8002502:	7bbb      	ldrb	r3, [r7, #14]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d801      	bhi.n	800250c <FACEID+0xfc>
 8002508:	7bbb      	ldrb	r3, [r7, #14]
 800250a:	e000      	b.n	800250e <FACEID+0xfe>
 800250c:	2300      	movs	r3, #0
 800250e:	73bb      	strb	r3, [r7, #14]
						switch (statusadd)
 8002510:	7bbb      	ldrb	r3, [r7, #14]
 8002512:	3b01      	subs	r3, #1
 8002514:	2b03      	cmp	r3, #3
 8002516:	d823      	bhi.n	8002560 <FACEID+0x150>
 8002518:	a201      	add	r2, pc, #4	@ (adr r2, 8002520 <FACEID+0x110>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	08002531 	.word	0x08002531
 8002524:	0800253d 	.word	0x0800253d
 8002528:	08002549 	.word	0x08002549
 800252c:	08002555 	.word	0x08002555
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002530:	4a72      	ldr	r2, [pc, #456]	@ (80026fc <FACEID+0x2ec>)
 8002532:	4973      	ldr	r1, [pc, #460]	@ (8002700 <FACEID+0x2f0>)
 8002534:	486b      	ldr	r0, [pc, #428]	@ (80026e4 <FACEID+0x2d4>)
 8002536:	f7fd ff61 	bl	80003fc <CLCD_I2C_Display>
							break;
 800253a:	e017      	b.n	800256c <FACEID+0x15c>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 800253c:	4a71      	ldr	r2, [pc, #452]	@ (8002704 <FACEID+0x2f4>)
 800253e:	4970      	ldr	r1, [pc, #448]	@ (8002700 <FACEID+0x2f0>)
 8002540:	4868      	ldr	r0, [pc, #416]	@ (80026e4 <FACEID+0x2d4>)
 8002542:	f7fd ff5b 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002546:	e011      	b.n	800256c <FACEID+0x15c>
						case 3:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 8002548:	4a6f      	ldr	r2, [pc, #444]	@ (8002708 <FACEID+0x2f8>)
 800254a:	496d      	ldr	r1, [pc, #436]	@ (8002700 <FACEID+0x2f0>)
 800254c:	4865      	ldr	r0, [pc, #404]	@ (80026e4 <FACEID+0x2d4>)
 800254e:	f7fd ff55 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002552:	e00b      	b.n	800256c <FACEID+0x15c>
						case 4:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 8002554:	4a6d      	ldr	r2, [pc, #436]	@ (800270c <FACEID+0x2fc>)
 8002556:	496a      	ldr	r1, [pc, #424]	@ (8002700 <FACEID+0x2f0>)
 8002558:	4862      	ldr	r0, [pc, #392]	@ (80026e4 <FACEID+0x2d4>)
 800255a:	f7fd ff4f 	bl	80003fc <CLCD_I2C_Display>
							break;
 800255e:	e005      	b.n	800256c <FACEID+0x15c>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> Back");
 8002560:	4a63      	ldr	r2, [pc, #396]	@ (80026f0 <FACEID+0x2e0>)
 8002562:	4967      	ldr	r1, [pc, #412]	@ (8002700 <FACEID+0x2f0>)
 8002564:	485f      	ldr	r0, [pc, #380]	@ (80026e4 <FACEID+0x2d4>)
 8002566:	f7fd ff49 	bl	80003fc <CLCD_I2C_Display>
							break;
 800256a:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 800256c:	7a3b      	ldrb	r3, [r7, #8]
 800256e:	2b23      	cmp	r3, #35	@ 0x23
 8002570:	f040 80a7 	bne.w	80026c2 <FACEID+0x2b2>
					{
						buzzer(1);
 8002574:	2001      	movs	r0, #1
 8002576:	f001 fba5 	bl	8003cc4 <buzzer>
						exitmenu = Delaymenu;
 800257a:	4b57      	ldr	r3, [pc, #348]	@ (80026d8 <FACEID+0x2c8>)
 800257c:	2214      	movs	r2, #20
 800257e:	701a      	strb	r2, [r3, #0]
						uint8_t keyadd1 = statusadd;
 8002580:	7bbb      	ldrb	r3, [r7, #14]
 8002582:	71bb      	strb	r3, [r7, #6]
						switch (statusadd)
 8002584:	7bbb      	ldrb	r3, [r7, #14]
 8002586:	3b01      	subs	r3, #1
 8002588:	2b03      	cmp	r3, #3
 800258a:	f200 8097 	bhi.w	80026bc <FACEID+0x2ac>
 800258e:	a201      	add	r2, pc, #4	@ (adr r2, 8002594 <FACEID+0x184>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025eb 	.word	0x080025eb
 800259c:	08002631 	.word	0x08002631
 80025a0:	08002677 	.word	0x08002677
						{
						case 1:
							if (checkfaceid(keyadd1) != 0)
 80025a4:	79bb      	ldrb	r3, [r7, #6]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 ff52 	bl	8003450 <checkfaceid>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d011      	beq.n	80025d6 <FACEID+0x1c6>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 1"," Face 1 Existed ");
 80025b2:	4a57      	ldr	r2, [pc, #348]	@ (8002710 <FACEID+0x300>)
 80025b4:	4957      	ldr	r1, [pc, #348]	@ (8002714 <FACEID+0x304>)
 80025b6:	484b      	ldr	r0, [pc, #300]	@ (80026e4 <FACEID+0x2d4>)
 80025b8:	f7fd ff20 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 80025bc:	2003      	movs	r0, #3
 80025be:	f001 fb81 	bl	8003cc4 <buzzer>
								HAL_Delay(1000);
 80025c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025c6:	f002 f88b 	bl	80046e0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 80025ca:	4a4c      	ldr	r2, [pc, #304]	@ (80026fc <FACEID+0x2ec>)
 80025cc:	494c      	ldr	r1, [pc, #304]	@ (8002700 <FACEID+0x2f0>)
 80025ce:	4845      	ldr	r0, [pc, #276]	@ (80026e4 <FACEID+0x2d4>)
 80025d0:	f7fd ff14 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
							}
							break;
 80025d4:	e075      	b.n	80026c2 <FACEID+0x2b2>
								addface(keyadd1);
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fe77 	bl	80032cc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 80025de:	4a47      	ldr	r2, [pc, #284]	@ (80026fc <FACEID+0x2ec>)
 80025e0:	4947      	ldr	r1, [pc, #284]	@ (8002700 <FACEID+0x2f0>)
 80025e2:	4840      	ldr	r0, [pc, #256]	@ (80026e4 <FACEID+0x2d4>)
 80025e4:	f7fd ff0a 	bl	80003fc <CLCD_I2C_Display>
							break;
 80025e8:	e06b      	b.n	80026c2 <FACEID+0x2b2>
						case 2:
							if (checkfaceid(keyadd1) != 0)
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 ff2f 	bl	8003450 <checkfaceid>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d011      	beq.n	800261c <FACEID+0x20c>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 2"," Face 2 Existed ");
 80025f8:	4a47      	ldr	r2, [pc, #284]	@ (8002718 <FACEID+0x308>)
 80025fa:	4948      	ldr	r1, [pc, #288]	@ (800271c <FACEID+0x30c>)
 80025fc:	4839      	ldr	r0, [pc, #228]	@ (80026e4 <FACEID+0x2d4>)
 80025fe:	f7fd fefd 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 8002602:	2003      	movs	r0, #3
 8002604:	f001 fb5e 	bl	8003cc4 <buzzer>
								HAL_Delay(1000);
 8002608:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800260c:	f002 f868 	bl	80046e0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002610:	4a3c      	ldr	r2, [pc, #240]	@ (8002704 <FACEID+0x2f4>)
 8002612:	493b      	ldr	r1, [pc, #236]	@ (8002700 <FACEID+0x2f0>)
 8002614:	4833      	ldr	r0, [pc, #204]	@ (80026e4 <FACEID+0x2d4>)
 8002616:	f7fd fef1 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
							}
							break;
 800261a:	e052      	b.n	80026c2 <FACEID+0x2b2>
								addface(keyadd1);
 800261c:	79bb      	ldrb	r3, [r7, #6]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fe54 	bl	80032cc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002624:	4a37      	ldr	r2, [pc, #220]	@ (8002704 <FACEID+0x2f4>)
 8002626:	4936      	ldr	r1, [pc, #216]	@ (8002700 <FACEID+0x2f0>)
 8002628:	482e      	ldr	r0, [pc, #184]	@ (80026e4 <FACEID+0x2d4>)
 800262a:	f7fd fee7 	bl	80003fc <CLCD_I2C_Display>
							break;
 800262e:	e048      	b.n	80026c2 <FACEID+0x2b2>
						case 3:
							if (checkfaceid(keyadd1) != 0)
 8002630:	79bb      	ldrb	r3, [r7, #6]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 ff0c 	bl	8003450 <checkfaceid>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d011      	beq.n	8002662 <FACEID+0x252>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 3"," Face 3 Existed ");
 800263e:	4a38      	ldr	r2, [pc, #224]	@ (8002720 <FACEID+0x310>)
 8002640:	4938      	ldr	r1, [pc, #224]	@ (8002724 <FACEID+0x314>)
 8002642:	4828      	ldr	r0, [pc, #160]	@ (80026e4 <FACEID+0x2d4>)
 8002644:	f7fd feda 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 8002648:	2003      	movs	r0, #3
 800264a:	f001 fb3b 	bl	8003cc4 <buzzer>
								HAL_Delay(1000);
 800264e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002652:	f002 f845 	bl	80046e0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 8002656:	4a2c      	ldr	r2, [pc, #176]	@ (8002708 <FACEID+0x2f8>)
 8002658:	4929      	ldr	r1, [pc, #164]	@ (8002700 <FACEID+0x2f0>)
 800265a:	4822      	ldr	r0, [pc, #136]	@ (80026e4 <FACEID+0x2d4>)
 800265c:	f7fd fece 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
							}
							break;
 8002660:	e02f      	b.n	80026c2 <FACEID+0x2b2>
								addface(keyadd1);
 8002662:	79bb      	ldrb	r3, [r7, #6]
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fe31 	bl	80032cc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 800266a:	4a27      	ldr	r2, [pc, #156]	@ (8002708 <FACEID+0x2f8>)
 800266c:	4924      	ldr	r1, [pc, #144]	@ (8002700 <FACEID+0x2f0>)
 800266e:	481d      	ldr	r0, [pc, #116]	@ (80026e4 <FACEID+0x2d4>)
 8002670:	f7fd fec4 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002674:	e025      	b.n	80026c2 <FACEID+0x2b2>
						case 4:
							if (checkfaceid(keyadd1) != 0)
 8002676:	79bb      	ldrb	r3, [r7, #6]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fee9 	bl	8003450 <checkfaceid>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d011      	beq.n	80026a8 <FACEID+0x298>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 4"," Face 4 Existed ");
 8002684:	4a28      	ldr	r2, [pc, #160]	@ (8002728 <FACEID+0x318>)
 8002686:	4929      	ldr	r1, [pc, #164]	@ (800272c <FACEID+0x31c>)
 8002688:	4816      	ldr	r0, [pc, #88]	@ (80026e4 <FACEID+0x2d4>)
 800268a:	f7fd feb7 	bl	80003fc <CLCD_I2C_Display>
								buzzer(3);
 800268e:	2003      	movs	r0, #3
 8002690:	f001 fb18 	bl	8003cc4 <buzzer>
								HAL_Delay(1000);
 8002694:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002698:	f002 f822 	bl	80046e0 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 800269c:	4a1b      	ldr	r2, [pc, #108]	@ (800270c <FACEID+0x2fc>)
 800269e:	4918      	ldr	r1, [pc, #96]	@ (8002700 <FACEID+0x2f0>)
 80026a0:	4810      	ldr	r0, [pc, #64]	@ (80026e4 <FACEID+0x2d4>)
 80026a2:	f7fd feab 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
							}
							break;
 80026a6:	e00c      	b.n	80026c2 <FACEID+0x2b2>
								addface(keyadd1);
 80026a8:	79bb      	ldrb	r3, [r7, #6]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fe0e 	bl	80032cc <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80026b0:	4a16      	ldr	r2, [pc, #88]	@ (800270c <FACEID+0x2fc>)
 80026b2:	4913      	ldr	r1, [pc, #76]	@ (8002700 <FACEID+0x2f0>)
 80026b4:	480b      	ldr	r0, [pc, #44]	@ (80026e4 <FACEID+0x2d4>)
 80026b6:	f7fd fea1 	bl	80003fc <CLCD_I2C_Display>
							break;
 80026ba:	e002      	b.n	80026c2 <FACEID+0x2b2>
						default:
							back = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	737b      	strb	r3, [r7, #13]
							break;
 80026c0:	bf00      	nop
				while (back == 1)
 80026c2:	7b7b      	ldrb	r3, [r7, #13]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	f43f aeff 	beq.w	80024c8 <FACEID+0xb8>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 80026ca:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <FACEID+0x2d8>)
 80026cc:	4904      	ldr	r1, [pc, #16]	@ (80026e0 <FACEID+0x2d0>)
 80026ce:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <FACEID+0x2d4>)
 80026d0:	f7fd fe94 	bl	80003fc <CLCD_I2C_Display>
				break;
 80026d4:	e226      	b.n	8002b24 <FACEID+0x714>
 80026d6:	bf00      	nop
 80026d8:	20000020 	.word	0x20000020
 80026dc:	0800dd88 	.word	0x0800dd88
 80026e0:	0800e114 	.word	0x0800e114
 80026e4:	200003d8 	.word	0x200003d8
 80026e8:	0800e128 	.word	0x0800e128
 80026ec:	0800e138 	.word	0x0800e138
 80026f0:	0800ddd4 	.word	0x0800ddd4
 80026f4:	0800dddc 	.word	0x0800dddc
 80026f8:	0800dde8 	.word	0x0800dde8
 80026fc:	0800e14c 	.word	0x0800e14c
 8002700:	0800e158 	.word	0x0800e158
 8002704:	0800e164 	.word	0x0800e164
 8002708:	0800e170 	.word	0x0800e170
 800270c:	0800e17c 	.word	0x0800e17c
 8002710:	0800e188 	.word	0x0800e188
 8002714:	0800e19c 	.word	0x0800e19c
 8002718:	0800e1ac 	.word	0x0800e1ac
 800271c:	0800e1c0 	.word	0x0800e1c0
 8002720:	0800e1d0 	.word	0x0800e1d0
 8002724:	0800e1e4 	.word	0x0800e1e4
 8002728:	0800e1f4 	.word	0x0800e1f4
 800272c:	0800e208 	.word	0x0800e208
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8002730:	4aa8      	ldr	r2, [pc, #672]	@ (80029d4 <FACEID+0x5c4>)
 8002732:	49a9      	ldr	r1, [pc, #676]	@ (80029d8 <FACEID+0x5c8>)
 8002734:	48a9      	ldr	r0, [pc, #676]	@ (80029dc <FACEID+0x5cc>)
 8002736:	f7fd fe61 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	733b      	strb	r3, [r7, #12]
				uint8_t backrm = 1;
 800273e:	2301      	movs	r3, #1
 8002740:	72fb      	strb	r3, [r7, #11]
				while (backrm == 1)
 8002742:	e1e1      	b.n	8002b08 <FACEID+0x6f8>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002744:	200a      	movs	r0, #10
 8002746:	f7fd ffb3 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800274a:	4603      	mov	r3, r0
 800274c:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 800274e:	4ba4      	ldr	r3, [pc, #656]	@ (80029e0 <FACEID+0x5d0>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <FACEID+0x356>
					{
						CLCD_I2C_Clear(&LCD1);
 8002756:	48a1      	ldr	r0, [pc, #644]	@ (80029dc <FACEID+0x5cc>)
 8002758:	f7fd fe40 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800275c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002760:	f001 ffbe 	bl	80046e0 <HAL_Delay>
						return;
 8002764:	e1e6      	b.n	8002b34 <FACEID+0x724>
					}
					if (key_pressed == '*')
 8002766:	7a3b      	ldrb	r3, [r7, #8]
 8002768:	2b2a      	cmp	r3, #42	@ 0x2a
 800276a:	d127      	bne.n	80027bc <FACEID+0x3ac>
					{
						buzzer(1);
 800276c:	2001      	movs	r0, #1
 800276e:	f001 faa9 	bl	8003cc4 <buzzer>
						exitmenu = Delaymenu;
 8002772:	4b9b      	ldr	r3, [pc, #620]	@ (80029e0 <FACEID+0x5d0>)
 8002774:	2214      	movs	r2, #20
 8002776:	701a      	strb	r2, [r3, #0]
						statusrm++;
 8002778:	7b3b      	ldrb	r3, [r7, #12]
 800277a:	3301      	adds	r3, #1
 800277c:	733b      	strb	r3, [r7, #12]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 800277e:	7b3b      	ldrb	r3, [r7, #12]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d801      	bhi.n	8002788 <FACEID+0x378>
 8002784:	7b3b      	ldrb	r3, [r7, #12]
 8002786:	e000      	b.n	800278a <FACEID+0x37a>
 8002788:	2300      	movs	r3, #0
 800278a:	733b      	strb	r3, [r7, #12]
						switch (statusrm)
 800278c:	7b3b      	ldrb	r3, [r7, #12]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d002      	beq.n	8002798 <FACEID+0x388>
 8002792:	2b02      	cmp	r3, #2
 8002794:	d006      	beq.n	80027a4 <FACEID+0x394>
 8002796:	e00b      	b.n	80027b0 <FACEID+0x3a0>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 8002798:	4a92      	ldr	r2, [pc, #584]	@ (80029e4 <FACEID+0x5d4>)
 800279a:	4993      	ldr	r1, [pc, #588]	@ (80029e8 <FACEID+0x5d8>)
 800279c:	488f      	ldr	r0, [pc, #572]	@ (80029dc <FACEID+0x5cc>)
 800279e:	f7fd fe2d 	bl	80003fc <CLCD_I2C_Display>
							break;
 80027a2:	e00b      	b.n	80027bc <FACEID+0x3ac>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
 80027a4:	4a91      	ldr	r2, [pc, #580]	@ (80029ec <FACEID+0x5dc>)
 80027a6:	4990      	ldr	r1, [pc, #576]	@ (80029e8 <FACEID+0x5d8>)
 80027a8:	488c      	ldr	r0, [pc, #560]	@ (80029dc <FACEID+0x5cc>)
 80027aa:	f7fd fe27 	bl	80003fc <CLCD_I2C_Display>
							break;
 80027ae:	e005      	b.n	80027bc <FACEID+0x3ac>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Back");
 80027b0:	4a8f      	ldr	r2, [pc, #572]	@ (80029f0 <FACEID+0x5e0>)
 80027b2:	498d      	ldr	r1, [pc, #564]	@ (80029e8 <FACEID+0x5d8>)
 80027b4:	4889      	ldr	r0, [pc, #548]	@ (80029dc <FACEID+0x5cc>)
 80027b6:	f7fd fe21 	bl	80003fc <CLCD_I2C_Display>
							break;
 80027ba:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 80027bc:	7a3b      	ldrb	r3, [r7, #8]
 80027be:	2b23      	cmp	r3, #35	@ 0x23
 80027c0:	f040 81a2 	bne.w	8002b08 <FACEID+0x6f8>
					{
						buzzer(1);
 80027c4:	2001      	movs	r0, #1
 80027c6:	f001 fa7d 	bl	8003cc4 <buzzer>
						exitmenu = Delaymenu;
 80027ca:	4b85      	ldr	r3, [pc, #532]	@ (80029e0 <FACEID+0x5d0>)
 80027cc:	2214      	movs	r2, #20
 80027ce:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 80027d0:	7b3b      	ldrb	r3, [r7, #12]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d003      	beq.n	80027de <FACEID+0x3ce>
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	f000 8161 	beq.w	8002a9e <FACEID+0x68e>
 80027dc:	e191      	b.n	8002b02 <FACEID+0x6f2>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80027de:	4a7d      	ldr	r2, [pc, #500]	@ (80029d4 <FACEID+0x5c4>)
 80027e0:	497d      	ldr	r1, [pc, #500]	@ (80029d8 <FACEID+0x5c8>)
 80027e2:	487e      	ldr	r0, [pc, #504]	@ (80029dc <FACEID+0x5cc>)
 80027e4:	f7fd fe0a 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusrm1 = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	72bb      	strb	r3, [r7, #10]
							uint8_t backrm1 = 1;
 80027ec:	2301      	movs	r3, #1
 80027ee:	727b      	strb	r3, [r7, #9]
							while (backrm1 == 1)
 80027f0:	e14b      	b.n	8002a8a <FACEID+0x67a>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 80027f2:	200a      	movs	r0, #10
 80027f4:	f7fd ff5c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80027f8:	4603      	mov	r3, r0
 80027fa:	723b      	strb	r3, [r7, #8]
								if (exitmenu == 0)
 80027fc:	4b78      	ldr	r3, [pc, #480]	@ (80029e0 <FACEID+0x5d0>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <FACEID+0x404>
								{
									CLCD_I2C_Clear(&LCD1);
 8002804:	4875      	ldr	r0, [pc, #468]	@ (80029dc <FACEID+0x5cc>)
 8002806:	f7fd fde9 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800280a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800280e:	f001 ff67 	bl	80046e0 <HAL_Delay>
									return;
 8002812:	e18f      	b.n	8002b34 <FACEID+0x724>
								}
								if (key_pressed == '*')
 8002814:	7a3b      	ldrb	r3, [r7, #8]
 8002816:	2b2a      	cmp	r3, #42	@ 0x2a
 8002818:	d13c      	bne.n	8002894 <FACEID+0x484>
								{
									buzzer(1);
 800281a:	2001      	movs	r0, #1
 800281c:	f001 fa52 	bl	8003cc4 <buzzer>
									exitmenu = Delaymenu;
 8002820:	4b6f      	ldr	r3, [pc, #444]	@ (80029e0 <FACEID+0x5d0>)
 8002822:	2214      	movs	r2, #20
 8002824:	701a      	strb	r2, [r3, #0]
									statusrm1++;
 8002826:	7abb      	ldrb	r3, [r7, #10]
 8002828:	3301      	adds	r3, #1
 800282a:	72bb      	strb	r3, [r7, #10]
									statusrm1 = (statusrm1 > 4) ? 0 : statusrm1;
 800282c:	7abb      	ldrb	r3, [r7, #10]
 800282e:	2b04      	cmp	r3, #4
 8002830:	d801      	bhi.n	8002836 <FACEID+0x426>
 8002832:	7abb      	ldrb	r3, [r7, #10]
 8002834:	e000      	b.n	8002838 <FACEID+0x428>
 8002836:	2300      	movs	r3, #0
 8002838:	72bb      	strb	r3, [r7, #10]
									switch (statusrm1)
 800283a:	7abb      	ldrb	r3, [r7, #10]
 800283c:	3b01      	subs	r3, #1
 800283e:	2b03      	cmp	r3, #3
 8002840:	d822      	bhi.n	8002888 <FACEID+0x478>
 8002842:	a201      	add	r2, pc, #4	@ (adr r2, 8002848 <FACEID+0x438>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	08002859 	.word	0x08002859
 800284c:	08002865 	.word	0x08002865
 8002850:	08002871 	.word	0x08002871
 8002854:	0800287d 	.word	0x0800287d
									{
									case 1:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002858:	4a66      	ldr	r2, [pc, #408]	@ (80029f4 <FACEID+0x5e4>)
 800285a:	4967      	ldr	r1, [pc, #412]	@ (80029f8 <FACEID+0x5e8>)
 800285c:	485f      	ldr	r0, [pc, #380]	@ (80029dc <FACEID+0x5cc>)
 800285e:	f7fd fdcd 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002862:	e017      	b.n	8002894 <FACEID+0x484>
									case 2:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002864:	4a65      	ldr	r2, [pc, #404]	@ (80029fc <FACEID+0x5ec>)
 8002866:	4964      	ldr	r1, [pc, #400]	@ (80029f8 <FACEID+0x5e8>)
 8002868:	485c      	ldr	r0, [pc, #368]	@ (80029dc <FACEID+0x5cc>)
 800286a:	f7fd fdc7 	bl	80003fc <CLCD_I2C_Display>
										break;
 800286e:	e011      	b.n	8002894 <FACEID+0x484>
									case 3:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 8002870:	4a63      	ldr	r2, [pc, #396]	@ (8002a00 <FACEID+0x5f0>)
 8002872:	4961      	ldr	r1, [pc, #388]	@ (80029f8 <FACEID+0x5e8>)
 8002874:	4859      	ldr	r0, [pc, #356]	@ (80029dc <FACEID+0x5cc>)
 8002876:	f7fd fdc1 	bl	80003fc <CLCD_I2C_Display>
										break;
 800287a:	e00b      	b.n	8002894 <FACEID+0x484>
									case 4:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 800287c:	4a61      	ldr	r2, [pc, #388]	@ (8002a04 <FACEID+0x5f4>)
 800287e:	495e      	ldr	r1, [pc, #376]	@ (80029f8 <FACEID+0x5e8>)
 8002880:	4856      	ldr	r0, [pc, #344]	@ (80029dc <FACEID+0x5cc>)
 8002882:	f7fd fdbb 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002886:	e005      	b.n	8002894 <FACEID+0x484>
									default:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=>  Back ");
 8002888:	4a5f      	ldr	r2, [pc, #380]	@ (8002a08 <FACEID+0x5f8>)
 800288a:	495b      	ldr	r1, [pc, #364]	@ (80029f8 <FACEID+0x5e8>)
 800288c:	4853      	ldr	r0, [pc, #332]	@ (80029dc <FACEID+0x5cc>)
 800288e:	f7fd fdb5 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002892:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 8002894:	7a3b      	ldrb	r3, [r7, #8]
 8002896:	2b23      	cmp	r3, #35	@ 0x23
 8002898:	f040 80f7 	bne.w	8002a8a <FACEID+0x67a>
								{
									buzzer(1);
 800289c:	2001      	movs	r0, #1
 800289e:	f001 fa11 	bl	8003cc4 <buzzer>
									exitmenu = Delaymenu;
 80028a2:	4b4f      	ldr	r3, [pc, #316]	@ (80029e0 <FACEID+0x5d0>)
 80028a4:	2214      	movs	r2, #20
 80028a6:	701a      	strb	r2, [r3, #0]
									uint8_t keyrm1 = statusrm1;
 80028a8:	7abb      	ldrb	r3, [r7, #10]
 80028aa:	71fb      	strb	r3, [r7, #7]
									switch (keyrm1)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	f200 80e7 	bhi.w	8002a84 <FACEID+0x674>
 80028b6:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <FACEID+0x4ac>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	08002925 	.word	0x08002925
 80028c4:	0800297d 	.word	0x0800297d
 80028c8:	08002a2d 	.word	0x08002a2d
									{
									case 1:
										if (checkfaceid(keyrm1) == 0)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fdbe 	bl	8003450 <checkfaceid>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d111      	bne.n	80028fe <FACEID+0x4ee>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 1", "  Do Not Exist");
 80028da:	4a4c      	ldr	r2, [pc, #304]	@ (8002a0c <FACEID+0x5fc>)
 80028dc:	494c      	ldr	r1, [pc, #304]	@ (8002a10 <FACEID+0x600>)
 80028de:	483f      	ldr	r0, [pc, #252]	@ (80029dc <FACEID+0x5cc>)
 80028e0:	f7fd fd8c 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f001 f9ed 	bl	8003cc4 <buzzer>
											HAL_Delay(1000);
 80028ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028ee:	f001 fef7 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 80028f2:	4a40      	ldr	r2, [pc, #256]	@ (80029f4 <FACEID+0x5e4>)
 80028f4:	4940      	ldr	r1, [pc, #256]	@ (80029f8 <FACEID+0x5e8>)
 80028f6:	4839      	ldr	r0, [pc, #228]	@ (80029dc <FACEID+0x5cc>)
 80028f8:	f7fd fd80 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
										}
										break;
 80028fc:	e0c5      	b.n	8002a8a <FACEID+0x67a>
											removeface(keyrm1);
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fd45 	bl	8003390 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
 8002906:	4a43      	ldr	r2, [pc, #268]	@ (8002a14 <FACEID+0x604>)
 8002908:	4943      	ldr	r1, [pc, #268]	@ (8002a18 <FACEID+0x608>)
 800290a:	4834      	ldr	r0, [pc, #208]	@ (80029dc <FACEID+0x5cc>)
 800290c:	f7fd fd76 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002910:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002914:	f001 fee4 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002918:	4a36      	ldr	r2, [pc, #216]	@ (80029f4 <FACEID+0x5e4>)
 800291a:	4937      	ldr	r1, [pc, #220]	@ (80029f8 <FACEID+0x5e8>)
 800291c:	482f      	ldr	r0, [pc, #188]	@ (80029dc <FACEID+0x5cc>)
 800291e:	f7fd fd6d 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002922:	e0b2      	b.n	8002a8a <FACEID+0x67a>
									case 2:
										if (checkfaceid(keyrm1) == 0)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fd92 	bl	8003450 <checkfaceid>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d111      	bne.n	8002956 <FACEID+0x546>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 2", "  Do Not Exist");
 8002932:	4a36      	ldr	r2, [pc, #216]	@ (8002a0c <FACEID+0x5fc>)
 8002934:	4939      	ldr	r1, [pc, #228]	@ (8002a1c <FACEID+0x60c>)
 8002936:	4829      	ldr	r0, [pc, #164]	@ (80029dc <FACEID+0x5cc>)
 8002938:	f7fd fd60 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 800293c:	2003      	movs	r0, #3
 800293e:	f001 f9c1 	bl	8003cc4 <buzzer>
											HAL_Delay(1000);
 8002942:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002946:	f001 fecb 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 800294a:	4a2c      	ldr	r2, [pc, #176]	@ (80029fc <FACEID+0x5ec>)
 800294c:	492a      	ldr	r1, [pc, #168]	@ (80029f8 <FACEID+0x5e8>)
 800294e:	4823      	ldr	r0, [pc, #140]	@ (80029dc <FACEID+0x5cc>)
 8002950:	f7fd fd54 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
										}
										break;
 8002954:	e099      	b.n	8002a8a <FACEID+0x67a>
											removeface(keyrm1);
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fd19 	bl	8003390 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
 800295e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a14 <FACEID+0x604>)
 8002960:	492f      	ldr	r1, [pc, #188]	@ (8002a20 <FACEID+0x610>)
 8002962:	481e      	ldr	r0, [pc, #120]	@ (80029dc <FACEID+0x5cc>)
 8002964:	f7fd fd4a 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002968:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800296c:	f001 feb8 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002970:	4a22      	ldr	r2, [pc, #136]	@ (80029fc <FACEID+0x5ec>)
 8002972:	4921      	ldr	r1, [pc, #132]	@ (80029f8 <FACEID+0x5e8>)
 8002974:	4819      	ldr	r0, [pc, #100]	@ (80029dc <FACEID+0x5cc>)
 8002976:	f7fd fd41 	bl	80003fc <CLCD_I2C_Display>
										break;
 800297a:	e086      	b.n	8002a8a <FACEID+0x67a>
									case 3:
										if (checkfaceid(keyrm1) == 0)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fd66 	bl	8003450 <checkfaceid>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d111      	bne.n	80029ae <FACEID+0x59e>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 3", "  Do Not Exist");
 800298a:	4a20      	ldr	r2, [pc, #128]	@ (8002a0c <FACEID+0x5fc>)
 800298c:	4925      	ldr	r1, [pc, #148]	@ (8002a24 <FACEID+0x614>)
 800298e:	4813      	ldr	r0, [pc, #76]	@ (80029dc <FACEID+0x5cc>)
 8002990:	f7fd fd34 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002994:	2003      	movs	r0, #3
 8002996:	f001 f995 	bl	8003cc4 <buzzer>
											HAL_Delay(1000);
 800299a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800299e:	f001 fe9f 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80029a2:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <FACEID+0x5f0>)
 80029a4:	4914      	ldr	r1, [pc, #80]	@ (80029f8 <FACEID+0x5e8>)
 80029a6:	480d      	ldr	r0, [pc, #52]	@ (80029dc <FACEID+0x5cc>)
 80029a8:	f7fd fd28 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
										}
										break;
 80029ac:	e06d      	b.n	8002a8a <FACEID+0x67a>
											removeface(keyrm1);
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fced 	bl	8003390 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
 80029b6:	4a17      	ldr	r2, [pc, #92]	@ (8002a14 <FACEID+0x604>)
 80029b8:	491b      	ldr	r1, [pc, #108]	@ (8002a28 <FACEID+0x618>)
 80029ba:	4808      	ldr	r0, [pc, #32]	@ (80029dc <FACEID+0x5cc>)
 80029bc:	f7fd fd1e 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80029c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029c4:	f001 fe8c 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80029c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <FACEID+0x5f0>)
 80029ca:	490b      	ldr	r1, [pc, #44]	@ (80029f8 <FACEID+0x5e8>)
 80029cc:	4803      	ldr	r0, [pc, #12]	@ (80029dc <FACEID+0x5cc>)
 80029ce:	f7fd fd15 	bl	80003fc <CLCD_I2C_Display>
										break;
 80029d2:	e05a      	b.n	8002a8a <FACEID+0x67a>
 80029d4:	0800dddc 	.word	0x0800dddc
 80029d8:	0800dde8 	.word	0x0800dde8
 80029dc:	200003d8 	.word	0x200003d8
 80029e0:	20000020 	.word	0x20000020
 80029e4:	0800e218 	.word	0x0800e218
 80029e8:	0800e22c 	.word	0x0800e22c
 80029ec:	0800df58 	.word	0x0800df58
 80029f0:	0800ddd4 	.word	0x0800ddd4
 80029f4:	0800e23c 	.word	0x0800e23c
 80029f8:	0800df78 	.word	0x0800df78
 80029fc:	0800e250 	.word	0x0800e250
 8002a00:	0800e264 	.word	0x0800e264
 8002a04:	0800e278 	.word	0x0800e278
 8002a08:	0800e28c 	.word	0x0800e28c
 8002a0c:	0800e00c 	.word	0x0800e00c
 8002a10:	0800e298 	.word	0x0800e298
 8002a14:	0800e01c 	.word	0x0800e01c
 8002a18:	0800e2a8 	.word	0x0800e2a8
 8002a1c:	0800e2b8 	.word	0x0800e2b8
 8002a20:	0800e2c8 	.word	0x0800e2c8
 8002a24:	0800e2d8 	.word	0x0800e2d8
 8002a28:	0800e2e8 	.word	0x0800e2e8
									case 4:
										if (checkfaceid(keyrm1) == 0)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fd0e 	bl	8003450 <checkfaceid>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d111      	bne.n	8002a5e <FACEID+0x64e>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 4", "  Do Not Exist");
 8002a3a:	4a40      	ldr	r2, [pc, #256]	@ (8002b3c <FACEID+0x72c>)
 8002a3c:	4940      	ldr	r1, [pc, #256]	@ (8002b40 <FACEID+0x730>)
 8002a3e:	4841      	ldr	r0, [pc, #260]	@ (8002b44 <FACEID+0x734>)
 8002a40:	f7fd fcdc 	bl	80003fc <CLCD_I2C_Display>
											buzzer(3);
 8002a44:	2003      	movs	r0, #3
 8002a46:	f001 f93d 	bl	8003cc4 <buzzer>
											HAL_Delay(1000);
 8002a4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a4e:	f001 fe47 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002a52:	4a3d      	ldr	r2, [pc, #244]	@ (8002b48 <FACEID+0x738>)
 8002a54:	493d      	ldr	r1, [pc, #244]	@ (8002b4c <FACEID+0x73c>)
 8002a56:	483b      	ldr	r0, [pc, #236]	@ (8002b44 <FACEID+0x734>)
 8002a58:	f7fd fcd0 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
										}
										break;
 8002a5c:	e015      	b.n	8002a8a <FACEID+0x67a>
											removeface(keyrm1);
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fc95 	bl	8003390 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
 8002a66:	4a3a      	ldr	r2, [pc, #232]	@ (8002b50 <FACEID+0x740>)
 8002a68:	493a      	ldr	r1, [pc, #232]	@ (8002b54 <FACEID+0x744>)
 8002a6a:	4836      	ldr	r0, [pc, #216]	@ (8002b44 <FACEID+0x734>)
 8002a6c:	f7fd fcc6 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002a70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a74:	f001 fe34 	bl	80046e0 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002a78:	4a33      	ldr	r2, [pc, #204]	@ (8002b48 <FACEID+0x738>)
 8002a7a:	4934      	ldr	r1, [pc, #208]	@ (8002b4c <FACEID+0x73c>)
 8002a7c:	4831      	ldr	r0, [pc, #196]	@ (8002b44 <FACEID+0x734>)
 8002a7e:	f7fd fcbd 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002a82:	e002      	b.n	8002a8a <FACEID+0x67a>
									default:
										backrm1 = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	727b      	strb	r3, [r7, #9]
										break;
 8002a88:	bf00      	nop
							while (backrm1 == 1)
 8002a8a:	7a7b      	ldrb	r3, [r7, #9]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	f43f aeb0 	beq.w	80027f2 <FACEID+0x3e2>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 8002a92:	4a31      	ldr	r2, [pc, #196]	@ (8002b58 <FACEID+0x748>)
 8002a94:	4931      	ldr	r1, [pc, #196]	@ (8002b5c <FACEID+0x74c>)
 8002a96:	482b      	ldr	r0, [pc, #172]	@ (8002b44 <FACEID+0x734>)
 8002a98:	f7fd fcb0 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002a9c:	e034      	b.n	8002b08 <FACEID+0x6f8>
						case 2:
							sprintf(Tx_Buffer , "Del.ALL" );
 8002a9e:	4930      	ldr	r1, [pc, #192]	@ (8002b60 <FACEID+0x750>)
 8002aa0:	4830      	ldr	r0, [pc, #192]	@ (8002b64 <FACEID+0x754>)
 8002aa2:	f00a fc6d 	bl	800d380 <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 7);
 8002aa6:	2107      	movs	r1, #7
 8002aa8:	482e      	ldr	r0, [pc, #184]	@ (8002b64 <FACEID+0x754>)
 8002aaa:	f00a f857 	bl	800cb5c <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002aae:	4a2e      	ldr	r2, [pc, #184]	@ (8002b68 <FACEID+0x758>)
 8002ab0:	492e      	ldr	r1, [pc, #184]	@ (8002b6c <FACEID+0x75c>)
 8002ab2:	4824      	ldr	r0, [pc, #144]	@ (8002b44 <FACEID+0x734>)
 8002ab4:	f7fd fca2 	bl	80003fc <CLCD_I2C_Display>
							exitmenu = 60;
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b70 <FACEID+0x760>)
 8002aba:	223c      	movs	r2, #60	@ 0x3c
 8002abc:	701a      	strb	r2, [r3, #0]
							memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002abe:	2280      	movs	r2, #128	@ 0x80
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	482c      	ldr	r0, [pc, #176]	@ (8002b74 <FACEID+0x764>)
 8002ac4:	f00a fc7c 	bl	800d3c0 <memset>
							while(exitmenu != 0){
 8002ac8:	e013      	b.n	8002af2 <FACEID+0x6e2>
								if(Rx_Buffer[0] == 'T'){
 8002aca:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <FACEID+0x764>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	2b54      	cmp	r3, #84	@ 0x54
 8002ad2:	d10e      	bne.n	8002af2 <FACEID+0x6e2>
									CLCD_I2C_Display(&LCD1, "REMOVE ALL FACE","   SUCCESSFUL  ");
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b50 <FACEID+0x740>)
 8002ad6:	4928      	ldr	r1, [pc, #160]	@ (8002b78 <FACEID+0x768>)
 8002ad8:	481a      	ldr	r0, [pc, #104]	@ (8002b44 <FACEID+0x734>)
 8002ada:	f7fd fc8f 	bl	80003fc <CLCD_I2C_Display>
									HAL_Delay(2000);
 8002ade:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ae2:	f001 fdfd 	bl	80046e0 <HAL_Delay>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002ae6:	2280      	movs	r2, #128	@ 0x80
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4822      	ldr	r0, [pc, #136]	@ (8002b74 <FACEID+0x764>)
 8002aec:	f00a fc68 	bl	800d3c0 <memset>
									break;
 8002af0:	e003      	b.n	8002afa <FACEID+0x6ea>
							while(exitmenu != 0){
 8002af2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <FACEID+0x760>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e7      	bne.n	8002aca <FACEID+0x6ba>
								}
							}
							exitmenu = 0;
 8002afa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <FACEID+0x760>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
							// CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
							break;
 8002b00:	e002      	b.n	8002b08 <FACEID+0x6f8>
						default:
							backrm=0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	72fb      	strb	r3, [r7, #11]
							break;
 8002b06:	bf00      	nop
				while (backrm == 1)
 8002b08:	7afb      	ldrb	r3, [r7, #11]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	f43f ae1a 	beq.w	8002744 <FACEID+0x334>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002b10:	4a1a      	ldr	r2, [pc, #104]	@ (8002b7c <FACEID+0x76c>)
 8002b12:	491b      	ldr	r1, [pc, #108]	@ (8002b80 <FACEID+0x770>)
 8002b14:	480b      	ldr	r0, [pc, #44]	@ (8002b44 <FACEID+0x734>)
 8002b16:	f7fd fc71 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002b1a:	e003      	b.n	8002b24 <FACEID+0x714>
			default:
				exitmenu=0;
 8002b1c:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <FACEID+0x760>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
				break;
 8002b22:	bf00      	nop
	while (exitmenu )
 8002b24:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <FACEID+0x760>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f47f ac82 	bne.w	8002432 <FACEID+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002b2e:	4805      	ldr	r0, [pc, #20]	@ (8002b44 <FACEID+0x734>)
 8002b30:	f7fd fc54 	bl	80003dc <CLCD_I2C_Clear>
}
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	0800e00c 	.word	0x0800e00c
 8002b40:	0800e2f8 	.word	0x0800e2f8
 8002b44:	200003d8 	.word	0x200003d8
 8002b48:	0800e278 	.word	0x0800e278
 8002b4c:	0800df78 	.word	0x0800df78
 8002b50:	0800e01c 	.word	0x0800e01c
 8002b54:	0800e308 	.word	0x0800e308
 8002b58:	0800e218 	.word	0x0800e218
 8002b5c:	0800e22c 	.word	0x0800e22c
 8002b60:	0800e318 	.word	0x0800e318
 8002b64:	200003d0 	.word	0x200003d0
 8002b68:	0800dd08 	.word	0x0800dd08
 8002b6c:	0800e320 	.word	0x0800e320
 8002b70:	20000020 	.word	0x20000020
 8002b74:	20000350 	.word	0x20000350
 8002b78:	0800e32c 	.word	0x0800e32c
 8002b7c:	0800e138 	.word	0x0800e138
 8002b80:	0800e114 	.word	0x0800e114

08002b84 <FINGER>:
void FINGER(void) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
	buzzer(1);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f001 f89a 	bl	8003cc4 <buzzer>
	exitmenu = Delaymenu;
 8002b90:	4b3e      	ldr	r3, [pc, #248]	@ (8002c8c <FINGER+0x108>)
 8002b92:	2214      	movs	r2, #20
 8002b94:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002b96:	23ff      	movs	r3, #255	@ 0xff
 8002b98:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"FINGER SETTING ","Pls Press DOWN");
 8002b9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002c90 <FINGER+0x10c>)
 8002b9c:	493d      	ldr	r1, [pc, #244]	@ (8002c94 <FINGER+0x110>)
 8002b9e:	483e      	ldr	r0, [pc, #248]	@ (8002c98 <FINGER+0x114>)
 8002ba0:	f7fd fc2c 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002ba4:	e068      	b.n	8002c78 <FINGER+0xf4>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002ba6:	200a      	movs	r0, #10
 8002ba8:	f7fd fd82 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002bac:	4603      	mov	r3, r0
 8002bae:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 8002bb0:	79bb      	ldrb	r3, [r7, #6]
 8002bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bb4:	d131      	bne.n	8002c1a <FINGER+0x96>
		{
			buzzer(1);
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f001 f884 	bl	8003cc4 <buzzer>
			exitmenu = Delaymenu;
 8002bbc:	4b33      	ldr	r3, [pc, #204]	@ (8002c8c <FINGER+0x108>)
 8002bbe:	2214      	movs	r2, #20
 8002bc0:	701a      	strb	r2, [r3, #0]
			status++;
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	71fb      	strb	r3, [r7, #7]
			status = (status > 3) ? 0 : status;
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d801      	bhi.n	8002bd2 <FINGER+0x4e>
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	e000      	b.n	8002bd4 <FINGER+0x50>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	71fb      	strb	r3, [r7, #7]
			switch (status)
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d012      	beq.n	8002c02 <FINGER+0x7e>
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	dc16      	bgt.n	8002c0e <FINGER+0x8a>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <FINGER+0x66>
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d006      	beq.n	8002bf6 <FINGER+0x72>
 8002be8:	e011      	b.n	8002c0e <FINGER+0x8a>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 8002bea:	4a2c      	ldr	r2, [pc, #176]	@ (8002c9c <FINGER+0x118>)
 8002bec:	4929      	ldr	r1, [pc, #164]	@ (8002c94 <FINGER+0x110>)
 8002bee:	482a      	ldr	r0, [pc, #168]	@ (8002c98 <FINGER+0x114>)
 8002bf0:	f7fd fc04 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002bf4:	e011      	b.n	8002c1a <FINGER+0x96>
			case 1:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 8002bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca0 <FINGER+0x11c>)
 8002bf8:	4926      	ldr	r1, [pc, #152]	@ (8002c94 <FINGER+0x110>)
 8002bfa:	4827      	ldr	r0, [pc, #156]	@ (8002c98 <FINGER+0x114>)
 8002bfc:	f7fd fbfe 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002c00:	e00b      	b.n	8002c1a <FINGER+0x96>
            case 2:
                CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002c02:	4a28      	ldr	r2, [pc, #160]	@ (8002ca4 <FINGER+0x120>)
 8002c04:	4923      	ldr	r1, [pc, #140]	@ (8002c94 <FINGER+0x110>)
 8002c06:	4824      	ldr	r0, [pc, #144]	@ (8002c98 <FINGER+0x114>)
 8002c08:	f7fd fbf8 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002c0c:	e005      	b.n	8002c1a <FINGER+0x96>
			default:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Back");
 8002c0e:	4a26      	ldr	r2, [pc, #152]	@ (8002ca8 <FINGER+0x124>)
 8002c10:	4920      	ldr	r1, [pc, #128]	@ (8002c94 <FINGER+0x110>)
 8002c12:	4821      	ldr	r0, [pc, #132]	@ (8002c98 <FINGER+0x114>)
 8002c14:	f7fd fbf2 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002c18:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002c1a:	79bb      	ldrb	r3, [r7, #6]
 8002c1c:	2b23      	cmp	r3, #35	@ 0x23
 8002c1e:	d12b      	bne.n	8002c78 <FINGER+0xf4>
		{
			buzzer(1);
 8002c20:	2001      	movs	r0, #1
 8002c22:	f001 f84f 	bl	8003cc4 <buzzer>
			exitmenu = Delaymenu;
 8002c26:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <FINGER+0x108>)
 8002c28:	2214      	movs	r2, #20
 8002c2a:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d016      	beq.n	8002c60 <FINGER+0xdc>
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	dc1c      	bgt.n	8002c70 <FINGER+0xec>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <FINGER+0xbc>
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d008      	beq.n	8002c50 <FINGER+0xcc>
 8002c3e:	e017      	b.n	8002c70 <FINGER+0xec>
			{
			case 0:
                add_finger();
 8002c40:	f000 fc42 	bl	80034c8 <add_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 8002c44:	4a15      	ldr	r2, [pc, #84]	@ (8002c9c <FINGER+0x118>)
 8002c46:	4913      	ldr	r1, [pc, #76]	@ (8002c94 <FINGER+0x110>)
 8002c48:	4813      	ldr	r0, [pc, #76]	@ (8002c98 <FINGER+0x114>)
 8002c4a:	f7fd fbd7 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002c4e:	e013      	b.n	8002c78 <FINGER+0xf4>
            case 1:
                remove_id_finger();
 8002c50:	f000 fe06 	bl	8003860 <remove_id_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 8002c54:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <FINGER+0x11c>)
 8002c56:	490f      	ldr	r1, [pc, #60]	@ (8002c94 <FINGER+0x110>)
 8002c58:	480f      	ldr	r0, [pc, #60]	@ (8002c98 <FINGER+0x114>)
 8002c5a:	f7fd fbcf 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002c5e:	e00b      	b.n	8002c78 <FINGER+0xf4>
            case 2:
                remove_all_finger();
 8002c60:	f000 fe7a 	bl	8003958 <remove_all_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002c64:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca4 <FINGER+0x120>)
 8002c66:	490b      	ldr	r1, [pc, #44]	@ (8002c94 <FINGER+0x110>)
 8002c68:	480b      	ldr	r0, [pc, #44]	@ (8002c98 <FINGER+0x114>)
 8002c6a:	f7fd fbc7 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002c6e:	e003      	b.n	8002c78 <FINGER+0xf4>
            default:
                exitmenu = 0;
 8002c70:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <FINGER+0x108>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
                break;
 8002c76:	bf00      	nop
	while (exitmenu )
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <FINGER+0x108>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d192      	bne.n	8002ba6 <FINGER+0x22>
            }
        }
    }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000020 	.word	0x20000020
 8002c90:	0800dd88 	.word	0x0800dd88
 8002c94:	0800e33c 	.word	0x0800e33c
 8002c98:	200003d8 	.word	0x200003d8
 8002c9c:	0800e34c 	.word	0x0800e34c
 8002ca0:	0800e35c 	.word	0x0800e35c
 8002ca4:	0800e370 	.word	0x0800e370
 8002ca8:	0800ddd4 	.word	0x0800ddd4

08002cac <PASSWORD>:


void PASSWORD(void) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
	buzzer(1);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f001 f806 	bl	8003cc4 <buzzer>
	exitmenu = Delaymenu;
 8002cb8:	4b33      	ldr	r3, [pc, #204]	@ (8002d88 <PASSWORD+0xdc>)
 8002cba:	2214      	movs	r2, #20
 8002cbc:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002cbe:	23ff      	movs	r3, #255	@ 0xff
 8002cc0:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","Pls Press DOWN");
 8002cc2:	4a32      	ldr	r2, [pc, #200]	@ (8002d8c <PASSWORD+0xe0>)
 8002cc4:	4932      	ldr	r1, [pc, #200]	@ (8002d90 <PASSWORD+0xe4>)
 8002cc6:	4833      	ldr	r0, [pc, #204]	@ (8002d94 <PASSWORD+0xe8>)
 8002cc8:	f7fd fb98 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002ccc:	e052      	b.n	8002d74 <PASSWORD+0xc8>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002cce:	200a      	movs	r0, #10
 8002cd0:	f7fd fcee 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 8002cd8:	79bb      	ldrb	r3, [r7, #6]
 8002cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cdc:	d127      	bne.n	8002d2e <PASSWORD+0x82>
		{
			buzzer(1);
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f000 fff0 	bl	8003cc4 <buzzer>
			exitmenu = Delaymenu;
 8002ce4:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <PASSWORD+0xdc>)
 8002ce6:	2214      	movs	r2, #20
 8002ce8:	701a      	strb	r2, [r3, #0]
			status++;
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	3301      	adds	r3, #1
 8002cee:	71fb      	strb	r3, [r7, #7]
			status = (status > 2) ? 0 : status;
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d801      	bhi.n	8002cfa <PASSWORD+0x4e>
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	e000      	b.n	8002cfc <PASSWORD+0x50>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	71fb      	strb	r3, [r7, #7]
			switch (status)
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <PASSWORD+0x5e>
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d006      	beq.n	8002d16 <PASSWORD+0x6a>
 8002d08:	e00b      	b.n	8002d22 <PASSWORD+0x76>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002d0a:	4a23      	ldr	r2, [pc, #140]	@ (8002d98 <PASSWORD+0xec>)
 8002d0c:	4920      	ldr	r1, [pc, #128]	@ (8002d90 <PASSWORD+0xe4>)
 8002d0e:	4821      	ldr	r0, [pc, #132]	@ (8002d94 <PASSWORD+0xe8>)
 8002d10:	f7fd fb74 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002d14:	e00b      	b.n	8002d2e <PASSWORD+0x82>
			case 1:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002d16:	4a21      	ldr	r2, [pc, #132]	@ (8002d9c <PASSWORD+0xf0>)
 8002d18:	491d      	ldr	r1, [pc, #116]	@ (8002d90 <PASSWORD+0xe4>)
 8002d1a:	481e      	ldr	r0, [pc, #120]	@ (8002d94 <PASSWORD+0xe8>)
 8002d1c:	f7fd fb6e 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002d20:	e005      	b.n	8002d2e <PASSWORD+0x82>
			default:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Back");
 8002d22:	4a1f      	ldr	r2, [pc, #124]	@ (8002da0 <PASSWORD+0xf4>)
 8002d24:	491a      	ldr	r1, [pc, #104]	@ (8002d90 <PASSWORD+0xe4>)
 8002d26:	481b      	ldr	r0, [pc, #108]	@ (8002d94 <PASSWORD+0xe8>)
 8002d28:	f7fd fb68 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002d2c:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002d2e:	79bb      	ldrb	r3, [r7, #6]
 8002d30:	2b23      	cmp	r3, #35	@ 0x23
 8002d32:	d11f      	bne.n	8002d74 <PASSWORD+0xc8>
		{
			buzzer(1);
 8002d34:	2001      	movs	r0, #1
 8002d36:	f000 ffc5 	bl	8003cc4 <buzzer>
			exitmenu = Delaymenu;
 8002d3a:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <PASSWORD+0xdc>)
 8002d3c:	2214      	movs	r2, #20
 8002d3e:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <PASSWORD+0xa0>
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d008      	beq.n	8002d5c <PASSWORD+0xb0>
 8002d4a:	e00f      	b.n	8002d6c <PASSWORD+0xc0>
			{
			case 0:
                change_password();
 8002d4c:	f000 febc 	bl	8003ac8 <change_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002d50:	4a11      	ldr	r2, [pc, #68]	@ (8002d98 <PASSWORD+0xec>)
 8002d52:	490f      	ldr	r1, [pc, #60]	@ (8002d90 <PASSWORD+0xe4>)
 8002d54:	480f      	ldr	r0, [pc, #60]	@ (8002d94 <PASSWORD+0xe8>)
 8002d56:	f7fd fb51 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002d5a:	e00b      	b.n	8002d74 <PASSWORD+0xc8>
            case 1:
                set_default_password();
 8002d5c:	f000 ff22 	bl	8003ba4 <set_default_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002d60:	4a0e      	ldr	r2, [pc, #56]	@ (8002d9c <PASSWORD+0xf0>)
 8002d62:	490b      	ldr	r1, [pc, #44]	@ (8002d90 <PASSWORD+0xe4>)
 8002d64:	480b      	ldr	r0, [pc, #44]	@ (8002d94 <PASSWORD+0xe8>)
 8002d66:	f7fd fb49 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002d6a:	e003      	b.n	8002d74 <PASSWORD+0xc8>
            default:
                exitmenu = 0;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <PASSWORD+0xdc>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
                break;
 8002d72:	bf00      	nop
	while (exitmenu )
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <PASSWORD+0xdc>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1a8      	bne.n	8002cce <PASSWORD+0x22>
            }
        }
    }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000020 	.word	0x20000020
 8002d8c:	0800dd88 	.word	0x0800dd88
 8002d90:	0800e380 	.word	0x0800e380
 8002d94:	200003d8 	.word	0x200003d8
 8002d98:	0800e394 	.word	0x0800e394
 8002d9c:	0800e3a4 	.word	0x0800e3a4
 8002da0:	0800ddd4 	.word	0x0800ddd4

08002da4 <CheckUID>:

uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	2208      	movs	r2, #8
 8002db4:	4619      	mov	r1, r3
 8002db6:	6838      	ldr	r0, [r7, #0]
 8002db8:	f7fd ffbe 	bl	8000d38 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002dbc:	7cbb      	ldrb	r3, [r7, #18]
 8002dbe:	2bff      	cmp	r3, #255	@ 0xff
 8002dc0:	d001      	beq.n	8002dc6 <CheckUID+0x22>
		return 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e016      	b.n	8002df4 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]
 8002dca:	e00f      	b.n	8002dec <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	443b      	add	r3, r7
 8002dda:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <CheckUID+0x42>
			return 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e006      	b.n	8002df4 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	3301      	adds	r3, #1
 8002dea:	75fb      	strb	r3, [r7, #23]
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d9ec      	bls.n	8002dcc <CheckUID+0x28>
	}
	return 1;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002e04:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <CheckListUID+0x5c>)
 8002e06:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002e08:	e018      	b.n	8002e3c <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3306      	adds	r3, #6
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd ff79 	bl	8000d06 <Flash_Read_2Byte>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d10a      	bne.n	8002e36 <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ffbe 	bl	8002da4 <CheckUID>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d103      	bne.n	8002e36 <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3305      	adds	r3, #5
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	e00b      	b.n	8002e4e <CheckListUID+0x52>
		}
		pt = pt + 8;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3308      	adds	r3, #8
 8002e3a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3305      	adds	r3, #5
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd ff54 	bl	8000cee <Flash_Read_Byte>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2bff      	cmp	r3, #255	@ 0xff
 8002e4a:	d1de      	bne.n	8002e0a <CheckListUID+0xe>
	}
	return 0;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	0800f000 	.word	0x0800f000

08002e5c <checkcountUID>:

uint8_t checkcountUID(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002e62:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <checkcountUID+0x60>)
 8002e64:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002e6a:	e01a      	b.n	8002ea2 <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3306      	adds	r3, #6
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd ff48 	bl	8000d06 <Flash_Read_2Byte>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10c      	bne.n	8002e9c <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3305      	adds	r3, #5
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd ff31 	bl	8000cee <Flash_Read_Byte>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <checkcountUID+0x40>
			{
				count++;
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3305      	adds	r3, #5
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd ff21 	bl	8000cee <Flash_Read_Byte>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2bff      	cmp	r3, #255	@ 0xff
 8002eb0:	d1dc      	bne.n	8002e6c <checkcountUID+0x10>
	}
	return count;
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	0800f000 	.word	0x0800f000

08002ec0 <adduid>:

void adduid(uint8_t key)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
	setaddress();
 8002eca:	f000 f9bd 	bl	8003248 <setaddress>
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002ece:	4a30      	ldr	r2, [pc, #192]	@ (8002f90 <adduid+0xd0>)
 8002ed0:	4930      	ldr	r1, [pc, #192]	@ (8002f94 <adduid+0xd4>)
 8002ed2:	4831      	ldr	r0, [pc, #196]	@ (8002f98 <adduid+0xd8>)
 8002ed4:	f7fd fa92 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu)
 8002ed8:	e053      	b.n	8002f82 <adduid+0xc2>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002eda:	4830      	ldr	r0, [pc, #192]	@ (8002f9c <adduid+0xdc>)
 8002edc:	f000 ff68 	bl	8003db0 <TM_MFRC522_Check>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d143      	bne.n	8002f6e <adduid+0xae>
		{
			HAL_Delay(100);
 8002ee6:	2064      	movs	r0, #100	@ 0x64
 8002ee8:	f001 fbfa 	bl	80046e0 <HAL_Delay>
			if (CheckListUID(CardID) == 0)
 8002eec:	482b      	ldr	r0, [pc, #172]	@ (8002f9c <adduid+0xdc>)
 8002eee:	f7ff ff85 	bl	8002dfc <CheckListUID>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d122      	bne.n	8002f3e <adduid+0x7e>
			{
				buzzer(1);
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f000 fee3 	bl	8003cc4 <buzzer>
				CardID[5] = key;
 8002efe:	4a27      	ldr	r2, [pc, #156]	@ (8002f9c <adduid+0xdc>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002f04:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <adduid+0xe0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2206      	movs	r2, #6
 8002f0a:	4924      	ldr	r1, [pc, #144]	@ (8002f9c <adduid+0xdc>)
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fecb 	bl	8000ca8 <Flash_Write_Array>
				AddressUID += 8;
 8002f12:	4b23      	ldr	r3, [pc, #140]	@ (8002fa0 <adduid+0xe0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3308      	adds	r3, #8
 8002f18:	4a21      	ldr	r2, [pc, #132]	@ (8002fa0 <adduid+0xe0>)
 8002f1a:	6013      	str	r3, [r2, #0]
				CLCD_I2C_Clear(&LCD1);
 8002f1c:	481e      	ldr	r0, [pc, #120]	@ (8002f98 <adduid+0xd8>)
 8002f1e:	f7fd fa5d 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	481c      	ldr	r0, [pc, #112]	@ (8002f98 <adduid+0xd8>)
 8002f28:	f7fd f9ee 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 8002f2c:	491d      	ldr	r1, [pc, #116]	@ (8002fa4 <adduid+0xe4>)
 8002f2e:	481a      	ldr	r0, [pc, #104]	@ (8002f98 <adduid+0xd8>)
 8002f30:	f7fd fa3d 	bl	80003ae <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002f34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f38:	f001 fbd2 	bl	80046e0 <HAL_Delay>
				return;
 8002f3c:	e025      	b.n	8002f8a <adduid+0xca>
			}
			else
			{
				CLCD_I2C_Clear(&LCD1);
 8002f3e:	4816      	ldr	r0, [pc, #88]	@ (8002f98 <adduid+0xd8>)
 8002f40:	f7fd fa4c 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2100      	movs	r1, #0
 8002f48:	4813      	ldr	r0, [pc, #76]	@ (8002f98 <adduid+0xd8>)
 8002f4a:	f7fd f9dd 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 8002f4e:	4916      	ldr	r1, [pc, #88]	@ (8002fa8 <adduid+0xe8>)
 8002f50:	4811      	ldr	r0, [pc, #68]	@ (8002f98 <adduid+0xd8>)
 8002f52:	f7fd fa2c 	bl	80003ae <CLCD_I2C_WriteString>
				buzzer(3);
 8002f56:	2003      	movs	r0, #3
 8002f58:	f000 feb4 	bl	8003cc4 <buzzer>
				HAL_Delay(1000);
 8002f5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f60:	f001 fbbe 	bl	80046e0 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002f64:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <adduid+0xd0>)
 8002f66:	490b      	ldr	r1, [pc, #44]	@ (8002f94 <adduid+0xd4>)
 8002f68:	480b      	ldr	r0, [pc, #44]	@ (8002f98 <adduid+0xd8>)
 8002f6a:	f7fd fa47 	bl	80003fc <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8002f6e:	2064      	movs	r0, #100	@ 0x64
 8002f70:	f7fd fb9e 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b23      	cmp	r3, #35	@ 0x23
 8002f78:	d103      	bne.n	8002f82 <adduid+0xc2>
		{
			buzzer(1);
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f000 fea2 	bl	8003cc4 <buzzer>
			return;
 8002f80:	e003      	b.n	8002f8a <adduid+0xca>
	while (exitmenu)
 8002f82:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <adduid+0xec>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1a7      	bne.n	8002eda <adduid+0x1a>
		}
	}
}
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	0800ddd4 	.word	0x0800ddd4
 8002f94:	0800e3b4 	.word	0x0800e3b4
 8002f98:	200003d8 	.word	0x200003d8
 8002f9c:	200003e4 	.word	0x200003e4
 8002fa0:	20000024 	.word	0x20000024
 8002fa4:	0800e3c0 	.word	0x0800e3c0
 8002fa8:	0800e3d0 	.word	0x0800e3d0
 8002fac:	20000020 	.word	0x20000020

08002fb0 <checkthe>:

void checkthe(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002fb6:	4b4d      	ldr	r3, [pc, #308]	@ (80030ec <checkthe+0x13c>)
 8002fb8:	221e      	movs	r2, #30
 8002fba:	701a      	strb	r2, [r3, #0]
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80030f0 <checkthe+0x140>)
 8002fbe:	494d      	ldr	r1, [pc, #308]	@ (80030f4 <checkthe+0x144>)
 8002fc0:	484d      	ldr	r0, [pc, #308]	@ (80030f8 <checkthe+0x148>)
 8002fc2:	f7fd fa1b 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002fc6:	e088      	b.n	80030da <checkthe+0x12a>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002fc8:	484c      	ldr	r0, [pc, #304]	@ (80030fc <checkthe+0x14c>)
 8002fca:	f000 fef1 	bl	8003db0 <TM_MFRC522_Check>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d178      	bne.n	80030c6 <checkthe+0x116>
		{
			if (CheckListUID(CardID) == 0)
 8002fd4:	4849      	ldr	r0, [pc, #292]	@ (80030fc <checkthe+0x14c>)
 8002fd6:	f7ff ff11 	bl	8002dfc <CheckListUID>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11c      	bne.n	800301a <checkthe+0x6a>
			{
				CLCD_I2C_Clear(&LCD1);
 8002fe0:	4845      	ldr	r0, [pc, #276]	@ (80030f8 <checkthe+0x148>)
 8002fe2:	f7fd f9fb 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4843      	ldr	r0, [pc, #268]	@ (80030f8 <checkthe+0x148>)
 8002fec:	f7fd f98c 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 8002ff0:	4943      	ldr	r1, [pc, #268]	@ (8003100 <checkthe+0x150>)
 8002ff2:	4841      	ldr	r0, [pc, #260]	@ (80030f8 <checkthe+0x148>)
 8002ff4:	f7fd f9db 	bl	80003ae <CLCD_I2C_WriteString>
				buzzer(3);
 8002ff8:	2003      	movs	r0, #3
 8002ffa:	f000 fe63 	bl	8003cc4 <buzzer>
				HAL_Delay(1000);
 8002ffe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003002:	f001 fb6d 	bl	80046e0 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8003006:	4a3a      	ldr	r2, [pc, #232]	@ (80030f0 <checkthe+0x140>)
 8003008:	493a      	ldr	r1, [pc, #232]	@ (80030f4 <checkthe+0x144>)
 800300a:	483b      	ldr	r0, [pc, #236]	@ (80030f8 <checkthe+0x148>)
 800300c:	f7fd f9f6 	bl	80003fc <CLCD_I2C_Display>
				HAL_Delay(1000);
 8003010:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003014:	f001 fb64 	bl	80046e0 <HAL_Delay>
 8003018:	e055      	b.n	80030c6 <checkthe+0x116>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 800301a:	4838      	ldr	r0, [pc, #224]	@ (80030fc <checkthe+0x14c>)
 800301c:	f7ff feee 	bl	8002dfc <CheckListUID>
 8003020:	4603      	mov	r3, r0
 8003022:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	717b      	strb	r3, [r7, #5]
				CLCD_I2C_Clear(&LCD1);
 8003032:	4831      	ldr	r0, [pc, #196]	@ (80030f8 <checkthe+0x148>)
 8003034:	f7fd f9d2 	bl	80003dc <CLCD_I2C_Clear>
				buzzer(1);
 8003038:	2001      	movs	r0, #1
 800303a:	f000 fe43 	bl	8003cc4 <buzzer>
				switch (key1)
 800303e:	797b      	ldrb	r3, [r7, #5]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d109      	bne.n	8003058 <checkthe+0xa8>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	2100      	movs	r1, #0
 8003048:	482b      	ldr	r0, [pc, #172]	@ (80030f8 <checkthe+0x148>)
 800304a:	f7fd f95d 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 800304e:	492d      	ldr	r1, [pc, #180]	@ (8003104 <checkthe+0x154>)
 8003050:	4829      	ldr	r0, [pc, #164]	@ (80030f8 <checkthe+0x148>)
 8003052:	f7fd f9ac 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8003056:	e009      	b.n	800306c <checkthe+0xbc>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	2100      	movs	r1, #0
 800305c:	4826      	ldr	r0, [pc, #152]	@ (80030f8 <checkthe+0x148>)
 800305e:	f7fd f953 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "USER CARD");
 8003062:	4929      	ldr	r1, [pc, #164]	@ (8003108 <checkthe+0x158>)
 8003064:	4824      	ldr	r0, [pc, #144]	@ (80030f8 <checkthe+0x148>)
 8003066:	f7fd f9a2 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 800306a:	bf00      	nop
				}
				switch (key2)
 800306c:	79bb      	ldrb	r3, [r7, #6]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d002      	beq.n	8003078 <checkthe+0xc8>
 8003072:	2b02      	cmp	r3, #2
 8003074:	d00a      	beq.n	800308c <checkthe+0xdc>
 8003076:	e013      	b.n	80030a0 <checkthe+0xf0>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003078:	2201      	movs	r2, #1
 800307a:	2100      	movs	r1, #0
 800307c:	481e      	ldr	r0, [pc, #120]	@ (80030f8 <checkthe+0x148>)
 800307e:	f7fd f943 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 1");
 8003082:	4922      	ldr	r1, [pc, #136]	@ (800310c <checkthe+0x15c>)
 8003084:	481c      	ldr	r0, [pc, #112]	@ (80030f8 <checkthe+0x148>)
 8003086:	f7fd f992 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 800308a:	e013      	b.n	80030b4 <checkthe+0x104>
				case 2:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800308c:	2201      	movs	r2, #1
 800308e:	2100      	movs	r1, #0
 8003090:	4819      	ldr	r0, [pc, #100]	@ (80030f8 <checkthe+0x148>)
 8003092:	f7fd f939 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 2");
 8003096:	491e      	ldr	r1, [pc, #120]	@ (8003110 <checkthe+0x160>)
 8003098:	4817      	ldr	r0, [pc, #92]	@ (80030f8 <checkthe+0x148>)
 800309a:	f7fd f988 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 800309e:	e009      	b.n	80030b4 <checkthe+0x104>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80030a0:	2201      	movs	r2, #1
 80030a2:	2100      	movs	r1, #0
 80030a4:	4814      	ldr	r0, [pc, #80]	@ (80030f8 <checkthe+0x148>)
 80030a6:	f7fd f92f 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 3");
 80030aa:	491a      	ldr	r1, [pc, #104]	@ (8003114 <checkthe+0x164>)
 80030ac:	4812      	ldr	r0, [pc, #72]	@ (80030f8 <checkthe+0x148>)
 80030ae:	f7fd f97e 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 80030b2:	bf00      	nop
				}
				HAL_Delay(1000);
 80030b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030b8:	f001 fb12 	bl	80046e0 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 80030bc:	4a0c      	ldr	r2, [pc, #48]	@ (80030f0 <checkthe+0x140>)
 80030be:	4916      	ldr	r1, [pc, #88]	@ (8003118 <checkthe+0x168>)
 80030c0:	480d      	ldr	r0, [pc, #52]	@ (80030f8 <checkthe+0x148>)
 80030c2:	f7fd f99b 	bl	80003fc <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 80030c6:	2064      	movs	r0, #100	@ 0x64
 80030c8:	f7fd faf2 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b23      	cmp	r3, #35	@ 0x23
 80030d0:	d103      	bne.n	80030da <checkthe+0x12a>
		{
			buzzer(1);
 80030d2:	2001      	movs	r0, #1
 80030d4:	f000 fdf6 	bl	8003cc4 <buzzer>
			return;
 80030d8:	e004      	b.n	80030e4 <checkthe+0x134>
	while (exitmenu )
 80030da:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <checkthe+0x13c>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f47f af72 	bne.w	8002fc8 <checkthe+0x18>
		}
	}
}
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000020 	.word	0x20000020
 80030f0:	0800ddd4 	.word	0x0800ddd4
 80030f4:	0800e3b4 	.word	0x0800e3b4
 80030f8:	200003d8 	.word	0x200003d8
 80030fc:	200003e4 	.word	0x200003e4
 8003100:	0800e3e0 	.word	0x0800e3e0
 8003104:	0800e3f0 	.word	0x0800e3f0
 8003108:	0800e3fc 	.word	0x0800e3fc
 800310c:	0800e408 	.word	0x0800e408
 8003110:	0800e410 	.word	0x0800e410
 8003114:	0800e418 	.word	0x0800e418
 8003118:	0800e0e4 	.word	0x0800e0e4

0800311c <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 8003126:	4b13      	ldr	r3, [pc, #76]	@ (8003174 <CheckKey+0x58>)
 8003128:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800312a:	e015      	b.n	8003158 <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3306      	adds	r3, #6
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fde8 	bl	8000d06 <Flash_Read_2Byte>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800313e:	429a      	cmp	r2, r3
 8003140:	d107      	bne.n	8003152 <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3305      	adds	r3, #5
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	79fa      	ldrb	r2, [r7, #7]
 800314a:	429a      	cmp	r2, r3
 800314c:	d101      	bne.n	8003152 <CheckKey+0x36>
				return pt;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	e00b      	b.n	800316a <CheckKey+0x4e>
		}
		pt = pt + 8;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3308      	adds	r3, #8
 8003156:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3305      	adds	r3, #5
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd fdc6 	bl	8000cee <Flash_Read_Byte>
 8003162:	4603      	mov	r3, r0
 8003164:	2bff      	cmp	r3, #255	@ 0xff
 8003166:	d1e1      	bne.n	800312c <CheckKey+0x10>
	}
	return 0;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	0800f000 	.word	0x0800f000

08003178 <removeuid>:
void removeuid(uint32_t addressrm)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3306      	adds	r3, #6
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fd76 	bl	8000c78 <Flash_Write_2Byte>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <startadd>:
void startadd(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8003198:	4a22      	ldr	r2, [pc, #136]	@ (8003224 <startadd+0x90>)
 800319a:	4923      	ldr	r1, [pc, #140]	@ (8003228 <startadd+0x94>)
 800319c:	4823      	ldr	r0, [pc, #140]	@ (800322c <startadd+0x98>)
 800319e:	f7fd f92d 	bl	80003fc <CLCD_I2C_Display>
	setaddress();
 80031a2:	f000 f851 	bl	8003248 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 80031a6:	4822      	ldr	r0, [pc, #136]	@ (8003230 <startadd+0x9c>)
 80031a8:	f000 fe02 	bl	8003db0 <TM_MFRC522_Check>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f9      	bne.n	80031a6 <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 80031b2:	481f      	ldr	r0, [pc, #124]	@ (8003230 <startadd+0x9c>)
 80031b4:	f7ff fe22 	bl	8002dfc <CheckListUID>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10f      	bne.n	80031de <startadd+0x4a>
				{
					CardID[5] = 0x11;
 80031be:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <startadd+0x9c>)
 80031c0:	2211      	movs	r2, #17
 80031c2:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 80031c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <startadd+0xa0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2206      	movs	r2, #6
 80031ca:	4919      	ldr	r1, [pc, #100]	@ (8003230 <startadd+0x9c>)
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd fd6b 	bl	8000ca8 <Flash_Write_Array>
					AddressUID += 8;
 80031d2:	4b18      	ldr	r3, [pc, #96]	@ (8003234 <startadd+0xa0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3308      	adds	r3, #8
 80031d8:	4a16      	ldr	r2, [pc, #88]	@ (8003234 <startadd+0xa0>)
 80031da:	6013      	str	r3, [r2, #0]
					break;
 80031dc:	e011      	b.n	8003202 <startadd+0x6e>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 80031de:	4a16      	ldr	r2, [pc, #88]	@ (8003238 <startadd+0xa4>)
 80031e0:	4916      	ldr	r1, [pc, #88]	@ (800323c <startadd+0xa8>)
 80031e2:	4812      	ldr	r0, [pc, #72]	@ (800322c <startadd+0x98>)
 80031e4:	f7fd f90a 	bl	80003fc <CLCD_I2C_Display>
					buzzer(5);
 80031e8:	2005      	movs	r0, #5
 80031ea:	f000 fd6b 	bl	8003cc4 <buzzer>
					HAL_Delay(1000);
 80031ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031f2:	f001 fa75 	bl	80046e0 <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 80031f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003224 <startadd+0x90>)
 80031f8:	490b      	ldr	r1, [pc, #44]	@ (8003228 <startadd+0x94>)
 80031fa:	480c      	ldr	r0, [pc, #48]	@ (800322c <startadd+0x98>)
 80031fc:	f7fd f8fe 	bl	80003fc <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8003200:	e7d1      	b.n	80031a6 <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 8003202:	4a0f      	ldr	r2, [pc, #60]	@ (8003240 <startadd+0xac>)
 8003204:	490f      	ldr	r1, [pc, #60]	@ (8003244 <startadd+0xb0>)
 8003206:	4809      	ldr	r0, [pc, #36]	@ (800322c <startadd+0x98>)
 8003208:	f7fd f8f8 	bl	80003fc <CLCD_I2C_Display>
	buzzer(1);
 800320c:	2001      	movs	r0, #1
 800320e:	f000 fd59 	bl	8003cc4 <buzzer>
	HAL_Delay(1000);
 8003212:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003216:	f001 fa63 	bl	80046e0 <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 800321a:	4804      	ldr	r0, [pc, #16]	@ (800322c <startadd+0x98>)
 800321c:	f7fd f8de 	bl	80003dc <CLCD_I2C_Clear>
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}
 8003224:	0800e420 	.word	0x0800e420
 8003228:	0800e0e4 	.word	0x0800e0e4
 800322c:	200003d8 	.word	0x200003d8
 8003230:	200003e4 	.word	0x200003e4
 8003234:	20000024 	.word	0x20000024
 8003238:	0800e434 	.word	0x0800e434
 800323c:	0800e448 	.word	0x0800e448
 8003240:	0800e458 	.word	0x0800e458
 8003244:	0800e468 	.word	0x0800e468

08003248 <setaddress>:
void setaddress(void){
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 800324e:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <setaddress+0x30>)
 8003250:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003252:	e002      	b.n	800325a <setaddress+0x12>
	{
		pt = pt + 8;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3308      	adds	r3, #8
 8003258:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3305      	adds	r3, #5
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fd45 	bl	8000cee <Flash_Read_Byte>
 8003264:	4603      	mov	r3, r0
 8003266:	2bff      	cmp	r3, #255	@ 0xff
 8003268:	d1f4      	bne.n	8003254 <setaddress+0xc>
	}
	AddressUID = pt;
 800326a:	4a04      	ldr	r2, [pc, #16]	@ (800327c <setaddress+0x34>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6013      	str	r3, [r2, #0]
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0800f000 	.word	0x0800f000
 800327c:	20000024 	.word	0x20000024

08003280 <remoall>:

void remoall(){
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8003286:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <remoall+0x44>)
 8003288:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 800328a:	e00a      	b.n	80032a2 <remoall+0x22>
		Flash_Erase(pt);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fd fcd7 	bl	8000c40 <Flash_Erase>
		pt = pt + 0x400;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003298:	607b      	str	r3, [r7, #4]
		if(pt == 0x800FC00)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a0a      	ldr	r2, [pc, #40]	@ (80032c8 <remoall+0x48>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00b      	beq.n	80032ba <remoall+0x3a>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fd fd3b 	bl	8000d1e <Flash_Read_8Byte>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	bf08      	it	eq
 80032b2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80032b6:	d1e9      	bne.n	800328c <remoall+0xc>
			break;
	}
}
 80032b8:	e000      	b.n	80032bc <remoall+0x3c>
			break;
 80032ba:	bf00      	nop
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	0800f000 	.word	0x0800f000
 80032c8:	0800fc00 	.word	0x0800fc00

080032cc <addface>:
		}
	}
}

void addface(uint8_t key)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80032d6:	2280      	movs	r2, #128	@ 0x80
 80032d8:	2100      	movs	r1, #0
 80032da:	4823      	ldr	r0, [pc, #140]	@ (8003368 <addface+0x9c>)
 80032dc:	f00a f870 	bl	800d3c0 <memset>
	sprintf(Tx_Buffer , "Add.%d", key );
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	461a      	mov	r2, r3
 80032e4:	4921      	ldr	r1, [pc, #132]	@ (800336c <addface+0xa0>)
 80032e6:	4822      	ldr	r0, [pc, #136]	@ (8003370 <addface+0xa4>)
 80032e8:	f00a f84a 	bl	800d380 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 80032ec:	2105      	movs	r1, #5
 80032ee:	4820      	ldr	r0, [pc, #128]	@ (8003370 <addface+0xa4>)
 80032f0:	f009 fc34 	bl	800cb5c <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80032f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003374 <addface+0xa8>)
 80032f6:	4920      	ldr	r1, [pc, #128]	@ (8003378 <addface+0xac>)
 80032f8:	4820      	ldr	r0, [pc, #128]	@ (800337c <addface+0xb0>)
 80032fa:	f7fd f87f 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 80032fe:	4b20      	ldr	r3, [pc, #128]	@ (8003380 <addface+0xb4>)
 8003300:	223c      	movs	r2, #60	@ 0x3c
 8003302:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8003304:	e023      	b.n	800334e <addface+0x82>
		if(Rx_Buffer[0] == 'T'){
 8003306:	4b18      	ldr	r3, [pc, #96]	@ (8003368 <addface+0x9c>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	b25b      	sxtb	r3, r3
 800330c:	2b54      	cmp	r3, #84	@ 0x54
 800330e:	d10c      	bne.n	800332a <addface+0x5e>
			CLCD_I2C_Display(&LCD1, "   ADD FACEID", "   SUCCESSFUL");
 8003310:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <addface+0xb8>)
 8003312:	491d      	ldr	r1, [pc, #116]	@ (8003388 <addface+0xbc>)
 8003314:	4819      	ldr	r0, [pc, #100]	@ (800337c <addface+0xb0>)
 8003316:	f7fd f871 	bl	80003fc <CLCD_I2C_Display>
			buzzer(1);
 800331a:	2001      	movs	r0, #1
 800331c:	f000 fcd2 	bl	8003cc4 <buzzer>
			HAL_Delay(2000);
 8003320:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003324:	f001 f9dc 	bl	80046e0 <HAL_Delay>
			break;
 8003328:	e015      	b.n	8003356 <addface+0x8a>
		}
		else if(Rx_Buffer[0] == 'F'){
 800332a:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <addface+0x9c>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b25b      	sxtb	r3, r3
 8003330:	2b46      	cmp	r3, #70	@ 0x46
 8003332:	d10c      	bne.n	800334e <addface+0x82>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKNOWN", "");
 8003334:	4a0f      	ldr	r2, [pc, #60]	@ (8003374 <addface+0xa8>)
 8003336:	4915      	ldr	r1, [pc, #84]	@ (800338c <addface+0xc0>)
 8003338:	4810      	ldr	r0, [pc, #64]	@ (800337c <addface+0xb0>)
 800333a:	f7fd f85f 	bl	80003fc <CLCD_I2C_Display>
			buzzer(5);
 800333e:	2005      	movs	r0, #5
 8003340:	f000 fcc0 	bl	8003cc4 <buzzer>
			HAL_Delay(2000);
 8003344:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003348:	f001 f9ca 	bl	80046e0 <HAL_Delay>
			break;
 800334c:	e003      	b.n	8003356 <addface+0x8a>
	while(exitmenu != 0){
 800334e:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <addface+0xb4>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1d7      	bne.n	8003306 <addface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003356:	2280      	movs	r2, #128	@ 0x80
 8003358:	2100      	movs	r1, #0
 800335a:	4803      	ldr	r0, [pc, #12]	@ (8003368 <addface+0x9c>)
 800335c:	f00a f830 	bl	800d3c0 <memset>
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000350 	.word	0x20000350
 800336c:	0800e478 	.word	0x0800e478
 8003370:	200003d0 	.word	0x200003d0
 8003374:	0800dd08 	.word	0x0800dd08
 8003378:	0800e320 	.word	0x0800e320
 800337c:	200003d8 	.word	0x200003d8
 8003380:	20000020 	.word	0x20000020
 8003384:	0800e3c0 	.word	0x0800e3c0
 8003388:	0800e480 	.word	0x0800e480
 800338c:	0800e490 	.word	0x0800e490

08003390 <removeface>:
void removeface(uint8_t key)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800339a:	2280      	movs	r2, #128	@ 0x80
 800339c:	2100      	movs	r1, #0
 800339e:	4823      	ldr	r0, [pc, #140]	@ (800342c <removeface+0x9c>)
 80033a0:	f00a f80e 	bl	800d3c0 <memset>
	sprintf(Tx_Buffer , "Rem.%d", key );
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	461a      	mov	r2, r3
 80033a8:	4921      	ldr	r1, [pc, #132]	@ (8003430 <removeface+0xa0>)
 80033aa:	4822      	ldr	r0, [pc, #136]	@ (8003434 <removeface+0xa4>)
 80033ac:	f009 ffe8 	bl	800d380 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 80033b0:	2105      	movs	r1, #5
 80033b2:	4820      	ldr	r0, [pc, #128]	@ (8003434 <removeface+0xa4>)
 80033b4:	f009 fbd2 	bl	800cb5c <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80033b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003438 <removeface+0xa8>)
 80033ba:	4920      	ldr	r1, [pc, #128]	@ (800343c <removeface+0xac>)
 80033bc:	4820      	ldr	r0, [pc, #128]	@ (8003440 <removeface+0xb0>)
 80033be:	f7fd f81d 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 80033c2:	4b20      	ldr	r3, [pc, #128]	@ (8003444 <removeface+0xb4>)
 80033c4:	223c      	movs	r2, #60	@ 0x3c
 80033c6:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 80033c8:	e023      	b.n	8003412 <removeface+0x82>
		if(Rx_Buffer[0] == 'T'){
 80033ca:	4b18      	ldr	r3, [pc, #96]	@ (800342c <removeface+0x9c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	b25b      	sxtb	r3, r3
 80033d0:	2b54      	cmp	r3, #84	@ 0x54
 80033d2:	d10c      	bne.n	80033ee <removeface+0x5e>
			CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 80033d4:	4a18      	ldr	r2, [pc, #96]	@ (8003438 <removeface+0xa8>)
 80033d6:	491c      	ldr	r1, [pc, #112]	@ (8003448 <removeface+0xb8>)
 80033d8:	4819      	ldr	r0, [pc, #100]	@ (8003440 <removeface+0xb0>)
 80033da:	f7fd f80f 	bl	80003fc <CLCD_I2C_Display>
			buzzer(1);
 80033de:	2001      	movs	r0, #1
 80033e0:	f000 fc70 	bl	8003cc4 <buzzer>
			HAL_Delay(2000);
 80033e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033e8:	f001 f97a 	bl	80046e0 <HAL_Delay>
			break;
 80033ec:	e015      	b.n	800341a <removeface+0x8a>
		}
		else if(Rx_Buffer[0] == 'F'){
 80033ee:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <removeface+0x9c>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b25b      	sxtb	r3, r3
 80033f4:	2b46      	cmp	r3, #70	@ 0x46
 80033f6:	d10c      	bne.n	8003412 <removeface+0x82>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKOWN", "");
 80033f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003438 <removeface+0xa8>)
 80033fa:	4914      	ldr	r1, [pc, #80]	@ (800344c <removeface+0xbc>)
 80033fc:	4810      	ldr	r0, [pc, #64]	@ (8003440 <removeface+0xb0>)
 80033fe:	f7fc fffd 	bl	80003fc <CLCD_I2C_Display>
			buzzer(5);
 8003402:	2005      	movs	r0, #5
 8003404:	f000 fc5e 	bl	8003cc4 <buzzer>
			HAL_Delay(2000);
 8003408:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800340c:	f001 f968 	bl	80046e0 <HAL_Delay>
			break;
 8003410:	e003      	b.n	800341a <removeface+0x8a>
	while(exitmenu != 0){
 8003412:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <removeface+0xb4>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1d7      	bne.n	80033ca <removeface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800341a:	2280      	movs	r2, #128	@ 0x80
 800341c:	2100      	movs	r1, #0
 800341e:	4803      	ldr	r0, [pc, #12]	@ (800342c <removeface+0x9c>)
 8003420:	f009 ffce 	bl	800d3c0 <memset>
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000350 	.word	0x20000350
 8003430:	0800e4a0 	.word	0x0800e4a0
 8003434:	200003d0 	.word	0x200003d0
 8003438:	0800dd08 	.word	0x0800dd08
 800343c:	0800e320 	.word	0x0800e320
 8003440:	200003d8 	.word	0x200003d8
 8003444:	20000020 	.word	0x20000020
 8003448:	0800e4a8 	.word	0x0800e4a8
 800344c:	0800e4b8 	.word	0x0800e4b8

08003450 <checkfaceid>:
uint8_t checkfaceid(uint8_t key){
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800345a:	2280      	movs	r2, #128	@ 0x80
 800345c:	2100      	movs	r1, #0
 800345e:	4817      	ldr	r0, [pc, #92]	@ (80034bc <checkfaceid+0x6c>)
 8003460:	f009 ffae 	bl	800d3c0 <memset>
	sprintf(Tx_Buffer , "Che.%d", key );
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	461a      	mov	r2, r3
 8003468:	4915      	ldr	r1, [pc, #84]	@ (80034c0 <checkfaceid+0x70>)
 800346a:	4816      	ldr	r0, [pc, #88]	@ (80034c4 <checkfaceid+0x74>)
 800346c:	f009 ff88 	bl	800d380 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8003470:	2105      	movs	r1, #5
 8003472:	4814      	ldr	r0, [pc, #80]	@ (80034c4 <checkfaceid+0x74>)
 8003474:	f009 fb72 	bl	800cb5c <CDC_Transmit_FS>
	while(Rx_Buffer[0] ==0){
 8003478:	e000      	b.n	800347c <checkfaceid+0x2c>
			continue;
 800347a:	bf00      	nop
	while(Rx_Buffer[0] ==0){
 800347c:	4b0f      	ldr	r3, [pc, #60]	@ (80034bc <checkfaceid+0x6c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b25b      	sxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f9      	beq.n	800347a <checkfaceid+0x2a>
		}
//	CLCD_I2C_Display(&LCD1, Rx_Buffer, "");
	HAL_Delay(1000);
 8003486:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800348a:	f001 f929 	bl	80046e0 <HAL_Delay>
	if(Rx_Buffer[0] == 'T'){
 800348e:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <checkfaceid+0x6c>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	b25b      	sxtb	r3, r3
 8003494:	2b54      	cmp	r3, #84	@ 0x54
 8003496:	d101      	bne.n	800349c <checkfaceid+0x4c>
		return key;
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	e00b      	b.n	80034b4 <checkfaceid+0x64>
	}else if(Rx_Buffer[0] == 'F'){
 800349c:	4b07      	ldr	r3, [pc, #28]	@ (80034bc <checkfaceid+0x6c>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	2b46      	cmp	r3, #70	@ 0x46
 80034a4:	d101      	bne.n	80034aa <checkfaceid+0x5a>
		return 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e004      	b.n	80034b4 <checkfaceid+0x64>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80034aa:	2280      	movs	r2, #128	@ 0x80
 80034ac:	2100      	movs	r1, #0
 80034ae:	4803      	ldr	r0, [pc, #12]	@ (80034bc <checkfaceid+0x6c>)
 80034b0:	f009 ff86 	bl	800d3c0 <memset>
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000350 	.word	0x20000350
 80034c0:	0800e4c8 	.word	0x0800e4c8
 80034c4:	200003d0 	.word	0x200003d0

080034c8 <add_finger>:
//---------- them van tay---------------
void add_finger()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
    uint8_t id = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	71fb      	strb	r3, [r7, #7]
    CLCD_I2C_Display(&LCD1, "Enter ID (1-9):", "ID= ");
 80034d2:	4a91      	ldr	r2, [pc, #580]	@ (8003718 <add_finger+0x250>)
 80034d4:	4991      	ldr	r1, [pc, #580]	@ (800371c <add_finger+0x254>)
 80034d6:	4892      	ldr	r0, [pc, #584]	@ (8003720 <add_finger+0x258>)
 80034d8:	f7fc ff90 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 80034dc:	200a      	movs	r0, #10
 80034de:	f7fd f8e7 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80034e2:	4603      	mov	r3, r0
 80034e4:	71bb      	strb	r3, [r7, #6]
        if (key >= '1' && key <= '9')
 80034e6:	79bb      	ldrb	r3, [r7, #6]
 80034e8:	2b30      	cmp	r3, #48	@ 0x30
 80034ea:	d9f7      	bls.n	80034dc <add_finger+0x14>
 80034ec:	79bb      	ldrb	r3, [r7, #6]
 80034ee:	2b39      	cmp	r3, #57	@ 0x39
 80034f0:	d8f4      	bhi.n	80034dc <add_finger+0x14>
        {
        	buzzer(1);
 80034f2:	2001      	movs	r0, #1
 80034f4:	f000 fbe6 	bl	8003cc4 <buzzer>
            id = key - '0';
 80034f8:	79bb      	ldrb	r3, [r7, #6]
 80034fa:	3b30      	subs	r3, #48	@ 0x30
 80034fc:	71fb      	strb	r3, [r7, #7]
            break;
 80034fe:	bf00      	nop
        }
    }
    ID = id;
 8003500:	4a88      	ldr	r2, [pc, #544]	@ (8003724 <add_finger+0x25c>)
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	7013      	strb	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8003506:	2201      	movs	r2, #1
 8003508:	2104      	movs	r1, #4
 800350a:	4885      	ldr	r0, [pc, #532]	@ (8003720 <add_finger+0x258>)
 800350c:	f7fc fefc 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteChar(&LCD1, '0' + ID);
 8003510:	4b84      	ldr	r3, [pc, #528]	@ (8003724 <add_finger+0x25c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	3330      	adds	r3, #48	@ 0x30
 8003516:	b2db      	uxtb	r3, r3
 8003518:	4619      	mov	r1, r3
 800351a:	4881      	ldr	r0, [pc, #516]	@ (8003720 <add_finger+0x258>)
 800351c:	f7fc ff37 	bl	800038e <CLCD_I2C_WriteChar>
    HAL_Delay(1000);
 8003520:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003524:	f001 f8dc 	bl	80046e0 <HAL_Delay>

    vitri2:
    while(1)
    {
        collect_finger();
 8003528:	f7fd f9e2 	bl	80008f0 <collect_finger>
        CLCD_I2C_Display(&LCD1, "Add Finger Print", "Put your finger!!     ");
 800352c:	4a7e      	ldr	r2, [pc, #504]	@ (8003728 <add_finger+0x260>)
 800352e:	497f      	ldr	r1, [pc, #508]	@ (800372c <add_finger+0x264>)
 8003530:	487b      	ldr	r0, [pc, #492]	@ (8003720 <add_finger+0x258>)
 8003532:	f7fc ff63 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 8003536:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800353a:	f001 f8d1 	bl	80046e0 <HAL_Delay>
    // dat tay vao
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800353e:	2201      	movs	r2, #1
 8003540:	2100      	movs	r1, #0
 8003542:	4877      	ldr	r0, [pc, #476]	@ (8003720 <add_finger+0x258>)
 8003544:	f7fc fee0 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8003548:	4979      	ldr	r1, [pc, #484]	@ (8003730 <add_finger+0x268>)
 800354a:	4875      	ldr	r0, [pc, #468]	@ (8003720 <add_finger+0x258>)
 800354c:	f7fc ff2f 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8003550:	4b78      	ldr	r3, [pc, #480]	@ (8003734 <add_finger+0x26c>)
 8003552:	22ff      	movs	r2, #255	@ 0xff
 8003554:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8003556:	e008      	b.n	800356a <add_finger+0xa2>
            collect_finger();
 8003558:	f7fd f9ca 	bl	80008f0 <collect_finger>
            collect_finger();
 800355c:	f7fd f9c8 	bl	80008f0 <collect_finger>
            tmp= collect_finger();
 8003560:	f7fd f9c6 	bl	80008f0 <collect_finger>
 8003564:	4603      	mov	r3, r0
 8003566:	4a73      	ldr	r2, [pc, #460]	@ (8003734 <add_finger+0x26c>)
 8003568:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00){
 800356a:	4b72      	ldr	r3, [pc, #456]	@ (8003734 <add_finger+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f2      	bne.n	8003558 <add_finger+0x90>
        }
        tmp=0xff;
 8003572:	4b70      	ldr	r3, [pc, #448]	@ (8003734 <add_finger+0x26c>)
 8003574:	22ff      	movs	r2, #255	@ 0xff
 8003576:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003578:	2201      	movs	r2, #1
 800357a:	2100      	movs	r1, #0
 800357c:	4868      	ldr	r0, [pc, #416]	@ (8003720 <add_finger+0x258>)
 800357e:	f7fc fec3 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8003582:	496d      	ldr	r1, [pc, #436]	@ (8003738 <add_finger+0x270>)
 8003584:	4866      	ldr	r0, [pc, #408]	@ (8003720 <add_finger+0x258>)
 8003586:	f7fc ff12 	bl	80003ae <CLCD_I2C_WriteString>
 800358a:	2064      	movs	r0, #100	@ 0x64
 800358c:	f001 f8a8 	bl	80046e0 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003590:	2201      	movs	r2, #1
 8003592:	2100      	movs	r1, #0
 8003594:	4862      	ldr	r0, [pc, #392]	@ (8003720 <add_finger+0x258>)
 8003596:	f7fc feb7 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 800359a:	4968      	ldr	r1, [pc, #416]	@ (800373c <add_finger+0x274>)
 800359c:	4860      	ldr	r0, [pc, #384]	@ (8003720 <add_finger+0x258>)
 800359e:	f7fc ff06 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 80035a2:	4b64      	ldr	r3, [pc, #400]	@ (8003734 <add_finger+0x26c>)
 80035a4:	22ff      	movs	r2, #255	@ 0xff
 80035a6:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 80035a8:	e005      	b.n	80035b6 <add_finger+0xee>
        tmp=img2tz(0x01);
 80035aa:	2001      	movs	r0, #1
 80035ac:	f7fd f9cc 	bl	8000948 <img2tz>
 80035b0:	4603      	mov	r3, r0
 80035b2:	4a60      	ldr	r2, [pc, #384]	@ (8003734 <add_finger+0x26c>)
 80035b4:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00){
 80035b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003734 <add_finger+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f5      	bne.n	80035aa <add_finger+0xe2>
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80035be:	2201      	movs	r2, #1
 80035c0:	2100      	movs	r1, #0
 80035c2:	4857      	ldr	r0, [pc, #348]	@ (8003720 <add_finger+0x258>)
 80035c4:	f7fc fea0 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"put finger again");HAL_Delay(100);
 80035c8:	495d      	ldr	r1, [pc, #372]	@ (8003740 <add_finger+0x278>)
 80035ca:	4855      	ldr	r0, [pc, #340]	@ (8003720 <add_finger+0x258>)
 80035cc:	f7fc feef 	bl	80003ae <CLCD_I2C_WriteString>
 80035d0:	2064      	movs	r0, #100	@ 0x64
 80035d2:	f001 f885 	bl	80046e0 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80035d6:	2201      	movs	r2, #1
 80035d8:	2100      	movs	r1, #0
 80035da:	4851      	ldr	r0, [pc, #324]	@ (8003720 <add_finger+0x258>)
 80035dc:	f7fc fe94 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 80035e0:	4953      	ldr	r1, [pc, #332]	@ (8003730 <add_finger+0x268>)
 80035e2:	484f      	ldr	r0, [pc, #316]	@ (8003720 <add_finger+0x258>)
 80035e4:	f7fc fee3 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 80035e8:	4b52      	ldr	r3, [pc, #328]	@ (8003734 <add_finger+0x26c>)
 80035ea:	22ff      	movs	r2, #255	@ 0xff
 80035ec:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)    {
 80035ee:	e008      	b.n	8003602 <add_finger+0x13a>
            collect_finger();
 80035f0:	f7fd f97e 	bl	80008f0 <collect_finger>
            collect_finger();
 80035f4:	f7fd f97c 	bl	80008f0 <collect_finger>
            tmp=collect_finger();
 80035f8:	f7fd f97a 	bl	80008f0 <collect_finger>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4a4d      	ldr	r2, [pc, #308]	@ (8003734 <add_finger+0x26c>)
 8003600:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00)    {
 8003602:	4b4c      	ldr	r3, [pc, #304]	@ (8003734 <add_finger+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f2      	bne.n	80035f0 <add_finger+0x128>
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800360a:	2201      	movs	r2, #1
 800360c:	2100      	movs	r1, #0
 800360e:	4844      	ldr	r0, [pc, #272]	@ (8003720 <add_finger+0x258>)
 8003610:	f7fc fe7a 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8003614:	4948      	ldr	r1, [pc, #288]	@ (8003738 <add_finger+0x270>)
 8003616:	4842      	ldr	r0, [pc, #264]	@ (8003720 <add_finger+0x258>)
 8003618:	f7fc fec9 	bl	80003ae <CLCD_I2C_WriteString>
 800361c:	2064      	movs	r0, #100	@ 0x64
 800361e:	f001 f85f 	bl	80046e0 <HAL_Delay>
        tmp=0xff;
 8003622:	4b44      	ldr	r3, [pc, #272]	@ (8003734 <add_finger+0x26c>)
 8003624:	22ff      	movs	r2, #255	@ 0xff
 8003626:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003628:	2201      	movs	r2, #1
 800362a:	2100      	movs	r1, #0
 800362c:	483c      	ldr	r0, [pc, #240]	@ (8003720 <add_finger+0x258>)
 800362e:	f7fc fe6b 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8003632:	4942      	ldr	r1, [pc, #264]	@ (800373c <add_finger+0x274>)
 8003634:	483a      	ldr	r0, [pc, #232]	@ (8003720 <add_finger+0x258>)
 8003636:	f7fc feba 	bl	80003ae <CLCD_I2C_WriteString>
        while(tmp!=0x00)    {tmp=img2tz(0x02);}
 800363a:	e005      	b.n	8003648 <add_finger+0x180>
 800363c:	2002      	movs	r0, #2
 800363e:	f7fd f983 	bl	8000948 <img2tz>
 8003642:	4603      	mov	r3, r0
 8003644:	4a3b      	ldr	r2, [pc, #236]	@ (8003734 <add_finger+0x26c>)
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4b3a      	ldr	r3, [pc, #232]	@ (8003734 <add_finger+0x26c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f5      	bne.n	800363c <add_finger+0x174>
        tmp=0xff;
 8003650:	4b38      	ldr	r3, [pc, #224]	@ (8003734 <add_finger+0x26c>)
 8003652:	22ff      	movs	r2, #255	@ 0xff
 8003654:	601a      	str	r2, [r3, #0]
        // kiem tra 2 buff co trung nhau khong
        while(tmp!=0x00)
 8003656:	e01d      	b.n	8003694 <add_finger+0x1cc>
        {
            tmp=match();    //HAL_Delay(100);
 8003658:	f7fd f9b2 	bl	80009c0 <match>
 800365c:	4603      	mov	r3, r0
 800365e:	4a35      	ldr	r2, [pc, #212]	@ (8003734 <add_finger+0x26c>)
 8003660:	6013      	str	r3, [r2, #0]
            if(tmp==0x08||tmp==0x01)
 8003662:	4b34      	ldr	r3, [pc, #208]	@ (8003734 <add_finger+0x26c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b08      	cmp	r3, #8
 8003668:	d003      	beq.n	8003672 <add_finger+0x1aa>
 800366a:	4b32      	ldr	r3, [pc, #200]	@ (8003734 <add_finger+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d110      	bne.n	8003694 <add_finger+0x1cc>
            {
                // loi, lam lai
                    CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003672:	2201      	movs	r2, #1
 8003674:	2100      	movs	r1, #0
 8003676:	482a      	ldr	r0, [pc, #168]	@ (8003720 <add_finger+0x258>)
 8003678:	f7fc fe46 	bl	8000308 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1," ER: try again!");buzzer(5);HAL_Delay(1500);
 800367c:	4931      	ldr	r1, [pc, #196]	@ (8003744 <add_finger+0x27c>)
 800367e:	4828      	ldr	r0, [pc, #160]	@ (8003720 <add_finger+0x258>)
 8003680:	f7fc fe95 	bl	80003ae <CLCD_I2C_WriteString>
 8003684:	2005      	movs	r0, #5
 8003686:	f000 fb1d 	bl	8003cc4 <buzzer>
 800368a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800368e:	f001 f827 	bl	80046e0 <HAL_Delay>
                goto vitri2;
 8003692:	e749      	b.n	8003528 <add_finger+0x60>
        while(tmp!=0x00)
 8003694:	4b27      	ldr	r3, [pc, #156]	@ (8003734 <add_finger+0x26c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1dd      	bne.n	8003658 <add_finger+0x190>
            }
        }
        tmp=0xff;
 800369c:	4b25      	ldr	r3, [pc, #148]	@ (8003734 <add_finger+0x26c>)
 800369e:	22ff      	movs	r2, #255	@ 0xff
 80036a0:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){tmp=regmodel();HAL_Delay(100);}
 80036a2:	e007      	b.n	80036b4 <add_finger+0x1ec>
 80036a4:	f7fd f9b8 	bl	8000a18 <regmodel>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4a22      	ldr	r2, [pc, #136]	@ (8003734 <add_finger+0x26c>)
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	2064      	movs	r0, #100	@ 0x64
 80036b0:	f001 f816 	bl	80046e0 <HAL_Delay>
 80036b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003734 <add_finger+0x26c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f3      	bne.n	80036a4 <add_finger+0x1dc>
        tmp=0xff;
 80036bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003734 <add_finger+0x26c>)
 80036be:	22ff      	movs	r2, #255	@ 0xff
 80036c0:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){tmp=store(ID);HAL_Delay(100);}            // luu id
 80036c2:	e00a      	b.n	80036da <add_finger+0x212>
 80036c4:	4b17      	ldr	r3, [pc, #92]	@ (8003724 <add_finger+0x25c>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fd f9d1 	bl	8000a70 <store>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4a18      	ldr	r2, [pc, #96]	@ (8003734 <add_finger+0x26c>)
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	2064      	movs	r0, #100	@ 0x64
 80036d6:	f001 f803 	bl	80046e0 <HAL_Delay>
 80036da:	4b16      	ldr	r3, [pc, #88]	@ (8003734 <add_finger+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <add_finger+0x1fc>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80036e2:	2201      	movs	r2, #1
 80036e4:	2100      	movs	r1, #0
 80036e6:	480e      	ldr	r0, [pc, #56]	@ (8003720 <add_finger+0x258>)
 80036e8:	f7fc fe0e 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 80036ec:	4916      	ldr	r1, [pc, #88]	@ (8003748 <add_finger+0x280>)
 80036ee:	480c      	ldr	r0, [pc, #48]	@ (8003720 <add_finger+0x258>)
 80036f0:	f7fc fe5d 	bl	80003ae <CLCD_I2C_WriteString>
        buzzer(1);
 80036f4:	2001      	movs	r0, #1
 80036f6:	f000 fae5 	bl	8003cc4 <buzzer>
                /***************** DA LUU XONG**************************/
        HAL_Delay(1500);
 80036fa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80036fe:	f000 ffef 	bl	80046e0 <HAL_Delay>
        tmp=0xff;
 8003702:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <add_finger+0x26c>)
 8003704:	22ff      	movs	r2, #255	@ 0xff
 8003706:	601a      	str	r2, [r3, #0]
        CLCD_I2C_Clear(&LCD1);
 8003708:	4805      	ldr	r0, [pc, #20]	@ (8003720 <add_finger+0x258>)
 800370a:	f7fc fe67 	bl	80003dc <CLCD_I2C_Clear>
        break;
 800370e:	bf00      	nop
    }
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	0800e4d0 	.word	0x0800e4d0
 800371c:	0800e4d8 	.word	0x0800e4d8
 8003720:	200003d8 	.word	0x200003d8
 8003724:	20000408 	.word	0x20000408
 8003728:	0800e4e8 	.word	0x0800e4e8
 800372c:	0800e500 	.word	0x0800e500
 8003730:	0800e514 	.word	0x0800e514
 8003734:	20000404 	.word	0x20000404
 8003738:	0800e530 	.word	0x0800e530
 800373c:	0800e544 	.word	0x0800e544
 8003740:	0800e55c 	.word	0x0800e55c
 8003744:	0800e570 	.word	0x0800e570
 8003748:	0800e580 	.word	0x0800e580

0800374c <read_finger>:
                        //----------end them van tay---------------
void read_finger()
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 8003750:	4b3a      	ldr	r3, [pc, #232]	@ (800383c <read_finger+0xf0>)
 8003752:	22ff      	movs	r2, #255	@ 0xff
 8003754:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 8003756:	f000 ffb9 	bl	80046cc <HAL_GetTick>
 800375a:	4603      	mov	r3, r0
 800375c:	4a38      	ldr	r2, [pc, #224]	@ (8003840 <read_finger+0xf4>)
 800375e:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 8003760:	e013      	b.n	800378a <read_finger+0x3e>
		tmp=collect_finger();
 8003762:	f7fd f8c5 	bl	80008f0 <collect_finger>
 8003766:	4603      	mov	r3, r0
 8003768:	4a34      	ldr	r2, [pc, #208]	@ (800383c <read_finger+0xf0>)
 800376a:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 800376c:	f000 ffae 	bl	80046cc <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	4b33      	ldr	r3, [pc, #204]	@ (8003840 <read_finger+0xf4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800377c:	d305      	bcc.n	800378a <read_finger+0x3e>
		time_cho=HAL_GetTick();
 800377e:	f000 ffa5 	bl	80046cc <HAL_GetTick>
 8003782:	4603      	mov	r3, r0
 8003784:	4a2e      	ldr	r2, [pc, #184]	@ (8003840 <read_finger+0xf4>)
 8003786:	6013      	str	r3, [r2, #0]
		return;}
 8003788:	e056      	b.n	8003838 <read_finger+0xec>
	while(tmp!=0x00){
 800378a:	4b2c      	ldr	r3, [pc, #176]	@ (800383c <read_finger+0xf0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e7      	bne.n	8003762 <read_finger+0x16>

	}
	tmp=0xff;
 8003792:	4b2a      	ldr	r3, [pc, #168]	@ (800383c <read_finger+0xf0>)
 8003794:	22ff      	movs	r2, #255	@ 0xff
 8003796:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 8003798:	4b28      	ldr	r3, [pc, #160]	@ (800383c <read_finger+0xf0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <read_finger+0x60>
 80037a0:	2001      	movs	r0, #1
 80037a2:	f7fd f8d1 	bl	8000948 <img2tz>
 80037a6:	4603      	mov	r3, r0
 80037a8:	4a24      	ldr	r2, [pc, #144]	@ (800383c <read_finger+0xf0>)
 80037aa:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 80037ac:	4b23      	ldr	r3, [pc, #140]	@ (800383c <read_finger+0xf0>)
 80037ae:	22ff      	movs	r2, #255	@ 0xff
 80037b0:	601a      	str	r2, [r3, #0]
	tmp=search();
 80037b2:	f7fd f99c 	bl	8000aee <search>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4a20      	ldr	r2, [pc, #128]	@ (800383c <read_finger+0xf0>)
 80037ba:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 80037bc:	4b1f      	ldr	r3, [pc, #124]	@ (800383c <read_finger+0xf0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d117      	bne.n	80037f4 <read_finger+0xa8>
	{
		tmp=0xff;	// co van tay
 80037c4:	4b1d      	ldr	r3, [pc, #116]	@ (800383c <read_finger+0xf0>)
 80037c6:	22ff      	movs	r2, #255	@ 0xff
 80037c8:	601a      	str	r2, [r3, #0]
		CLCD_I2C_Display(&LCD1, "    WELCOME", " Finger");
 80037ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003844 <read_finger+0xf8>)
 80037cc:	491e      	ldr	r1, [pc, #120]	@ (8003848 <read_finger+0xfc>)
 80037ce:	481f      	ldr	r0, [pc, #124]	@ (800384c <read_finger+0x100>)
 80037d0:	f7fc fe14 	bl	80003fc <CLCD_I2C_Display>
		sprintf(mess,"-id = %d  ", pID); // Use %d for integer
 80037d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003850 <read_finger+0x104>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	491e      	ldr	r1, [pc, #120]	@ (8003854 <read_finger+0x108>)
 80037dc:	481e      	ldr	r0, [pc, #120]	@ (8003858 <read_finger+0x10c>)
 80037de:	f009 fdcf 	bl	800d380 <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 80037e2:	491d      	ldr	r1, [pc, #116]	@ (8003858 <read_finger+0x10c>)
 80037e4:	4819      	ldr	r0, [pc, #100]	@ (800384c <read_finger+0x100>)
 80037e6:	f7fc fde2 	bl	80003ae <CLCD_I2C_WriteString>
		opendoor();
 80037ea:	f000 fa1b 	bl	8003c24 <opendoor>
		CLCD_I2C_Clear(&LCD1);
 80037ee:	4817      	ldr	r0, [pc, #92]	@ (800384c <read_finger+0x100>)
 80037f0:	f7fc fdf4 	bl	80003dc <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 80037f4:	4b11      	ldr	r3, [pc, #68]	@ (800383c <read_finger+0xf0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	d11d      	bne.n	8003838 <read_finger+0xec>
	{
		tmp=0xff;
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <read_finger+0xf0>)
 80037fe:	22ff      	movs	r2, #255	@ 0xff
 8003800:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003802:	2201      	movs	r2, #1
 8003804:	2100      	movs	r1, #0
 8003806:	4811      	ldr	r0, [pc, #68]	@ (800384c <read_finger+0x100>)
 8003808:	f7fc fd7e 	bl	8000308 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Wrong Fingerprint"); buzzer(5);HAL_Delay(1000);
 800380c:	4913      	ldr	r1, [pc, #76]	@ (800385c <read_finger+0x110>)
 800380e:	480f      	ldr	r0, [pc, #60]	@ (800384c <read_finger+0x100>)
 8003810:	f7fc fdcd 	bl	80003ae <CLCD_I2C_WriteString>
 8003814:	2005      	movs	r0, #5
 8003816:	f000 fa55 	bl	8003cc4 <buzzer>
 800381a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800381e:	f000 ff5f 	bl	80046e0 <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 8003822:	490d      	ldr	r1, [pc, #52]	@ (8003858 <read_finger+0x10c>)
 8003824:	4809      	ldr	r0, [pc, #36]	@ (800384c <read_finger+0x100>)
 8003826:	f7fc fdc2 	bl	80003ae <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 800382a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800382e:	f000 ff57 	bl	80046e0 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8003832:	4806      	ldr	r0, [pc, #24]	@ (800384c <read_finger+0x100>)
 8003834:	f7fc fdd2 	bl	80003dc <CLCD_I2C_Clear>
	}
}
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000404 	.word	0x20000404
 8003840:	200003f4 	.word	0x200003f4
 8003844:	0800e594 	.word	0x0800e594
 8003848:	0800dd1c 	.word	0x0800dd1c
 800384c:	200003d8 	.word	0x200003d8
 8003850:	20000218 	.word	0x20000218
 8003854:	0800e59c 	.word	0x0800e59c
 8003858:	200003f8 	.word	0x200003f8
 800385c:	0800e5a8 	.word	0x0800e5a8

08003860 <remove_id_finger>:
void remove_id_finger()
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
    uint8_t id = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	75fb      	strb	r3, [r7, #23]
    CLCD_I2C_Display(&LCD1, "Enter ID to remove:", "ID= ");
 800386a:	4a31      	ldr	r2, [pc, #196]	@ (8003930 <remove_id_finger+0xd0>)
 800386c:	4931      	ldr	r1, [pc, #196]	@ (8003934 <remove_id_finger+0xd4>)
 800386e:	4832      	ldr	r0, [pc, #200]	@ (8003938 <remove_id_finger+0xd8>)
 8003870:	f7fc fdc4 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 8003874:	200a      	movs	r0, #10
 8003876:	f7fc ff1b 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800387a:	4603      	mov	r3, r0
 800387c:	75bb      	strb	r3, [r7, #22]
        if (key >= '1' && key <= '9')
 800387e:	7dbb      	ldrb	r3, [r7, #22]
 8003880:	2b30      	cmp	r3, #48	@ 0x30
 8003882:	d9f7      	bls.n	8003874 <remove_id_finger+0x14>
 8003884:	7dbb      	ldrb	r3, [r7, #22]
 8003886:	2b39      	cmp	r3, #57	@ 0x39
 8003888:	d8f4      	bhi.n	8003874 <remove_id_finger+0x14>
        {
        	buzzer(1);
 800388a:	2001      	movs	r0, #1
 800388c:	f000 fa1a 	bl	8003cc4 <buzzer>
            id = key - '0';
 8003890:	7dbb      	ldrb	r3, [r7, #22]
 8003892:	3b30      	subs	r3, #48	@ 0x30
 8003894:	75fb      	strb	r3, [r7, #23]
            break;
 8003896:	bf00      	nop
        }
    }
    ID = id;
 8003898:	4a28      	ldr	r2, [pc, #160]	@ (800393c <remove_id_finger+0xdc>)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	7013      	strb	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 800389e:	2201      	movs	r2, #1
 80038a0:	2104      	movs	r1, #4
 80038a2:	4825      	ldr	r0, [pc, #148]	@ (8003938 <remove_id_finger+0xd8>)
 80038a4:	f7fc fd30 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteChar(&LCD1, '0' + ID);
 80038a8:	4b24      	ldr	r3, [pc, #144]	@ (800393c <remove_id_finger+0xdc>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	3330      	adds	r3, #48	@ 0x30
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	4619      	mov	r1, r3
 80038b2:	4821      	ldr	r0, [pc, #132]	@ (8003938 <remove_id_finger+0xd8>)
 80038b4:	f7fc fd6b 	bl	800038e <CLCD_I2C_WriteChar>
    HAL_Delay(1000);
 80038b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80038bc:	f000 ff10 	bl	80046e0 <HAL_Delay>

    CLCD_I2C_Display(&LCD1, "Removing Finger", "");
 80038c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003940 <remove_id_finger+0xe0>)
 80038c2:	4920      	ldr	r1, [pc, #128]	@ (8003944 <remove_id_finger+0xe4>)
 80038c4:	481c      	ldr	r0, [pc, #112]	@ (8003938 <remove_id_finger+0xd8>)
 80038c6:	f7fc fd99 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result = delete_id_finger(ID);
 80038ca:	4b1c      	ldr	r3, [pc, #112]	@ (800393c <remove_id_finger+0xdc>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd f974 	bl	8000bbc <delete_id_finger>
 80038d4:	4603      	mov	r3, r0
 80038d6:	757b      	strb	r3, [r7, #21]
    if (result == 0x00)
 80038d8:	7d7b      	ldrb	r3, [r7, #21]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10d      	bne.n	80038fa <remove_id_finger+0x9a>
    {
        CLCD_I2C_Display(&LCD1, "Remove Finger", "Successfully");
 80038de:	4a1a      	ldr	r2, [pc, #104]	@ (8003948 <remove_id_finger+0xe8>)
 80038e0:	491a      	ldr	r1, [pc, #104]	@ (800394c <remove_id_finger+0xec>)
 80038e2:	4815      	ldr	r0, [pc, #84]	@ (8003938 <remove_id_finger+0xd8>)
 80038e4:	f7fc fd8a 	bl	80003fc <CLCD_I2C_Display>
        buzzer(1);
 80038e8:	2001      	movs	r0, #1
 80038ea:	f000 f9eb 	bl	8003cc4 <buzzer>
        // Ensure the fingerprint is removed from memory
        fingerprint_detected = 0;
 80038ee:	4b18      	ldr	r3, [pc, #96]	@ (8003950 <remove_id_finger+0xf0>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
        // Reset the fingerprint module
        reset_fingerprint_module();
 80038f4:	f000 f878 	bl	80039e8 <reset_fingerprint_module>
 80038f8:	e00e      	b.n	8003918 <remove_id_finger+0xb8>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 80038fa:	7d7b      	ldrb	r3, [r7, #21]
 80038fc:	1d38      	adds	r0, r7, #4
 80038fe:	4a15      	ldr	r2, [pc, #84]	@ (8003954 <remove_id_finger+0xf4>)
 8003900:	2110      	movs	r1, #16
 8003902:	f009 fd09 	bl	800d318 <sniprintf>
        buzzer(5);
 8003906:	2005      	movs	r0, #5
 8003908:	f000 f9dc 	bl	8003cc4 <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	461a      	mov	r2, r3
 8003910:	490e      	ldr	r1, [pc, #56]	@ (800394c <remove_id_finger+0xec>)
 8003912:	4809      	ldr	r0, [pc, #36]	@ (8003938 <remove_id_finger+0xd8>)
 8003914:	f7fc fd72 	bl	80003fc <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 8003918:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800391c:	f000 fee0 	bl	80046e0 <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 8003920:	4805      	ldr	r0, [pc, #20]	@ (8003938 <remove_id_finger+0xd8>)
 8003922:	f7fc fd5b 	bl	80003dc <CLCD_I2C_Clear>
}
 8003926:	bf00      	nop
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	0800e4d0 	.word	0x0800e4d0
 8003934:	0800e5bc 	.word	0x0800e5bc
 8003938:	200003d8 	.word	0x200003d8
 800393c:	20000408 	.word	0x20000408
 8003940:	0800dd08 	.word	0x0800dd08
 8003944:	0800e5d0 	.word	0x0800e5d0
 8003948:	0800e5e0 	.word	0x0800e5e0
 800394c:	0800e5f0 	.word	0x0800e5f0
 8003950:	20000409 	.word	0x20000409
 8003954:	0800e600 	.word	0x0800e600

08003958 <remove_all_finger>:

void remove_all_finger()
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
    CLCD_I2C_Display(&LCD1, "  RM ALL FINGER", "  Processing...");
 800395e:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <remove_all_finger+0x70>)
 8003960:	491a      	ldr	r1, [pc, #104]	@ (80039cc <remove_all_finger+0x74>)
 8003962:	481b      	ldr	r0, [pc, #108]	@ (80039d0 <remove_all_finger+0x78>)
 8003964:	f7fc fd4a 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result = empty();
 8003968:	f7fd f8fc 	bl	8000b64 <empty>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]
    if (result == 0x00)
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <remove_all_finger+0x3a>
    {
        CLCD_I2C_Display(&LCD1, "   REMOVE ALL", "  SUCCESSFULLY");
 8003976:	4a17      	ldr	r2, [pc, #92]	@ (80039d4 <remove_all_finger+0x7c>)
 8003978:	4917      	ldr	r1, [pc, #92]	@ (80039d8 <remove_all_finger+0x80>)
 800397a:	4815      	ldr	r0, [pc, #84]	@ (80039d0 <remove_all_finger+0x78>)
 800397c:	f7fc fd3e 	bl	80003fc <CLCD_I2C_Display>
        buzzer(1);
 8003980:	2001      	movs	r0, #1
 8003982:	f000 f99f 	bl	8003cc4 <buzzer>
        // Ensure all fingerprints are removed from memory
        fingerprint_detected = 0;
 8003986:	4b15      	ldr	r3, [pc, #84]	@ (80039dc <remove_all_finger+0x84>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
        // Reset the fingerprint module
        reset_fingerprint_module();
 800398c:	f000 f82c 	bl	80039e8 <reset_fingerprint_module>
 8003990:	e00e      	b.n	80039b0 <remove_all_finger+0x58>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	1d38      	adds	r0, r7, #4
 8003996:	4a12      	ldr	r2, [pc, #72]	@ (80039e0 <remove_all_finger+0x88>)
 8003998:	2110      	movs	r1, #16
 800399a:	f009 fcbd 	bl	800d318 <sniprintf>
        buzzer(5);
 800399e:	2005      	movs	r0, #5
 80039a0:	f000 f990 	bl	8003cc4 <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 80039a4:	1d3b      	adds	r3, r7, #4
 80039a6:	461a      	mov	r2, r3
 80039a8:	490e      	ldr	r1, [pc, #56]	@ (80039e4 <remove_all_finger+0x8c>)
 80039aa:	4809      	ldr	r0, [pc, #36]	@ (80039d0 <remove_all_finger+0x78>)
 80039ac:	f7fc fd26 	bl	80003fc <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 80039b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80039b4:	f000 fe94 	bl	80046e0 <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 80039b8:	4805      	ldr	r0, [pc, #20]	@ (80039d0 <remove_all_finger+0x78>)
 80039ba:	f7fc fd0f 	bl	80003dc <CLCD_I2C_Clear>
}
 80039be:	bf00      	nop
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	0800e614 	.word	0x0800e614
 80039cc:	0800e624 	.word	0x0800e624
 80039d0:	200003d8 	.word	0x200003d8
 80039d4:	0800e634 	.word	0x0800e634
 80039d8:	0800e644 	.word	0x0800e644
 80039dc:	20000409 	.word	0x20000409
 80039e0:	0800e600 	.word	0x0800e600
 80039e4:	0800e5f0 	.word	0x0800e5f0

080039e8 <reset_fingerprint_module>:

void reset_fingerprint_module()
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
    // This can be a hardware reset or a software reset command
    // Example:
    // HAL_GPIO_WritePin(FP_RESET_GPIO_Port, FP_RESET_Pin, GPIO_PIN_RESET);
    // HAL_Delay(100);
    // HAL_GPIO_WritePin(FP_RESET_GPIO_Port, FP_RESET_Pin, GPIO_PIN_SET);
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <startface>:
void startface(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
	if(Rx_Buffer[0] == 'Y'){
 80039f8:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <startface+0x5c>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	2b59      	cmp	r3, #89	@ 0x59
 8003a00:	d10e      	bne.n	8003a20 <startface+0x2c>
        CLCD_I2C_Clear(&LCD1);
 8003a02:	4814      	ldr	r0, [pc, #80]	@ (8003a54 <startface+0x60>)
 8003a04:	f7fc fcea 	bl	80003dc <CLCD_I2C_Clear>
        CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4811      	ldr	r0, [pc, #68]	@ (8003a54 <startface+0x60>)
 8003a0e:	f7fc fc7b 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 8003a12:	4911      	ldr	r1, [pc, #68]	@ (8003a58 <startface+0x64>)
 8003a14:	480f      	ldr	r0, [pc, #60]	@ (8003a54 <startface+0x60>)
 8003a16:	f7fc fcca 	bl	80003ae <CLCD_I2C_WriteString>
        opendoor();
 8003a1a:	f000 f903 	bl	8003c24 <opendoor>
 8003a1e:	e010      	b.n	8003a42 <startface+0x4e>
//        HAL_Delay(2000);
	}else if(Rx_Buffer[0] == 'N'){
 8003a20:	4b0b      	ldr	r3, [pc, #44]	@ (8003a50 <startface+0x5c>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a28:	d10b      	bne.n	8003a42 <startface+0x4e>
		CLCD_I2C_Display(&LCD1, "  WRONG FACEID", "CAN NOT ACCESS");
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a5c <startface+0x68>)
 8003a2c:	490c      	ldr	r1, [pc, #48]	@ (8003a60 <startface+0x6c>)
 8003a2e:	4809      	ldr	r0, [pc, #36]	@ (8003a54 <startface+0x60>)
 8003a30:	f7fc fce4 	bl	80003fc <CLCD_I2C_Display>
		buzzer(5);
 8003a34:	2005      	movs	r0, #5
 8003a36:	f000 f945 	bl	8003cc4 <buzzer>
        HAL_Delay(2000);
 8003a3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a3e:	f000 fe4f 	bl	80046e0 <HAL_Delay>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003a42:	2280      	movs	r2, #128	@ 0x80
 8003a44:	2100      	movs	r1, #0
 8003a46:	4802      	ldr	r0, [pc, #8]	@ (8003a50 <startface+0x5c>)
 8003a48:	f009 fcba 	bl	800d3c0 <memset>
}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000350 	.word	0x20000350
 8003a54:	200003d8 	.word	0x200003d8
 8003a58:	0800dd1c 	.word	0x0800dd1c
 8003a5c:	0800e654 	.word	0x0800e654
 8003a60:	0800e664 	.word	0x0800e664

08003a64 <enter_password>:

void enter_password(char *password) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 6; i++) {
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e01c      	b.n	8003aac <enter_password+0x48>
        char key;
        do {
            key = KeyPad_WaitForKeyGetChar(10);
 8003a72:	200a      	movs	r0, #10
 8003a74:	f7fc fe1c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	72fb      	strb	r3, [r7, #11]
        } while (key == 0 || (key < '0' || key > '9')); // Only accept numeric keys
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f7      	beq.n	8003a72 <enter_password+0xe>
 8003a82:	7afb      	ldrb	r3, [r7, #11]
 8003a84:	2b2f      	cmp	r3, #47	@ 0x2f
 8003a86:	d9f4      	bls.n	8003a72 <enter_password+0xe>
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	2b39      	cmp	r3, #57	@ 0x39
 8003a8c:	d8f1      	bhi.n	8003a72 <enter_password+0xe>
        buzzer(1);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f000 f918 	bl	8003cc4 <buzzer>
        password[i] = key;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	7afa      	ldrb	r2, [r7, #11]
 8003a9c:	701a      	strb	r2, [r3, #0]
        CLCD_I2C_WriteChar(&LCD1, '*');
 8003a9e:	212a      	movs	r1, #42	@ 0x2a
 8003aa0:	4808      	ldr	r0, [pc, #32]	@ (8003ac4 <enter_password+0x60>)
 8003aa2:	f7fc fc74 	bl	800038e <CLCD_I2C_WriteChar>
    for (int i = 0; i < 6; i++) {
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	dddf      	ble.n	8003a72 <enter_password+0xe>
    }
    password[6] = '\0';
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3306      	adds	r3, #6
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200003d8 	.word	0x200003d8

08003ac8 <change_password>:

void change_password(void) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
    char new_password[7] = {0};
 8003ace:	2300      	movs	r3, #0
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	1d3b      	adds	r3, r7, #4
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	460a      	mov	r2, r1
 8003adc:	709a      	strb	r2, [r3, #2]
    CLCD_I2C_Display(&LCD1, "  PLEASE INFORM", "   ALL ADMINS");
 8003ade:	4a15      	ldr	r2, [pc, #84]	@ (8003b34 <change_password+0x6c>)
 8003ae0:	4915      	ldr	r1, [pc, #84]	@ (8003b38 <change_password+0x70>)
 8003ae2:	4816      	ldr	r0, [pc, #88]	@ (8003b3c <change_password+0x74>)
 8003ae4:	f7fc fc8a 	bl	80003fc <CLCD_I2C_Display>
    HAL_Delay(1500);
 8003ae8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003aec:	f000 fdf8 	bl	80046e0 <HAL_Delay>
    CLCD_I2C_Display(&LCD1, " ENTER NEW PASS", "     ");
 8003af0:	4a13      	ldr	r2, [pc, #76]	@ (8003b40 <change_password+0x78>)
 8003af2:	4914      	ldr	r1, [pc, #80]	@ (8003b44 <change_password+0x7c>)
 8003af4:	4811      	ldr	r0, [pc, #68]	@ (8003b3c <change_password+0x74>)
 8003af6:	f7fc fc81 	bl	80003fc <CLCD_I2C_Display>
    enter_password(new_password);
 8003afa:	463b      	mov	r3, r7
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ffb1 	bl	8003a64 <enter_password>
    // Erase the flash memory at the password address before writing the new password
    Flash_Erase(StartAddressPassword);
 8003b02:	4811      	ldr	r0, [pc, #68]	@ (8003b48 <change_password+0x80>)
 8003b04:	f7fd f89c 	bl	8000c40 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)new_password, 6);
 8003b08:	463b      	mov	r3, r7
 8003b0a:	2206      	movs	r2, #6
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	480e      	ldr	r0, [pc, #56]	@ (8003b48 <change_password+0x80>)
 8003b10:	f7fd f8ca 	bl	8000ca8 <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, "PASSWORD CHANGED", "  SUCCESSFULLY");
 8003b14:	4a0d      	ldr	r2, [pc, #52]	@ (8003b4c <change_password+0x84>)
 8003b16:	490e      	ldr	r1, [pc, #56]	@ (8003b50 <change_password+0x88>)
 8003b18:	4808      	ldr	r0, [pc, #32]	@ (8003b3c <change_password+0x74>)
 8003b1a:	f7fc fc6f 	bl	80003fc <CLCD_I2C_Display>
    buzzer(1);
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f000 f8d0 	bl	8003cc4 <buzzer>
    HAL_Delay(2000);
 8003b24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003b28:	f000 fdda 	bl	80046e0 <HAL_Delay>
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	0800e674 	.word	0x0800e674
 8003b38:	0800e684 	.word	0x0800e684
 8003b3c:	200003d8 	.word	0x200003d8
 8003b40:	0800e694 	.word	0x0800e694
 8003b44:	0800e69c 	.word	0x0800e69c
 8003b48:	0800f400 	.word	0x0800f400
 8003b4c:	0800e634 	.word	0x0800e634
 8003b50:	0800e6ac 	.word	0x0800e6ac

08003b54 <check_password>:

uint8_t check_password(char *password) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
    char stored_password[7] = {0};
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	f107 030c 	add.w	r3, r7, #12
 8003b64:	2100      	movs	r1, #0
 8003b66:	460a      	mov	r2, r1
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	460a      	mov	r2, r1
 8003b6c:	709a      	strb	r2, [r3, #2]
    Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8003b6e:	f107 0308 	add.w	r3, r7, #8
 8003b72:	2206      	movs	r2, #6
 8003b74:	4619      	mov	r1, r3
 8003b76:	480a      	ldr	r0, [pc, #40]	@ (8003ba0 <check_password+0x4c>)
 8003b78:	f7fd f8de 	bl	8000d38 <Flash_Read_Array>
    stored_password[6] = '\0';
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73bb      	strb	r3, [r7, #14]
    return strcmp(password, stored_password) == 0;
 8003b80:	f107 0308 	add.w	r3, r7, #8
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fc fae0 	bl	800014c <strcmp>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	0800f400 	.word	0x0800f400

08003ba4 <set_default_password>:

void set_default_password(void) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
    char default_password[6] = "111111";
 8003baa:	4a16      	ldr	r2, [pc, #88]	@ (8003c04 <set_default_password+0x60>)
 8003bac:	463b      	mov	r3, r7
 8003bae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bb2:	6018      	str	r0, [r3, #0]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	8019      	strh	r1, [r3, #0]
    // Erase the flash memory at the password address before writing the default password
    Flash_Erase(StartAddressPassword);
 8003bb8:	4813      	ldr	r0, [pc, #76]	@ (8003c08 <set_default_password+0x64>)
 8003bba:	f7fd f841 	bl	8000c40 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)default_password, 6);
 8003bbe:	463b      	mov	r3, r7
 8003bc0:	2206      	movs	r2, #6
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4810      	ldr	r0, [pc, #64]	@ (8003c08 <set_default_password+0x64>)
 8003bc6:	f7fd f86f 	bl	8000ca8 <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, " RESET PASSWORD", "  SUCCESSFULLY");
 8003bca:	4a10      	ldr	r2, [pc, #64]	@ (8003c0c <set_default_password+0x68>)
 8003bcc:	4910      	ldr	r1, [pc, #64]	@ (8003c10 <set_default_password+0x6c>)
 8003bce:	4811      	ldr	r0, [pc, #68]	@ (8003c14 <set_default_password+0x70>)
 8003bd0:	f7fc fc14 	bl	80003fc <CLCD_I2C_Display>
    buzzer(1);
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f000 f875 	bl	8003cc4 <buzzer>
    HAL_Delay(1500);
 8003bda:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003bde:	f000 fd7f 	bl	80046e0 <HAL_Delay>
    CLCD_I2C_Display(&LCD1, "  NEW PASSWORD:", "     111111");
 8003be2:	4a0d      	ldr	r2, [pc, #52]	@ (8003c18 <set_default_password+0x74>)
 8003be4:	490d      	ldr	r1, [pc, #52]	@ (8003c1c <set_default_password+0x78>)
 8003be6:	480b      	ldr	r0, [pc, #44]	@ (8003c14 <set_default_password+0x70>)
 8003be8:	f7fc fc08 	bl	80003fc <CLCD_I2C_Display>
    HAL_Delay(1000);
 8003bec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003bf0:	f000 fd76 	bl	80046e0 <HAL_Delay>
    exitmenu=0;
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <set_default_password+0x7c>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	0800e6ec 	.word	0x0800e6ec
 8003c08:	0800f400 	.word	0x0800f400
 8003c0c:	0800e634 	.word	0x0800e634
 8003c10:	0800e6c0 	.word	0x0800e6c0
 8003c14:	200003d8 	.word	0x200003d8
 8003c18:	0800e6d0 	.word	0x0800e6d0
 8003c1c:	0800e6dc 	.word	0x0800e6dc
 8003c20:	20000020 	.word	0x20000020

08003c24 <opendoor>:

void opendoor(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
    buzzer(1);
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f000 f84a 	bl	8003cc4 <buzzer>
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 1);
 8003c30:	2201      	movs	r2, #1
 8003c32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c36:	481e      	ldr	r0, [pc, #120]	@ (8003cb0 <opendoor+0x8c>)
 8003c38:	f001 fa1f 	bl	800507a <HAL_GPIO_WritePin>
    HAL_Delay(1500);
 8003c3c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003c40:	f000 fd4e 	bl	80046e0 <HAL_Delay>
    uint32_t door_open_time = HAL_GetTick();
 8003c44:	f000 fd42 	bl	80046cc <HAL_GetTick>
 8003c48:	6178      	str	r0, [r7, #20]
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 8003c4a:	e01b      	b.n	8003c84 <opendoor+0x60>
    {
        uint32_t remaining_time = (opendoortime - (HAL_GetTick() - door_open_time) + 999) / 1000; // Adjust to include 2s
 8003c4c:	f000 fd3e 	bl	80046cc <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	f603 739f 	addw	r3, r3, #3999	@ 0xf9f
 8003c5a:	4a16      	ldr	r2, [pc, #88]	@ (8003cb4 <opendoor+0x90>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	099b      	lsrs	r3, r3, #6
 8003c62:	613b      	str	r3, [r7, #16]
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "       %lus", remaining_time);
 8003c64:	4638      	mov	r0, r7
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4a13      	ldr	r2, [pc, #76]	@ (8003cb8 <opendoor+0x94>)
 8003c6a:	2110      	movs	r1, #16
 8003c6c:	f009 fb54 	bl	800d318 <sniprintf>
        CLCD_I2C_Display(&LCD1, " DOOR IS OPENING", buffer);
 8003c70:	463b      	mov	r3, r7
 8003c72:	461a      	mov	r2, r3
 8003c74:	4911      	ldr	r1, [pc, #68]	@ (8003cbc <opendoor+0x98>)
 8003c76:	4812      	ldr	r0, [pc, #72]	@ (8003cc0 <opendoor+0x9c>)
 8003c78:	f7fc fbc0 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 8003c7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c80:	f000 fd2e 	bl	80046e0 <HAL_Delay>
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 8003c84:	f000 fd22 	bl	80046cc <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d9da      	bls.n	8003c4c <opendoor+0x28>
    }
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8003c96:	2200      	movs	r2, #0
 8003c98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c9c:	4804      	ldr	r0, [pc, #16]	@ (8003cb0 <opendoor+0x8c>)
 8003c9e:	f001 f9ec 	bl	800507a <HAL_GPIO_WritePin>
    CLCD_I2C_Clear(&LCD1);
 8003ca2:	4807      	ldr	r0, [pc, #28]	@ (8003cc0 <opendoor+0x9c>)
 8003ca4:	f7fc fb9a 	bl	80003dc <CLCD_I2C_Clear>
}
 8003ca8:	bf00      	nop
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40010800 	.word	0x40010800
 8003cb4:	10624dd3 	.word	0x10624dd3
 8003cb8:	0800e6f4 	.word	0x0800e6f4
 8003cbc:	0800e700 	.word	0x0800e700
 8003cc0:	200003d8 	.word	0x200003d8

08003cc4 <buzzer>:
void buzzer( uint8_t countbeep)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]

	while(countbeep--)
 8003cce:	e011      	b.n	8003cf4 <buzzer+0x30>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,0);
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003cd6:	480c      	ldr	r0, [pc, #48]	@ (8003d08 <buzzer+0x44>)
 8003cd8:	f001 f9cf 	bl	800507a <HAL_GPIO_WritePin>
		HAL_Delay(120);
 8003cdc:	2078      	movs	r0, #120	@ 0x78
 8003cde:	f000 fcff 	bl	80046e0 <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ce8:	4807      	ldr	r0, [pc, #28]	@ (8003d08 <buzzer+0x44>)
 8003cea:	f001 f9c6 	bl	800507a <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8003cee:	2032      	movs	r0, #50	@ 0x32
 8003cf0:	f000 fcf6 	bl	80046e0 <HAL_Delay>
	while(countbeep--)
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	1e5a      	subs	r2, r3, #1
 8003cf8:	71fa      	strb	r2, [r7, #7]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e8      	bne.n	8003cd0 <buzzer+0xc>
	}
}
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40010800 	.word	0x40010800

08003d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d10:	b672      	cpsid	i
}
 8003d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d14:	bf00      	nop
 8003d16:	e7fd      	b.n	8003d14 <Error_Handler+0x8>

08003d18 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003d26:	bf00      	nop
 8003d28:	4b0e      	ldr	r3, [pc, #56]	@ (8003d64 <TM_SPI_Send+0x4c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d1f8      	bne.n	8003d28 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003d36:	f107 0208 	add.w	r2, r7, #8
 8003d3a:	f107 010c 	add.w	r1, r7, #12
 8003d3e:	230a      	movs	r3, #10
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2301      	movs	r3, #1
 8003d44:	4807      	ldr	r0, [pc, #28]	@ (8003d64 <TM_SPI_Send+0x4c>)
 8003d46:	f003 feff 	bl	8007b48 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8003d4a:	bf00      	nop
 8003d4c:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <TM_SPI_Send+0x4c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d56:	2b80      	cmp	r3, #128	@ 0x80
 8003d58:	d0f8      	beq.n	8003d4c <TM_SPI_Send+0x34>
	return data_re[0];
 8003d5a:	7a3b      	ldrb	r3, [r7, #8]

}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000270 	.word	0x20000270

08003d68 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8003d6c:	f000 f8d5 	bl	8003f1a <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003d70:	218d      	movs	r1, #141	@ 0x8d
 8003d72:	202a      	movs	r0, #42	@ 0x2a
 8003d74:	f000 f836 	bl	8003de4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003d78:	213e      	movs	r1, #62	@ 0x3e
 8003d7a:	202b      	movs	r0, #43	@ 0x2b
 8003d7c:	f000 f832 	bl	8003de4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003d80:	211e      	movs	r1, #30
 8003d82:	202d      	movs	r0, #45	@ 0x2d
 8003d84:	f000 f82e 	bl	8003de4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003d88:	2100      	movs	r1, #0
 8003d8a:	202c      	movs	r0, #44	@ 0x2c
 8003d8c:	f000 f82a 	bl	8003de4 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8003d90:	2170      	movs	r1, #112	@ 0x70
 8003d92:	2026      	movs	r0, #38	@ 0x26
 8003d94:	f000 f826 	bl	8003de4 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003d98:	2140      	movs	r1, #64	@ 0x40
 8003d9a:	2015      	movs	r0, #21
 8003d9c:	f000 f822 	bl	8003de4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003da0:	213d      	movs	r1, #61	@ 0x3d
 8003da2:	2011      	movs	r0, #17
 8003da4:	f000 f81e 	bl	8003de4 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003da8:	f000 f8a2 	bl	8003ef0 <TM_MFRC522_AntennaOn>
}
 8003dac:	bf00      	nop
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	2026      	movs	r0, #38	@ 0x26
 8003dbc:	f000 f8b5 	bl	8003f2a <TM_MFRC522_Request>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9a1 	bl	8004112 <TM_MFRC522_Anticoll>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 8003dd4:	f000 fa23 	bl	800421e <TM_MFRC522_Halt>
	return status;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	460a      	mov	r2, r1
 8003dee:	71fb      	strb	r3, [r7, #7]
 8003df0:	4613      	mov	r3, r2
 8003df2:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003df4:	2200      	movs	r2, #0
 8003df6:	2110      	movs	r1, #16
 8003df8:	480c      	ldr	r0, [pc, #48]	@ (8003e2c <TM_MFRC522_WriteRegister+0x48>)
 8003dfa:	f001 f93e 	bl	800507a <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff ff84 	bl	8003d18 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003e10:	79bb      	ldrb	r3, [r7, #6]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff ff80 	bl	8003d18 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003e18:	2201      	movs	r2, #1
 8003e1a:	2110      	movs	r1, #16
 8003e1c:	4803      	ldr	r0, [pc, #12]	@ (8003e2c <TM_MFRC522_WriteRegister+0x48>)
 8003e1e:	f001 f92c 	bl	800507a <HAL_GPIO_WritePin>
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40010800 	.word	0x40010800

08003e30 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2110      	movs	r1, #16
 8003e3e:	480f      	ldr	r0, [pc, #60]	@ (8003e7c <TM_MFRC522_ReadRegister+0x4c>)
 8003e40:	f001 f91b 	bl	800507a <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	b25b      	sxtb	r3, r3
 8003e4a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003e4e:	b25b      	sxtb	r3, r3
 8003e50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e54:	b25b      	sxtb	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff5d 	bl	8003d18 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f7ff ff5a 	bl	8003d18 <TM_SPI_Send>
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003e68:	2201      	movs	r2, #1
 8003e6a:	2110      	movs	r1, #16
 8003e6c:	4803      	ldr	r0, [pc, #12]	@ (8003e7c <TM_MFRC522_ReadRegister+0x4c>)
 8003e6e:	f001 f904 	bl	800507a <HAL_GPIO_WritePin>

	return val;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40010800 	.word	0x40010800

08003e80 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	460a      	mov	r2, r1
 8003e8a:	71fb      	strb	r3, [r7, #7]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ffcc 	bl	8003e30 <TM_MFRC522_ReadRegister>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	79bb      	ldrb	r3, [r7, #6]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff ff9c 	bl	8003de4 <TM_MFRC522_WriteRegister>
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	460a      	mov	r2, r1
 8003ebe:	71fb      	strb	r3, [r7, #7]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ffb2 	bl	8003e30 <TM_MFRC522_ReadRegister>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	b25a      	sxtb	r2, r3
 8003ed0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	b25b      	sxtb	r3, r3
 8003ed8:	4013      	ands	r3, r2
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff7e 	bl	8003de4 <TM_MFRC522_WriteRegister>
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003ef6:	2014      	movs	r0, #20
 8003ef8:	f7ff ff9a 	bl	8003e30 <TM_MFRC522_ReadRegister>
 8003efc:	4603      	mov	r3, r0
 8003efe:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003f0a:	2103      	movs	r1, #3
 8003f0c:	2014      	movs	r0, #20
 8003f0e:	f7ff ffb7 	bl	8003e80 <TM_MFRC522_SetBitMask>
	}
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8003f1e:	210f      	movs	r1, #15
 8003f20:	2001      	movs	r0, #1
 8003f22:	f7ff ff5f 	bl	8003de4 <TM_MFRC522_WriteRegister>
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af02      	add	r7, sp, #8
 8003f30:	4603      	mov	r3, r0
 8003f32:	6039      	str	r1, [r7, #0]
 8003f34:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003f36:	2107      	movs	r1, #7
 8003f38:	200d      	movs	r0, #13
 8003f3a:	f7ff ff53 	bl	8003de4 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	79fa      	ldrb	r2, [r7, #7]
 8003f42:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003f44:	f107 030c 	add.w	r3, r7, #12
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	200c      	movs	r0, #12
 8003f52:	f000 f80f 	bl	8003f74 <TM_MFRC522_ToCard>
 8003f56:	4603      	mov	r3, r0
 8003f58:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <TM_MFRC522_Request+0x3c>
 8003f60:	89bb      	ldrh	r3, [r7, #12]
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d001      	beq.n	8003f6a <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003f66:	2302      	movs	r3, #2
 8003f68:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	4603      	mov	r3, r0
 8003f80:	73fb      	strb	r3, [r7, #15]
 8003f82:	4613      	mov	r3, r2
 8003f84:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003f86:	2302      	movs	r3, #2
 8003f88:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	d006      	beq.n	8003fa6 <TM_MFRC522_ToCard+0x32>
 8003f98:	2b0e      	cmp	r3, #14
 8003f9a:	d109      	bne.n	8003fb0 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8003f9c:	2312      	movs	r3, #18
 8003f9e:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	757b      	strb	r3, [r7, #21]
			break;
 8003fa4:	e005      	b.n	8003fb2 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003fa6:	2377      	movs	r3, #119	@ 0x77
 8003fa8:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8003faa:	2330      	movs	r3, #48	@ 0x30
 8003fac:	757b      	strb	r3, [r7, #21]
			break;
 8003fae:	e000      	b.n	8003fb2 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003fb0:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003fb2:	7dbb      	ldrb	r3, [r7, #22]
 8003fb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	4619      	mov	r1, r3
 8003fbc:	2002      	movs	r0, #2
 8003fbe:	f7ff ff11 	bl	8003de4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003fc2:	2180      	movs	r1, #128	@ 0x80
 8003fc4:	2004      	movs	r0, #4
 8003fc6:	f7ff ff75 	bl	8003eb4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003fca:	2180      	movs	r1, #128	@ 0x80
 8003fcc:	200a      	movs	r0, #10
 8003fce:	f7ff ff57 	bl	8003e80 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	f7ff ff05 	bl	8003de4 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8003fda:	2300      	movs	r3, #0
 8003fdc:	827b      	strh	r3, [r7, #18]
 8003fde:	e00a      	b.n	8003ff6 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8003fe0:	8a7b      	ldrh	r3, [r7, #18]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	2009      	movs	r0, #9
 8003fec:	f7ff fefa 	bl	8003de4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8003ff0:	8a7b      	ldrh	r3, [r7, #18]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	827b      	strh	r3, [r7, #18]
 8003ff6:	7bbb      	ldrb	r3, [r7, #14]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	8a7a      	ldrh	r2, [r7, #18]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d3ef      	bcc.n	8003fe0 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	4619      	mov	r1, r3
 8004004:	2001      	movs	r0, #1
 8004006:	f7ff feed 	bl	8003de4 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b0c      	cmp	r3, #12
 800400e:	d103      	bne.n	8004018 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8004010:	2180      	movs	r1, #128	@ 0x80
 8004012:	200d      	movs	r0, #13
 8004014:	f7ff ff34 	bl	8003e80 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8004018:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800401c:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800401e:	2004      	movs	r0, #4
 8004020:	f7ff ff06 	bl	8003e30 <TM_MFRC522_ReadRegister>
 8004024:	4603      	mov	r3, r0
 8004026:	753b      	strb	r3, [r7, #20]
		i--;
 8004028:	8a7b      	ldrh	r3, [r7, #18]
 800402a:	3b01      	subs	r3, #1
 800402c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800402e:	8a7b      	ldrh	r3, [r7, #18]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <TM_MFRC522_ToCard+0xd6>
 8004034:	7d3b      	ldrb	r3, [r7, #20]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d105      	bne.n	800404a <TM_MFRC522_ToCard+0xd6>
 800403e:	7d3a      	ldrb	r2, [r7, #20]
 8004040:	7d7b      	ldrb	r3, [r7, #21]
 8004042:	4013      	ands	r3, r2
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0e9      	beq.n	800401e <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 800404a:	2180      	movs	r1, #128	@ 0x80
 800404c:	200d      	movs	r0, #13
 800404e:	f7ff ff31 	bl	8003eb4 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8004052:	8a7b      	ldrh	r3, [r7, #18]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d057      	beq.n	8004108 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8004058:	2006      	movs	r0, #6
 800405a:	f7ff fee9 	bl	8003e30 <TM_MFRC522_ReadRegister>
 800405e:	4603      	mov	r3, r0
 8004060:	f003 031b 	and.w	r3, r3, #27
 8004064:	2b00      	cmp	r3, #0
 8004066:	d14d      	bne.n	8004104 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 800406c:	7d3a      	ldrb	r2, [r7, #20]
 800406e:	7dbb      	ldrb	r3, [r7, #22]
 8004070:	4013      	ands	r3, r2
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	2b0c      	cmp	r3, #12
 8004084:	d140      	bne.n	8004108 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8004086:	200a      	movs	r0, #10
 8004088:	f7ff fed2 	bl	8003e30 <TM_MFRC522_ReadRegister>
 800408c:	4603      	mov	r3, r0
 800408e:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8004090:	200c      	movs	r0, #12
 8004092:	f7ff fecd 	bl	8003e30 <TM_MFRC522_ReadRegister>
 8004096:	4603      	mov	r3, r0
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 800409e:	7c7b      	ldrb	r3, [r7, #17]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 80040a4:	7d3b      	ldrb	r3, [r7, #20]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	7c7b      	ldrb	r3, [r7, #17]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b8:	801a      	strh	r2, [r3, #0]
 80040ba:	e005      	b.n	80040c8 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 80040bc:	7d3b      	ldrb	r3, [r7, #20]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c6:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 80040c8:	7d3b      	ldrb	r3, [r7, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <TM_MFRC522_ToCard+0x15e>
					n = 1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 80040d2:	7d3b      	ldrb	r3, [r7, #20]
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d901      	bls.n	80040dc <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 80040d8:	2310      	movs	r3, #16
 80040da:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80040dc:	2300      	movs	r3, #0
 80040de:	827b      	strh	r3, [r7, #18]
 80040e0:	e00a      	b.n	80040f8 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 80040e2:	8a7b      	ldrh	r3, [r7, #18]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	18d4      	adds	r4, r2, r3
 80040e8:	2009      	movs	r0, #9
 80040ea:	f7ff fea1 	bl	8003e30 <TM_MFRC522_ReadRegister>
 80040ee:	4603      	mov	r3, r0
 80040f0:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80040f2:	8a7b      	ldrh	r3, [r7, #18]
 80040f4:	3301      	adds	r3, #1
 80040f6:	827b      	strh	r3, [r7, #18]
 80040f8:	7d3b      	ldrb	r3, [r7, #20]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8a7a      	ldrh	r2, [r7, #18]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d3ef      	bcc.n	80040e2 <TM_MFRC522_ToCard+0x16e>
 8004102:	e001      	b.n	8004108 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8004104:	2302      	movs	r3, #2
 8004106:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8004108:	7dfb      	ldrb	r3, [r7, #23]
}
 800410a:	4618      	mov	r0, r3
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	bd90      	pop	{r4, r7, pc}

08004112 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af02      	add	r7, sp, #8
 8004118:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800411e:	2100      	movs	r1, #0
 8004120:	200d      	movs	r0, #13
 8004122:	f7ff fe5f 	bl	8003de4 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2293      	movs	r2, #147	@ 0x93
 800412a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3301      	adds	r3, #1
 8004130:	2220      	movs	r2, #32
 8004132:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8004134:	f107 030a 	add.w	r3, r7, #10
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	200c      	movs	r0, #12
 8004142:	f7ff ff17 	bl	8003f74 <TM_MFRC522_ToCard>
 8004146:	4603      	mov	r3, r0
 8004148:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d118      	bne.n	8004182 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8004150:	2300      	movs	r3, #0
 8004152:	73bb      	strb	r3, [r7, #14]
 8004154:	e009      	b.n	800416a <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8004156:	7bbb      	ldrb	r3, [r7, #14]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	7b7b      	ldrb	r3, [r7, #13]
 8004160:	4053      	eors	r3, r2
 8004162:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8004164:	7bbb      	ldrb	r3, [r7, #14]
 8004166:	3301      	adds	r3, #1
 8004168:	73bb      	strb	r3, [r7, #14]
 800416a:	7bbb      	ldrb	r3, [r7, #14]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d9f2      	bls.n	8004156 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8004170:	7bbb      	ldrb	r3, [r7, #14]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	7b7a      	ldrb	r2, [r7, #13]
 800417a:	429a      	cmp	r2, r3
 800417c:	d001      	beq.n	8004182 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800417e:	2302      	movs	r3, #2
 8004180:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	460b      	mov	r3, r1
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 800419a:	2104      	movs	r1, #4
 800419c:	2005      	movs	r0, #5
 800419e:	f7ff fe89 	bl	8003eb4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80041a2:	2180      	movs	r1, #128	@ 0x80
 80041a4:	200a      	movs	r0, #10
 80041a6:	f7ff fe6b 	bl	8003e80 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 80041aa:	2300      	movs	r3, #0
 80041ac:	75fb      	strb	r3, [r7, #23]
 80041ae:	e00a      	b.n	80041c6 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	4619      	mov	r1, r3
 80041ba:	2009      	movs	r0, #9
 80041bc:	f7ff fe12 	bl	8003de4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	3301      	adds	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
 80041c6:	7dfa      	ldrb	r2, [r7, #23]
 80041c8:	7afb      	ldrb	r3, [r7, #11]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d3f0      	bcc.n	80041b0 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80041ce:	2103      	movs	r1, #3
 80041d0:	2001      	movs	r0, #1
 80041d2:	f7ff fe07 	bl	8003de4 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80041d6:	23ff      	movs	r3, #255	@ 0xff
 80041d8:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80041da:	2005      	movs	r0, #5
 80041dc:	f7ff fe28 	bl	8003e30 <TM_MFRC522_ReadRegister>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75bb      	strb	r3, [r7, #22]
		i--;
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <TM_MFRC522_CalculateCRC+0x6e>
 80041f0:	7dbb      	ldrb	r3, [r7, #22]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ef      	beq.n	80041da <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80041fa:	2022      	movs	r0, #34	@ 0x22
 80041fc:	f7ff fe18 	bl	8003e30 <TM_MFRC522_ReadRegister>
 8004200:	4603      	mov	r3, r0
 8004202:	461a      	mov	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	1c5c      	adds	r4, r3, #1
 800420c:	2021      	movs	r0, #33	@ 0x21
 800420e:	f7ff fe0f 	bl	8003e30 <TM_MFRC522_ReadRegister>
 8004212:	4603      	mov	r3, r0
 8004214:	7023      	strb	r3, [r4, #0]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	bd90      	pop	{r4, r7, pc}

0800421e <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8004224:	2350      	movs	r3, #80	@ 0x50
 8004226:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 800422c:	463b      	mov	r3, r7
 800422e:	1c9a      	adds	r2, r3, #2
 8004230:	463b      	mov	r3, r7
 8004232:	2102      	movs	r1, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff ffa9 	bl	800418c <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 800423a:	463a      	mov	r2, r7
 800423c:	4639      	mov	r1, r7
 800423e:	1dbb      	adds	r3, r7, #6
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	4613      	mov	r3, r2
 8004244:	2204      	movs	r2, #4
 8004246:	200c      	movs	r0, #12
 8004248:	f7ff fe94 	bl	8003f74 <TM_MFRC522_ToCard>



}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800425a:	4b15      	ldr	r3, [pc, #84]	@ (80042b0 <HAL_MspInit+0x5c>)
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	4a14      	ldr	r2, [pc, #80]	@ (80042b0 <HAL_MspInit+0x5c>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6193      	str	r3, [r2, #24]
 8004266:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <HAL_MspInit+0x5c>)
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	4b0f      	ldr	r3, [pc, #60]	@ (80042b0 <HAL_MspInit+0x5c>)
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	4a0e      	ldr	r2, [pc, #56]	@ (80042b0 <HAL_MspInit+0x5c>)
 8004278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800427c:	61d3      	str	r3, [r2, #28]
 800427e:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <HAL_MspInit+0x5c>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800428a:	4b0a      	ldr	r3, [pc, #40]	@ (80042b4 <HAL_MspInit+0x60>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	4a04      	ldr	r2, [pc, #16]	@ (80042b4 <HAL_MspInit+0x60>)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40010000 	.word	0x40010000

080042b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c0:	f107 0310 	add.w	r3, r7, #16
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a16      	ldr	r2, [pc, #88]	@ (800432c <HAL_I2C_MspInit+0x74>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d124      	bne.n	8004322 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d8:	4b15      	ldr	r3, [pc, #84]	@ (8004330 <HAL_I2C_MspInit+0x78>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	4a14      	ldr	r2, [pc, #80]	@ (8004330 <HAL_I2C_MspInit+0x78>)
 80042de:	f043 0308 	orr.w	r3, r3, #8
 80042e2:	6193      	str	r3, [r2, #24]
 80042e4:	4b12      	ldr	r3, [pc, #72]	@ (8004330 <HAL_I2C_MspInit+0x78>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80042f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80042f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042f6:	2312      	movs	r3, #18
 80042f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042fa:	2303      	movs	r3, #3
 80042fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042fe:	f107 0310 	add.w	r3, r7, #16
 8004302:	4619      	mov	r1, r3
 8004304:	480b      	ldr	r0, [pc, #44]	@ (8004334 <HAL_I2C_MspInit+0x7c>)
 8004306:	f000 fd1d 	bl	8004d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800430a:	4b09      	ldr	r3, [pc, #36]	@ (8004330 <HAL_I2C_MspInit+0x78>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	4a08      	ldr	r2, [pc, #32]	@ (8004330 <HAL_I2C_MspInit+0x78>)
 8004310:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004314:	61d3      	str	r3, [r2, #28]
 8004316:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <HAL_I2C_MspInit+0x78>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004322:	bf00      	nop
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40005800 	.word	0x40005800
 8004330:	40021000 	.word	0x40021000
 8004334:	40010c00 	.word	0x40010c00

08004338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004340:	f107 0310 	add.w	r3, r7, #16
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1b      	ldr	r2, [pc, #108]	@ (80043c0 <HAL_SPI_MspInit+0x88>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d12f      	bne.n	80043b8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004358:	4b1a      	ldr	r3, [pc, #104]	@ (80043c4 <HAL_SPI_MspInit+0x8c>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	4a19      	ldr	r2, [pc, #100]	@ (80043c4 <HAL_SPI_MspInit+0x8c>)
 800435e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004362:	6193      	str	r3, [r2, #24]
 8004364:	4b17      	ldr	r3, [pc, #92]	@ (80043c4 <HAL_SPI_MspInit+0x8c>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004370:	4b14      	ldr	r3, [pc, #80]	@ (80043c4 <HAL_SPI_MspInit+0x8c>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	4a13      	ldr	r2, [pc, #76]	@ (80043c4 <HAL_SPI_MspInit+0x8c>)
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	6193      	str	r3, [r2, #24]
 800437c:	4b11      	ldr	r3, [pc, #68]	@ (80043c4 <HAL_SPI_MspInit+0x8c>)
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004388:	23a0      	movs	r3, #160	@ 0xa0
 800438a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438c:	2302      	movs	r3, #2
 800438e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004390:	2303      	movs	r3, #3
 8004392:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004394:	f107 0310 	add.w	r3, r7, #16
 8004398:	4619      	mov	r1, r3
 800439a:	480b      	ldr	r0, [pc, #44]	@ (80043c8 <HAL_SPI_MspInit+0x90>)
 800439c:	f000 fcd2 	bl	8004d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80043a0:	2340      	movs	r3, #64	@ 0x40
 80043a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ac:	f107 0310 	add.w	r3, r7, #16
 80043b0:	4619      	mov	r1, r3
 80043b2:	4805      	ldr	r0, [pc, #20]	@ (80043c8 <HAL_SPI_MspInit+0x90>)
 80043b4:	f000 fcc6 	bl	8004d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80043b8:	bf00      	nop
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40013000 	.word	0x40013000
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40010800 	.word	0x40010800

080043cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043dc:	d113      	bne.n	8004406 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043de:	4b0c      	ldr	r3, [pc, #48]	@ (8004410 <HAL_TIM_Base_MspInit+0x44>)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	4a0b      	ldr	r2, [pc, #44]	@ (8004410 <HAL_TIM_Base_MspInit+0x44>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	61d3      	str	r3, [r2, #28]
 80043ea:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <HAL_TIM_Base_MspInit+0x44>)
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2100      	movs	r1, #0
 80043fa:	201c      	movs	r0, #28
 80043fc:	f000 fa6b 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004400:	201c      	movs	r0, #28
 8004402:	f000 fa84 	bl	800490e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000

08004414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	@ 0x28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441c:	f107 0314 	add.w	r3, r7, #20
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a22      	ldr	r2, [pc, #136]	@ (80044b8 <HAL_UART_MspInit+0xa4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d13d      	bne.n	80044b0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004434:	4b21      	ldr	r3, [pc, #132]	@ (80044bc <HAL_UART_MspInit+0xa8>)
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	4a20      	ldr	r2, [pc, #128]	@ (80044bc <HAL_UART_MspInit+0xa8>)
 800443a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800443e:	6193      	str	r3, [r2, #24]
 8004440:	4b1e      	ldr	r3, [pc, #120]	@ (80044bc <HAL_UART_MspInit+0xa8>)
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800444c:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <HAL_UART_MspInit+0xa8>)
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	4a1a      	ldr	r2, [pc, #104]	@ (80044bc <HAL_UART_MspInit+0xa8>)
 8004452:	f043 0308 	orr.w	r3, r3, #8
 8004456:	6193      	str	r3, [r2, #24]
 8004458:	4b18      	ldr	r3, [pc, #96]	@ (80044bc <HAL_UART_MspInit+0xa8>)
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004464:	2340      	movs	r3, #64	@ 0x40
 8004466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004468:	2302      	movs	r3, #2
 800446a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800446c:	2303      	movs	r3, #3
 800446e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	4619      	mov	r1, r3
 8004476:	4812      	ldr	r0, [pc, #72]	@ (80044c0 <HAL_UART_MspInit+0xac>)
 8004478:	f000 fc64 	bl	8004d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800447c:	2380      	movs	r3, #128	@ 0x80
 800447e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	4619      	mov	r1, r3
 800448e:	480c      	ldr	r0, [pc, #48]	@ (80044c0 <HAL_UART_MspInit+0xac>)
 8004490:	f000 fc58 	bl	8004d44 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004494:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <HAL_UART_MspInit+0xb0>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80044a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	f043 0304 	orr.w	r3, r3, #4
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044aa:	4a06      	ldr	r2, [pc, #24]	@ (80044c4 <HAL_UART_MspInit+0xb0>)
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044b0:	bf00      	nop
 80044b2:	3728      	adds	r7, #40	@ 0x28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40013800 	.word	0x40013800
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40010c00 	.word	0x40010c00
 80044c4:	40010000 	.word	0x40010000

080044c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044cc:	bf00      	nop
 80044ce:	e7fd      	b.n	80044cc <NMI_Handler+0x4>

080044d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <HardFault_Handler+0x4>

080044d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044dc:	bf00      	nop
 80044de:	e7fd      	b.n	80044dc <MemManage_Handler+0x4>

080044e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <BusFault_Handler+0x4>

080044e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <UsageFault_Handler+0x4>

080044f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004518:	f000 f8c6 	bl	80046a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}

08004520 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004524:	4802      	ldr	r0, [pc, #8]	@ (8004530 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004526:	f001 fb5e 	bl	8005be6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800452a:	bf00      	nop
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200010d0 	.word	0x200010d0

08004534 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004538:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800453c:	f000 fdb6 	bl	80050ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}

08004544 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004548:	4802      	ldr	r0, [pc, #8]	@ (8004554 <TIM2_IRQHandler+0x10>)
 800454a:	f003 fde7 	bl	800811c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200002c8 	.word	0x200002c8

08004558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004560:	4a14      	ldr	r2, [pc, #80]	@ (80045b4 <_sbrk+0x5c>)
 8004562:	4b15      	ldr	r3, [pc, #84]	@ (80045b8 <_sbrk+0x60>)
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800456c:	4b13      	ldr	r3, [pc, #76]	@ (80045bc <_sbrk+0x64>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004574:	4b11      	ldr	r3, [pc, #68]	@ (80045bc <_sbrk+0x64>)
 8004576:	4a12      	ldr	r2, [pc, #72]	@ (80045c0 <_sbrk+0x68>)
 8004578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800457a:	4b10      	ldr	r3, [pc, #64]	@ (80045bc <_sbrk+0x64>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	429a      	cmp	r2, r3
 8004586:	d207      	bcs.n	8004598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004588:	f008 ff22 	bl	800d3d0 <__errno>
 800458c:	4603      	mov	r3, r0
 800458e:	220c      	movs	r2, #12
 8004590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004592:	f04f 33ff 	mov.w	r3, #4294967295
 8004596:	e009      	b.n	80045ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004598:	4b08      	ldr	r3, [pc, #32]	@ (80045bc <_sbrk+0x64>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800459e:	4b07      	ldr	r3, [pc, #28]	@ (80045bc <_sbrk+0x64>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	4a05      	ldr	r2, [pc, #20]	@ (80045bc <_sbrk+0x64>)
 80045a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045aa:	68fb      	ldr	r3, [r7, #12]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20005000 	.word	0x20005000
 80045b8:	00000400 	.word	0x00000400
 80045bc:	2000040c 	.word	0x2000040c
 80045c0:	20001728 	.word	0x20001728

080045c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80045d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80045d2:	e003      	b.n	80045dc <LoopCopyDataInit>

080045d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80045d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80045d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80045d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80045da:	3104      	adds	r1, #4

080045dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80045dc:	480a      	ldr	r0, [pc, #40]	@ (8004608 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80045de:	4b0b      	ldr	r3, [pc, #44]	@ (800460c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80045e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80045e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80045e4:	d3f6      	bcc.n	80045d4 <CopyDataInit>
  ldr r2, =_sbss
 80045e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004610 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80045e8:	e002      	b.n	80045f0 <LoopFillZerobss>

080045ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80045ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80045ec:	f842 3b04 	str.w	r3, [r2], #4

080045f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80045f0:	4b08      	ldr	r3, [pc, #32]	@ (8004614 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80045f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80045f4:	d3f9      	bcc.n	80045ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80045f6:	f7ff ffe5 	bl	80045c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045fa:	f008 feef 	bl	800d3dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045fe:	f7fc fbfb 	bl	8000df8 <main>
  bx lr
 8004602:	4770      	bx	lr
  ldr r3, =_sidata
 8004604:	0800e7d8 	.word	0x0800e7d8
  ldr r0, =_sdata
 8004608:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800460c:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8004610:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8004614:	20001724 	.word	0x20001724

08004618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004618:	e7fe      	b.n	8004618 <ADC1_2_IRQHandler>
	...

0800461c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004620:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <HAL_Init+0x28>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a07      	ldr	r2, [pc, #28]	@ (8004644 <HAL_Init+0x28>)
 8004626:	f043 0310 	orr.w	r3, r3, #16
 800462a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800462c:	2003      	movs	r0, #3
 800462e:	f000 f947 	bl	80048c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004632:	2000      	movs	r0, #0
 8004634:	f000 f808 	bl	8004648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004638:	f7ff fe0c 	bl	8004254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40022000 	.word	0x40022000

08004648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004650:	4b12      	ldr	r3, [pc, #72]	@ (800469c <HAL_InitTick+0x54>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <HAL_InitTick+0x58>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	4619      	mov	r1, r3
 800465a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800465e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f95f 	bl	800492a <HAL_SYSTICK_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e00e      	b.n	8004694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b0f      	cmp	r3, #15
 800467a:	d80a      	bhi.n	8004692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800467c:	2200      	movs	r2, #0
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	f04f 30ff 	mov.w	r0, #4294967295
 8004684:	f000 f927 	bl	80048d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004688:	4a06      	ldr	r2, [pc, #24]	@ (80046a4 <HAL_InitTick+0x5c>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e000      	b.n	8004694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000028 	.word	0x20000028
 80046a0:	20000030 	.word	0x20000030
 80046a4:	2000002c 	.word	0x2000002c

080046a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <HAL_IncTick+0x1c>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_IncTick+0x20>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4413      	add	r3, r2
 80046b8:	4a03      	ldr	r2, [pc, #12]	@ (80046c8 <HAL_IncTick+0x20>)
 80046ba:	6013      	str	r3, [r2, #0]
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr
 80046c4:	20000030 	.word	0x20000030
 80046c8:	20000410 	.word	0x20000410

080046cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  return uwTick;
 80046d0:	4b02      	ldr	r3, [pc, #8]	@ (80046dc <HAL_GetTick+0x10>)
 80046d2:	681b      	ldr	r3, [r3, #0]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	20000410 	.word	0x20000410

080046e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046e8:	f7ff fff0 	bl	80046cc <HAL_GetTick>
 80046ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d005      	beq.n	8004706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004724 <HAL_Delay+0x44>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004706:	bf00      	nop
 8004708:	f7ff ffe0 	bl	80046cc <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	429a      	cmp	r2, r3
 8004716:	d8f7      	bhi.n	8004708 <HAL_Delay+0x28>
  {
  }
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000030 	.word	0x20000030

08004728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004738:	4b0c      	ldr	r3, [pc, #48]	@ (800476c <__NVIC_SetPriorityGrouping+0x44>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004744:	4013      	ands	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004750:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800475a:	4a04      	ldr	r2, [pc, #16]	@ (800476c <__NVIC_SetPriorityGrouping+0x44>)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	60d3      	str	r3, [r2, #12]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004774:	4b04      	ldr	r3, [pc, #16]	@ (8004788 <__NVIC_GetPriorityGrouping+0x18>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	0a1b      	lsrs	r3, r3, #8
 800477a:	f003 0307 	and.w	r3, r3, #7
}
 800477e:	4618      	mov	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	e000ed00 	.word	0xe000ed00

0800478c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479a:	2b00      	cmp	r3, #0
 800479c:	db0b      	blt.n	80047b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	f003 021f 	and.w	r2, r3, #31
 80047a4:	4906      	ldr	r1, [pc, #24]	@ (80047c0 <__NVIC_EnableIRQ+0x34>)
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	2001      	movs	r0, #1
 80047ae:	fa00 f202 	lsl.w	r2, r0, r2
 80047b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr
 80047c0:	e000e100 	.word	0xe000e100

080047c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	6039      	str	r1, [r7, #0]
 80047ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	db0a      	blt.n	80047ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	490c      	ldr	r1, [pc, #48]	@ (8004810 <__NVIC_SetPriority+0x4c>)
 80047de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	440b      	add	r3, r1
 80047e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047ec:	e00a      	b.n	8004804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	4908      	ldr	r1, [pc, #32]	@ (8004814 <__NVIC_SetPriority+0x50>)
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	3b04      	subs	r3, #4
 80047fc:	0112      	lsls	r2, r2, #4
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	440b      	add	r3, r1
 8004802:	761a      	strb	r2, [r3, #24]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e100 	.word	0xe000e100
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	@ 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f1c3 0307 	rsb	r3, r3, #7
 8004832:	2b04      	cmp	r3, #4
 8004834:	bf28      	it	cs
 8004836:	2304      	movcs	r3, #4
 8004838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3304      	adds	r3, #4
 800483e:	2b06      	cmp	r3, #6
 8004840:	d902      	bls.n	8004848 <NVIC_EncodePriority+0x30>
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3b03      	subs	r3, #3
 8004846:	e000      	b.n	800484a <NVIC_EncodePriority+0x32>
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800484c:	f04f 32ff 	mov.w	r2, #4294967295
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	401a      	ands	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004860:	f04f 31ff 	mov.w	r1, #4294967295
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	fa01 f303 	lsl.w	r3, r1, r3
 800486a:	43d9      	mvns	r1, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004870:	4313      	orrs	r3, r2
         );
}
 8004872:	4618      	mov	r0, r3
 8004874:	3724      	adds	r7, #36	@ 0x24
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr

0800487c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3b01      	subs	r3, #1
 8004888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800488c:	d301      	bcc.n	8004892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800488e:	2301      	movs	r3, #1
 8004890:	e00f      	b.n	80048b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004892:	4a0a      	ldr	r2, [pc, #40]	@ (80048bc <SysTick_Config+0x40>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800489a:	210f      	movs	r1, #15
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	f7ff ff90 	bl	80047c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <SysTick_Config+0x40>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048aa:	4b04      	ldr	r3, [pc, #16]	@ (80048bc <SysTick_Config+0x40>)
 80048ac:	2207      	movs	r2, #7
 80048ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	e000e010 	.word	0xe000e010

080048c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ff2d 	bl	8004728 <__NVIC_SetPriorityGrouping>
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	4603      	mov	r3, r0
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048e8:	f7ff ff42 	bl	8004770 <__NVIC_GetPriorityGrouping>
 80048ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	6978      	ldr	r0, [r7, #20]
 80048f4:	f7ff ff90 	bl	8004818 <NVIC_EncodePriority>
 80048f8:	4602      	mov	r2, r0
 80048fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ff5f 	bl	80047c4 <__NVIC_SetPriority>
}
 8004906:	bf00      	nop
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff35 	bl	800478c <__NVIC_EnableIRQ>
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff ffa2 	bl	800487c <SysTick_Config>
 8004938:	4603      	mov	r3, r0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800495e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a1c <HAL_FLASH_Program+0xd8>)
 8004960:	7e1b      	ldrb	r3, [r3, #24]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_FLASH_Program+0x26>
 8004966:	2302      	movs	r3, #2
 8004968:	e054      	b.n	8004a14 <HAL_FLASH_Program+0xd0>
 800496a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a1c <HAL_FLASH_Program+0xd8>)
 800496c:	2201      	movs	r2, #1
 800496e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004970:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004974:	f000 f8a8 	bl	8004ac8 <FLASH_WaitForLastOperation>
 8004978:	4603      	mov	r3, r0
 800497a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d144      	bne.n	8004a0c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d102      	bne.n	800498e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004988:	2301      	movs	r3, #1
 800498a:	757b      	strb	r3, [r7, #21]
 800498c:	e007      	b.n	800499e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d102      	bne.n	800499a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004994:	2302      	movs	r3, #2
 8004996:	757b      	strb	r3, [r7, #21]
 8004998:	e001      	b.n	800499e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800499a:	2304      	movs	r3, #4
 800499c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800499e:	2300      	movs	r3, #0
 80049a0:	75bb      	strb	r3, [r7, #22]
 80049a2:	e02d      	b.n	8004a00 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80049a4:	7dbb      	ldrb	r3, [r7, #22]
 80049a6:	005a      	lsls	r2, r3, #1
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	eb02 0c03 	add.w	ip, r2, r3
 80049ae:	7dbb      	ldrb	r3, [r7, #22]
 80049b0:	0119      	lsls	r1, r3, #4
 80049b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049b6:	f1c1 0620 	rsb	r6, r1, #32
 80049ba:	f1a1 0020 	sub.w	r0, r1, #32
 80049be:	fa22 f401 	lsr.w	r4, r2, r1
 80049c2:	fa03 f606 	lsl.w	r6, r3, r6
 80049c6:	4334      	orrs	r4, r6
 80049c8:	fa23 f000 	lsr.w	r0, r3, r0
 80049cc:	4304      	orrs	r4, r0
 80049ce:	fa23 f501 	lsr.w	r5, r3, r1
 80049d2:	b2a3      	uxth	r3, r4
 80049d4:	4619      	mov	r1, r3
 80049d6:	4660      	mov	r0, ip
 80049d8:	f000 f85a 	bl	8004a90 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80049e0:	f000 f872 	bl	8004ac8 <FLASH_WaitForLastOperation>
 80049e4:	4603      	mov	r3, r0
 80049e6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80049e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <HAL_FLASH_Program+0xdc>)
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004a20 <HAL_FLASH_Program+0xdc>)
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d107      	bne.n	8004a0a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80049fa:	7dbb      	ldrb	r3, [r7, #22]
 80049fc:	3301      	adds	r3, #1
 80049fe:	75bb      	strb	r3, [r7, #22]
 8004a00:	7dba      	ldrb	r2, [r7, #22]
 8004a02:	7d7b      	ldrb	r3, [r7, #21]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d3cd      	bcc.n	80049a4 <HAL_FLASH_Program+0x60>
 8004a08:	e000      	b.n	8004a0c <HAL_FLASH_Program+0xc8>
      {
        break;
 8004a0a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a0c:	4b03      	ldr	r3, [pc, #12]	@ (8004a1c <HAL_FLASH_Program+0xd8>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	761a      	strb	r2, [r3, #24]

  return status;
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1c:	20000418 	.word	0x20000418
 8004a20:	40022000 	.word	0x40022000

08004a24 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <HAL_FLASH_Unlock+0x40>)
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00d      	beq.n	8004a56 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <HAL_FLASH_Unlock+0x40>)
 8004a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a68 <HAL_FLASH_Unlock+0x44>)
 8004a3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a40:	4b08      	ldr	r3, [pc, #32]	@ (8004a64 <HAL_FLASH_Unlock+0x40>)
 8004a42:	4a0a      	ldr	r2, [pc, #40]	@ (8004a6c <HAL_FLASH_Unlock+0x48>)
 8004a44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a46:	4b07      	ldr	r3, [pc, #28]	@ (8004a64 <HAL_FLASH_Unlock+0x40>)
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004a56:	79fb      	ldrb	r3, [r7, #7]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40022000 	.word	0x40022000
 8004a68:	45670123 	.word	0x45670123
 8004a6c:	cdef89ab 	.word	0xcdef89ab

08004a70 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004a74:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <HAL_FLASH_Lock+0x1c>)
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	4a04      	ldr	r2, [pc, #16]	@ (8004a8c <HAL_FLASH_Lock+0x1c>)
 8004a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a7e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40022000 	.word	0x40022000

08004a90 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a9c:	4b08      	ldr	r3, [pc, #32]	@ (8004ac0 <FLASH_Program_HalfWord+0x30>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004aa2:	4b08      	ldr	r3, [pc, #32]	@ (8004ac4 <FLASH_Program_HalfWord+0x34>)
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	4a07      	ldr	r2, [pc, #28]	@ (8004ac4 <FLASH_Program_HalfWord+0x34>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	801a      	strh	r2, [r3, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000418 	.word	0x20000418
 8004ac4:	40022000 	.word	0x40022000

08004ac8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004ad0:	f7ff fdfc 	bl	80046cc <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004ad6:	e010      	b.n	8004afa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d00c      	beq.n	8004afa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <FLASH_WaitForLastOperation+0x2e>
 8004ae6:	f7ff fdf1 	bl	80046cc <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d201      	bcs.n	8004afa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e025      	b.n	8004b46 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004afa:	4b15      	ldr	r3, [pc, #84]	@ (8004b50 <FLASH_WaitForLastOperation+0x88>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e8      	bne.n	8004ad8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004b06:	4b12      	ldr	r3, [pc, #72]	@ (8004b50 <FLASH_WaitForLastOperation+0x88>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b12:	4b0f      	ldr	r3, [pc, #60]	@ (8004b50 <FLASH_WaitForLastOperation+0x88>)
 8004b14:	2220      	movs	r2, #32
 8004b16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004b18:	4b0d      	ldr	r3, [pc, #52]	@ (8004b50 <FLASH_WaitForLastOperation+0x88>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004b24:	4b0a      	ldr	r3, [pc, #40]	@ (8004b50 <FLASH_WaitForLastOperation+0x88>)
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004b30:	4b07      	ldr	r3, [pc, #28]	@ (8004b50 <FLASH_WaitForLastOperation+0x88>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b3c:	f000 f80a 	bl	8004b54 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40022000 	.word	0x40022000

08004b54 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004b5e:	4b23      	ldr	r3, [pc, #140]	@ (8004bec <FLASH_SetErrorCode+0x98>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004b6a:	4b21      	ldr	r3, [pc, #132]	@ (8004bf0 <FLASH_SetErrorCode+0x9c>)
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf0 <FLASH_SetErrorCode+0x9c>)
 8004b74:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f043 0310 	orr.w	r3, r3, #16
 8004b7c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bec <FLASH_SetErrorCode+0x98>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004b8a:	4b19      	ldr	r3, [pc, #100]	@ (8004bf0 <FLASH_SetErrorCode+0x9c>)
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	4a17      	ldr	r2, [pc, #92]	@ (8004bf0 <FLASH_SetErrorCode+0x9c>)
 8004b94:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f043 0304 	orr.w	r3, r3, #4
 8004b9c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004b9e:	4b13      	ldr	r3, [pc, #76]	@ (8004bec <FLASH_SetErrorCode+0x98>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004baa:	4b11      	ldr	r3, [pc, #68]	@ (8004bf0 <FLASH_SetErrorCode+0x9c>)
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8004bf0 <FLASH_SetErrorCode+0x9c>)
 8004bb4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bec <FLASH_SetErrorCode+0x98>)
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	4a0c      	ldr	r2, [pc, #48]	@ (8004bec <FLASH_SetErrorCode+0x98>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f240 1201 	movw	r2, #257	@ 0x101
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d106      	bne.n	8004bda <FLASH_SetErrorCode+0x86>
 8004bcc:	4b07      	ldr	r3, [pc, #28]	@ (8004bec <FLASH_SetErrorCode+0x98>)
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	4a06      	ldr	r2, [pc, #24]	@ (8004bec <FLASH_SetErrorCode+0x98>)
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	61d3      	str	r3, [r2, #28]
}  
 8004bd8:	e002      	b.n	8004be0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004bda:	4a04      	ldr	r2, [pc, #16]	@ (8004bec <FLASH_SetErrorCode+0x98>)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	60d3      	str	r3, [r2, #12]
}  
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40022000 	.word	0x40022000
 8004bf0:	20000418 	.word	0x20000418

08004bf4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c06:	4b2f      	ldr	r3, [pc, #188]	@ (8004cc4 <HAL_FLASHEx_Erase+0xd0>)
 8004c08:	7e1b      	ldrb	r3, [r3, #24]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_FLASHEx_Erase+0x1e>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e053      	b.n	8004cba <HAL_FLASHEx_Erase+0xc6>
 8004c12:	4b2c      	ldr	r3, [pc, #176]	@ (8004cc4 <HAL_FLASHEx_Erase+0xd0>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d116      	bne.n	8004c4e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004c20:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c24:	f7ff ff50 	bl	8004ac8 <FLASH_WaitForLastOperation>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d141      	bne.n	8004cb2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004c2e:	2001      	movs	r0, #1
 8004c30:	f000 f84c 	bl	8004ccc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c38:	f7ff ff46 	bl	8004ac8 <FLASH_WaitForLastOperation>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004c40:	4b21      	ldr	r3, [pc, #132]	@ (8004cc8 <HAL_FLASHEx_Erase+0xd4>)
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	4a20      	ldr	r2, [pc, #128]	@ (8004cc8 <HAL_FLASHEx_Erase+0xd4>)
 8004c46:	f023 0304 	bic.w	r3, r3, #4
 8004c4a:	6113      	str	r3, [r2, #16]
 8004c4c:	e031      	b.n	8004cb2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004c4e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c52:	f7ff ff39 	bl	8004ac8 <FLASH_WaitForLastOperation>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d12a      	bne.n	8004cb2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c62:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	e019      	b.n	8004ca0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004c6c:	68b8      	ldr	r0, [r7, #8]
 8004c6e:	f000 f849 	bl	8004d04 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c72:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c76:	f7ff ff27 	bl	8004ac8 <FLASH_WaitForLastOperation>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004c7e:	4b12      	ldr	r3, [pc, #72]	@ (8004cc8 <HAL_FLASHEx_Erase+0xd4>)
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	4a11      	ldr	r2, [pc, #68]	@ (8004cc8 <HAL_FLASHEx_Erase+0xd4>)
 8004c84:	f023 0302 	bic.w	r3, r3, #2
 8004c88:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	601a      	str	r2, [r3, #0]
            break;
 8004c96:	e00c      	b.n	8004cb2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c9e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	029a      	lsls	r2, r3, #10
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	4413      	add	r3, r2
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d3dc      	bcc.n	8004c6c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004cb2:	4b04      	ldr	r3, [pc, #16]	@ (8004cc4 <HAL_FLASHEx_Erase+0xd0>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	761a      	strb	r2, [r3, #24]

  return status;
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000418 	.word	0x20000418
 8004cc8:	40022000 	.word	0x40022000

08004ccc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cd4:	4b09      	ldr	r3, [pc, #36]	@ (8004cfc <FLASH_MassErase+0x30>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004cda:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <FLASH_MassErase+0x34>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	4a08      	ldr	r2, [pc, #32]	@ (8004d00 <FLASH_MassErase+0x34>)
 8004ce0:	f043 0304 	orr.w	r3, r3, #4
 8004ce4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004ce6:	4b06      	ldr	r3, [pc, #24]	@ (8004d00 <FLASH_MassErase+0x34>)
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	4a05      	ldr	r2, [pc, #20]	@ (8004d00 <FLASH_MassErase+0x34>)
 8004cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr
 8004cfc:	20000418 	.word	0x20000418
 8004d00:	40022000 	.word	0x40022000

08004d04 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <FLASH_PageErase+0x38>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004d12:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <FLASH_PageErase+0x3c>)
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	4a0a      	ldr	r2, [pc, #40]	@ (8004d40 <FLASH_PageErase+0x3c>)
 8004d18:	f043 0302 	orr.w	r3, r3, #2
 8004d1c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004d1e:	4a08      	ldr	r2, [pc, #32]	@ (8004d40 <FLASH_PageErase+0x3c>)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004d24:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <FLASH_PageErase+0x3c>)
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	4a05      	ldr	r2, [pc, #20]	@ (8004d40 <FLASH_PageErase+0x3c>)
 8004d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d2e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000418 	.word	0x20000418
 8004d40:	40022000 	.word	0x40022000

08004d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b08b      	sub	sp, #44	@ 0x2c
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d52:	2300      	movs	r3, #0
 8004d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d56:	e169      	b.n	800502c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d58:	2201      	movs	r2, #1
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	f040 8158 	bne.w	8005026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4a9a      	ldr	r2, [pc, #616]	@ (8004fe4 <HAL_GPIO_Init+0x2a0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d05e      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004d80:	4a98      	ldr	r2, [pc, #608]	@ (8004fe4 <HAL_GPIO_Init+0x2a0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d875      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004d86:	4a98      	ldr	r2, [pc, #608]	@ (8004fe8 <HAL_GPIO_Init+0x2a4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d058      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004d8c:	4a96      	ldr	r2, [pc, #600]	@ (8004fe8 <HAL_GPIO_Init+0x2a4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d86f      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004d92:	4a96      	ldr	r2, [pc, #600]	@ (8004fec <HAL_GPIO_Init+0x2a8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d052      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004d98:	4a94      	ldr	r2, [pc, #592]	@ (8004fec <HAL_GPIO_Init+0x2a8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d869      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004d9e:	4a94      	ldr	r2, [pc, #592]	@ (8004ff0 <HAL_GPIO_Init+0x2ac>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04c      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004da4:	4a92      	ldr	r2, [pc, #584]	@ (8004ff0 <HAL_GPIO_Init+0x2ac>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d863      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004daa:	4a92      	ldr	r2, [pc, #584]	@ (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d046      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004db0:	4a90      	ldr	r2, [pc, #576]	@ (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d85d      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004db6:	2b12      	cmp	r3, #18
 8004db8:	d82a      	bhi.n	8004e10 <HAL_GPIO_Init+0xcc>
 8004dba:	2b12      	cmp	r3, #18
 8004dbc:	d859      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <HAL_GPIO_Init+0x80>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004e3f 	.word	0x08004e3f
 8004dc8:	08004e19 	.word	0x08004e19
 8004dcc:	08004e2b 	.word	0x08004e2b
 8004dd0:	08004e6d 	.word	0x08004e6d
 8004dd4:	08004e73 	.word	0x08004e73
 8004dd8:	08004e73 	.word	0x08004e73
 8004ddc:	08004e73 	.word	0x08004e73
 8004de0:	08004e73 	.word	0x08004e73
 8004de4:	08004e73 	.word	0x08004e73
 8004de8:	08004e73 	.word	0x08004e73
 8004dec:	08004e73 	.word	0x08004e73
 8004df0:	08004e73 	.word	0x08004e73
 8004df4:	08004e73 	.word	0x08004e73
 8004df8:	08004e73 	.word	0x08004e73
 8004dfc:	08004e73 	.word	0x08004e73
 8004e00:	08004e73 	.word	0x08004e73
 8004e04:	08004e73 	.word	0x08004e73
 8004e08:	08004e21 	.word	0x08004e21
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	4a79      	ldr	r2, [pc, #484]	@ (8004ff8 <HAL_GPIO_Init+0x2b4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e16:	e02c      	b.n	8004e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	623b      	str	r3, [r7, #32]
          break;
 8004e1e:	e029      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	3304      	adds	r3, #4
 8004e26:	623b      	str	r3, [r7, #32]
          break;
 8004e28:	e024      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	623b      	str	r3, [r7, #32]
          break;
 8004e32:	e01f      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	623b      	str	r3, [r7, #32]
          break;
 8004e3c:	e01a      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e46:	2304      	movs	r3, #4
 8004e48:	623b      	str	r3, [r7, #32]
          break;
 8004e4a:	e013      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e54:	2308      	movs	r3, #8
 8004e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	611a      	str	r2, [r3, #16]
          break;
 8004e5e:	e009      	b.n	8004e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e60:	2308      	movs	r3, #8
 8004e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	615a      	str	r2, [r3, #20]
          break;
 8004e6a:	e003      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	623b      	str	r3, [r7, #32]
          break;
 8004e70:	e000      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          break;
 8004e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2bff      	cmp	r3, #255	@ 0xff
 8004e78:	d801      	bhi.n	8004e7e <HAL_GPIO_Init+0x13a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	e001      	b.n	8004e82 <HAL_GPIO_Init+0x13e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3304      	adds	r3, #4
 8004e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2bff      	cmp	r3, #255	@ 0xff
 8004e88:	d802      	bhi.n	8004e90 <HAL_GPIO_Init+0x14c>
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	e002      	b.n	8004e96 <HAL_GPIO_Init+0x152>
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	3b08      	subs	r3, #8
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	210f      	movs	r1, #15
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	6a39      	ldr	r1, [r7, #32]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80b1 	beq.w	8005026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8004ffc <HAL_GPIO_Init+0x2b8>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	4a4c      	ldr	r2, [pc, #304]	@ (8004ffc <HAL_GPIO_Init+0x2b8>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	6193      	str	r3, [r2, #24]
 8004ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8004ffc <HAL_GPIO_Init+0x2b8>)
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004edc:	4a48      	ldr	r2, [pc, #288]	@ (8005000 <HAL_GPIO_Init+0x2bc>)
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	089b      	lsrs	r3, r3, #2
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	220f      	movs	r2, #15
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4013      	ands	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a40      	ldr	r2, [pc, #256]	@ (8005004 <HAL_GPIO_Init+0x2c0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_GPIO_Init+0x1ec>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8005008 <HAL_GPIO_Init+0x2c4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00d      	beq.n	8004f2c <HAL_GPIO_Init+0x1e8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3e      	ldr	r2, [pc, #248]	@ (800500c <HAL_GPIO_Init+0x2c8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <HAL_GPIO_Init+0x1e4>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3d      	ldr	r2, [pc, #244]	@ (8005010 <HAL_GPIO_Init+0x2cc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d101      	bne.n	8004f24 <HAL_GPIO_Init+0x1e0>
 8004f20:	2303      	movs	r3, #3
 8004f22:	e006      	b.n	8004f32 <HAL_GPIO_Init+0x1ee>
 8004f24:	2304      	movs	r3, #4
 8004f26:	e004      	b.n	8004f32 <HAL_GPIO_Init+0x1ee>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e002      	b.n	8004f32 <HAL_GPIO_Init+0x1ee>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <HAL_GPIO_Init+0x1ee>
 8004f30:	2300      	movs	r3, #0
 8004f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f34:	f002 0203 	and.w	r2, r2, #3
 8004f38:	0092      	lsls	r2, r2, #2
 8004f3a:	4093      	lsls	r3, r2
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f42:	492f      	ldr	r1, [pc, #188]	@ (8005000 <HAL_GPIO_Init+0x2bc>)
 8004f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f46:	089b      	lsrs	r3, r3, #2
 8004f48:	3302      	adds	r3, #2
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d006      	beq.n	8004f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	492c      	ldr	r1, [pc, #176]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	600b      	str	r3, [r1, #0]
 8004f68:	e006      	b.n	8004f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	4928      	ldr	r1, [pc, #160]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d006      	beq.n	8004f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f84:	4b23      	ldr	r3, [pc, #140]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	4922      	ldr	r1, [pc, #136]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
 8004f90:	e006      	b.n	8004fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f92:	4b20      	ldr	r3, [pc, #128]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	491e      	ldr	r1, [pc, #120]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d006      	beq.n	8004fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004fac:	4b19      	ldr	r3, [pc, #100]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	4918      	ldr	r1, [pc, #96]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	608b      	str	r3, [r1, #8]
 8004fb8:	e006      	b.n	8004fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004fba:	4b16      	ldr	r3, [pc, #88]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	4914      	ldr	r1, [pc, #80]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d021      	beq.n	8005018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	490e      	ldr	r1, [pc, #56]	@ (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60cb      	str	r3, [r1, #12]
 8004fe0:	e021      	b.n	8005026 <HAL_GPIO_Init+0x2e2>
 8004fe2:	bf00      	nop
 8004fe4:	10320000 	.word	0x10320000
 8004fe8:	10310000 	.word	0x10310000
 8004fec:	10220000 	.word	0x10220000
 8004ff0:	10210000 	.word	0x10210000
 8004ff4:	10120000 	.word	0x10120000
 8004ff8:	10110000 	.word	0x10110000
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40010000 	.word	0x40010000
 8005004:	40010800 	.word	0x40010800
 8005008:	40010c00 	.word	0x40010c00
 800500c:	40011000 	.word	0x40011000
 8005010:	40011400 	.word	0x40011400
 8005014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005018:	4b0b      	ldr	r3, [pc, #44]	@ (8005048 <HAL_GPIO_Init+0x304>)
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	43db      	mvns	r3, r3
 8005020:	4909      	ldr	r1, [pc, #36]	@ (8005048 <HAL_GPIO_Init+0x304>)
 8005022:	4013      	ands	r3, r2
 8005024:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	3301      	adds	r3, #1
 800502a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	fa22 f303 	lsr.w	r3, r2, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	f47f ae8e 	bne.w	8004d58 <HAL_GPIO_Init+0x14>
  }
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	372c      	adds	r7, #44	@ 0x2c
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr
 8005048:	40010400 	.word	0x40010400

0800504c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	4013      	ands	r3, r2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
 8005068:	e001      	b.n	800506e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr

0800507a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	807b      	strh	r3, [r7, #2]
 8005086:	4613      	mov	r3, r2
 8005088:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800508a:	787b      	ldrb	r3, [r7, #1]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005090:	887a      	ldrh	r2, [r7, #2]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005096:	e003      	b.n	80050a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005098:	887b      	ldrh	r3, [r7, #2]
 800509a:	041a      	lsls	r2, r3, #16
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	611a      	str	r2, [r3, #16]
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr
	...

080050ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050b6:	4b08      	ldr	r3, [pc, #32]	@ (80050d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d006      	beq.n	80050d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050c2:	4a05      	ldr	r2, [pc, #20]	@ (80050d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f806 	bl	80050dc <HAL_GPIO_EXTI_Callback>
  }
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40010400 	.word	0x40010400

080050dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr

080050f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e12b      	b.n	800535a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff f8ce 	bl	80042b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2224      	movs	r2, #36	@ 0x24
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005142:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005152:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005154:	f002 fb78 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 8005158:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4a81      	ldr	r2, [pc, #516]	@ (8005364 <HAL_I2C_Init+0x274>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d807      	bhi.n	8005174 <HAL_I2C_Init+0x84>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4a80      	ldr	r2, [pc, #512]	@ (8005368 <HAL_I2C_Init+0x278>)
 8005168:	4293      	cmp	r3, r2
 800516a:	bf94      	ite	ls
 800516c:	2301      	movls	r3, #1
 800516e:	2300      	movhi	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e006      	b.n	8005182 <HAL_I2C_Init+0x92>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4a7d      	ldr	r2, [pc, #500]	@ (800536c <HAL_I2C_Init+0x27c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	bf94      	ite	ls
 800517c:	2301      	movls	r3, #1
 800517e:	2300      	movhi	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e0e7      	b.n	800535a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a78      	ldr	r2, [pc, #480]	@ (8005370 <HAL_I2C_Init+0x280>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	0c9b      	lsrs	r3, r3, #18
 8005194:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005364 <HAL_I2C_Init+0x274>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d802      	bhi.n	80051c4 <HAL_I2C_Init+0xd4>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	3301      	adds	r3, #1
 80051c2:	e009      	b.n	80051d8 <HAL_I2C_Init+0xe8>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	4a69      	ldr	r2, [pc, #420]	@ (8005374 <HAL_I2C_Init+0x284>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	099b      	lsrs	r3, r3, #6
 80051d6:	3301      	adds	r3, #1
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	430b      	orrs	r3, r1
 80051de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80051ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	495c      	ldr	r1, [pc, #368]	@ (8005364 <HAL_I2C_Init+0x274>)
 80051f4:	428b      	cmp	r3, r1
 80051f6:	d819      	bhi.n	800522c <HAL_I2C_Init+0x13c>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1e59      	subs	r1, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	fbb1 f3f3 	udiv	r3, r1, r3
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800520c:	400b      	ands	r3, r1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <HAL_I2C_Init+0x138>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1e59      	subs	r1, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005220:	3301      	adds	r3, #1
 8005222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005226:	e051      	b.n	80052cc <HAL_I2C_Init+0x1dc>
 8005228:	2304      	movs	r3, #4
 800522a:	e04f      	b.n	80052cc <HAL_I2C_Init+0x1dc>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d111      	bne.n	8005258 <HAL_I2C_Init+0x168>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1e58      	subs	r0, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6859      	ldr	r1, [r3, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	440b      	add	r3, r1
 8005242:	fbb0 f3f3 	udiv	r3, r0, r3
 8005246:	3301      	adds	r3, #1
 8005248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e012      	b.n	800527e <HAL_I2C_Init+0x18e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	1e58      	subs	r0, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6859      	ldr	r1, [r3, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	0099      	lsls	r1, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	fbb0 f3f3 	udiv	r3, r0, r3
 800526e:	3301      	adds	r3, #1
 8005270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005274:	2b00      	cmp	r3, #0
 8005276:	bf0c      	ite	eq
 8005278:	2301      	moveq	r3, #1
 800527a:	2300      	movne	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_I2C_Init+0x196>
 8005282:	2301      	movs	r3, #1
 8005284:	e022      	b.n	80052cc <HAL_I2C_Init+0x1dc>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10e      	bne.n	80052ac <HAL_I2C_Init+0x1bc>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1e58      	subs	r0, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6859      	ldr	r1, [r3, #4]
 8005296:	460b      	mov	r3, r1
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	440b      	add	r3, r1
 800529c:	fbb0 f3f3 	udiv	r3, r0, r3
 80052a0:	3301      	adds	r3, #1
 80052a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052aa:	e00f      	b.n	80052cc <HAL_I2C_Init+0x1dc>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1e58      	subs	r0, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6859      	ldr	r1, [r3, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	0099      	lsls	r1, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	fbb0 f3f3 	udiv	r3, r0, r3
 80052c2:	3301      	adds	r3, #1
 80052c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	6809      	ldr	r1, [r1, #0]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69da      	ldr	r2, [r3, #28]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80052fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6911      	ldr	r1, [r2, #16]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68d2      	ldr	r2, [r2, #12]
 8005306:	4311      	orrs	r1, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	430b      	orrs	r3, r1
 800530e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	000186a0 	.word	0x000186a0
 8005368:	001e847f 	.word	0x001e847f
 800536c:	003d08ff 	.word	0x003d08ff
 8005370:	431bde83 	.word	0x431bde83
 8005374:	10624dd3 	.word	0x10624dd3

08005378 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af02      	add	r7, sp, #8
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	461a      	mov	r2, r3
 8005384:	460b      	mov	r3, r1
 8005386:	817b      	strh	r3, [r7, #10]
 8005388:	4613      	mov	r3, r2
 800538a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800538c:	f7ff f99e 	bl	80046cc <HAL_GetTick>
 8005390:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b20      	cmp	r3, #32
 800539c:	f040 80e0 	bne.w	8005560 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	2319      	movs	r3, #25
 80053a6:	2201      	movs	r2, #1
 80053a8:	4970      	ldr	r1, [pc, #448]	@ (800556c <HAL_I2C_Master_Transmit+0x1f4>)
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f964 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
 80053b8:	e0d3      	b.n	8005562 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_I2C_Master_Transmit+0x50>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e0cc      	b.n	8005562 <HAL_I2C_Master_Transmit+0x1ea>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d007      	beq.n	80053ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2221      	movs	r2, #33	@ 0x21
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2210      	movs	r2, #16
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	893a      	ldrh	r2, [r7, #8]
 800541e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4a50      	ldr	r2, [pc, #320]	@ (8005570 <HAL_I2C_Master_Transmit+0x1f8>)
 800542e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005430:	8979      	ldrh	r1, [r7, #10]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6a3a      	ldr	r2, [r7, #32]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f89c 	bl	8005574 <I2C_MasterRequestWrite>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e08d      	b.n	8005562 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800545c:	e066      	b.n	800552c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	6a39      	ldr	r1, [r7, #32]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 f9de 	bl	8005824 <I2C_WaitOnTXEFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00d      	beq.n	800548a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	2b04      	cmp	r3, #4
 8005474:	d107      	bne.n	8005486 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005484:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e06b      	b.n	8005562 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	781a      	ldrb	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d11b      	bne.n	8005500 <HAL_I2C_Master_Transmit+0x188>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d017      	beq.n	8005500 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	781a      	ldrb	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	6a39      	ldr	r1, [r7, #32]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f9ce 	bl	80058a6 <I2C_WaitOnBTFFlagUntilTimeout>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00d      	beq.n	800552c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005514:	2b04      	cmp	r3, #4
 8005516:	d107      	bne.n	8005528 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005526:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e01a      	b.n	8005562 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005530:	2b00      	cmp	r3, #0
 8005532:	d194      	bne.n	800545e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	e000      	b.n	8005562 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
  }
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	00100002 	.word	0x00100002
 8005570:	ffff0000 	.word	0xffff0000

08005574 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	460b      	mov	r3, r1
 8005582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005588:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d006      	beq.n	800559e <I2C_MasterRequestWrite+0x2a>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d003      	beq.n	800559e <I2C_MasterRequestWrite+0x2a>
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800559c:	d108      	bne.n	80055b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e00b      	b.n	80055c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b4:	2b12      	cmp	r3, #18
 80055b6:	d107      	bne.n	80055c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f84f 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00d      	beq.n	80055fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ee:	d103      	bne.n	80055f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e035      	b.n	8005668 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005604:	d108      	bne.n	8005618 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005606:	897b      	ldrh	r3, [r7, #10]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005614:	611a      	str	r2, [r3, #16]
 8005616:	e01b      	b.n	8005650 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005618:	897b      	ldrh	r3, [r7, #10]
 800561a:	11db      	asrs	r3, r3, #7
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f003 0306 	and.w	r3, r3, #6
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f063 030f 	orn	r3, r3, #15
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	490e      	ldr	r1, [pc, #56]	@ (8005670 <I2C_MasterRequestWrite+0xfc>)
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 f875 	bl	8005726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e010      	b.n	8005668 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005646:	897b      	ldrh	r3, [r7, #10]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4907      	ldr	r1, [pc, #28]	@ (8005674 <I2C_MasterRequestWrite+0x100>)
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f865 	bl	8005726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	00010008 	.word	0x00010008
 8005674:	00010002 	.word	0x00010002

08005678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	4613      	mov	r3, r2
 8005686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005688:	e025      	b.n	80056d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d021      	beq.n	80056d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7ff f81b 	bl	80046cc <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d116      	bne.n	80056d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e023      	b.n	800571e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	0c1b      	lsrs	r3, r3, #16
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10d      	bne.n	80056fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	43da      	mvns	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4013      	ands	r3, r2
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bf0c      	ite	eq
 80056f2:	2301      	moveq	r3, #1
 80056f4:	2300      	movne	r3, #0
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	e00c      	b.n	8005716 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	43da      	mvns	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4013      	ands	r3, r2
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	bf0c      	ite	eq
 800570e:	2301      	moveq	r3, #1
 8005710:	2300      	movne	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	461a      	mov	r2, r3
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	429a      	cmp	r2, r3
 800571a:	d0b6      	beq.n	800568a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005734:	e051      	b.n	80057da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005744:	d123      	bne.n	800578e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005754:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800575e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577a:	f043 0204 	orr.w	r2, r3, #4
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e046      	b.n	800581c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d021      	beq.n	80057da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005796:	f7fe ff99 	bl	80046cc <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d302      	bcc.n	80057ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d116      	bne.n	80057da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e020      	b.n	800581c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	0c1b      	lsrs	r3, r3, #16
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d10c      	bne.n	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	43da      	mvns	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4013      	ands	r3, r2
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bf14      	ite	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	2300      	moveq	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	e00b      	b.n	8005816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	43da      	mvns	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4013      	ands	r3, r2
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	bf14      	ite	ne
 8005810:	2301      	movne	r3, #1
 8005812:	2300      	moveq	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d18d      	bne.n	8005736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005830:	e02d      	b.n	800588e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f878 	bl	8005928 <I2C_IsAcknowledgeFailed>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e02d      	b.n	800589e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d021      	beq.n	800588e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584a:	f7fe ff3f 	bl	80046cc <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	429a      	cmp	r2, r3
 8005858:	d302      	bcc.n	8005860 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d116      	bne.n	800588e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587a:	f043 0220 	orr.w	r2, r3, #32
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e007      	b.n	800589e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005898:	2b80      	cmp	r3, #128	@ 0x80
 800589a:	d1ca      	bne.n	8005832 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058b2:	e02d      	b.n	8005910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f837 	bl	8005928 <I2C_IsAcknowledgeFailed>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e02d      	b.n	8005920 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ca:	d021      	beq.n	8005910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058cc:	f7fe fefe 	bl	80046cc <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d302      	bcc.n	80058e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d116      	bne.n	8005910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fc:	f043 0220 	orr.w	r2, r3, #32
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e007      	b.n	8005920 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d1ca      	bne.n	80058b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800593a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800593e:	d11b      	bne.n	8005978 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005948:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005964:	f043 0204 	orr.w	r2, r3, #4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005986:	b08b      	sub	sp, #44	@ 0x2c
 8005988:	af06      	add	r7, sp, #24
 800598a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e0fd      	b.n	8005b92 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f007 fa0a 	bl	800cdc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2203      	movs	r2, #3
 80059b4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f003 f981 	bl	8008cc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	687e      	ldr	r6, [r7, #4]
 80059ca:	466d      	mov	r5, sp
 80059cc:	f106 0410 	add.w	r4, r6, #16
 80059d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	602b      	str	r3, [r5, #0]
 80059d8:	1d33      	adds	r3, r6, #4
 80059da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059dc:	6838      	ldr	r0, [r7, #0]
 80059de:	f003 f94b 	bl	8008c78 <USB_CoreInit>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0ce      	b.n	8005b92 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2100      	movs	r1, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	f003 f97c 	bl	8008cf8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a00:	2300      	movs	r3, #0
 8005a02:	73fb      	strb	r3, [r7, #15]
 8005a04:	e04c      	b.n	8005aa0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	440b      	add	r3, r1
 8005a16:	3301      	adds	r3, #1
 8005a18:	2201      	movs	r2, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	440b      	add	r3, r1
 8005a2c:	7bfa      	ldrb	r2, [r7, #15]
 8005a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a30:	7bfa      	ldrb	r2, [r7, #15]
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	b298      	uxth	r0, r3
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	440b      	add	r3, r1
 8005a42:	3336      	adds	r3, #54	@ 0x36
 8005a44:	4602      	mov	r2, r0
 8005a46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	440b      	add	r3, r1
 8005a58:	3303      	adds	r3, #3
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a5e:	7bfa      	ldrb	r2, [r7, #15]
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3338      	adds	r3, #56	@ 0x38
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a72:	7bfa      	ldrb	r2, [r7, #15]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	440b      	add	r3, r1
 8005a80:	333c      	adds	r3, #60	@ 0x3c
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a86:	7bfa      	ldrb	r2, [r7, #15]
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	3340      	adds	r3, #64	@ 0x40
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d3ad      	bcc.n	8005a06 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]
 8005aae:	e044      	b.n	8005b3a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ab0:	7bfa      	ldrb	r2, [r7, #15]
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	440b      	add	r3, r1
 8005abe:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ac6:	7bfa      	ldrb	r2, [r7, #15]
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005ad8:	7bfa      	ldrb	r2, [r7, #15]
 8005ada:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	440b      	add	r3, r1
 8005aea:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005af2:	7bfa      	ldrb	r2, [r7, #15]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	440b      	add	r3, r1
 8005b00:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b08:	7bfa      	ldrb	r2, [r7, #15]
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	440b      	add	r3, r1
 8005b16:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b1e:	7bfa      	ldrb	r2, [r7, #15]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	440b      	add	r3, r1
 8005b2c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	3301      	adds	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
 8005b3a:	7bfa      	ldrb	r2, [r7, #15]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d3b5      	bcc.n	8005ab0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	603b      	str	r3, [r7, #0]
 8005b4a:	687e      	ldr	r6, [r7, #4]
 8005b4c:	466d      	mov	r5, sp
 8005b4e:	f106 0410 	add.w	r4, r6, #16
 8005b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	1d33      	adds	r3, r6, #4
 8005b5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b5e:	6838      	ldr	r0, [r7, #0]
 8005b60:	f003 f8d6 	bl	8008d10 <USB_DevInit>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e00d      	b.n	8005b92 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f005 faf7 	bl	800b17e <USB_DevDisconnect>

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_PCD_Start+0x16>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e016      	b.n	8005bde <HAL_PCD_Start+0x44>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f003 f86b 	bl	8008c98 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f007 fb70 	bl	800d2aa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f005 facb 	bl	800b16a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b088      	sub	sp, #32
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f005 facd 	bl	800b192 <USB_ReadInterrupts>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c02:	d102      	bne.n	8005c0a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fb5f 	bl	80062c8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f005 fabf 	bl	800b192 <USB_ReadInterrupts>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c1e:	d112      	bne.n	8005c46 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c32:	b292      	uxth	r2, r2
 8005c34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f007 f93e 	bl	800ceba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005c3e:	2100      	movs	r1, #0
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f923 	bl	8005e8c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f005 faa1 	bl	800b192 <USB_ReadInterrupts>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c5a:	d10b      	bne.n	8005c74 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c6e:	b292      	uxth	r2, r2
 8005c70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f005 fa8a 	bl	800b192 <USB_ReadInterrupts>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c88:	d10b      	bne.n	8005ca2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c9c:	b292      	uxth	r2, r2
 8005c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f005 fa73 	bl	800b192 <USB_ReadInterrupts>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cb6:	d126      	bne.n	8005d06 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0204 	bic.w	r2, r2, #4
 8005cca:	b292      	uxth	r2, r2
 8005ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0208 	bic.w	r2, r2, #8
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f007 f91f 	bl	800cf2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d00:	b292      	uxth	r2, r2
 8005d02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f005 fa41 	bl	800b192 <USB_ReadInterrupts>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d1a:	f040 8082 	bne.w	8005e22 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005d1e:	2300      	movs	r3, #0
 8005d20:	77fb      	strb	r3, [r7, #31]
 8005d22:	e010      	b.n	8005d46 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	7ffb      	ldrb	r3, [r7, #31]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	441a      	add	r2, r3
 8005d30:	7ffb      	ldrb	r3, [r7, #31]
 8005d32:	8812      	ldrh	r2, [r2, #0]
 8005d34:	b292      	uxth	r2, r2
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	3320      	adds	r3, #32
 8005d3a:	443b      	add	r3, r7
 8005d3c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005d40:	7ffb      	ldrb	r3, [r7, #31]
 8005d42:	3301      	adds	r3, #1
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	7ffb      	ldrb	r3, [r7, #31]
 8005d48:	2b07      	cmp	r3, #7
 8005d4a:	d9eb      	bls.n	8005d24 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	b292      	uxth	r2, r2
 8005d60:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0201 	bic.w	r2, r2, #1
 8005d76:	b292      	uxth	r2, r2
 8005d78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005d7c:	bf00      	nop
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f6      	beq.n	8005d7e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005da2:	b292      	uxth	r2, r2
 8005da4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005da8:	2300      	movs	r3, #0
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e00f      	b.n	8005dce <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005dae:	7ffb      	ldrb	r3, [r7, #31]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6812      	ldr	r2, [r2, #0]
 8005db4:	4611      	mov	r1, r2
 8005db6:	7ffa      	ldrb	r2, [r7, #31]
 8005db8:	0092      	lsls	r2, r2, #2
 8005dba:	440a      	add	r2, r1
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	3320      	adds	r3, #32
 8005dc0:	443b      	add	r3, r7
 8005dc2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005dc6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005dc8:	7ffb      	ldrb	r3, [r7, #31]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	7ffb      	ldrb	r3, [r7, #31]
 8005dd0:	2b07      	cmp	r3, #7
 8005dd2:	d9ec      	bls.n	8005dae <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0208 	orr.w	r2, r2, #8
 8005de6:	b292      	uxth	r2, r2
 8005de8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0204 	orr.w	r2, r2, #4
 8005e16:	b292      	uxth	r2, r2
 8005e18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f007 f86b 	bl	800cef8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f005 f9b3 	bl	800b192 <USB_ReadInterrupts>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e36:	d10e      	bne.n	8005e56 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005e4a:	b292      	uxth	r2, r2
 8005e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f007 f824 	bl	800ce9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f005 f999 	bl	800b192 <USB_ReadInterrupts>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e6a:	d10b      	bne.n	8005e84 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e7e:	b292      	uxth	r2, r2
 8005e80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8005e84:	bf00      	nop
 8005e86:	3720      	adds	r7, #32
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_PCD_SetAddress+0x1a>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e013      	b.n	8005ece <HAL_PCD_SetAddress+0x42>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	78fa      	ldrb	r2, [r7, #3]
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f005 f940 	bl	800b144 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	4608      	mov	r0, r1
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	70fb      	strb	r3, [r7, #3]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	803b      	strh	r3, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	da0e      	bge.n	8005f1a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4413      	add	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	705a      	strb	r2, [r3, #1]
 8005f18:	e00e      	b.n	8005f38 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	f003 0207 	and.w	r2, r3, #7
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4413      	add	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f44:	883a      	ldrh	r2, [r7, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	78ba      	ldrb	r2, [r7, #2]
 8005f4e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f62:	78bb      	ldrb	r3, [r7, #2]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d102      	bne.n	8005f6e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_PCD_EP_Open+0xa6>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e00e      	b.n	8005f9a <HAL_PCD_EP_Open+0xc4>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68f9      	ldr	r1, [r7, #12]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f002 fee0 	bl	8008d50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8005f98:	7afb      	ldrb	r3, [r7, #11]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	460b      	mov	r3, r1
 8005fac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	da0e      	bge.n	8005fd4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	4413      	add	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	705a      	strb	r2, [r3, #1]
 8005fd2:	e00e      	b.n	8005ff2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	f003 0207 	and.w	r2, r3, #7
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_PCD_EP_Close+0x6a>
 8006008:	2302      	movs	r3, #2
 800600a:	e00e      	b.n	800602a <HAL_PCD_EP_Close+0x88>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68f9      	ldr	r1, [r7, #12]
 800601a:	4618      	mov	r0, r3
 800601c:	f003 fa02 	bl	8009424 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	460b      	mov	r3, r1
 8006040:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006042:	7afb      	ldrb	r3, [r7, #11]
 8006044:	f003 0207 	and.w	r2, r3, #7
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2200      	movs	r2, #0
 800606a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	b2da      	uxtb	r2, r3
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	2b00      	cmp	r3, #0
 8006086:	d106      	bne.n	8006096 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6979      	ldr	r1, [r7, #20]
 800608e:	4618      	mov	r0, r3
 8006090:	f003 fbb4 	bl	80097fc <USB_EPStartXfer>
 8006094:	e005      	b.n	80060a2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6979      	ldr	r1, [r7, #20]
 800609c:	4618      	mov	r0, r3
 800609e:	f003 fbad 	bl	80097fc <USB_EPStartXfer>
  }

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	f003 0207 	and.w	r2, r3, #7
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	440b      	add	r3, r1
 80060ca:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr

080060da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b086      	sub	sp, #24
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
 80060e6:	460b      	mov	r3, r1
 80060e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ea:	7afb      	ldrb	r3, [r7, #11]
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4413      	add	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2200      	movs	r2, #0
 800611e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2201      	movs	r2, #1
 8006124:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	b2da      	uxtb	r2, r3
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006132:	7afb      	ldrb	r3, [r7, #11]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6979      	ldr	r1, [r7, #20]
 8006142:	4618      	mov	r0, r3
 8006144:	f003 fb5a 	bl	80097fc <USB_EPStartXfer>
 8006148:	e005      	b.n	8006156 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6979      	ldr	r1, [r7, #20]
 8006150:	4618      	mov	r0, r3
 8006152:	f003 fb53 	bl	80097fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	f003 0207 	and.w	r2, r3, #7
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	429a      	cmp	r2, r3
 8006178:	d901      	bls.n	800617e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e04c      	b.n	8006218 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800617e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006182:	2b00      	cmp	r3, #0
 8006184:	da0e      	bge.n	80061a4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	4413      	add	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	705a      	strb	r2, [r3, #1]
 80061a2:	e00c      	b.n	80061be <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	4413      	add	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_PCD_EP_SetStall+0x7e>
 80061da:	2302      	movs	r3, #2
 80061dc:	e01c      	b.n	8006218 <HAL_PCD_EP_SetStall+0xb8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68f9      	ldr	r1, [r7, #12]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f004 feac 	bl	800af4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d108      	bne.n	800620e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f004 ffd1 	bl	800b1b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	f003 020f 	and.w	r2, r3, #15
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	429a      	cmp	r2, r3
 8006238:	d901      	bls.n	800623e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e040      	b.n	80062c0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800623e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006242:	2b00      	cmp	r3, #0
 8006244:	da0e      	bge.n	8006264 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	4413      	add	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	705a      	strb	r2, [r3, #1]
 8006262:	e00e      	b.n	8006282 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	f003 0207 	and.w	r2, r3, #7
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	4413      	add	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	b2da      	uxtb	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_PCD_EP_ClrStall+0x82>
 800629e:	2302      	movs	r3, #2
 80062a0:	e00e      	b.n	80062c0 <HAL_PCD_EP_ClrStall+0xa0>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68f9      	ldr	r1, [r7, #12]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f004 fe9a 	bl	800afea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08e      	sub	sp, #56	@ 0x38
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80062d0:	e2de      	b.n	8006890 <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80062da:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80062dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 80062e8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f040 8157 	bne.w	80065a0 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80062f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d151      	bne.n	80063a0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800630c:	81fb      	strh	r3, [r7, #14]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	89fb      	ldrh	r3, [r7, #14]
 8006314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800631c:	b29b      	uxth	r3, r3
 800631e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3328      	adds	r3, #40	@ 0x28
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	4413      	add	r3, r2
 800633a:	3302      	adds	r3, #2
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	441a      	add	r2, r3
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006360:	2100      	movs	r1, #0
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f006 fd81 	bl	800ce6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 828d 	beq.w	8006890 <PCD_EP_ISR_Handler+0x5c8>
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 8288 	bne.w	8006890 <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800638c:	b2da      	uxtb	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800639e:	e277      	b.n	8006890 <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80063b0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80063b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d034      	beq.n	8006424 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	4413      	add	r3, r2
 80063ce:	3306      	adds	r3, #6
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80063f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80063f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f004 ff28 	bl	800b24e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29a      	uxth	r2, r3
 8006406:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800640a:	4013      	ands	r3, r2
 800640c:	823b      	strh	r3, [r7, #16]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	8a3a      	ldrh	r2, [r7, #16]
 8006414:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006418:	b292      	uxth	r2, r2
 800641a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f006 fcf7 	bl	800ce10 <HAL_PCD_SetupStageCallback>
 8006422:	e235      	b.n	8006890 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006424:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8006428:	2b00      	cmp	r3, #0
 800642a:	f280 8231 	bge.w	8006890 <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29a      	uxth	r2, r3
 8006436:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800643a:	4013      	ands	r3, r2
 800643c:	83bb      	strh	r3, [r7, #28]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	8bba      	ldrh	r2, [r7, #28]
 8006444:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006448:	b292      	uxth	r2, r2
 800644a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006454:	b29b      	uxth	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	00db      	lsls	r3, r3, #3
 800645e:	4413      	add	r3, r2
 8006460:	3306      	adds	r3, #6
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d019      	beq.n	80064b4 <PCD_EP_ISR_Handler+0x1ec>
 8006480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d015      	beq.n	80064b4 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	6959      	ldr	r1, [r3, #20]
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006498:	b29b      	uxth	r3, r3
 800649a:	f004 fed8 	bl	800b24e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	441a      	add	r2, r3
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80064ac:	2100      	movs	r1, #0
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f006 fcc0 	bl	800ce34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	4413      	add	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d112      	bne.n	8006502 <PCD_EP_ISR_Handler+0x23a>
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	e02f      	b.n	8006562 <PCD_EP_ISR_Handler+0x29a>
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b3e      	cmp	r3, #62	@ 0x3e
 8006508:	d813      	bhi.n	8006532 <PCD_EP_ISR_Handler+0x26a>
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	085b      	lsrs	r3, r3, #1
 8006510:	633b      	str	r3, [r7, #48]	@ 0x30
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <PCD_EP_ISR_Handler+0x25c>
 800651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006520:	3301      	adds	r3, #1
 8006522:	633b      	str	r3, [r7, #48]	@ 0x30
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006526:	b29b      	uxth	r3, r3
 8006528:	029b      	lsls	r3, r3, #10
 800652a:	b29a      	uxth	r2, r3
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e017      	b.n	8006562 <PCD_EP_ISR_Handler+0x29a>
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	633b      	str	r3, [r7, #48]	@ 0x30
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	2b00      	cmp	r3, #0
 8006544:	d102      	bne.n	800654c <PCD_EP_ISR_Handler+0x284>
 8006546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006548:	3b01      	subs	r3, #1
 800654a:	633b      	str	r3, [r7, #48]	@ 0x30
 800654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654e:	b29b      	uxth	r3, r3
 8006550:	029b      	lsls	r3, r3, #10
 8006552:	b29b      	uxth	r3, r3
 8006554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800655c:	b29a      	uxth	r2, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800656e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006572:	827b      	strh	r3, [r7, #18]
 8006574:	8a7b      	ldrh	r3, [r7, #18]
 8006576:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800657a:	827b      	strh	r3, [r7, #18]
 800657c:	8a7b      	ldrh	r3, [r7, #18]
 800657e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006582:	827b      	strh	r3, [r7, #18]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	8a7b      	ldrh	r3, [r7, #18]
 800658a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800658e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800659a:	b29b      	uxth	r3, r3
 800659c:	8013      	strh	r3, [r2, #0]
 800659e:	e177      	b.n	8006890 <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80065b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f280 80ea 	bge.w	8006790 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80065d2:	4013      	ands	r3, r2
 80065d4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80065e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80065ea:	b292      	uxth	r2, r2
 80065ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80065ee:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	4413      	add	r3, r2
 8006602:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006606:	7b1b      	ldrb	r3, [r3, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d122      	bne.n	8006652 <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006614:	b29b      	uxth	r3, r3
 8006616:	461a      	mov	r2, r3
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	4413      	add	r3, r2
 8006620:	3306      	adds	r3, #6
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006634:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 8006636:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8087 	beq.w	800674c <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6818      	ldr	r0, [r3, #0]
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	6959      	ldr	r1, [r3, #20]
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	88da      	ldrh	r2, [r3, #6]
 800664a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800664c:	f004 fdff 	bl	800b24e <USB_ReadPMA>
 8006650:	e07c      	b.n	800674c <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	78db      	ldrb	r3, [r3, #3]
 8006656:	2b02      	cmp	r3, #2
 8006658:	d108      	bne.n	800666c <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800665a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800665c:	461a      	mov	r2, r3
 800665e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f923 	bl	80068ac <HAL_PCD_EP_DB_Receive>
 8006666:	4603      	mov	r3, r0
 8006668:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800666a:	e06f      	b.n	800674c <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006686:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	441a      	add	r2, r3
 8006696:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800669c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d021      	beq.n	800670a <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	4413      	add	r3, r2
 80066da:	3302      	adds	r3, #2
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ee:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 80066f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d02a      	beq.n	800674c <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	6959      	ldr	r1, [r3, #20]
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	891a      	ldrh	r2, [r3, #8]
 8006702:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006704:	f004 fda3 	bl	800b24e <USB_ReadPMA>
 8006708:	e020      	b.n	800674c <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006712:	b29b      	uxth	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	4413      	add	r3, r2
 800671e:	3306      	adds	r3, #6
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006732:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8006734:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006736:	2b00      	cmp	r3, #0
 8006738:	d008      	beq.n	800674c <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	6959      	ldr	r1, [r3, #20]
 8006742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006744:	895a      	ldrh	r2, [r3, #10]
 8006746:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006748:	f004 fd81 	bl	800b24e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006752:	441a      	add	r2, r3
 8006754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006756:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	695a      	ldr	r2, [r3, #20]
 800675c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800675e:	441a      	add	r2, r3
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d004      	beq.n	8006776 <PCD_EP_ISR_Handler+0x4ae>
 800676c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	429a      	cmp	r2, r3
 8006774:	d206      	bcs.n	8006784 <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f006 fb59 	bl	800ce34 <HAL_PCD_DataOutStageCallback>
 8006782:	e005      	b.n	8006790 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800678a:	4618      	mov	r0, r3
 800678c:	f003 f836 	bl	80097fc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006790:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006796:	2b00      	cmp	r3, #0
 8006798:	d07a      	beq.n	8006890 <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 800679a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	4413      	add	r3, r2
 80067ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80067c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c8:	843b      	strh	r3, [r7, #32]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	441a      	add	r2, r3
 80067d8:	8c3b      	ldrh	r3, [r7, #32]
 80067da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	78db      	ldrb	r3, [r3, #3]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d108      	bne.n	8006800 <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d146      	bne.n	8006884 <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80067f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80067f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d141      	bne.n	8006884 <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006808:	b29b      	uxth	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4413      	add	r3, r2
 8006814:	3302      	adds	r3, #2
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6812      	ldr	r2, [r2, #0]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006828:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	8bfb      	ldrh	r3, [r7, #30]
 8006830:	429a      	cmp	r2, r3
 8006832:	d906      	bls.n	8006842 <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	699a      	ldr	r2, [r3, #24]
 8006838:	8bfb      	ldrh	r3, [r7, #30]
 800683a:	1ad2      	subs	r2, r2, r3
 800683c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683e:	619a      	str	r2, [r3, #24]
 8006840:	e002      	b.n	8006848 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	2200      	movs	r2, #0
 8006846:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f006 fb07 	bl	800ce6a <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 800685c:	e018      	b.n	8006890 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	695a      	ldr	r2, [r3, #20]
 8006862:	8bfb      	ldrh	r3, [r7, #30]
 8006864:	441a      	add	r2, r3
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	69da      	ldr	r2, [r3, #28]
 800686e:	8bfb      	ldrh	r3, [r7, #30]
 8006870:	441a      	add	r2, r3
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800687c:	4618      	mov	r0, r3
 800687e:	f002 ffbd 	bl	80097fc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006882:	e005      	b.n	8006890 <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006884:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006886:	461a      	mov	r2, r3
 8006888:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f91b 	bl	8006ac6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006898:	b29b      	uxth	r3, r3
 800689a:	b21b      	sxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	f6ff ad18 	blt.w	80062d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3738      	adds	r7, #56	@ 0x38
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d07e      	beq.n	80069c2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4413      	add	r3, r2
 80068d8:	3302      	adds	r3, #2
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	8b7b      	ldrh	r3, [r7, #26]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d306      	bcc.n	8006906 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	699a      	ldr	r2, [r3, #24]
 80068fc:	8b7b      	ldrh	r3, [r7, #26]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	619a      	str	r2, [r3, #24]
 8006904:	e002      	b.n	800690c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2200      	movs	r2, #0
 800690a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d123      	bne.n	800695c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800692a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800692e:	833b      	strh	r3, [r7, #24]
 8006930:	8b3b      	ldrh	r3, [r7, #24]
 8006932:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006936:	833b      	strh	r3, [r7, #24]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	441a      	add	r2, r3
 8006946:	8b3b      	ldrh	r3, [r7, #24]
 8006948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800694c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006958:	b29b      	uxth	r3, r3
 800695a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01f      	beq.n	80069a6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800697c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006980:	82fb      	strh	r3, [r7, #22]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	441a      	add	r2, r3
 8006990:	8afb      	ldrh	r3, [r7, #22]
 8006992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800699a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800699e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80069a6:	8b7b      	ldrh	r3, [r7, #26]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 8087 	beq.w	8006abc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	6959      	ldr	r1, [r3, #20]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	891a      	ldrh	r2, [r3, #8]
 80069ba:	8b7b      	ldrh	r3, [r7, #26]
 80069bc:	f004 fc47 	bl	800b24e <USB_ReadPMA>
 80069c0:	e07c      	b.n	8006abc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	4413      	add	r3, r2
 80069d6:	3306      	adds	r3, #6
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	699a      	ldr	r2, [r3, #24]
 80069f0:	8b7b      	ldrh	r3, [r7, #26]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d306      	bcc.n	8006a04 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	8b7b      	ldrh	r3, [r7, #26]
 80069fc:	1ad2      	subs	r2, r2, r3
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	619a      	str	r2, [r3, #24]
 8006a02:	e002      	b.n	8006a0a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2200      	movs	r2, #0
 8006a08:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d123      	bne.n	8006a5a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2c:	83fb      	strh	r3, [r7, #30]
 8006a2e:	8bfb      	ldrh	r3, [r7, #30]
 8006a30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a34:	83fb      	strh	r3, [r7, #30]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	441a      	add	r2, r3
 8006a44:	8bfb      	ldrh	r3, [r7, #30]
 8006a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006a5a:	88fb      	ldrh	r3, [r7, #6]
 8006a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d11f      	bne.n	8006aa4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7e:	83bb      	strh	r3, [r7, #28]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	8bbb      	ldrh	r3, [r7, #28]
 8006a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006aa4:	8b7b      	ldrh	r3, [r7, #26]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d008      	beq.n	8006abc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6959      	ldr	r1, [r3, #20]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	895a      	ldrh	r2, [r3, #10]
 8006ab6:	8b7b      	ldrh	r3, [r7, #26]
 8006ab8:	f004 fbc9 	bl	800b24e <USB_ReadPMA>
    }
  }

  return count;
 8006abc:	8b7b      	ldrh	r3, [r7, #26]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3720      	adds	r7, #32
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b094      	sub	sp, #80	@ 0x50
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 8138 	beq.w	8006d50 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	4413      	add	r3, r2
 8006af4:	3302      	adds	r3, #2
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b08:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d907      	bls.n	8006b28 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b20:	1ad2      	subs	r2, r2, r3
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	619a      	str	r2, [r3, #24]
 8006b26:	e002      	b.n	8006b2e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d12c      	bne.n	8006b90 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f006 f994 	bl	800ce6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b42:	88fb      	ldrh	r3, [r7, #6]
 8006b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 823a 	beq.w	8006fc2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b68:	82fb      	strh	r3, [r7, #22]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	441a      	add	r2, r3
 8006b78:	8afb      	ldrh	r3, [r7, #22]
 8006b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	8013      	strh	r3, [r2, #0]
 8006b8e:	e218      	b.n	8006fc2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d01f      	beq.n	8006bda <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	441a      	add	r2, r3
 8006bc4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	f040 81ee 	bne.w	8006fc2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	695a      	ldr	r2, [r3, #20]
 8006bea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006bee:	441a      	add	r2, r3
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006bfc:	441a      	add	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6a1a      	ldr	r2, [r3, #32]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d309      	bcc.n	8006c22 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6a1a      	ldr	r2, [r3, #32]
 8006c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	621a      	str	r2, [r3, #32]
 8006c20:	e015      	b.n	8006c4e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d107      	bne.n	8006c3a <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8006c2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c2e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006c38:	e009      	b.n	8006c4e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	785b      	ldrb	r3, [r3, #1]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d155      	bne.n	8006d02 <HAL_PCD_EP_DB_Transmit+0x23c>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	011a      	lsls	r2, r3, #4
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d112      	bne.n	8006caa <HAL_PCD_EP_DB_Transmit+0x1e4>
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	801a      	strh	r2, [r3, #0]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	801a      	strh	r2, [r3, #0]
 8006ca8:	e047      	b.n	8006d3a <HAL_PCD_EP_DB_Transmit+0x274>
 8006caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cac:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cae:	d811      	bhi.n	8006cd4 <HAL_PCD_EP_DB_Transmit+0x20e>
 8006cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cb2:	085b      	lsrs	r3, r3, #1
 8006cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <HAL_PCD_EP_DB_Transmit+0x200>
 8006cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	029b      	lsls	r3, r3, #10
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	801a      	strh	r2, [r3, #0]
 8006cd2:	e032      	b.n	8006d3a <HAL_PCD_EP_DB_Transmit+0x274>
 8006cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd6:	095b      	lsrs	r3, r3, #5
 8006cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <HAL_PCD_EP_DB_Transmit+0x224>
 8006ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	029b      	lsls	r3, r3, #10
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	e01b      	b.n	8006d3a <HAL_PCD_EP_DB_Transmit+0x274>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d117      	bne.n	8006d3a <HAL_PCD_EP_DB_Transmit+0x274>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	4413      	add	r3, r2
 8006d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	011a      	lsls	r2, r3, #4
 8006d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6818      	ldr	r0, [r3, #0]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6959      	ldr	r1, [r3, #20]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	891a      	ldrh	r2, [r3, #8]
 8006d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f004 fa3c 	bl	800b1c6 <USB_WritePMA>
 8006d4e:	e138      	b.n	8006fc2 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	4413      	add	r3, r2
 8006d64:	3306      	adds	r3, #6
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	6812      	ldr	r2, [r2, #0]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d78:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d307      	bcc.n	8006d98 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	699a      	ldr	r2, [r3, #24]
 8006d8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006d90:	1ad2      	subs	r2, r2, r3
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	619a      	str	r2, [r3, #24]
 8006d96:	e002      	b.n	8006d9e <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d12e      	bne.n	8006e04 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	4619      	mov	r1, r3
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f006 f85c 	bl	800ce6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f040 8102 	bne.w	8006fc2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dd8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	441a      	add	r2, r3
 8006dea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006dee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006df2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006df6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8013      	strh	r3, [r2, #0]
 8006e02:	e0de      	b.n	8006fc2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006e04:	88fb      	ldrh	r3, [r7, #6]
 8006e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d11f      	bne.n	8006e4e <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e28:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	441a      	add	r2, r3
 8006e38:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	f040 80b4 	bne.w	8006fc2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	695a      	ldr	r2, [r3, #20]
 8006e5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006e62:	441a      	add	r2, r3
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006e70:	441a      	add	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6a1a      	ldr	r2, [r3, #32]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d309      	bcc.n	8006e96 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	6a1a      	ldr	r2, [r3, #32]
 8006e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	621a      	str	r2, [r3, #32]
 8006e94:	e015      	b.n	8006ec2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d107      	bne.n	8006eae <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8006e9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006ea2:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006eac:	e009      	b.n	8006ec2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d155      	bne.n	8006f7c <HAL_PCD_EP_DB_Transmit+0x4b6>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee4:	4413      	add	r3, r2
 8006ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	011a      	lsls	r2, r3, #4
 8006eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d112      	bne.n	8006f24 <HAL_PCD_EP_DB_Transmit+0x45e>
 8006efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0c:	801a      	strh	r2, [r3, #0]
 8006f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e044      	b.n	8006fae <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f26:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f28:	d811      	bhi.n	8006f4e <HAL_PCD_EP_DB_Transmit+0x488>
 8006f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	029b      	lsls	r3, r3, #10
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e02f      	b.n	8006fae <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <HAL_PCD_EP_DB_Transmit+0x49e>
 8006f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f60:	3b01      	subs	r3, #1
 8006f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	029b      	lsls	r3, r3, #10
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f78:	801a      	strh	r2, [r3, #0]
 8006f7a:	e018      	b.n	8006fae <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d114      	bne.n	8006fae <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f92:	4413      	add	r3, r2
 8006f94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	011a      	lsls	r2, r3, #4
 8006f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6959      	ldr	r1, [r3, #20]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	895a      	ldrh	r2, [r3, #10]
 8006fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f004 f902 	bl	800b1c6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fdc:	82bb      	strh	r3, [r7, #20]
 8006fde:	8abb      	ldrh	r3, [r7, #20]
 8006fe0:	f083 0310 	eor.w	r3, r3, #16
 8006fe4:	82bb      	strh	r3, [r7, #20]
 8006fe6:	8abb      	ldrh	r3, [r7, #20]
 8006fe8:	f083 0320 	eor.w	r3, r3, #32
 8006fec:	82bb      	strh	r3, [r7, #20]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	441a      	add	r2, r3
 8006ffc:	8abb      	ldrh	r3, [r7, #20]
 8006ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800700a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700e:	b29b      	uxth	r3, r3
 8007010:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3750      	adds	r7, #80	@ 0x50
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	817b      	strh	r3, [r7, #10]
 800702a:	4613      	mov	r3, r2
 800702c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800702e:	897b      	ldrh	r3, [r7, #10]
 8007030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00b      	beq.n	8007052 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800703a:	897b      	ldrh	r3, [r7, #10]
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4413      	add	r3, r2
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	e009      	b.n	8007066 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007052:	897a      	ldrh	r2, [r7, #10]
 8007054:	4613      	mov	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007066:	893b      	ldrh	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d107      	bne.n	800707c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2200      	movs	r2, #0
 8007070:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	b29a      	uxth	r2, r3
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	80da      	strh	r2, [r3, #6]
 800707a:	e00b      	b.n	8007094 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2201      	movs	r2, #1
 8007080:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	b29a      	uxth	r2, r3
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	0c1b      	lsrs	r3, r3, #16
 800708e:	b29a      	uxth	r2, r3
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	bc80      	pop	{r7}
 800709e:	4770      	bx	lr

080070a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e272      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 8087 	beq.w	80071ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070c0:	4b92      	ldr	r3, [pc, #584]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f003 030c 	and.w	r3, r3, #12
 80070c8:	2b04      	cmp	r3, #4
 80070ca:	d00c      	beq.n	80070e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80070cc:	4b8f      	ldr	r3, [pc, #572]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f003 030c 	and.w	r3, r3, #12
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d112      	bne.n	80070fe <HAL_RCC_OscConfig+0x5e>
 80070d8:	4b8c      	ldr	r3, [pc, #560]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070e4:	d10b      	bne.n	80070fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e6:	4b89      	ldr	r3, [pc, #548]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d06c      	beq.n	80071cc <HAL_RCC_OscConfig+0x12c>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d168      	bne.n	80071cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e24c      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007106:	d106      	bne.n	8007116 <HAL_RCC_OscConfig+0x76>
 8007108:	4b80      	ldr	r3, [pc, #512]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a7f      	ldr	r2, [pc, #508]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 800710e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	e02e      	b.n	8007174 <HAL_RCC_OscConfig+0xd4>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10c      	bne.n	8007138 <HAL_RCC_OscConfig+0x98>
 800711e:	4b7b      	ldr	r3, [pc, #492]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a7a      	ldr	r2, [pc, #488]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	4b78      	ldr	r3, [pc, #480]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a77      	ldr	r2, [pc, #476]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007130:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	e01d      	b.n	8007174 <HAL_RCC_OscConfig+0xd4>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007140:	d10c      	bne.n	800715c <HAL_RCC_OscConfig+0xbc>
 8007142:	4b72      	ldr	r3, [pc, #456]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a71      	ldr	r2, [pc, #452]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	4b6f      	ldr	r3, [pc, #444]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a6e      	ldr	r2, [pc, #440]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	e00b      	b.n	8007174 <HAL_RCC_OscConfig+0xd4>
 800715c:	4b6b      	ldr	r3, [pc, #428]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a6a      	ldr	r2, [pc, #424]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	4b68      	ldr	r3, [pc, #416]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a67      	ldr	r2, [pc, #412]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 800716e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d013      	beq.n	80071a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800717c:	f7fd faa6 	bl	80046cc <HAL_GetTick>
 8007180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007182:	e008      	b.n	8007196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007184:	f7fd faa2 	bl	80046cc <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b64      	cmp	r3, #100	@ 0x64
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e200      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007196:	4b5d      	ldr	r3, [pc, #372]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0f0      	beq.n	8007184 <HAL_RCC_OscConfig+0xe4>
 80071a2:	e014      	b.n	80071ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a4:	f7fd fa92 	bl	80046cc <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071aa:	e008      	b.n	80071be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071ac:	f7fd fa8e 	bl	80046cc <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b64      	cmp	r3, #100	@ 0x64
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e1ec      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071be:	4b53      	ldr	r3, [pc, #332]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1f0      	bne.n	80071ac <HAL_RCC_OscConfig+0x10c>
 80071ca:	e000      	b.n	80071ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d063      	beq.n	80072a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071da:	4b4c      	ldr	r3, [pc, #304]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f003 030c 	and.w	r3, r3, #12
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80071e6:	4b49      	ldr	r3, [pc, #292]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f003 030c 	and.w	r3, r3, #12
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d11c      	bne.n	800722c <HAL_RCC_OscConfig+0x18c>
 80071f2:	4b46      	ldr	r3, [pc, #280]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d116      	bne.n	800722c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071fe:	4b43      	ldr	r3, [pc, #268]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <HAL_RCC_OscConfig+0x176>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d001      	beq.n	8007216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e1c0      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007216:	4b3d      	ldr	r3, [pc, #244]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	4939      	ldr	r1, [pc, #228]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007226:	4313      	orrs	r3, r2
 8007228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800722a:	e03a      	b.n	80072a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d020      	beq.n	8007276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007234:	4b36      	ldr	r3, [pc, #216]	@ (8007310 <HAL_RCC_OscConfig+0x270>)
 8007236:	2201      	movs	r2, #1
 8007238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800723a:	f7fd fa47 	bl	80046cc <HAL_GetTick>
 800723e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007240:	e008      	b.n	8007254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007242:	f7fd fa43 	bl	80046cc <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e1a1      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007254:	4b2d      	ldr	r3, [pc, #180]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007260:	4b2a      	ldr	r3, [pc, #168]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	4927      	ldr	r1, [pc, #156]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007270:	4313      	orrs	r3, r2
 8007272:	600b      	str	r3, [r1, #0]
 8007274:	e015      	b.n	80072a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007276:	4b26      	ldr	r3, [pc, #152]	@ (8007310 <HAL_RCC_OscConfig+0x270>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800727c:	f7fd fa26 	bl	80046cc <HAL_GetTick>
 8007280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007282:	e008      	b.n	8007296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007284:	f7fd fa22 	bl	80046cc <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e180      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007296:	4b1d      	ldr	r3, [pc, #116]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f0      	bne.n	8007284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d03a      	beq.n	8007324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d019      	beq.n	80072ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072b6:	4b17      	ldr	r3, [pc, #92]	@ (8007314 <HAL_RCC_OscConfig+0x274>)
 80072b8:	2201      	movs	r2, #1
 80072ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072bc:	f7fd fa06 	bl	80046cc <HAL_GetTick>
 80072c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072c2:	e008      	b.n	80072d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072c4:	f7fd fa02 	bl	80046cc <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e160      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072d6:	4b0d      	ldr	r3, [pc, #52]	@ (800730c <HAL_RCC_OscConfig+0x26c>)
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0f0      	beq.n	80072c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80072e2:	2001      	movs	r0, #1
 80072e4:	f000 fad8 	bl	8007898 <RCC_Delay>
 80072e8:	e01c      	b.n	8007324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007314 <HAL_RCC_OscConfig+0x274>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072f0:	f7fd f9ec 	bl	80046cc <HAL_GetTick>
 80072f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f6:	e00f      	b.n	8007318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072f8:	f7fd f9e8 	bl	80046cc <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b02      	cmp	r3, #2
 8007304:	d908      	bls.n	8007318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e146      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
 800730a:	bf00      	nop
 800730c:	40021000 	.word	0x40021000
 8007310:	42420000 	.word	0x42420000
 8007314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007318:	4b92      	ldr	r3, [pc, #584]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 800731a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e9      	bne.n	80072f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80a6 	beq.w	800747e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007332:	2300      	movs	r3, #0
 8007334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007336:	4b8b      	ldr	r3, [pc, #556]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10d      	bne.n	800735e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007342:	4b88      	ldr	r3, [pc, #544]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	4a87      	ldr	r2, [pc, #540]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 8007348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800734c:	61d3      	str	r3, [r2, #28]
 800734e:	4b85      	ldr	r3, [pc, #532]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007356:	60bb      	str	r3, [r7, #8]
 8007358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800735a:	2301      	movs	r3, #1
 800735c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800735e:	4b82      	ldr	r3, [pc, #520]	@ (8007568 <HAL_RCC_OscConfig+0x4c8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007366:	2b00      	cmp	r3, #0
 8007368:	d118      	bne.n	800739c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800736a:	4b7f      	ldr	r3, [pc, #508]	@ (8007568 <HAL_RCC_OscConfig+0x4c8>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a7e      	ldr	r2, [pc, #504]	@ (8007568 <HAL_RCC_OscConfig+0x4c8>)
 8007370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007376:	f7fd f9a9 	bl	80046cc <HAL_GetTick>
 800737a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800737c:	e008      	b.n	8007390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800737e:	f7fd f9a5 	bl	80046cc <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b64      	cmp	r3, #100	@ 0x64
 800738a:	d901      	bls.n	8007390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e103      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007390:	4b75      	ldr	r3, [pc, #468]	@ (8007568 <HAL_RCC_OscConfig+0x4c8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0f0      	beq.n	800737e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d106      	bne.n	80073b2 <HAL_RCC_OscConfig+0x312>
 80073a4:	4b6f      	ldr	r3, [pc, #444]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	4a6e      	ldr	r2, [pc, #440]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	6213      	str	r3, [r2, #32]
 80073b0:	e02d      	b.n	800740e <HAL_RCC_OscConfig+0x36e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10c      	bne.n	80073d4 <HAL_RCC_OscConfig+0x334>
 80073ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	4a69      	ldr	r2, [pc, #420]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073c0:	f023 0301 	bic.w	r3, r3, #1
 80073c4:	6213      	str	r3, [r2, #32]
 80073c6:	4b67      	ldr	r3, [pc, #412]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	4a66      	ldr	r2, [pc, #408]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073cc:	f023 0304 	bic.w	r3, r3, #4
 80073d0:	6213      	str	r3, [r2, #32]
 80073d2:	e01c      	b.n	800740e <HAL_RCC_OscConfig+0x36e>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	2b05      	cmp	r3, #5
 80073da:	d10c      	bne.n	80073f6 <HAL_RCC_OscConfig+0x356>
 80073dc:	4b61      	ldr	r3, [pc, #388]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	4a60      	ldr	r2, [pc, #384]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073e2:	f043 0304 	orr.w	r3, r3, #4
 80073e6:	6213      	str	r3, [r2, #32]
 80073e8:	4b5e      	ldr	r3, [pc, #376]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	4a5d      	ldr	r2, [pc, #372]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	6213      	str	r3, [r2, #32]
 80073f4:	e00b      	b.n	800740e <HAL_RCC_OscConfig+0x36e>
 80073f6:	4b5b      	ldr	r3, [pc, #364]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	4a5a      	ldr	r2, [pc, #360]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80073fc:	f023 0301 	bic.w	r3, r3, #1
 8007400:	6213      	str	r3, [r2, #32]
 8007402:	4b58      	ldr	r3, [pc, #352]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	4a57      	ldr	r2, [pc, #348]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 8007408:	f023 0304 	bic.w	r3, r3, #4
 800740c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d015      	beq.n	8007442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007416:	f7fd f959 	bl	80046cc <HAL_GetTick>
 800741a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800741c:	e00a      	b.n	8007434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800741e:	f7fd f955 	bl	80046cc <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800742c:	4293      	cmp	r3, r2
 800742e:	d901      	bls.n	8007434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e0b1      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007434:	4b4b      	ldr	r3, [pc, #300]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0ee      	beq.n	800741e <HAL_RCC_OscConfig+0x37e>
 8007440:	e014      	b.n	800746c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007442:	f7fd f943 	bl	80046cc <HAL_GetTick>
 8007446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007448:	e00a      	b.n	8007460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800744a:	f7fd f93f 	bl	80046cc <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007458:	4293      	cmp	r3, r2
 800745a:	d901      	bls.n	8007460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e09b      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007460:	4b40      	ldr	r3, [pc, #256]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1ee      	bne.n	800744a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d105      	bne.n	800747e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007472:	4b3c      	ldr	r3, [pc, #240]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	4a3b      	ldr	r2, [pc, #236]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 8007478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800747c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8087 	beq.w	8007596 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007488:	4b36      	ldr	r3, [pc, #216]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f003 030c 	and.w	r3, r3, #12
 8007490:	2b08      	cmp	r3, #8
 8007492:	d061      	beq.n	8007558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	2b02      	cmp	r3, #2
 800749a:	d146      	bne.n	800752a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749c:	4b33      	ldr	r3, [pc, #204]	@ (800756c <HAL_RCC_OscConfig+0x4cc>)
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a2:	f7fd f913 	bl	80046cc <HAL_GetTick>
 80074a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074a8:	e008      	b.n	80074bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074aa:	f7fd f90f 	bl	80046cc <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e06d      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074bc:	4b29      	ldr	r3, [pc, #164]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1f0      	bne.n	80074aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d0:	d108      	bne.n	80074e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80074d2:	4b24      	ldr	r3, [pc, #144]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	4921      	ldr	r1, [pc, #132]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a19      	ldr	r1, [r3, #32]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f4:	430b      	orrs	r3, r1
 80074f6:	491b      	ldr	r1, [pc, #108]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074fc:	4b1b      	ldr	r3, [pc, #108]	@ (800756c <HAL_RCC_OscConfig+0x4cc>)
 80074fe:	2201      	movs	r2, #1
 8007500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007502:	f7fd f8e3 	bl	80046cc <HAL_GetTick>
 8007506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007508:	e008      	b.n	800751c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800750a:	f7fd f8df 	bl	80046cc <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e03d      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800751c:	4b11      	ldr	r3, [pc, #68]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0f0      	beq.n	800750a <HAL_RCC_OscConfig+0x46a>
 8007528:	e035      	b.n	8007596 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800752a:	4b10      	ldr	r3, [pc, #64]	@ (800756c <HAL_RCC_OscConfig+0x4cc>)
 800752c:	2200      	movs	r2, #0
 800752e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007530:	f7fd f8cc 	bl	80046cc <HAL_GetTick>
 8007534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007538:	f7fd f8c8 	bl	80046cc <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e026      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800754a:	4b06      	ldr	r3, [pc, #24]	@ (8007564 <HAL_RCC_OscConfig+0x4c4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f0      	bne.n	8007538 <HAL_RCC_OscConfig+0x498>
 8007556:	e01e      	b.n	8007596 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d107      	bne.n	8007570 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e019      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
 8007564:	40021000 	.word	0x40021000
 8007568:	40007000 	.word	0x40007000
 800756c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007570:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <HAL_RCC_OscConfig+0x500>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	429a      	cmp	r2, r3
 8007582:	d106      	bne.n	8007592 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800758e:	429a      	cmp	r2, r3
 8007590:	d001      	beq.n	8007596 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e000      	b.n	8007598 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	40021000 	.word	0x40021000

080075a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e0d0      	b.n	800775a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075b8:	4b6a      	ldr	r3, [pc, #424]	@ (8007764 <HAL_RCC_ClockConfig+0x1c0>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0307 	and.w	r3, r3, #7
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d910      	bls.n	80075e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075c6:	4b67      	ldr	r3, [pc, #412]	@ (8007764 <HAL_RCC_ClockConfig+0x1c0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f023 0207 	bic.w	r2, r3, #7
 80075ce:	4965      	ldr	r1, [pc, #404]	@ (8007764 <HAL_RCC_ClockConfig+0x1c0>)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075d6:	4b63      	ldr	r3, [pc, #396]	@ (8007764 <HAL_RCC_ClockConfig+0x1c0>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d001      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0b8      	b.n	800775a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d020      	beq.n	8007636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007600:	4b59      	ldr	r3, [pc, #356]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4a58      	ldr	r2, [pc, #352]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 8007606:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800760a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007618:	4b53      	ldr	r3, [pc, #332]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	4a52      	ldr	r2, [pc, #328]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 800761e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007624:	4b50      	ldr	r3, [pc, #320]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	494d      	ldr	r1, [pc, #308]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 8007632:	4313      	orrs	r3, r2
 8007634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d040      	beq.n	80076c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d107      	bne.n	800765a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800764a:	4b47      	ldr	r3, [pc, #284]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d115      	bne.n	8007682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e07f      	b.n	800775a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d107      	bne.n	8007672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007662:	4b41      	ldr	r3, [pc, #260]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e073      	b.n	800775a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007672:	4b3d      	ldr	r3, [pc, #244]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e06b      	b.n	800775a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007682:	4b39      	ldr	r3, [pc, #228]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f023 0203 	bic.w	r2, r3, #3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	4936      	ldr	r1, [pc, #216]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 8007690:	4313      	orrs	r3, r2
 8007692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007694:	f7fd f81a 	bl	80046cc <HAL_GetTick>
 8007698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800769a:	e00a      	b.n	80076b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800769c:	f7fd f816 	bl	80046cc <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e053      	b.n	800775a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076b2:	4b2d      	ldr	r3, [pc, #180]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f003 020c 	and.w	r2, r3, #12
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d1eb      	bne.n	800769c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076c4:	4b27      	ldr	r3, [pc, #156]	@ (8007764 <HAL_RCC_ClockConfig+0x1c0>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d210      	bcs.n	80076f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d2:	4b24      	ldr	r3, [pc, #144]	@ (8007764 <HAL_RCC_ClockConfig+0x1c0>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f023 0207 	bic.w	r2, r3, #7
 80076da:	4922      	ldr	r1, [pc, #136]	@ (8007764 <HAL_RCC_ClockConfig+0x1c0>)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	4313      	orrs	r3, r2
 80076e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076e2:	4b20      	ldr	r3, [pc, #128]	@ (8007764 <HAL_RCC_ClockConfig+0x1c0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d001      	beq.n	80076f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e032      	b.n	800775a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d008      	beq.n	8007712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007700:	4b19      	ldr	r3, [pc, #100]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	4916      	ldr	r1, [pc, #88]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 800770e:	4313      	orrs	r3, r2
 8007710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d009      	beq.n	8007732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800771e:	4b12      	ldr	r3, [pc, #72]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	490e      	ldr	r1, [pc, #56]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 800772e:	4313      	orrs	r3, r2
 8007730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007732:	f000 f821 	bl	8007778 <HAL_RCC_GetSysClockFreq>
 8007736:	4602      	mov	r2, r0
 8007738:	4b0b      	ldr	r3, [pc, #44]	@ (8007768 <HAL_RCC_ClockConfig+0x1c4>)
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	091b      	lsrs	r3, r3, #4
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	490a      	ldr	r1, [pc, #40]	@ (800776c <HAL_RCC_ClockConfig+0x1c8>)
 8007744:	5ccb      	ldrb	r3, [r1, r3]
 8007746:	fa22 f303 	lsr.w	r3, r2, r3
 800774a:	4a09      	ldr	r2, [pc, #36]	@ (8007770 <HAL_RCC_ClockConfig+0x1cc>)
 800774c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800774e:	4b09      	ldr	r3, [pc, #36]	@ (8007774 <HAL_RCC_ClockConfig+0x1d0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4618      	mov	r0, r3
 8007754:	f7fc ff78 	bl	8004648 <HAL_InitTick>

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	40022000 	.word	0x40022000
 8007768:	40021000 	.word	0x40021000
 800776c:	0800e77c 	.word	0x0800e77c
 8007770:	20000028 	.word	0x20000028
 8007774:	2000002c 	.word	0x2000002c

08007778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007778:	b490      	push	{r4, r7}
 800777a:	b08a      	sub	sp, #40	@ 0x28
 800777c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800777e:	4b29      	ldr	r3, [pc, #164]	@ (8007824 <HAL_RCC_GetSysClockFreq+0xac>)
 8007780:	1d3c      	adds	r4, r7, #4
 8007782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007788:	f240 2301 	movw	r3, #513	@ 0x201
 800778c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	2300      	movs	r3, #0
 8007794:	61bb      	str	r3, [r7, #24]
 8007796:	2300      	movs	r3, #0
 8007798:	627b      	str	r3, [r7, #36]	@ 0x24
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80077a2:	4b21      	ldr	r3, [pc, #132]	@ (8007828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	f003 030c 	and.w	r3, r3, #12
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d002      	beq.n	80077b8 <HAL_RCC_GetSysClockFreq+0x40>
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d003      	beq.n	80077be <HAL_RCC_GetSysClockFreq+0x46>
 80077b6:	e02b      	b.n	8007810 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80077b8:	4b1c      	ldr	r3, [pc, #112]	@ (800782c <HAL_RCC_GetSysClockFreq+0xb4>)
 80077ba:	623b      	str	r3, [r7, #32]
      break;
 80077bc:	e02b      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	0c9b      	lsrs	r3, r3, #18
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	3328      	adds	r3, #40	@ 0x28
 80077c8:	443b      	add	r3, r7
 80077ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80077ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d012      	beq.n	8007800 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80077da:	4b13      	ldr	r3, [pc, #76]	@ (8007828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	0c5b      	lsrs	r3, r3, #17
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	3328      	adds	r3, #40	@ 0x28
 80077e6:	443b      	add	r3, r7
 80077e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80077ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	4a0e      	ldr	r2, [pc, #56]	@ (800782c <HAL_RCC_GetSysClockFreq+0xb4>)
 80077f2:	fb03 f202 	mul.w	r2, r3, r2
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80077fe:	e004      	b.n	800780a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	4a0b      	ldr	r2, [pc, #44]	@ (8007830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007804:	fb02 f303 	mul.w	r3, r2, r3
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	623b      	str	r3, [r7, #32]
      break;
 800780e:	e002      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007810:	4b06      	ldr	r3, [pc, #24]	@ (800782c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007812:	623b      	str	r3, [r7, #32]
      break;
 8007814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007816:	6a3b      	ldr	r3, [r7, #32]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3728      	adds	r7, #40	@ 0x28
 800781c:	46bd      	mov	sp, r7
 800781e:	bc90      	pop	{r4, r7}
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	0800e714 	.word	0x0800e714
 8007828:	40021000 	.word	0x40021000
 800782c:	007a1200 	.word	0x007a1200
 8007830:	003d0900 	.word	0x003d0900

08007834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007834:	b480      	push	{r7}
 8007836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007838:	4b02      	ldr	r3, [pc, #8]	@ (8007844 <HAL_RCC_GetHCLKFreq+0x10>)
 800783a:	681b      	ldr	r3, [r3, #0]
}
 800783c:	4618      	mov	r0, r3
 800783e:	46bd      	mov	sp, r7
 8007840:	bc80      	pop	{r7}
 8007842:	4770      	bx	lr
 8007844:	20000028 	.word	0x20000028

08007848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800784c:	f7ff fff2 	bl	8007834 <HAL_RCC_GetHCLKFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b05      	ldr	r3, [pc, #20]	@ (8007868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	4903      	ldr	r1, [pc, #12]	@ (800786c <HAL_RCC_GetPCLK1Freq+0x24>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40021000 	.word	0x40021000
 800786c:	0800e78c 	.word	0x0800e78c

08007870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007874:	f7ff ffde 	bl	8007834 <HAL_RCC_GetHCLKFreq>
 8007878:	4602      	mov	r2, r0
 800787a:	4b05      	ldr	r3, [pc, #20]	@ (8007890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	0adb      	lsrs	r3, r3, #11
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	4903      	ldr	r1, [pc, #12]	@ (8007894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007886:	5ccb      	ldrb	r3, [r1, r3]
 8007888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800788c:	4618      	mov	r0, r3
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40021000 	.word	0x40021000
 8007894:	0800e78c 	.word	0x0800e78c

08007898 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80078a0:	4b0a      	ldr	r3, [pc, #40]	@ (80078cc <RCC_Delay+0x34>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a0a      	ldr	r2, [pc, #40]	@ (80078d0 <RCC_Delay+0x38>)
 80078a6:	fba2 2303 	umull	r2, r3, r2, r3
 80078aa:	0a5b      	lsrs	r3, r3, #9
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	fb02 f303 	mul.w	r3, r2, r3
 80078b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80078b4:	bf00      	nop
  }
  while (Delay --);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	1e5a      	subs	r2, r3, #1
 80078ba:	60fa      	str	r2, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1f9      	bne.n	80078b4 <RCC_Delay+0x1c>
}
 80078c0:	bf00      	nop
 80078c2:	bf00      	nop
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr
 80078cc:	20000028 	.word	0x20000028
 80078d0:	10624dd3 	.word	0x10624dd3

080078d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d07d      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80078f0:	2300      	movs	r3, #0
 80078f2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10d      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007900:	4b4c      	ldr	r3, [pc, #304]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	4a4b      	ldr	r2, [pc, #300]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800790a:	61d3      	str	r3, [r2, #28]
 800790c:	4b49      	ldr	r3, [pc, #292]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007914:	60bb      	str	r3, [r7, #8]
 8007916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007918:	2301      	movs	r3, #1
 800791a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800791c:	4b46      	ldr	r3, [pc, #280]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007924:	2b00      	cmp	r3, #0
 8007926:	d118      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007928:	4b43      	ldr	r3, [pc, #268]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a42      	ldr	r2, [pc, #264]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800792e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007932:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007934:	f7fc feca 	bl	80046cc <HAL_GetTick>
 8007938:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800793a:	e008      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800793c:	f7fc fec6 	bl	80046cc <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b64      	cmp	r3, #100	@ 0x64
 8007948:	d901      	bls.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e06d      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800794e:	4b3a      	ldr	r3, [pc, #232]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0f0      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800795a:	4b36      	ldr	r3, [pc, #216]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007962:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d02e      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	429a      	cmp	r2, r3
 8007976:	d027      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007978:	4b2e      	ldr	r3, [pc, #184]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007980:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007982:	4b2e      	ldr	r3, [pc, #184]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007984:	2201      	movs	r2, #1
 8007986:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007988:	4b2c      	ldr	r3, [pc, #176]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800798e:	4a29      	ldr	r2, [pc, #164]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	d014      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800799e:	f7fc fe95 	bl	80046cc <HAL_GetTick>
 80079a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a4:	e00a      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079a6:	f7fc fe91 	bl	80046cc <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d901      	bls.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e036      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0ee      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	4917      	ldr	r1, [pc, #92]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d105      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079e0:	4b14      	ldr	r3, [pc, #80]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	4a13      	ldr	r2, [pc, #76]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d008      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	490b      	ldr	r1, [pc, #44]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0310 	and.w	r3, r3, #16
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d008      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a16:	4b07      	ldr	r3, [pc, #28]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	4904      	ldr	r1, [pc, #16]	@ (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40021000 	.word	0x40021000
 8007a38:	40007000 	.word	0x40007000
 8007a3c:	42420440 	.word	0x42420440

08007a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e076      	b.n	8007b40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d108      	bne.n	8007a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a62:	d009      	beq.n	8007a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	61da      	str	r2, [r3, #28]
 8007a6a:	e005      	b.n	8007a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d106      	bne.n	8007a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7fc fc50 	bl	8004338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007aae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007af2:	431a      	orrs	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afc:	ea42 0103 	orr.w	r1, r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b04:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	0c1a      	lsrs	r2, r3, #16
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f002 0204 	and.w	r2, r2, #4
 8007b1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69da      	ldr	r2, [r3, #28]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08c      	sub	sp, #48	@ 0x30
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b56:	2301      	movs	r3, #1
 8007b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d101      	bne.n	8007b6e <HAL_SPI_TransmitReceive+0x26>
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e18a      	b.n	8007e84 <HAL_SPI_TransmitReceive+0x33c>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b76:	f7fc fda9 	bl	80046cc <HAL_GetTick>
 8007b7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b8c:	887b      	ldrh	r3, [r7, #2]
 8007b8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d00f      	beq.n	8007bb8 <HAL_SPI_TransmitReceive+0x70>
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b9e:	d107      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d103      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x68>
 8007ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d003      	beq.n	8007bb8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007bb6:	e15b      	b.n	8007e70 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d005      	beq.n	8007bca <HAL_SPI_TransmitReceive+0x82>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_SPI_TransmitReceive+0x82>
 8007bc4:	887b      	ldrh	r3, [r7, #2]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d103      	bne.n	8007bd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007bd0:	e14e      	b.n	8007e70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d003      	beq.n	8007be6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2205      	movs	r2, #5
 8007be2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	887a      	ldrh	r2, [r7, #2]
 8007bf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	887a      	ldrh	r2, [r7, #2]
 8007bfc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	887a      	ldrh	r2, [r7, #2]
 8007c08:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	887a      	ldrh	r2, [r7, #2]
 8007c0e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c26:	2b40      	cmp	r3, #64	@ 0x40
 8007c28:	d007      	beq.n	8007c3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c42:	d178      	bne.n	8007d36 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <HAL_SPI_TransmitReceive+0x10a>
 8007c4c:	8b7b      	ldrh	r3, [r7, #26]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d166      	bne.n	8007d20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c56:	881a      	ldrh	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c62:	1c9a      	adds	r2, r3, #2
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c76:	e053      	b.n	8007d20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d11b      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x176>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d016      	beq.n	8007cbe <HAL_SPI_TransmitReceive+0x176>
 8007c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d113      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9a:	881a      	ldrh	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca6:	1c9a      	adds	r2, r3, #2
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d119      	bne.n	8007d00 <HAL_SPI_TransmitReceive+0x1b8>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d014      	beq.n	8007d00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce0:	b292      	uxth	r2, r2
 8007ce2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce8:	1c9a      	adds	r2, r3, #2
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d00:	f7fc fce4 	bl	80046cc <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d807      	bhi.n	8007d20 <HAL_SPI_TransmitReceive+0x1d8>
 8007d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d16:	d003      	beq.n	8007d20 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007d1e:	e0a7      	b.n	8007e70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1a6      	bne.n	8007c78 <HAL_SPI_TransmitReceive+0x130>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1a1      	bne.n	8007c78 <HAL_SPI_TransmitReceive+0x130>
 8007d34:	e07c      	b.n	8007e30 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <HAL_SPI_TransmitReceive+0x1fc>
 8007d3e:	8b7b      	ldrh	r3, [r7, #26]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d16b      	bne.n	8007e1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	330c      	adds	r3, #12
 8007d4e:	7812      	ldrb	r2, [r2, #0]
 8007d50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d6a:	e057      	b.n	8007e1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d11c      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x26c>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d017      	beq.n	8007db4 <HAL_SPI_TransmitReceive+0x26c>
 8007d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d114      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	330c      	adds	r3, #12
 8007d94:	7812      	ldrb	r2, [r2, #0]
 8007d96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d119      	bne.n	8007df6 <HAL_SPI_TransmitReceive+0x2ae>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d014      	beq.n	8007df6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007df2:	2301      	movs	r3, #1
 8007df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007df6:	f7fc fc69 	bl	80046cc <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d803      	bhi.n	8007e0e <HAL_SPI_TransmitReceive+0x2c6>
 8007e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0c:	d102      	bne.n	8007e14 <HAL_SPI_TransmitReceive+0x2cc>
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d103      	bne.n	8007e1c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007e1a:	e029      	b.n	8007e70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1a2      	bne.n	8007d6c <HAL_SPI_TransmitReceive+0x224>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d19d      	bne.n	8007d6c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 f8b1 	bl	8007f9c <SPI_EndRxTxTransaction>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d006      	beq.n	8007e4e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007e4c:	e010      	b.n	8007e70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10b      	bne.n	8007e6e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	e000      	b.n	8007e70 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007e80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3730      	adds	r7, #48	@ 0x30
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e9c:	f7fc fc16 	bl	80046cc <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea4:	1a9b      	subs	r3, r3, r2
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007eac:	f7fc fc0e 	bl	80046cc <HAL_GetTick>
 8007eb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007eb2:	4b39      	ldr	r3, [pc, #228]	@ (8007f98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	015b      	lsls	r3, r3, #5
 8007eb8:	0d1b      	lsrs	r3, r3, #20
 8007eba:	69fa      	ldr	r2, [r7, #28]
 8007ebc:	fb02 f303 	mul.w	r3, r2, r3
 8007ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ec2:	e054      	b.n	8007f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eca:	d050      	beq.n	8007f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ecc:	f7fc fbfe 	bl	80046cc <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	69fa      	ldr	r2, [r7, #28]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d902      	bls.n	8007ee2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d13d      	bne.n	8007f5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ef0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007efa:	d111      	bne.n	8007f20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f04:	d004      	beq.n	8007f10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f0e:	d107      	bne.n	8007f20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f28:	d10f      	bne.n	8007f4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e017      	b.n	8007f8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4013      	ands	r3, r2
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	bf0c      	ite	eq
 8007f7e:	2301      	moveq	r3, #1
 8007f80:	2300      	movne	r3, #0
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	461a      	mov	r2, r3
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d19b      	bne.n	8007ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000028 	.word	0x20000028

08007f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2180      	movs	r1, #128	@ 0x80
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f7ff ff6a 	bl	8007e8c <SPI_WaitFlagStateUntilTimeout>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d007      	beq.n	8007fce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc2:	f043 0220 	orr.w	r2, r3, #32
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e000      	b.n	8007fd0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e041      	b.n	800806e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d106      	bne.n	8008004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7fc f9e4 	bl	80043cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f000 fa70 	bl	80084fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b01      	cmp	r3, #1
 800808a:	d001      	beq.n	8008090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e03a      	b.n	8008106 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0201 	orr.w	r2, r2, #1
 80080a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a18      	ldr	r2, [pc, #96]	@ (8008110 <HAL_TIM_Base_Start_IT+0x98>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00e      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x58>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ba:	d009      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x58>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a14      	ldr	r2, [pc, #80]	@ (8008114 <HAL_TIM_Base_Start_IT+0x9c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d004      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x58>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a13      	ldr	r2, [pc, #76]	@ (8008118 <HAL_TIM_Base_Start_IT+0xa0>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d111      	bne.n	80080f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b06      	cmp	r3, #6
 80080e0:	d010      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f042 0201 	orr.w	r2, r2, #1
 80080f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f2:	e007      	b.n	8008104 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0201 	orr.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr
 8008110:	40012c00 	.word	0x40012c00
 8008114:	40000400 	.word	0x40000400
 8008118:	40000800 	.word	0x40000800

0800811c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b02      	cmp	r3, #2
 8008130:	d122      	bne.n	8008178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b02      	cmp	r3, #2
 800813e:	d11b      	bne.n	8008178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0202 	mvn.w	r2, #2
 8008148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f9b1 	bl	80084c6 <HAL_TIM_IC_CaptureCallback>
 8008164:	e005      	b.n	8008172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9a4 	bl	80084b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f9b3 	bl	80084d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b04      	cmp	r3, #4
 8008184:	d122      	bne.n	80081cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b04      	cmp	r3, #4
 8008192:	d11b      	bne.n	80081cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0204 	mvn.w	r2, #4
 800819c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2202      	movs	r2, #2
 80081a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f987 	bl	80084c6 <HAL_TIM_IC_CaptureCallback>
 80081b8:	e005      	b.n	80081c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f97a 	bl	80084b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f989 	bl	80084d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d122      	bne.n	8008220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d11b      	bne.n	8008220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f06f 0208 	mvn.w	r2, #8
 80081f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2204      	movs	r2, #4
 80081f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f003 0303 	and.w	r3, r3, #3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f95d 	bl	80084c6 <HAL_TIM_IC_CaptureCallback>
 800820c:	e005      	b.n	800821a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f950 	bl	80084b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f95f 	bl	80084d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f003 0310 	and.w	r3, r3, #16
 800822a:	2b10      	cmp	r3, #16
 800822c:	d122      	bne.n	8008274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	2b10      	cmp	r3, #16
 800823a:	d11b      	bne.n	8008274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f06f 0210 	mvn.w	r2, #16
 8008244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2208      	movs	r2, #8
 800824a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f933 	bl	80084c6 <HAL_TIM_IC_CaptureCallback>
 8008260:	e005      	b.n	800826e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f926 	bl	80084b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f935 	bl	80084d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b01      	cmp	r3, #1
 8008280:	d10e      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b01      	cmp	r3, #1
 800828e:	d107      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0201 	mvn.w	r2, #1
 8008298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7f8 fd6e 	bl	8000d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082aa:	2b80      	cmp	r3, #128	@ 0x80
 80082ac:	d10e      	bne.n	80082cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082b8:	2b80      	cmp	r3, #128	@ 0x80
 80082ba:	d107      	bne.n	80082cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80082c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fa77 	bl	80087ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d6:	2b40      	cmp	r3, #64	@ 0x40
 80082d8:	d10e      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e4:	2b40      	cmp	r3, #64	@ 0x40
 80082e6:	d107      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f8f9 	bl	80084ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 0320 	and.w	r3, r3, #32
 8008302:	2b20      	cmp	r3, #32
 8008304:	d10e      	bne.n	8008324 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b20      	cmp	r3, #32
 8008312:	d107      	bne.n	8008324 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0220 	mvn.w	r2, #32
 800831c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa42 	bl	80087a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800833c:	2b01      	cmp	r3, #1
 800833e:	d101      	bne.n	8008344 <HAL_TIM_ConfigClockSource+0x18>
 8008340:	2302      	movs	r3, #2
 8008342:	e0b3      	b.n	80084ac <HAL_TIM_ConfigClockSource+0x180>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008362:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800836a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800837c:	d03e      	beq.n	80083fc <HAL_TIM_ConfigClockSource+0xd0>
 800837e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008382:	f200 8087 	bhi.w	8008494 <HAL_TIM_ConfigClockSource+0x168>
 8008386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800838a:	f000 8085 	beq.w	8008498 <HAL_TIM_ConfigClockSource+0x16c>
 800838e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008392:	d87f      	bhi.n	8008494 <HAL_TIM_ConfigClockSource+0x168>
 8008394:	2b70      	cmp	r3, #112	@ 0x70
 8008396:	d01a      	beq.n	80083ce <HAL_TIM_ConfigClockSource+0xa2>
 8008398:	2b70      	cmp	r3, #112	@ 0x70
 800839a:	d87b      	bhi.n	8008494 <HAL_TIM_ConfigClockSource+0x168>
 800839c:	2b60      	cmp	r3, #96	@ 0x60
 800839e:	d050      	beq.n	8008442 <HAL_TIM_ConfigClockSource+0x116>
 80083a0:	2b60      	cmp	r3, #96	@ 0x60
 80083a2:	d877      	bhi.n	8008494 <HAL_TIM_ConfigClockSource+0x168>
 80083a4:	2b50      	cmp	r3, #80	@ 0x50
 80083a6:	d03c      	beq.n	8008422 <HAL_TIM_ConfigClockSource+0xf6>
 80083a8:	2b50      	cmp	r3, #80	@ 0x50
 80083aa:	d873      	bhi.n	8008494 <HAL_TIM_ConfigClockSource+0x168>
 80083ac:	2b40      	cmp	r3, #64	@ 0x40
 80083ae:	d058      	beq.n	8008462 <HAL_TIM_ConfigClockSource+0x136>
 80083b0:	2b40      	cmp	r3, #64	@ 0x40
 80083b2:	d86f      	bhi.n	8008494 <HAL_TIM_ConfigClockSource+0x168>
 80083b4:	2b30      	cmp	r3, #48	@ 0x30
 80083b6:	d064      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0x156>
 80083b8:	2b30      	cmp	r3, #48	@ 0x30
 80083ba:	d86b      	bhi.n	8008494 <HAL_TIM_ConfigClockSource+0x168>
 80083bc:	2b20      	cmp	r3, #32
 80083be:	d060      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0x156>
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	d867      	bhi.n	8008494 <HAL_TIM_ConfigClockSource+0x168>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d05c      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0x156>
 80083c8:	2b10      	cmp	r3, #16
 80083ca:	d05a      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80083cc:	e062      	b.n	8008494 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	6899      	ldr	r1, [r3, #8]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f000 f966 	bl	80086ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80083f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	609a      	str	r2, [r3, #8]
      break;
 80083fa:	e04e      	b.n	800849a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6818      	ldr	r0, [r3, #0]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	6899      	ldr	r1, [r3, #8]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f000 f94f 	bl	80086ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800841e:	609a      	str	r2, [r3, #8]
      break;
 8008420:	e03b      	b.n	800849a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6818      	ldr	r0, [r3, #0]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	6859      	ldr	r1, [r3, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	461a      	mov	r2, r3
 8008430:	f000 f8c6 	bl	80085c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2150      	movs	r1, #80	@ 0x50
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f91d 	bl	800867a <TIM_ITRx_SetConfig>
      break;
 8008440:	e02b      	b.n	800849a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	6859      	ldr	r1, [r3, #4]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	461a      	mov	r2, r3
 8008450:	f000 f8e4 	bl	800861c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2160      	movs	r1, #96	@ 0x60
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f90d 	bl	800867a <TIM_ITRx_SetConfig>
      break;
 8008460:	e01b      	b.n	800849a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	6859      	ldr	r1, [r3, #4]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	461a      	mov	r2, r3
 8008470:	f000 f8a6 	bl	80085c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2140      	movs	r1, #64	@ 0x40
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f8fd 	bl	800867a <TIM_ITRx_SetConfig>
      break;
 8008480:	e00b      	b.n	800849a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4619      	mov	r1, r3
 800848c:	4610      	mov	r0, r2
 800848e:	f000 f8f4 	bl	800867a <TIM_ITRx_SetConfig>
        break;
 8008492:	e002      	b.n	800849a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008494:	bf00      	nop
 8008496:	e000      	b.n	800849a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008498:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bc80      	pop	{r7}
 80084c4:	4770      	bx	lr

080084c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bc80      	pop	{r7}
 80084d6:	4770      	bx	lr

080084d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bc80      	pop	{r7}
 80084e8:	4770      	bx	lr

080084ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084f2:	bf00      	nop
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bc80      	pop	{r7}
 80084fa:	4770      	bx	lr

080084fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a29      	ldr	r2, [pc, #164]	@ (80085b4 <TIM_Base_SetConfig+0xb8>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d00b      	beq.n	800852c <TIM_Base_SetConfig+0x30>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800851a:	d007      	beq.n	800852c <TIM_Base_SetConfig+0x30>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a26      	ldr	r2, [pc, #152]	@ (80085b8 <TIM_Base_SetConfig+0xbc>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d003      	beq.n	800852c <TIM_Base_SetConfig+0x30>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a25      	ldr	r2, [pc, #148]	@ (80085bc <TIM_Base_SetConfig+0xc0>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d108      	bne.n	800853e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a1c      	ldr	r2, [pc, #112]	@ (80085b4 <TIM_Base_SetConfig+0xb8>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d00b      	beq.n	800855e <TIM_Base_SetConfig+0x62>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800854c:	d007      	beq.n	800855e <TIM_Base_SetConfig+0x62>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a19      	ldr	r2, [pc, #100]	@ (80085b8 <TIM_Base_SetConfig+0xbc>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d003      	beq.n	800855e <TIM_Base_SetConfig+0x62>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a18      	ldr	r2, [pc, #96]	@ (80085bc <TIM_Base_SetConfig+0xc0>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d108      	bne.n	8008570 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	4313      	orrs	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a07      	ldr	r2, [pc, #28]	@ (80085b4 <TIM_Base_SetConfig+0xb8>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d103      	bne.n	80085a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	691a      	ldr	r2, [r3, #16]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	615a      	str	r2, [r3, #20]
}
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bc80      	pop	{r7}
 80085b2:	4770      	bx	lr
 80085b4:	40012c00 	.word	0x40012c00
 80085b8:	40000400 	.word	0x40000400
 80085bc:	40000800 	.word	0x40000800

080085c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	f023 0201 	bic.w	r2, r3, #1
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	011b      	lsls	r3, r3, #4
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f023 030a 	bic.w	r3, r3, #10
 80085fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	4313      	orrs	r3, r2
 8008604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	621a      	str	r2, [r3, #32]
}
 8008612:	bf00      	nop
 8008614:	371c      	adds	r7, #28
 8008616:	46bd      	mov	sp, r7
 8008618:	bc80      	pop	{r7}
 800861a:	4770      	bx	lr

0800861c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	f023 0210 	bic.w	r2, r3, #16
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008646:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	031b      	lsls	r3, r3, #12
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008658:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	011b      	lsls	r3, r3, #4
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	621a      	str	r2, [r3, #32]
}
 8008670:	bf00      	nop
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr

0800867a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	f043 0307 	orr.w	r3, r3, #7
 800869c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	609a      	str	r2, [r3, #8]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr

080086ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b087      	sub	sp, #28
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	021a      	lsls	r2, r3, #8
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	431a      	orrs	r2, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	4313      	orrs	r3, r2
 80086da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	609a      	str	r2, [r3, #8]
}
 80086e2:	bf00      	nop
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d101      	bne.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008700:	2302      	movs	r3, #2
 8008702:	e046      	b.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800872a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a16      	ldr	r2, [pc, #88]	@ (800879c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00e      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008750:	d009      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a12      	ldr	r2, [pc, #72]	@ (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d004      	beq.n	8008766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a10      	ldr	r2, [pc, #64]	@ (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d10c      	bne.n	8008780 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800876c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	4313      	orrs	r3, r2
 8008776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr
 800879c:	40012c00 	.word	0x40012c00
 80087a0:	40000400 	.word	0x40000400
 80087a4:	40000800 	.word	0x40000800

080087a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr

080087ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bc80      	pop	{r7}
 80087ca:	4770      	bx	lr

080087cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e03f      	b.n	800885e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d106      	bne.n	80087f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7fb fe0e 	bl	8004414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2224      	movs	r2, #36	@ 0x24
 80087fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68da      	ldr	r2, [r3, #12]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800880e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f9a3 	bl	8008b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691a      	ldr	r2, [r3, #16]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	695a      	ldr	r2, [r3, #20]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2220      	movs	r2, #32
 8008850:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b08a      	sub	sp, #40	@ 0x28
 800886a:	af02      	add	r7, sp, #8
 800886c:	60f8      	str	r0, [r7, #12]
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	603b      	str	r3, [r7, #0]
 8008872:	4613      	mov	r3, r2
 8008874:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b20      	cmp	r3, #32
 8008884:	d17c      	bne.n	8008980 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <HAL_UART_Transmit+0x2c>
 800888c:	88fb      	ldrh	r3, [r7, #6]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e075      	b.n	8008982 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800889c:	2b01      	cmp	r3, #1
 800889e:	d101      	bne.n	80088a4 <HAL_UART_Transmit+0x3e>
 80088a0:	2302      	movs	r3, #2
 80088a2:	e06e      	b.n	8008982 <HAL_UART_Transmit+0x11c>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2221      	movs	r2, #33	@ 0x21
 80088b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80088ba:	f7fb ff07 	bl	80046cc <HAL_GetTick>
 80088be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	88fa      	ldrh	r2, [r7, #6]
 80088c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	88fa      	ldrh	r2, [r7, #6]
 80088ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d4:	d108      	bne.n	80088e8 <HAL_UART_Transmit+0x82>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	61bb      	str	r3, [r7, #24]
 80088e6:	e003      	b.n	80088f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 80088f8:	e02a      	b.n	8008950 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2200      	movs	r2, #0
 8008902:	2180      	movs	r1, #128	@ 0x80
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 f8df 	bl	8008ac8 <UART_WaitOnFlagUntilTimeout>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e036      	b.n	8008982 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10b      	bne.n	8008932 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008928:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	3302      	adds	r3, #2
 800892e:	61bb      	str	r3, [r7, #24]
 8008930:	e007      	b.n	8008942 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	781a      	ldrb	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	3301      	adds	r3, #1
 8008940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008946:	b29b      	uxth	r3, r3
 8008948:	3b01      	subs	r3, #1
 800894a:	b29a      	uxth	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008954:	b29b      	uxth	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1cf      	bne.n	80088fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2200      	movs	r2, #0
 8008962:	2140      	movs	r1, #64	@ 0x40
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 f8af 	bl	8008ac8 <UART_WaitOnFlagUntilTimeout>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e006      	b.n	8008982 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2220      	movs	r2, #32
 8008978:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	e000      	b.n	8008982 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008980:	2302      	movs	r3, #2
  }
}
 8008982:	4618      	mov	r0, r3
 8008984:	3720      	adds	r7, #32
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b08a      	sub	sp, #40	@ 0x28
 800898e:	af02      	add	r7, sp, #8
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	603b      	str	r3, [r7, #0]
 8008996:	4613      	mov	r3, r2
 8008998:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	f040 8089 	bne.w	8008abe <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <HAL_UART_Receive+0x2e>
 80089b2:	88fb      	ldrh	r3, [r7, #6]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e081      	b.n	8008ac0 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d101      	bne.n	80089ca <HAL_UART_Receive+0x40>
 80089c6:	2302      	movs	r3, #2
 80089c8:	e07a      	b.n	8008ac0 <HAL_UART_Receive+0x136>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2222      	movs	r2, #34	@ 0x22
 80089dc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80089e0:	f7fb fe74 	bl	80046cc <HAL_GetTick>
 80089e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	88fa      	ldrh	r2, [r7, #6]
 80089ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	88fa      	ldrh	r2, [r7, #6]
 80089f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089fa:	d108      	bne.n	8008a0e <HAL_UART_Receive+0x84>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d104      	bne.n	8008a0e <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	61bb      	str	r3, [r7, #24]
 8008a0c:	e003      	b.n	8008a16 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008a1e:	e043      	b.n	8008aa8 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2200      	movs	r2, #0
 8008a28:	2120      	movs	r1, #32
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 f84c 	bl	8008ac8 <UART_WaitOnFlagUntilTimeout>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e042      	b.n	8008ac0 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10c      	bne.n	8008a5a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	3302      	adds	r3, #2
 8008a56:	61bb      	str	r3, [r7, #24]
 8008a58:	e01f      	b.n	8008a9a <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a62:	d007      	beq.n	8008a74 <HAL_UART_Receive+0xea>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10a      	bne.n	8008a82 <HAL_UART_Receive+0xf8>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d106      	bne.n	8008a82 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	e008      	b.n	8008a94 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	3301      	adds	r3, #1
 8008a98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1b6      	bne.n	8008a20 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e000      	b.n	8008ac0 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008abe:	2302      	movs	r3, #2
  }
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3720      	adds	r7, #32
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ad8:	e02c      	b.n	8008b34 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae0:	d028      	beq.n	8008b34 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d007      	beq.n	8008af8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ae8:	f7fb fdf0 	bl	80046cc <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d21d      	bcs.n	8008b34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8008b06:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	695a      	ldr	r2, [r3, #20]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0201 	bic.w	r2, r2, #1
 8008b16:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e00f      	b.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	bf0c      	ite	eq
 8008b44:	2301      	moveq	r3, #1
 8008b46:	2300      	movne	r3, #0
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	79fb      	ldrb	r3, [r7, #7]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d0c3      	beq.n	8008ada <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	689a      	ldr	r2, [r3, #8]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	431a      	orrs	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008b96:	f023 030c 	bic.w	r3, r3, #12
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	6812      	ldr	r2, [r2, #0]
 8008b9e:	68b9      	ldr	r1, [r7, #8]
 8008ba0:	430b      	orrs	r3, r1
 8008ba2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	699a      	ldr	r2, [r3, #24]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8008c70 <UART_SetConfig+0x114>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d103      	bne.n	8008bcc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008bc4:	f7fe fe54 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 8008bc8:	60f8      	str	r0, [r7, #12]
 8008bca:	e002      	b.n	8008bd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008bcc:	f7fe fe3c 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 8008bd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009a      	lsls	r2, r3, #2
 8008bdc:	441a      	add	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be8:	4a22      	ldr	r2, [pc, #136]	@ (8008c74 <UART_SetConfig+0x118>)
 8008bea:	fba2 2303 	umull	r2, r3, r2, r3
 8008bee:	095b      	lsrs	r3, r3, #5
 8008bf0:	0119      	lsls	r1, r3, #4
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009a      	lsls	r2, r3, #2
 8008bfc:	441a      	add	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c08:	4b1a      	ldr	r3, [pc, #104]	@ (8008c74 <UART_SetConfig+0x118>)
 8008c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8008c0e:	095b      	lsrs	r3, r3, #5
 8008c10:	2064      	movs	r0, #100	@ 0x64
 8008c12:	fb00 f303 	mul.w	r3, r0, r3
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	011b      	lsls	r3, r3, #4
 8008c1a:	3332      	adds	r3, #50	@ 0x32
 8008c1c:	4a15      	ldr	r2, [pc, #84]	@ (8008c74 <UART_SetConfig+0x118>)
 8008c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c22:	095b      	lsrs	r3, r3, #5
 8008c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c28:	4419      	add	r1, r3
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009a      	lsls	r2, r3, #2
 8008c34:	441a      	add	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c40:	4b0c      	ldr	r3, [pc, #48]	@ (8008c74 <UART_SetConfig+0x118>)
 8008c42:	fba3 0302 	umull	r0, r3, r3, r2
 8008c46:	095b      	lsrs	r3, r3, #5
 8008c48:	2064      	movs	r0, #100	@ 0x64
 8008c4a:	fb00 f303 	mul.w	r3, r0, r3
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	011b      	lsls	r3, r3, #4
 8008c52:	3332      	adds	r3, #50	@ 0x32
 8008c54:	4a07      	ldr	r2, [pc, #28]	@ (8008c74 <UART_SetConfig+0x118>)
 8008c56:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	f003 020f 	and.w	r2, r3, #15
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	440a      	add	r2, r1
 8008c66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008c68:	bf00      	nop
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	40013800 	.word	0x40013800
 8008c74:	51eb851f 	.word	0x51eb851f

08008c78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008c78:	b084      	sub	sp, #16
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	f107 0014 	add.w	r0, r7, #20
 8008c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bc80      	pop	{r7}
 8008c94:	b004      	add	sp, #16
 8008c96:	4770      	bx	lr

08008c98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ca8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008cac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bc80      	pop	{r7}
 8008cc2:	4770      	bx	lr

08008cc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ccc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008cd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	43db      	mvns	r3, r3
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bc80      	pop	{r7}
 8008cf6:	4770      	bx	lr

08008cf8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr

08008d10 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008d10:	b084      	sub	sp, #16
 8008d12:	b480      	push	{r7}
 8008d14:	b083      	sub	sp, #12
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	f107 0014 	add.w	r0, r7, #20
 8008d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bc80      	pop	{r7}
 8008d4c:	b004      	add	sp, #16
 8008d4e:	4770      	bx	lr

08008d50 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b09b      	sub	sp, #108	@ 0x6c
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d76:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	78db      	ldrb	r3, [r3, #3]
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d81f      	bhi.n	8008dc2 <USB_ActivateEndpoint+0x72>
 8008d82:	a201      	add	r2, pc, #4	@ (adr r2, 8008d88 <USB_ActivateEndpoint+0x38>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008d99 	.word	0x08008d99
 8008d8c:	08008db5 	.word	0x08008db5
 8008d90:	08008dcb 	.word	0x08008dcb
 8008d94:	08008da7 	.word	0x08008da7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008d98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008d9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008da0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008da4:	e012      	b.n	8008dcc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008da6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008daa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008dae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008db2:	e00b      	b.n	8008dcc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008db4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008db8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008dbc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008dc0:	e004      	b.n	8008dcc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 8008dc8:	e000      	b.n	8008dcc <USB_ActivateEndpoint+0x7c>
      break;
 8008dca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	441a      	add	r2, r3
 8008dd6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008dda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	7812      	ldrb	r2, [r2, #0]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	441a      	add	r2, r3
 8008e1a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	7b1b      	ldrb	r3, [r3, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f040 8149 	bne.w	80090ce <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	785b      	ldrb	r3, [r3, #1]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8084 	beq.w	8008f4e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	617b      	str	r3, [r7, #20]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	4413      	add	r3, r2
 8008e58:	617b      	str	r3, [r7, #20]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	011a      	lsls	r2, r3, #4
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88db      	ldrh	r3, [r3, #6]
 8008e6e:	085b      	lsrs	r3, r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	881b      	ldrh	r3, [r3, #0]
 8008e86:	81fb      	strh	r3, [r7, #14]
 8008e88:	89fb      	ldrh	r3, [r7, #14]
 8008e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d01b      	beq.n	8008eca <USB_ActivateEndpoint+0x17a>
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea8:	81bb      	strh	r3, [r7, #12]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	441a      	add	r2, r3
 8008eb4:	89bb      	ldrh	r3, [r7, #12]
 8008eb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ec2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	78db      	ldrb	r3, [r3, #3]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d020      	beq.n	8008f14 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ee8:	813b      	strh	r3, [r7, #8]
 8008eea:	893b      	ldrh	r3, [r7, #8]
 8008eec:	f083 0320 	eor.w	r3, r3, #32
 8008ef0:	813b      	strh	r3, [r7, #8]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	441a      	add	r2, r3
 8008efc:	893b      	ldrh	r3, [r7, #8]
 8008efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	8013      	strh	r3, [r2, #0]
 8008f12:	e27f      	b.n	8009414 <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	881b      	ldrh	r3, [r3, #0]
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f2a:	817b      	strh	r3, [r7, #10]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	441a      	add	r2, r3
 8008f36:	897b      	ldrh	r3, [r7, #10]
 8008f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	8013      	strh	r3, [r2, #0]
 8008f4c:	e262      	b.n	8009414 <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5e:	4413      	add	r3, r2
 8008f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	011a      	lsls	r2, r3, #4
 8008f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	88db      	ldrh	r3, [r3, #6]
 8008f76:	085b      	lsrs	r3, r3, #1
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	005b      	lsls	r3, r3, #1
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f80:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	461a      	mov	r2, r3
 8008f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f92:	4413      	add	r3, r2
 8008f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	011a      	lsls	r2, r3, #4
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008fa4:	623b      	str	r3, [r7, #32]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d112      	bne.n	8008fd4 <USB_ActivateEndpoint+0x284>
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	801a      	strh	r2, [r3, #0]
 8008fd2:	e02f      	b.n	8009034 <USB_ActivateEndpoint+0x2e4>
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fda:	d813      	bhi.n	8009004 <USB_ActivateEndpoint+0x2b4>
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	085b      	lsrs	r3, r3, #1
 8008fe2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <USB_ActivateEndpoint+0x2a6>
 8008ff0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	029b      	lsls	r3, r3, #10
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	801a      	strh	r2, [r3, #0]
 8009002:	e017      	b.n	8009034 <USB_ActivateEndpoint+0x2e4>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	095b      	lsrs	r3, r3, #5
 800900a:	663b      	str	r3, [r7, #96]	@ 0x60
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	f003 031f 	and.w	r3, r3, #31
 8009014:	2b00      	cmp	r3, #0
 8009016:	d102      	bne.n	800901e <USB_ActivateEndpoint+0x2ce>
 8009018:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800901a:	3b01      	subs	r3, #1
 800901c:	663b      	str	r3, [r7, #96]	@ 0x60
 800901e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009020:	b29b      	uxth	r3, r3
 8009022:	029b      	lsls	r3, r3, #10
 8009024:	b29b      	uxth	r3, r3
 8009026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800902a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800902e:	b29a      	uxth	r2, r3
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	83fb      	strh	r3, [r7, #30]
 8009042:	8bfb      	ldrh	r3, [r7, #30]
 8009044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d01b      	beq.n	8009084 <USB_ActivateEndpoint+0x334>
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	b29b      	uxth	r3, r3
 800905a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800905e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009062:	83bb      	strh	r3, [r7, #28]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	441a      	add	r2, r3
 800906e:	8bbb      	ldrh	r3, [r7, #28]
 8009070:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009074:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009078:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800907c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009080:	b29b      	uxth	r3, r3
 8009082:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	b29b      	uxth	r3, r3
 8009092:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800909a:	837b      	strh	r3, [r7, #26]
 800909c:	8b7b      	ldrh	r3, [r7, #26]
 800909e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80090a2:	837b      	strh	r3, [r7, #26]
 80090a4:	8b7b      	ldrh	r3, [r7, #26]
 80090a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80090aa:	837b      	strh	r3, [r7, #26]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	441a      	add	r2, r3
 80090b6:	8b7b      	ldrh	r3, [r7, #26]
 80090b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	8013      	strh	r3, [r2, #0]
 80090cc:	e1a2      	b.n	8009414 <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090e4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	441a      	add	r2, r3
 80090f2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80090f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090fe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009106:	b29b      	uxth	r3, r3
 8009108:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009114:	b29b      	uxth	r3, r3
 8009116:	461a      	mov	r2, r3
 8009118:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800911a:	4413      	add	r3, r2
 800911c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	011a      	lsls	r2, r3, #4
 8009124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009126:	4413      	add	r3, r2
 8009128:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800912c:	657b      	str	r3, [r7, #84]	@ 0x54
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	891b      	ldrh	r3, [r3, #8]
 8009132:	085b      	lsrs	r3, r3, #1
 8009134:	b29b      	uxth	r3, r3
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	b29a      	uxth	r2, r3
 800913a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800913c:	801a      	strh	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	653b      	str	r3, [r7, #80]	@ 0x50
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009148:	b29b      	uxth	r3, r3
 800914a:	461a      	mov	r2, r3
 800914c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800914e:	4413      	add	r3, r2
 8009150:	653b      	str	r3, [r7, #80]	@ 0x50
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	011a      	lsls	r2, r3, #4
 8009158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800915a:	4413      	add	r3, r2
 800915c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8009160:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	895b      	ldrh	r3, [r3, #10]
 8009166:	085b      	lsrs	r3, r3, #1
 8009168:	b29b      	uxth	r3, r3
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	b29a      	uxth	r2, r3
 800916e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009170:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	785b      	ldrb	r3, [r3, #1]
 8009176:	2b00      	cmp	r3, #0
 8009178:	f040 8091 	bne.w	800929e <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800918a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800918c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d01b      	beq.n	80091cc <USB_ActivateEndpoint+0x47c>
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091aa:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	441a      	add	r2, r3
 80091b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80091b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80091da:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80091dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d01b      	beq.n	800921c <USB_ActivateEndpoint+0x4cc>
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	441a      	add	r2, r3
 8009206:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800920c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009214:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009218:	b29b      	uxth	r3, r3
 800921a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	b29b      	uxth	r3, r3
 800922a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800922e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009232:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009234:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009236:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800923a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800923c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800923e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009242:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	441a      	add	r2, r3
 800924e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800925c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009260:	b29b      	uxth	r3, r3
 8009262:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	b29b      	uxth	r3, r3
 8009272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800927a:	867b      	strh	r3, [r7, #50]	@ 0x32
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	441a      	add	r2, r3
 8009286:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009288:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800928c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009298:	b29b      	uxth	r3, r3
 800929a:	8013      	strh	r3, [r2, #0]
 800929c:	e0ba      	b.n	8009414 <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80092ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80092b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d01d      	beq.n	80092f6 <USB_ActivateEndpoint+0x5a6>
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092d0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	441a      	add	r2, r3
 80092de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80092e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009306:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800930a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	d01d      	beq.n	800934e <USB_ActivateEndpoint+0x5fe>
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	b29b      	uxth	r3, r3
 8009320:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009328:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	441a      	add	r2, r3
 8009336:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800933a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800933e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009346:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800934a:	b29b      	uxth	r3, r3
 800934c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	78db      	ldrb	r3, [r3, #3]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d024      	beq.n	80093a0 <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800936c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009370:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009374:	f083 0320 	eor.w	r3, r3, #32
 8009378:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	441a      	add	r2, r3
 8009386:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800938a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800938e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800939a:	b29b      	uxth	r3, r3
 800939c:	8013      	strh	r3, [r2, #0]
 800939e:	e01d      	b.n	80093dc <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	441a      	add	r2, r3
 80093c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80093c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d8:	b29b      	uxth	r3, r3
 80093da:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	441a      	add	r2, r3
 80093fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009400:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009404:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800940c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009410:	b29b      	uxth	r3, r3
 8009412:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009414:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009418:	4618      	mov	r0, r3
 800941a:	376c      	adds	r7, #108	@ 0x6c
 800941c:	46bd      	mov	sp, r7
 800941e:	bc80      	pop	{r7}
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop

08009424 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009424:	b480      	push	{r7}
 8009426:	b08d      	sub	sp, #52	@ 0x34
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	7b1b      	ldrb	r3, [r3, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f040 808e 	bne.w	8009554 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	785b      	ldrb	r3, [r3, #1]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d044      	beq.n	80094ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	81bb      	strh	r3, [r7, #12]
 800944e:	89bb      	ldrh	r3, [r7, #12]
 8009450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	d01b      	beq.n	8009490 <USB_DeactivateEndpoint+0x6c>
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	b29b      	uxth	r3, r3
 8009466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800946a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800946e:	817b      	strh	r3, [r7, #10]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	441a      	add	r2, r3
 800947a:	897b      	ldrh	r3, [r7, #10]
 800947c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009480:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009484:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009488:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800948c:	b29b      	uxth	r3, r3
 800948e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	b29b      	uxth	r3, r3
 800949e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094a6:	813b      	strh	r3, [r7, #8]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	441a      	add	r2, r3
 80094b2:	893b      	ldrh	r3, [r7, #8]
 80094b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	8013      	strh	r3, [r2, #0]
 80094c8:	e192      	b.n	80097f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	881b      	ldrh	r3, [r3, #0]
 80094d6:	827b      	strh	r3, [r7, #18]
 80094d8:	8a7b      	ldrh	r3, [r7, #18]
 80094da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d01b      	beq.n	800951a <USB_DeactivateEndpoint+0xf6>
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f8:	823b      	strh	r3, [r7, #16]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	441a      	add	r2, r3
 8009504:	8a3b      	ldrh	r3, [r7, #16]
 8009506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800950a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800950e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009516:	b29b      	uxth	r3, r3
 8009518:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	b29b      	uxth	r3, r3
 8009528:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800952c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009530:	81fb      	strh	r3, [r7, #14]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	441a      	add	r2, r3
 800953c:	89fb      	ldrh	r3, [r7, #14]
 800953e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800954a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800954e:	b29b      	uxth	r3, r3
 8009550:	8013      	strh	r3, [r2, #0]
 8009552:	e14d      	b.n	80097f0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	785b      	ldrb	r3, [r3, #1]
 8009558:	2b00      	cmp	r3, #0
 800955a:	f040 80a5 	bne.w	80096a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	881b      	ldrh	r3, [r3, #0]
 800956a:	843b      	strh	r3, [r7, #32]
 800956c:	8c3b      	ldrh	r3, [r7, #32]
 800956e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d01b      	beq.n	80095ae <USB_DeactivateEndpoint+0x18a>
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	b29b      	uxth	r3, r3
 8009584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800958c:	83fb      	strh	r3, [r7, #30]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	441a      	add	r2, r3
 8009598:	8bfb      	ldrh	r3, [r7, #30]
 800959a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800959e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	83bb      	strh	r3, [r7, #28]
 80095bc:	8bbb      	ldrh	r3, [r7, #28]
 80095be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d01b      	beq.n	80095fe <USB_DeactivateEndpoint+0x1da>
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095dc:	837b      	strh	r3, [r7, #26]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	441a      	add	r2, r3
 80095e8:	8b7b      	ldrh	r3, [r7, #26]
 80095ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	b29b      	uxth	r3, r3
 800960c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009614:	833b      	strh	r3, [r7, #24]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	441a      	add	r2, r3
 8009620:	8b3b      	ldrh	r3, [r7, #24]
 8009622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800962a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800962e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009632:	b29b      	uxth	r3, r3
 8009634:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	b29b      	uxth	r3, r3
 8009644:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800964c:	82fb      	strh	r3, [r7, #22]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	441a      	add	r2, r3
 8009658:	8afb      	ldrh	r3, [r7, #22]
 800965a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800965e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800966a:	b29b      	uxth	r3, r3
 800966c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	b29b      	uxth	r3, r3
 800967c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009684:	82bb      	strh	r3, [r7, #20]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	441a      	add	r2, r3
 8009690:	8abb      	ldrh	r3, [r7, #20]
 8009692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800969a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800969e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	8013      	strh	r3, [r2, #0]
 80096a6:	e0a3      	b.n	80097f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80096b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80096b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01b      	beq.n	80096f8 <USB_DeactivateEndpoint+0x2d4>
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	441a      	add	r2, r3
 80096e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80096e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80096f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009706:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800970c:	2b00      	cmp	r3, #0
 800970e:	d01b      	beq.n	8009748 <USB_DeactivateEndpoint+0x324>
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	b29b      	uxth	r3, r3
 800971e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009726:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	441a      	add	r2, r3
 8009732:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800973c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009740:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009744:	b29b      	uxth	r3, r3
 8009746:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	b29b      	uxth	r3, r3
 8009756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800975a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800975e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	441a      	add	r2, r3
 800976a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800976c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009774:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800977c:	b29b      	uxth	r3, r3
 800977e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009796:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	441a      	add	r2, r3
 80097a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	441a      	add	r2, r3
 80097da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80097dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3734      	adds	r7, #52	@ 0x34
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bc80      	pop	{r7}
 80097fa:	4770      	bx	lr

080097fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b0c4      	sub	sp, #272	@ 0x110
 8009800:	af00      	add	r7, sp, #0
 8009802:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009806:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800980a:	6018      	str	r0, [r3, #0]
 800980c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009810:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009814:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009816:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800981a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	785b      	ldrb	r3, [r3, #1]
 8009822:	2b01      	cmp	r3, #1
 8009824:	f040 86ec 	bne.w	800a600 <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009828:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800982c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	699a      	ldr	r2, [r3, #24]
 8009834:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009838:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	429a      	cmp	r2, r3
 8009842:	d908      	bls.n	8009856 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009848:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009854:	e007      	b.n	8009866 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800985a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009866:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800986a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	7b1b      	ldrb	r3, [r3, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d142      	bne.n	80098fc <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009876:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800987a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6959      	ldr	r1, [r3, #20]
 8009882:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009886:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	88da      	ldrh	r2, [r3, #6]
 800988e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009892:	b29b      	uxth	r3, r3
 8009894:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009898:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800989c:	6800      	ldr	r0, [r0, #0]
 800989e:	f001 fc92 	bl	800b1c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80098a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	617b      	str	r3, [r7, #20]
 80098ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098bc:	b29b      	uxth	r3, r3
 80098be:	461a      	mov	r2, r3
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	4413      	add	r3, r2
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	011a      	lsls	r2, r3, #4
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	4413      	add	r3, r2
 80098d8:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 80098dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098e0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	f000 be34 	b.w	800a564 <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80098fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009900:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	78db      	ldrb	r3, [r3, #3]
 8009908:	2b02      	cmp	r3, #2
 800990a:	f040 843b 	bne.w	800a184 <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800990e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009912:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6a1a      	ldr	r2, [r3, #32]
 800991a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800991e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	429a      	cmp	r2, r3
 8009928:	f240 83b8 	bls.w	800a09c <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800992c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009930:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800993a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	b29b      	uxth	r3, r3
 800994a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800994e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009952:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8009956:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800995a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009964:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	441a      	add	r2, r3
 8009970:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8009974:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009978:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800997c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009984:	b29b      	uxth	r3, r3
 8009986:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009988:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800998c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6a1a      	ldr	r2, [r3, #32]
 8009994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009998:	1ad2      	subs	r2, r2, r3
 800999a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800999e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80099a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 81b4 	beq.w	8009d36 <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80099ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	785b      	ldrb	r3, [r3, #1]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d16d      	bne.n	8009ac6 <USB_EPStartXfer+0x2ca>
 80099ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	461a      	mov	r2, r3
 8009a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0a:	4413      	add	r3, r2
 8009a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	011a      	lsls	r2, r3, #4
 8009a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a1e:	4413      	add	r3, r2
 8009a20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d112      	bne.n	8009a54 <USB_EPStartXfer+0x258>
 8009a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3c:	801a      	strh	r2, [r3, #0]
 8009a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a40:	881b      	ldrh	r3, [r3, #0]
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a50:	801a      	strh	r2, [r3, #0]
 8009a52:	e05d      	b.n	8009b10 <USB_EPStartXfer+0x314>
 8009a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a58:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a5a:	d817      	bhi.n	8009a8c <USB_EPStartXfer+0x290>
 8009a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a60:	085b      	lsrs	r3, r3, #1
 8009a62:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d004      	beq.n	8009a7c <USB_EPStartXfer+0x280>
 8009a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a76:	3301      	adds	r3, #1
 8009a78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	029b      	lsls	r3, r3, #10
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a88:	801a      	strh	r2, [r3, #0]
 8009a8a:	e041      	b.n	8009b10 <USB_EPStartXfer+0x314>
 8009a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a90:	095b      	lsrs	r3, r3, #5
 8009a92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a9a:	f003 031f 	and.w	r3, r3, #31
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d104      	bne.n	8009aac <USB_EPStartXfer+0x2b0>
 8009aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	029b      	lsls	r3, r3, #10
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	e024      	b.n	8009b10 <USB_EPStartXfer+0x314>
 8009ac6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009aca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	785b      	ldrb	r3, [r3, #1]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d11c      	bne.n	8009b10 <USB_EPStartXfer+0x314>
 8009ad6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ada:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aea:	4413      	add	r3, r2
 8009aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009af2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	011a      	lsls	r2, r3, #4
 8009afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009afe:	4413      	add	r3, r2
 8009b00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	895b      	ldrh	r3, [r3, #10]
 8009b1c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6959      	ldr	r1, [r3, #20]
 8009b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009b36:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009b3a:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009b3e:	6800      	ldr	r0, [r0, #0]
 8009b40:	f001 fb41 	bl	800b1c6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009b44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	695a      	ldr	r2, [r3, #20]
 8009b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b54:	441a      	add	r2, r3
 8009b56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009b62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b66:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6a1a      	ldr	r2, [r3, #32]
 8009b6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b72:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d90f      	bls.n	8009b9e <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 8009b7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6a1a      	ldr	r2, [r3, #32]
 8009b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b8e:	1ad2      	subs	r2, r2, r3
 8009b90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	621a      	str	r2, [r3, #32]
 8009b9c:	e00e      	b.n	8009bbc <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009b9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ba2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009bae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bb2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009bbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bc0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	785b      	ldrb	r3, [r3, #1]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d16d      	bne.n	8009ca8 <USB_EPStartXfer+0x4ac>
 8009bcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bd0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	61fb      	str	r3, [r7, #28]
 8009bd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bdc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	4413      	add	r3, r2
 8009bee:	61fb      	str	r3, [r7, #28]
 8009bf0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bf4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	011a      	lsls	r2, r3, #4
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	4413      	add	r3, r2
 8009c02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c06:	61bb      	str	r3, [r7, #24]
 8009c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d112      	bne.n	8009c36 <USB_EPStartXfer+0x43a>
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	801a      	strh	r2, [r3, #0]
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	801a      	strh	r2, [r3, #0]
 8009c34:	e063      	b.n	8009cfe <USB_EPStartXfer+0x502>
 8009c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c3c:	d817      	bhi.n	8009c6e <USB_EPStartXfer+0x472>
 8009c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d004      	beq.n	8009c5e <USB_EPStartXfer+0x462>
 8009c54:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c58:	3301      	adds	r3, #1
 8009c5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	029b      	lsls	r3, r3, #10
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	801a      	strh	r2, [r3, #0]
 8009c6c:	e047      	b.n	8009cfe <USB_EPStartXfer+0x502>
 8009c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c72:	095b      	lsrs	r3, r3, #5
 8009c74:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c7c:	f003 031f 	and.w	r3, r3, #31
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d104      	bne.n	8009c8e <USB_EPStartXfer+0x492>
 8009c84:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009c8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	029b      	lsls	r3, r3, #10
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	801a      	strh	r2, [r3, #0]
 8009ca6:	e02a      	b.n	8009cfe <USB_EPStartXfer+0x502>
 8009ca8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	785b      	ldrb	r3, [r3, #1]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d122      	bne.n	8009cfe <USB_EPStartXfer+0x502>
 8009cb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cc8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd8:	4413      	add	r3, r2
 8009cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cdc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ce0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	011a      	lsls	r2, r3, #4
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	4413      	add	r3, r2
 8009cee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009cf2:	623b      	str	r3, [r7, #32]
 8009cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009cfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	891b      	ldrh	r3, [r3, #8]
 8009d0a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6959      	ldr	r1, [r3, #20]
 8009d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009d24:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009d28:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009d2c:	6800      	ldr	r0, [r0, #0]
 8009d2e:	f001 fa4a 	bl	800b1c6 <USB_WritePMA>
 8009d32:	f000 bc17 	b.w	800a564 <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	785b      	ldrb	r3, [r3, #1]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d16d      	bne.n	8009e22 <USB_EPStartXfer+0x626>
 8009d46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	461a      	mov	r2, r3
 8009d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d66:	4413      	add	r3, r2
 8009d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d6e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	011a      	lsls	r2, r3, #4
 8009d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d112      	bne.n	8009db0 <USB_EPStartXfer+0x5b4>
 8009d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d98:	801a      	strh	r2, [r3, #0]
 8009d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d9c:	881b      	ldrh	r3, [r3, #0]
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dac:	801a      	strh	r2, [r3, #0]
 8009dae:	e063      	b.n	8009e78 <USB_EPStartXfer+0x67c>
 8009db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009db4:	2b3e      	cmp	r3, #62	@ 0x3e
 8009db6:	d817      	bhi.n	8009de8 <USB_EPStartXfer+0x5ec>
 8009db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dbc:	085b      	lsrs	r3, r3, #1
 8009dbe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d004      	beq.n	8009dd8 <USB_EPStartXfer+0x5dc>
 8009dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	029b      	lsls	r3, r3, #10
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009de4:	801a      	strh	r2, [r3, #0]
 8009de6:	e047      	b.n	8009e78 <USB_EPStartXfer+0x67c>
 8009de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dec:	095b      	lsrs	r3, r3, #5
 8009dee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009df6:	f003 031f 	and.w	r3, r3, #31
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d104      	bne.n	8009e08 <USB_EPStartXfer+0x60c>
 8009dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e02:	3b01      	subs	r3, #1
 8009e04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	029b      	lsls	r3, r3, #10
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e1e:	801a      	strh	r2, [r3, #0]
 8009e20:	e02a      	b.n	8009e78 <USB_EPStartXfer+0x67c>
 8009e22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e26:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	785b      	ldrb	r3, [r3, #1]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d122      	bne.n	8009e78 <USB_EPStartXfer+0x67c>
 8009e32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	461a      	mov	r2, r3
 8009e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e52:	4413      	add	r3, r2
 8009e54:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	011a      	lsls	r2, r3, #4
 8009e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e66:	4413      	add	r3, r2
 8009e68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009e6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009e78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	891b      	ldrh	r3, [r3, #8]
 8009e84:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6959      	ldr	r1, [r3, #20]
 8009e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009e9e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009ea2:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009ea6:	6800      	ldr	r0, [r0, #0]
 8009ea8:	f001 f98d 	bl	800b1c6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009eac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eb0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	695a      	ldr	r2, [r3, #20]
 8009eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ebc:	441a      	add	r2, r3
 8009ebe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ec2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009eca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ece:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6a1a      	ldr	r2, [r3, #32]
 8009ed6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d90f      	bls.n	8009f06 <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 8009ee6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6a1a      	ldr	r2, [r3, #32]
 8009ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ef6:	1ad2      	subs	r2, r2, r3
 8009ef8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009efc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	621a      	str	r2, [r3, #32]
 8009f04:	e00e      	b.n	8009f24 <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8009f06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f0a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009f16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2200      	movs	r2, #0
 8009f22:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	785b      	ldrb	r3, [r3, #1]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d16d      	bne.n	800a01c <USB_EPStartXfer+0x820>
 8009f40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f60:	4413      	add	r3, r2
 8009f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	011a      	lsls	r2, r3, #4
 8009f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f74:	4413      	add	r3, r2
 8009f76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d112      	bne.n	8009faa <USB_EPStartXfer+0x7ae>
 8009f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f92:	801a      	strh	r2, [r3, #0]
 8009f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa6:	801a      	strh	r2, [r3, #0]
 8009fa8:	e05d      	b.n	800a066 <USB_EPStartXfer+0x86a>
 8009faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fae:	2b3e      	cmp	r3, #62	@ 0x3e
 8009fb0:	d817      	bhi.n	8009fe2 <USB_EPStartXfer+0x7e6>
 8009fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fb6:	085b      	lsrs	r3, r3, #1
 8009fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d004      	beq.n	8009fd2 <USB_EPStartXfer+0x7d6>
 8009fc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009fcc:	3301      	adds	r3, #1
 8009fce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	029b      	lsls	r3, r3, #10
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fde:	801a      	strh	r2, [r3, #0]
 8009fe0:	e041      	b.n	800a066 <USB_EPStartXfer+0x86a>
 8009fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fe6:	095b      	lsrs	r3, r3, #5
 8009fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ff0:	f003 031f 	and.w	r3, r3, #31
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d104      	bne.n	800a002 <USB_EPStartXfer+0x806>
 8009ff8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a006:	b29b      	uxth	r3, r3
 800a008:	029b      	lsls	r3, r3, #10
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a014:	b29a      	uxth	r2, r3
 800a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a018:	801a      	strh	r2, [r3, #0]
 800a01a:	e024      	b.n	800a066 <USB_EPStartXfer+0x86a>
 800a01c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a020:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d11c      	bne.n	800a066 <USB_EPStartXfer+0x86a>
 800a02c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a030:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	461a      	mov	r2, r3
 800a03e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a040:	4413      	add	r3, r2
 800a042:	647b      	str	r3, [r7, #68]	@ 0x44
 800a044:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a048:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	011a      	lsls	r2, r3, #4
 800a052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a054:	4413      	add	r3, r2
 800a056:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a05a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a05c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a060:	b29a      	uxth	r2, r3
 800a062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a064:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a066:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a06a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	895b      	ldrh	r3, [r3, #10]
 800a072:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a076:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a07a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6959      	ldr	r1, [r3, #20]
 800a082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a086:	b29b      	uxth	r3, r3
 800a088:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a08c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a090:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a094:	6800      	ldr	r0, [r0, #0]
 800a096:	f001 f896 	bl	800b1c6 <USB_WritePMA>
 800a09a:	e263      	b.n	800a564 <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a09c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a0ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	881b      	ldrh	r3, [r3, #0]
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a0ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0d2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a0d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	441a      	add	r2, r3
 800a0f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a0f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a104:	b29b      	uxth	r3, r3
 800a106:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a108:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a10c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	663b      	str	r3, [r7, #96]	@ 0x60
 800a114:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a118:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a122:	b29b      	uxth	r3, r3
 800a124:	461a      	mov	r2, r3
 800a126:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a128:	4413      	add	r3, r2
 800a12a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a12c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a130:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	011a      	lsls	r2, r3, #4
 800a13a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a13c:	4413      	add	r3, r2
 800a13e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a142:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a148:	b29a      	uxth	r2, r3
 800a14a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a14c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a14e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a152:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	891b      	ldrh	r3, [r3, #8]
 800a15a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a15e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a162:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6959      	ldr	r1, [r3, #20]
 800a16a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a16e:	b29b      	uxth	r3, r3
 800a170:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a174:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a178:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a17c:	6800      	ldr	r0, [r0, #0]
 800a17e:	f001 f822 	bl	800b1c6 <USB_WritePMA>
 800a182:	e1ef      	b.n	800a564 <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a184:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a188:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a192:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 80aa 	beq.w	800a300 <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a1ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a1b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	785b      	ldrb	r3, [r3, #1]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d16d      	bne.n	800a2a4 <USB_EPStartXfer+0xaa8>
 800a1c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1e8:	4413      	add	r3, r2
 800a1ea:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	011a      	lsls	r2, r3, #4
 800a1fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a202:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d112      	bne.n	800a232 <USB_EPStartXfer+0xa36>
 800a20c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	b29b      	uxth	r3, r3
 800a212:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a216:	b29a      	uxth	r2, r3
 800a218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a21a:	801a      	strh	r2, [r3, #0]
 800a21c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	b29b      	uxth	r3, r3
 800a222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a22e:	801a      	strh	r2, [r3, #0]
 800a230:	e05d      	b.n	800a2ee <USB_EPStartXfer+0xaf2>
 800a232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a236:	2b3e      	cmp	r3, #62	@ 0x3e
 800a238:	d817      	bhi.n	800a26a <USB_EPStartXfer+0xa6e>
 800a23a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a23e:	085b      	lsrs	r3, r3, #1
 800a240:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a248:	f003 0301 	and.w	r3, r3, #1
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d004      	beq.n	800a25a <USB_EPStartXfer+0xa5e>
 800a250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a254:	3301      	adds	r3, #1
 800a256:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a25a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a25e:	b29b      	uxth	r3, r3
 800a260:	029b      	lsls	r3, r3, #10
 800a262:	b29a      	uxth	r2, r3
 800a264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a266:	801a      	strh	r2, [r3, #0]
 800a268:	e041      	b.n	800a2ee <USB_EPStartXfer+0xaf2>
 800a26a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a26e:	095b      	lsrs	r3, r3, #5
 800a270:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a278:	f003 031f 	and.w	r3, r3, #31
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d104      	bne.n	800a28a <USB_EPStartXfer+0xa8e>
 800a280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a284:	3b01      	subs	r3, #1
 800a286:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a28a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a28e:	b29b      	uxth	r3, r3
 800a290:	029b      	lsls	r3, r3, #10
 800a292:	b29b      	uxth	r3, r3
 800a294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2a0:	801a      	strh	r2, [r3, #0]
 800a2a2:	e024      	b.n	800a2ee <USB_EPStartXfer+0xaf2>
 800a2a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	785b      	ldrb	r3, [r3, #1]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d11c      	bne.n	800a2ee <USB_EPStartXfer+0xaf2>
 800a2b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2c8:	4413      	add	r3, r2
 800a2ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2d0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	011a      	lsls	r2, r3, #4
 800a2da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2dc:	4413      	add	r3, r2
 800a2de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a2e2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a2e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a2ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	895b      	ldrh	r3, [r3, #10]
 800a2fa:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 800a2fe:	e0b2      	b.n	800a466 <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a300:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a304:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	785b      	ldrb	r3, [r3, #1]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d171      	bne.n	800a3f4 <USB_EPStartXfer+0xbf8>
 800a310:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a314:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a31e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a322:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	461a      	mov	r2, r3
 800a330:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a334:	4413      	add	r3, r2
 800a336:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a33a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a33e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	011a      	lsls	r2, r3, #4
 800a348:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a34c:	4413      	add	r3, r2
 800a34e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a352:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d112      	bne.n	800a382 <USB_EPStartXfer+0xb86>
 800a35c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a35e:	881b      	ldrh	r3, [r3, #0]
 800a360:	b29b      	uxth	r3, r3
 800a362:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a366:	b29a      	uxth	r2, r3
 800a368:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a36a:	801a      	strh	r2, [r3, #0]
 800a36c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a36e:	881b      	ldrh	r3, [r3, #0]
 800a370:	b29b      	uxth	r3, r3
 800a372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a37e:	801a      	strh	r2, [r3, #0]
 800a380:	e069      	b.n	800a456 <USB_EPStartXfer+0xc5a>
 800a382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a386:	2b3e      	cmp	r3, #62	@ 0x3e
 800a388:	d817      	bhi.n	800a3ba <USB_EPStartXfer+0xbbe>
 800a38a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a38e:	085b      	lsrs	r3, r3, #1
 800a390:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d004      	beq.n	800a3aa <USB_EPStartXfer+0xbae>
 800a3a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	029b      	lsls	r3, r3, #10
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a3b6:	801a      	strh	r2, [r3, #0]
 800a3b8:	e04d      	b.n	800a456 <USB_EPStartXfer+0xc5a>
 800a3ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3be:	095b      	lsrs	r3, r3, #5
 800a3c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3c8:	f003 031f 	and.w	r3, r3, #31
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d104      	bne.n	800a3da <USB_EPStartXfer+0xbde>
 800a3d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	029b      	lsls	r3, r3, #10
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a3f0:	801a      	strh	r2, [r3, #0]
 800a3f2:	e030      	b.n	800a456 <USB_EPStartXfer+0xc5a>
 800a3f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	785b      	ldrb	r3, [r3, #1]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d128      	bne.n	800a456 <USB_EPStartXfer+0xc5a>
 800a404:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a408:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a412:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a416:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a420:	b29b      	uxth	r3, r3
 800a422:	461a      	mov	r2, r3
 800a424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a428:	4413      	add	r3, r2
 800a42a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a42e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a432:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	011a      	lsls	r2, r3, #4
 800a43c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a440:	4413      	add	r3, r2
 800a442:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a446:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a44a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a44e:	b29a      	uxth	r2, r3
 800a450:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a454:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a456:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a45a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	891b      	ldrh	r3, [r3, #8]
 800a462:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a466:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a46a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6959      	ldr	r1, [r3, #20]
 800a472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a476:	b29b      	uxth	r3, r3
 800a478:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a47c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a480:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a484:	6800      	ldr	r0, [r0, #0]
 800a486:	f000 fe9e 	bl	800b1c6 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a48a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a48e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	785b      	ldrb	r3, [r3, #1]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d12e      	bne.n	800a4f8 <USB_EPStartXfer+0xcfc>
 800a49a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a49e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4c0:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800a4c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	441a      	add	r2, r3
 800a4de:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800a4e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	8013      	strh	r3, [r2, #0]
 800a4f6:	e035      	b.n	800a564 <USB_EPStartXfer+0xd68>
 800a4f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	785b      	ldrb	r3, [r3, #1]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d12d      	bne.n	800a564 <USB_EPStartXfer+0xd68>
 800a508:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a50c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a516:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	b29b      	uxth	r3, r3
 800a526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a52a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a52e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800a532:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a536:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a540:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	441a      	add	r2, r3
 800a54c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800a550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a558:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a55c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a560:	b29b      	uxth	r3, r3
 800a562:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a564:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a568:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a572:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	881b      	ldrh	r3, [r3, #0]
 800a580:	b29b      	uxth	r3, r3
 800a582:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a586:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a58a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a58e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a592:	8013      	strh	r3, [r2, #0]
 800a594:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a598:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a59c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a5a0:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a5a4:	8812      	ldrh	r2, [r2, #0]
 800a5a6:	f082 0210 	eor.w	r2, r2, #16
 800a5aa:	801a      	strh	r2, [r3, #0]
 800a5ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5b0:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a5b4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a5b8:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a5bc:	8812      	ldrh	r2, [r2, #0]
 800a5be:	f082 0220 	eor.w	r2, r2, #32
 800a5c2:	801a      	strh	r2, [r3, #0]
 800a5c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	441a      	add	r2, r3
 800a5de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5e2:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a5e6:	881b      	ldrh	r3, [r3, #0]
 800a5e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	8013      	strh	r3, [r2, #0]
 800a5fc:	f000 bc9f 	b.w	800af3e <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a600:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a604:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	7b1b      	ldrb	r3, [r3, #12]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f040 80ae 	bne.w	800a76e <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a612:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a616:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699a      	ldr	r2, [r3, #24]
 800a61e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a622:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d917      	bls.n	800a65e <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 800a62e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a632:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 800a63e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a642:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	699a      	ldr	r2, [r3, #24]
 800a64a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a64e:	1ad2      	subs	r2, r2, r3
 800a650:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a654:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	619a      	str	r2, [r3, #24]
 800a65c:	e00e      	b.n	800a67c <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 800a65e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a662:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 800a66e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a672:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2200      	movs	r2, #0
 800a67a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a67c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a680:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a68a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a68e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a698:	b29b      	uxth	r3, r3
 800a69a:	461a      	mov	r2, r3
 800a69c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	011a      	lsls	r2, r3, #4
 800a6b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a6be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a6c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d116      	bne.n	800a6f8 <USB_EPStartXfer+0xefc>
 800a6ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6ce:	881b      	ldrh	r3, [r3, #0]
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6dc:	801a      	strh	r2, [r3, #0]
 800a6de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6f4:	801a      	strh	r2, [r3, #0]
 800a6f6:	e3e8      	b.n	800aeca <USB_EPStartXfer+0x16ce>
 800a6f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6fe:	d818      	bhi.n	800a732 <USB_EPStartXfer+0xf36>
 800a700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a704:	085b      	lsrs	r3, r3, #1
 800a706:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a70a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	d004      	beq.n	800a720 <USB_EPStartXfer+0xf24>
 800a716:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a71a:	3301      	adds	r3, #1
 800a71c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a720:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a724:	b29b      	uxth	r3, r3
 800a726:	029b      	lsls	r3, r3, #10
 800a728:	b29a      	uxth	r2, r3
 800a72a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a72e:	801a      	strh	r2, [r3, #0]
 800a730:	e3cb      	b.n	800aeca <USB_EPStartXfer+0x16ce>
 800a732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a736:	095b      	lsrs	r3, r3, #5
 800a738:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a73c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a740:	f003 031f 	and.w	r3, r3, #31
 800a744:	2b00      	cmp	r3, #0
 800a746:	d104      	bne.n	800a752 <USB_EPStartXfer+0xf56>
 800a748:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a74c:	3b01      	subs	r3, #1
 800a74e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a752:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a756:	b29b      	uxth	r3, r3
 800a758:	029b      	lsls	r3, r3, #10
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a764:	b29a      	uxth	r2, r3
 800a766:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a76a:	801a      	strh	r2, [r3, #0]
 800a76c:	e3ad      	b.n	800aeca <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a76e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a772:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	78db      	ldrb	r3, [r3, #3]
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	f040 8200 	bne.w	800ab80 <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a780:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a784:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	785b      	ldrb	r3, [r3, #1]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f040 8091 	bne.w	800a8b4 <USB_EPStartXfer+0x10b8>
 800a792:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a796:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	011a      	lsls	r2, r3, #4
 800a7ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a7d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a7d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d116      	bne.n	800a816 <USB_EPStartXfer+0x101a>
 800a7e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7ec:	881b      	ldrh	r3, [r3, #0]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7fa:	801a      	strh	r2, [r3, #0]
 800a7fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a800:	881b      	ldrh	r3, [r3, #0]
 800a802:	b29b      	uxth	r3, r3
 800a804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a812:	801a      	strh	r2, [r3, #0]
 800a814:	e083      	b.n	800a91e <USB_EPStartXfer+0x1122>
 800a816:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a81a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	2b3e      	cmp	r3, #62	@ 0x3e
 800a824:	d820      	bhi.n	800a868 <USB_EPStartXfer+0x106c>
 800a826:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a82a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	085b      	lsrs	r3, r3, #1
 800a834:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a838:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a83c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	f003 0301 	and.w	r3, r3, #1
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d004      	beq.n	800a856 <USB_EPStartXfer+0x105a>
 800a84c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a850:	3301      	adds	r3, #1
 800a852:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a856:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	029b      	lsls	r3, r3, #10
 800a85e:	b29a      	uxth	r2, r3
 800a860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a864:	801a      	strh	r2, [r3, #0]
 800a866:	e05a      	b.n	800a91e <USB_EPStartXfer+0x1122>
 800a868:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a86c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	095b      	lsrs	r3, r3, #5
 800a876:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a87a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a87e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	f003 031f 	and.w	r3, r3, #31
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d104      	bne.n	800a898 <USB_EPStartXfer+0x109c>
 800a88e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a892:	3b01      	subs	r3, #1
 800a894:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a898:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	029b      	lsls	r3, r3, #10
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8b0:	801a      	strh	r2, [r3, #0]
 800a8b2:	e034      	b.n	800a91e <USB_EPStartXfer+0x1122>
 800a8b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	785b      	ldrb	r3, [r3, #1]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d12c      	bne.n	800a91e <USB_EPStartXfer+0x1122>
 800a8c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a8d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a8ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	011a      	lsls	r2, r3, #4
 800a8fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a900:	4413      	add	r3, r2
 800a902:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a906:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a90a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a90e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	b29a      	uxth	r2, r3
 800a918:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a91c:	801a      	strh	r2, [r3, #0]
 800a91e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a922:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a92c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a930:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	785b      	ldrb	r3, [r3, #1]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f040 8091 	bne.w	800aa60 <USB_EPStartXfer+0x1264>
 800a93e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a942:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a94c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a950:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	461a      	mov	r2, r3
 800a95e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a962:	4413      	add	r3, r2
 800a964:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a968:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a96c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	011a      	lsls	r2, r3, #4
 800a976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a97a:	4413      	add	r3, r2
 800a97c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a988:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d116      	bne.n	800a9c2 <USB_EPStartXfer+0x11c6>
 800a994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9a6:	801a      	strh	r2, [r3, #0]
 800a9a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9ac:	881b      	ldrh	r3, [r3, #0]
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9be:	801a      	strh	r2, [r3, #0]
 800a9c0:	e07c      	b.n	800aabc <USB_EPStartXfer+0x12c0>
 800a9c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800a9d0:	d820      	bhi.n	800aa14 <USB_EPStartXfer+0x1218>
 800a9d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9d6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	085b      	lsrs	r3, r3, #1
 800a9e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a9e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d004      	beq.n	800aa02 <USB_EPStartXfer+0x1206>
 800a9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	029b      	lsls	r3, r3, #10
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa10:	801a      	strh	r2, [r3, #0]
 800aa12:	e053      	b.n	800aabc <USB_EPStartXfer+0x12c0>
 800aa14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	095b      	lsrs	r3, r3, #5
 800aa22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	f003 031f 	and.w	r3, r3, #31
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d104      	bne.n	800aa44 <USB_EPStartXfer+0x1248>
 800aa3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	029b      	lsls	r3, r3, #10
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa5c:	801a      	strh	r2, [r3, #0]
 800aa5e:	e02d      	b.n	800aabc <USB_EPStartXfer+0x12c0>
 800aa60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa64:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	785b      	ldrb	r3, [r3, #1]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d125      	bne.n	800aabc <USB_EPStartXfer+0x12c0>
 800aa70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	461a      	mov	r2, r3
 800aa82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa86:	4413      	add	r3, r2
 800aa88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aa8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	011a      	lsls	r2, r3, #4
 800aa9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aaa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aaa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aaac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aaba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800aabc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aac0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	69db      	ldr	r3, [r3, #28]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 81fe 	beq.w	800aeca <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aace:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aad2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aadc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aaee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800aaf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d005      	beq.n	800ab06 <USB_EPStartXfer+0x130a>
 800aafa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800aafe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10d      	bne.n	800ab22 <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab06:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ab0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f040 81db 	bne.w	800aeca <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab14:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ab18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f040 81d4 	bne.w	800aeca <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800ab22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab48:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800ab4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	441a      	add	r2, r3
 800ab66:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800ab6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	8013      	strh	r3, [r2, #0]
 800ab7e:	e1a4      	b.n	800aeca <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ab80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	78db      	ldrb	r3, [r3, #3]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	f040 819a 	bne.w	800aec6 <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ab92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab96:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	699a      	ldr	r2, [r3, #24]
 800ab9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aba2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d917      	bls.n	800abde <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800abae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abb2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800abbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abce:	1ad2      	subs	r2, r2, r3
 800abd0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abd4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	619a      	str	r2, [r3, #24]
 800abdc:	e00e      	b.n	800abfc <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800abde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abe2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800abee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abf2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2200      	movs	r2, #0
 800abfa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800abfc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	785b      	ldrb	r3, [r3, #1]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d178      	bne.n	800acfe <USB_EPStartXfer+0x1502>
 800ac0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ac30:	4413      	add	r3, r2
 800ac32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	011a      	lsls	r2, r3, #4
 800ac44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ac48:	4413      	add	r3, r2
 800ac4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ac4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ac52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d116      	bne.n	800ac88 <USB_EPStartXfer+0x148c>
 800ac5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac6c:	801a      	strh	r2, [r3, #0]
 800ac6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac72:	881b      	ldrh	r3, [r3, #0]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ac84:	801a      	strh	r2, [r3, #0]
 800ac86:	e06b      	b.n	800ad60 <USB_EPStartXfer+0x1564>
 800ac88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac8c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac8e:	d818      	bhi.n	800acc2 <USB_EPStartXfer+0x14c6>
 800ac90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac94:	085b      	lsrs	r3, r3, #1
 800ac96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ac9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d004      	beq.n	800acb0 <USB_EPStartXfer+0x14b4>
 800aca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acaa:	3301      	adds	r3, #1
 800acac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800acb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	029b      	lsls	r3, r3, #10
 800acb8:	b29a      	uxth	r2, r3
 800acba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800acbe:	801a      	strh	r2, [r3, #0]
 800acc0:	e04e      	b.n	800ad60 <USB_EPStartXfer+0x1564>
 800acc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acc6:	095b      	lsrs	r3, r3, #5
 800acc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800accc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acd0:	f003 031f 	and.w	r3, r3, #31
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d104      	bne.n	800ace2 <USB_EPStartXfer+0x14e6>
 800acd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acdc:	3b01      	subs	r3, #1
 800acde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ace2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	029b      	lsls	r3, r3, #10
 800acea:	b29b      	uxth	r3, r3
 800acec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800acfa:	801a      	strh	r2, [r3, #0]
 800acfc:	e030      	b.n	800ad60 <USB_EPStartXfer+0x1564>
 800acfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	785b      	ldrb	r3, [r3, #1]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d128      	bne.n	800ad60 <USB_EPStartXfer+0x1564>
 800ad0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad32:	4413      	add	r3, r2
 800ad34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	011a      	lsls	r2, r3, #4
 800ad46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ad50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ad54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad5e:	801a      	strh	r2, [r3, #0]
 800ad60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad72:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d178      	bne.n	800ae70 <USB_EPStartXfer+0x1674>
 800ad7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ada2:	4413      	add	r3, r2
 800ada4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ada8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800adac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	011a      	lsls	r2, r3, #4
 800adb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800adba:	4413      	add	r3, r2
 800adbc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800adc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800adc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d116      	bne.n	800adfa <USB_EPStartXfer+0x15fe>
 800adcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	b29b      	uxth	r3, r3
 800add4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800add8:	b29a      	uxth	r2, r3
 800adda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800adde:	801a      	strh	r2, [r3, #0]
 800ade0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ade4:	881b      	ldrh	r3, [r3, #0]
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800adf6:	801a      	strh	r2, [r3, #0]
 800adf8:	e067      	b.n	800aeca <USB_EPStartXfer+0x16ce>
 800adfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adfe:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae00:	d818      	bhi.n	800ae34 <USB_EPStartXfer+0x1638>
 800ae02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae06:	085b      	lsrs	r3, r3, #1
 800ae08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <USB_EPStartXfer+0x1626>
 800ae18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	029b      	lsls	r3, r3, #10
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae30:	801a      	strh	r2, [r3, #0]
 800ae32:	e04a      	b.n	800aeca <USB_EPStartXfer+0x16ce>
 800ae34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae38:	095b      	lsrs	r3, r3, #5
 800ae3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae42:	f003 031f 	and.w	r3, r3, #31
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d104      	bne.n	800ae54 <USB_EPStartXfer+0x1658>
 800ae4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ae54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	029b      	lsls	r3, r3, #10
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae6c:	801a      	strh	r2, [r3, #0]
 800ae6e:	e02c      	b.n	800aeca <USB_EPStartXfer+0x16ce>
 800ae70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ae74:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	785b      	ldrb	r3, [r3, #1]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d124      	bne.n	800aeca <USB_EPStartXfer+0x16ce>
 800ae80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ae84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	461a      	mov	r2, r3
 800ae92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae96:	4413      	add	r3, r2
 800ae98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aea0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	011a      	lsls	r2, r3, #4
 800aeaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aeae:	4413      	add	r3, r2
 800aeb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aeb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aeb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aec2:	801a      	strh	r2, [r3, #0]
 800aec4:	e001      	b.n	800aeca <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e03a      	b.n	800af40 <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aeca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aece:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aed8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aeec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aef0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800aef4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800aef8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aefc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800af00:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af04:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800af08:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800af0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	441a      	add	r2, r3
 800af26:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af4a:	b480      	push	{r7}
 800af4c:	b085      	sub	sp, #20
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	785b      	ldrb	r3, [r3, #1]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d020      	beq.n	800af9e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	b29b      	uxth	r3, r3
 800af6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af72:	81bb      	strh	r3, [r7, #12]
 800af74:	89bb      	ldrh	r3, [r7, #12]
 800af76:	f083 0310 	eor.w	r3, r3, #16
 800af7a:	81bb      	strh	r3, [r7, #12]
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	441a      	add	r2, r3
 800af86:	89bb      	ldrh	r3, [r7, #12]
 800af88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af98:	b29b      	uxth	r3, r3
 800af9a:	8013      	strh	r3, [r2, #0]
 800af9c:	e01f      	b.n	800afde <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	b29b      	uxth	r3, r3
 800afac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afb4:	81fb      	strh	r3, [r7, #14]
 800afb6:	89fb      	ldrh	r3, [r7, #14]
 800afb8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800afbc:	81fb      	strh	r3, [r7, #14]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	441a      	add	r2, r3
 800afc8:	89fb      	ldrh	r3, [r7, #14]
 800afca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afda:	b29b      	uxth	r3, r3
 800afdc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr

0800afea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800afea:	b480      	push	{r7}
 800afec:	b087      	sub	sp, #28
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	7b1b      	ldrb	r3, [r3, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f040 809d 	bne.w	800b138 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	785b      	ldrb	r3, [r3, #1]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d04c      	beq.n	800b0a0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	823b      	strh	r3, [r7, #16]
 800b014:	8a3b      	ldrh	r3, [r7, #16]
 800b016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d01b      	beq.n	800b056 <USB_EPClearStall+0x6c>
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4413      	add	r3, r2
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b034:	81fb      	strh	r3, [r7, #14]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	441a      	add	r2, r3
 800b040:	89fb      	ldrh	r3, [r7, #14]
 800b042:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b04a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b04e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b052:	b29b      	uxth	r3, r3
 800b054:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	78db      	ldrb	r3, [r3, #3]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d06c      	beq.n	800b138 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	881b      	ldrh	r3, [r3, #0]
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b074:	81bb      	strh	r3, [r7, #12]
 800b076:	89bb      	ldrh	r3, [r7, #12]
 800b078:	f083 0320 	eor.w	r3, r3, #32
 800b07c:	81bb      	strh	r3, [r7, #12]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	441a      	add	r2, r3
 800b088:	89bb      	ldrh	r3, [r7, #12]
 800b08a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b08e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	8013      	strh	r3, [r2, #0]
 800b09e:	e04b      	b.n	800b138 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	82fb      	strh	r3, [r7, #22]
 800b0ae:	8afb      	ldrh	r3, [r7, #22]
 800b0b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d01b      	beq.n	800b0f0 <USB_EPClearStall+0x106>
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4413      	add	r3, r2
 800b0c2:	881b      	ldrh	r3, [r3, #0]
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0ce:	82bb      	strh	r3, [r7, #20]
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	441a      	add	r2, r3
 800b0da:	8abb      	ldrh	r3, [r7, #20]
 800b0dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b0e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	881b      	ldrh	r3, [r3, #0]
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b106:	827b      	strh	r3, [r7, #18]
 800b108:	8a7b      	ldrh	r3, [r7, #18]
 800b10a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b10e:	827b      	strh	r3, [r7, #18]
 800b110:	8a7b      	ldrh	r3, [r7, #18]
 800b112:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b116:	827b      	strh	r3, [r7, #18]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	441a      	add	r2, r3
 800b122:	8a7b      	ldrh	r3, [r7, #18]
 800b124:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b128:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b12c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b134:	b29b      	uxth	r3, r3
 800b136:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	371c      	adds	r7, #28
 800b13e:	46bd      	mov	sp, r7
 800b140:	bc80      	pop	{r7}
 800b142:	4770      	bx	lr

0800b144 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d103      	bne.n	800b15e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2280      	movs	r2, #128	@ 0x80
 800b15a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	bc80      	pop	{r7}
 800b168:	4770      	bx	lr

0800b16a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b083      	sub	sp, #12
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	bc80      	pop	{r7}
 800b17c:	4770      	bx	lr

0800b17e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bc80      	pop	{r7}
 800b190:	4770      	bx	lr

0800b192 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b192:	b480      	push	{r7}
 800b194:	b085      	sub	sp, #20
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bc80      	pop	{r7}
 800b1ae:	4770      	bx	lr

0800b1b0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bc80      	pop	{r7}
 800b1c4:	4770      	bx	lr

0800b1c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b08d      	sub	sp, #52	@ 0x34
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	80fb      	strh	r3, [r7, #6]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b1dc:	88bb      	ldrh	r3, [r7, #4]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	085b      	lsrs	r3, r3, #1
 800b1e2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b1ec:	88fb      	ldrh	r3, [r7, #6]
 800b1ee:	005a      	lsls	r2, r3, #1
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1fe:	e01d      	b.n	800b23c <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800b200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b208:	3301      	adds	r3, #1
 800b20a:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	b29b      	uxth	r3, r3
 800b214:	461a      	mov	r2, r3
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	4313      	orrs	r3, r2
 800b21a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	b29a      	uxth	r2, r3
 800b220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b222:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b226:	3302      	adds	r3, #2
 800b228:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800b22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22c:	3302      	adds	r3, #2
 800b22e:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800b230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b232:	3301      	adds	r3, #1
 800b234:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800b236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b238:	3b01      	subs	r3, #1
 800b23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1de      	bne.n	800b200 <USB_WritePMA+0x3a>
  }
}
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	3734      	adds	r7, #52	@ 0x34
 800b248:	46bd      	mov	sp, r7
 800b24a:	bc80      	pop	{r7}
 800b24c:	4770      	bx	lr

0800b24e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b24e:	b480      	push	{r7}
 800b250:	b08b      	sub	sp, #44	@ 0x2c
 800b252:	af00      	add	r7, sp, #0
 800b254:	60f8      	str	r0, [r7, #12]
 800b256:	60b9      	str	r1, [r7, #8]
 800b258:	4611      	mov	r1, r2
 800b25a:	461a      	mov	r2, r3
 800b25c:	460b      	mov	r3, r1
 800b25e:	80fb      	strh	r3, [r7, #6]
 800b260:	4613      	mov	r3, r2
 800b262:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b264:	88bb      	ldrh	r3, [r7, #4]
 800b266:	085b      	lsrs	r3, r3, #1
 800b268:	b29b      	uxth	r3, r3
 800b26a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b274:	88fb      	ldrh	r3, [r7, #6]
 800b276:	005a      	lsls	r2, r3, #1
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	4413      	add	r3, r2
 800b27c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b280:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	627b      	str	r3, [r7, #36]	@ 0x24
 800b286:	e01b      	b.n	800b2c0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b290:	6a3b      	ldr	r3, [r7, #32]
 800b292:	3302      	adds	r3, #2
 800b294:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	0a1b      	lsrs	r3, r3, #8
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b2b4:	6a3b      	ldr	r3, [r7, #32]
 800b2b6:	3302      	adds	r3, #2
 800b2b8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e0      	bne.n	800b288 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b2c6:	88bb      	ldrh	r3, [r7, #4]
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d007      	beq.n	800b2e2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b2d2:	6a3b      	ldr	r3, [r7, #32]
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	701a      	strb	r2, [r3, #0]
  }
}
 800b2e2:	bf00      	nop
 800b2e4:	372c      	adds	r7, #44	@ 0x2c
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bc80      	pop	{r7}
 800b2ea:	4770      	bx	lr

0800b2ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	7c1b      	ldrb	r3, [r3, #16]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d115      	bne.n	800b330 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b304:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b308:	2202      	movs	r2, #2
 800b30a:	2181      	movs	r1, #129	@ 0x81
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f001 fe90 	bl	800d032 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2201      	movs	r2, #1
 800b316:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b31c:	2202      	movs	r2, #2
 800b31e:	2101      	movs	r1, #1
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f001 fe86 	bl	800d032 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2201      	movs	r2, #1
 800b32a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800b32e:	e012      	b.n	800b356 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b330:	2340      	movs	r3, #64	@ 0x40
 800b332:	2202      	movs	r2, #2
 800b334:	2181      	movs	r1, #129	@ 0x81
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f001 fe7b 	bl	800d032 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b342:	2340      	movs	r3, #64	@ 0x40
 800b344:	2202      	movs	r2, #2
 800b346:	2101      	movs	r1, #1
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f001 fe72 	bl	800d032 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2201      	movs	r2, #1
 800b352:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b356:	2308      	movs	r3, #8
 800b358:	2203      	movs	r2, #3
 800b35a:	2182      	movs	r1, #130	@ 0x82
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 fe68 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2201      	movs	r2, #1
 800b366:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b368:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b36c:	f001 ff88 	bl	800d280 <USBD_static_malloc>
 800b370:	4602      	mov	r2, r0
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d102      	bne.n	800b388 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b382:	2301      	movs	r3, #1
 800b384:	73fb      	strb	r3, [r7, #15]
 800b386:	e026      	b.n	800b3d6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b38e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	7c1b      	ldrb	r3, [r3, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d109      	bne.n	800b3c6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3bc:	2101      	movs	r1, #1
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f001 ff28 	bl	800d214 <USBD_LL_PrepareReceive>
 800b3c4:	e007      	b.n	800b3d6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3cc:	2340      	movs	r3, #64	@ 0x40
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f001 ff1f 	bl	800d214 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b3f0:	2181      	movs	r1, #129	@ 0x81
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f001 fe43 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b3fe:	2101      	movs	r1, #1
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f001 fe3c 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b40e:	2182      	movs	r1, #130	@ 0x82
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f001 fe34 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00e      	beq.n	800b444 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b436:	4618      	mov	r0, r3
 800b438:	f001 ff2e 	bl	800d298 <USBD_static_free>
    pdev->pClassData = NULL;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b086      	sub	sp, #24
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b45e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b460:	2300      	movs	r3, #0
 800b462:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b464:	2300      	movs	r3, #0
 800b466:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b468:	2300      	movs	r3, #0
 800b46a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b474:	2b00      	cmp	r3, #0
 800b476:	d039      	beq.n	800b4ec <USBD_CDC_Setup+0x9e>
 800b478:	2b20      	cmp	r3, #32
 800b47a:	d17f      	bne.n	800b57c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	88db      	ldrh	r3, [r3, #6]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d029      	beq.n	800b4d8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	b25b      	sxtb	r3, r3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	da11      	bge.n	800b4b2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b49a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	88d2      	ldrh	r2, [r2, #6]
 800b4a0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b4a2:	6939      	ldr	r1, [r7, #16]
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	88db      	ldrh	r3, [r3, #6]
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f001 fa06 	bl	800c8bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b4b0:	e06b      	b.n	800b58a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	785a      	ldrb	r2, [r3, #1]
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	88db      	ldrh	r3, [r3, #6]
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b4c8:	6939      	ldr	r1, [r7, #16]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	88db      	ldrh	r3, [r3, #6]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f001 fa21 	bl	800c918 <USBD_CtlPrepareRx>
      break;
 800b4d6:	e058      	b.n	800b58a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	7850      	ldrb	r0, [r2, #1]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	4798      	blx	r3
      break;
 800b4ea:	e04e      	b.n	800b58a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	785b      	ldrb	r3, [r3, #1]
 800b4f0:	2b0b      	cmp	r3, #11
 800b4f2:	d02e      	beq.n	800b552 <USBD_CDC_Setup+0x104>
 800b4f4:	2b0b      	cmp	r3, #11
 800b4f6:	dc38      	bgt.n	800b56a <USBD_CDC_Setup+0x11c>
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d002      	beq.n	800b502 <USBD_CDC_Setup+0xb4>
 800b4fc:	2b0a      	cmp	r3, #10
 800b4fe:	d014      	beq.n	800b52a <USBD_CDC_Setup+0xdc>
 800b500:	e033      	b.n	800b56a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d107      	bne.n	800b51c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b50c:	f107 030c 	add.w	r3, r7, #12
 800b510:	2202      	movs	r2, #2
 800b512:	4619      	mov	r1, r3
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f001 f9d1 	bl	800c8bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b51a:	e02e      	b.n	800b57a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f001 f962 	bl	800c7e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800b524:	2302      	movs	r3, #2
 800b526:	75fb      	strb	r3, [r7, #23]
          break;
 800b528:	e027      	b.n	800b57a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b530:	2b03      	cmp	r3, #3
 800b532:	d107      	bne.n	800b544 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b534:	f107 030f 	add.w	r3, r7, #15
 800b538:	2201      	movs	r2, #1
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f001 f9bd 	bl	800c8bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b542:	e01a      	b.n	800b57a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f001 f94e 	bl	800c7e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800b54c:	2302      	movs	r3, #2
 800b54e:	75fb      	strb	r3, [r7, #23]
          break;
 800b550:	e013      	b.n	800b57a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d00d      	beq.n	800b578 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f001 f942 	bl	800c7e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800b564:	2302      	movs	r3, #2
 800b566:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b568:	e006      	b.n	800b578 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f001 f93b 	bl	800c7e8 <USBD_CtlError>
          ret = USBD_FAIL;
 800b572:	2302      	movs	r3, #2
 800b574:	75fb      	strb	r3, [r7, #23]
          break;
 800b576:	e000      	b.n	800b57a <USBD_CDC_Setup+0x12c>
          break;
 800b578:	bf00      	nop
      }
      break;
 800b57a:	e006      	b.n	800b58a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 f932 	bl	800c7e8 <USBD_CtlError>
      ret = USBD_FAIL;
 800b584:	2302      	movs	r3, #2
 800b586:	75fb      	strb	r3, [r7, #23]
      break;
 800b588:	bf00      	nop
  }

  return ret;
 800b58a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3718      	adds	r7, #24
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b5ae:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d03a      	beq.n	800b630 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b5ba:	78fa      	ldrb	r2, [r7, #3]
 800b5bc:	6879      	ldr	r1, [r7, #4]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4413      	add	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	440b      	add	r3, r1
 800b5c8:	331c      	adds	r3, #28
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d029      	beq.n	800b624 <USBD_CDC_DataIn+0x90>
 800b5d0:	78fa      	ldrb	r2, [r7, #3]
 800b5d2:	6879      	ldr	r1, [r7, #4]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4413      	add	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	440b      	add	r3, r1
 800b5de:	331c      	adds	r3, #28
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	78f9      	ldrb	r1, [r7, #3]
 800b5e4:	68b8      	ldr	r0, [r7, #8]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	440b      	add	r3, r1
 800b5ec:	00db      	lsls	r3, r3, #3
 800b5ee:	4403      	add	r3, r0
 800b5f0:	3338      	adds	r3, #56	@ 0x38
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b5f8:	fb01 f303 	mul.w	r3, r1, r3
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d110      	bne.n	800b624 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b602:	78fa      	ldrb	r2, [r7, #3]
 800b604:	6879      	ldr	r1, [r7, #4]
 800b606:	4613      	mov	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	440b      	add	r3, r1
 800b610:	331c      	adds	r3, #28
 800b612:	2200      	movs	r2, #0
 800b614:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b616:	78f9      	ldrb	r1, [r7, #3]
 800b618:	2300      	movs	r3, #0
 800b61a:	2200      	movs	r2, #0
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f001 fdd6 	bl	800d1ce <USBD_LL_Transmit>
 800b622:	e003      	b.n	800b62c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	e000      	b.n	800b632 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b630:	2302      	movs	r3, #2
  }
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b084      	sub	sp, #16
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
 800b642:	460b      	mov	r3, r1
 800b644:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b64c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b64e:	78fb      	ldrb	r3, [r7, #3]
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f001 fe01 	bl	800d25a <USBD_LL_GetRxDataSize>
 800b658:	4602      	mov	r2, r0
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00d      	beq.n	800b686 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b67e:	4611      	mov	r1, r2
 800b680:	4798      	blx	r3

    return USBD_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	e000      	b.n	800b688 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b686:	2302      	movs	r3, #2
  }
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b69e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d014      	beq.n	800b6d4 <USBD_CDC_EP0_RxReady+0x44>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b6b0:	2bff      	cmp	r3, #255	@ 0xff
 800b6b2:	d00f      	beq.n	800b6d4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b6c2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b6ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	22ff      	movs	r2, #255	@ 0xff
 800b6d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
	...

0800b6e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2243      	movs	r2, #67	@ 0x43
 800b6ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b6ee:	4b03      	ldr	r3, [pc, #12]	@ (800b6fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bc80      	pop	{r7}
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	200000bc 	.word	0x200000bc

0800b700 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2243      	movs	r2, #67	@ 0x43
 800b70c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b70e:	4b03      	ldr	r3, [pc, #12]	@ (800b71c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b710:	4618      	mov	r0, r3
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	bc80      	pop	{r7}
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	20000078 	.word	0x20000078

0800b720 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2243      	movs	r2, #67	@ 0x43
 800b72c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b72e:	4b03      	ldr	r3, [pc, #12]	@ (800b73c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b730:	4618      	mov	r0, r3
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	bc80      	pop	{r7}
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	20000100 	.word	0x20000100

0800b740 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	220a      	movs	r2, #10
 800b74c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b74e:	4b03      	ldr	r3, [pc, #12]	@ (800b75c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b750:	4618      	mov	r0, r3
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	bc80      	pop	{r7}
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	20000034 	.word	0x20000034

0800b760 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b76a:	2302      	movs	r3, #2
 800b76c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b780:	7bfb      	ldrb	r3, [r7, #15]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	bc80      	pop	{r7}
 800b78a:	4770      	bx	lr

0800b78c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b087      	sub	sp, #28
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	4613      	mov	r3, r2
 800b798:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7a0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b7aa:	88fa      	ldrh	r2, [r7, #6]
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	371c      	adds	r7, #28
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bc80      	pop	{r7}
 800b7bc:	4770      	bx	lr

0800b7be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b085      	sub	sp, #20
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7ce:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bc80      	pop	{r7}
 800b7e2:	4770      	bx	lr

0800b7e4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d01c      	beq.n	800b838 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b804:	2b00      	cmp	r3, #0
 800b806:	d115      	bne.n	800b834 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b826:	b29b      	uxth	r3, r3
 800b828:	2181      	movs	r1, #129	@ 0x81
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f001 fccf 	bl	800d1ce <USBD_LL_Transmit>

      return USBD_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	e002      	b.n	800b83a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b834:	2301      	movs	r3, #1
 800b836:	e000      	b.n	800b83a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b838:	2302      	movs	r3, #2
  }
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b084      	sub	sp, #16
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b850:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d017      	beq.n	800b88c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	7c1b      	ldrb	r3, [r3, #16]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d109      	bne.n	800b878 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b86a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b86e:	2101      	movs	r1, #1
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f001 fccf 	bl	800d214 <USBD_LL_PrepareReceive>
 800b876:	e007      	b.n	800b888 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b87e:	2340      	movs	r3, #64	@ 0x40
 800b880:	2101      	movs	r1, #1
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f001 fcc6 	bl	800d214 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	e000      	b.n	800b88e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b88c:	2302      	movs	r3, #2
  }
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b084      	sub	sp, #16
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	e01a      	b.n	800b8e4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d003      	beq.n	800b8c0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	79fa      	ldrb	r2, [r7, #7]
 800b8da:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f001 fb33 	bl	800cf48 <USBD_LL_Init>

  return USBD_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d006      	beq.n	800b90e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b908:	2300      	movs	r3, #0
 800b90a:	73fb      	strb	r3, [r7, #15]
 800b90c:	e001      	b.n	800b912 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b90e:	2302      	movs	r3, #2
 800b910:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b912:	7bfb      	ldrb	r3, [r7, #15]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	bc80      	pop	{r7}
 800b91c:	4770      	bx	lr

0800b91e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b082      	sub	sp, #8
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f001 fb68 	bl	800cffc <USBD_LL_Start>

  return USBD_OK;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b936:	b480      	push	{r7}
 800b938:	b083      	sub	sp, #12
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	bc80      	pop	{r7}
 800b948:	4770      	bx	lr

0800b94a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	460b      	mov	r3, r1
 800b954:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b956:	2302      	movs	r3, #2
 800b958:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00c      	beq.n	800b97e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	78fa      	ldrb	r2, [r7, #3]
 800b96e:	4611      	mov	r1, r2
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	4798      	blx	r3
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	78fa      	ldrb	r2, [r7, #3]
 800b99e:	4611      	mov	r1, r2
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	4798      	blx	r3

  return USBD_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b9be:	6839      	ldr	r1, [r7, #0]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f000 fed8 	bl	800c776 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b9e2:	f003 031f 	and.w	r3, r3, #31
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d016      	beq.n	800ba18 <USBD_LL_SetupStage+0x6a>
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d81c      	bhi.n	800ba28 <USBD_LL_SetupStage+0x7a>
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d002      	beq.n	800b9f8 <USBD_LL_SetupStage+0x4a>
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d008      	beq.n	800ba08 <USBD_LL_SetupStage+0x5a>
 800b9f6:	e017      	b.n	800ba28 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f9cb 	bl	800bd9c <USBD_StdDevReq>
      break;
 800ba06:	e01a      	b.n	800ba3e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fa2d 	bl	800be70 <USBD_StdItfReq>
      break;
 800ba16:	e012      	b.n	800ba3e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fa6d 	bl	800bf00 <USBD_StdEPReq>
      break;
 800ba26:	e00a      	b.n	800ba3e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ba2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	4619      	mov	r1, r3
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f001 fb40 	bl	800d0bc <USBD_LL_StallEP>
      break;
 800ba3c:	bf00      	nop
  }

  return USBD_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	460b      	mov	r3, r1
 800ba52:	607a      	str	r2, [r7, #4]
 800ba54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ba56:	7afb      	ldrb	r3, [r7, #11]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d14b      	bne.n	800baf4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	d134      	bne.n	800bad8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	68da      	ldr	r2, [r3, #12]
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d919      	bls.n	800baae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	68da      	ldr	r2, [r3, #12]
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	1ad2      	subs	r2, r2, r3
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	68da      	ldr	r2, [r3, #12]
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d203      	bcs.n	800ba9c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	e002      	b.n	800baa2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	461a      	mov	r2, r3
 800baa4:	6879      	ldr	r1, [r7, #4]
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f000 ff54 	bl	800c954 <USBD_CtlContinueRx>
 800baac:	e038      	b.n	800bb20 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00a      	beq.n	800bad0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bac0:	2b03      	cmp	r3, #3
 800bac2:	d105      	bne.n	800bad0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f000 ff51 	bl	800c978 <USBD_CtlSendStatus>
 800bad6:	e023      	b.n	800bb20 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bade:	2b05      	cmp	r3, #5
 800bae0:	d11e      	bne.n	800bb20 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800baea:	2100      	movs	r1, #0
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f001 fae5 	bl	800d0bc <USBD_LL_StallEP>
 800baf2:	e015      	b.n	800bb20 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bafa:	699b      	ldr	r3, [r3, #24]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00d      	beq.n	800bb1c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bb06:	2b03      	cmp	r3, #3
 800bb08:	d108      	bne.n	800bb1c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	7afa      	ldrb	r2, [r7, #11]
 800bb14:	4611      	mov	r1, r2
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	4798      	blx	r3
 800bb1a:	e001      	b.n	800bb20 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	e000      	b.n	800bb22 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3718      	adds	r7, #24
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b086      	sub	sp, #24
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	60f8      	str	r0, [r7, #12]
 800bb32:	460b      	mov	r3, r1
 800bb34:	607a      	str	r2, [r7, #4]
 800bb36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bb38:	7afb      	ldrb	r3, [r7, #11]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d17f      	bne.n	800bc3e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3314      	adds	r3, #20
 800bb42:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d15c      	bne.n	800bc08 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	68da      	ldr	r2, [r3, #12]
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d915      	bls.n	800bb86 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	68da      	ldr	r2, [r3, #12]
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	1ad2      	subs	r2, r2, r3
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	461a      	mov	r2, r3
 800bb70:	6879      	ldr	r1, [r7, #4]
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f000 febe 	bl	800c8f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb78:	2300      	movs	r3, #0
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f001 fb48 	bl	800d214 <USBD_LL_PrepareReceive>
 800bb84:	e04e      	b.n	800bc24 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	6912      	ldr	r2, [r2, #16]
 800bb8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb92:	fb01 f202 	mul.w	r2, r1, r2
 800bb96:	1a9b      	subs	r3, r3, r2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d11c      	bne.n	800bbd6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	689a      	ldr	r2, [r3, #8]
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d316      	bcc.n	800bbd6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	689a      	ldr	r2, [r3, #8]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d20f      	bcs.n	800bbd6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2100      	movs	r1, #0
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f000 fe9a 	bl	800c8f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbc8:	2300      	movs	r3, #0
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2100      	movs	r1, #0
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f001 fb20 	bl	800d214 <USBD_LL_PrepareReceive>
 800bbd4:	e026      	b.n	800bc24 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00a      	beq.n	800bbf8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d105      	bne.n	800bbf8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bbf8:	2180      	movs	r1, #128	@ 0x80
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f001 fa5e 	bl	800d0bc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f000 fecc 	bl	800c99e <USBD_CtlReceiveStatus>
 800bc06:	e00d      	b.n	800bc24 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bc0e:	2b04      	cmp	r3, #4
 800bc10:	d004      	beq.n	800bc1c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d103      	bne.n	800bc24 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bc1c:	2180      	movs	r1, #128	@ 0x80
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f001 fa4c 	bl	800d0bc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d11d      	bne.n	800bc6a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff fe81 	bl	800b936 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bc3c:	e015      	b.n	800bc6a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00d      	beq.n	800bc66 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc50:	2b03      	cmp	r3, #3
 800bc52:	d108      	bne.n	800bc66 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc5a:	695b      	ldr	r3, [r3, #20]
 800bc5c:	7afa      	ldrb	r2, [r7, #11]
 800bc5e:	4611      	mov	r1, r2
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	4798      	blx	r3
 800bc64:	e001      	b.n	800bc6a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc66:	2302      	movs	r3, #2
 800bc68:	e000      	b.n	800bc6c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3718      	adds	r7, #24
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc7c:	2340      	movs	r3, #64	@ 0x40
 800bc7e:	2200      	movs	r2, #0
 800bc80:	2100      	movs	r1, #0
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f001 f9d5 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2240      	movs	r2, #64	@ 0x40
 800bc94:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc98:	2340      	movs	r3, #64	@ 0x40
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	2180      	movs	r1, #128	@ 0x80
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f001 f9c7 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2201      	movs	r2, #1
 800bca8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2240      	movs	r2, #64	@ 0x40
 800bcae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d009      	beq.n	800bcec <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	6852      	ldr	r2, [r2, #4]
 800bce4:	b2d2      	uxtb	r2, r2
 800bce6:	4611      	mov	r1, r2
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	4798      	blx	r3
  }

  return USBD_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	b083      	sub	sp, #12
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	460b      	mov	r3, r1
 800bd00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	78fa      	ldrb	r2, [r7, #3]
 800bd06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	370c      	adds	r7, #12
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bc80      	pop	{r7}
 800bd12:	4770      	bx	lr

0800bd14 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2204      	movs	r2, #4
 800bd2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bc80      	pop	{r7}
 800bd3a:	4770      	bx	lr

0800bd3c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd4a:	2b04      	cmp	r3, #4
 800bd4c:	d105      	bne.n	800bd5a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bc80      	pop	{r7}
 800bd64:	4770      	bx	lr

0800bd66 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b082      	sub	sp, #8
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd74:	2b03      	cmp	r3, #3
 800bd76:	d10b      	bne.n	800bd90 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd7e:	69db      	ldr	r3, [r3, #28]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d005      	beq.n	800bd90 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd8a:	69db      	ldr	r3, [r3, #28]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdb2:	2b40      	cmp	r3, #64	@ 0x40
 800bdb4:	d005      	beq.n	800bdc2 <USBD_StdDevReq+0x26>
 800bdb6:	2b40      	cmp	r3, #64	@ 0x40
 800bdb8:	d84f      	bhi.n	800be5a <USBD_StdDevReq+0xbe>
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d009      	beq.n	800bdd2 <USBD_StdDevReq+0x36>
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	d14b      	bne.n	800be5a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	4798      	blx	r3
      break;
 800bdd0:	e048      	b.n	800be64 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	785b      	ldrb	r3, [r3, #1]
 800bdd6:	2b09      	cmp	r3, #9
 800bdd8:	d839      	bhi.n	800be4e <USBD_StdDevReq+0xb2>
 800bdda:	a201      	add	r2, pc, #4	@ (adr r2, 800bde0 <USBD_StdDevReq+0x44>)
 800bddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde0:	0800be31 	.word	0x0800be31
 800bde4:	0800be45 	.word	0x0800be45
 800bde8:	0800be4f 	.word	0x0800be4f
 800bdec:	0800be3b 	.word	0x0800be3b
 800bdf0:	0800be4f 	.word	0x0800be4f
 800bdf4:	0800be13 	.word	0x0800be13
 800bdf8:	0800be09 	.word	0x0800be09
 800bdfc:	0800be4f 	.word	0x0800be4f
 800be00:	0800be27 	.word	0x0800be27
 800be04:	0800be1d 	.word	0x0800be1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f9dc 	bl	800c1c8 <USBD_GetDescriptor>
          break;
 800be10:	e022      	b.n	800be58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fb3f 	bl	800c498 <USBD_SetAddress>
          break;
 800be1a:	e01d      	b.n	800be58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800be1c:	6839      	ldr	r1, [r7, #0]
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fb7e 	bl	800c520 <USBD_SetConfig>
          break;
 800be24:	e018      	b.n	800be58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fc07 	bl	800c63c <USBD_GetConfig>
          break;
 800be2e:	e013      	b.n	800be58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fc37 	bl	800c6a6 <USBD_GetStatus>
          break;
 800be38:	e00e      	b.n	800be58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fc65 	bl	800c70c <USBD_SetFeature>
          break;
 800be42:	e009      	b.n	800be58 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fc74 	bl	800c734 <USBD_ClrFeature>
          break;
 800be4c:	e004      	b.n	800be58 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fcc9 	bl	800c7e8 <USBD_CtlError>
          break;
 800be56:	bf00      	nop
      }
      break;
 800be58:	e004      	b.n	800be64 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800be5a:	6839      	ldr	r1, [r7, #0]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 fcc3 	bl	800c7e8 <USBD_CtlError>
      break;
 800be62:	bf00      	nop
  }

  return ret;
 800be64:	7bfb      	ldrb	r3, [r7, #15]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop

0800be70 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be86:	2b40      	cmp	r3, #64	@ 0x40
 800be88:	d005      	beq.n	800be96 <USBD_StdItfReq+0x26>
 800be8a:	2b40      	cmp	r3, #64	@ 0x40
 800be8c:	d82e      	bhi.n	800beec <USBD_StdItfReq+0x7c>
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d001      	beq.n	800be96 <USBD_StdItfReq+0x26>
 800be92:	2b20      	cmp	r3, #32
 800be94:	d12a      	bne.n	800beec <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be9c:	3b01      	subs	r3, #1
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d81d      	bhi.n	800bede <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	889b      	ldrh	r3, [r3, #4]
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d813      	bhi.n	800bed4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	4798      	blx	r3
 800beba:	4603      	mov	r3, r0
 800bebc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	88db      	ldrh	r3, [r3, #6]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d110      	bne.n	800bee8 <USBD_StdItfReq+0x78>
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10d      	bne.n	800bee8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fd53 	bl	800c978 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bed2:	e009      	b.n	800bee8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fc86 	bl	800c7e8 <USBD_CtlError>
          break;
 800bedc:	e004      	b.n	800bee8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fc81 	bl	800c7e8 <USBD_CtlError>
          break;
 800bee6:	e000      	b.n	800beea <USBD_StdItfReq+0x7a>
          break;
 800bee8:	bf00      	nop
      }
      break;
 800beea:	e004      	b.n	800bef6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800beec:	6839      	ldr	r1, [r7, #0]
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fc7a 	bl	800c7e8 <USBD_CtlError>
      break;
 800bef4:	bf00      	nop
  }

  return USBD_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	889b      	ldrh	r3, [r3, #4]
 800bf12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf1c:	2b40      	cmp	r3, #64	@ 0x40
 800bf1e:	d007      	beq.n	800bf30 <USBD_StdEPReq+0x30>
 800bf20:	2b40      	cmp	r3, #64	@ 0x40
 800bf22:	f200 8146 	bhi.w	800c1b2 <USBD_StdEPReq+0x2b2>
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00a      	beq.n	800bf40 <USBD_StdEPReq+0x40>
 800bf2a:	2b20      	cmp	r3, #32
 800bf2c:	f040 8141 	bne.w	800c1b2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	4798      	blx	r3
      break;
 800bf3e:	e13d      	b.n	800c1bc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf48:	2b20      	cmp	r3, #32
 800bf4a:	d10a      	bne.n	800bf62 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	4798      	blx	r3
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
 800bf60:	e12d      	b.n	800c1be <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	785b      	ldrb	r3, [r3, #1]
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d007      	beq.n	800bf7a <USBD_StdEPReq+0x7a>
 800bf6a:	2b03      	cmp	r3, #3
 800bf6c:	f300 811b 	bgt.w	800c1a6 <USBD_StdEPReq+0x2a6>
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d072      	beq.n	800c05a <USBD_StdEPReq+0x15a>
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d03a      	beq.n	800bfee <USBD_StdEPReq+0xee>
 800bf78:	e115      	b.n	800c1a6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf80:	2b02      	cmp	r3, #2
 800bf82:	d002      	beq.n	800bf8a <USBD_StdEPReq+0x8a>
 800bf84:	2b03      	cmp	r3, #3
 800bf86:	d015      	beq.n	800bfb4 <USBD_StdEPReq+0xb4>
 800bf88:	e02b      	b.n	800bfe2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf8a:	7bbb      	ldrb	r3, [r7, #14]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00c      	beq.n	800bfaa <USBD_StdEPReq+0xaa>
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
 800bf92:	2b80      	cmp	r3, #128	@ 0x80
 800bf94:	d009      	beq.n	800bfaa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f001 f88e 	bl	800d0bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bfa0:	2180      	movs	r1, #128	@ 0x80
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f001 f88a 	bl	800d0bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfa8:	e020      	b.n	800bfec <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 fc1b 	bl	800c7e8 <USBD_CtlError>
              break;
 800bfb2:	e01b      	b.n	800bfec <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	885b      	ldrh	r3, [r3, #2]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10e      	bne.n	800bfda <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bfbc:	7bbb      	ldrb	r3, [r7, #14]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00b      	beq.n	800bfda <USBD_StdEPReq+0xda>
 800bfc2:	7bbb      	ldrb	r3, [r7, #14]
 800bfc4:	2b80      	cmp	r3, #128	@ 0x80
 800bfc6:	d008      	beq.n	800bfda <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	88db      	ldrh	r3, [r3, #6]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d104      	bne.n	800bfda <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bfd0:	7bbb      	ldrb	r3, [r7, #14]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f001 f871 	bl	800d0bc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fccc 	bl	800c978 <USBD_CtlSendStatus>

              break;
 800bfe0:	e004      	b.n	800bfec <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fbff 	bl	800c7e8 <USBD_CtlError>
              break;
 800bfea:	bf00      	nop
          }
          break;
 800bfec:	e0e0      	b.n	800c1b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d002      	beq.n	800bffe <USBD_StdEPReq+0xfe>
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	d015      	beq.n	800c028 <USBD_StdEPReq+0x128>
 800bffc:	e026      	b.n	800c04c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bffe:	7bbb      	ldrb	r3, [r7, #14]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00c      	beq.n	800c01e <USBD_StdEPReq+0x11e>
 800c004:	7bbb      	ldrb	r3, [r7, #14]
 800c006:	2b80      	cmp	r3, #128	@ 0x80
 800c008:	d009      	beq.n	800c01e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f001 f854 	bl	800d0bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c014:	2180      	movs	r1, #128	@ 0x80
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f001 f850 	bl	800d0bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c01c:	e01c      	b.n	800c058 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fbe1 	bl	800c7e8 <USBD_CtlError>
              break;
 800c026:	e017      	b.n	800c058 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	885b      	ldrh	r3, [r3, #2]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d112      	bne.n	800c056 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c030:	7bbb      	ldrb	r3, [r7, #14]
 800c032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c036:	2b00      	cmp	r3, #0
 800c038:	d004      	beq.n	800c044 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	4619      	mov	r1, r3
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f001 f85b 	bl	800d0fa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fc97 	bl	800c978 <USBD_CtlSendStatus>
              }
              break;
 800c04a:	e004      	b.n	800c056 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 fbca 	bl	800c7e8 <USBD_CtlError>
              break;
 800c054:	e000      	b.n	800c058 <USBD_StdEPReq+0x158>
              break;
 800c056:	bf00      	nop
          }
          break;
 800c058:	e0aa      	b.n	800c1b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c060:	2b02      	cmp	r3, #2
 800c062:	d002      	beq.n	800c06a <USBD_StdEPReq+0x16a>
 800c064:	2b03      	cmp	r3, #3
 800c066:	d032      	beq.n	800c0ce <USBD_StdEPReq+0x1ce>
 800c068:	e097      	b.n	800c19a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c06a:	7bbb      	ldrb	r3, [r7, #14]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d007      	beq.n	800c080 <USBD_StdEPReq+0x180>
 800c070:	7bbb      	ldrb	r3, [r7, #14]
 800c072:	2b80      	cmp	r3, #128	@ 0x80
 800c074:	d004      	beq.n	800c080 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c076:	6839      	ldr	r1, [r7, #0]
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 fbb5 	bl	800c7e8 <USBD_CtlError>
                break;
 800c07e:	e091      	b.n	800c1a4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c084:	2b00      	cmp	r3, #0
 800c086:	da0b      	bge.n	800c0a0 <USBD_StdEPReq+0x1a0>
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c08e:	4613      	mov	r3, r2
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4413      	add	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	3310      	adds	r3, #16
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	4413      	add	r3, r2
 800c09c:	3304      	adds	r3, #4
 800c09e:	e00b      	b.n	800c0b8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0a0:	7bbb      	ldrb	r3, [r7, #14]
 800c0a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	4413      	add	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fbf8 	bl	800c8bc <USBD_CtlSendData>
              break;
 800c0cc:	e06a      	b.n	800c1a4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	da11      	bge.n	800c0fa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
 800c0d8:	f003 020f 	and.w	r2, r3, #15
 800c0dc:	6879      	ldr	r1, [r7, #4]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	4413      	add	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	440b      	add	r3, r1
 800c0e8:	3318      	adds	r3, #24
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d117      	bne.n	800c120 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fb78 	bl	800c7e8 <USBD_CtlError>
                  break;
 800c0f8:	e054      	b.n	800c1a4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	f003 020f 	and.w	r2, r3, #15
 800c100:	6879      	ldr	r1, [r7, #4]
 800c102:	4613      	mov	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	440b      	add	r3, r1
 800c10c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d104      	bne.n	800c120 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fb65 	bl	800c7e8 <USBD_CtlError>
                  break;
 800c11e:	e041      	b.n	800c1a4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c124:	2b00      	cmp	r3, #0
 800c126:	da0b      	bge.n	800c140 <USBD_StdEPReq+0x240>
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c12e:	4613      	mov	r3, r2
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	4413      	add	r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	3310      	adds	r3, #16
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	4413      	add	r3, r2
 800c13c:	3304      	adds	r3, #4
 800c13e:	e00b      	b.n	800c158 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c146:	4613      	mov	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4413      	add	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	4413      	add	r3, r2
 800c156:	3304      	adds	r3, #4
 800c158:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c15a:	7bbb      	ldrb	r3, [r7, #14]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <USBD_StdEPReq+0x266>
 800c160:	7bbb      	ldrb	r3, [r7, #14]
 800c162:	2b80      	cmp	r3, #128	@ 0x80
 800c164:	d103      	bne.n	800c16e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2200      	movs	r2, #0
 800c16a:	601a      	str	r2, [r3, #0]
 800c16c:	e00e      	b.n	800c18c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c16e:	7bbb      	ldrb	r3, [r7, #14]
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 ffe0 	bl	800d138 <USBD_LL_IsStallEP>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d003      	beq.n	800c186 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	2201      	movs	r2, #1
 800c182:	601a      	str	r2, [r3, #0]
 800c184:	e002      	b.n	800c18c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2200      	movs	r2, #0
 800c18a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	2202      	movs	r2, #2
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fb92 	bl	800c8bc <USBD_CtlSendData>
              break;
 800c198:	e004      	b.n	800c1a4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c19a:	6839      	ldr	r1, [r7, #0]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 fb23 	bl	800c7e8 <USBD_CtlError>
              break;
 800c1a2:	bf00      	nop
          }
          break;
 800c1a4:	e004      	b.n	800c1b0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c1a6:	6839      	ldr	r1, [r7, #0]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fb1d 	bl	800c7e8 <USBD_CtlError>
          break;
 800c1ae:	bf00      	nop
      }
      break;
 800c1b0:	e004      	b.n	800c1bc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c1b2:	6839      	ldr	r1, [r7, #0]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fb17 	bl	800c7e8 <USBD_CtlError>
      break;
 800c1ba:	bf00      	nop
  }

  return ret;
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
	...

0800c1c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	885b      	ldrh	r3, [r3, #2]
 800c1e2:	0a1b      	lsrs	r3, r3, #8
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	2b06      	cmp	r3, #6
 800c1ea:	f200 8128 	bhi.w	800c43e <USBD_GetDescriptor+0x276>
 800c1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c1f4 <USBD_GetDescriptor+0x2c>)
 800c1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f4:	0800c211 	.word	0x0800c211
 800c1f8:	0800c229 	.word	0x0800c229
 800c1fc:	0800c269 	.word	0x0800c269
 800c200:	0800c43f 	.word	0x0800c43f
 800c204:	0800c43f 	.word	0x0800c43f
 800c208:	0800c3df 	.word	0x0800c3df
 800c20c:	0800c40b 	.word	0x0800c40b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	7c12      	ldrb	r2, [r2, #16]
 800c21c:	f107 0108 	add.w	r1, r7, #8
 800c220:	4610      	mov	r0, r2
 800c222:	4798      	blx	r3
 800c224:	60f8      	str	r0, [r7, #12]
      break;
 800c226:	e112      	b.n	800c44e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	7c1b      	ldrb	r3, [r3, #16]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10d      	bne.n	800c24c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c238:	f107 0208 	add.w	r2, r7, #8
 800c23c:	4610      	mov	r0, r2
 800c23e:	4798      	blx	r3
 800c240:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	3301      	adds	r3, #1
 800c246:	2202      	movs	r2, #2
 800c248:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c24a:	e100      	b.n	800c44e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c254:	f107 0208 	add.w	r2, r7, #8
 800c258:	4610      	mov	r0, r2
 800c25a:	4798      	blx	r3
 800c25c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3301      	adds	r3, #1
 800c262:	2202      	movs	r2, #2
 800c264:	701a      	strb	r2, [r3, #0]
      break;
 800c266:	e0f2      	b.n	800c44e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	885b      	ldrh	r3, [r3, #2]
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	2b05      	cmp	r3, #5
 800c270:	f200 80ac 	bhi.w	800c3cc <USBD_GetDescriptor+0x204>
 800c274:	a201      	add	r2, pc, #4	@ (adr r2, 800c27c <USBD_GetDescriptor+0xb4>)
 800c276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27a:	bf00      	nop
 800c27c:	0800c295 	.word	0x0800c295
 800c280:	0800c2c9 	.word	0x0800c2c9
 800c284:	0800c2fd 	.word	0x0800c2fd
 800c288:	0800c331 	.word	0x0800c331
 800c28c:	0800c365 	.word	0x0800c365
 800c290:	0800c399 	.word	0x0800c399
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00b      	beq.n	800c2b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	7c12      	ldrb	r2, [r2, #16]
 800c2ac:	f107 0108 	add.w	r1, r7, #8
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	4798      	blx	r3
 800c2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2b6:	e091      	b.n	800c3dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fa94 	bl	800c7e8 <USBD_CtlError>
            err++;
 800c2c0:	7afb      	ldrb	r3, [r7, #11]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2c6:	e089      	b.n	800c3dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00b      	beq.n	800c2ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	7c12      	ldrb	r2, [r2, #16]
 800c2e0:	f107 0108 	add.w	r1, r7, #8
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	4798      	blx	r3
 800c2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ea:	e077      	b.n	800c3dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fa7a 	bl	800c7e8 <USBD_CtlError>
            err++;
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2fa:	e06f      	b.n	800c3dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00b      	beq.n	800c320 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	7c12      	ldrb	r2, [r2, #16]
 800c314:	f107 0108 	add.w	r1, r7, #8
 800c318:	4610      	mov	r0, r2
 800c31a:	4798      	blx	r3
 800c31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c31e:	e05d      	b.n	800c3dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa60 	bl	800c7e8 <USBD_CtlError>
            err++;
 800c328:	7afb      	ldrb	r3, [r7, #11]
 800c32a:	3301      	adds	r3, #1
 800c32c:	72fb      	strb	r3, [r7, #11]
          break;
 800c32e:	e055      	b.n	800c3dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	7c12      	ldrb	r2, [r2, #16]
 800c348:	f107 0108 	add.w	r1, r7, #8
 800c34c:	4610      	mov	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c352:	e043      	b.n	800c3dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fa46 	bl	800c7e8 <USBD_CtlError>
            err++;
 800c35c:	7afb      	ldrb	r3, [r7, #11]
 800c35e:	3301      	adds	r3, #1
 800c360:	72fb      	strb	r3, [r7, #11]
          break;
 800c362:	e03b      	b.n	800c3dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c36a:	695b      	ldr	r3, [r3, #20]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00b      	beq.n	800c388 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7c12      	ldrb	r2, [r2, #16]
 800c37c:	f107 0108 	add.w	r1, r7, #8
 800c380:	4610      	mov	r0, r2
 800c382:	4798      	blx	r3
 800c384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c386:	e029      	b.n	800c3dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fa2c 	bl	800c7e8 <USBD_CtlError>
            err++;
 800c390:	7afb      	ldrb	r3, [r7, #11]
 800c392:	3301      	adds	r3, #1
 800c394:	72fb      	strb	r3, [r7, #11]
          break;
 800c396:	e021      	b.n	800c3dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c39e:	699b      	ldr	r3, [r3, #24]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00b      	beq.n	800c3bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	7c12      	ldrb	r2, [r2, #16]
 800c3b0:	f107 0108 	add.w	r1, r7, #8
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
 800c3b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ba:	e00f      	b.n	800c3dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fa12 	bl	800c7e8 <USBD_CtlError>
            err++;
 800c3c4:	7afb      	ldrb	r3, [r7, #11]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ca:	e007      	b.n	800c3dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c3cc:	6839      	ldr	r1, [r7, #0]
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 fa0a 	bl	800c7e8 <USBD_CtlError>
          err++;
 800c3d4:	7afb      	ldrb	r3, [r7, #11]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c3da:	e038      	b.n	800c44e <USBD_GetDescriptor+0x286>
 800c3dc:	e037      	b.n	800c44e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	7c1b      	ldrb	r3, [r3, #16]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d109      	bne.n	800c3fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3ee:	f107 0208 	add.w	r2, r7, #8
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	4798      	blx	r3
 800c3f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3f8:	e029      	b.n	800c44e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3fa:	6839      	ldr	r1, [r7, #0]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f9f3 	bl	800c7e8 <USBD_CtlError>
        err++;
 800c402:	7afb      	ldrb	r3, [r7, #11]
 800c404:	3301      	adds	r3, #1
 800c406:	72fb      	strb	r3, [r7, #11]
      break;
 800c408:	e021      	b.n	800c44e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	7c1b      	ldrb	r3, [r3, #16]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10d      	bne.n	800c42e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c41a:	f107 0208 	add.w	r2, r7, #8
 800c41e:	4610      	mov	r0, r2
 800c420:	4798      	blx	r3
 800c422:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	3301      	adds	r3, #1
 800c428:	2207      	movs	r2, #7
 800c42a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c42c:	e00f      	b.n	800c44e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 f9d9 	bl	800c7e8 <USBD_CtlError>
        err++;
 800c436:	7afb      	ldrb	r3, [r7, #11]
 800c438:	3301      	adds	r3, #1
 800c43a:	72fb      	strb	r3, [r7, #11]
      break;
 800c43c:	e007      	b.n	800c44e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c43e:	6839      	ldr	r1, [r7, #0]
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f9d1 	bl	800c7e8 <USBD_CtlError>
      err++;
 800c446:	7afb      	ldrb	r3, [r7, #11]
 800c448:	3301      	adds	r3, #1
 800c44a:	72fb      	strb	r3, [r7, #11]
      break;
 800c44c:	bf00      	nop
  }

  if (err != 0U)
 800c44e:	7afb      	ldrb	r3, [r7, #11]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d11c      	bne.n	800c48e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c454:	893b      	ldrh	r3, [r7, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d011      	beq.n	800c47e <USBD_GetDescriptor+0x2b6>
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	88db      	ldrh	r3, [r3, #6]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00d      	beq.n	800c47e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	88da      	ldrh	r2, [r3, #6]
 800c466:	893b      	ldrh	r3, [r7, #8]
 800c468:	4293      	cmp	r3, r2
 800c46a:	bf28      	it	cs
 800c46c:	4613      	movcs	r3, r2
 800c46e:	b29b      	uxth	r3, r3
 800c470:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c472:	893b      	ldrh	r3, [r7, #8]
 800c474:	461a      	mov	r2, r3
 800c476:	68f9      	ldr	r1, [r7, #12]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 fa1f 	bl	800c8bc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	88db      	ldrh	r3, [r3, #6]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d104      	bne.n	800c490 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fa76 	bl	800c978 <USBD_CtlSendStatus>
 800c48c:	e000      	b.n	800c490 <USBD_GetDescriptor+0x2c8>
    return;
 800c48e:	bf00      	nop
    }
  }
}
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop

0800c498 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	889b      	ldrh	r3, [r3, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d130      	bne.n	800c50c <USBD_SetAddress+0x74>
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	88db      	ldrh	r3, [r3, #6]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d12c      	bne.n	800c50c <USBD_SetAddress+0x74>
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	885b      	ldrh	r3, [r3, #2]
 800c4b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4b8:	d828      	bhi.n	800c50c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	885b      	ldrh	r3, [r3, #2]
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4cc:	2b03      	cmp	r3, #3
 800c4ce:	d104      	bne.n	800c4da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c4d0:	6839      	ldr	r1, [r7, #0]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f988 	bl	800c7e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4d8:	e01d      	b.n	800c516 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	7bfa      	ldrb	r2, [r7, #15]
 800c4de:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c4e2:	7bfb      	ldrb	r3, [r7, #15]
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 fe52 	bl	800d190 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 fa43 	bl	800c978 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c4f2:	7bfb      	ldrb	r3, [r7, #15]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d004      	beq.n	800c502 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c500:	e009      	b.n	800c516 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2201      	movs	r2, #1
 800c506:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c50a:	e004      	b.n	800c516 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c50c:	6839      	ldr	r1, [r7, #0]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f96a 	bl	800c7e8 <USBD_CtlError>
  }
}
 800c514:	bf00      	nop
 800c516:	bf00      	nop
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	885b      	ldrh	r3, [r3, #2]
 800c52e:	b2da      	uxtb	r2, r3
 800c530:	4b41      	ldr	r3, [pc, #260]	@ (800c638 <USBD_SetConfig+0x118>)
 800c532:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c534:	4b40      	ldr	r3, [pc, #256]	@ (800c638 <USBD_SetConfig+0x118>)
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d904      	bls.n	800c546 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f952 	bl	800c7e8 <USBD_CtlError>
 800c544:	e075      	b.n	800c632 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c54c:	2b02      	cmp	r3, #2
 800c54e:	d002      	beq.n	800c556 <USBD_SetConfig+0x36>
 800c550:	2b03      	cmp	r3, #3
 800c552:	d023      	beq.n	800c59c <USBD_SetConfig+0x7c>
 800c554:	e062      	b.n	800c61c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c556:	4b38      	ldr	r3, [pc, #224]	@ (800c638 <USBD_SetConfig+0x118>)
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d01a      	beq.n	800c594 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c55e:	4b36      	ldr	r3, [pc, #216]	@ (800c638 <USBD_SetConfig+0x118>)
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	461a      	mov	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2203      	movs	r2, #3
 800c56c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c570:	4b31      	ldr	r3, [pc, #196]	@ (800c638 <USBD_SetConfig+0x118>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	4619      	mov	r1, r3
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7ff f9e7 	bl	800b94a <USBD_SetClassConfig>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b02      	cmp	r3, #2
 800c580:	d104      	bne.n	800c58c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c582:	6839      	ldr	r1, [r7, #0]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f92f 	bl	800c7e8 <USBD_CtlError>
            return;
 800c58a:	e052      	b.n	800c632 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f9f3 	bl	800c978 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c592:	e04e      	b.n	800c632 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 f9ef 	bl	800c978 <USBD_CtlSendStatus>
        break;
 800c59a:	e04a      	b.n	800c632 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c59c:	4b26      	ldr	r3, [pc, #152]	@ (800c638 <USBD_SetConfig+0x118>)
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d112      	bne.n	800c5ca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2202      	movs	r2, #2
 800c5a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c5ac:	4b22      	ldr	r3, [pc, #136]	@ (800c638 <USBD_SetConfig+0x118>)
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c5b6:	4b20      	ldr	r3, [pc, #128]	@ (800c638 <USBD_SetConfig+0x118>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7ff f9e3 	bl	800b988 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 f9d8 	bl	800c978 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c5c8:	e033      	b.n	800c632 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c5ca:	4b1b      	ldr	r3, [pc, #108]	@ (800c638 <USBD_SetConfig+0x118>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d01d      	beq.n	800c614 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	4619      	mov	r1, r3
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f7ff f9d1 	bl	800b988 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c5e6:	4b14      	ldr	r3, [pc, #80]	@ (800c638 <USBD_SetConfig+0x118>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c5f0:	4b11      	ldr	r3, [pc, #68]	@ (800c638 <USBD_SetConfig+0x118>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f7ff f9a7 	bl	800b94a <USBD_SetClassConfig>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d104      	bne.n	800c60c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c602:	6839      	ldr	r1, [r7, #0]
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f8ef 	bl	800c7e8 <USBD_CtlError>
            return;
 800c60a:	e012      	b.n	800c632 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 f9b3 	bl	800c978 <USBD_CtlSendStatus>
        break;
 800c612:	e00e      	b.n	800c632 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f9af 	bl	800c978 <USBD_CtlSendStatus>
        break;
 800c61a:	e00a      	b.n	800c632 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f8e2 	bl	800c7e8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c624:	4b04      	ldr	r3, [pc, #16]	@ (800c638 <USBD_SetConfig+0x118>)
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff f9ac 	bl	800b988 <USBD_ClrClassConfig>
        break;
 800c630:	bf00      	nop
    }
  }
}
 800c632:	3708      	adds	r7, #8
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	20000438 	.word	0x20000438

0800c63c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	88db      	ldrh	r3, [r3, #6]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d004      	beq.n	800c658 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f8c9 	bl	800c7e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c656:	e022      	b.n	800c69e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c65e:	2b02      	cmp	r3, #2
 800c660:	dc02      	bgt.n	800c668 <USBD_GetConfig+0x2c>
 800c662:	2b00      	cmp	r3, #0
 800c664:	dc03      	bgt.n	800c66e <USBD_GetConfig+0x32>
 800c666:	e015      	b.n	800c694 <USBD_GetConfig+0x58>
 800c668:	2b03      	cmp	r3, #3
 800c66a:	d00b      	beq.n	800c684 <USBD_GetConfig+0x48>
 800c66c:	e012      	b.n	800c694 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	3308      	adds	r3, #8
 800c678:	2201      	movs	r2, #1
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 f91d 	bl	800c8bc <USBD_CtlSendData>
        break;
 800c682:	e00c      	b.n	800c69e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	3304      	adds	r3, #4
 800c688:	2201      	movs	r2, #1
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 f915 	bl	800c8bc <USBD_CtlSendData>
        break;
 800c692:	e004      	b.n	800c69e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f8a6 	bl	800c7e8 <USBD_CtlError>
        break;
 800c69c:	bf00      	nop
}
 800c69e:	bf00      	nop
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b082      	sub	sp, #8
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d81e      	bhi.n	800c6fa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	88db      	ldrh	r3, [r3, #6]
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d004      	beq.n	800c6ce <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 f88e 	bl	800c7e8 <USBD_CtlError>
        break;
 800c6cc:	e01a      	b.n	800c704 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d005      	beq.n	800c6ea <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	f043 0202 	orr.w	r2, r3, #2
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	330c      	adds	r3, #12
 800c6ee:	2202      	movs	r2, #2
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f8e2 	bl	800c8bc <USBD_CtlSendData>
      break;
 800c6f8:	e004      	b.n	800c704 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c6fa:	6839      	ldr	r1, [r7, #0]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 f873 	bl	800c7e8 <USBD_CtlError>
      break;
 800c702:	bf00      	nop
  }
}
 800c704:	bf00      	nop
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	885b      	ldrh	r3, [r3, #2]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d106      	bne.n	800c72c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f926 	bl	800c978 <USBD_CtlSendStatus>
  }
}
 800c72c:	bf00      	nop
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c744:	3b01      	subs	r3, #1
 800c746:	2b02      	cmp	r3, #2
 800c748:	d80b      	bhi.n	800c762 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	885b      	ldrh	r3, [r3, #2]
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d10c      	bne.n	800c76c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f90c 	bl	800c978 <USBD_CtlSendStatus>
      }
      break;
 800c760:	e004      	b.n	800c76c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 f83f 	bl	800c7e8 <USBD_CtlError>
      break;
 800c76a:	e000      	b.n	800c76e <USBD_ClrFeature+0x3a>
      break;
 800c76c:	bf00      	nop
  }
}
 800c76e:	bf00      	nop
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c776:	b480      	push	{r7}
 800c778:	b083      	sub	sp, #12
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	781a      	ldrb	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	785a      	ldrb	r2, [r3, #1]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	3302      	adds	r3, #2
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	461a      	mov	r2, r3
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	3303      	adds	r3, #3
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	021b      	lsls	r3, r3, #8
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	4413      	add	r3, r2
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	3305      	adds	r3, #5
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	021b      	lsls	r3, r3, #8
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	4413      	add	r3, r2
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	3306      	adds	r3, #6
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	3307      	adds	r3, #7
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	021b      	lsls	r3, r3, #8
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	4413      	add	r3, r2
 800c7d8:	b29a      	uxth	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	80da      	strh	r2, [r3, #6]

}
 800c7de:	bf00      	nop
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bc80      	pop	{r7}
 800c7e6:	4770      	bx	lr

0800c7e8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c7f2:	2180      	movs	r1, #128	@ 0x80
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fc61 	bl	800d0bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fc5d 	bl	800d0bc <USBD_LL_StallEP>
}
 800c802:	bf00      	nop
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b086      	sub	sp, #24
 800c80e:	af00      	add	r7, sp, #0
 800c810:	60f8      	str	r0, [r7, #12]
 800c812:	60b9      	str	r1, [r7, #8]
 800c814:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c816:	2300      	movs	r3, #0
 800c818:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d032      	beq.n	800c886 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f000 f834 	bl	800c88e <USBD_GetLen>
 800c826:	4603      	mov	r3, r0
 800c828:	3301      	adds	r3, #1
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	b29a      	uxth	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c834:	7dfb      	ldrb	r3, [r7, #23]
 800c836:	1c5a      	adds	r2, r3, #1
 800c838:	75fa      	strb	r2, [r7, #23]
 800c83a:	461a      	mov	r2, r3
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	4413      	add	r3, r2
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	7812      	ldrb	r2, [r2, #0]
 800c844:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c846:	7dfb      	ldrb	r3, [r7, #23]
 800c848:	1c5a      	adds	r2, r3, #1
 800c84a:	75fa      	strb	r2, [r7, #23]
 800c84c:	461a      	mov	r2, r3
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	4413      	add	r3, r2
 800c852:	2203      	movs	r2, #3
 800c854:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c856:	e012      	b.n	800c87e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	1c5a      	adds	r2, r3, #1
 800c85c:	60fa      	str	r2, [r7, #12]
 800c85e:	7dfa      	ldrb	r2, [r7, #23]
 800c860:	1c51      	adds	r1, r2, #1
 800c862:	75f9      	strb	r1, [r7, #23]
 800c864:	4611      	mov	r1, r2
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	440a      	add	r2, r1
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	75fa      	strb	r2, [r7, #23]
 800c874:	461a      	mov	r2, r3
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	4413      	add	r3, r2
 800c87a:	2200      	movs	r2, #0
 800c87c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1e8      	bne.n	800c858 <USBD_GetString+0x4e>
    }
  }
}
 800c886:	bf00      	nop
 800c888:	3718      	adds	r7, #24
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c88e:	b480      	push	{r7}
 800c890:	b085      	sub	sp, #20
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c896:	2300      	movs	r3, #0
 800c898:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c89a:	e005      	b.n	800c8a8 <USBD_GetLen+0x1a>
  {
    len++;
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1f5      	bne.n	800c89c <USBD_GetLen+0xe>
  }

  return len;
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bc80      	pop	{r7}
 800c8ba:	4770      	bx	lr

0800c8bc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c8d2:	88fa      	ldrh	r2, [r7, #6]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c8d8:	88fa      	ldrh	r2, [r7, #6]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8de:	88fb      	ldrh	r3, [r7, #6]
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f000 fc72 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	4613      	mov	r3, r2
 800c900:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c902:	88fb      	ldrh	r3, [r7, #6]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	2100      	movs	r1, #0
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 fc60 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	4613      	mov	r3, r2
 800c924:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2203      	movs	r2, #3
 800c92a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c92e:	88fa      	ldrh	r2, [r7, #6]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c936:	88fa      	ldrh	r2, [r7, #6]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c93e:	88fb      	ldrh	r3, [r7, #6]
 800c940:	68ba      	ldr	r2, [r7, #8]
 800c942:	2100      	movs	r1, #0
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f000 fc65 	bl	800d214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	4613      	mov	r3, r2
 800c960:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c962:	88fb      	ldrh	r3, [r7, #6]
 800c964:	68ba      	ldr	r2, [r7, #8]
 800c966:	2100      	movs	r1, #0
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f000 fc53 	bl	800d214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2204      	movs	r2, #4
 800c984:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c988:	2300      	movs	r3, #0
 800c98a:	2200      	movs	r2, #0
 800c98c:	2100      	movs	r1, #0
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 fc1d 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b082      	sub	sp, #8
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2205      	movs	r2, #5
 800c9aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 fc2d 	bl	800d214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	4912      	ldr	r1, [pc, #72]	@ (800ca14 <MX_USB_DEVICE_Init+0x50>)
 800c9cc:	4812      	ldr	r0, [pc, #72]	@ (800ca18 <MX_USB_DEVICE_Init+0x54>)
 800c9ce:	f7fe ff62 	bl	800b896 <USBD_Init>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d001      	beq.n	800c9dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c9d8:	f7f7 f998 	bl	8003d0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c9dc:	490f      	ldr	r1, [pc, #60]	@ (800ca1c <MX_USB_DEVICE_Init+0x58>)
 800c9de:	480e      	ldr	r0, [pc, #56]	@ (800ca18 <MX_USB_DEVICE_Init+0x54>)
 800c9e0:	f7fe ff84 	bl	800b8ec <USBD_RegisterClass>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d001      	beq.n	800c9ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9ea:	f7f7 f98f 	bl	8003d0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9ee:	490c      	ldr	r1, [pc, #48]	@ (800ca20 <MX_USB_DEVICE_Init+0x5c>)
 800c9f0:	4809      	ldr	r0, [pc, #36]	@ (800ca18 <MX_USB_DEVICE_Init+0x54>)
 800c9f2:	f7fe feb5 	bl	800b760 <USBD_CDC_RegisterInterface>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9fc:	f7f7 f986 	bl	8003d0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca00:	4805      	ldr	r0, [pc, #20]	@ (800ca18 <MX_USB_DEVICE_Init+0x54>)
 800ca02:	f7fe ff8c 	bl	800b91e <USBD_Start>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d001      	beq.n	800ca10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca0c:	f7f7 f97e 	bl	8003d0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca10:	bf00      	nop
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	20000154 	.word	0x20000154
 800ca18:	2000043c 	.word	0x2000043c
 800ca1c:	20000040 	.word	0x20000040
 800ca20:	20000144 	.word	0x20000144

0800ca24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca28:	2200      	movs	r2, #0
 800ca2a:	4905      	ldr	r1, [pc, #20]	@ (800ca40 <CDC_Init_FS+0x1c>)
 800ca2c:	4805      	ldr	r0, [pc, #20]	@ (800ca44 <CDC_Init_FS+0x20>)
 800ca2e:	f7fe fead 	bl	800b78c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca32:	4905      	ldr	r1, [pc, #20]	@ (800ca48 <CDC_Init_FS+0x24>)
 800ca34:	4803      	ldr	r0, [pc, #12]	@ (800ca44 <CDC_Init_FS+0x20>)
 800ca36:	f7fe fec2 	bl	800b7be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	20000ae8 	.word	0x20000ae8
 800ca44:	2000043c 	.word	0x2000043c
 800ca48:	20000700 	.word	0x20000700

0800ca4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bc80      	pop	{r7}
 800ca58:	4770      	bx	lr
	...

0800ca5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	4603      	mov	r3, r0
 800ca64:	6039      	str	r1, [r7, #0]
 800ca66:	71fb      	strb	r3, [r7, #7]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca6c:	79fb      	ldrb	r3, [r7, #7]
 800ca6e:	2b23      	cmp	r3, #35	@ 0x23
 800ca70:	d84a      	bhi.n	800cb08 <CDC_Control_FS+0xac>
 800ca72:	a201      	add	r2, pc, #4	@ (adr r2, 800ca78 <CDC_Control_FS+0x1c>)
 800ca74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca78:	0800cb09 	.word	0x0800cb09
 800ca7c:	0800cb09 	.word	0x0800cb09
 800ca80:	0800cb09 	.word	0x0800cb09
 800ca84:	0800cb09 	.word	0x0800cb09
 800ca88:	0800cb09 	.word	0x0800cb09
 800ca8c:	0800cb09 	.word	0x0800cb09
 800ca90:	0800cb09 	.word	0x0800cb09
 800ca94:	0800cb09 	.word	0x0800cb09
 800ca98:	0800cb09 	.word	0x0800cb09
 800ca9c:	0800cb09 	.word	0x0800cb09
 800caa0:	0800cb09 	.word	0x0800cb09
 800caa4:	0800cb09 	.word	0x0800cb09
 800caa8:	0800cb09 	.word	0x0800cb09
 800caac:	0800cb09 	.word	0x0800cb09
 800cab0:	0800cb09 	.word	0x0800cb09
 800cab4:	0800cb09 	.word	0x0800cb09
 800cab8:	0800cb09 	.word	0x0800cb09
 800cabc:	0800cb09 	.word	0x0800cb09
 800cac0:	0800cb09 	.word	0x0800cb09
 800cac4:	0800cb09 	.word	0x0800cb09
 800cac8:	0800cb09 	.word	0x0800cb09
 800cacc:	0800cb09 	.word	0x0800cb09
 800cad0:	0800cb09 	.word	0x0800cb09
 800cad4:	0800cb09 	.word	0x0800cb09
 800cad8:	0800cb09 	.word	0x0800cb09
 800cadc:	0800cb09 	.word	0x0800cb09
 800cae0:	0800cb09 	.word	0x0800cb09
 800cae4:	0800cb09 	.word	0x0800cb09
 800cae8:	0800cb09 	.word	0x0800cb09
 800caec:	0800cb09 	.word	0x0800cb09
 800caf0:	0800cb09 	.word	0x0800cb09
 800caf4:	0800cb09 	.word	0x0800cb09
 800caf8:	0800cb09 	.word	0x0800cb09
 800cafc:	0800cb09 	.word	0x0800cb09
 800cb00:	0800cb09 	.word	0x0800cb09
 800cb04:	0800cb09 	.word	0x0800cb09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb08:	bf00      	nop
  }

  return (USBD_OK);
 800cb0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bc80      	pop	{r7}
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop

0800cb18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb22:	6879      	ldr	r1, [r7, #4]
 800cb24:	480a      	ldr	r0, [pc, #40]	@ (800cb50 <CDC_Receive_FS+0x38>)
 800cb26:	f7fe fe4a 	bl	800b7be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb2a:	4809      	ldr	r0, [pc, #36]	@ (800cb50 <CDC_Receive_FS+0x38>)
 800cb2c:	f7fe fe89 	bl	800b842 <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d006      	beq.n	800cb46 <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	4905      	ldr	r1, [pc, #20]	@ (800cb54 <CDC_Receive_FS+0x3c>)
 800cb40:	4805      	ldr	r0, [pc, #20]	@ (800cb58 <CDC_Receive_FS+0x40>)
 800cb42:	f000 fc71 	bl	800d428 <memcpy>
  }
  return (USBD_OK);
 800cb46:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	2000043c 	.word	0x2000043c
 800cb54:	20000700 	.word	0x20000700
 800cb58:	20000350 	.word	0x20000350

0800cb5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	460b      	mov	r3, r1
 800cb66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cb6c:	4b0d      	ldr	r3, [pc, #52]	@ (800cba4 <CDC_Transmit_FS+0x48>)
 800cb6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e00b      	b.n	800cb9a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cb82:	887b      	ldrh	r3, [r7, #2]
 800cb84:	461a      	mov	r2, r3
 800cb86:	6879      	ldr	r1, [r7, #4]
 800cb88:	4806      	ldr	r0, [pc, #24]	@ (800cba4 <CDC_Transmit_FS+0x48>)
 800cb8a:	f7fe fdff 	bl	800b78c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cb8e:	4805      	ldr	r0, [pc, #20]	@ (800cba4 <CDC_Transmit_FS+0x48>)
 800cb90:	f7fe fe28 	bl	800b7e4 <USBD_CDC_TransmitPacket>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	2000043c 	.word	0x2000043c

0800cba8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	4603      	mov	r3, r0
 800cbb0:	6039      	str	r1, [r7, #0]
 800cbb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	2212      	movs	r2, #18
 800cbb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbba:	4b03      	ldr	r3, [pc, #12]	@ (800cbc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bc80      	pop	{r7}
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	20000170 	.word	0x20000170

0800cbcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	6039      	str	r1, [r7, #0]
 800cbd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2204      	movs	r2, #4
 800cbdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbde:	4b03      	ldr	r3, [pc, #12]	@ (800cbec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bc80      	pop	{r7}
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	20000184 	.word	0x20000184

0800cbf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	6039      	str	r1, [r7, #0]
 800cbfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbfc:	79fb      	ldrb	r3, [r7, #7]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d105      	bne.n	800cc0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc02:	683a      	ldr	r2, [r7, #0]
 800cc04:	4907      	ldr	r1, [pc, #28]	@ (800cc24 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc06:	4808      	ldr	r0, [pc, #32]	@ (800cc28 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc08:	f7ff fdff 	bl	800c80a <USBD_GetString>
 800cc0c:	e004      	b.n	800cc18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	4904      	ldr	r1, [pc, #16]	@ (800cc24 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc12:	4805      	ldr	r0, [pc, #20]	@ (800cc28 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc14:	f7ff fdf9 	bl	800c80a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc18:	4b02      	ldr	r3, [pc, #8]	@ (800cc24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	20000ed0 	.word	0x20000ed0
 800cc28:	0800e724 	.word	0x0800e724

0800cc2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	6039      	str	r1, [r7, #0]
 800cc36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	4904      	ldr	r1, [pc, #16]	@ (800cc4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc3c:	4804      	ldr	r0, [pc, #16]	@ (800cc50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc3e:	f7ff fde4 	bl	800c80a <USBD_GetString>
  return USBD_StrDesc;
 800cc42:	4b02      	ldr	r3, [pc, #8]	@ (800cc4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	20000ed0 	.word	0x20000ed0
 800cc50:	0800e73c 	.word	0x0800e73c

0800cc54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	6039      	str	r1, [r7, #0]
 800cc5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	221a      	movs	r2, #26
 800cc64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc66:	f000 f843 	bl	800ccf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc6a:	4b02      	ldr	r3, [pc, #8]	@ (800cc74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	20000188 	.word	0x20000188

0800cc78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	6039      	str	r1, [r7, #0]
 800cc82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d105      	bne.n	800cc96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	4907      	ldr	r1, [pc, #28]	@ (800ccac <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc8e:	4808      	ldr	r0, [pc, #32]	@ (800ccb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc90:	f7ff fdbb 	bl	800c80a <USBD_GetString>
 800cc94:	e004      	b.n	800cca0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	4904      	ldr	r1, [pc, #16]	@ (800ccac <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc9a:	4805      	ldr	r0, [pc, #20]	@ (800ccb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc9c:	f7ff fdb5 	bl	800c80a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cca0:	4b02      	ldr	r3, [pc, #8]	@ (800ccac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	20000ed0 	.word	0x20000ed0
 800ccb0:	0800e750 	.word	0x0800e750

0800ccb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	6039      	str	r1, [r7, #0]
 800ccbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d105      	bne.n	800ccd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	4907      	ldr	r1, [pc, #28]	@ (800cce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccca:	4808      	ldr	r0, [pc, #32]	@ (800ccec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cccc:	f7ff fd9d 	bl	800c80a <USBD_GetString>
 800ccd0:	e004      	b.n	800ccdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	4904      	ldr	r1, [pc, #16]	@ (800cce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccd6:	4805      	ldr	r0, [pc, #20]	@ (800ccec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccd8:	f7ff fd97 	bl	800c80a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccdc:	4b02      	ldr	r3, [pc, #8]	@ (800cce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	20000ed0 	.word	0x20000ed0
 800ccec:	0800e75c 	.word	0x0800e75c

0800ccf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccf6:	4b0f      	ldr	r3, [pc, #60]	@ (800cd34 <Get_SerialNum+0x44>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ccfc:	4b0e      	ldr	r3, [pc, #56]	@ (800cd38 <Get_SerialNum+0x48>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd02:	4b0e      	ldr	r3, [pc, #56]	@ (800cd3c <Get_SerialNum+0x4c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d009      	beq.n	800cd2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd16:	2208      	movs	r2, #8
 800cd18:	4909      	ldr	r1, [pc, #36]	@ (800cd40 <Get_SerialNum+0x50>)
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f000 f814 	bl	800cd48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd20:	2204      	movs	r2, #4
 800cd22:	4908      	ldr	r1, [pc, #32]	@ (800cd44 <Get_SerialNum+0x54>)
 800cd24:	68b8      	ldr	r0, [r7, #8]
 800cd26:	f000 f80f 	bl	800cd48 <IntToUnicode>
  }
}
 800cd2a:	bf00      	nop
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	1ffff7e8 	.word	0x1ffff7e8
 800cd38:	1ffff7ec 	.word	0x1ffff7ec
 800cd3c:	1ffff7f0 	.word	0x1ffff7f0
 800cd40:	2000018a 	.word	0x2000018a
 800cd44:	2000019a 	.word	0x2000019a

0800cd48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b087      	sub	sp, #28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	4613      	mov	r3, r2
 800cd54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd56:	2300      	movs	r3, #0
 800cd58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	75fb      	strb	r3, [r7, #23]
 800cd5e:	e027      	b.n	800cdb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	0f1b      	lsrs	r3, r3, #28
 800cd64:	2b09      	cmp	r3, #9
 800cd66:	d80b      	bhi.n	800cd80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	0f1b      	lsrs	r3, r3, #28
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
 800cd70:	005b      	lsls	r3, r3, #1
 800cd72:	4619      	mov	r1, r3
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	440b      	add	r3, r1
 800cd78:	3230      	adds	r2, #48	@ 0x30
 800cd7a:	b2d2      	uxtb	r2, r2
 800cd7c:	701a      	strb	r2, [r3, #0]
 800cd7e:	e00a      	b.n	800cd96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	0f1b      	lsrs	r3, r3, #28
 800cd84:	b2da      	uxtb	r2, r3
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	440b      	add	r3, r1
 800cd90:	3237      	adds	r2, #55	@ 0x37
 800cd92:	b2d2      	uxtb	r2, r2
 800cd94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	011b      	lsls	r3, r3, #4
 800cd9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
 800cd9e:	005b      	lsls	r3, r3, #1
 800cda0:	3301      	adds	r3, #1
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	4413      	add	r3, r2
 800cda6:	2200      	movs	r2, #0
 800cda8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	3301      	adds	r3, #1
 800cdae:	75fb      	strb	r3, [r7, #23]
 800cdb0:	7dfa      	ldrb	r2, [r7, #23]
 800cdb2:	79fb      	ldrb	r3, [r7, #7]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d3d3      	bcc.n	800cd60 <IntToUnicode+0x18>
  }
}
 800cdb8:	bf00      	nop
 800cdba:	bf00      	nop
 800cdbc:	371c      	adds	r7, #28
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bc80      	pop	{r7}
 800cdc2:	4770      	bx	lr

0800cdc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a0d      	ldr	r2, [pc, #52]	@ (800ce08 <HAL_PCD_MspInit+0x44>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d113      	bne.n	800cdfe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cdd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ce0c <HAL_PCD_MspInit+0x48>)
 800cdd8:	69db      	ldr	r3, [r3, #28]
 800cdda:	4a0c      	ldr	r2, [pc, #48]	@ (800ce0c <HAL_PCD_MspInit+0x48>)
 800cddc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cde0:	61d3      	str	r3, [r2, #28]
 800cde2:	4b0a      	ldr	r3, [pc, #40]	@ (800ce0c <HAL_PCD_MspInit+0x48>)
 800cde4:	69db      	ldr	r3, [r3, #28]
 800cde6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800cdee:	2200      	movs	r2, #0
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	2014      	movs	r0, #20
 800cdf4:	f7f7 fd6f 	bl	80048d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cdf8:	2014      	movs	r0, #20
 800cdfa:	f7f7 fd88 	bl	800490e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cdfe:	bf00      	nop
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	40005c00 	.word	0x40005c00
 800ce0c:	40021000 	.word	0x40021000

0800ce10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800ce24:	4619      	mov	r1, r3
 800ce26:	4610      	mov	r0, r2
 800ce28:	f7fe fdc1 	bl	800b9ae <USBD_LL_SetupStage>
}
 800ce2c:	bf00      	nop
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800ce46:	78fa      	ldrb	r2, [r7, #3]
 800ce48:	6879      	ldr	r1, [r7, #4]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	4413      	add	r3, r2
 800ce50:	00db      	lsls	r3, r3, #3
 800ce52:	440b      	add	r3, r1
 800ce54:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	78fb      	ldrb	r3, [r7, #3]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	f7fe fdf3 	bl	800ba48 <USBD_LL_DataOutStage>
}
 800ce62:	bf00      	nop
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	460b      	mov	r3, r1
 800ce74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800ce7c:	78fa      	ldrb	r2, [r7, #3]
 800ce7e:	6879      	ldr	r1, [r7, #4]
 800ce80:	4613      	mov	r3, r2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	4413      	add	r3, r2
 800ce86:	00db      	lsls	r3, r3, #3
 800ce88:	440b      	add	r3, r1
 800ce8a:	333c      	adds	r3, #60	@ 0x3c
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	78fb      	ldrb	r3, [r7, #3]
 800ce90:	4619      	mov	r1, r3
 800ce92:	f7fe fe4a 	bl	800bb2a <USBD_LL_DataInStage>
}
 800ce96:	bf00      	nop
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b082      	sub	sp, #8
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fe ff5a 	bl	800bd66 <USBD_LL_SOF>
}
 800ceb2:	bf00      	nop
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b084      	sub	sp, #16
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cec2:	2301      	movs	r3, #1
 800cec4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d001      	beq.n	800ced2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cece:	f7f6 ff1d 	bl	8003d0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800ced8:	7bfa      	ldrb	r2, [r7, #15]
 800ceda:	4611      	mov	r1, r2
 800cedc:	4618      	mov	r0, r3
 800cede:	f7fe ff0a 	bl	800bcf6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe fec3 	bl	800bc74 <USBD_LL_Reset>
}
 800ceee:	bf00      	nop
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
	...

0800cef8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fe ff04 	bl	800bd14 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	699b      	ldr	r3, [r3, #24]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d005      	beq.n	800cf20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf14:	4b04      	ldr	r3, [pc, #16]	@ (800cf28 <HAL_PCD_SuspendCallback+0x30>)
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	4a03      	ldr	r2, [pc, #12]	@ (800cf28 <HAL_PCD_SuspendCallback+0x30>)
 800cf1a:	f043 0306 	orr.w	r3, r3, #6
 800cf1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf20:	bf00      	nop
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	e000ed00 	.word	0xe000ed00

0800cf2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fe fefe 	bl	800bd3c <USBD_LL_Resume>
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cf50:	4a28      	ldr	r2, [pc, #160]	@ (800cff4 <USBD_LL_Init+0xac>)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a26      	ldr	r2, [pc, #152]	@ (800cff4 <USBD_LL_Init+0xac>)
 800cf5c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cf60:	4b24      	ldr	r3, [pc, #144]	@ (800cff4 <USBD_LL_Init+0xac>)
 800cf62:	4a25      	ldr	r2, [pc, #148]	@ (800cff8 <USBD_LL_Init+0xb0>)
 800cf64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cf66:	4b23      	ldr	r3, [pc, #140]	@ (800cff4 <USBD_LL_Init+0xac>)
 800cf68:	2208      	movs	r2, #8
 800cf6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cf6c:	4b21      	ldr	r3, [pc, #132]	@ (800cff4 <USBD_LL_Init+0xac>)
 800cf6e:	2202      	movs	r2, #2
 800cf70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cf72:	4b20      	ldr	r3, [pc, #128]	@ (800cff4 <USBD_LL_Init+0xac>)
 800cf74:	2200      	movs	r2, #0
 800cf76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cf78:	4b1e      	ldr	r3, [pc, #120]	@ (800cff4 <USBD_LL_Init+0xac>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cf7e:	4b1d      	ldr	r3, [pc, #116]	@ (800cff4 <USBD_LL_Init+0xac>)
 800cf80:	2200      	movs	r2, #0
 800cf82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cf84:	481b      	ldr	r0, [pc, #108]	@ (800cff4 <USBD_LL_Init+0xac>)
 800cf86:	f7f8 fcfd 	bl	8005984 <HAL_PCD_Init>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cf90:	f7f6 febc 	bl	8003d0c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cf9a:	2318      	movs	r3, #24
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	2100      	movs	r1, #0
 800cfa0:	f7fa f83c 	bl	800701c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfaa:	2358      	movs	r3, #88	@ 0x58
 800cfac:	2200      	movs	r2, #0
 800cfae:	2180      	movs	r1, #128	@ 0x80
 800cfb0:	f7fa f834 	bl	800701c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfba:	23c0      	movs	r3, #192	@ 0xc0
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	2181      	movs	r1, #129	@ 0x81
 800cfc0:	f7fa f82c 	bl	800701c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cfce:	2200      	movs	r2, #0
 800cfd0:	2101      	movs	r1, #1
 800cfd2:	f7fa f823 	bl	800701c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cfdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	2182      	movs	r1, #130	@ 0x82
 800cfe4:	f7fa f81a 	bl	800701c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	200010d0 	.word	0x200010d0
 800cff8:	40005c00 	.word	0x40005c00

0800cffc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d004:	2300      	movs	r3, #0
 800d006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d008:	2300      	movs	r3, #0
 800d00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d012:	4618      	mov	r0, r3
 800d014:	f7f8 fdc1 	bl	8005b9a <HAL_PCD_Start>
 800d018:	4603      	mov	r3, r0
 800d01a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	4618      	mov	r0, r3
 800d020:	f000 f94e 	bl	800d2c0 <USBD_Get_USB_Status>
 800d024:	4603      	mov	r3, r0
 800d026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d028:	7bbb      	ldrb	r3, [r7, #14]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	4608      	mov	r0, r1
 800d03c:	4611      	mov	r1, r2
 800d03e:	461a      	mov	r2, r3
 800d040:	4603      	mov	r3, r0
 800d042:	70fb      	strb	r3, [r7, #3]
 800d044:	460b      	mov	r3, r1
 800d046:	70bb      	strb	r3, [r7, #2]
 800d048:	4613      	mov	r3, r2
 800d04a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d04c:	2300      	movs	r3, #0
 800d04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d05a:	78bb      	ldrb	r3, [r7, #2]
 800d05c:	883a      	ldrh	r2, [r7, #0]
 800d05e:	78f9      	ldrb	r1, [r7, #3]
 800d060:	f7f8 ff39 	bl	8005ed6 <HAL_PCD_EP_Open>
 800d064:	4603      	mov	r3, r0
 800d066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d068:	7bfb      	ldrb	r3, [r7, #15]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f000 f928 	bl	800d2c0 <USBD_Get_USB_Status>
 800d070:	4603      	mov	r3, r0
 800d072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d074:	7bbb      	ldrb	r3, [r7, #14]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b084      	sub	sp, #16
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	460b      	mov	r3, r1
 800d088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d08e:	2300      	movs	r3, #0
 800d090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d098:	78fa      	ldrb	r2, [r7, #3]
 800d09a:	4611      	mov	r1, r2
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7f8 ff80 	bl	8005fa2 <HAL_PCD_EP_Close>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0a6:	7bfb      	ldrb	r3, [r7, #15]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f000 f909 	bl	800d2c0 <USBD_Get_USB_Status>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d0d6:	78fa      	ldrb	r2, [r7, #3]
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f9 f840 	bl	8006160 <HAL_PCD_EP_SetStall>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0e4:	7bfb      	ldrb	r3, [r7, #15]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 f8ea 	bl	800d2c0 <USBD_Get_USB_Status>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b084      	sub	sp, #16
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	460b      	mov	r3, r1
 800d104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d106:	2300      	movs	r3, #0
 800d108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d114:	78fa      	ldrb	r2, [r7, #3]
 800d116:	4611      	mov	r1, r2
 800d118:	4618      	mov	r0, r3
 800d11a:	f7f9 f881 	bl	8006220 <HAL_PCD_EP_ClrStall>
 800d11e:	4603      	mov	r3, r0
 800d120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d122:	7bfb      	ldrb	r3, [r7, #15]
 800d124:	4618      	mov	r0, r3
 800d126:	f000 f8cb 	bl	800d2c0 <USBD_Get_USB_Status>
 800d12a:	4603      	mov	r3, r0
 800d12c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d12e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	460b      	mov	r3, r1
 800d142:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d14a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d14c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d150:	2b00      	cmp	r3, #0
 800d152:	da0c      	bge.n	800d16e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d154:	78fb      	ldrb	r3, [r7, #3]
 800d156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d15a:	68f9      	ldr	r1, [r7, #12]
 800d15c:	1c5a      	adds	r2, r3, #1
 800d15e:	4613      	mov	r3, r2
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	4413      	add	r3, r2
 800d164:	00db      	lsls	r3, r3, #3
 800d166:	440b      	add	r3, r1
 800d168:	3302      	adds	r3, #2
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	e00b      	b.n	800d186 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d16e:	78fb      	ldrb	r3, [r7, #3]
 800d170:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d174:	68f9      	ldr	r1, [r7, #12]
 800d176:	4613      	mov	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4413      	add	r3, r2
 800d17c:	00db      	lsls	r3, r3, #3
 800d17e:	440b      	add	r3, r1
 800d180:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800d184:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d186:	4618      	mov	r0, r3
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bc80      	pop	{r7}
 800d18e:	4770      	bx	lr

0800d190 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d1aa:	78fa      	ldrb	r2, [r7, #3]
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7f8 fe6c 	bl	8005e8c <HAL_PCD_SetAddress>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f000 f880 	bl	800d2c0 <USBD_Get_USB_Status>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b086      	sub	sp, #24
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	607a      	str	r2, [r7, #4]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	460b      	mov	r3, r1
 800d1dc:	72fb      	strb	r3, [r7, #11]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d1f0:	893b      	ldrh	r3, [r7, #8]
 800d1f2:	7af9      	ldrb	r1, [r7, #11]
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	f7f8 ff70 	bl	80060da <HAL_PCD_EP_Transmit>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1fe:	7dfb      	ldrb	r3, [r7, #23]
 800d200:	4618      	mov	r0, r3
 800d202:	f000 f85d 	bl	800d2c0 <USBD_Get_USB_Status>
 800d206:	4603      	mov	r3, r0
 800d208:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d20a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3718      	adds	r7, #24
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	607a      	str	r2, [r7, #4]
 800d21e:	461a      	mov	r2, r3
 800d220:	460b      	mov	r3, r1
 800d222:	72fb      	strb	r3, [r7, #11]
 800d224:	4613      	mov	r3, r2
 800d226:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d228:	2300      	movs	r3, #0
 800d22a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d22c:	2300      	movs	r3, #0
 800d22e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d236:	893b      	ldrh	r3, [r7, #8]
 800d238:	7af9      	ldrb	r1, [r7, #11]
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	f7f8 fef9 	bl	8006032 <HAL_PCD_EP_Receive>
 800d240:	4603      	mov	r3, r0
 800d242:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d244:	7dfb      	ldrb	r3, [r7, #23]
 800d246:	4618      	mov	r0, r3
 800d248:	f000 f83a 	bl	800d2c0 <USBD_Get_USB_Status>
 800d24c:	4603      	mov	r3, r0
 800d24e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d250:	7dbb      	ldrb	r3, [r7, #22]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3718      	adds	r7, #24
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b082      	sub	sp, #8
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	460b      	mov	r3, r1
 800d264:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d26c:	78fa      	ldrb	r2, [r7, #3]
 800d26e:	4611      	mov	r1, r2
 800d270:	4618      	mov	r0, r3
 800d272:	f7f8 ff1b 	bl	80060ac <HAL_PCD_EP_GetRxCount>
 800d276:	4603      	mov	r3, r0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d288:	4b02      	ldr	r3, [pc, #8]	@ (800d294 <USBD_static_malloc+0x14>)
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	bc80      	pop	{r7}
 800d292:	4770      	bx	lr
 800d294:	200013bc 	.word	0x200013bc

0800d298 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]

}
 800d2a0:	bf00      	nop
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bc80      	pop	{r7}
 800d2a8:	4770      	bx	lr

0800d2aa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2aa:	b480      	push	{r7}
 800d2ac:	b083      	sub	sp, #12
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d2b6:	bf00      	nop
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bc80      	pop	{r7}
 800d2be:	4770      	bx	lr

0800d2c0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b085      	sub	sp, #20
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2ce:	79fb      	ldrb	r3, [r7, #7]
 800d2d0:	2b03      	cmp	r3, #3
 800d2d2:	d817      	bhi.n	800d304 <USBD_Get_USB_Status+0x44>
 800d2d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d2dc <USBD_Get_USB_Status+0x1c>)
 800d2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2da:	bf00      	nop
 800d2dc:	0800d2ed 	.word	0x0800d2ed
 800d2e0:	0800d2f3 	.word	0x0800d2f3
 800d2e4:	0800d2f9 	.word	0x0800d2f9
 800d2e8:	0800d2ff 	.word	0x0800d2ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d2f0:	e00b      	b.n	800d30a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2f2:	2302      	movs	r3, #2
 800d2f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d2f6:	e008      	b.n	800d30a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d2fc:	e005      	b.n	800d30a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2fe:	2302      	movs	r3, #2
 800d300:	73fb      	strb	r3, [r7, #15]
    break;
 800d302:	e002      	b.n	800d30a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d304:	2302      	movs	r3, #2
 800d306:	73fb      	strb	r3, [r7, #15]
    break;
 800d308:	bf00      	nop
  }
  return usb_status;
 800d30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3714      	adds	r7, #20
 800d310:	46bd      	mov	sp, r7
 800d312:	bc80      	pop	{r7}
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop

0800d318 <sniprintf>:
 800d318:	b40c      	push	{r2, r3}
 800d31a:	b530      	push	{r4, r5, lr}
 800d31c:	4b17      	ldr	r3, [pc, #92]	@ (800d37c <sniprintf+0x64>)
 800d31e:	1e0c      	subs	r4, r1, #0
 800d320:	681d      	ldr	r5, [r3, #0]
 800d322:	b09d      	sub	sp, #116	@ 0x74
 800d324:	da08      	bge.n	800d338 <sniprintf+0x20>
 800d326:	238b      	movs	r3, #139	@ 0x8b
 800d328:	f04f 30ff 	mov.w	r0, #4294967295
 800d32c:	602b      	str	r3, [r5, #0]
 800d32e:	b01d      	add	sp, #116	@ 0x74
 800d330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d334:	b002      	add	sp, #8
 800d336:	4770      	bx	lr
 800d338:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d33c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d340:	bf0c      	ite	eq
 800d342:	4623      	moveq	r3, r4
 800d344:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d348:	9304      	str	r3, [sp, #16]
 800d34a:	9307      	str	r3, [sp, #28]
 800d34c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d350:	9002      	str	r0, [sp, #8]
 800d352:	9006      	str	r0, [sp, #24]
 800d354:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d358:	4628      	mov	r0, r5
 800d35a:	ab21      	add	r3, sp, #132	@ 0x84
 800d35c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d35e:	a902      	add	r1, sp, #8
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	f000 f9c1 	bl	800d6e8 <_svfiprintf_r>
 800d366:	1c43      	adds	r3, r0, #1
 800d368:	bfbc      	itt	lt
 800d36a:	238b      	movlt	r3, #139	@ 0x8b
 800d36c:	602b      	strlt	r3, [r5, #0]
 800d36e:	2c00      	cmp	r4, #0
 800d370:	d0dd      	beq.n	800d32e <sniprintf+0x16>
 800d372:	2200      	movs	r2, #0
 800d374:	9b02      	ldr	r3, [sp, #8]
 800d376:	701a      	strb	r2, [r3, #0]
 800d378:	e7d9      	b.n	800d32e <sniprintf+0x16>
 800d37a:	bf00      	nop
 800d37c:	200001a4 	.word	0x200001a4

0800d380 <siprintf>:
 800d380:	b40e      	push	{r1, r2, r3}
 800d382:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d386:	b500      	push	{lr}
 800d388:	b09c      	sub	sp, #112	@ 0x70
 800d38a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d38c:	9002      	str	r0, [sp, #8]
 800d38e:	9006      	str	r0, [sp, #24]
 800d390:	9107      	str	r1, [sp, #28]
 800d392:	9104      	str	r1, [sp, #16]
 800d394:	4808      	ldr	r0, [pc, #32]	@ (800d3b8 <siprintf+0x38>)
 800d396:	4909      	ldr	r1, [pc, #36]	@ (800d3bc <siprintf+0x3c>)
 800d398:	f853 2b04 	ldr.w	r2, [r3], #4
 800d39c:	9105      	str	r1, [sp, #20]
 800d39e:	6800      	ldr	r0, [r0, #0]
 800d3a0:	a902      	add	r1, sp, #8
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	f000 f9a0 	bl	800d6e8 <_svfiprintf_r>
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	9b02      	ldr	r3, [sp, #8]
 800d3ac:	701a      	strb	r2, [r3, #0]
 800d3ae:	b01c      	add	sp, #112	@ 0x70
 800d3b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3b4:	b003      	add	sp, #12
 800d3b6:	4770      	bx	lr
 800d3b8:	200001a4 	.word	0x200001a4
 800d3bc:	ffff0208 	.word	0xffff0208

0800d3c0 <memset>:
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	4402      	add	r2, r0
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d100      	bne.n	800d3ca <memset+0xa>
 800d3c8:	4770      	bx	lr
 800d3ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d3ce:	e7f9      	b.n	800d3c4 <memset+0x4>

0800d3d0 <__errno>:
 800d3d0:	4b01      	ldr	r3, [pc, #4]	@ (800d3d8 <__errno+0x8>)
 800d3d2:	6818      	ldr	r0, [r3, #0]
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	200001a4 	.word	0x200001a4

0800d3dc <__libc_init_array>:
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	2600      	movs	r6, #0
 800d3e0:	4d0c      	ldr	r5, [pc, #48]	@ (800d414 <__libc_init_array+0x38>)
 800d3e2:	4c0d      	ldr	r4, [pc, #52]	@ (800d418 <__libc_init_array+0x3c>)
 800d3e4:	1b64      	subs	r4, r4, r5
 800d3e6:	10a4      	asrs	r4, r4, #2
 800d3e8:	42a6      	cmp	r6, r4
 800d3ea:	d109      	bne.n	800d400 <__libc_init_array+0x24>
 800d3ec:	f000 fc78 	bl	800dce0 <_init>
 800d3f0:	2600      	movs	r6, #0
 800d3f2:	4d0a      	ldr	r5, [pc, #40]	@ (800d41c <__libc_init_array+0x40>)
 800d3f4:	4c0a      	ldr	r4, [pc, #40]	@ (800d420 <__libc_init_array+0x44>)
 800d3f6:	1b64      	subs	r4, r4, r5
 800d3f8:	10a4      	asrs	r4, r4, #2
 800d3fa:	42a6      	cmp	r6, r4
 800d3fc:	d105      	bne.n	800d40a <__libc_init_array+0x2e>
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}
 800d400:	f855 3b04 	ldr.w	r3, [r5], #4
 800d404:	4798      	blx	r3
 800d406:	3601      	adds	r6, #1
 800d408:	e7ee      	b.n	800d3e8 <__libc_init_array+0xc>
 800d40a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d40e:	4798      	blx	r3
 800d410:	3601      	adds	r6, #1
 800d412:	e7f2      	b.n	800d3fa <__libc_init_array+0x1e>
 800d414:	0800e7d0 	.word	0x0800e7d0
 800d418:	0800e7d0 	.word	0x0800e7d0
 800d41c:	0800e7d0 	.word	0x0800e7d0
 800d420:	0800e7d4 	.word	0x0800e7d4

0800d424 <__retarget_lock_acquire_recursive>:
 800d424:	4770      	bx	lr

0800d426 <__retarget_lock_release_recursive>:
 800d426:	4770      	bx	lr

0800d428 <memcpy>:
 800d428:	440a      	add	r2, r1
 800d42a:	4291      	cmp	r1, r2
 800d42c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d430:	d100      	bne.n	800d434 <memcpy+0xc>
 800d432:	4770      	bx	lr
 800d434:	b510      	push	{r4, lr}
 800d436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d43a:	4291      	cmp	r1, r2
 800d43c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d440:	d1f9      	bne.n	800d436 <memcpy+0xe>
 800d442:	bd10      	pop	{r4, pc}

0800d444 <_free_r>:
 800d444:	b538      	push	{r3, r4, r5, lr}
 800d446:	4605      	mov	r5, r0
 800d448:	2900      	cmp	r1, #0
 800d44a:	d040      	beq.n	800d4ce <_free_r+0x8a>
 800d44c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d450:	1f0c      	subs	r4, r1, #4
 800d452:	2b00      	cmp	r3, #0
 800d454:	bfb8      	it	lt
 800d456:	18e4      	addlt	r4, r4, r3
 800d458:	f000 f8de 	bl	800d618 <__malloc_lock>
 800d45c:	4a1c      	ldr	r2, [pc, #112]	@ (800d4d0 <_free_r+0x8c>)
 800d45e:	6813      	ldr	r3, [r2, #0]
 800d460:	b933      	cbnz	r3, 800d470 <_free_r+0x2c>
 800d462:	6063      	str	r3, [r4, #4]
 800d464:	6014      	str	r4, [r2, #0]
 800d466:	4628      	mov	r0, r5
 800d468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d46c:	f000 b8da 	b.w	800d624 <__malloc_unlock>
 800d470:	42a3      	cmp	r3, r4
 800d472:	d908      	bls.n	800d486 <_free_r+0x42>
 800d474:	6820      	ldr	r0, [r4, #0]
 800d476:	1821      	adds	r1, r4, r0
 800d478:	428b      	cmp	r3, r1
 800d47a:	bf01      	itttt	eq
 800d47c:	6819      	ldreq	r1, [r3, #0]
 800d47e:	685b      	ldreq	r3, [r3, #4]
 800d480:	1809      	addeq	r1, r1, r0
 800d482:	6021      	streq	r1, [r4, #0]
 800d484:	e7ed      	b.n	800d462 <_free_r+0x1e>
 800d486:	461a      	mov	r2, r3
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	b10b      	cbz	r3, 800d490 <_free_r+0x4c>
 800d48c:	42a3      	cmp	r3, r4
 800d48e:	d9fa      	bls.n	800d486 <_free_r+0x42>
 800d490:	6811      	ldr	r1, [r2, #0]
 800d492:	1850      	adds	r0, r2, r1
 800d494:	42a0      	cmp	r0, r4
 800d496:	d10b      	bne.n	800d4b0 <_free_r+0x6c>
 800d498:	6820      	ldr	r0, [r4, #0]
 800d49a:	4401      	add	r1, r0
 800d49c:	1850      	adds	r0, r2, r1
 800d49e:	4283      	cmp	r3, r0
 800d4a0:	6011      	str	r1, [r2, #0]
 800d4a2:	d1e0      	bne.n	800d466 <_free_r+0x22>
 800d4a4:	6818      	ldr	r0, [r3, #0]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	4408      	add	r0, r1
 800d4aa:	6010      	str	r0, [r2, #0]
 800d4ac:	6053      	str	r3, [r2, #4]
 800d4ae:	e7da      	b.n	800d466 <_free_r+0x22>
 800d4b0:	d902      	bls.n	800d4b8 <_free_r+0x74>
 800d4b2:	230c      	movs	r3, #12
 800d4b4:	602b      	str	r3, [r5, #0]
 800d4b6:	e7d6      	b.n	800d466 <_free_r+0x22>
 800d4b8:	6820      	ldr	r0, [r4, #0]
 800d4ba:	1821      	adds	r1, r4, r0
 800d4bc:	428b      	cmp	r3, r1
 800d4be:	bf01      	itttt	eq
 800d4c0:	6819      	ldreq	r1, [r3, #0]
 800d4c2:	685b      	ldreq	r3, [r3, #4]
 800d4c4:	1809      	addeq	r1, r1, r0
 800d4c6:	6021      	streq	r1, [r4, #0]
 800d4c8:	6063      	str	r3, [r4, #4]
 800d4ca:	6054      	str	r4, [r2, #4]
 800d4cc:	e7cb      	b.n	800d466 <_free_r+0x22>
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	20001720 	.word	0x20001720

0800d4d4 <sbrk_aligned>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	4e0f      	ldr	r6, [pc, #60]	@ (800d514 <sbrk_aligned+0x40>)
 800d4d8:	460c      	mov	r4, r1
 800d4da:	6831      	ldr	r1, [r6, #0]
 800d4dc:	4605      	mov	r5, r0
 800d4de:	b911      	cbnz	r1, 800d4e6 <sbrk_aligned+0x12>
 800d4e0:	f000 fbaa 	bl	800dc38 <_sbrk_r>
 800d4e4:	6030      	str	r0, [r6, #0]
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	f000 fba5 	bl	800dc38 <_sbrk_r>
 800d4ee:	1c43      	adds	r3, r0, #1
 800d4f0:	d103      	bne.n	800d4fa <sbrk_aligned+0x26>
 800d4f2:	f04f 34ff 	mov.w	r4, #4294967295
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	bd70      	pop	{r4, r5, r6, pc}
 800d4fa:	1cc4      	adds	r4, r0, #3
 800d4fc:	f024 0403 	bic.w	r4, r4, #3
 800d500:	42a0      	cmp	r0, r4
 800d502:	d0f8      	beq.n	800d4f6 <sbrk_aligned+0x22>
 800d504:	1a21      	subs	r1, r4, r0
 800d506:	4628      	mov	r0, r5
 800d508:	f000 fb96 	bl	800dc38 <_sbrk_r>
 800d50c:	3001      	adds	r0, #1
 800d50e:	d1f2      	bne.n	800d4f6 <sbrk_aligned+0x22>
 800d510:	e7ef      	b.n	800d4f2 <sbrk_aligned+0x1e>
 800d512:	bf00      	nop
 800d514:	2000171c 	.word	0x2000171c

0800d518 <_malloc_r>:
 800d518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d51c:	1ccd      	adds	r5, r1, #3
 800d51e:	f025 0503 	bic.w	r5, r5, #3
 800d522:	3508      	adds	r5, #8
 800d524:	2d0c      	cmp	r5, #12
 800d526:	bf38      	it	cc
 800d528:	250c      	movcc	r5, #12
 800d52a:	2d00      	cmp	r5, #0
 800d52c:	4606      	mov	r6, r0
 800d52e:	db01      	blt.n	800d534 <_malloc_r+0x1c>
 800d530:	42a9      	cmp	r1, r5
 800d532:	d904      	bls.n	800d53e <_malloc_r+0x26>
 800d534:	230c      	movs	r3, #12
 800d536:	6033      	str	r3, [r6, #0]
 800d538:	2000      	movs	r0, #0
 800d53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d53e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d614 <_malloc_r+0xfc>
 800d542:	f000 f869 	bl	800d618 <__malloc_lock>
 800d546:	f8d8 3000 	ldr.w	r3, [r8]
 800d54a:	461c      	mov	r4, r3
 800d54c:	bb44      	cbnz	r4, 800d5a0 <_malloc_r+0x88>
 800d54e:	4629      	mov	r1, r5
 800d550:	4630      	mov	r0, r6
 800d552:	f7ff ffbf 	bl	800d4d4 <sbrk_aligned>
 800d556:	1c43      	adds	r3, r0, #1
 800d558:	4604      	mov	r4, r0
 800d55a:	d158      	bne.n	800d60e <_malloc_r+0xf6>
 800d55c:	f8d8 4000 	ldr.w	r4, [r8]
 800d560:	4627      	mov	r7, r4
 800d562:	2f00      	cmp	r7, #0
 800d564:	d143      	bne.n	800d5ee <_malloc_r+0xd6>
 800d566:	2c00      	cmp	r4, #0
 800d568:	d04b      	beq.n	800d602 <_malloc_r+0xea>
 800d56a:	6823      	ldr	r3, [r4, #0]
 800d56c:	4639      	mov	r1, r7
 800d56e:	4630      	mov	r0, r6
 800d570:	eb04 0903 	add.w	r9, r4, r3
 800d574:	f000 fb60 	bl	800dc38 <_sbrk_r>
 800d578:	4581      	cmp	r9, r0
 800d57a:	d142      	bne.n	800d602 <_malloc_r+0xea>
 800d57c:	6821      	ldr	r1, [r4, #0]
 800d57e:	4630      	mov	r0, r6
 800d580:	1a6d      	subs	r5, r5, r1
 800d582:	4629      	mov	r1, r5
 800d584:	f7ff ffa6 	bl	800d4d4 <sbrk_aligned>
 800d588:	3001      	adds	r0, #1
 800d58a:	d03a      	beq.n	800d602 <_malloc_r+0xea>
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	442b      	add	r3, r5
 800d590:	6023      	str	r3, [r4, #0]
 800d592:	f8d8 3000 	ldr.w	r3, [r8]
 800d596:	685a      	ldr	r2, [r3, #4]
 800d598:	bb62      	cbnz	r2, 800d5f4 <_malloc_r+0xdc>
 800d59a:	f8c8 7000 	str.w	r7, [r8]
 800d59e:	e00f      	b.n	800d5c0 <_malloc_r+0xa8>
 800d5a0:	6822      	ldr	r2, [r4, #0]
 800d5a2:	1b52      	subs	r2, r2, r5
 800d5a4:	d420      	bmi.n	800d5e8 <_malloc_r+0xd0>
 800d5a6:	2a0b      	cmp	r2, #11
 800d5a8:	d917      	bls.n	800d5da <_malloc_r+0xc2>
 800d5aa:	1961      	adds	r1, r4, r5
 800d5ac:	42a3      	cmp	r3, r4
 800d5ae:	6025      	str	r5, [r4, #0]
 800d5b0:	bf18      	it	ne
 800d5b2:	6059      	strne	r1, [r3, #4]
 800d5b4:	6863      	ldr	r3, [r4, #4]
 800d5b6:	bf08      	it	eq
 800d5b8:	f8c8 1000 	streq.w	r1, [r8]
 800d5bc:	5162      	str	r2, [r4, r5]
 800d5be:	604b      	str	r3, [r1, #4]
 800d5c0:	4630      	mov	r0, r6
 800d5c2:	f000 f82f 	bl	800d624 <__malloc_unlock>
 800d5c6:	f104 000b 	add.w	r0, r4, #11
 800d5ca:	1d23      	adds	r3, r4, #4
 800d5cc:	f020 0007 	bic.w	r0, r0, #7
 800d5d0:	1ac2      	subs	r2, r0, r3
 800d5d2:	bf1c      	itt	ne
 800d5d4:	1a1b      	subne	r3, r3, r0
 800d5d6:	50a3      	strne	r3, [r4, r2]
 800d5d8:	e7af      	b.n	800d53a <_malloc_r+0x22>
 800d5da:	6862      	ldr	r2, [r4, #4]
 800d5dc:	42a3      	cmp	r3, r4
 800d5de:	bf0c      	ite	eq
 800d5e0:	f8c8 2000 	streq.w	r2, [r8]
 800d5e4:	605a      	strne	r2, [r3, #4]
 800d5e6:	e7eb      	b.n	800d5c0 <_malloc_r+0xa8>
 800d5e8:	4623      	mov	r3, r4
 800d5ea:	6864      	ldr	r4, [r4, #4]
 800d5ec:	e7ae      	b.n	800d54c <_malloc_r+0x34>
 800d5ee:	463c      	mov	r4, r7
 800d5f0:	687f      	ldr	r7, [r7, #4]
 800d5f2:	e7b6      	b.n	800d562 <_malloc_r+0x4a>
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	42a3      	cmp	r3, r4
 800d5fa:	d1fb      	bne.n	800d5f4 <_malloc_r+0xdc>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	6053      	str	r3, [r2, #4]
 800d600:	e7de      	b.n	800d5c0 <_malloc_r+0xa8>
 800d602:	230c      	movs	r3, #12
 800d604:	4630      	mov	r0, r6
 800d606:	6033      	str	r3, [r6, #0]
 800d608:	f000 f80c 	bl	800d624 <__malloc_unlock>
 800d60c:	e794      	b.n	800d538 <_malloc_r+0x20>
 800d60e:	6005      	str	r5, [r0, #0]
 800d610:	e7d6      	b.n	800d5c0 <_malloc_r+0xa8>
 800d612:	bf00      	nop
 800d614:	20001720 	.word	0x20001720

0800d618 <__malloc_lock>:
 800d618:	4801      	ldr	r0, [pc, #4]	@ (800d620 <__malloc_lock+0x8>)
 800d61a:	f7ff bf03 	b.w	800d424 <__retarget_lock_acquire_recursive>
 800d61e:	bf00      	nop
 800d620:	20001718 	.word	0x20001718

0800d624 <__malloc_unlock>:
 800d624:	4801      	ldr	r0, [pc, #4]	@ (800d62c <__malloc_unlock+0x8>)
 800d626:	f7ff befe 	b.w	800d426 <__retarget_lock_release_recursive>
 800d62a:	bf00      	nop
 800d62c:	20001718 	.word	0x20001718

0800d630 <__ssputs_r>:
 800d630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d634:	461f      	mov	r7, r3
 800d636:	688e      	ldr	r6, [r1, #8]
 800d638:	4682      	mov	sl, r0
 800d63a:	42be      	cmp	r6, r7
 800d63c:	460c      	mov	r4, r1
 800d63e:	4690      	mov	r8, r2
 800d640:	680b      	ldr	r3, [r1, #0]
 800d642:	d82d      	bhi.n	800d6a0 <__ssputs_r+0x70>
 800d644:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d648:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d64c:	d026      	beq.n	800d69c <__ssputs_r+0x6c>
 800d64e:	6965      	ldr	r5, [r4, #20]
 800d650:	6909      	ldr	r1, [r1, #16]
 800d652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d656:	eba3 0901 	sub.w	r9, r3, r1
 800d65a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d65e:	1c7b      	adds	r3, r7, #1
 800d660:	444b      	add	r3, r9
 800d662:	106d      	asrs	r5, r5, #1
 800d664:	429d      	cmp	r5, r3
 800d666:	bf38      	it	cc
 800d668:	461d      	movcc	r5, r3
 800d66a:	0553      	lsls	r3, r2, #21
 800d66c:	d527      	bpl.n	800d6be <__ssputs_r+0x8e>
 800d66e:	4629      	mov	r1, r5
 800d670:	f7ff ff52 	bl	800d518 <_malloc_r>
 800d674:	4606      	mov	r6, r0
 800d676:	b360      	cbz	r0, 800d6d2 <__ssputs_r+0xa2>
 800d678:	464a      	mov	r2, r9
 800d67a:	6921      	ldr	r1, [r4, #16]
 800d67c:	f7ff fed4 	bl	800d428 <memcpy>
 800d680:	89a3      	ldrh	r3, [r4, #12]
 800d682:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d68a:	81a3      	strh	r3, [r4, #12]
 800d68c:	6126      	str	r6, [r4, #16]
 800d68e:	444e      	add	r6, r9
 800d690:	6026      	str	r6, [r4, #0]
 800d692:	463e      	mov	r6, r7
 800d694:	6165      	str	r5, [r4, #20]
 800d696:	eba5 0509 	sub.w	r5, r5, r9
 800d69a:	60a5      	str	r5, [r4, #8]
 800d69c:	42be      	cmp	r6, r7
 800d69e:	d900      	bls.n	800d6a2 <__ssputs_r+0x72>
 800d6a0:	463e      	mov	r6, r7
 800d6a2:	4632      	mov	r2, r6
 800d6a4:	4641      	mov	r1, r8
 800d6a6:	6820      	ldr	r0, [r4, #0]
 800d6a8:	f000 faac 	bl	800dc04 <memmove>
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	68a3      	ldr	r3, [r4, #8]
 800d6b0:	1b9b      	subs	r3, r3, r6
 800d6b2:	60a3      	str	r3, [r4, #8]
 800d6b4:	6823      	ldr	r3, [r4, #0]
 800d6b6:	4433      	add	r3, r6
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6be:	462a      	mov	r2, r5
 800d6c0:	f000 fad8 	bl	800dc74 <_realloc_r>
 800d6c4:	4606      	mov	r6, r0
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d1e0      	bne.n	800d68c <__ssputs_r+0x5c>
 800d6ca:	4650      	mov	r0, sl
 800d6cc:	6921      	ldr	r1, [r4, #16]
 800d6ce:	f7ff feb9 	bl	800d444 <_free_r>
 800d6d2:	230c      	movs	r3, #12
 800d6d4:	f8ca 3000 	str.w	r3, [sl]
 800d6d8:	89a3      	ldrh	r3, [r4, #12]
 800d6da:	f04f 30ff 	mov.w	r0, #4294967295
 800d6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6e2:	81a3      	strh	r3, [r4, #12]
 800d6e4:	e7e9      	b.n	800d6ba <__ssputs_r+0x8a>
	...

0800d6e8 <_svfiprintf_r>:
 800d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ec:	4698      	mov	r8, r3
 800d6ee:	898b      	ldrh	r3, [r1, #12]
 800d6f0:	4607      	mov	r7, r0
 800d6f2:	061b      	lsls	r3, r3, #24
 800d6f4:	460d      	mov	r5, r1
 800d6f6:	4614      	mov	r4, r2
 800d6f8:	b09d      	sub	sp, #116	@ 0x74
 800d6fa:	d510      	bpl.n	800d71e <_svfiprintf_r+0x36>
 800d6fc:	690b      	ldr	r3, [r1, #16]
 800d6fe:	b973      	cbnz	r3, 800d71e <_svfiprintf_r+0x36>
 800d700:	2140      	movs	r1, #64	@ 0x40
 800d702:	f7ff ff09 	bl	800d518 <_malloc_r>
 800d706:	6028      	str	r0, [r5, #0]
 800d708:	6128      	str	r0, [r5, #16]
 800d70a:	b930      	cbnz	r0, 800d71a <_svfiprintf_r+0x32>
 800d70c:	230c      	movs	r3, #12
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	f04f 30ff 	mov.w	r0, #4294967295
 800d714:	b01d      	add	sp, #116	@ 0x74
 800d716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d71a:	2340      	movs	r3, #64	@ 0x40
 800d71c:	616b      	str	r3, [r5, #20]
 800d71e:	2300      	movs	r3, #0
 800d720:	9309      	str	r3, [sp, #36]	@ 0x24
 800d722:	2320      	movs	r3, #32
 800d724:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d728:	2330      	movs	r3, #48	@ 0x30
 800d72a:	f04f 0901 	mov.w	r9, #1
 800d72e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d732:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d8cc <_svfiprintf_r+0x1e4>
 800d736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d73a:	4623      	mov	r3, r4
 800d73c:	469a      	mov	sl, r3
 800d73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d742:	b10a      	cbz	r2, 800d748 <_svfiprintf_r+0x60>
 800d744:	2a25      	cmp	r2, #37	@ 0x25
 800d746:	d1f9      	bne.n	800d73c <_svfiprintf_r+0x54>
 800d748:	ebba 0b04 	subs.w	fp, sl, r4
 800d74c:	d00b      	beq.n	800d766 <_svfiprintf_r+0x7e>
 800d74e:	465b      	mov	r3, fp
 800d750:	4622      	mov	r2, r4
 800d752:	4629      	mov	r1, r5
 800d754:	4638      	mov	r0, r7
 800d756:	f7ff ff6b 	bl	800d630 <__ssputs_r>
 800d75a:	3001      	adds	r0, #1
 800d75c:	f000 80a7 	beq.w	800d8ae <_svfiprintf_r+0x1c6>
 800d760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d762:	445a      	add	r2, fp
 800d764:	9209      	str	r2, [sp, #36]	@ 0x24
 800d766:	f89a 3000 	ldrb.w	r3, [sl]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f000 809f 	beq.w	800d8ae <_svfiprintf_r+0x1c6>
 800d770:	2300      	movs	r3, #0
 800d772:	f04f 32ff 	mov.w	r2, #4294967295
 800d776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d77a:	f10a 0a01 	add.w	sl, sl, #1
 800d77e:	9304      	str	r3, [sp, #16]
 800d780:	9307      	str	r3, [sp, #28]
 800d782:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d786:	931a      	str	r3, [sp, #104]	@ 0x68
 800d788:	4654      	mov	r4, sl
 800d78a:	2205      	movs	r2, #5
 800d78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d790:	484e      	ldr	r0, [pc, #312]	@ (800d8cc <_svfiprintf_r+0x1e4>)
 800d792:	f000 fa61 	bl	800dc58 <memchr>
 800d796:	9a04      	ldr	r2, [sp, #16]
 800d798:	b9d8      	cbnz	r0, 800d7d2 <_svfiprintf_r+0xea>
 800d79a:	06d0      	lsls	r0, r2, #27
 800d79c:	bf44      	itt	mi
 800d79e:	2320      	movmi	r3, #32
 800d7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7a4:	0711      	lsls	r1, r2, #28
 800d7a6:	bf44      	itt	mi
 800d7a8:	232b      	movmi	r3, #43	@ 0x2b
 800d7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d7b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7b4:	d015      	beq.n	800d7e2 <_svfiprintf_r+0xfa>
 800d7b6:	4654      	mov	r4, sl
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	f04f 0c0a 	mov.w	ip, #10
 800d7be:	9a07      	ldr	r2, [sp, #28]
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7c6:	3b30      	subs	r3, #48	@ 0x30
 800d7c8:	2b09      	cmp	r3, #9
 800d7ca:	d94b      	bls.n	800d864 <_svfiprintf_r+0x17c>
 800d7cc:	b1b0      	cbz	r0, 800d7fc <_svfiprintf_r+0x114>
 800d7ce:	9207      	str	r2, [sp, #28]
 800d7d0:	e014      	b.n	800d7fc <_svfiprintf_r+0x114>
 800d7d2:	eba0 0308 	sub.w	r3, r0, r8
 800d7d6:	fa09 f303 	lsl.w	r3, r9, r3
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	46a2      	mov	sl, r4
 800d7de:	9304      	str	r3, [sp, #16]
 800d7e0:	e7d2      	b.n	800d788 <_svfiprintf_r+0xa0>
 800d7e2:	9b03      	ldr	r3, [sp, #12]
 800d7e4:	1d19      	adds	r1, r3, #4
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	9103      	str	r1, [sp, #12]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	bfbb      	ittet	lt
 800d7ee:	425b      	neglt	r3, r3
 800d7f0:	f042 0202 	orrlt.w	r2, r2, #2
 800d7f4:	9307      	strge	r3, [sp, #28]
 800d7f6:	9307      	strlt	r3, [sp, #28]
 800d7f8:	bfb8      	it	lt
 800d7fa:	9204      	strlt	r2, [sp, #16]
 800d7fc:	7823      	ldrb	r3, [r4, #0]
 800d7fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800d800:	d10a      	bne.n	800d818 <_svfiprintf_r+0x130>
 800d802:	7863      	ldrb	r3, [r4, #1]
 800d804:	2b2a      	cmp	r3, #42	@ 0x2a
 800d806:	d132      	bne.n	800d86e <_svfiprintf_r+0x186>
 800d808:	9b03      	ldr	r3, [sp, #12]
 800d80a:	3402      	adds	r4, #2
 800d80c:	1d1a      	adds	r2, r3, #4
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	9203      	str	r2, [sp, #12]
 800d812:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d816:	9305      	str	r3, [sp, #20]
 800d818:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d8d0 <_svfiprintf_r+0x1e8>
 800d81c:	2203      	movs	r2, #3
 800d81e:	4650      	mov	r0, sl
 800d820:	7821      	ldrb	r1, [r4, #0]
 800d822:	f000 fa19 	bl	800dc58 <memchr>
 800d826:	b138      	cbz	r0, 800d838 <_svfiprintf_r+0x150>
 800d828:	2240      	movs	r2, #64	@ 0x40
 800d82a:	9b04      	ldr	r3, [sp, #16]
 800d82c:	eba0 000a 	sub.w	r0, r0, sl
 800d830:	4082      	lsls	r2, r0
 800d832:	4313      	orrs	r3, r2
 800d834:	3401      	adds	r4, #1
 800d836:	9304      	str	r3, [sp, #16]
 800d838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d83c:	2206      	movs	r2, #6
 800d83e:	4825      	ldr	r0, [pc, #148]	@ (800d8d4 <_svfiprintf_r+0x1ec>)
 800d840:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d844:	f000 fa08 	bl	800dc58 <memchr>
 800d848:	2800      	cmp	r0, #0
 800d84a:	d036      	beq.n	800d8ba <_svfiprintf_r+0x1d2>
 800d84c:	4b22      	ldr	r3, [pc, #136]	@ (800d8d8 <_svfiprintf_r+0x1f0>)
 800d84e:	bb1b      	cbnz	r3, 800d898 <_svfiprintf_r+0x1b0>
 800d850:	9b03      	ldr	r3, [sp, #12]
 800d852:	3307      	adds	r3, #7
 800d854:	f023 0307 	bic.w	r3, r3, #7
 800d858:	3308      	adds	r3, #8
 800d85a:	9303      	str	r3, [sp, #12]
 800d85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d85e:	4433      	add	r3, r6
 800d860:	9309      	str	r3, [sp, #36]	@ 0x24
 800d862:	e76a      	b.n	800d73a <_svfiprintf_r+0x52>
 800d864:	460c      	mov	r4, r1
 800d866:	2001      	movs	r0, #1
 800d868:	fb0c 3202 	mla	r2, ip, r2, r3
 800d86c:	e7a8      	b.n	800d7c0 <_svfiprintf_r+0xd8>
 800d86e:	2300      	movs	r3, #0
 800d870:	f04f 0c0a 	mov.w	ip, #10
 800d874:	4619      	mov	r1, r3
 800d876:	3401      	adds	r4, #1
 800d878:	9305      	str	r3, [sp, #20]
 800d87a:	4620      	mov	r0, r4
 800d87c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d880:	3a30      	subs	r2, #48	@ 0x30
 800d882:	2a09      	cmp	r2, #9
 800d884:	d903      	bls.n	800d88e <_svfiprintf_r+0x1a6>
 800d886:	2b00      	cmp	r3, #0
 800d888:	d0c6      	beq.n	800d818 <_svfiprintf_r+0x130>
 800d88a:	9105      	str	r1, [sp, #20]
 800d88c:	e7c4      	b.n	800d818 <_svfiprintf_r+0x130>
 800d88e:	4604      	mov	r4, r0
 800d890:	2301      	movs	r3, #1
 800d892:	fb0c 2101 	mla	r1, ip, r1, r2
 800d896:	e7f0      	b.n	800d87a <_svfiprintf_r+0x192>
 800d898:	ab03      	add	r3, sp, #12
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	462a      	mov	r2, r5
 800d89e:	4638      	mov	r0, r7
 800d8a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d8dc <_svfiprintf_r+0x1f4>)
 800d8a2:	a904      	add	r1, sp, #16
 800d8a4:	f3af 8000 	nop.w
 800d8a8:	1c42      	adds	r2, r0, #1
 800d8aa:	4606      	mov	r6, r0
 800d8ac:	d1d6      	bne.n	800d85c <_svfiprintf_r+0x174>
 800d8ae:	89ab      	ldrh	r3, [r5, #12]
 800d8b0:	065b      	lsls	r3, r3, #25
 800d8b2:	f53f af2d 	bmi.w	800d710 <_svfiprintf_r+0x28>
 800d8b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8b8:	e72c      	b.n	800d714 <_svfiprintf_r+0x2c>
 800d8ba:	ab03      	add	r3, sp, #12
 800d8bc:	9300      	str	r3, [sp, #0]
 800d8be:	462a      	mov	r2, r5
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	4b06      	ldr	r3, [pc, #24]	@ (800d8dc <_svfiprintf_r+0x1f4>)
 800d8c4:	a904      	add	r1, sp, #16
 800d8c6:	f000 f87d 	bl	800d9c4 <_printf_i>
 800d8ca:	e7ed      	b.n	800d8a8 <_svfiprintf_r+0x1c0>
 800d8cc:	0800e794 	.word	0x0800e794
 800d8d0:	0800e79a 	.word	0x0800e79a
 800d8d4:	0800e79e 	.word	0x0800e79e
 800d8d8:	00000000 	.word	0x00000000
 800d8dc:	0800d631 	.word	0x0800d631

0800d8e0 <_printf_common>:
 800d8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e4:	4616      	mov	r6, r2
 800d8e6:	4698      	mov	r8, r3
 800d8e8:	688a      	ldr	r2, [r1, #8]
 800d8ea:	690b      	ldr	r3, [r1, #16]
 800d8ec:	4607      	mov	r7, r0
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	bfb8      	it	lt
 800d8f2:	4613      	movlt	r3, r2
 800d8f4:	6033      	str	r3, [r6, #0]
 800d8f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d900:	b10a      	cbz	r2, 800d906 <_printf_common+0x26>
 800d902:	3301      	adds	r3, #1
 800d904:	6033      	str	r3, [r6, #0]
 800d906:	6823      	ldr	r3, [r4, #0]
 800d908:	0699      	lsls	r1, r3, #26
 800d90a:	bf42      	ittt	mi
 800d90c:	6833      	ldrmi	r3, [r6, #0]
 800d90e:	3302      	addmi	r3, #2
 800d910:	6033      	strmi	r3, [r6, #0]
 800d912:	6825      	ldr	r5, [r4, #0]
 800d914:	f015 0506 	ands.w	r5, r5, #6
 800d918:	d106      	bne.n	800d928 <_printf_common+0x48>
 800d91a:	f104 0a19 	add.w	sl, r4, #25
 800d91e:	68e3      	ldr	r3, [r4, #12]
 800d920:	6832      	ldr	r2, [r6, #0]
 800d922:	1a9b      	subs	r3, r3, r2
 800d924:	42ab      	cmp	r3, r5
 800d926:	dc2b      	bgt.n	800d980 <_printf_common+0xa0>
 800d928:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d92c:	6822      	ldr	r2, [r4, #0]
 800d92e:	3b00      	subs	r3, #0
 800d930:	bf18      	it	ne
 800d932:	2301      	movne	r3, #1
 800d934:	0692      	lsls	r2, r2, #26
 800d936:	d430      	bmi.n	800d99a <_printf_common+0xba>
 800d938:	4641      	mov	r1, r8
 800d93a:	4638      	mov	r0, r7
 800d93c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d940:	47c8      	blx	r9
 800d942:	3001      	adds	r0, #1
 800d944:	d023      	beq.n	800d98e <_printf_common+0xae>
 800d946:	6823      	ldr	r3, [r4, #0]
 800d948:	6922      	ldr	r2, [r4, #16]
 800d94a:	f003 0306 	and.w	r3, r3, #6
 800d94e:	2b04      	cmp	r3, #4
 800d950:	bf14      	ite	ne
 800d952:	2500      	movne	r5, #0
 800d954:	6833      	ldreq	r3, [r6, #0]
 800d956:	f04f 0600 	mov.w	r6, #0
 800d95a:	bf08      	it	eq
 800d95c:	68e5      	ldreq	r5, [r4, #12]
 800d95e:	f104 041a 	add.w	r4, r4, #26
 800d962:	bf08      	it	eq
 800d964:	1aed      	subeq	r5, r5, r3
 800d966:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d96a:	bf08      	it	eq
 800d96c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d970:	4293      	cmp	r3, r2
 800d972:	bfc4      	itt	gt
 800d974:	1a9b      	subgt	r3, r3, r2
 800d976:	18ed      	addgt	r5, r5, r3
 800d978:	42b5      	cmp	r5, r6
 800d97a:	d11a      	bne.n	800d9b2 <_printf_common+0xd2>
 800d97c:	2000      	movs	r0, #0
 800d97e:	e008      	b.n	800d992 <_printf_common+0xb2>
 800d980:	2301      	movs	r3, #1
 800d982:	4652      	mov	r2, sl
 800d984:	4641      	mov	r1, r8
 800d986:	4638      	mov	r0, r7
 800d988:	47c8      	blx	r9
 800d98a:	3001      	adds	r0, #1
 800d98c:	d103      	bne.n	800d996 <_printf_common+0xb6>
 800d98e:	f04f 30ff 	mov.w	r0, #4294967295
 800d992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d996:	3501      	adds	r5, #1
 800d998:	e7c1      	b.n	800d91e <_printf_common+0x3e>
 800d99a:	2030      	movs	r0, #48	@ 0x30
 800d99c:	18e1      	adds	r1, r4, r3
 800d99e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d9a8:	4422      	add	r2, r4
 800d9aa:	3302      	adds	r3, #2
 800d9ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d9b0:	e7c2      	b.n	800d938 <_printf_common+0x58>
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	4622      	mov	r2, r4
 800d9b6:	4641      	mov	r1, r8
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	47c8      	blx	r9
 800d9bc:	3001      	adds	r0, #1
 800d9be:	d0e6      	beq.n	800d98e <_printf_common+0xae>
 800d9c0:	3601      	adds	r6, #1
 800d9c2:	e7d9      	b.n	800d978 <_printf_common+0x98>

0800d9c4 <_printf_i>:
 800d9c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c8:	7e0f      	ldrb	r7, [r1, #24]
 800d9ca:	4691      	mov	r9, r2
 800d9cc:	2f78      	cmp	r7, #120	@ 0x78
 800d9ce:	4680      	mov	r8, r0
 800d9d0:	460c      	mov	r4, r1
 800d9d2:	469a      	mov	sl, r3
 800d9d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d9d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d9da:	d807      	bhi.n	800d9ec <_printf_i+0x28>
 800d9dc:	2f62      	cmp	r7, #98	@ 0x62
 800d9de:	d80a      	bhi.n	800d9f6 <_printf_i+0x32>
 800d9e0:	2f00      	cmp	r7, #0
 800d9e2:	f000 80d3 	beq.w	800db8c <_printf_i+0x1c8>
 800d9e6:	2f58      	cmp	r7, #88	@ 0x58
 800d9e8:	f000 80ba 	beq.w	800db60 <_printf_i+0x19c>
 800d9ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d9f4:	e03a      	b.n	800da6c <_printf_i+0xa8>
 800d9f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d9fa:	2b15      	cmp	r3, #21
 800d9fc:	d8f6      	bhi.n	800d9ec <_printf_i+0x28>
 800d9fe:	a101      	add	r1, pc, #4	@ (adr r1, 800da04 <_printf_i+0x40>)
 800da00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da04:	0800da5d 	.word	0x0800da5d
 800da08:	0800da71 	.word	0x0800da71
 800da0c:	0800d9ed 	.word	0x0800d9ed
 800da10:	0800d9ed 	.word	0x0800d9ed
 800da14:	0800d9ed 	.word	0x0800d9ed
 800da18:	0800d9ed 	.word	0x0800d9ed
 800da1c:	0800da71 	.word	0x0800da71
 800da20:	0800d9ed 	.word	0x0800d9ed
 800da24:	0800d9ed 	.word	0x0800d9ed
 800da28:	0800d9ed 	.word	0x0800d9ed
 800da2c:	0800d9ed 	.word	0x0800d9ed
 800da30:	0800db73 	.word	0x0800db73
 800da34:	0800da9b 	.word	0x0800da9b
 800da38:	0800db2d 	.word	0x0800db2d
 800da3c:	0800d9ed 	.word	0x0800d9ed
 800da40:	0800d9ed 	.word	0x0800d9ed
 800da44:	0800db95 	.word	0x0800db95
 800da48:	0800d9ed 	.word	0x0800d9ed
 800da4c:	0800da9b 	.word	0x0800da9b
 800da50:	0800d9ed 	.word	0x0800d9ed
 800da54:	0800d9ed 	.word	0x0800d9ed
 800da58:	0800db35 	.word	0x0800db35
 800da5c:	6833      	ldr	r3, [r6, #0]
 800da5e:	1d1a      	adds	r2, r3, #4
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	6032      	str	r2, [r6, #0]
 800da64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da6c:	2301      	movs	r3, #1
 800da6e:	e09e      	b.n	800dbae <_printf_i+0x1ea>
 800da70:	6833      	ldr	r3, [r6, #0]
 800da72:	6820      	ldr	r0, [r4, #0]
 800da74:	1d19      	adds	r1, r3, #4
 800da76:	6031      	str	r1, [r6, #0]
 800da78:	0606      	lsls	r6, r0, #24
 800da7a:	d501      	bpl.n	800da80 <_printf_i+0xbc>
 800da7c:	681d      	ldr	r5, [r3, #0]
 800da7e:	e003      	b.n	800da88 <_printf_i+0xc4>
 800da80:	0645      	lsls	r5, r0, #25
 800da82:	d5fb      	bpl.n	800da7c <_printf_i+0xb8>
 800da84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da88:	2d00      	cmp	r5, #0
 800da8a:	da03      	bge.n	800da94 <_printf_i+0xd0>
 800da8c:	232d      	movs	r3, #45	@ 0x2d
 800da8e:	426d      	negs	r5, r5
 800da90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da94:	230a      	movs	r3, #10
 800da96:	4859      	ldr	r0, [pc, #356]	@ (800dbfc <_printf_i+0x238>)
 800da98:	e011      	b.n	800dabe <_printf_i+0xfa>
 800da9a:	6821      	ldr	r1, [r4, #0]
 800da9c:	6833      	ldr	r3, [r6, #0]
 800da9e:	0608      	lsls	r0, r1, #24
 800daa0:	f853 5b04 	ldr.w	r5, [r3], #4
 800daa4:	d402      	bmi.n	800daac <_printf_i+0xe8>
 800daa6:	0649      	lsls	r1, r1, #25
 800daa8:	bf48      	it	mi
 800daaa:	b2ad      	uxthmi	r5, r5
 800daac:	2f6f      	cmp	r7, #111	@ 0x6f
 800daae:	6033      	str	r3, [r6, #0]
 800dab0:	bf14      	ite	ne
 800dab2:	230a      	movne	r3, #10
 800dab4:	2308      	moveq	r3, #8
 800dab6:	4851      	ldr	r0, [pc, #324]	@ (800dbfc <_printf_i+0x238>)
 800dab8:	2100      	movs	r1, #0
 800daba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dabe:	6866      	ldr	r6, [r4, #4]
 800dac0:	2e00      	cmp	r6, #0
 800dac2:	bfa8      	it	ge
 800dac4:	6821      	ldrge	r1, [r4, #0]
 800dac6:	60a6      	str	r6, [r4, #8]
 800dac8:	bfa4      	itt	ge
 800daca:	f021 0104 	bicge.w	r1, r1, #4
 800dace:	6021      	strge	r1, [r4, #0]
 800dad0:	b90d      	cbnz	r5, 800dad6 <_printf_i+0x112>
 800dad2:	2e00      	cmp	r6, #0
 800dad4:	d04b      	beq.n	800db6e <_printf_i+0x1aa>
 800dad6:	4616      	mov	r6, r2
 800dad8:	fbb5 f1f3 	udiv	r1, r5, r3
 800dadc:	fb03 5711 	mls	r7, r3, r1, r5
 800dae0:	5dc7      	ldrb	r7, [r0, r7]
 800dae2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dae6:	462f      	mov	r7, r5
 800dae8:	42bb      	cmp	r3, r7
 800daea:	460d      	mov	r5, r1
 800daec:	d9f4      	bls.n	800dad8 <_printf_i+0x114>
 800daee:	2b08      	cmp	r3, #8
 800daf0:	d10b      	bne.n	800db0a <_printf_i+0x146>
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	07df      	lsls	r7, r3, #31
 800daf6:	d508      	bpl.n	800db0a <_printf_i+0x146>
 800daf8:	6923      	ldr	r3, [r4, #16]
 800dafa:	6861      	ldr	r1, [r4, #4]
 800dafc:	4299      	cmp	r1, r3
 800dafe:	bfde      	ittt	le
 800db00:	2330      	movle	r3, #48	@ 0x30
 800db02:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db06:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db0a:	1b92      	subs	r2, r2, r6
 800db0c:	6122      	str	r2, [r4, #16]
 800db0e:	464b      	mov	r3, r9
 800db10:	4621      	mov	r1, r4
 800db12:	4640      	mov	r0, r8
 800db14:	f8cd a000 	str.w	sl, [sp]
 800db18:	aa03      	add	r2, sp, #12
 800db1a:	f7ff fee1 	bl	800d8e0 <_printf_common>
 800db1e:	3001      	adds	r0, #1
 800db20:	d14a      	bne.n	800dbb8 <_printf_i+0x1f4>
 800db22:	f04f 30ff 	mov.w	r0, #4294967295
 800db26:	b004      	add	sp, #16
 800db28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db2c:	6823      	ldr	r3, [r4, #0]
 800db2e:	f043 0320 	orr.w	r3, r3, #32
 800db32:	6023      	str	r3, [r4, #0]
 800db34:	2778      	movs	r7, #120	@ 0x78
 800db36:	4832      	ldr	r0, [pc, #200]	@ (800dc00 <_printf_i+0x23c>)
 800db38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db3c:	6823      	ldr	r3, [r4, #0]
 800db3e:	6831      	ldr	r1, [r6, #0]
 800db40:	061f      	lsls	r7, r3, #24
 800db42:	f851 5b04 	ldr.w	r5, [r1], #4
 800db46:	d402      	bmi.n	800db4e <_printf_i+0x18a>
 800db48:	065f      	lsls	r7, r3, #25
 800db4a:	bf48      	it	mi
 800db4c:	b2ad      	uxthmi	r5, r5
 800db4e:	6031      	str	r1, [r6, #0]
 800db50:	07d9      	lsls	r1, r3, #31
 800db52:	bf44      	itt	mi
 800db54:	f043 0320 	orrmi.w	r3, r3, #32
 800db58:	6023      	strmi	r3, [r4, #0]
 800db5a:	b11d      	cbz	r5, 800db64 <_printf_i+0x1a0>
 800db5c:	2310      	movs	r3, #16
 800db5e:	e7ab      	b.n	800dab8 <_printf_i+0xf4>
 800db60:	4826      	ldr	r0, [pc, #152]	@ (800dbfc <_printf_i+0x238>)
 800db62:	e7e9      	b.n	800db38 <_printf_i+0x174>
 800db64:	6823      	ldr	r3, [r4, #0]
 800db66:	f023 0320 	bic.w	r3, r3, #32
 800db6a:	6023      	str	r3, [r4, #0]
 800db6c:	e7f6      	b.n	800db5c <_printf_i+0x198>
 800db6e:	4616      	mov	r6, r2
 800db70:	e7bd      	b.n	800daee <_printf_i+0x12a>
 800db72:	6833      	ldr	r3, [r6, #0]
 800db74:	6825      	ldr	r5, [r4, #0]
 800db76:	1d18      	adds	r0, r3, #4
 800db78:	6961      	ldr	r1, [r4, #20]
 800db7a:	6030      	str	r0, [r6, #0]
 800db7c:	062e      	lsls	r6, r5, #24
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	d501      	bpl.n	800db86 <_printf_i+0x1c2>
 800db82:	6019      	str	r1, [r3, #0]
 800db84:	e002      	b.n	800db8c <_printf_i+0x1c8>
 800db86:	0668      	lsls	r0, r5, #25
 800db88:	d5fb      	bpl.n	800db82 <_printf_i+0x1be>
 800db8a:	8019      	strh	r1, [r3, #0]
 800db8c:	2300      	movs	r3, #0
 800db8e:	4616      	mov	r6, r2
 800db90:	6123      	str	r3, [r4, #16]
 800db92:	e7bc      	b.n	800db0e <_printf_i+0x14a>
 800db94:	6833      	ldr	r3, [r6, #0]
 800db96:	2100      	movs	r1, #0
 800db98:	1d1a      	adds	r2, r3, #4
 800db9a:	6032      	str	r2, [r6, #0]
 800db9c:	681e      	ldr	r6, [r3, #0]
 800db9e:	6862      	ldr	r2, [r4, #4]
 800dba0:	4630      	mov	r0, r6
 800dba2:	f000 f859 	bl	800dc58 <memchr>
 800dba6:	b108      	cbz	r0, 800dbac <_printf_i+0x1e8>
 800dba8:	1b80      	subs	r0, r0, r6
 800dbaa:	6060      	str	r0, [r4, #4]
 800dbac:	6863      	ldr	r3, [r4, #4]
 800dbae:	6123      	str	r3, [r4, #16]
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbb6:	e7aa      	b.n	800db0e <_printf_i+0x14a>
 800dbb8:	4632      	mov	r2, r6
 800dbba:	4649      	mov	r1, r9
 800dbbc:	4640      	mov	r0, r8
 800dbbe:	6923      	ldr	r3, [r4, #16]
 800dbc0:	47d0      	blx	sl
 800dbc2:	3001      	adds	r0, #1
 800dbc4:	d0ad      	beq.n	800db22 <_printf_i+0x15e>
 800dbc6:	6823      	ldr	r3, [r4, #0]
 800dbc8:	079b      	lsls	r3, r3, #30
 800dbca:	d413      	bmi.n	800dbf4 <_printf_i+0x230>
 800dbcc:	68e0      	ldr	r0, [r4, #12]
 800dbce:	9b03      	ldr	r3, [sp, #12]
 800dbd0:	4298      	cmp	r0, r3
 800dbd2:	bfb8      	it	lt
 800dbd4:	4618      	movlt	r0, r3
 800dbd6:	e7a6      	b.n	800db26 <_printf_i+0x162>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	4632      	mov	r2, r6
 800dbdc:	4649      	mov	r1, r9
 800dbde:	4640      	mov	r0, r8
 800dbe0:	47d0      	blx	sl
 800dbe2:	3001      	adds	r0, #1
 800dbe4:	d09d      	beq.n	800db22 <_printf_i+0x15e>
 800dbe6:	3501      	adds	r5, #1
 800dbe8:	68e3      	ldr	r3, [r4, #12]
 800dbea:	9903      	ldr	r1, [sp, #12]
 800dbec:	1a5b      	subs	r3, r3, r1
 800dbee:	42ab      	cmp	r3, r5
 800dbf0:	dcf2      	bgt.n	800dbd8 <_printf_i+0x214>
 800dbf2:	e7eb      	b.n	800dbcc <_printf_i+0x208>
 800dbf4:	2500      	movs	r5, #0
 800dbf6:	f104 0619 	add.w	r6, r4, #25
 800dbfa:	e7f5      	b.n	800dbe8 <_printf_i+0x224>
 800dbfc:	0800e7a5 	.word	0x0800e7a5
 800dc00:	0800e7b6 	.word	0x0800e7b6

0800dc04 <memmove>:
 800dc04:	4288      	cmp	r0, r1
 800dc06:	b510      	push	{r4, lr}
 800dc08:	eb01 0402 	add.w	r4, r1, r2
 800dc0c:	d902      	bls.n	800dc14 <memmove+0x10>
 800dc0e:	4284      	cmp	r4, r0
 800dc10:	4623      	mov	r3, r4
 800dc12:	d807      	bhi.n	800dc24 <memmove+0x20>
 800dc14:	1e43      	subs	r3, r0, #1
 800dc16:	42a1      	cmp	r1, r4
 800dc18:	d008      	beq.n	800dc2c <memmove+0x28>
 800dc1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc22:	e7f8      	b.n	800dc16 <memmove+0x12>
 800dc24:	4601      	mov	r1, r0
 800dc26:	4402      	add	r2, r0
 800dc28:	428a      	cmp	r2, r1
 800dc2a:	d100      	bne.n	800dc2e <memmove+0x2a>
 800dc2c:	bd10      	pop	{r4, pc}
 800dc2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc36:	e7f7      	b.n	800dc28 <memmove+0x24>

0800dc38 <_sbrk_r>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	4d05      	ldr	r5, [pc, #20]	@ (800dc54 <_sbrk_r+0x1c>)
 800dc3e:	4604      	mov	r4, r0
 800dc40:	4608      	mov	r0, r1
 800dc42:	602b      	str	r3, [r5, #0]
 800dc44:	f7f6 fc88 	bl	8004558 <_sbrk>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	d102      	bne.n	800dc52 <_sbrk_r+0x1a>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	b103      	cbz	r3, 800dc52 <_sbrk_r+0x1a>
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	bd38      	pop	{r3, r4, r5, pc}
 800dc54:	20001714 	.word	0x20001714

0800dc58 <memchr>:
 800dc58:	4603      	mov	r3, r0
 800dc5a:	b510      	push	{r4, lr}
 800dc5c:	b2c9      	uxtb	r1, r1
 800dc5e:	4402      	add	r2, r0
 800dc60:	4293      	cmp	r3, r2
 800dc62:	4618      	mov	r0, r3
 800dc64:	d101      	bne.n	800dc6a <memchr+0x12>
 800dc66:	2000      	movs	r0, #0
 800dc68:	e003      	b.n	800dc72 <memchr+0x1a>
 800dc6a:	7804      	ldrb	r4, [r0, #0]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	428c      	cmp	r4, r1
 800dc70:	d1f6      	bne.n	800dc60 <memchr+0x8>
 800dc72:	bd10      	pop	{r4, pc}

0800dc74 <_realloc_r>:
 800dc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc78:	4680      	mov	r8, r0
 800dc7a:	4615      	mov	r5, r2
 800dc7c:	460c      	mov	r4, r1
 800dc7e:	b921      	cbnz	r1, 800dc8a <_realloc_r+0x16>
 800dc80:	4611      	mov	r1, r2
 800dc82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc86:	f7ff bc47 	b.w	800d518 <_malloc_r>
 800dc8a:	b92a      	cbnz	r2, 800dc98 <_realloc_r+0x24>
 800dc8c:	f7ff fbda 	bl	800d444 <_free_r>
 800dc90:	2400      	movs	r4, #0
 800dc92:	4620      	mov	r0, r4
 800dc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc98:	f000 f81a 	bl	800dcd0 <_malloc_usable_size_r>
 800dc9c:	4285      	cmp	r5, r0
 800dc9e:	4606      	mov	r6, r0
 800dca0:	d802      	bhi.n	800dca8 <_realloc_r+0x34>
 800dca2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dca6:	d8f4      	bhi.n	800dc92 <_realloc_r+0x1e>
 800dca8:	4629      	mov	r1, r5
 800dcaa:	4640      	mov	r0, r8
 800dcac:	f7ff fc34 	bl	800d518 <_malloc_r>
 800dcb0:	4607      	mov	r7, r0
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	d0ec      	beq.n	800dc90 <_realloc_r+0x1c>
 800dcb6:	42b5      	cmp	r5, r6
 800dcb8:	462a      	mov	r2, r5
 800dcba:	4621      	mov	r1, r4
 800dcbc:	bf28      	it	cs
 800dcbe:	4632      	movcs	r2, r6
 800dcc0:	f7ff fbb2 	bl	800d428 <memcpy>
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	f7ff fbbc 	bl	800d444 <_free_r>
 800dccc:	463c      	mov	r4, r7
 800dcce:	e7e0      	b.n	800dc92 <_realloc_r+0x1e>

0800dcd0 <_malloc_usable_size_r>:
 800dcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcd4:	1f18      	subs	r0, r3, #4
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	bfbc      	itt	lt
 800dcda:	580b      	ldrlt	r3, [r1, r0]
 800dcdc:	18c0      	addlt	r0, r0, r3
 800dcde:	4770      	bx	lr

0800dce0 <_init>:
 800dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce2:	bf00      	nop
 800dce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dce6:	bc08      	pop	{r3}
 800dce8:	469e      	mov	lr, r3
 800dcea:	4770      	bx	lr

0800dcec <_fini>:
 800dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcee:	bf00      	nop
 800dcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcf2:	bc08      	pop	{r3}
 800dcf4:	469e      	mov	lr, r3
 800dcf6:	4770      	bx	lr

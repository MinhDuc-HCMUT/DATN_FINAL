
FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d45c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000091c  0800d568  0800d568  0000e568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de84  0800de84  0000f1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800de84  0800de84  0000ee84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de8c  0800de8c  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de8c  0800de8c  0000ee8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de90  0800de90  0000ee90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800de94  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001f8  0800e088  0000f1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800e088  0000f724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9af  00000000  00000000  0000f21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048ca  00000000  00000000  00029bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  0002e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014d6  00000000  00000000  0002ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c759  00000000  00000000  00031466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020f35  00000000  00000000  0004dbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a77  00000000  00000000  0006eaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010356b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076a4  00000000  00000000  001035b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010ac54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d550 	.word	0x0800d550

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800d550 	.word	0x0800d550

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	4618      	mov	r0, r3
 800017e:	f003 fe5f 	bl	8003e40 <HAL_Delay>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}

0800018a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800018a:	b580      	push	{r7, lr}
 800018c:	b086      	sub	sp, #24
 800018e:	af02      	add	r7, sp, #8
 8000190:	6078      	str	r0, [r7, #4]
 8000192:	460b      	mov	r3, r1
 8000194:	70fb      	strb	r3, [r7, #3]
 8000196:	4613      	mov	r3, r2
 8000198:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800019a:	78fb      	ldrb	r3, [r7, #3]
 800019c:	f023 030f 	bic.w	r3, r3, #15
 80001a0:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 80001a2:	78fb      	ldrb	r3, [r7, #3]
 80001a4:	011b      	lsls	r3, r3, #4
 80001a6:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	7adb      	ldrb	r3, [r3, #11]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d007      	beq.n	80001c0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001b0:	7bfb      	ldrb	r3, [r7, #15]
 80001b2:	f043 0308 	orr.w	r3, r3, #8
 80001b6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001b8:	7bbb      	ldrb	r3, [r7, #14]
 80001ba:	f043 0308 	orr.w	r3, r3, #8
 80001be:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001c0:	78bb      	ldrb	r3, [r7, #2]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d108      	bne.n	80001d8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001c6:	7bfb      	ldrb	r3, [r7, #15]
 80001c8:	f043 0301 	orr.w	r3, r3, #1
 80001cc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001ce:	7bbb      	ldrb	r3, [r7, #14]
 80001d0:	f043 0301 	orr.w	r3, r3, #1
 80001d4:	73bb      	strb	r3, [r7, #14]
 80001d6:	e00a      	b.n	80001ee <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001d8:	78bb      	ldrb	r3, [r7, #2]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d107      	bne.n	80001ee <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f023 0301 	bic.w	r3, r3, #1
 80001e4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001e6:	7bbb      	ldrb	r3, [r7, #14]
 80001e8:	f023 0301 	bic.w	r3, r3, #1
 80001ec:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	f043 0304 	orr.w	r3, r3, #4
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001f8:	2001      	movs	r0, #1
 80001fa:	f7ff ffb9 	bl	8000170 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	f043 0304 	orr.w	r3, r3, #4
 8000208:	b2db      	uxtb	r3, r3
 800020a:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 800020c:	2001      	movs	r0, #1
 800020e:	f7ff ffaf 	bl	8000170 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000212:	7bbb      	ldrb	r3, [r7, #14]
 8000214:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	6818      	ldr	r0, [r3, #0]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	f107 0208 	add.w	r2, r7, #8
 8000224:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	2304      	movs	r3, #4
 800022c:	f004 fc54 	bl	8004ad8 <HAL_I2C_Master_Transmit>
}
 8000230:	bf00      	nop
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	4611      	mov	r1, r2
 8000244:	461a      	mov	r2, r3
 8000246:	460b      	mov	r3, r1
 8000248:	71fb      	strb	r3, [r7, #7]
 800024a:	4613      	mov	r3, r2
 800024c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	68ba      	ldr	r2, [r7, #8]
 8000252:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	79fa      	ldrb	r2, [r7, #7]
 8000258:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	79ba      	ldrb	r2, [r7, #6]
 800025e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	7e3a      	ldrb	r2, [r7, #24]
 8000264:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2228      	movs	r2, #40	@ 0x28
 800026a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	2206      	movs	r2, #6
 8000270:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	220c      	movs	r2, #12
 8000276:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	2214      	movs	r2, #20
 800027c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2208      	movs	r2, #8
 8000282:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000284:	2032      	movs	r0, #50	@ 0x32
 8000286:	f7ff ff73 	bl	8000170 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800028a:	2200      	movs	r2, #0
 800028c:	2133      	movs	r1, #51	@ 0x33
 800028e:	68f8      	ldr	r0, [r7, #12]
 8000290:	f7ff ff7b 	bl	800018a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2133      	movs	r1, #51	@ 0x33
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff76 	bl	800018a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff66 	bl	8000170 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2132      	movs	r1, #50	@ 0x32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff6e 	bl	800018a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff5e 	bl	8000170 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2120      	movs	r1, #32
 80002b8:	68f8      	ldr	r0, [r7, #12]
 80002ba:	f7ff ff66 	bl	800018a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002be:	2005      	movs	r0, #5
 80002c0:	f7ff ff56 	bl	8000170 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	79db      	ldrb	r3, [r3, #7]
 80002c8:	2200      	movs	r2, #0
 80002ca:	4619      	mov	r1, r3
 80002cc:	68f8      	ldr	r0, [r7, #12]
 80002ce:	f7ff ff5c 	bl	800018a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	7a1b      	ldrb	r3, [r3, #8]
 80002d6:	2200      	movs	r2, #0
 80002d8:	4619      	mov	r1, r3
 80002da:	68f8      	ldr	r0, [r7, #12]
 80002dc:	f7ff ff55 	bl	800018a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	7a5b      	ldrb	r3, [r3, #9]
 80002e4:	2200      	movs	r2, #0
 80002e6:	4619      	mov	r1, r3
 80002e8:	68f8      	ldr	r0, [r7, #12]
 80002ea:	f7ff ff4e 	bl	800018a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	7a9b      	ldrb	r3, [r3, #10]
 80002f2:	2200      	movs	r2, #0
 80002f4:	4619      	mov	r1, r3
 80002f6:	68f8      	ldr	r0, [r7, #12]
 80002f8:	f7ff ff47 	bl	800018a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2101      	movs	r1, #1
 8000300:	68f8      	ldr	r0, [r7, #12]
 8000302:	f7ff ff42 	bl	800018a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8000306:	2200      	movs	r2, #0
 8000308:	2102      	movs	r1, #2
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f7ff ff3d 	bl	800018a <CLCD_WriteI2C>
}
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
 8000324:	4613      	mov	r3, r2
 8000326:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000328:	2300      	movs	r3, #0
 800032a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	795b      	ldrb	r3, [r3, #5]
 8000330:	78fa      	ldrb	r2, [r7, #3]
 8000332:	429a      	cmp	r2, r3
 8000334:	d303      	bcc.n	800033e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	795b      	ldrb	r3, [r3, #5]
 800033a:	3b01      	subs	r3, #1
 800033c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	799b      	ldrb	r3, [r3, #6]
 8000342:	78ba      	ldrb	r2, [r7, #2]
 8000344:	429a      	cmp	r2, r3
 8000346:	d303      	bcc.n	8000350 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	799b      	ldrb	r3, [r3, #6]
 800034c:	3b01      	subs	r3, #1
 800034e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000350:	78bb      	ldrb	r3, [r7, #2]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d102      	bne.n	800035c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	73fb      	strb	r3, [r7, #15]
 800035a:	e013      	b.n	8000384 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800035c:	78bb      	ldrb	r3, [r7, #2]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d103      	bne.n	800036a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	3340      	adds	r3, #64	@ 0x40
 8000366:	73fb      	strb	r3, [r7, #15]
 8000368:	e00c      	b.n	8000384 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800036a:	78bb      	ldrb	r3, [r7, #2]
 800036c:	2b02      	cmp	r3, #2
 800036e:	d103      	bne.n	8000378 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	3314      	adds	r3, #20
 8000374:	73fb      	strb	r3, [r7, #15]
 8000376:	e005      	b.n	8000384 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000378:	78bb      	ldrb	r3, [r7, #2]
 800037a:	2b03      	cmp	r3, #3
 800037c:	d102      	bne.n	8000384 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800037e:	78fb      	ldrb	r3, [r7, #3]
 8000380:	3354      	adds	r3, #84	@ 0x54
 8000382:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800038a:	b2db      	uxtb	r3, r3
 800038c:	2200      	movs	r2, #0
 800038e:	4619      	mov	r1, r3
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff fefa 	bl	800018a <CLCD_WriteI2C>
}
 8000396:	bf00      	nop
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}

0800039e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	b082      	sub	sp, #8
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	460b      	mov	r3, r1
 80003a8:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80003aa:	78fb      	ldrb	r3, [r7, #3]
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff feea 	bl	800018a <CLCD_WriteI2C>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003c8:	e007      	b.n	80003da <CLCD_I2C_WriteString+0x1c>
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	603a      	str	r2, [r7, #0]
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	4619      	mov	r1, r3
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff ffe2 	bl	800039e <CLCD_I2C_WriteChar>
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f3      	bne.n	80003ca <CLCD_I2C_WriteString+0xc>
}
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2101      	movs	r1, #1
 80003f8:	6878      	ldr	r0, [r7, #4]
 80003fa:	f7ff fec6 	bl	800018a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003fe:	2005      	movs	r0, #5
 8000400:	f7ff feb6 	bl	8000170 <CLCD_Delay>
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 8000418:	68f8      	ldr	r0, [r7, #12]
 800041a:	f7ff ffe7 	bl	80003ec <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	2100      	movs	r1, #0
 8000422:	68f8      	ldr	r0, [r7, #12]
 8000424:	f7ff ff78 	bl	8000318 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	68f8      	ldr	r0, [r7, #12]
 800042c:	f7ff ffc7 	bl	80003be <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 8000430:	2201      	movs	r2, #1
 8000432:	2100      	movs	r1, #0
 8000434:	68f8      	ldr	r0, [r7, #12]
 8000436:	f7ff ff6f 	bl	8000318 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 800043a:	6879      	ldr	r1, [r7, #4]
 800043c:	68f8      	ldr	r0, [r7, #12]
 800043e:	f7ff ffbe 	bl	80003be <CLCD_I2C_WriteString>
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8000452:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <KeyPad_Init+0xb0>)
 8000454:	2204      	movs	r2, #4
 8000456:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000458:	4b28      	ldr	r3, [pc, #160]	@ (80004fc <KeyPad_Init+0xb0>)
 800045a:	2204      	movs	r2, #4
 800045c:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800045e:	2300      	movs	r3, #0
 8000460:	75fb      	strb	r3, [r7, #23]
 8000462:	e022      	b.n	80004aa <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8000470:	7dfb      	ldrb	r3, [r7, #23]
 8000472:	4a23      	ldr	r2, [pc, #140]	@ (8000500 <KeyPad_Init+0xb4>)
 8000474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000478:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 800047a:	7dfb      	ldrb	r3, [r7, #23]
 800047c:	4a21      	ldr	r2, [pc, #132]	@ (8000504 <KeyPad_Init+0xb8>)
 800047e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000482:	1d3a      	adds	r2, r7, #4
 8000484:	4611      	mov	r1, r2
 8000486:	4618      	mov	r0, r3
 8000488:	f004 f80c 	bl	80044a4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 800048c:	7dfb      	ldrb	r3, [r7, #23]
 800048e:	4a1d      	ldr	r2, [pc, #116]	@ (8000504 <KeyPad_Init+0xb8>)
 8000490:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	4a1a      	ldr	r2, [pc, #104]	@ (8000500 <KeyPad_Init+0xb4>)
 8000498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800049c:	2201      	movs	r2, #1
 800049e:	4619      	mov	r1, r3
 80004a0:	f004 f99b 	bl	80047da <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 80004a4:	7dfb      	ldrb	r3, [r7, #23]
 80004a6:	3301      	adds	r3, #1
 80004a8:	75fb      	strb	r3, [r7, #23]
 80004aa:	4b14      	ldr	r3, [pc, #80]	@ (80004fc <KeyPad_Init+0xb0>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	7dfa      	ldrb	r2, [r7, #23]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d3d7      	bcc.n	8000464 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004b4:	2300      	movs	r3, #0
 80004b6:	75bb      	strb	r3, [r7, #22]
 80004b8:	e016      	b.n	80004e8 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 80004be:	2301      	movs	r3, #1
 80004c0:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	2302      	movs	r3, #2
 80004c4:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004c6:	7dbb      	ldrb	r3, [r7, #22]
 80004c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000508 <KeyPad_Init+0xbc>)
 80004ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ce:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004d0:	7dbb      	ldrb	r3, [r7, #22]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	@ (800050c <KeyPad_Init+0xc0>)
 80004d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d8:	1d3a      	adds	r2, r7, #4
 80004da:	4611      	mov	r1, r2
 80004dc:	4618      	mov	r0, r3
 80004de:	f003 ffe1 	bl	80044a4 <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004e2:	7dbb      	ldrb	r3, [r7, #22]
 80004e4:	3301      	adds	r3, #1
 80004e6:	75bb      	strb	r3, [r7, #22]
 80004e8:	4b04      	ldr	r3, [pc, #16]	@ (80004fc <KeyPad_Init+0xb0>)
 80004ea:	785b      	ldrb	r3, [r3, #1]
 80004ec:	7dba      	ldrb	r2, [r7, #22]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d3e3      	bcc.n	80004ba <KeyPad_Init+0x6e>
  }
}
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000214 	.word	0x20000214
 8000500:	0800dd28 	.word	0x0800dd28
 8000504:	20000000 	.word	0x20000000
 8000508:	0800dd30 	.word	0x0800dd30
 800050c:	20000010 	.word	0x20000010

08000510 <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8000516:	2300      	movs	r3, #0
 8000518:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
 800051e:	e07e      	b.n	800061e <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000520:	2300      	movs	r3, #0
 8000522:	71bb      	strb	r3, [r7, #6]
 8000524:	e00e      	b.n	8000544 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	4a42      	ldr	r2, [pc, #264]	@ (8000634 <KeyPad_Scan+0x124>)
 800052a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	4a41      	ldr	r2, [pc, #260]	@ (8000638 <KeyPad_Scan+0x128>)
 8000532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000536:	2201      	movs	r2, #1
 8000538:	4619      	mov	r1, r3
 800053a:	f004 f94e 	bl	80047da <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	3301      	adds	r3, #1
 8000542:	71bb      	strb	r3, [r7, #6]
 8000544:	4b3d      	ldr	r3, [pc, #244]	@ (800063c <KeyPad_Scan+0x12c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	79ba      	ldrb	r2, [r7, #6]
 800054a:	429a      	cmp	r2, r3
 800054c:	d3eb      	bcc.n	8000526 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4a38      	ldr	r2, [pc, #224]	@ (8000634 <KeyPad_Scan+0x124>)
 8000552:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4a37      	ldr	r2, [pc, #220]	@ (8000638 <KeyPad_Scan+0x128>)
 800055a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	f004 f93a 	bl	80047da <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000566:	2005      	movs	r0, #5
 8000568:	f003 fc6a 	bl	8003e40 <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
 8000570:	e04d      	b.n	800060e <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	4a32      	ldr	r2, [pc, #200]	@ (8000640 <KeyPad_Scan+0x130>)
 8000576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800057a:	797b      	ldrb	r3, [r7, #5]
 800057c:	4931      	ldr	r1, [pc, #196]	@ (8000644 <KeyPad_Scan+0x134>)
 800057e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000582:	4619      	mov	r1, r3
 8000584:	4610      	mov	r0, r2
 8000586:	f004 f911 	bl	80047ac <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d13b      	bne.n	8000608 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000590:	2014      	movs	r0, #20
 8000592:	f003 fc55 	bl	8003e40 <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	4a29      	ldr	r2, [pc, #164]	@ (8000640 <KeyPad_Scan+0x130>)
 800059a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800059e:	797b      	ldrb	r3, [r7, #5]
 80005a0:	4928      	ldr	r1, [pc, #160]	@ (8000644 <KeyPad_Scan+0x134>)
 80005a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005a6:	4619      	mov	r1, r3
 80005a8:	4610      	mov	r0, r2
 80005aa:	f004 f8ff 	bl	80047ac <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d129      	bne.n	8000608 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2201      	movs	r2, #1
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	b21a      	sxth	r2, r3
 80005be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	b21b      	sxth	r3, r3
 80005c6:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005c8:	797b      	ldrb	r3, [r7, #5]
 80005ca:	3308      	adds	r3, #8
 80005cc:	2201      	movs	r2, #1
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005d8:	4313      	orrs	r3, r2
 80005da:	b21b      	sxth	r3, r3
 80005dc:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005de:	e002      	b.n	80005e6 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005e0:	2005      	movs	r0, #5
 80005e2:	f003 fc2d 	bl	8003e40 <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005e6:	797b      	ldrb	r3, [r7, #5]
 80005e8:	4a15      	ldr	r2, [pc, #84]	@ (8000640 <KeyPad_Scan+0x130>)
 80005ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	4914      	ldr	r1, [pc, #80]	@ (8000644 <KeyPad_Scan+0x134>)
 80005f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005f6:	4619      	mov	r1, r3
 80005f8:	4610      	mov	r0, r2
 80005fa:	f004 f8d7 	bl	80047ac <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0ed      	beq.n	80005e0 <KeyPad_Scan+0xd0>
          return key;
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	e011      	b.n	800062c <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 8000608:	797b      	ldrb	r3, [r7, #5]
 800060a:	3301      	adds	r3, #1
 800060c:	717b      	strb	r3, [r7, #5]
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <KeyPad_Scan+0x12c>)
 8000610:	785b      	ldrb	r3, [r3, #1]
 8000612:	797a      	ldrb	r2, [r7, #5]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3ac      	bcc.n	8000572 <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	3301      	adds	r3, #1
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	4b07      	ldr	r3, [pc, #28]	@ (800063c <KeyPad_Scan+0x12c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	429a      	cmp	r2, r3
 8000626:	f4ff af7b 	bcc.w	8000520 <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 800062a:	887b      	ldrh	r3, [r7, #2]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000000 	.word	0x20000000
 8000638:	0800dd28 	.word	0x0800dd28
 800063c:	20000214 	.word	0x20000214
 8000640:	20000010 	.word	0x20000010
 8000644:	0800dd30 	.word	0x0800dd30

08000648 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 8000650:	e00e      	b.n	8000670 <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 8000652:	f7ff ff5d 	bl	8000510 <KeyPad_Scan>
 8000656:	4603      	mov	r3, r0
 8000658:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 800065a:	897b      	ldrh	r3, [r7, #10]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d004      	beq.n	800066a <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 8000660:	4a16      	ldr	r2, [pc, #88]	@ (80006bc <KeyPad_WaitForKey+0x74>)
 8000662:	897b      	ldrh	r3, [r7, #10]
 8000664:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000666:	897b      	ldrh	r3, [r7, #10]
 8000668:	e024      	b.n	80006b4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800066a:	2014      	movs	r0, #20
 800066c:	f003 fbe8 	bl	8003e40 <HAL_Delay>
  while(Timeout_ms==0)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0ed      	beq.n	8000652 <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000676:	f003 fbd9 	bl	8003e2c <HAL_GetTick>
 800067a:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800067c:	e00e      	b.n	800069c <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800067e:	f7ff ff47 	bl	8000510 <KeyPad_Scan>
 8000682:	4603      	mov	r3, r0
 8000684:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000686:	897b      	ldrh	r3, [r7, #10]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d004      	beq.n	8000696 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 800068c:	4a0b      	ldr	r2, [pc, #44]	@ (80006bc <KeyPad_WaitForKey+0x74>)
 800068e:	897b      	ldrh	r3, [r7, #10]
 8000690:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000692:	897b      	ldrh	r3, [r7, #10]
 8000694:	e00e      	b.n	80006b4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000696:	2014      	movs	r0, #20
 8000698:	f003 fbd2 	bl	8003e40 <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800069c:	f003 fbc6 	bl	8003e2c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8e8      	bhi.n	800067e <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 80006ac:	4b03      	ldr	r3, [pc, #12]	@ (80006bc <KeyPad_WaitForKey+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	805a      	strh	r2, [r3, #2]
	return 0;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000214 	.word	0x20000214

080006c0 <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ffbd 	bl	8000648 <KeyPad_WaitForKey>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f640 0208 	movw	r2, #2056	@ 0x808
 80006d4:	4293      	cmp	r3, r2
 80006d6:	f300 809f 	bgt.w	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 80006da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006de:	dc1a      	bgt.n	8000716 <KeyPad_WaitForKeyGetChar+0x56>
 80006e0:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006e4:	f300 8098 	bgt.w	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 80006e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006ec:	dc2a      	bgt.n	8000744 <KeyPad_WaitForKeyGetChar+0x84>
 80006ee:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006f2:	f300 8091 	bgt.w	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 80006f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006fa:	dc3b      	bgt.n	8000774 <KeyPad_WaitForKeyGetChar+0xb4>
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d069      	beq.n	80007d4 <KeyPad_WaitForKeyGetChar+0x114>
 8000700:	2b00      	cmp	r3, #0
 8000702:	f2c0 8089 	blt.w	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 8000706:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800070a:	f300 8085 	bgt.w	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 800070e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000712:	dc47      	bgt.n	80007a4 <KeyPad_WaitForKeyGetChar+0xe4>
 8000714:	e080      	b.n	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 8000716:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 800071a:	2b07      	cmp	r3, #7
 800071c:	d87c      	bhi.n	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 800071e:	a201      	add	r2, pc, #4	@ (adr r2, 8000724 <KeyPad_WaitForKeyGetChar+0x64>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	080007e5 	.word	0x080007e5
 8000728:	080007f5 	.word	0x080007f5
 800072c:	08000819 	.word	0x08000819
 8000730:	08000805 	.word	0x08000805
 8000734:	08000819 	.word	0x08000819
 8000738:	08000819 	.word	0x08000819
 800073c:	08000819 	.word	0x08000819
 8000740:	08000815 	.word	0x08000815
 8000744:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000748:	2b07      	cmp	r3, #7
 800074a:	d865      	bhi.n	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 800074c:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <KeyPad_WaitForKeyGetChar+0x94>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	080007e1 	.word	0x080007e1
 8000758:	080007f1 	.word	0x080007f1
 800075c:	08000819 	.word	0x08000819
 8000760:	08000801 	.word	0x08000801
 8000764:	08000819 	.word	0x08000819
 8000768:	08000819 	.word	0x08000819
 800076c:	08000819 	.word	0x08000819
 8000770:	08000811 	.word	0x08000811
 8000774:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000778:	2b07      	cmp	r3, #7
 800077a:	d84d      	bhi.n	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 800077c:	a201      	add	r2, pc, #4	@ (adr r2, 8000784 <KeyPad_WaitForKeyGetChar+0xc4>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	080007dd 	.word	0x080007dd
 8000788:	080007ed 	.word	0x080007ed
 800078c:	08000819 	.word	0x08000819
 8000790:	080007fd 	.word	0x080007fd
 8000794:	08000819 	.word	0x08000819
 8000798:	08000819 	.word	0x08000819
 800079c:	08000819 	.word	0x08000819
 80007a0:	0800080d 	.word	0x0800080d
 80007a4:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	d835      	bhi.n	8000818 <KeyPad_WaitForKeyGetChar+0x158>
 80007ac:	a201      	add	r2, pc, #4	@ (adr r2, 80007b4 <KeyPad_WaitForKeyGetChar+0xf4>)
 80007ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b2:	bf00      	nop
 80007b4:	080007d9 	.word	0x080007d9
 80007b8:	080007e9 	.word	0x080007e9
 80007bc:	08000819 	.word	0x08000819
 80007c0:	080007f9 	.word	0x080007f9
 80007c4:	08000819 	.word	0x08000819
 80007c8:	08000819 	.word	0x08000819
 80007cc:	08000819 	.word	0x08000819
 80007d0:	08000809 	.word	0x08000809
  {
    case 0x0000:
      return 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e020      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007d8:	2331      	movs	r3, #49	@ 0x31
 80007da:	e01e      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007dc:	2332      	movs	r3, #50	@ 0x32
 80007de:	e01c      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007e0:	2333      	movs	r3, #51	@ 0x33
 80007e2:	e01a      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007e4:	2341      	movs	r3, #65	@ 0x41
 80007e6:	e018      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007e8:	2334      	movs	r3, #52	@ 0x34
 80007ea:	e016      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007ec:	2335      	movs	r3, #53	@ 0x35
 80007ee:	e014      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007f0:	2336      	movs	r3, #54	@ 0x36
 80007f2:	e012      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007f4:	2342      	movs	r3, #66	@ 0x42
 80007f6:	e010      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007f8:	2337      	movs	r3, #55	@ 0x37
 80007fa:	e00e      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007fc:	2338      	movs	r3, #56	@ 0x38
 80007fe:	e00c      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 8000800:	2339      	movs	r3, #57	@ 0x39
 8000802:	e00a      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 8000804:	2343      	movs	r3, #67	@ 0x43
 8000806:	e008      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 8000808:	232a      	movs	r3, #42	@ 0x2a
 800080a:	e006      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 800080c:	2330      	movs	r3, #48	@ 0x30
 800080e:	e004      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 8000810:	2323      	movs	r3, #35	@ 0x23
 8000812:	e002      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8000814:	2344      	movs	r3, #68	@ 0x44
 8000816:	e000      	b.n	800081a <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 8000818:	2300      	movs	r3, #0
	}
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop

08000824 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800082e:	1df9      	adds	r1, r7, #7
 8000830:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000834:	2201      	movs	r2, #1
 8000836:	4803      	ldr	r0, [pc, #12]	@ (8000844 <USART_SendByte+0x20>)
 8000838:	f007 fbc5 	bl	8007fc6 <HAL_UART_Transmit>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000310 	.word	0x20000310

08000848 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 8000852:	bf00      	nop
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b29a      	uxth	r2, r3
 8000858:	f107 0108 	add.w	r1, r7, #8
 800085c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000860:	4808      	ldr	r0, [pc, #32]	@ (8000884 <receive_finger+0x3c>)
 8000862:	f007 fc42 	bl	80080ea <HAL_UART_Receive>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0f3      	beq.n	8000854 <receive_finger+0xc>
	p=D[len-3];
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	3b03      	subs	r3, #3
 8000870:	3318      	adds	r3, #24
 8000872:	443b      	add	r3, r7
 8000874:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000878:	75fb      	strb	r3, [r7, #23]
	return p;
 800087a:	7dfb      	ldrb	r3, [r7, #23]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000310 	.word	0x20000310

08000888 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
	HAL_UART_Receive(&huart1,D,len,1000);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	b29a      	uxth	r2, r3
 8000896:	f107 0108 	add.w	r1, r7, #8
 800089a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089e:	4807      	ldr	r0, [pc, #28]	@ (80008bc <receive_finger_match+0x34>)
 80008a0:	f007 fc23 	bl	80080ea <HAL_UART_Receive>
	p=D[len-5];
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	3b05      	subs	r3, #5
 80008a8:	3318      	adds	r3, #24
 80008aa:	443b      	add	r3, r7
 80008ac:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008b0:	75fb      	strb	r3, [r7, #23]
	return p;
 80008b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000310 	.word	0x20000310

080008c0 <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
	HAL_UART_Receive(&huart1,D,len,200);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f107 010c 	add.w	r1, r7, #12
 80008d2:	23c8      	movs	r3, #200	@ 0xc8
 80008d4:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <receive_finger_search+0x38>)
 80008d6:	f007 fc08 	bl	80080ea <HAL_UART_Receive>
	p=D[len-7];
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	3b07      	subs	r3, #7
 80008de:	3320      	adds	r3, #32
 80008e0:	443b      	add	r3, r7
 80008e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008e6:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008e8:	7dfa      	ldrb	r2, [r7, #23]
 80008ea:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <receive_finger_search+0x3c>)
 80008ec:	701a      	strb	r2, [r3, #0]

	return p;
 80008ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000310 	.word	0x20000310
 80008fc:	20000218 	.word	0x20000218

08000900 <collect_finger>:
int collect_finger(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000904:	20ef      	movs	r0, #239	@ 0xef
 8000906:	f7ff ff8d 	bl	8000824 <USART_SendByte>
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff ff8a 	bl	8000824 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000910:	20ff      	movs	r0, #255	@ 0xff
 8000912:	f7ff ff87 	bl	8000824 <USART_SendByte>
 8000916:	20ff      	movs	r0, #255	@ 0xff
 8000918:	f7ff ff84 	bl	8000824 <USART_SendByte>
 800091c:	20ff      	movs	r0, #255	@ 0xff
 800091e:	f7ff ff81 	bl	8000824 <USART_SendByte>
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	f7ff ff7e 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000928:	2001      	movs	r0, #1
 800092a:	f7ff ff7b 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff ff78 	bl	8000824 <USART_SendByte>
 8000934:	2003      	movs	r0, #3
 8000936:	f7ff ff75 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 800093a:	2001      	movs	r0, #1
 800093c:	f7ff ff72 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff ff6f 	bl	8000824 <USART_SendByte>
 8000946:	2005      	movs	r0, #5
 8000948:	f7ff ff6c 	bl	8000824 <USART_SendByte>
   return receive_finger(12);
 800094c:	200c      	movs	r0, #12
 800094e:	f7ff ff7b 	bl	8000848 <receive_finger>
 8000952:	4603      	mov	r3, r0
}
 8000954:	4618      	mov	r0, r3
 8000956:	bd80      	pop	{r7, pc}

08000958 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	3307      	adds	r3, #7
 800096a:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 800096c:	20ef      	movs	r0, #239	@ 0xef
 800096e:	f7ff ff59 	bl	8000824 <USART_SendByte>
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff ff56 	bl	8000824 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000978:	20ff      	movs	r0, #255	@ 0xff
 800097a:	f7ff ff53 	bl	8000824 <USART_SendByte>
 800097e:	20ff      	movs	r0, #255	@ 0xff
 8000980:	f7ff ff50 	bl	8000824 <USART_SendByte>
 8000984:	20ff      	movs	r0, #255	@ 0xff
 8000986:	f7ff ff4d 	bl	8000824 <USART_SendByte>
 800098a:	20ff      	movs	r0, #255	@ 0xff
 800098c:	f7ff ff4a 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff ff47 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff ff44 	bl	8000824 <USART_SendByte>
 800099c:	2004      	movs	r0, #4
 800099e:	f7ff ff41 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x02);
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff ff3e 	bl	8000824 <USART_SendByte>
   USART_SendByte(local);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff3a 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff ff37 	bl	8000824 <USART_SendByte>
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff32 	bl	8000824 <USART_SendByte>
   return receive_finger(12);
 80009c0:	200c      	movs	r0, #12
 80009c2:	f7ff ff41 	bl	8000848 <receive_finger>
 80009c6:	4603      	mov	r3, r0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009d4:	20ef      	movs	r0, #239	@ 0xef
 80009d6:	f7ff ff25 	bl	8000824 <USART_SendByte>
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff ff22 	bl	8000824 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009e0:	20ff      	movs	r0, #255	@ 0xff
 80009e2:	f7ff ff1f 	bl	8000824 <USART_SendByte>
 80009e6:	20ff      	movs	r0, #255	@ 0xff
 80009e8:	f7ff ff1c 	bl	8000824 <USART_SendByte>
 80009ec:	20ff      	movs	r0, #255	@ 0xff
 80009ee:	f7ff ff19 	bl	8000824 <USART_SendByte>
 80009f2:	20ff      	movs	r0, #255	@ 0xff
 80009f4:	f7ff ff16 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff ff13 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff ff10 	bl	8000824 <USART_SendByte>
 8000a04:	2003      	movs	r0, #3
 8000a06:	f7ff ff0d 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x03);
 8000a0a:	2003      	movs	r0, #3
 8000a0c:	f7ff ff0a 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff ff07 	bl	8000824 <USART_SendByte>
 8000a16:	2007      	movs	r0, #7
 8000a18:	f7ff ff04 	bl	8000824 <USART_SendByte>
   return receive_finger_match(14);
 8000a1c:	200e      	movs	r0, #14
 8000a1e:	f7ff ff33 	bl	8000888 <receive_finger_match>
 8000a22:	4603      	mov	r3, r0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a2c:	20ef      	movs	r0, #239	@ 0xef
 8000a2e:	f7ff fef9 	bl	8000824 <USART_SendByte>
 8000a32:	2001      	movs	r0, #1
 8000a34:	f7ff fef6 	bl	8000824 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a38:	20ff      	movs	r0, #255	@ 0xff
 8000a3a:	f7ff fef3 	bl	8000824 <USART_SendByte>
 8000a3e:	20ff      	movs	r0, #255	@ 0xff
 8000a40:	f7ff fef0 	bl	8000824 <USART_SendByte>
 8000a44:	20ff      	movs	r0, #255	@ 0xff
 8000a46:	f7ff feed 	bl	8000824 <USART_SendByte>
 8000a4a:	20ff      	movs	r0, #255	@ 0xff
 8000a4c:	f7ff feea 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fee7 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fee4 	bl	8000824 <USART_SendByte>
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f7ff fee1 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x05);
 8000a62:	2005      	movs	r0, #5
 8000a64:	f7ff fede 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fedb 	bl	8000824 <USART_SendByte>
 8000a6e:	2009      	movs	r0, #9
 8000a70:	f7ff fed8 	bl	8000824 <USART_SendByte>
   return receive_finger(12);
 8000a74:	200c      	movs	r0, #12
 8000a76:	f7ff fee7 	bl	8000848 <receive_finger>
 8000a7a:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	330e      	adds	r3, #14
 8000a8e:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a90:	20ef      	movs	r0, #239	@ 0xef
 8000a92:	f7ff fec7 	bl	8000824 <USART_SendByte>
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff fec4 	bl	8000824 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a9c:	20ff      	movs	r0, #255	@ 0xff
 8000a9e:	f7ff fec1 	bl	8000824 <USART_SendByte>
 8000aa2:	20ff      	movs	r0, #255	@ 0xff
 8000aa4:	f7ff febe 	bl	8000824 <USART_SendByte>
 8000aa8:	20ff      	movs	r0, #255	@ 0xff
 8000aaa:	f7ff febb 	bl	8000824 <USART_SendByte>
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	f7ff feb8 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff feb5 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff feb2 	bl	8000824 <USART_SendByte>
 8000ac0:	2006      	movs	r0, #6
 8000ac2:	f7ff feaf 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x06);
 8000ac6:	2006      	movs	r0, #6
 8000ac8:	f7ff feac 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fea9 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fea6 	bl	8000824 <USART_SendByte>
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fea2 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fe9f 	bl	8000824 <USART_SendByte>
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe9b 	bl	8000824 <USART_SendByte>
   return receive_finger(12);
 8000aee:	200c      	movs	r0, #12
 8000af0:	f7ff feaa 	bl	8000848 <receive_finger>
 8000af4:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000b02:	20ef      	movs	r0, #239	@ 0xef
 8000b04:	f7ff fe8e 	bl	8000824 <USART_SendByte>
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fe8b 	bl	8000824 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000b0e:	20ff      	movs	r0, #255	@ 0xff
 8000b10:	f7ff fe88 	bl	8000824 <USART_SendByte>
 8000b14:	20ff      	movs	r0, #255	@ 0xff
 8000b16:	f7ff fe85 	bl	8000824 <USART_SendByte>
 8000b1a:	20ff      	movs	r0, #255	@ 0xff
 8000b1c:	f7ff fe82 	bl	8000824 <USART_SendByte>
 8000b20:	20ff      	movs	r0, #255	@ 0xff
 8000b22:	f7ff fe7f 	bl	8000824 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b26:	2001      	movs	r0, #1
 8000b28:	f7ff fe7c 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff fe79 	bl	8000824 <USART_SendByte>
 8000b32:	2008      	movs	r0, #8
 8000b34:	f7ff fe76 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x04);
 8000b38:	2004      	movs	r0, #4
 8000b3a:	f7ff fe73 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff fe70 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff fe6d 	bl	8000824 <USART_SendByte>
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff fe6a 	bl	8000824 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fe67 	bl	8000824 <USART_SendByte>
 8000b56:	20ff      	movs	r0, #255	@ 0xff
 8000b58:	f7ff fe64 	bl	8000824 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f7ff fe61 	bl	8000824 <USART_SendByte>
 8000b62:	200d      	movs	r0, #13
 8000b64:	f7ff fe5e 	bl	8000824 <USART_SendByte>
   return receive_finger_search(16);
 8000b68:	2010      	movs	r0, #16
 8000b6a:	f7ff fea9 	bl	80008c0 <receive_finger_search>
 8000b6e:	4603      	mov	r3, r0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <empty>:
//		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
   return receive_finger_search(16);

}
int empty(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
//   tmp=0xFF;
//	int D[20];
 //  for(i=0;i<20;i++) D[i]=0xDD;
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000b78:	20ef      	movs	r0, #239	@ 0xef
 8000b7a:	f7ff fe53 	bl	8000824 <USART_SendByte>
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fe50 	bl	8000824 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000b84:	20ff      	movs	r0, #255	@ 0xff
 8000b86:	f7ff fe4d 	bl	8000824 <USART_SendByte>
 8000b8a:	20ff      	movs	r0, #255	@ 0xff
 8000b8c:	f7ff fe4a 	bl	8000824 <USART_SendByte>
 8000b90:	20ff      	movs	r0, #255	@ 0xff
 8000b92:	f7ff fe47 	bl	8000824 <USART_SendByte>
 8000b96:	20ff      	movs	r0, #255	@ 0xff
 8000b98:	f7ff fe44 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x01);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff fe41 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff fe3e 	bl	8000824 <USART_SendByte>
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f7ff fe3b 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x0D);
 8000bae:	200d      	movs	r0, #13
 8000bb0:	f7ff fe38 	bl	8000824 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x11);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff fe35 	bl	8000824 <USART_SendByte>
 8000bba:	2011      	movs	r0, #17
 8000bbc:	f7ff fe32 	bl	8000824 <USART_SendByte>
   return receive_finger(12);
 8000bc0:	200c      	movs	r0, #12
 8000bc2:	f7ff fe41 	bl	8000848 <receive_finger>
 8000bc6:	4603      	mov	r3, r0

}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <delete_id_finger>:
int delete_id_finger(uint8_t id)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t sum1;
    sum1 = 0x15 + id;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3315      	adds	r3, #21
 8000bda:	73fb      	strb	r3, [r7, #15]
    USART_SendByte(0xEF);USART_SendByte(0x01);
 8000bdc:	20ef      	movs	r0, #239	@ 0xef
 8000bde:	f7ff fe21 	bl	8000824 <USART_SendByte>
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff fe1e 	bl	8000824 <USART_SendByte>
    USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000be8:	20ff      	movs	r0, #255	@ 0xff
 8000bea:	f7ff fe1b 	bl	8000824 <USART_SendByte>
 8000bee:	20ff      	movs	r0, #255	@ 0xff
 8000bf0:	f7ff fe18 	bl	8000824 <USART_SendByte>
 8000bf4:	20ff      	movs	r0, #255	@ 0xff
 8000bf6:	f7ff fe15 	bl	8000824 <USART_SendByte>
 8000bfa:	20ff      	movs	r0, #255	@ 0xff
 8000bfc:	f7ff fe12 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x01);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff fe0f 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x07);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff fe0c 	bl	8000824 <USART_SendByte>
 8000c0c:	2007      	movs	r0, #7
 8000c0e:	f7ff fe09 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x0C);
 8000c12:	200c      	movs	r0, #12
 8000c14:	f7ff fe06 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(id);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe03 	bl	8000824 <USART_SendByte>
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fdff 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x01);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fdfc 	bl	8000824 <USART_SendByte>
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff fdf9 	bl	8000824 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(sum1);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff fdf6 	bl	8000824 <USART_SendByte>
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fdf2 	bl	8000824 <USART_SendByte>
    return receive_finger(12);
 8000c40:	200c      	movs	r0, #12
 8000c42:	f7ff fe01 	bl	8000848 <receive_finger>
 8000c46:	4603      	mov	r3, r0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <Flash_Erase>:
#include <flash.h>

void Flash_Erase(uint32_t address){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000c58:	f003 fa94 	bl	8004184 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000c6c:	f107 020c 	add.w	r2, r7, #12
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 fb6c 	bl	8004354 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000c7c:	f003 faa8 	bl	80041d0 <HAL_FLASH_Lock>
}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000c94:	f003 fa76 	bl	8004184 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	461c      	mov	r4, r3
 8000c9e:	4615      	mov	r5, r2
 8000ca0:	4622      	mov	r2, r4
 8000ca2:	462b      	mov	r3, r5
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f003 f9fc 	bl	80040a4 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000cac:	f003 fa90 	bl	80041d0 <HAL_FLASH_Lock>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bdb0      	pop	{r4, r5, r7, pc}

08000cb8 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000cc6:	f003 fa5d 	bl	8004184 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000cca:	2300      	movs	r3, #0
 8000ccc:	82fb      	strh	r3, [r7, #22]
 8000cce:	e00c      	b.n	8000cea <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000cd0:	8afa      	ldrh	r2, [r7, #22]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	18d0      	adds	r0, r2, r3
 8000cd6:	8afb      	ldrh	r3, [r7, #22]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	4413      	add	r3, r2
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f7ff ffd2 	bl	8000c88 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000ce4:	8afb      	ldrh	r3, [r7, #22]
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	82fb      	strh	r3, [r7, #22]
 8000cea:	8afa      	ldrh	r2, [r7, #22]
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d3ee      	bcc.n	8000cd0 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000cf2:	f003 fa6d 	bl	80041d0 <HAL_FLASH_Lock>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	b29b      	uxth	r3, r3
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <Flash_Read_Array>:
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
	return *(__IO uint64_t *)(address);
}
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000d2e:	b480      	push	{r7}
 8000d30:	b087      	sub	sp, #28
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	82fb      	strh	r3, [r7, #22]
 8000d40:	e00c      	b.n	8000d5c <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000d42:	8afa      	ldrh	r2, [r7, #22]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	4619      	mov	r1, r3
 8000d4a:	8afb      	ldrh	r3, [r7, #22]
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	4413      	add	r3, r2
 8000d50:	780a      	ldrb	r2, [r1, #0]
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000d56:	8afb      	ldrh	r3, [r7, #22]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	82fb      	strh	r3, [r7, #22]
 8000d5c:	8afa      	ldrh	r2, [r7, #22]
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d3ee      	bcc.n	8000d42 <Flash_Read_Array+0x14>
	}
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	371c      	adds	r7, #28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000d80:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d8a:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000d8c:	e002      	b.n	8000d94 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000020 	.word	0x20000020

08000da4 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000daa:	f7ff fda9 	bl	8000900 <collect_finger>
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <check_fingerprint_status+0x24>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
    }
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000040e 	.word	0x2000040e

08000dcc <process_fingerprint>:
void process_fingerprint()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000dd0:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <process_fingerprint+0x1c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000dd8:	4b03      	ldr	r3, [pc, #12]	@ (8000de8 <process_fingerprint+0x1c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000dde:	f002 f837 	bl	8002e50 <read_finger>
    }
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000040e 	.word	0x2000040e

08000dec <InputID>:

uint8_t InputID(const char *prompt, uint8_t min, uint8_t max) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	@ 0x30
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	70bb      	strb	r3, [r7, #2]
    uint16_t id = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	83fb      	strh	r3, [r7, #30]
    char id_str[4] = {0};
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
    uint8_t index = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char display_prompt[16];
    snprintf(display_prompt, sizeof(display_prompt), "Enter ID (%d-%d):", min, max);
 8000e0a:	78fa      	ldrb	r2, [r7, #3]
 8000e0c:	78bb      	ldrb	r3, [r7, #2]
 8000e0e:	f107 0008 	add.w	r0, r7, #8
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	4613      	mov	r3, r2
 8000e16:	4a4e      	ldr	r2, [pc, #312]	@ (8000f50 <InputID+0x164>)
 8000e18:	2110      	movs	r1, #16
 8000e1a:	f00b feb5 	bl	800cb88 <sniprintf>
    CLCD_I2C_Display(&LCD1, display_prompt, "ID= ");
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	4a4c      	ldr	r2, [pc, #304]	@ (8000f54 <InputID+0x168>)
 8000e24:	4619      	mov	r1, r3
 8000e26:	484c      	ldr	r0, [pc, #304]	@ (8000f58 <InputID+0x16c>)
 8000e28:	f7ff faf0 	bl	800040c <CLCD_I2C_Display>
    uint32_t start_time = HAL_GetTick();
 8000e2c:	f002 fffe 	bl	8003e2c <HAL_GetTick>
 8000e30:	6238      	str	r0, [r7, #32]
    while (1) {
        if (HAL_GetTick() - start_time > 15000) { // 15 seconds timeout
 8000e32:	f002 fffb 	bl	8003e2c <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d910      	bls.n	8000e66 <InputID+0x7a>
            CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8000e44:	4a45      	ldr	r2, [pc, #276]	@ (8000f5c <InputID+0x170>)
 8000e46:	4946      	ldr	r1, [pc, #280]	@ (8000f60 <InputID+0x174>)
 8000e48:	4843      	ldr	r0, [pc, #268]	@ (8000f58 <InputID+0x16c>)
 8000e4a:	f7ff fadf 	bl	800040c <CLCD_I2C_Display>
            buzzer(5);
 8000e4e:	2005      	movs	r0, #5
 8000e50:	f002 fae8 	bl	8003424 <buzzer>
            HAL_Delay(2000);
 8000e54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e58:	f002 fff2 	bl	8003e40 <HAL_Delay>
            exitmenu = Delaymenu;
 8000e5c:	4b41      	ldr	r3, [pc, #260]	@ (8000f64 <InputID+0x178>)
 8000e5e:	2214      	movs	r2, #20
 8000e60:	701a      	strb	r2, [r3, #0]
            return 0; // Return 0 to indicate timeout
 8000e62:	2300      	movs	r3, #0
 8000e64:	e070      	b.n	8000f48 <InputID+0x15c>
        }
        char key = KeyPad_WaitForKeyGetChar(10);
 8000e66:	200a      	movs	r0, #10
 8000e68:	f7ff fc2a 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	777b      	strb	r3, [r7, #29]
        if (key >= '0' && key <= '9' && index < 3) {
 8000e70:	7f7b      	ldrb	r3, [r7, #29]
 8000e72:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e74:	d919      	bls.n	8000eaa <InputID+0xbe>
 8000e76:	7f7b      	ldrb	r3, [r7, #29]
 8000e78:	2b39      	cmp	r3, #57	@ 0x39
 8000e7a:	d816      	bhi.n	8000eaa <InputID+0xbe>
 8000e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d812      	bhi.n	8000eaa <InputID+0xbe>
            buzzer(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f002 facd 	bl	8003424 <buzzer>
            id_str[index++] = key;
 8000e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8000e94:	3328      	adds	r3, #40	@ 0x28
 8000e96:	443b      	add	r3, r7
 8000e98:	7f7a      	ldrb	r2, [r7, #29]
 8000e9a:	f803 2c10 	strb.w	r2, [r3, #-16]
            CLCD_I2C_WriteChar(&LCD1, key);
 8000e9e:	7f7b      	ldrb	r3, [r7, #29]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	482d      	ldr	r0, [pc, #180]	@ (8000f58 <InputID+0x16c>)
 8000ea4:	f7ff fa7b 	bl	800039e <CLCD_I2C_WriteChar>
 8000ea8:	e03c      	b.n	8000f24 <InputID+0x138>
        } else if (key == '#' && index > 0) {
 8000eaa:	7f7b      	ldrb	r3, [r7, #29]
 8000eac:	2b23      	cmp	r3, #35	@ 0x23
 8000eae:	d1c0      	bne.n	8000e32 <InputID+0x46>
 8000eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0bc      	beq.n	8000e32 <InputID+0x46>
            buzzer(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f002 fab3 	bl	8003424 <buzzer>
            id = atoi(id_str);
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00b fdd8 	bl	800ca78 <atoi>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	83fb      	strh	r3, [r7, #30]
            if (id >= min && id <= max) {
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	8bfa      	ldrh	r2, [r7, #30]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d304      	bcc.n	8000ee0 <InputID+0xf4>
 8000ed6:	78bb      	ldrb	r3, [r7, #2]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	8bfa      	ldrh	r2, [r7, #30]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d922      	bls.n	8000f26 <InputID+0x13a>
                break;
            } else {
                CLCD_I2C_Display(&LCD1, "Invalid ID", display_prompt);
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4920      	ldr	r1, [pc, #128]	@ (8000f68 <InputID+0x17c>)
 8000ee8:	481b      	ldr	r0, [pc, #108]	@ (8000f58 <InputID+0x16c>)
 8000eea:	f7ff fa8f 	bl	800040c <CLCD_I2C_Display>
                buzzer(5);
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f002 fa98 	bl	8003424 <buzzer>
                HAL_Delay(2000);
 8000ef4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ef8:	f002 ffa2 	bl	8003e40 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, display_prompt, "ID= ");
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <InputID+0x168>)
 8000f02:	4619      	mov	r1, r3
 8000f04:	4814      	ldr	r0, [pc, #80]	@ (8000f58 <InputID+0x16c>)
 8000f06:	f7ff fa81 	bl	800040c <CLCD_I2C_Display>
                memset(id_str, 0, sizeof(id_str));
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	2204      	movs	r2, #4
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00b fe8c 	bl	800cc30 <memset>
                index = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                start_time = HAL_GetTick(); // Reset the timer
 8000f1e:	f002 ff85 	bl	8003e2c <HAL_GetTick>
 8000f22:	6238      	str	r0, [r7, #32]
    while (1) {
 8000f24:	e785      	b.n	8000e32 <InputID+0x46>
            }
        }
    }
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2104      	movs	r1, #4
 8000f2a:	480b      	ldr	r0, [pc, #44]	@ (8000f58 <InputID+0x16c>)
 8000f2c:	f7ff f9f4 	bl	8000318 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, id_str);
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4619      	mov	r1, r3
 8000f36:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <InputID+0x16c>)
 8000f38:	f7ff fa41 	bl	80003be <CLCD_I2C_WriteString>
    HAL_Delay(1000);
 8000f3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f40:	f002 ff7e 	bl	8003e40 <HAL_Delay>
    return id;
 8000f44:	8bfb      	ldrh	r3, [r7, #30]
 8000f46:	b2db      	uxtb	r3, r3
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3728      	adds	r7, #40	@ 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0800d568 	.word	0x0800d568
 8000f54:	0800d57c 	.word	0x0800d57c
 8000f58:	200003dc 	.word	0x200003dc
 8000f5c:	0800d584 	.word	0x0800d584
 8000f60:	0800d590 	.word	0x0800d590
 8000f64:	20000020 	.word	0x20000020
 8000f68:	0800d598 	.word	0x0800d598

08000f6c <InputID_ADMIN>:

uint8_t InputID_ADMIN() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    return InputID("EnterID (1-27):", 1, 27);
 8000f70:	221b      	movs	r2, #27
 8000f72:	2101      	movs	r1, #1
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <InputID_ADMIN+0x14>)
 8000f76:	f7ff ff39 	bl	8000dec <InputID>
 8000f7a:	4603      	mov	r3, r0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	0800d5a4 	.word	0x0800d5a4

08000f84 <InputID_USER>:

uint8_t InputID_USER() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    return InputID("EnterID (1-100):", 1, 100);
 8000f88:	2264      	movs	r2, #100	@ 0x64
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <InputID_USER+0x14>)
 8000f8e:	f7ff ff2d 	bl	8000dec <InputID>
 8000f92:	4603      	mov	r3, r0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	0800d5b4 	.word	0x0800d5b4

08000f9c <InputID_FINGER>:

uint8_t InputID_FINGER() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    return InputID("EnterID (1-127):", 1, 127);
 8000fa0:	227f      	movs	r2, #127	@ 0x7f
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <InputID_FINGER+0x14>)
 8000fa6:	f7ff ff21 	bl	8000dec <InputID>
 8000faa:	4603      	mov	r3, r0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0800d5c8 	.word	0x0800d5c8

08000fb4 <InputID_FACE>:

uint8_t InputID_FACE() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    return InputID("EnterID (1-127):", 1, 127);
 8000fb8:	227f      	movs	r2, #127	@ 0x7f
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <InputID_FACE+0x14>)
 8000fbe:	f7ff ff15 	bl	8000dec <InputID>
 8000fc2:	4603      	mov	r3, r0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	0800d5c8 	.word	0x0800d5c8

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b090      	sub	sp, #64	@ 0x40
 8000fd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f002 fed3 	bl	8003d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f9a7 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 fadd 	bl	8001598 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fde:	f000 fa2d 	bl	800143c <MX_SPI1_Init>
  MX_I2C2_Init();
 8000fe2:	f000 f9fd 	bl	80013e0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000fe6:	f000 faad 	bl	8001544 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000fea:	f000 fa5d 	bl	80014a8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000fee:	f00b f899 	bl	800c124 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000ff2:	f002 fa69 	bl	80034c8 <TM_MFRC522_Init>
  KeyPad_Init();
 8000ff6:	f7ff fa29 	bl	800044c <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2310      	movs	r3, #16
 8001000:	224e      	movs	r2, #78	@ 0x4e
 8001002:	49b7      	ldr	r1, [pc, #732]	@ (80012e0 <main+0x314>)
 8001004:	48b7      	ldr	r0, [pc, #732]	@ (80012e4 <main+0x318>)
 8001006:	f7ff f917 	bl	8000238 <CLCD_I2C_Init>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001010:	48b5      	ldr	r0, [pc, #724]	@ (80012e8 <main+0x31c>)
 8001012:	f003 fbe2 	bl	80047da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800101c:	48b2      	ldr	r0, [pc, #712]	@ (80012e8 <main+0x31c>)
 800101e:	f003 fbdc 	bl	80047da <HAL_GPIO_WritePin>

  // Check if the password is set, if not, set the default password
  char stored_password[7] = {0};
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2100      	movs	r1, #0
 800102c:	460a      	mov	r2, r1
 800102e:	801a      	strh	r2, [r3, #0]
 8001030:	460a      	mov	r2, r1
 8001032:	709a      	strb	r2, [r3, #2]
  Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8001034:	f107 0318 	add.w	r3, r7, #24
 8001038:	2206      	movs	r2, #6
 800103a:	4619      	mov	r1, r3
 800103c:	48ab      	ldr	r0, [pc, #684]	@ (80012ec <main+0x320>)
 800103e:	f7ff fe76 	bl	8000d2e <Flash_Read_Array>
  stored_password[6] = '\0';
 8001042:	2300      	movs	r3, #0
 8001044:	77bb      	strb	r3, [r7, #30]
  int is_empty = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	637b      	str	r3, [r7, #52]	@ 0x34
  for (int i = 0; i < 6; i++) {
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	@ 0x30
 800104e:	e00c      	b.n	800106a <main+0x9e>
      if (stored_password[i] != (char)0xFF) {
 8001050:	f107 0218 	add.w	r2, r7, #24
 8001054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2bff      	cmp	r3, #255	@ 0xff
 800105c:	d002      	beq.n	8001064 <main+0x98>
          is_empty = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8001062:	e005      	b.n	8001070 <main+0xa4>
  for (int i = 0; i < 6; i++) {
 8001064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001066:	3301      	adds	r3, #1
 8001068:	633b      	str	r3, [r7, #48]	@ 0x30
 800106a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800106c:	2b05      	cmp	r3, #5
 800106e:	ddef      	ble.n	8001050 <main+0x84>
      }
  }
  if (is_empty) {
 8001070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <main+0xae>
      set_default_password();
 8001076:	f002 f945 	bl	8003304 <set_default_password>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 800107a:	489d      	ldr	r0, [pc, #628]	@ (80012f0 <main+0x324>)
 800107c:	f006 fbac 	bl	80077d8 <HAL_TIM_Base_Start_IT>
  if (checkcountUID() == 0)
 8001080:	f000 ff28 	bl	8001ed4 <checkcountUID>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <main+0xc2>
  {
      startadd();
 800108a:	f001 fb53 	bl	8002734 <startadd>
  }
  int incorrect_attempts = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    CLCD_I2C_Clear(&LCD1);
 8001092:	4894      	ldr	r0, [pc, #592]	@ (80012e4 <main+0x318>)
 8001094:	f7ff f9aa 	bl	80003ec <CLCD_I2C_Clear>
    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	4891      	ldr	r0, [pc, #580]	@ (80012e4 <main+0x318>)
 800109e:	f7ff f93b 	bl	8000318 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 80010a2:	4994      	ldr	r1, [pc, #592]	@ (80012f4 <main+0x328>)
 80010a4:	488f      	ldr	r0, [pc, #572]	@ (80012e4 <main+0x318>)
 80010a6:	f7ff f98a 	bl	80003be <CLCD_I2C_WriteString>

    char selected_key = KeyPad_WaitForKeyGetChar(10); // Ch�? vô hạn cho đ���n khi có phím nhấn.
 80010aa:	200a      	movs	r0, #10
 80010ac:	f7ff fb08 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    if (selected_key == '#')
 80010b6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80010ba:	2b23      	cmp	r3, #35	@ 0x23
 80010bc:	d166      	bne.n	800118c <main+0x1c0>
    {
    	buzzer(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f002 f9b0 	bl	8003424 <buzzer>
        char entered_password[7] = {0};
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2100      	movs	r1, #0
 80010ce:	460a      	mov	r2, r1
 80010d0:	801a      	strh	r2, [r3, #0]
 80010d2:	460a      	mov	r2, r1
 80010d4:	709a      	strb	r2, [r3, #2]
        CLCD_I2C_Display(&LCD1, "ENTER PASSWORD", "");
 80010d6:	4a88      	ldr	r2, [pc, #544]	@ (80012f8 <main+0x32c>)
 80010d8:	4988      	ldr	r1, [pc, #544]	@ (80012fc <main+0x330>)
 80010da:	4882      	ldr	r0, [pc, #520]	@ (80012e4 <main+0x318>)
 80010dc:	f7ff f996 	bl	800040c <CLCD_I2C_Display>
        enter_password(entered_password);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 f879 	bl	80031dc <enter_password>
        if (check_password(entered_password)) {
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 f8e0 	bl	80032b4 <check_password>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d009      	beq.n	800110e <main+0x142>
            CLCD_I2C_Display(&LCD1, "    WELCOME", "");
 80010fa:	4a7f      	ldr	r2, [pc, #508]	@ (80012f8 <main+0x32c>)
 80010fc:	4980      	ldr	r1, [pc, #512]	@ (8001300 <main+0x334>)
 80010fe:	4879      	ldr	r0, [pc, #484]	@ (80012e4 <main+0x318>)
 8001100:	f7ff f984 	bl	800040c <CLCD_I2C_Display>
            opendoor();
 8001104:	f002 f93e 	bl	8003384 <opendoor>
            incorrect_attempts = 0; // Reset incorrect attempts on successful login
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800110c:	e036      	b.n	800117c <main+0x1b0>
        } else {
            incorrect_attempts++;
 800110e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001110:	3301      	adds	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	@ 0x2c
            CLCD_I2C_Display(&LCD1, "WRONG PASSWORD", "");
 8001114:	4a78      	ldr	r2, [pc, #480]	@ (80012f8 <main+0x32c>)
 8001116:	497b      	ldr	r1, [pc, #492]	@ (8001304 <main+0x338>)
 8001118:	4872      	ldr	r0, [pc, #456]	@ (80012e4 <main+0x318>)
 800111a:	f7ff f977 	bl	800040c <CLCD_I2C_Display>
            buzzer(5);
 800111e:	2005      	movs	r0, #5
 8001120:	f002 f980 	bl	8003424 <buzzer>
            int delay_time = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (incorrect_attempts == 1) {
 8001128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800112a:	2b01      	cmp	r3, #1
 800112c:	d102      	bne.n	8001134 <main+0x168>
                delay_time = 5;
 800112e:	2305      	movs	r3, #5
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001132:	e00a      	b.n	800114a <main+0x17e>
            } else if (incorrect_attempts == 2) {
 8001134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001136:	2b02      	cmp	r3, #2
 8001138:	d102      	bne.n	8001140 <main+0x174>
                delay_time = 10;
 800113a:	230a      	movs	r3, #10
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800113e:	e004      	b.n	800114a <main+0x17e>
            } else if (incorrect_attempts >= 3) {
 8001140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001142:	2b02      	cmp	r3, #2
 8001144:	dd01      	ble.n	800114a <main+0x17e>
                delay_time = 20;
 8001146:	2314      	movs	r3, #20
 8001148:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            for (int i = delay_time; i > 0; i--) {
 800114a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
 800114e:	e012      	b.n	8001176 <main+0x1aa>
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "     WAIT %ds", i);
 8001150:	4638      	mov	r0, r7
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	4a6c      	ldr	r2, [pc, #432]	@ (8001308 <main+0x33c>)
 8001156:	2110      	movs	r1, #16
 8001158:	f00b fd16 	bl	800cb88 <sniprintf>
                CLCD_I2C_Display(&LCD1, buffer, "  TO TRY AGAIN");
 800115c:	463b      	mov	r3, r7
 800115e:	4a6b      	ldr	r2, [pc, #428]	@ (800130c <main+0x340>)
 8001160:	4619      	mov	r1, r3
 8001162:	4860      	ldr	r0, [pc, #384]	@ (80012e4 <main+0x318>)
 8001164:	f7ff f952 	bl	800040c <CLCD_I2C_Display>
                HAL_Delay(1000);
 8001168:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800116c:	f002 fe68 	bl	8003e40 <HAL_Delay>
            for (int i = delay_time; i > 0; i--) {
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	3b01      	subs	r3, #1
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	2b00      	cmp	r3, #0
 800117a:	dce9      	bgt.n	8001150 <main+0x184>
            }
        }
        HAL_Delay(2000);
 800117c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001180:	f002 fe5e 	bl	8003e40 <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 8001184:	4857      	ldr	r0, [pc, #348]	@ (80012e4 <main+0x318>)
 8001186:	f7ff f931 	bl	80003ec <CLCD_I2C_Clear>
 800118a:	e0a3      	b.n	80012d4 <main+0x308>
    }
    else if (selected_key != 0)
 800118c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001190:	2b00      	cmp	r3, #0
 8001192:	d067      	beq.n	8001264 <main+0x298>
    {
    	buzzer(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f002 f945 	bl	8003424 <buzzer>
        uint8_t key = 0; // Key quản lý quy�?n truy cập.
 800119a:	2300      	movs	r3, #0
 800119c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        exitmenu = 15;
 80011a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001310 <main+0x344>)
 80011a2:	220f      	movs	r2, #15
 80011a4:	701a      	strb	r2, [r3, #0]

        switch (selected_key)
 80011a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80011aa:	3b41      	subs	r3, #65	@ 0x41
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	f200 8090 	bhi.w	80012d2 <main+0x306>
        {
        case 'A': // RFID
        case 'B': // FACEID
        case 'C': // FINGER
        case 'D': // PASSWORD
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2100      	movs	r1, #0
 80011b6:	484b      	ldr	r0, [pc, #300]	@ (80012e4 <main+0x318>)
 80011b8:	f7ff f8ae 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 80011bc:	4955      	ldr	r1, [pc, #340]	@ (8001314 <main+0x348>)
 80011be:	4849      	ldr	r0, [pc, #292]	@ (80012e4 <main+0x318>)
 80011c0:	f7ff f8fd 	bl	80003be <CLCD_I2C_WriteString>

            while (exitmenu)
 80011c4:	e011      	b.n	80011ea <main+0x21e>
            {
                if (TM_MFRC522_Check(CardID) == MI_OK)
 80011c6:	4854      	ldr	r0, [pc, #336]	@ (8001318 <main+0x34c>)
 80011c8:	f002 f9a2 	bl	8003510 <TM_MFRC522_Check>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10b      	bne.n	80011ea <main+0x21e>
                {
                    key = CheckListUID(CardID);
 80011d2:	4851      	ldr	r0, [pc, #324]	@ (8001318 <main+0x34c>)
 80011d4:	f000 fe4e 	bl	8001e74 <CheckListUID>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    key = key >> 7;
 80011de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011e2:	09db      	lsrs	r3, r3, #7
 80011e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    break;
 80011e8:	e003      	b.n	80011f2 <main+0x226>
            while (exitmenu)
 80011ea:	4b49      	ldr	r3, [pc, #292]	@ (8001310 <main+0x344>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1e9      	bne.n	80011c6 <main+0x1fa>
                }
            }

            switch (key)
 80011f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d11b      	bne.n	8001232 <main+0x266>
            {
            case 1:
                if (selected_key == 'A')
 80011fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80011fe:	2b41      	cmp	r3, #65	@ 0x41
 8001200:	d102      	bne.n	8001208 <main+0x23c>
                    RFID();
 8001202:	f000 fa9b 	bl	800173c <RFID>
                    FACEID();
                else if (selected_key == 'C')
                    FINGER();
                else if (selected_key == 'D')
                    PASSWORD();
                break;
 8001206:	e02b      	b.n	8001260 <main+0x294>
                else if (selected_key == 'B')
 8001208:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800120c:	2b42      	cmp	r3, #66	@ 0x42
 800120e:	d102      	bne.n	8001216 <main+0x24a>
                    FACEID();
 8001210:	f000 ffd4 	bl	80021bc <FACEID>
                break;
 8001214:	e024      	b.n	8001260 <main+0x294>
                else if (selected_key == 'C')
 8001216:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800121a:	2b43      	cmp	r3, #67	@ 0x43
 800121c:	d102      	bne.n	8001224 <main+0x258>
                    FINGER();
 800121e:	f001 f93f 	bl	80024a0 <FINGER>
                break;
 8001222:	e01d      	b.n	8001260 <main+0x294>
                else if (selected_key == 'D')
 8001224:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001228:	2b44      	cmp	r3, #68	@ 0x44
 800122a:	d119      	bne.n	8001260 <main+0x294>
                    PASSWORD();
 800122c:	f001 f9cc 	bl	80025c8 <PASSWORD>
                break;
 8001230:	e016      	b.n	8001260 <main+0x294>
            default:
                CLCD_I2C_Clear(&LCD1);
 8001232:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <main+0x318>)
 8001234:	f7ff f8da 	bl	80003ec <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <main+0x318>)
 800123e:	f7ff f86b 	bl	8000318 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 8001242:	4936      	ldr	r1, [pc, #216]	@ (800131c <main+0x350>)
 8001244:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <main+0x318>)
 8001246:	f7ff f8ba 	bl	80003be <CLCD_I2C_WriteString>
                buzzer(5);
 800124a:	2005      	movs	r0, #5
 800124c:	f002 f8ea 	bl	8003424 <buzzer>
                HAL_Delay(2000);
 8001250:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001254:	f002 fdf4 	bl	8003e40 <HAL_Delay>
                CLCD_I2C_Clear(&LCD1);
 8001258:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <main+0x318>)
 800125a:	f7ff f8c7 	bl	80003ec <CLCD_I2C_Clear>
                break;
 800125e:	e000      	b.n	8001262 <main+0x296>
                break;
 8001260:	bf00      	nop
            }
            break;
 8001262:	e037      	b.n	80012d4 <main+0x308>

        default:
            break;
        }
    }
    else if (TM_MFRC522_Check(CardID) == MI_OK)
 8001264:	482c      	ldr	r0, [pc, #176]	@ (8001318 <main+0x34c>)
 8001266:	f002 f953 	bl	8003510 <TM_MFRC522_Check>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d128      	bne.n	80012c2 <main+0x2f6>
    {
        if (CheckListUID(CardID) != 0)
 8001270:	4829      	ldr	r0, [pc, #164]	@ (8001318 <main+0x34c>)
 8001272:	f000 fdff 	bl	8001e74 <CheckListUID>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00e      	beq.n	800129a <main+0x2ce>
        {
            CLCD_I2C_Clear(&LCD1);
 800127c:	4819      	ldr	r0, [pc, #100]	@ (80012e4 <main+0x318>)
 800127e:	f7ff f8b5 	bl	80003ec <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <main+0x318>)
 8001288:	f7ff f846 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 800128c:	491c      	ldr	r1, [pc, #112]	@ (8001300 <main+0x334>)
 800128e:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <main+0x318>)
 8001290:	f7ff f895 	bl	80003be <CLCD_I2C_WriteString>
            opendoor();
 8001294:	f002 f876 	bl	8003384 <opendoor>
 8001298:	e01c      	b.n	80012d4 <main+0x308>
        }
        else
        {
            CLCD_I2C_Clear(&LCD1);
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <main+0x318>)
 800129c:	f7ff f8a6 	bl	80003ec <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	480f      	ldr	r0, [pc, #60]	@ (80012e4 <main+0x318>)
 80012a6:	f7ff f837 	bl	8000318 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 80012aa:	491d      	ldr	r1, [pc, #116]	@ (8001320 <main+0x354>)
 80012ac:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <main+0x318>)
 80012ae:	f7ff f886 	bl	80003be <CLCD_I2C_WriteString>
            buzzer(5);
 80012b2:	2005      	movs	r0, #5
 80012b4:	f002 f8b6 	bl	8003424 <buzzer>
            HAL_Delay(2000);
 80012b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012bc:	f002 fdc0 	bl	8003e40 <HAL_Delay>
 80012c0:	e008      	b.n	80012d4 <main+0x308>
        }
    }
    else if(Rx_Buffer[0]!= 0)
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <main+0x358>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <main+0x308>
    {
        startface();
 80012cc:	f001 ff4e 	bl	800316c <startface>
 80012d0:	e000      	b.n	80012d4 <main+0x308>
            break;
 80012d2:	bf00      	nop
    }

    // Kiểm tra trạng thái vân tay định kỳ
    check_fingerprint_status();
 80012d4:	f7ff fd66 	bl	8000da4 <check_fingerprint_status>

    // Xử lý vân tay nếu phát hiện
    process_fingerprint();
 80012d8:	f7ff fd78 	bl	8000dcc <process_fingerprint>
  {
 80012dc:	e6d9      	b.n	8001092 <main+0xc6>
 80012de:	bf00      	nop
 80012e0:	2000021c 	.word	0x2000021c
 80012e4:	200003dc 	.word	0x200003dc
 80012e8:	40010800 	.word	0x40010800
 80012ec:	0800f400 	.word	0x0800f400
 80012f0:	200002c8 	.word	0x200002c8
 80012f4:	0800d5dc 	.word	0x0800d5dc
 80012f8:	0800d5ec 	.word	0x0800d5ec
 80012fc:	0800d5f0 	.word	0x0800d5f0
 8001300:	0800d600 	.word	0x0800d600
 8001304:	0800d60c 	.word	0x0800d60c
 8001308:	0800d61c 	.word	0x0800d61c
 800130c:	0800d62c 	.word	0x0800d62c
 8001310:	20000020 	.word	0x20000020
 8001314:	0800d63c 	.word	0x0800d63c
 8001318:	200003e8 	.word	0x200003e8
 800131c:	0800d64c 	.word	0x0800d64c
 8001320:	0800d65c 	.word	0x0800d65c
 8001324:	20000350 	.word	0x20000350

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b094      	sub	sp, #80	@ 0x50
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001332:	2228      	movs	r2, #40	@ 0x28
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f00b fc7a 	bl	800cc30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2301      	movs	r3, #1
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001366:	2301      	movs	r3, #1
 8001368:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136a:	2302      	movs	r3, #2
 800136c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800136e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001372:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001374:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800137e:	4618      	mov	r0, r3
 8001380:	f005 fa3e 	bl	8006800 <HAL_RCC_OscConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800138a:	f002 f86f 	bl	800346c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
 8001390:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800139a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800139e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2101      	movs	r1, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 fcaa 	bl	8006d04 <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013b6:	f002 f859 	bl	800346c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013ba:	2310      	movs	r3, #16
 80013bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013c2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4618      	mov	r0, r3
 80013c8:	f005 fe34 	bl	8007034 <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013d2:	f002 f84b 	bl	800346c <Error_Handler>
  }
}
 80013d6:	bf00      	nop
 80013d8:	3750      	adds	r7, #80	@ 0x50
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	@ (8001434 <MX_I2C2_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <MX_I2C2_Init+0x58>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_I2C2_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_I2C2_Init+0x50>)
 800141e:	f003 fa17 	bl	8004850 <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001428:	f002 f820 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000021c 	.word	0x2000021c
 8001434:	40005800 	.word	0x40005800
 8001438:	000186a0 	.word	0x000186a0

0800143c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001440:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001442:	4a18      	ldr	r2, [pc, #96]	@ (80014a4 <MX_SPI1_Init+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800144c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001470:	2230      	movs	r2, #48	@ 0x30
 8001472:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001488:	220a      	movs	r2, #10
 800148a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800148e:	f005 fe87 	bl	80071a0 <HAL_SPI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001498:	f001 ffe8 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000270 	.word	0x20000270
 80014a4:	40013000 	.word	0x40013000

080014a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014ce:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80014d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014dc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80014e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014ea:	2280      	movs	r2, #128	@ 0x80
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ee:	4814      	ldr	r0, [pc, #80]	@ (8001540 <MX_TIM2_Init+0x98>)
 80014f0:	f006 f922 	bl	8007738 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014fa:	f001 ffb7 	bl	800346c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001502:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	@ (8001540 <MX_TIM2_Init+0x98>)
 800150c:	f006 fabe 	bl	8007a8c <HAL_TIM_ConfigClockSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001516:	f001 ffa9 	bl	800346c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	@ (8001540 <MX_TIM2_Init+0x98>)
 8001528:	f006 fc90 	bl	8007e4c <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001532:	f001 ff9b 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200002c8 	.word	0x200002c8

08001544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <MX_USART1_UART_Init+0x50>)
 800154c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001550:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_USART1_UART_Init+0x4c>)
 800157c:	f006 fcd6 	bl	8007f2c <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001586:	f001 ff71 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000310 	.word	0x20000310
 8001594:	40013800 	.word	0x40013800

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c4:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a57      	ldr	r2, [pc, #348]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015ca:	f043 0320 	orr.w	r3, r3, #32
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b55      	ldr	r3, [pc, #340]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b52      	ldr	r3, [pc, #328]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a51      	ldr	r2, [pc, #324]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001728 <MX_GPIO_Init+0x190>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <MX_GPIO_Init+0x190>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001612:	4846      	ldr	r0, [pc, #280]	@ (800172c <MX_GPIO_Init+0x194>)
 8001614:	f003 f8e1 	bl	80047da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8001618:	2200      	movs	r2, #0
 800161a:	f24f 0108 	movw	r1, #61448	@ 0xf008
 800161e:	4844      	ldr	r0, [pc, #272]	@ (8001730 <MX_GPIO_Init+0x198>)
 8001620:	f003 f8db 	bl	80047da <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800162a:	4840      	ldr	r0, [pc, #256]	@ (800172c <MX_GPIO_Init+0x194>)
 800162c:	f003 f8d5 	bl	80047da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8001630:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	483b      	ldr	r0, [pc, #236]	@ (8001734 <MX_GPIO_Init+0x19c>)
 8001646:	f002 ff2d 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 800164a:	2303      	movs	r3, #3
 800164c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001652:	2301      	movs	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4619      	mov	r1, r3
 800165c:	4833      	ldr	r0, [pc, #204]	@ (800172c <MX_GPIO_Init+0x194>)
 800165e:	f002 ff21 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001662:	2310      	movs	r3, #16
 8001664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2302      	movs	r3, #2
 8001670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	4619      	mov	r1, r3
 8001678:	482c      	ldr	r0, [pc, #176]	@ (800172c <MX_GPIO_Init+0x194>)
 800167a:	f002 ff13 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 800167e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001688:	2301      	movs	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	4826      	ldr	r0, [pc, #152]	@ (8001730 <MX_GPIO_Init+0x198>)
 8001698:	f002 ff04 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800169c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016a2:	2311      	movs	r3, #17
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	481d      	ldr	r0, [pc, #116]	@ (800172c <MX_GPIO_Init+0x194>)
 80016b6:	f002 fef5 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOCK_Pin */
  GPIO_InitStruct.Pin = LOCK_Pin;
 80016ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOCK_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	4816      	ldr	r0, [pc, #88]	@ (800172c <MX_GPIO_Init+0x194>)
 80016d4:	f002 fee6 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 80016d8:	2308      	movs	r3, #8
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	4810      	ldr	r0, [pc, #64]	@ (8001730 <MX_GPIO_Init+0x198>)
 80016f0:	f002 fed8 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <MX_GPIO_Init+0x1a0>)
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	4809      	ldr	r0, [pc, #36]	@ (8001730 <MX_GPIO_Init+0x198>)
 800170a:	f002 fecb 	bl	80044a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2101      	movs	r1, #1
 8001712:	2017      	movs	r0, #23
 8001714:	f002 fc8f 	bl	8004036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001718:	2017      	movs	r0, #23
 800171a:	f002 fca8 	bl	800406e <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	40010800 	.word	0x40010800
 8001730:	40010c00 	.word	0x40010c00
 8001734:	40011000 	.word	0x40011000
 8001738:	10110000 	.word	0x10110000

0800173c <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
	buzzer(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f001 fe6e 	bl	8003424 <buzzer>
	exitmenu = Delaymenu;
 8001748:	4ba3      	ldr	r3, [pc, #652]	@ (80019d8 <RFID+0x29c>)
 800174a:	2214      	movs	r2, #20
 800174c:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 800174e:	23ff      	movs	r3, #255	@ 0xff
 8001750:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press DOWN");
 8001752:	4aa2      	ldr	r2, [pc, #648]	@ (80019dc <RFID+0x2a0>)
 8001754:	49a2      	ldr	r1, [pc, #648]	@ (80019e0 <RFID+0x2a4>)
 8001756:	48a3      	ldr	r0, [pc, #652]	@ (80019e4 <RFID+0x2a8>)
 8001758:	f7fe fe58 	bl	800040c <CLCD_I2C_Display>
	while (exitmenu )
 800175c:	e35e      	b.n	8001e1c <RFID+0x6e0>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 800175e:	200a      	movs	r0, #10
 8001760:	f7fe ffae 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001764:	4603      	mov	r3, r0
 8001766:	737b      	strb	r3, [r7, #13]
		if (key_pressed =='*')
 8001768:	7b7b      	ldrb	r3, [r7, #13]
 800176a:	2b2a      	cmp	r3, #42	@ 0x2a
 800176c:	d131      	bne.n	80017d2 <RFID+0x96>
		{
			buzzer(1);
 800176e:	2001      	movs	r0, #1
 8001770:	f001 fe58 	bl	8003424 <buzzer>
			exitmenu = Delaymenu;
 8001774:	4b98      	ldr	r3, [pc, #608]	@ (80019d8 <RFID+0x29c>)
 8001776:	2214      	movs	r2, #20
 8001778:	701a      	strb	r2, [r3, #0]
			status++;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	3301      	adds	r3, #1
 800177e:	75fb      	strb	r3, [r7, #23]
			status = (status > 2) ? (-1) : status;
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d801      	bhi.n	800178a <RFID+0x4e>
 8001786:	7dfb      	ldrb	r3, [r7, #23]
 8001788:	e000      	b.n	800178c <RFID+0x50>
 800178a:	23ff      	movs	r3, #255	@ 0xff
 800178c:	75fb      	strb	r3, [r7, #23]
			switch (status)
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d012      	beq.n	80017ba <RFID+0x7e>
 8001794:	2b02      	cmp	r3, #2
 8001796:	dc16      	bgt.n	80017c6 <RFID+0x8a>
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <RFID+0x66>
 800179c:	2b01      	cmp	r3, #1
 800179e:	d006      	beq.n	80017ae <RFID+0x72>
 80017a0:	e011      	b.n	80017c6 <RFID+0x8a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 80017a2:	4a91      	ldr	r2, [pc, #580]	@ (80019e8 <RFID+0x2ac>)
 80017a4:	498e      	ldr	r1, [pc, #568]	@ (80019e0 <RFID+0x2a4>)
 80017a6:	488f      	ldr	r0, [pc, #572]	@ (80019e4 <RFID+0x2a8>)
 80017a8:	f7fe fe30 	bl	800040c <CLCD_I2C_Display>
				break;
 80017ac:	e011      	b.n	80017d2 <RFID+0x96>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 80017ae:	4a8f      	ldr	r2, [pc, #572]	@ (80019ec <RFID+0x2b0>)
 80017b0:	498b      	ldr	r1, [pc, #556]	@ (80019e0 <RFID+0x2a4>)
 80017b2:	488c      	ldr	r0, [pc, #560]	@ (80019e4 <RFID+0x2a8>)
 80017b4:	f7fe fe2a 	bl	800040c <CLCD_I2C_Display>
				break;
 80017b8:	e00b      	b.n	80017d2 <RFID+0x96>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 80017ba:	4a8d      	ldr	r2, [pc, #564]	@ (80019f0 <RFID+0x2b4>)
 80017bc:	4988      	ldr	r1, [pc, #544]	@ (80019e0 <RFID+0x2a4>)
 80017be:	4889      	ldr	r0, [pc, #548]	@ (80019e4 <RFID+0x2a8>)
 80017c0:	f7fe fe24 	bl	800040c <CLCD_I2C_Display>
				break;
 80017c4:	e005      	b.n	80017d2 <RFID+0x96>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 80017c6:	4a8b      	ldr	r2, [pc, #556]	@ (80019f4 <RFID+0x2b8>)
 80017c8:	4985      	ldr	r1, [pc, #532]	@ (80019e0 <RFID+0x2a4>)
 80017ca:	4886      	ldr	r0, [pc, #536]	@ (80019e4 <RFID+0x2a8>)
 80017cc:	f7fe fe1e 	bl	800040c <CLCD_I2C_Display>
				break;
 80017d0:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 80017d2:	7b7b      	ldrb	r3, [r7, #13]
 80017d4:	2b23      	cmp	r3, #35	@ 0x23
 80017d6:	f040 8321 	bne.w	8001e1c <RFID+0x6e0>
		{
			buzzer(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f001 fe22 	bl	8003424 <buzzer>
			exitmenu = Delaymenu;
 80017e0:	4b7d      	ldr	r3, [pc, #500]	@ (80019d8 <RFID+0x29c>)
 80017e2:	2214      	movs	r2, #20
 80017e4:	701a      	strb	r2, [r3, #0]
			switch (status)
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	f000 830b 	beq.w	8001e04 <RFID+0x6c8>
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	f300 8310 	bgt.w	8001e14 <RFID+0x6d8>
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <RFID+0xc4>
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	f000 80ac 	beq.w	8001956 <RFID+0x21a>
 80017fe:	e309      	b.n	8001e14 <RFID+0x6d8>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001800:	4a7d      	ldr	r2, [pc, #500]	@ (80019f8 <RFID+0x2bc>)
 8001802:	497e      	ldr	r1, [pc, #504]	@ (80019fc <RFID+0x2c0>)
 8001804:	4877      	ldr	r0, [pc, #476]	@ (80019e4 <RFID+0x2a8>)
 8001806:	f7fe fe01 	bl	800040c <CLCD_I2C_Display>
				uint8_t statusadd = -1;
 800180a:	23ff      	movs	r3, #255	@ 0xff
 800180c:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8001812:	e096      	b.n	8001942 <RFID+0x206>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001814:	200a      	movs	r0, #10
 8001816:	f7fe ff53 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 800181a:	4603      	mov	r3, r0
 800181c:	737b      	strb	r3, [r7, #13]
					if (exitmenu == 0)
 800181e:	4b6e      	ldr	r3, [pc, #440]	@ (80019d8 <RFID+0x29c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d107      	bne.n	8001836 <RFID+0xfa>
					{
						CLCD_I2C_Clear(&LCD1);
 8001826:	486f      	ldr	r0, [pc, #444]	@ (80019e4 <RFID+0x2a8>)
 8001828:	f7fe fde0 	bl	80003ec <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800182c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001830:	f002 fb06 	bl	8003e40 <HAL_Delay>
						return;
 8001834:	e2fa      	b.n	8001e2c <RFID+0x6f0>
					}
					if (key_pressed =='*')
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	2b2a      	cmp	r3, #42	@ 0x2a
 800183a:	d127      	bne.n	800188c <RFID+0x150>
					{
						buzzer(1);
 800183c:	2001      	movs	r0, #1
 800183e:	f001 fdf1 	bl	8003424 <buzzer>
						exitmenu = Delaymenu;
 8001842:	4b65      	ldr	r3, [pc, #404]	@ (80019d8 <RFID+0x29c>)
 8001844:	2214      	movs	r2, #20
 8001846:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8001848:	7dbb      	ldrb	r3, [r7, #22]
 800184a:	3301      	adds	r3, #1
 800184c:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 1) ? (-1) : statusadd;
 800184e:	7dbb      	ldrb	r3, [r7, #22]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d801      	bhi.n	8001858 <RFID+0x11c>
 8001854:	7dbb      	ldrb	r3, [r7, #22]
 8001856:	e000      	b.n	800185a <RFID+0x11e>
 8001858:	23ff      	movs	r3, #255	@ 0xff
 800185a:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 800185c:	7dbb      	ldrb	r3, [r7, #22]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <RFID+0x12c>
 8001862:	2b01      	cmp	r3, #1
 8001864:	d006      	beq.n	8001874 <RFID+0x138>
 8001866:	e00b      	b.n	8001880 <RFID+0x144>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 8001868:	4a65      	ldr	r2, [pc, #404]	@ (8001a00 <RFID+0x2c4>)
 800186a:	4966      	ldr	r1, [pc, #408]	@ (8001a04 <RFID+0x2c8>)
 800186c:	485d      	ldr	r0, [pc, #372]	@ (80019e4 <RFID+0x2a8>)
 800186e:	f7fe fdcd 	bl	800040c <CLCD_I2C_Display>
							break;
 8001872:	e00b      	b.n	800188c <RFID+0x150>
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 8001874:	4a64      	ldr	r2, [pc, #400]	@ (8001a08 <RFID+0x2cc>)
 8001876:	4963      	ldr	r1, [pc, #396]	@ (8001a04 <RFID+0x2c8>)
 8001878:	485a      	ldr	r0, [pc, #360]	@ (80019e4 <RFID+0x2a8>)
 800187a:	f7fe fdc7 	bl	800040c <CLCD_I2C_Display>
							break;
 800187e:	e005      	b.n	800188c <RFID+0x150>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 8001880:	4a5c      	ldr	r2, [pc, #368]	@ (80019f4 <RFID+0x2b8>)
 8001882:	4960      	ldr	r1, [pc, #384]	@ (8001a04 <RFID+0x2c8>)
 8001884:	4857      	ldr	r0, [pc, #348]	@ (80019e4 <RFID+0x2a8>)
 8001886:	f7fe fdc1 	bl	800040c <CLCD_I2C_Display>
							break;
 800188a:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 800188c:	7b7b      	ldrb	r3, [r7, #13]
 800188e:	2b23      	cmp	r3, #35	@ 0x23
 8001890:	d157      	bne.n	8001942 <RFID+0x206>
					{
						buzzer(1);
 8001892:	2001      	movs	r0, #1
 8001894:	f001 fdc6 	bl	8003424 <buzzer>
						exitmenu = Delaymenu;
 8001898:	4b4f      	ldr	r3, [pc, #316]	@ (80019d8 <RFID+0x29c>)
 800189a:	2214      	movs	r2, #20
 800189c:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 800189e:	7dbb      	ldrb	r3, [r7, #22]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <RFID+0x16e>
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d025      	beq.n	80018f4 <RFID+0x1b8>
 80018a8:	e048      	b.n	800193c <RFID+0x200>
						{
						case 0:
							uint8_t AdminID = InputID_ADMIN();
 80018aa:	f7ff fb5f 	bl	8000f6c <InputID_ADMIN>
 80018ae:	4603      	mov	r3, r0
 80018b0:	71bb      	strb	r3, [r7, #6]
							uint8_t keyadd_admin = (1 << 7) + AdminID;
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	3b80      	subs	r3, #128	@ 0x80
 80018b6:	717b      	strb	r3, [r7, #5]
							if (CheckKey(keyadd_admin)!=0)
 80018b8:	797b      	ldrb	r3, [r7, #5]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fc50 	bl	8002160 <CheckKey>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00c      	beq.n	80018e0 <RFID+0x1a4>
							{
								CLCD_I2C_Display(&LCD1," ID is existing"," Pick another ID");
 80018c6:	4a51      	ldr	r2, [pc, #324]	@ (8001a0c <RFID+0x2d0>)
 80018c8:	4951      	ldr	r1, [pc, #324]	@ (8001a10 <RFID+0x2d4>)
 80018ca:	4846      	ldr	r0, [pc, #280]	@ (80019e4 <RFID+0x2a8>)
 80018cc:	f7fe fd9e 	bl	800040c <CLCD_I2C_Display>
								buzzer(3);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f001 fda7 	bl	8003424 <buzzer>
								HAL_Delay(1000);
 80018d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018da:	f002 fab1 	bl	8003e40 <HAL_Delay>
 80018de:	e003      	b.n	80018e8 <RFID+0x1ac>
							}
							else 
							{
								adduid(keyadd_admin);
 80018e0:	797b      	ldrb	r3, [r7, #5]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fb28 	bl	8001f38 <adduid>
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80018e8:	4a45      	ldr	r2, [pc, #276]	@ (8001a00 <RFID+0x2c4>)
 80018ea:	4946      	ldr	r1, [pc, #280]	@ (8001a04 <RFID+0x2c8>)
 80018ec:	483d      	ldr	r0, [pc, #244]	@ (80019e4 <RFID+0x2a8>)
 80018ee:	f7fe fd8d 	bl	800040c <CLCD_I2C_Display>
							break;
 80018f2:	e026      	b.n	8001942 <RFID+0x206>
						case 1:
							uint8_t UserID = InputID_USER();
 80018f4:	f7ff fb46 	bl	8000f84 <InputID_USER>
 80018f8:	4603      	mov	r3, r0
 80018fa:	723b      	strb	r3, [r7, #8]
							uint8_t keyadd_user = (0 << 7) + UserID;
 80018fc:	7a3b      	ldrb	r3, [r7, #8]
 80018fe:	71fb      	strb	r3, [r7, #7]
							if (CheckKey(keyadd_user)!=0)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fc2c 	bl	8002160 <CheckKey>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <RFID+0x1ec>
							{
								CLCD_I2C_Display(&LCD1," ID is existing"," Pick another ID");
 800190e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a0c <RFID+0x2d0>)
 8001910:	493f      	ldr	r1, [pc, #252]	@ (8001a10 <RFID+0x2d4>)
 8001912:	4834      	ldr	r0, [pc, #208]	@ (80019e4 <RFID+0x2a8>)
 8001914:	f7fe fd7a 	bl	800040c <CLCD_I2C_Display>
								buzzer(3);
 8001918:	2003      	movs	r0, #3
 800191a:	f001 fd83 	bl	8003424 <buzzer>
								HAL_Delay(1000);
 800191e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001922:	f002 fa8d 	bl	8003e40 <HAL_Delay>
 8001926:	e003      	b.n	8001930 <RFID+0x1f4>
							}
							else 
							{
								adduid(keyadd_user);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fb04 	bl	8001f38 <adduid>
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 8001930:	4a35      	ldr	r2, [pc, #212]	@ (8001a08 <RFID+0x2cc>)
 8001932:	4934      	ldr	r1, [pc, #208]	@ (8001a04 <RFID+0x2c8>)
 8001934:	482b      	ldr	r0, [pc, #172]	@ (80019e4 <RFID+0x2a8>)
 8001936:	f7fe fd69 	bl	800040c <CLCD_I2C_Display>
							break;
 800193a:	e002      	b.n	8001942 <RFID+0x206>
						default:
							back = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	757b      	strb	r3, [r7, #21]
							break;
 8001940:	bf00      	nop
				while (back == 1)
 8001942:	7d7b      	ldrb	r3, [r7, #21]
 8001944:	2b01      	cmp	r3, #1
 8001946:	f43f af65 	beq.w	8001814 <RFID+0xd8>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 800194a:	4a27      	ldr	r2, [pc, #156]	@ (80019e8 <RFID+0x2ac>)
 800194c:	4924      	ldr	r1, [pc, #144]	@ (80019e0 <RFID+0x2a4>)
 800194e:	4825      	ldr	r0, [pc, #148]	@ (80019e4 <RFID+0x2a8>)
 8001950:	f7fe fd5c 	bl	800040c <CLCD_I2C_Display>
				break;
 8001954:	e262      	b.n	8001e1c <RFID+0x6e0>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001956:	4a28      	ldr	r2, [pc, #160]	@ (80019f8 <RFID+0x2bc>)
 8001958:	4928      	ldr	r1, [pc, #160]	@ (80019fc <RFID+0x2c0>)
 800195a:	4822      	ldr	r0, [pc, #136]	@ (80019e4 <RFID+0x2a8>)
 800195c:	f7fe fd56 	bl	800040c <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 8001960:	23ff      	movs	r3, #255	@ 0xff
 8001962:	753b      	strb	r3, [r7, #20]
				uint8_t backrm = 1;
 8001964:	2301      	movs	r3, #1
 8001966:	74fb      	strb	r3, [r7, #19]
				while (backrm == 1)
 8001968:	e242      	b.n	8001df0 <RFID+0x6b4>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 800196a:	200a      	movs	r0, #10
 800196c:	f7fe fea8 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001970:	4603      	mov	r3, r0
 8001972:	737b      	strb	r3, [r7, #13]
					if (exitmenu == 0)
 8001974:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <RFID+0x29c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d107      	bne.n	800198c <RFID+0x250>
					{
						CLCD_I2C_Clear(&LCD1);
 800197c:	4819      	ldr	r0, [pc, #100]	@ (80019e4 <RFID+0x2a8>)
 800197e:	f7fe fd35 	bl	80003ec <CLCD_I2C_Clear>
						HAL_Delay(1000);
 8001982:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001986:	f002 fa5b 	bl	8003e40 <HAL_Delay>
						return;
 800198a:	e24f      	b.n	8001e2c <RFID+0x6f0>
					}
					if (key_pressed =='*')
 800198c:	7b7b      	ldrb	r3, [r7, #13]
 800198e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001990:	d14c      	bne.n	8001a2c <RFID+0x2f0>
					{
						buzzer(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f001 fd46 	bl	8003424 <buzzer>
						exitmenu = Delaymenu;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <RFID+0x29c>)
 800199a:	2214      	movs	r2, #20
 800199c:	701a      	strb	r2, [r3, #0]
						statusremove++;
 800199e:	7d3b      	ldrb	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	753b      	strb	r3, [r7, #20]
						statusremove = (statusremove > 1) ? (-1) : statusremove;
 80019a4:	7d3b      	ldrb	r3, [r7, #20]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d801      	bhi.n	80019ae <RFID+0x272>
 80019aa:	7d3b      	ldrb	r3, [r7, #20]
 80019ac:	e000      	b.n	80019b0 <RFID+0x274>
 80019ae:	23ff      	movs	r3, #255	@ 0xff
 80019b0:	753b      	strb	r3, [r7, #20]
						switch (statusremove)
 80019b2:	7d3b      	ldrb	r3, [r7, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <RFID+0x282>
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d006      	beq.n	80019ca <RFID+0x28e>
 80019bc:	e030      	b.n	8001a20 <RFID+0x2e4>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 80019be:	4a15      	ldr	r2, [pc, #84]	@ (8001a14 <RFID+0x2d8>)
 80019c0:	4915      	ldr	r1, [pc, #84]	@ (8001a18 <RFID+0x2dc>)
 80019c2:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <RFID+0x2a8>)
 80019c4:	f7fe fd22 	bl	800040c <CLCD_I2C_Display>
							break;
 80019c8:	e030      	b.n	8001a2c <RFID+0x2f0>
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 80019ca:	4a14      	ldr	r2, [pc, #80]	@ (8001a1c <RFID+0x2e0>)
 80019cc:	4912      	ldr	r1, [pc, #72]	@ (8001a18 <RFID+0x2dc>)
 80019ce:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <RFID+0x2a8>)
 80019d0:	f7fe fd1c 	bl	800040c <CLCD_I2C_Display>
							break;
 80019d4:	e02a      	b.n	8001a2c <RFID+0x2f0>
 80019d6:	bf00      	nop
 80019d8:	20000020 	.word	0x20000020
 80019dc:	0800d66c 	.word	0x0800d66c
 80019e0:	0800d67c 	.word	0x0800d67c
 80019e4:	200003dc 	.word	0x200003dc
 80019e8:	0800d68c 	.word	0x0800d68c
 80019ec:	0800d698 	.word	0x0800d698
 80019f0:	0800d6a8 	.word	0x0800d6a8
 80019f4:	0800d6b8 	.word	0x0800d6b8
 80019f8:	0800d6c0 	.word	0x0800d6c0
 80019fc:	0800d6cc 	.word	0x0800d6cc
 8001a00:	0800d6dc 	.word	0x0800d6dc
 8001a04:	0800d6ec 	.word	0x0800d6ec
 8001a08:	0800d6f8 	.word	0x0800d6f8
 8001a0c:	0800d708 	.word	0x0800d708
 8001a10:	0800d71c 	.word	0x0800d71c
 8001a14:	0800d72c 	.word	0x0800d72c
 8001a18:	0800d740 	.word	0x0800d740
 8001a1c:	0800d750 	.word	0x0800d750
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 8001a20:	4aa8      	ldr	r2, [pc, #672]	@ (8001cc4 <RFID+0x588>)
 8001a22:	49a9      	ldr	r1, [pc, #676]	@ (8001cc8 <RFID+0x58c>)
 8001a24:	48a9      	ldr	r0, [pc, #676]	@ (8001ccc <RFID+0x590>)
 8001a26:	f7fe fcf1 	bl	800040c <CLCD_I2C_Display>
							break;
 8001a2a:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001a2c:	7b7b      	ldrb	r3, [r7, #13]
 8001a2e:	2b23      	cmp	r3, #35	@ 0x23
 8001a30:	f040 81de 	bne.w	8001df0 <RFID+0x6b4>
					{
						buzzer(1);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f001 fcf5 	bl	8003424 <buzzer>
						CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001a3a:	4aa5      	ldr	r2, [pc, #660]	@ (8001cd0 <RFID+0x594>)
 8001a3c:	49a5      	ldr	r1, [pc, #660]	@ (8001cd4 <RFID+0x598>)
 8001a3e:	48a3      	ldr	r0, [pc, #652]	@ (8001ccc <RFID+0x590>)
 8001a40:	f7fe fce4 	bl	800040c <CLCD_I2C_Display>
						exitmenu = Delaymenu;
 8001a44:	4ba4      	ldr	r3, [pc, #656]	@ (8001cd8 <RFID+0x59c>)
 8001a46:	2214      	movs	r2, #20
 8001a48:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001a4a:	7d3b      	ldrb	r3, [r7, #20]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <RFID+0x31c>
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	f000 81c2 	beq.w	8001dda <RFID+0x69e>
 8001a56:	e1c8      	b.n	8001dea <RFID+0x6ae>
						{
						case 0:
							uint8_t statusrm1 = -1;
 8001a58:	23ff      	movs	r3, #255	@ 0xff
 8001a5a:	74bb      	strb	r3, [r7, #18]
							uint8_t backrm1 = 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	747b      	strb	r3, [r7, #17]
							while (backrm1 == 1)
 8001a60:	e1b1      	b.n	8001dc6 <RFID+0x68a>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001a62:	200a      	movs	r0, #10
 8001a64:	f7fe fe2c 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	737b      	strb	r3, [r7, #13]
								if (exitmenu == 0)
 8001a6c:	4b9a      	ldr	r3, [pc, #616]	@ (8001cd8 <RFID+0x59c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d107      	bne.n	8001a84 <RFID+0x348>
								{
									CLCD_I2C_Clear(&LCD1);
 8001a74:	4895      	ldr	r0, [pc, #596]	@ (8001ccc <RFID+0x590>)
 8001a76:	f7fe fcb9 	bl	80003ec <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8001a7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a7e:	f002 f9df 	bl	8003e40 <HAL_Delay>
									return;
 8001a82:	e1d3      	b.n	8001e2c <RFID+0x6f0>
								}
								if (key_pressed =='*')
 8001a84:	7b7b      	ldrb	r3, [r7, #13]
 8001a86:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a88:	d124      	bne.n	8001ad4 <RFID+0x398>
								{
									buzzer(1);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f001 fcca 	bl	8003424 <buzzer>
									statusrm1++;
 8001a90:	7cbb      	ldrb	r3, [r7, #18]
 8001a92:	3301      	adds	r3, #1
 8001a94:	74bb      	strb	r3, [r7, #18]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001a96:	7cbb      	ldrb	r3, [r7, #18]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d801      	bhi.n	8001aa0 <RFID+0x364>
 8001a9c:	7cbb      	ldrb	r3, [r7, #18]
 8001a9e:	e000      	b.n	8001aa2 <RFID+0x366>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	74bb      	strb	r3, [r7, #18]
									switch (statusrm1)
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <RFID+0x374>
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d006      	beq.n	8001abc <RFID+0x380>
 8001aae:	e00b      	b.n	8001ac8 <RFID+0x38c>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001ab0:	4a8a      	ldr	r2, [pc, #552]	@ (8001cdc <RFID+0x5a0>)
 8001ab2:	498b      	ldr	r1, [pc, #556]	@ (8001ce0 <RFID+0x5a4>)
 8001ab4:	4885      	ldr	r0, [pc, #532]	@ (8001ccc <RFID+0x590>)
 8001ab6:	f7fe fca9 	bl	800040c <CLCD_I2C_Display>
										break;
 8001aba:	e00b      	b.n	8001ad4 <RFID+0x398>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001abc:	4a89      	ldr	r2, [pc, #548]	@ (8001ce4 <RFID+0x5a8>)
 8001abe:	4988      	ldr	r1, [pc, #544]	@ (8001ce0 <RFID+0x5a4>)
 8001ac0:	4882      	ldr	r0, [pc, #520]	@ (8001ccc <RFID+0x590>)
 8001ac2:	f7fe fca3 	bl	800040c <CLCD_I2C_Display>
										break;
 8001ac6:	e005      	b.n	8001ad4 <RFID+0x398>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 8001ac8:	4a7e      	ldr	r2, [pc, #504]	@ (8001cc4 <RFID+0x588>)
 8001aca:	4985      	ldr	r1, [pc, #532]	@ (8001ce0 <RFID+0x5a4>)
 8001acc:	487f      	ldr	r0, [pc, #508]	@ (8001ccc <RFID+0x590>)
 8001ace:	f7fe fc9d 	bl	800040c <CLCD_I2C_Display>
										break;
 8001ad2:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001ad4:	7b7b      	ldrb	r3, [r7, #13]
 8001ad6:	2b23      	cmp	r3, #35	@ 0x23
 8001ad8:	f040 8175 	bne.w	8001dc6 <RFID+0x68a>
								{
									buzzer(1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f001 fca1 	bl	8003424 <buzzer>
									exitmenu = Delaymenu;
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8001cd8 <RFID+0x59c>)
 8001ae4:	2214      	movs	r2, #20
 8001ae6:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001ae8:	7cbb      	ldrb	r3, [r7, #18]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <RFID+0x3ba>
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	f000 80e0 	beq.w	8001cb4 <RFID+0x578>
 8001af4:	e164      	b.n	8001dc0 <RFID+0x684>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001af6:	4a76      	ldr	r2, [pc, #472]	@ (8001cd0 <RFID+0x594>)
 8001af8:	4976      	ldr	r1, [pc, #472]	@ (8001cd4 <RFID+0x598>)
 8001afa:	4874      	ldr	r0, [pc, #464]	@ (8001ccc <RFID+0x590>)
 8001afc:	f7fe fc86 	bl	800040c <CLCD_I2C_Display>
										uint8_t statusadd = -1;
 8001b00:	23ff      	movs	r3, #255	@ 0xff
 8001b02:	743b      	strb	r3, [r7, #16]
										uint8_t backrm10 = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
										while (backrm10 == 1)
 8001b08:	e0ca      	b.n	8001ca0 <RFID+0x564>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001b0a:	200a      	movs	r0, #10
 8001b0c:	f7fe fdd8 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001b10:	4603      	mov	r3, r0
 8001b12:	737b      	strb	r3, [r7, #13]
											if (exitmenu == 0)
 8001b14:	4b70      	ldr	r3, [pc, #448]	@ (8001cd8 <RFID+0x59c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <RFID+0x3f0>
											{
												CLCD_I2C_Clear(&LCD1);
 8001b1c:	486b      	ldr	r0, [pc, #428]	@ (8001ccc <RFID+0x590>)
 8001b1e:	f7fe fc65 	bl	80003ec <CLCD_I2C_Clear>
												HAL_Delay(1000);
 8001b22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b26:	f002 f98b 	bl	8003e40 <HAL_Delay>
												return;
 8001b2a:	e17f      	b.n	8001e2c <RFID+0x6f0>
											}
											if (key_pressed =='*')
 8001b2c:	7b7b      	ldrb	r3, [r7, #13]
 8001b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b30:	d127      	bne.n	8001b82 <RFID+0x446>
											{
												buzzer(1);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f001 fc76 	bl	8003424 <buzzer>
												exitmenu = Delaymenu;
 8001b38:	4b67      	ldr	r3, [pc, #412]	@ (8001cd8 <RFID+0x59c>)
 8001b3a:	2214      	movs	r2, #20
 8001b3c:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001b3e:	7c3b      	ldrb	r3, [r7, #16]
 8001b40:	3301      	adds	r3, #1
 8001b42:	743b      	strb	r3, [r7, #16]
												statusadd = (statusadd > 1) ? (-1) : statusadd;
 8001b44:	7c3b      	ldrb	r3, [r7, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d801      	bhi.n	8001b4e <RFID+0x412>
 8001b4a:	7c3b      	ldrb	r3, [r7, #16]
 8001b4c:	e000      	b.n	8001b50 <RFID+0x414>
 8001b4e:	23ff      	movs	r3, #255	@ 0xff
 8001b50:	743b      	strb	r3, [r7, #16]
												switch (statusadd)
 8001b52:	7c3b      	ldrb	r3, [r7, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <RFID+0x422>
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d006      	beq.n	8001b6a <RFID+0x42e>
 8001b5c:	e00b      	b.n	8001b76 <RFID+0x43a>
												{
												case 0:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001b5e:	4a62      	ldr	r2, [pc, #392]	@ (8001ce8 <RFID+0x5ac>)
 8001b60:	4962      	ldr	r1, [pc, #392]	@ (8001cec <RFID+0x5b0>)
 8001b62:	485a      	ldr	r0, [pc, #360]	@ (8001ccc <RFID+0x590>)
 8001b64:	f7fe fc52 	bl	800040c <CLCD_I2C_Display>
													break;
 8001b68:	e00b      	b.n	8001b82 <RFID+0x446>
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001b6a:	4a61      	ldr	r2, [pc, #388]	@ (8001cf0 <RFID+0x5b4>)
 8001b6c:	495f      	ldr	r1, [pc, #380]	@ (8001cec <RFID+0x5b0>)
 8001b6e:	4857      	ldr	r0, [pc, #348]	@ (8001ccc <RFID+0x590>)
 8001b70:	f7fe fc4c 	bl	800040c <CLCD_I2C_Display>
													break;
 8001b74:	e005      	b.n	8001b82 <RFID+0x446>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");
 8001b76:	4a53      	ldr	r2, [pc, #332]	@ (8001cc4 <RFID+0x588>)
 8001b78:	495c      	ldr	r1, [pc, #368]	@ (8001cec <RFID+0x5b0>)
 8001b7a:	4854      	ldr	r0, [pc, #336]	@ (8001ccc <RFID+0x590>)
 8001b7c:	f7fe fc46 	bl	800040c <CLCD_I2C_Display>
													break;
 8001b80:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 8001b82:	7b7b      	ldrb	r3, [r7, #13]
 8001b84:	2b23      	cmp	r3, #35	@ 0x23
 8001b86:	f040 808b 	bne.w	8001ca0 <RFID+0x564>
											{
												buzzer(1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f001 fc4a 	bl	8003424 <buzzer>
												exitmenu = Delaymenu;
 8001b90:	4b51      	ldr	r3, [pc, #324]	@ (8001cd8 <RFID+0x59c>)
 8001b92:	2214      	movs	r2, #20
 8001b94:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001b96:	7c3b      	ldrb	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <RFID+0x466>
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d041      	beq.n	8001c24 <RFID+0x4e8>
 8001ba0:	e07b      	b.n	8001c9a <RFID+0x55e>
												{
													case 0: 
														uint8_t AdminID = InputID_ADMIN();
 8001ba2:	f7ff f9e3 	bl	8000f6c <InputID_ADMIN>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	72bb      	strb	r3, [r7, #10]
														uint8_t keyadd_admin = (1 << 7) + AdminID;
 8001baa:	7abb      	ldrb	r3, [r7, #10]
 8001bac:	3b80      	subs	r3, #128	@ 0x80
 8001bae:	727b      	strb	r3, [r7, #9]
														if (CheckKey(keyadd_admin)==0)
 8001bb0:	7a7b      	ldrb	r3, [r7, #9]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fad4 	bl	8002160 <CheckKey>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d111      	bne.n	8001be2 <RFID+0x4a6>
														{
															CLCD_I2C_Display(&LCD1,"ID doesnt exist"," Pick another ID");
 8001bbe:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf4 <RFID+0x5b8>)
 8001bc0:	494d      	ldr	r1, [pc, #308]	@ (8001cf8 <RFID+0x5bc>)
 8001bc2:	4842      	ldr	r0, [pc, #264]	@ (8001ccc <RFID+0x590>)
 8001bc4:	f7fe fc22 	bl	800040c <CLCD_I2C_Display>
															buzzer(3);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f001 fc2b 	bl	8003424 <buzzer>
															HAL_Delay(1000);
 8001bce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bd2:	f002 f935 	bl	8003e40 <HAL_Delay>
															CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001bd6:	4a44      	ldr	r2, [pc, #272]	@ (8001ce8 <RFID+0x5ac>)
 8001bd8:	4944      	ldr	r1, [pc, #272]	@ (8001cec <RFID+0x5b0>)
 8001bda:	483c      	ldr	r0, [pc, #240]	@ (8001ccc <RFID+0x590>)
 8001bdc:	f7fe fc16 	bl	800040c <CLCD_I2C_Display>
 8001be0:	e01a      	b.n	8001c18 <RFID+0x4dc>
														}
														else 
														{
															removeuid(CheckKey(keyadd_admin));
 8001be2:	7a7b      	ldrb	r3, [r7, #9]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fabb 	bl	8002160 <CheckKey>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fd93 	bl	8002718 <removeuid>
															CLCD_I2C_Display(&LCD1,"REMOVE ADMIN CARD","   SUCCESSFUL  ");
 8001bf2:	4a42      	ldr	r2, [pc, #264]	@ (8001cfc <RFID+0x5c0>)
 8001bf4:	4942      	ldr	r1, [pc, #264]	@ (8001d00 <RFID+0x5c4>)
 8001bf6:	4835      	ldr	r0, [pc, #212]	@ (8001ccc <RFID+0x590>)
 8001bf8:	f7fe fc08 	bl	800040c <CLCD_I2C_Display>
															HAL_Delay(1000);
 8001bfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c00:	f002 f91e 	bl	8003e40 <HAL_Delay>
															if (checkcountUID() == 0)
 8001c04:	f000 f966 	bl	8001ed4 <checkcountUID>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d104      	bne.n	8001c18 <RFID+0x4dc>
															{
																startadd();
 8001c0e:	f000 fd91 	bl	8002734 <startadd>
																exitmenu = 0;
 8001c12:	4b31      	ldr	r3, [pc, #196]	@ (8001cd8 <RFID+0x59c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
															}
														}
														CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001c18:	4a33      	ldr	r2, [pc, #204]	@ (8001ce8 <RFID+0x5ac>)
 8001c1a:	4934      	ldr	r1, [pc, #208]	@ (8001cec <RFID+0x5b0>)
 8001c1c:	482b      	ldr	r0, [pc, #172]	@ (8001ccc <RFID+0x590>)
 8001c1e:	f7fe fbf5 	bl	800040c <CLCD_I2C_Display>
														break;
 8001c22:	e03d      	b.n	8001ca0 <RFID+0x564>
													case 1:
														uint8_t UserID = InputID_USER();
 8001c24:	f7ff f9ae 	bl	8000f84 <InputID_USER>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	733b      	strb	r3, [r7, #12]
														uint8_t keyadd_user = (0 << 7) + UserID;
 8001c2c:	7b3b      	ldrb	r3, [r7, #12]
 8001c2e:	72fb      	strb	r3, [r7, #11]
														if (CheckKey(keyadd_user)==0)
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fa94 	bl	8002160 <CheckKey>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10c      	bne.n	8001c58 <RFID+0x51c>
														{
															CLCD_I2C_Display(&LCD1,"ID doesnt exist"," Pick another ID");
 8001c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf4 <RFID+0x5b8>)
 8001c40:	492d      	ldr	r1, [pc, #180]	@ (8001cf8 <RFID+0x5bc>)
 8001c42:	4822      	ldr	r0, [pc, #136]	@ (8001ccc <RFID+0x590>)
 8001c44:	f7fe fbe2 	bl	800040c <CLCD_I2C_Display>
															buzzer(3);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f001 fbeb 	bl	8003424 <buzzer>
															HAL_Delay(1000);
 8001c4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c52:	f002 f8f5 	bl	8003e40 <HAL_Delay>
 8001c56:	e01a      	b.n	8001c8e <RFID+0x552>
														}
														else 
														{
															removeuid(CheckKey(keyadd_user));
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fa80 	bl	8002160 <CheckKey>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fd58 	bl	8002718 <removeuid>
															CLCD_I2C_Display(&LCD1,"REMOVE USER CARD","   SUCCESSFUL  ");
 8001c68:	4a24      	ldr	r2, [pc, #144]	@ (8001cfc <RFID+0x5c0>)
 8001c6a:	4926      	ldr	r1, [pc, #152]	@ (8001d04 <RFID+0x5c8>)
 8001c6c:	4817      	ldr	r0, [pc, #92]	@ (8001ccc <RFID+0x590>)
 8001c6e:	f7fe fbcd 	bl	800040c <CLCD_I2C_Display>
															HAL_Delay(1000);
 8001c72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c76:	f002 f8e3 	bl	8003e40 <HAL_Delay>
															if (checkcountUID() == 0)
 8001c7a:	f000 f92b 	bl	8001ed4 <checkcountUID>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d104      	bne.n	8001c8e <RFID+0x552>
															{
																startadd();
 8001c84:	f000 fd56 	bl	8002734 <startadd>
																exitmenu = 0;
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <RFID+0x59c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
															}
														}
														CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001c8e:	4a18      	ldr	r2, [pc, #96]	@ (8001cf0 <RFID+0x5b4>)
 8001c90:	4916      	ldr	r1, [pc, #88]	@ (8001cec <RFID+0x5b0>)
 8001c92:	480e      	ldr	r0, [pc, #56]	@ (8001ccc <RFID+0x590>)
 8001c94:	f7fe fbba 	bl	800040c <CLCD_I2C_Display>
														break;
 8001c98:	e002      	b.n	8001ca0 <RFID+0x564>
													default:
														backrm10 = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
														break;
 8001c9e:	bf00      	nop
										while (backrm10 == 1)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	f43f af31 	beq.w	8001b0a <RFID+0x3ce>
												}		
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cdc <RFID+0x5a0>)
 8001caa:	490d      	ldr	r1, [pc, #52]	@ (8001ce0 <RFID+0x5a4>)
 8001cac:	4807      	ldr	r0, [pc, #28]	@ (8001ccc <RFID+0x590>)
 8001cae:	f7fe fbad 	bl	800040c <CLCD_I2C_Display>
										break;
 8001cb2:	e088      	b.n	8001dc6 <RFID+0x68a>
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001cb4:	4a03      	ldr	r2, [pc, #12]	@ (8001cc4 <RFID+0x588>)
 8001cb6:	4914      	ldr	r1, [pc, #80]	@ (8001d08 <RFID+0x5cc>)
 8001cb8:	4804      	ldr	r0, [pc, #16]	@ (8001ccc <RFID+0x590>)
 8001cba:	f7fe fba7 	bl	800040c <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73bb      	strb	r3, [r7, #14]
										while (rmquet)
 8001cc2:	e074      	b.n	8001dae <RFID+0x672>
 8001cc4:	0800d6b8 	.word	0x0800d6b8
 8001cc8:	0800d740 	.word	0x0800d740
 8001ccc:	200003dc 	.word	0x200003dc
 8001cd0:	0800d6c0 	.word	0x0800d6c0
 8001cd4:	0800d6cc 	.word	0x0800d6cc
 8001cd8:	20000020 	.word	0x20000020
 8001cdc:	0800d760 	.word	0x0800d760
 8001ce0:	0800d770 	.word	0x0800d770
 8001ce4:	0800d780 	.word	0x0800d780
 8001ce8:	0800d790 	.word	0x0800d790
 8001cec:	0800d7a4 	.word	0x0800d7a4
 8001cf0:	0800d7b4 	.word	0x0800d7b4
 8001cf4:	0800d708 	.word	0x0800d708
 8001cf8:	0800d7c4 	.word	0x0800d7c4
 8001cfc:	0800d7d4 	.word	0x0800d7d4
 8001d00:	0800d7e4 	.word	0x0800d7e4
 8001d04:	0800d7f8 	.word	0x0800d7f8
 8001d08:	0800d80c 	.word	0x0800d80c
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f7fe fcd7 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001d12:	4603      	mov	r3, r0
 8001d14:	737b      	strb	r3, [r7, #13]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 8001d16:	4847      	ldr	r0, [pc, #284]	@ (8001e34 <RFID+0x6f8>)
 8001d18:	f001 fbfa 	bl	8003510 <TM_MFRC522_Check>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d13d      	bne.n	8001d9e <RFID+0x662>
											{
												if (CheckListUID(CardID) != 0)
 8001d22:	4844      	ldr	r0, [pc, #272]	@ (8001e34 <RFID+0x6f8>)
 8001d24:	f000 f8a6 	bl	8001e74 <CheckListUID>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d026      	beq.n	8001d7c <RFID+0x640>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8001d2e:	4841      	ldr	r0, [pc, #260]	@ (8001e34 <RFID+0x6f8>)
 8001d30:	f000 f8a0 	bl	8001e74 <CheckListUID>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fa12 	bl	8002160 <CheckKey>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fcea 	bl	8002718 <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 8001d44:	4a3c      	ldr	r2, [pc, #240]	@ (8001e38 <RFID+0x6fc>)
 8001d46:	493d      	ldr	r1, [pc, #244]	@ (8001e3c <RFID+0x700>)
 8001d48:	483d      	ldr	r0, [pc, #244]	@ (8001e40 <RFID+0x704>)
 8001d4a:	f7fe fb5f 	bl	800040c <CLCD_I2C_Display>
													HAL_Delay(1000);
 8001d4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d52:	f002 f875 	bl	8003e40 <HAL_Delay>
													if (checkcountUID() == 0)
 8001d56:	f000 f8bd 	bl	8001ed4 <checkcountUID>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d107      	bne.n	8001d70 <RFID+0x634>
													{
														startadd();
 8001d60:	f000 fce8 	bl	8002734 <startadd>
														rmquet = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73bb      	strb	r3, [r7, #14]
														exitmenu = 0;
 8001d68:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <RFID+0x708>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
														return;
 8001d6e:	e05d      	b.n	8001e2c <RFID+0x6f0>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001d70:	4a35      	ldr	r2, [pc, #212]	@ (8001e48 <RFID+0x70c>)
 8001d72:	4936      	ldr	r1, [pc, #216]	@ (8001e4c <RFID+0x710>)
 8001d74:	4832      	ldr	r0, [pc, #200]	@ (8001e40 <RFID+0x704>)
 8001d76:	f7fe fb49 	bl	800040c <CLCD_I2C_Display>
 8001d7a:	e010      	b.n	8001d9e <RFID+0x662>
													}
												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   This card","  Do not exist");
 8001d7c:	4a34      	ldr	r2, [pc, #208]	@ (8001e50 <RFID+0x714>)
 8001d7e:	4935      	ldr	r1, [pc, #212]	@ (8001e54 <RFID+0x718>)
 8001d80:	482f      	ldr	r0, [pc, #188]	@ (8001e40 <RFID+0x704>)
 8001d82:	f7fe fb43 	bl	800040c <CLCD_I2C_Display>
													buzzer(3);
 8001d86:	2003      	movs	r0, #3
 8001d88:	f001 fb4c 	bl	8003424 <buzzer>
													HAL_Delay(1000);
 8001d8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d90:	f002 f856 	bl	8003e40 <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8001d94:	4a2c      	ldr	r2, [pc, #176]	@ (8001e48 <RFID+0x70c>)
 8001d96:	492d      	ldr	r1, [pc, #180]	@ (8001e4c <RFID+0x710>)
 8001d98:	4829      	ldr	r0, [pc, #164]	@ (8001e40 <RFID+0x704>)
 8001d9a:	f7fe fb37 	bl	800040c <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 8001d9e:	7b7b      	ldrb	r3, [r7, #13]
 8001da0:	2b23      	cmp	r3, #35	@ 0x23
 8001da2:	d104      	bne.n	8001dae <RFID+0x672>
											{
												buzzer(1);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f001 fb3d 	bl	8003424 <buzzer>
												rmquet = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73bb      	strb	r3, [r7, #14]
										while (rmquet)
 8001dae:	7bbb      	ldrb	r3, [r7, #14]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ab      	bne.n	8001d0c <RFID+0x5d0>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001db4:	4a28      	ldr	r2, [pc, #160]	@ (8001e58 <RFID+0x71c>)
 8001db6:	4929      	ldr	r1, [pc, #164]	@ (8001e5c <RFID+0x720>)
 8001db8:	4821      	ldr	r0, [pc, #132]	@ (8001e40 <RFID+0x704>)
 8001dba:	f7fe fb27 	bl	800040c <CLCD_I2C_Display>
										break;
 8001dbe:	e002      	b.n	8001dc6 <RFID+0x68a>
									default:
										backrm1 = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	747b      	strb	r3, [r7, #17]
										break;
 8001dc4:	bf00      	nop
							while (backrm1 == 1)
 8001dc6:	7c7b      	ldrb	r3, [r7, #17]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	f43f ae4a 	beq.w	8001a62 <RFID+0x326>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001dce:	4a24      	ldr	r2, [pc, #144]	@ (8001e60 <RFID+0x724>)
 8001dd0:	4924      	ldr	r1, [pc, #144]	@ (8001e64 <RFID+0x728>)
 8001dd2:	481b      	ldr	r0, [pc, #108]	@ (8001e40 <RFID+0x704>)
 8001dd4:	f7fe fb1a 	bl	800040c <CLCD_I2C_Display>
							break;
 8001dd8:	e00a      	b.n	8001df0 <RFID+0x6b4>
						case 1:
							remoall();
 8001dda:	f000 fd21 	bl	8002820 <remoall>
							startadd();
 8001dde:	f000 fca9 	bl	8002734 <startadd>
							exitmenu = 0;
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <RFID+0x708>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
							break;
 8001de8:	e002      	b.n	8001df0 <RFID+0x6b4>
						default:
							backrm = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	74fb      	strb	r3, [r7, #19]
							break;
 8001dee:	bf00      	nop
				while (backrm == 1)
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	f43f adb9 	beq.w	800196a <RFID+0x22e>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8001df8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e68 <RFID+0x72c>)
 8001dfa:	491c      	ldr	r1, [pc, #112]	@ (8001e6c <RFID+0x730>)
 8001dfc:	4810      	ldr	r0, [pc, #64]	@ (8001e40 <RFID+0x704>)
 8001dfe:	f7fe fb05 	bl	800040c <CLCD_I2C_Display>
				break;
 8001e02:	e00b      	b.n	8001e1c <RFID+0x6e0>
			case 2:
				checkthe();
 8001e04:	f000 f910 	bl	8002028 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8001e08:	4a19      	ldr	r2, [pc, #100]	@ (8001e70 <RFID+0x734>)
 8001e0a:	4918      	ldr	r1, [pc, #96]	@ (8001e6c <RFID+0x730>)
 8001e0c:	480c      	ldr	r0, [pc, #48]	@ (8001e40 <RFID+0x704>)
 8001e0e:	f7fe fafd 	bl	800040c <CLCD_I2C_Display>
				break;
 8001e12:	e003      	b.n	8001e1c <RFID+0x6e0>
			default:
				exitmenu = 0;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <RFID+0x708>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
				break;
 8001e1a:	bf00      	nop
	while (exitmenu )
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <RFID+0x708>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f47f ac9c 	bne.w	800175e <RFID+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8001e26:	4806      	ldr	r0, [pc, #24]	@ (8001e40 <RFID+0x704>)
 8001e28:	f7fe fae0 	bl	80003ec <CLCD_I2C_Clear>
}
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200003e8 	.word	0x200003e8
 8001e38:	0800d7d4 	.word	0x0800d7d4
 8001e3c:	0800d81c 	.word	0x0800d81c
 8001e40:	200003dc 	.word	0x200003dc
 8001e44:	20000020 	.word	0x20000020
 8001e48:	0800d6b8 	.word	0x0800d6b8
 8001e4c:	0800d80c 	.word	0x0800d80c
 8001e50:	0800d82c 	.word	0x0800d82c
 8001e54:	0800d83c 	.word	0x0800d83c
 8001e58:	0800d780 	.word	0x0800d780
 8001e5c:	0800d770 	.word	0x0800d770
 8001e60:	0800d72c 	.word	0x0800d72c
 8001e64:	0800d740 	.word	0x0800d740
 8001e68:	0800d698 	.word	0x0800d698
 8001e6c:	0800d67c 	.word	0x0800d67c
 8001e70:	0800d6a8 	.word	0x0800d6a8

08001e74 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    uint32_t pt = StartAddressUID;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <CheckListUID+0x5c>)
 8001e7e:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001e80:	e018      	b.n	8001eb4 <CheckListUID+0x40>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3306      	adds	r3, #6
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe ff45 	bl	8000d16 <Flash_Read_2Byte>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10a      	bne.n	8001eae <CheckListUID+0x3a>
        {
            if (CheckUID(data, pt) == 1)
 8001e98:	68f9      	ldr	r1, [r7, #12]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fc10 	bl	80026c0 <CheckUID>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <CheckListUID+0x3a>
                return *(uint8_t *)(pt + 5);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3305      	adds	r3, #5
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	e00b      	b.n	8001ec6 <CheckListUID+0x52>
        }
        pt = pt + 8;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3305      	adds	r3, #5
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe ff20 	bl	8000cfe <Flash_Read_Byte>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2bff      	cmp	r3, #255	@ 0xff
 8001ec2:	d1de      	bne.n	8001e82 <CheckListUID+0xe>
    }
    return 0;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	0800f000 	.word	0x0800f000

08001ed4 <checkcountUID>:

uint8_t checkcountUID(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
    uint32_t pt = StartAddressUID;
 8001eda:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <checkcountUID+0x60>)
 8001edc:	607b      	str	r3, [r7, #4]
    uint8_t count = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	70fb      	strb	r3, [r7, #3]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001ee2:	e01a      	b.n	8001f1a <checkcountUID+0x46>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3306      	adds	r3, #6
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe ff14 	bl	8000d16 <Flash_Read_2Byte>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d10c      	bne.n	8001f14 <checkcountUID+0x40>
        {
            if ((Flash_Read_Byte(pt + 5) >> 7) == 1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3305      	adds	r3, #5
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fefd 	bl	8000cfe <Flash_Read_Byte>
 8001f04:	4603      	mov	r3, r0
 8001f06:	09db      	lsrs	r3, r3, #7
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d102      	bne.n	8001f14 <checkcountUID+0x40>
            {
                count++;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	3301      	adds	r3, #1
 8001f12:	70fb      	strb	r3, [r7, #3]
            }
        }
        pt = pt + 8;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3308      	adds	r3, #8
 8001f18:	607b      	str	r3, [r7, #4]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3305      	adds	r3, #5
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe feed 	bl	8000cfe <Flash_Read_Byte>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2bff      	cmp	r3, #255	@ 0xff
 8001f28:	d1dc      	bne.n	8001ee4 <checkcountUID+0x10>
    }
    return count;
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	0800f000 	.word	0x0800f000

08001f38 <adduid>:

void adduid(uint8_t key)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
    setaddress();
 8001f42:	f000 fc51 	bl	80027e8 <setaddress>
    CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8001f46:	4a30      	ldr	r2, [pc, #192]	@ (8002008 <adduid+0xd0>)
 8001f48:	4930      	ldr	r1, [pc, #192]	@ (800200c <adduid+0xd4>)
 8001f4a:	4831      	ldr	r0, [pc, #196]	@ (8002010 <adduid+0xd8>)
 8001f4c:	f7fe fa5e 	bl	800040c <CLCD_I2C_Display>
    while (exitmenu)
 8001f50:	e053      	b.n	8001ffa <adduid+0xc2>
    {
        if (TM_MFRC522_Check(CardID) == MI_OK)
 8001f52:	4830      	ldr	r0, [pc, #192]	@ (8002014 <adduid+0xdc>)
 8001f54:	f001 fadc 	bl	8003510 <TM_MFRC522_Check>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d143      	bne.n	8001fe6 <adduid+0xae>
        {
            HAL_Delay(100);
 8001f5e:	2064      	movs	r0, #100	@ 0x64
 8001f60:	f001 ff6e 	bl	8003e40 <HAL_Delay>
            if (CheckListUID(CardID) == 0)
 8001f64:	482b      	ldr	r0, [pc, #172]	@ (8002014 <adduid+0xdc>)
 8001f66:	f7ff ff85 	bl	8001e74 <CheckListUID>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d122      	bne.n	8001fb6 <adduid+0x7e>
            {
                buzzer(1);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f001 fa57 	bl	8003424 <buzzer>
                CardID[5] = key;
 8001f76:	4a27      	ldr	r2, [pc, #156]	@ (8002014 <adduid+0xdc>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	7153      	strb	r3, [r2, #5]
                Flash_Write_Array(AddressUID, CardID, 6);
 8001f7c:	4b26      	ldr	r3, [pc, #152]	@ (8002018 <adduid+0xe0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2206      	movs	r2, #6
 8001f82:	4924      	ldr	r1, [pc, #144]	@ (8002014 <adduid+0xdc>)
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fe97 	bl	8000cb8 <Flash_Write_Array>
                AddressUID += 8;
 8001f8a:	4b23      	ldr	r3, [pc, #140]	@ (8002018 <adduid+0xe0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	4a21      	ldr	r2, [pc, #132]	@ (8002018 <adduid+0xe0>)
 8001f92:	6013      	str	r3, [r2, #0]
                CLCD_I2C_Clear(&LCD1);
 8001f94:	481e      	ldr	r0, [pc, #120]	@ (8002010 <adduid+0xd8>)
 8001f96:	f7fe fa29 	bl	80003ec <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	481c      	ldr	r0, [pc, #112]	@ (8002010 <adduid+0xd8>)
 8001fa0:	f7fe f9ba 	bl	8000318 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 8001fa4:	491d      	ldr	r1, [pc, #116]	@ (800201c <adduid+0xe4>)
 8001fa6:	481a      	ldr	r0, [pc, #104]	@ (8002010 <adduid+0xd8>)
 8001fa8:	f7fe fa09 	bl	80003be <CLCD_I2C_WriteString>
                HAL_Delay(1000);
 8001fac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fb0:	f001 ff46 	bl	8003e40 <HAL_Delay>
                return;
 8001fb4:	e025      	b.n	8002002 <adduid+0xca>
            }
            else
            {
                CLCD_I2C_Clear(&LCD1);
 8001fb6:	4816      	ldr	r0, [pc, #88]	@ (8002010 <adduid+0xd8>)
 8001fb8:	f7fe fa18 	bl	80003ec <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4813      	ldr	r0, [pc, #76]	@ (8002010 <adduid+0xd8>)
 8001fc2:	f7fe f9a9 	bl	8000318 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 8001fc6:	4916      	ldr	r1, [pc, #88]	@ (8002020 <adduid+0xe8>)
 8001fc8:	4811      	ldr	r0, [pc, #68]	@ (8002010 <adduid+0xd8>)
 8001fca:	f7fe f9f8 	bl	80003be <CLCD_I2C_WriteString>
                buzzer(3);
 8001fce:	2003      	movs	r0, #3
 8001fd0:	f001 fa28 	bl	8003424 <buzzer>
                HAL_Delay(1000);
 8001fd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fd8:	f001 ff32 	bl	8003e40 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <adduid+0xd0>)
 8001fde:	490b      	ldr	r1, [pc, #44]	@ (800200c <adduid+0xd4>)
 8001fe0:	480b      	ldr	r0, [pc, #44]	@ (8002010 <adduid+0xd8>)
 8001fe2:	f7fe fa13 	bl	800040c <CLCD_I2C_Display>
            }
        }
        if (KeyPad_WaitForKeyGetChar(100) == '#')
 8001fe6:	2064      	movs	r0, #100	@ 0x64
 8001fe8:	f7fe fb6a 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b23      	cmp	r3, #35	@ 0x23
 8001ff0:	d103      	bne.n	8001ffa <adduid+0xc2>
        {
            buzzer(1);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f001 fa16 	bl	8003424 <buzzer>
            return;
 8001ff8:	e003      	b.n	8002002 <adduid+0xca>
    while (exitmenu)
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <adduid+0xec>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1a7      	bne.n	8001f52 <adduid+0x1a>
        }
    }
}
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	0800d6b8 	.word	0x0800d6b8
 800200c:	0800d84c 	.word	0x0800d84c
 8002010:	200003dc 	.word	0x200003dc
 8002014:	200003e8 	.word	0x200003e8
 8002018:	20000024 	.word	0x20000024
 800201c:	0800d858 	.word	0x0800d858
 8002020:	0800d868 	.word	0x0800d868
 8002024:	20000020 	.word	0x20000020

08002028 <checkthe>:

void checkthe(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
    exitmenu = 30;
 800202e:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <checkthe+0x110>)
 8002030:	221e      	movs	r2, #30
 8002032:	701a      	strb	r2, [r3, #0]
    CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002034:	4a41      	ldr	r2, [pc, #260]	@ (800213c <checkthe+0x114>)
 8002036:	4942      	ldr	r1, [pc, #264]	@ (8002140 <checkthe+0x118>)
 8002038:	4842      	ldr	r0, [pc, #264]	@ (8002144 <checkthe+0x11c>)
 800203a:	f7fe f9e7 	bl	800040c <CLCD_I2C_Display>
    while (exitmenu)
 800203e:	e074      	b.n	800212a <checkthe+0x102>
    {
        if (TM_MFRC522_Check(CardID) == MI_OK)
 8002040:	4841      	ldr	r0, [pc, #260]	@ (8002148 <checkthe+0x120>)
 8002042:	f001 fa65 	bl	8003510 <TM_MFRC522_Check>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d164      	bne.n	8002116 <checkthe+0xee>
        {
            if (CheckListUID(CardID) == 0)
 800204c:	483e      	ldr	r0, [pc, #248]	@ (8002148 <checkthe+0x120>)
 800204e:	f7ff ff11 	bl	8001e74 <CheckListUID>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d11c      	bne.n	8002092 <checkthe+0x6a>
            {
                CLCD_I2C_Clear(&LCD1);
 8002058:	483a      	ldr	r0, [pc, #232]	@ (8002144 <checkthe+0x11c>)
 800205a:	f7fe f9c7 	bl	80003ec <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	4838      	ldr	r0, [pc, #224]	@ (8002144 <checkthe+0x11c>)
 8002064:	f7fe f958 	bl	8000318 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 8002068:	4938      	ldr	r1, [pc, #224]	@ (800214c <checkthe+0x124>)
 800206a:	4836      	ldr	r0, [pc, #216]	@ (8002144 <checkthe+0x11c>)
 800206c:	f7fe f9a7 	bl	80003be <CLCD_I2C_WriteString>
                buzzer(3);
 8002070:	2003      	movs	r0, #3
 8002072:	f001 f9d7 	bl	8003424 <buzzer>
                HAL_Delay(1000);
 8002076:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800207a:	f001 fee1 	bl	8003e40 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 800207e:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <checkthe+0x114>)
 8002080:	492f      	ldr	r1, [pc, #188]	@ (8002140 <checkthe+0x118>)
 8002082:	4830      	ldr	r0, [pc, #192]	@ (8002144 <checkthe+0x11c>)
 8002084:	f7fe f9c2 	bl	800040c <CLCD_I2C_Display>
                HAL_Delay(1000);
 8002088:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800208c:	f001 fed8 	bl	8003e40 <HAL_Delay>
 8002090:	e041      	b.n	8002116 <checkthe+0xee>
            }
            else
            {
                uint8_t key = CheckListUID(CardID);
 8002092:	482d      	ldr	r0, [pc, #180]	@ (8002148 <checkthe+0x120>)
 8002094:	f7ff feee 	bl	8001e74 <CheckListUID>
 8002098:	4603      	mov	r3, r0
 800209a:	75fb      	strb	r3, [r7, #23]
                uint8_t key2 = key & 0x7F;
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020a2:	75bb      	strb	r3, [r7, #22]
                uint8_t key1 = (key & 0x80) >> 7;
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	09db      	lsrs	r3, r3, #7
 80020a8:	757b      	strb	r3, [r7, #21]
                CLCD_I2C_Clear(&LCD1);
 80020aa:	4826      	ldr	r0, [pc, #152]	@ (8002144 <checkthe+0x11c>)
 80020ac:	f7fe f99e 	bl	80003ec <CLCD_I2C_Clear>
                buzzer(1);
 80020b0:	2001      	movs	r0, #1
 80020b2:	f001 f9b7 	bl	8003424 <buzzer>
                switch (key1)
 80020b6:	7d7b      	ldrb	r3, [r7, #21]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d109      	bne.n	80020d0 <checkthe+0xa8>
                {
                case 1:
                    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	4820      	ldr	r0, [pc, #128]	@ (8002144 <checkthe+0x11c>)
 80020c2:	f7fe f929 	bl	8000318 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 80020c6:	4922      	ldr	r1, [pc, #136]	@ (8002150 <checkthe+0x128>)
 80020c8:	481e      	ldr	r0, [pc, #120]	@ (8002144 <checkthe+0x11c>)
 80020ca:	f7fe f978 	bl	80003be <CLCD_I2C_WriteString>
                    break;
 80020ce:	e009      	b.n	80020e4 <checkthe+0xbc>
                default:
                    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	481b      	ldr	r0, [pc, #108]	@ (8002144 <checkthe+0x11c>)
 80020d6:	f7fe f91f 	bl	8000318 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1, "USER CARD");
 80020da:	491e      	ldr	r1, [pc, #120]	@ (8002154 <checkthe+0x12c>)
 80020dc:	4819      	ldr	r0, [pc, #100]	@ (8002144 <checkthe+0x11c>)
 80020de:	f7fe f96e 	bl	80003be <CLCD_I2C_WriteString>
                    break;
 80020e2:	bf00      	nop
                }
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "Card ID: %d", key2);
 80020e4:	7dbb      	ldrb	r3, [r7, #22]
 80020e6:	1d38      	adds	r0, r7, #4
 80020e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002158 <checkthe+0x130>)
 80020ea:	2110      	movs	r1, #16
 80020ec:	f00a fd4c 	bl	800cb88 <sniprintf>
                CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2100      	movs	r1, #0
 80020f4:	4813      	ldr	r0, [pc, #76]	@ (8002144 <checkthe+0x11c>)
 80020f6:	f7fe f90f 	bl	8000318 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, buffer);
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	4811      	ldr	r0, [pc, #68]	@ (8002144 <checkthe+0x11c>)
 8002100:	f7fe f95d 	bl	80003be <CLCD_I2C_WriteString>
                HAL_Delay(1000);
 8002104:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002108:	f001 fe9a 	bl	8003e40 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 800210c:	4a0b      	ldr	r2, [pc, #44]	@ (800213c <checkthe+0x114>)
 800210e:	4913      	ldr	r1, [pc, #76]	@ (800215c <checkthe+0x134>)
 8002110:	480c      	ldr	r0, [pc, #48]	@ (8002144 <checkthe+0x11c>)
 8002112:	f7fe f97b 	bl	800040c <CLCD_I2C_Display>
            }
        }
        if (KeyPad_WaitForKeyGetChar(100) == '#')
 8002116:	2064      	movs	r0, #100	@ 0x64
 8002118:	f7fe fad2 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 800211c:	4603      	mov	r3, r0
 800211e:	2b23      	cmp	r3, #35	@ 0x23
 8002120:	d103      	bne.n	800212a <checkthe+0x102>
        {
            buzzer(1);
 8002122:	2001      	movs	r0, #1
 8002124:	f001 f97e 	bl	8003424 <buzzer>
            return;
 8002128:	e003      	b.n	8002132 <checkthe+0x10a>
    while (exitmenu)
 800212a:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <checkthe+0x110>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d186      	bne.n	8002040 <checkthe+0x18>
        }
    }
}
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000020 	.word	0x20000020
 800213c:	0800d6b8 	.word	0x0800d6b8
 8002140:	0800d84c 	.word	0x0800d84c
 8002144:	200003dc 	.word	0x200003dc
 8002148:	200003e8 	.word	0x200003e8
 800214c:	0800d878 	.word	0x0800d878
 8002150:	0800d888 	.word	0x0800d888
 8002154:	0800d894 	.word	0x0800d894
 8002158:	0800d8a0 	.word	0x0800d8a0
 800215c:	0800d80c 	.word	0x0800d80c

08002160 <CheckKey>:

uint32_t CheckKey(uint8_t key)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
    uint32_t pt = StartAddressUID;
 800216a:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <CheckKey+0x58>)
 800216c:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 800216e:	e015      	b.n	800219c <CheckKey+0x3c>
    {
        if (Flash_Read_2Byte(pt + 6) == 0xFFFF)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3306      	adds	r3, #6
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fdce 	bl	8000d16 <Flash_Read_2Byte>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002182:	429a      	cmp	r2, r3
 8002184:	d107      	bne.n	8002196 <CheckKey+0x36>
        {
            if (*(uint8_t *)(pt + 5) == key)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3305      	adds	r3, #5
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	79fa      	ldrb	r2, [r7, #7]
 800218e:	429a      	cmp	r2, r3
 8002190:	d101      	bne.n	8002196 <CheckKey+0x36>
                return pt;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	e00b      	b.n	80021ae <CheckKey+0x4e>
        }
        pt = pt + 8;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3308      	adds	r3, #8
 800219a:	60fb      	str	r3, [r7, #12]
    while (Flash_Read_Byte(pt + 5) != 0xFF)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3305      	adds	r3, #5
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fdac 	bl	8000cfe <Flash_Read_Byte>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2bff      	cmp	r3, #255	@ 0xff
 80021aa:	d1e1      	bne.n	8002170 <CheckKey+0x10>
    }
    return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	0800f000 	.word	0x0800f000

080021bc <FACEID>:

void FACEID(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
	buzzer(1);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f001 f92e 	bl	8003424 <buzzer>
	exitmenu = Delaymenu;
 80021c8:	4b9d      	ldr	r3, [pc, #628]	@ (8002440 <FACEID+0x284>)
 80021ca:	2214      	movs	r2, #20
 80021cc:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80021ce:	23ff      	movs	r3, #255	@ 0xff
 80021d0:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","Pls Press DOWN");
 80021d2:	4a9c      	ldr	r2, [pc, #624]	@ (8002444 <FACEID+0x288>)
 80021d4:	499c      	ldr	r1, [pc, #624]	@ (8002448 <FACEID+0x28c>)
 80021d6:	489d      	ldr	r0, [pc, #628]	@ (800244c <FACEID+0x290>)
 80021d8:	f7fe f918 	bl	800040c <CLCD_I2C_Display>
	while (exitmenu )
 80021dc:	e124      	b.n	8002428 <FACEID+0x26c>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80021de:	200a      	movs	r0, #10
 80021e0:	f7fe fa6e 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80021e4:	4603      	mov	r3, r0
 80021e6:	713b      	strb	r3, [r7, #4]
		if (key_pressed == '*')
 80021e8:	793b      	ldrb	r3, [r7, #4]
 80021ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80021ec:	d127      	bne.n	800223e <FACEID+0x82>
		{
			buzzer(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f001 f918 	bl	8003424 <buzzer>
			exitmenu = Delaymenu;
 80021f4:	4b92      	ldr	r3, [pc, #584]	@ (8002440 <FACEID+0x284>)
 80021f6:	2214      	movs	r2, #20
 80021f8:	701a      	strb	r2, [r3, #0]
			status++;
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	3301      	adds	r3, #1
 80021fe:	71fb      	strb	r3, [r7, #7]
			status = (status > 1) ? (-1) : status;
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d801      	bhi.n	800220a <FACEID+0x4e>
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	e000      	b.n	800220c <FACEID+0x50>
 800220a:	23ff      	movs	r3, #255	@ 0xff
 800220c:	71fb      	strb	r3, [r7, #7]
			switch (status)
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <FACEID+0x5e>
 8002214:	2b01      	cmp	r3, #1
 8002216:	d006      	beq.n	8002226 <FACEID+0x6a>
 8002218:	e00b      	b.n	8002232 <FACEID+0x76>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 800221a:	4a8d      	ldr	r2, [pc, #564]	@ (8002450 <FACEID+0x294>)
 800221c:	498a      	ldr	r1, [pc, #552]	@ (8002448 <FACEID+0x28c>)
 800221e:	488b      	ldr	r0, [pc, #556]	@ (800244c <FACEID+0x290>)
 8002220:	f7fe f8f4 	bl	800040c <CLCD_I2C_Display>
				break;
 8002224:	e00b      	b.n	800223e <FACEID+0x82>
			case 1:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002226:	4a8b      	ldr	r2, [pc, #556]	@ (8002454 <FACEID+0x298>)
 8002228:	4987      	ldr	r1, [pc, #540]	@ (8002448 <FACEID+0x28c>)
 800222a:	4888      	ldr	r0, [pc, #544]	@ (800244c <FACEID+0x290>)
 800222c:	f7fe f8ee 	bl	800040c <CLCD_I2C_Display>
				break;
 8002230:	e005      	b.n	800223e <FACEID+0x82>
			default:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Back");
 8002232:	4a89      	ldr	r2, [pc, #548]	@ (8002458 <FACEID+0x29c>)
 8002234:	4984      	ldr	r1, [pc, #528]	@ (8002448 <FACEID+0x28c>)
 8002236:	4885      	ldr	r0, [pc, #532]	@ (800244c <FACEID+0x290>)
 8002238:	f7fe f8e8 	bl	800040c <CLCD_I2C_Display>
				break;
 800223c:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 800223e:	793b      	ldrb	r3, [r7, #4]
 8002240:	2b23      	cmp	r3, #35	@ 0x23
 8002242:	f040 80f1 	bne.w	8002428 <FACEID+0x26c>
		{
			buzzer(1);
 8002246:	2001      	movs	r0, #1
 8002248:	f001 f8ec 	bl	8003424 <buzzer>
			exitmenu = Delaymenu;
 800224c:	4b7c      	ldr	r3, [pc, #496]	@ (8002440 <FACEID+0x284>)
 800224e:	2214      	movs	r2, #20
 8002250:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <FACEID+0xa2>
 8002258:	2b01      	cmp	r3, #1
 800225a:	d022      	beq.n	80022a2 <FACEID+0xe6>
 800225c:	e0e0      	b.n	8002420 <FACEID+0x264>
			{
			case 0:
				uint8_t FaceID = InputID_FACE();
 800225e:	f7fe fea9 	bl	8000fb4 <InputID_FACE>
 8002262:	4603      	mov	r3, r0
 8002264:	70bb      	strb	r3, [r7, #2]
				if (checkfaceid(FaceID) != 0)
 8002266:	78bb      	ldrb	r3, [r7, #2]
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fbc5 	bl	80029f8 <checkfaceid>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00c      	beq.n	800228e <FACEID+0xd2>
				{
					CLCD_I2C_Display(&LCD1,"    FACEID "," Face Existed ");
 8002274:	4a79      	ldr	r2, [pc, #484]	@ (800245c <FACEID+0x2a0>)
 8002276:	497a      	ldr	r1, [pc, #488]	@ (8002460 <FACEID+0x2a4>)
 8002278:	4874      	ldr	r0, [pc, #464]	@ (800244c <FACEID+0x290>)
 800227a:	f7fe f8c7 	bl	800040c <CLCD_I2C_Display>
					buzzer(3);
 800227e:	2003      	movs	r0, #3
 8002280:	f001 f8d0 	bl	8003424 <buzzer>
					HAL_Delay(1000);
 8002284:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002288:	f001 fdda 	bl	8003e40 <HAL_Delay>
 800228c:	e003      	b.n	8002296 <FACEID+0xda>
				}
				else
				{
					addface(FaceID);
 800228e:	78bb      	ldrb	r3, [r7, #2]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fae7 	bl	8002864 <addface>
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 8002296:	4a6e      	ldr	r2, [pc, #440]	@ (8002450 <FACEID+0x294>)
 8002298:	496b      	ldr	r1, [pc, #428]	@ (8002448 <FACEID+0x28c>)
 800229a:	486c      	ldr	r0, [pc, #432]	@ (800244c <FACEID+0x290>)
 800229c:	f7fe f8b6 	bl	800040c <CLCD_I2C_Display>
				break;
 80022a0:	e0c2      	b.n	8002428 <FACEID+0x26c>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80022a2:	4a70      	ldr	r2, [pc, #448]	@ (8002464 <FACEID+0x2a8>)
 80022a4:	4970      	ldr	r1, [pc, #448]	@ (8002468 <FACEID+0x2ac>)
 80022a6:	4869      	ldr	r0, [pc, #420]	@ (800244c <FACEID+0x290>)
 80022a8:	f7fe f8b0 	bl	800040c <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	71bb      	strb	r3, [r7, #6]
				uint8_t backrm = 1;
 80022b0:	2301      	movs	r3, #1
 80022b2:	717b      	strb	r3, [r7, #5]
				while (backrm == 1)
 80022b4:	e0aa      	b.n	800240c <FACEID+0x250>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80022b6:	200a      	movs	r0, #10
 80022b8:	f7fe fa02 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80022bc:	4603      	mov	r3, r0
 80022be:	713b      	strb	r3, [r7, #4]
					if (exitmenu == 0)
 80022c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002440 <FACEID+0x284>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <FACEID+0x11c>
					{
						CLCD_I2C_Clear(&LCD1);
 80022c8:	4860      	ldr	r0, [pc, #384]	@ (800244c <FACEID+0x290>)
 80022ca:	f7fe f88f 	bl	80003ec <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80022ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022d2:	f001 fdb5 	bl	8003e40 <HAL_Delay>
						return;
 80022d6:	e0af      	b.n	8002438 <FACEID+0x27c>
					}
					if (key_pressed == '*')
 80022d8:	793b      	ldrb	r3, [r7, #4]
 80022da:	2b2a      	cmp	r3, #42	@ 0x2a
 80022dc:	d127      	bne.n	800232e <FACEID+0x172>
					{
						buzzer(1);
 80022de:	2001      	movs	r0, #1
 80022e0:	f001 f8a0 	bl	8003424 <buzzer>
						exitmenu = Delaymenu;
 80022e4:	4b56      	ldr	r3, [pc, #344]	@ (8002440 <FACEID+0x284>)
 80022e6:	2214      	movs	r2, #20
 80022e8:	701a      	strb	r2, [r3, #0]
						statusrm++;
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	3301      	adds	r3, #1
 80022ee:	71bb      	strb	r3, [r7, #6]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 80022f0:	79bb      	ldrb	r3, [r7, #6]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d801      	bhi.n	80022fa <FACEID+0x13e>
 80022f6:	79bb      	ldrb	r3, [r7, #6]
 80022f8:	e000      	b.n	80022fc <FACEID+0x140>
 80022fa:	2300      	movs	r3, #0
 80022fc:	71bb      	strb	r3, [r7, #6]
						switch (statusrm)
 80022fe:	79bb      	ldrb	r3, [r7, #6]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d002      	beq.n	800230a <FACEID+0x14e>
 8002304:	2b02      	cmp	r3, #2
 8002306:	d006      	beq.n	8002316 <FACEID+0x15a>
 8002308:	e00b      	b.n	8002322 <FACEID+0x166>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 800230a:	4a58      	ldr	r2, [pc, #352]	@ (800246c <FACEID+0x2b0>)
 800230c:	4958      	ldr	r1, [pc, #352]	@ (8002470 <FACEID+0x2b4>)
 800230e:	484f      	ldr	r0, [pc, #316]	@ (800244c <FACEID+0x290>)
 8002310:	f7fe f87c 	bl	800040c <CLCD_I2C_Display>
							break;
 8002314:	e00b      	b.n	800232e <FACEID+0x172>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
 8002316:	4a57      	ldr	r2, [pc, #348]	@ (8002474 <FACEID+0x2b8>)
 8002318:	4955      	ldr	r1, [pc, #340]	@ (8002470 <FACEID+0x2b4>)
 800231a:	484c      	ldr	r0, [pc, #304]	@ (800244c <FACEID+0x290>)
 800231c:	f7fe f876 	bl	800040c <CLCD_I2C_Display>
							break;
 8002320:	e005      	b.n	800232e <FACEID+0x172>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Back");
 8002322:	4a4d      	ldr	r2, [pc, #308]	@ (8002458 <FACEID+0x29c>)
 8002324:	4952      	ldr	r1, [pc, #328]	@ (8002470 <FACEID+0x2b4>)
 8002326:	4849      	ldr	r0, [pc, #292]	@ (800244c <FACEID+0x290>)
 8002328:	f7fe f870 	bl	800040c <CLCD_I2C_Display>
							break;
 800232c:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 800232e:	793b      	ldrb	r3, [r7, #4]
 8002330:	2b23      	cmp	r3, #35	@ 0x23
 8002332:	d16b      	bne.n	800240c <FACEID+0x250>
					{
						buzzer(1);
 8002334:	2001      	movs	r0, #1
 8002336:	f001 f875 	bl	8003424 <buzzer>
						exitmenu = Delaymenu;
 800233a:	4b41      	ldr	r3, [pc, #260]	@ (8002440 <FACEID+0x284>)
 800233c:	2214      	movs	r2, #20
 800233e:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d002      	beq.n	800234c <FACEID+0x190>
 8002346:	2b02      	cmp	r3, #2
 8002348:	d02b      	beq.n	80023a2 <FACEID+0x1e6>
 800234a:	e05c      	b.n	8002406 <FACEID+0x24a>
						{
						case 1:
							uint8_t FaceID = InputID_FACE();
 800234c:	f7fe fe32 	bl	8000fb4 <InputID_FACE>
 8002350:	4603      	mov	r3, r0
 8002352:	70fb      	strb	r3, [r7, #3]
							if (checkfaceid(FaceID) == 0)
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fb4e 	bl	80029f8 <checkfaceid>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10c      	bne.n	800237c <FACEID+0x1c0>
							{
								CLCD_I2C_Display(&LCD1, "    FaceID ", "  Do Not Exist");
 8002362:	4a45      	ldr	r2, [pc, #276]	@ (8002478 <FACEID+0x2bc>)
 8002364:	4945      	ldr	r1, [pc, #276]	@ (800247c <FACEID+0x2c0>)
 8002366:	4839      	ldr	r0, [pc, #228]	@ (800244c <FACEID+0x290>)
 8002368:	f7fe f850 	bl	800040c <CLCD_I2C_Display>
								buzzer(3);
 800236c:	2003      	movs	r0, #3
 800236e:	f001 f859 	bl	8003424 <buzzer>
								HAL_Delay(1000);
 8002372:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002376:	f001 fd63 	bl	8003e40 <HAL_Delay>
 800237a:	e00c      	b.n	8002396 <FACEID+0x1da>
							}
							else
							{
								removeface(FaceID);
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fad6 	bl	8002930 <removeface>
								CLCD_I2C_Display(&LCD1,"REMOVE FACEID ","   SUCCESSFUL  ");
 8002384:	4a3e      	ldr	r2, [pc, #248]	@ (8002480 <FACEID+0x2c4>)
 8002386:	493f      	ldr	r1, [pc, #252]	@ (8002484 <FACEID+0x2c8>)
 8002388:	4830      	ldr	r0, [pc, #192]	@ (800244c <FACEID+0x290>)
 800238a:	f7fe f83f 	bl	800040c <CLCD_I2C_Display>
								HAL_Delay(1000);
 800238e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002392:	f001 fd55 	bl	8003e40 <HAL_Delay>
							}
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 8002396:	4a35      	ldr	r2, [pc, #212]	@ (800246c <FACEID+0x2b0>)
 8002398:	4935      	ldr	r1, [pc, #212]	@ (8002470 <FACEID+0x2b4>)
 800239a:	482c      	ldr	r0, [pc, #176]	@ (800244c <FACEID+0x290>)
 800239c:	f7fe f836 	bl	800040c <CLCD_I2C_Display>
							break;
 80023a0:	e034      	b.n	800240c <FACEID+0x250>
						case 2:
							sprintf(Tx_Buffer , "Del.ALL" );
 80023a2:	4939      	ldr	r1, [pc, #228]	@ (8002488 <FACEID+0x2cc>)
 80023a4:	4839      	ldr	r0, [pc, #228]	@ (800248c <FACEID+0x2d0>)
 80023a6:	f00a fc23 	bl	800cbf0 <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 7);
 80023aa:	2107      	movs	r1, #7
 80023ac:	4837      	ldr	r0, [pc, #220]	@ (800248c <FACEID+0x2d0>)
 80023ae:	f009 ff85 	bl	800c2bc <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80023b2:	4a37      	ldr	r2, [pc, #220]	@ (8002490 <FACEID+0x2d4>)
 80023b4:	4937      	ldr	r1, [pc, #220]	@ (8002494 <FACEID+0x2d8>)
 80023b6:	4825      	ldr	r0, [pc, #148]	@ (800244c <FACEID+0x290>)
 80023b8:	f7fe f828 	bl	800040c <CLCD_I2C_Display>
							exitmenu = 60;
 80023bc:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <FACEID+0x284>)
 80023be:	223c      	movs	r2, #60	@ 0x3c
 80023c0:	701a      	strb	r2, [r3, #0]
							memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80023c2:	2280      	movs	r2, #128	@ 0x80
 80023c4:	2100      	movs	r1, #0
 80023c6:	4834      	ldr	r0, [pc, #208]	@ (8002498 <FACEID+0x2dc>)
 80023c8:	f00a fc32 	bl	800cc30 <memset>
							while(exitmenu != 0){
 80023cc:	e013      	b.n	80023f6 <FACEID+0x23a>
								if(Rx_Buffer[0] == 'T'){
 80023ce:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <FACEID+0x2dc>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	2b54      	cmp	r3, #84	@ 0x54
 80023d6:	d10e      	bne.n	80023f6 <FACEID+0x23a>
									CLCD_I2C_Display(&LCD1, "REMOVE ALL FACE","   SUCCESSFUL  ");
 80023d8:	4a29      	ldr	r2, [pc, #164]	@ (8002480 <FACEID+0x2c4>)
 80023da:	4930      	ldr	r1, [pc, #192]	@ (800249c <FACEID+0x2e0>)
 80023dc:	481b      	ldr	r0, [pc, #108]	@ (800244c <FACEID+0x290>)
 80023de:	f7fe f815 	bl	800040c <CLCD_I2C_Display>
									HAL_Delay(2000);
 80023e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023e6:	f001 fd2b 	bl	8003e40 <HAL_Delay>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80023ea:	2280      	movs	r2, #128	@ 0x80
 80023ec:	2100      	movs	r1, #0
 80023ee:	482a      	ldr	r0, [pc, #168]	@ (8002498 <FACEID+0x2dc>)
 80023f0:	f00a fc1e 	bl	800cc30 <memset>
									break;
 80023f4:	e003      	b.n	80023fe <FACEID+0x242>
							while(exitmenu != 0){
 80023f6:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <FACEID+0x284>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e7      	bne.n	80023ce <FACEID+0x212>
								}
							}
							exitmenu = 0;
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <FACEID+0x284>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
							break;
 8002404:	e002      	b.n	800240c <FACEID+0x250>
						default:
							backrm=0;
 8002406:	2300      	movs	r3, #0
 8002408:	717b      	strb	r3, [r7, #5]
							break;
 800240a:	bf00      	nop
				while (backrm == 1)
 800240c:	797b      	ldrb	r3, [r7, #5]
 800240e:	2b01      	cmp	r3, #1
 8002410:	f43f af51 	beq.w	80022b6 <FACEID+0xfa>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002414:	4a0f      	ldr	r2, [pc, #60]	@ (8002454 <FACEID+0x298>)
 8002416:	490c      	ldr	r1, [pc, #48]	@ (8002448 <FACEID+0x28c>)
 8002418:	480c      	ldr	r0, [pc, #48]	@ (800244c <FACEID+0x290>)
 800241a:	f7fd fff7 	bl	800040c <CLCD_I2C_Display>
				break;
 800241e:	e003      	b.n	8002428 <FACEID+0x26c>
			default:
				exitmenu=0;
 8002420:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <FACEID+0x284>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
				break;
 8002426:	bf00      	nop
	while (exitmenu )
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <FACEID+0x284>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f aed6 	bne.w	80021de <FACEID+0x22>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002432:	4806      	ldr	r0, [pc, #24]	@ (800244c <FACEID+0x290>)
 8002434:	f7fd ffda 	bl	80003ec <CLCD_I2C_Clear>
}
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000020 	.word	0x20000020
 8002444:	0800d66c 	.word	0x0800d66c
 8002448:	0800d8ac 	.word	0x0800d8ac
 800244c:	200003dc 	.word	0x200003dc
 8002450:	0800d8c0 	.word	0x0800d8c0
 8002454:	0800d8d0 	.word	0x0800d8d0
 8002458:	0800d6b8 	.word	0x0800d6b8
 800245c:	0800d8e4 	.word	0x0800d8e4
 8002460:	0800d8f4 	.word	0x0800d8f4
 8002464:	0800d6c0 	.word	0x0800d6c0
 8002468:	0800d6cc 	.word	0x0800d6cc
 800246c:	0800d900 	.word	0x0800d900
 8002470:	0800d914 	.word	0x0800d914
 8002474:	0800d750 	.word	0x0800d750
 8002478:	0800d924 	.word	0x0800d924
 800247c:	0800d934 	.word	0x0800d934
 8002480:	0800d7d4 	.word	0x0800d7d4
 8002484:	0800d940 	.word	0x0800d940
 8002488:	0800d950 	.word	0x0800d950
 800248c:	200003d0 	.word	0x200003d0
 8002490:	0800d5ec 	.word	0x0800d5ec
 8002494:	0800d958 	.word	0x0800d958
 8002498:	20000350 	.word	0x20000350
 800249c:	0800d964 	.word	0x0800d964

080024a0 <FINGER>:

void FINGER(void) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
	buzzer(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f000 ffbc 	bl	8003424 <buzzer>
	exitmenu = Delaymenu;
 80024ac:	4b3e      	ldr	r3, [pc, #248]	@ (80025a8 <FINGER+0x108>)
 80024ae:	2214      	movs	r2, #20
 80024b0:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80024b2:	23ff      	movs	r3, #255	@ 0xff
 80024b4:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"FINGER SETTING ","Pls Press DOWN");
 80024b6:	4a3d      	ldr	r2, [pc, #244]	@ (80025ac <FINGER+0x10c>)
 80024b8:	493d      	ldr	r1, [pc, #244]	@ (80025b0 <FINGER+0x110>)
 80024ba:	483e      	ldr	r0, [pc, #248]	@ (80025b4 <FINGER+0x114>)
 80024bc:	f7fd ffa6 	bl	800040c <CLCD_I2C_Display>
	while (exitmenu )
 80024c0:	e068      	b.n	8002594 <FINGER+0xf4>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80024c2:	200a      	movs	r0, #10
 80024c4:	f7fe f8fc 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80024c8:	4603      	mov	r3, r0
 80024ca:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 80024cc:	79bb      	ldrb	r3, [r7, #6]
 80024ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80024d0:	d131      	bne.n	8002536 <FINGER+0x96>
		{
			buzzer(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f000 ffa6 	bl	8003424 <buzzer>
			exitmenu = Delaymenu;
 80024d8:	4b33      	ldr	r3, [pc, #204]	@ (80025a8 <FINGER+0x108>)
 80024da:	2214      	movs	r2, #20
 80024dc:	701a      	strb	r2, [r3, #0]
			status++;
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	3301      	adds	r3, #1
 80024e2:	71fb      	strb	r3, [r7, #7]
			status = (status > 3) ? 0 : status;
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d801      	bhi.n	80024ee <FINGER+0x4e>
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	e000      	b.n	80024f0 <FINGER+0x50>
 80024ee:	2300      	movs	r3, #0
 80024f0:	71fb      	strb	r3, [r7, #7]
			switch (status)
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d012      	beq.n	800251e <FINGER+0x7e>
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	dc16      	bgt.n	800252a <FINGER+0x8a>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <FINGER+0x66>
 8002500:	2b01      	cmp	r3, #1
 8002502:	d006      	beq.n	8002512 <FINGER+0x72>
 8002504:	e011      	b.n	800252a <FINGER+0x8a>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 8002506:	4a2c      	ldr	r2, [pc, #176]	@ (80025b8 <FINGER+0x118>)
 8002508:	4929      	ldr	r1, [pc, #164]	@ (80025b0 <FINGER+0x110>)
 800250a:	482a      	ldr	r0, [pc, #168]	@ (80025b4 <FINGER+0x114>)
 800250c:	f7fd ff7e 	bl	800040c <CLCD_I2C_Display>
				break;
 8002510:	e011      	b.n	8002536 <FINGER+0x96>
			case 1:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 8002512:	4a2a      	ldr	r2, [pc, #168]	@ (80025bc <FINGER+0x11c>)
 8002514:	4926      	ldr	r1, [pc, #152]	@ (80025b0 <FINGER+0x110>)
 8002516:	4827      	ldr	r0, [pc, #156]	@ (80025b4 <FINGER+0x114>)
 8002518:	f7fd ff78 	bl	800040c <CLCD_I2C_Display>
				break;
 800251c:	e00b      	b.n	8002536 <FINGER+0x96>
            case 2:
                CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 800251e:	4a28      	ldr	r2, [pc, #160]	@ (80025c0 <FINGER+0x120>)
 8002520:	4923      	ldr	r1, [pc, #140]	@ (80025b0 <FINGER+0x110>)
 8002522:	4824      	ldr	r0, [pc, #144]	@ (80025b4 <FINGER+0x114>)
 8002524:	f7fd ff72 	bl	800040c <CLCD_I2C_Display>
                break;
 8002528:	e005      	b.n	8002536 <FINGER+0x96>
			default:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Back");
 800252a:	4a26      	ldr	r2, [pc, #152]	@ (80025c4 <FINGER+0x124>)
 800252c:	4920      	ldr	r1, [pc, #128]	@ (80025b0 <FINGER+0x110>)
 800252e:	4821      	ldr	r0, [pc, #132]	@ (80025b4 <FINGER+0x114>)
 8002530:	f7fd ff6c 	bl	800040c <CLCD_I2C_Display>
				break;
 8002534:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002536:	79bb      	ldrb	r3, [r7, #6]
 8002538:	2b23      	cmp	r3, #35	@ 0x23
 800253a:	d12b      	bne.n	8002594 <FINGER+0xf4>
		{
			buzzer(1);
 800253c:	2001      	movs	r0, #1
 800253e:	f000 ff71 	bl	8003424 <buzzer>
			exitmenu = Delaymenu;
 8002542:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <FINGER+0x108>)
 8002544:	2214      	movs	r2, #20
 8002546:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d016      	beq.n	800257c <FINGER+0xdc>
 800254e:	2b02      	cmp	r3, #2
 8002550:	dc1c      	bgt.n	800258c <FINGER+0xec>
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <FINGER+0xbc>
 8002556:	2b01      	cmp	r3, #1
 8002558:	d008      	beq.n	800256c <FINGER+0xcc>
 800255a:	e017      	b.n	800258c <FINGER+0xec>
			{
			case 0:
                add_finger();
 800255c:	f000 fa8e 	bl	8002a7c <add_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 8002560:	4a15      	ldr	r2, [pc, #84]	@ (80025b8 <FINGER+0x118>)
 8002562:	4913      	ldr	r1, [pc, #76]	@ (80025b0 <FINGER+0x110>)
 8002564:	4813      	ldr	r0, [pc, #76]	@ (80025b4 <FINGER+0x114>)
 8002566:	f7fd ff51 	bl	800040c <CLCD_I2C_Display>
                break;
 800256a:	e013      	b.n	8002594 <FINGER+0xf4>
            case 1:
                remove_id_finger();
 800256c:	f000 fcfa 	bl	8002f64 <remove_id_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 8002570:	4a12      	ldr	r2, [pc, #72]	@ (80025bc <FINGER+0x11c>)
 8002572:	490f      	ldr	r1, [pc, #60]	@ (80025b0 <FINGER+0x110>)
 8002574:	480f      	ldr	r0, [pc, #60]	@ (80025b4 <FINGER+0x114>)
 8002576:	f7fd ff49 	bl	800040c <CLCD_I2C_Display>
                break;
 800257a:	e00b      	b.n	8002594 <FINGER+0xf4>
            case 2:
                remove_all_finger();
 800257c:	f000 fdb0 	bl	80030e0 <remove_all_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002580:	4a0f      	ldr	r2, [pc, #60]	@ (80025c0 <FINGER+0x120>)
 8002582:	490b      	ldr	r1, [pc, #44]	@ (80025b0 <FINGER+0x110>)
 8002584:	480b      	ldr	r0, [pc, #44]	@ (80025b4 <FINGER+0x114>)
 8002586:	f7fd ff41 	bl	800040c <CLCD_I2C_Display>
                break;
 800258a:	e003      	b.n	8002594 <FINGER+0xf4>
            default:
                exitmenu = 0;
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <FINGER+0x108>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
                break;
 8002592:	bf00      	nop
	while (exitmenu )
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <FINGER+0x108>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d192      	bne.n	80024c2 <FINGER+0x22>
            }
        }
    }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000020 	.word	0x20000020
 80025ac:	0800d66c 	.word	0x0800d66c
 80025b0:	0800d974 	.word	0x0800d974
 80025b4:	200003dc 	.word	0x200003dc
 80025b8:	0800d984 	.word	0x0800d984
 80025bc:	0800d994 	.word	0x0800d994
 80025c0:	0800d9a8 	.word	0x0800d9a8
 80025c4:	0800d6b8 	.word	0x0800d6b8

080025c8 <PASSWORD>:


void PASSWORD(void) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
	buzzer(1);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f000 ff28 	bl	8003424 <buzzer>
	exitmenu = Delaymenu;
 80025d4:	4b33      	ldr	r3, [pc, #204]	@ (80026a4 <PASSWORD+0xdc>)
 80025d6:	2214      	movs	r2, #20
 80025d8:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80025da:	23ff      	movs	r3, #255	@ 0xff
 80025dc:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","Pls Press DOWN");
 80025de:	4a32      	ldr	r2, [pc, #200]	@ (80026a8 <PASSWORD+0xe0>)
 80025e0:	4932      	ldr	r1, [pc, #200]	@ (80026ac <PASSWORD+0xe4>)
 80025e2:	4833      	ldr	r0, [pc, #204]	@ (80026b0 <PASSWORD+0xe8>)
 80025e4:	f7fd ff12 	bl	800040c <CLCD_I2C_Display>
	while (exitmenu )
 80025e8:	e052      	b.n	8002690 <PASSWORD+0xc8>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80025ea:	200a      	movs	r0, #10
 80025ec:	f7fe f868 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80025f0:	4603      	mov	r3, r0
 80025f2:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 80025f4:	79bb      	ldrb	r3, [r7, #6]
 80025f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80025f8:	d127      	bne.n	800264a <PASSWORD+0x82>
		{
			buzzer(1);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f000 ff12 	bl	8003424 <buzzer>
			exitmenu = Delaymenu;
 8002600:	4b28      	ldr	r3, [pc, #160]	@ (80026a4 <PASSWORD+0xdc>)
 8002602:	2214      	movs	r2, #20
 8002604:	701a      	strb	r2, [r3, #0]
			status++;
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	3301      	adds	r3, #1
 800260a:	71fb      	strb	r3, [r7, #7]
			status = (status > 2) ? 0 : status;
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d801      	bhi.n	8002616 <PASSWORD+0x4e>
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	e000      	b.n	8002618 <PASSWORD+0x50>
 8002616:	2300      	movs	r3, #0
 8002618:	71fb      	strb	r3, [r7, #7]
			switch (status)
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <PASSWORD+0x5e>
 8002620:	2b01      	cmp	r3, #1
 8002622:	d006      	beq.n	8002632 <PASSWORD+0x6a>
 8002624:	e00b      	b.n	800263e <PASSWORD+0x76>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002626:	4a23      	ldr	r2, [pc, #140]	@ (80026b4 <PASSWORD+0xec>)
 8002628:	4920      	ldr	r1, [pc, #128]	@ (80026ac <PASSWORD+0xe4>)
 800262a:	4821      	ldr	r0, [pc, #132]	@ (80026b0 <PASSWORD+0xe8>)
 800262c:	f7fd feee 	bl	800040c <CLCD_I2C_Display>
				break;
 8002630:	e00b      	b.n	800264a <PASSWORD+0x82>
			case 1:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002632:	4a21      	ldr	r2, [pc, #132]	@ (80026b8 <PASSWORD+0xf0>)
 8002634:	491d      	ldr	r1, [pc, #116]	@ (80026ac <PASSWORD+0xe4>)
 8002636:	481e      	ldr	r0, [pc, #120]	@ (80026b0 <PASSWORD+0xe8>)
 8002638:	f7fd fee8 	bl	800040c <CLCD_I2C_Display>
				break;
 800263c:	e005      	b.n	800264a <PASSWORD+0x82>
			default:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Back");
 800263e:	4a1f      	ldr	r2, [pc, #124]	@ (80026bc <PASSWORD+0xf4>)
 8002640:	491a      	ldr	r1, [pc, #104]	@ (80026ac <PASSWORD+0xe4>)
 8002642:	481b      	ldr	r0, [pc, #108]	@ (80026b0 <PASSWORD+0xe8>)
 8002644:	f7fd fee2 	bl	800040c <CLCD_I2C_Display>
				break;
 8002648:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 800264a:	79bb      	ldrb	r3, [r7, #6]
 800264c:	2b23      	cmp	r3, #35	@ 0x23
 800264e:	d11f      	bne.n	8002690 <PASSWORD+0xc8>
		{
			buzzer(1);
 8002650:	2001      	movs	r0, #1
 8002652:	f000 fee7 	bl	8003424 <buzzer>
			exitmenu = Delaymenu;
 8002656:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <PASSWORD+0xdc>)
 8002658:	2214      	movs	r2, #20
 800265a:	701a      	strb	r2, [r3, #0]
			switch (status)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <PASSWORD+0xa0>
 8002662:	2b01      	cmp	r3, #1
 8002664:	d008      	beq.n	8002678 <PASSWORD+0xb0>
 8002666:	e00f      	b.n	8002688 <PASSWORD+0xc0>
			{
			case 0:
                change_password();
 8002668:	f000 fdea 	bl	8003240 <change_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 800266c:	4a11      	ldr	r2, [pc, #68]	@ (80026b4 <PASSWORD+0xec>)
 800266e:	490f      	ldr	r1, [pc, #60]	@ (80026ac <PASSWORD+0xe4>)
 8002670:	480f      	ldr	r0, [pc, #60]	@ (80026b0 <PASSWORD+0xe8>)
 8002672:	f7fd fecb 	bl	800040c <CLCD_I2C_Display>
                break;
 8002676:	e00b      	b.n	8002690 <PASSWORD+0xc8>
            case 1:
                set_default_password();
 8002678:	f000 fe44 	bl	8003304 <set_default_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 800267c:	4a0e      	ldr	r2, [pc, #56]	@ (80026b8 <PASSWORD+0xf0>)
 800267e:	490b      	ldr	r1, [pc, #44]	@ (80026ac <PASSWORD+0xe4>)
 8002680:	480b      	ldr	r0, [pc, #44]	@ (80026b0 <PASSWORD+0xe8>)
 8002682:	f7fd fec3 	bl	800040c <CLCD_I2C_Display>
                break;
 8002686:	e003      	b.n	8002690 <PASSWORD+0xc8>
            default:
                exitmenu = 0;
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <PASSWORD+0xdc>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
                break;
 800268e:	bf00      	nop
	while (exitmenu )
 8002690:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <PASSWORD+0xdc>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1a8      	bne.n	80025ea <PASSWORD+0x22>
            }
        }
    }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000020 	.word	0x20000020
 80026a8:	0800d66c 	.word	0x0800d66c
 80026ac:	0800d9b8 	.word	0x0800d9b8
 80026b0:	200003dc 	.word	0x200003dc
 80026b4:	0800d9cc 	.word	0x0800d9cc
 80026b8:	0800d9dc 	.word	0x0800d9dc
 80026bc:	0800d6b8 	.word	0x0800d6b8

080026c0 <CheckUID>:

uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	2208      	movs	r2, #8
 80026d0:	4619      	mov	r1, r3
 80026d2:	6838      	ldr	r0, [r7, #0]
 80026d4:	f7fe fb2b 	bl	8000d2e <Flash_Read_Array>
	if (arr[6] != 0xFF)
 80026d8:	7cbb      	ldrb	r3, [r7, #18]
 80026da:	2bff      	cmp	r3, #255	@ 0xff
 80026dc:	d001      	beq.n	80026e2 <CheckUID+0x22>
		return 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	e016      	b.n	8002710 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]
 80026e6:	e00f      	b.n	8002708 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	3318      	adds	r3, #24
 80026f4:	443b      	add	r3, r7
 80026f6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d001      	beq.n	8002702 <CheckUID+0x42>
			return 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	e006      	b.n	8002710 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002702:	7dfb      	ldrb	r3, [r7, #23]
 8002704:	3301      	adds	r3, #1
 8002706:	75fb      	strb	r3, [r7, #23]
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b04      	cmp	r3, #4
 800270c:	d9ec      	bls.n	80026e8 <CheckUID+0x28>
	}
	return 1;
 800270e:	2301      	movs	r3, #1
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <removeuid>:

void removeuid(uint32_t addressrm)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3306      	adds	r3, #6
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe faae 	bl	8000c88 <Flash_Write_2Byte>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <startadd>:
void startadd(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002738:	4a22      	ldr	r2, [pc, #136]	@ (80027c4 <startadd+0x90>)
 800273a:	4923      	ldr	r1, [pc, #140]	@ (80027c8 <startadd+0x94>)
 800273c:	4823      	ldr	r0, [pc, #140]	@ (80027cc <startadd+0x98>)
 800273e:	f7fd fe65 	bl	800040c <CLCD_I2C_Display>
	setaddress();
 8002742:	f000 f851 	bl	80027e8 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002746:	4822      	ldr	r0, [pc, #136]	@ (80027d0 <startadd+0x9c>)
 8002748:	f000 fee2 	bl	8003510 <TM_MFRC522_Check>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f9      	bne.n	8002746 <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 8002752:	481f      	ldr	r0, [pc, #124]	@ (80027d0 <startadd+0x9c>)
 8002754:	f7ff fb8e 	bl	8001e74 <CheckListUID>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <startadd+0x4a>
				{
					CardID[5] = 0x81;
 800275e:	4b1c      	ldr	r3, [pc, #112]	@ (80027d0 <startadd+0x9c>)
 8002760:	2281      	movs	r2, #129	@ 0x81
 8002762:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <startadd+0xa0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2206      	movs	r2, #6
 800276a:	4919      	ldr	r1, [pc, #100]	@ (80027d0 <startadd+0x9c>)
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe faa3 	bl	8000cb8 <Flash_Write_Array>
					AddressUID += 8;
 8002772:	4b18      	ldr	r3, [pc, #96]	@ (80027d4 <startadd+0xa0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3308      	adds	r3, #8
 8002778:	4a16      	ldr	r2, [pc, #88]	@ (80027d4 <startadd+0xa0>)
 800277a:	6013      	str	r3, [r2, #0]
					break;
 800277c:	e011      	b.n	80027a2 <startadd+0x6e>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 800277e:	4a16      	ldr	r2, [pc, #88]	@ (80027d8 <startadd+0xa4>)
 8002780:	4916      	ldr	r1, [pc, #88]	@ (80027dc <startadd+0xa8>)
 8002782:	4812      	ldr	r0, [pc, #72]	@ (80027cc <startadd+0x98>)
 8002784:	f7fd fe42 	bl	800040c <CLCD_I2C_Display>
					buzzer(5);
 8002788:	2005      	movs	r0, #5
 800278a:	f000 fe4b 	bl	8003424 <buzzer>
					HAL_Delay(1000);
 800278e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002792:	f001 fb55 	bl	8003e40 <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002796:	4a0b      	ldr	r2, [pc, #44]	@ (80027c4 <startadd+0x90>)
 8002798:	490b      	ldr	r1, [pc, #44]	@ (80027c8 <startadd+0x94>)
 800279a:	480c      	ldr	r0, [pc, #48]	@ (80027cc <startadd+0x98>)
 800279c:	f7fd fe36 	bl	800040c <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 80027a0:	e7d1      	b.n	8002746 <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 80027a2:	4a0f      	ldr	r2, [pc, #60]	@ (80027e0 <startadd+0xac>)
 80027a4:	490f      	ldr	r1, [pc, #60]	@ (80027e4 <startadd+0xb0>)
 80027a6:	4809      	ldr	r0, [pc, #36]	@ (80027cc <startadd+0x98>)
 80027a8:	f7fd fe30 	bl	800040c <CLCD_I2C_Display>
	buzzer(1);
 80027ac:	2001      	movs	r0, #1
 80027ae:	f000 fe39 	bl	8003424 <buzzer>
	HAL_Delay(1000);
 80027b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027b6:	f001 fb43 	bl	8003e40 <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 80027ba:	4804      	ldr	r0, [pc, #16]	@ (80027cc <startadd+0x98>)
 80027bc:	f7fd fe16 	bl	80003ec <CLCD_I2C_Clear>
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	0800d9ec 	.word	0x0800d9ec
 80027c8:	0800d80c 	.word	0x0800d80c
 80027cc:	200003dc 	.word	0x200003dc
 80027d0:	200003e8 	.word	0x200003e8
 80027d4:	20000024 	.word	0x20000024
 80027d8:	0800da00 	.word	0x0800da00
 80027dc:	0800da14 	.word	0x0800da14
 80027e0:	0800da24 	.word	0x0800da24
 80027e4:	0800da34 	.word	0x0800da34

080027e8 <setaddress>:
void setaddress(void){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 80027ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <setaddress+0x30>)
 80027f0:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80027f2:	e002      	b.n	80027fa <setaddress+0x12>
	{
		pt = pt + 8;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3308      	adds	r3, #8
 80027f8:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3305      	adds	r3, #5
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fa7d 	bl	8000cfe <Flash_Read_Byte>
 8002804:	4603      	mov	r3, r0
 8002806:	2bff      	cmp	r3, #255	@ 0xff
 8002808:	d1f4      	bne.n	80027f4 <setaddress+0xc>
	}
	AddressUID = pt;
 800280a:	4a04      	ldr	r2, [pc, #16]	@ (800281c <setaddress+0x34>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	0800f000 	.word	0x0800f000
 800281c:	20000024 	.word	0x20000024

08002820 <remoall>:

void remoall(){
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002826:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <remoall+0x34>)
 8002828:	607b      	str	r3, [r7, #4]
	Flash_Erase(pt);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fa10 	bl	8000c50 <Flash_Erase>
	set_default_password();
 8002830:	f000 fd68 	bl	8003304 <set_default_password>
	remove_all_finger();
 8002834:	f000 fc54 	bl	80030e0 <remove_all_finger>
	CLCD_I2C_Display(&LCD1, " REMOVE ALL CARD", "  SUCCESSFULLY");
 8002838:	4a07      	ldr	r2, [pc, #28]	@ (8002858 <remoall+0x38>)
 800283a:	4908      	ldr	r1, [pc, #32]	@ (800285c <remoall+0x3c>)
 800283c:	4808      	ldr	r0, [pc, #32]	@ (8002860 <remoall+0x40>)
 800283e:	f7fd fde5 	bl	800040c <CLCD_I2C_Display>
	HAL_Delay(1000);
 8002842:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002846:	f001 fafb 	bl	8003e40 <HAL_Delay>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	0800f000 	.word	0x0800f000
 8002858:	0800da44 	.word	0x0800da44
 800285c:	0800da54 	.word	0x0800da54
 8002860:	200003dc 	.word	0x200003dc

08002864 <addface>:

void addface(uint8_t key)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800286e:	2280      	movs	r2, #128	@ 0x80
 8002870:	2100      	movs	r1, #0
 8002872:	4825      	ldr	r0, [pc, #148]	@ (8002908 <addface+0xa4>)
 8002874:	f00a f9dc 	bl	800cc30 <memset>
    snprintf(Tx_Buffer, sizeof(Tx_Buffer), "Add.%d", key);
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	4a24      	ldr	r2, [pc, #144]	@ (800290c <addface+0xa8>)
 800287c:	210a      	movs	r1, #10
 800287e:	4824      	ldr	r0, [pc, #144]	@ (8002910 <addface+0xac>)
 8002880:	f00a f982 	bl	800cb88 <sniprintf>
    CDC_Transmit_FS(Tx_Buffer, strlen(Tx_Buffer));
 8002884:	4822      	ldr	r0, [pc, #136]	@ (8002910 <addface+0xac>)
 8002886:	f7fd fc6b 	bl	8000160 <strlen>
 800288a:	4603      	mov	r3, r0
 800288c:	4619      	mov	r1, r3
 800288e:	4820      	ldr	r0, [pc, #128]	@ (8002910 <addface+0xac>)
 8002890:	f009 fd14 	bl	800c2bc <CDC_Transmit_FS>
    CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002894:	4a1f      	ldr	r2, [pc, #124]	@ (8002914 <addface+0xb0>)
 8002896:	4920      	ldr	r1, [pc, #128]	@ (8002918 <addface+0xb4>)
 8002898:	4820      	ldr	r0, [pc, #128]	@ (800291c <addface+0xb8>)
 800289a:	f7fd fdb7 	bl	800040c <CLCD_I2C_Display>
    exitmenu = 60;
 800289e:	4b20      	ldr	r3, [pc, #128]	@ (8002920 <addface+0xbc>)
 80028a0:	223c      	movs	r2, #60	@ 0x3c
 80028a2:	701a      	strb	r2, [r3, #0]
    while(exitmenu != 0){
 80028a4:	e023      	b.n	80028ee <addface+0x8a>
        if(Rx_Buffer[0] == 'T'){
 80028a6:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <addface+0xa4>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	b25b      	sxtb	r3, r3
 80028ac:	2b54      	cmp	r3, #84	@ 0x54
 80028ae:	d10c      	bne.n	80028ca <addface+0x66>
            CLCD_I2C_Display(&LCD1, "   ADD FACEID", "   SUCCESSFUL");
 80028b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <addface+0xc0>)
 80028b2:	491d      	ldr	r1, [pc, #116]	@ (8002928 <addface+0xc4>)
 80028b4:	4819      	ldr	r0, [pc, #100]	@ (800291c <addface+0xb8>)
 80028b6:	f7fd fda9 	bl	800040c <CLCD_I2C_Display>
            buzzer(1);
 80028ba:	2001      	movs	r0, #1
 80028bc:	f000 fdb2 	bl	8003424 <buzzer>
            HAL_Delay(2000);
 80028c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80028c4:	f001 fabc 	bl	8003e40 <HAL_Delay>
            break;
 80028c8:	e015      	b.n	80028f6 <addface+0x92>
        }
        else if(Rx_Buffer[0] == 'F'){
 80028ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002908 <addface+0xa4>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b25b      	sxtb	r3, r3
 80028d0:	2b46      	cmp	r3, #70	@ 0x46
 80028d2:	d10c      	bne.n	80028ee <addface+0x8a>
            CLCD_I2C_Display(&LCD1, "ERROR: UNKNOWN", "");
 80028d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002914 <addface+0xb0>)
 80028d6:	4915      	ldr	r1, [pc, #84]	@ (800292c <addface+0xc8>)
 80028d8:	4810      	ldr	r0, [pc, #64]	@ (800291c <addface+0xb8>)
 80028da:	f7fd fd97 	bl	800040c <CLCD_I2C_Display>
            buzzer(5);
 80028de:	2005      	movs	r0, #5
 80028e0:	f000 fda0 	bl	8003424 <buzzer>
            HAL_Delay(2000);
 80028e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80028e8:	f001 faaa 	bl	8003e40 <HAL_Delay>
            break;
 80028ec:	e003      	b.n	80028f6 <addface+0x92>
    while(exitmenu != 0){
 80028ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <addface+0xbc>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1d7      	bne.n	80028a6 <addface+0x42>
        }
    }
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80028f6:	2280      	movs	r2, #128	@ 0x80
 80028f8:	2100      	movs	r1, #0
 80028fa:	4803      	ldr	r0, [pc, #12]	@ (8002908 <addface+0xa4>)
 80028fc:	f00a f998 	bl	800cc30 <memset>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000350 	.word	0x20000350
 800290c:	0800da68 	.word	0x0800da68
 8002910:	200003d0 	.word	0x200003d0
 8002914:	0800d5ec 	.word	0x0800d5ec
 8002918:	0800d958 	.word	0x0800d958
 800291c:	200003dc 	.word	0x200003dc
 8002920:	20000020 	.word	0x20000020
 8002924:	0800d858 	.word	0x0800d858
 8002928:	0800da70 	.word	0x0800da70
 800292c:	0800da80 	.word	0x0800da80

08002930 <removeface>:

void removeface(uint8_t key)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800293a:	2280      	movs	r2, #128	@ 0x80
 800293c:	2100      	movs	r1, #0
 800293e:	4825      	ldr	r0, [pc, #148]	@ (80029d4 <removeface+0xa4>)
 8002940:	f00a f976 	bl	800cc30 <memset>
    snprintf(Tx_Buffer, sizeof(Tx_Buffer), "Rem.%d", key);
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	4a24      	ldr	r2, [pc, #144]	@ (80029d8 <removeface+0xa8>)
 8002948:	210a      	movs	r1, #10
 800294a:	4824      	ldr	r0, [pc, #144]	@ (80029dc <removeface+0xac>)
 800294c:	f00a f91c 	bl	800cb88 <sniprintf>
    CDC_Transmit_FS(Tx_Buffer, strlen(Tx_Buffer));
 8002950:	4822      	ldr	r0, [pc, #136]	@ (80029dc <removeface+0xac>)
 8002952:	f7fd fc05 	bl	8000160 <strlen>
 8002956:	4603      	mov	r3, r0
 8002958:	4619      	mov	r1, r3
 800295a:	4820      	ldr	r0, [pc, #128]	@ (80029dc <removeface+0xac>)
 800295c:	f009 fcae 	bl	800c2bc <CDC_Transmit_FS>
    CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8002960:	4a1f      	ldr	r2, [pc, #124]	@ (80029e0 <removeface+0xb0>)
 8002962:	4920      	ldr	r1, [pc, #128]	@ (80029e4 <removeface+0xb4>)
 8002964:	4820      	ldr	r0, [pc, #128]	@ (80029e8 <removeface+0xb8>)
 8002966:	f7fd fd51 	bl	800040c <CLCD_I2C_Display>
    exitmenu = 60;
 800296a:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <removeface+0xbc>)
 800296c:	223c      	movs	r2, #60	@ 0x3c
 800296e:	701a      	strb	r2, [r3, #0]
    while(exitmenu != 0){
 8002970:	e023      	b.n	80029ba <removeface+0x8a>
        if(Rx_Buffer[0] == 'T'){
 8002972:	4b18      	ldr	r3, [pc, #96]	@ (80029d4 <removeface+0xa4>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b25b      	sxtb	r3, r3
 8002978:	2b54      	cmp	r3, #84	@ 0x54
 800297a:	d10c      	bne.n	8002996 <removeface+0x66>
            CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 800297c:	4a18      	ldr	r2, [pc, #96]	@ (80029e0 <removeface+0xb0>)
 800297e:	491c      	ldr	r1, [pc, #112]	@ (80029f0 <removeface+0xc0>)
 8002980:	4819      	ldr	r0, [pc, #100]	@ (80029e8 <removeface+0xb8>)
 8002982:	f7fd fd43 	bl	800040c <CLCD_I2C_Display>
            buzzer(1);
 8002986:	2001      	movs	r0, #1
 8002988:	f000 fd4c 	bl	8003424 <buzzer>
            HAL_Delay(2000);
 800298c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002990:	f001 fa56 	bl	8003e40 <HAL_Delay>
            break;
 8002994:	e015      	b.n	80029c2 <removeface+0x92>
        }
        else if(Rx_Buffer[0] == 'F'){
 8002996:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <removeface+0xa4>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	b25b      	sxtb	r3, r3
 800299c:	2b46      	cmp	r3, #70	@ 0x46
 800299e:	d10c      	bne.n	80029ba <removeface+0x8a>
            CLCD_I2C_Display(&LCD1, "ERROR: UNKOWN", "");
 80029a0:	4a0f      	ldr	r2, [pc, #60]	@ (80029e0 <removeface+0xb0>)
 80029a2:	4914      	ldr	r1, [pc, #80]	@ (80029f4 <removeface+0xc4>)
 80029a4:	4810      	ldr	r0, [pc, #64]	@ (80029e8 <removeface+0xb8>)
 80029a6:	f7fd fd31 	bl	800040c <CLCD_I2C_Display>
            buzzer(5);
 80029aa:	2005      	movs	r0, #5
 80029ac:	f000 fd3a 	bl	8003424 <buzzer>
            HAL_Delay(2000);
 80029b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80029b4:	f001 fa44 	bl	8003e40 <HAL_Delay>
            break;
 80029b8:	e003      	b.n	80029c2 <removeface+0x92>
    while(exitmenu != 0){
 80029ba:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <removeface+0xbc>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1d7      	bne.n	8002972 <removeface+0x42>
        }
    }
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80029c2:	2280      	movs	r2, #128	@ 0x80
 80029c4:	2100      	movs	r1, #0
 80029c6:	4803      	ldr	r0, [pc, #12]	@ (80029d4 <removeface+0xa4>)
 80029c8:	f00a f932 	bl	800cc30 <memset>
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000350 	.word	0x20000350
 80029d8:	0800da90 	.word	0x0800da90
 80029dc:	200003d0 	.word	0x200003d0
 80029e0:	0800d5ec 	.word	0x0800d5ec
 80029e4:	0800d958 	.word	0x0800d958
 80029e8:	200003dc 	.word	0x200003dc
 80029ec:	20000020 	.word	0x20000020
 80029f0:	0800da98 	.word	0x0800da98
 80029f4:	0800daa8 	.word	0x0800daa8

080029f8 <checkfaceid>:

uint8_t checkfaceid(uint8_t key){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002a02:	2280      	movs	r2, #128	@ 0x80
 8002a04:	2100      	movs	r1, #0
 8002a06:	481a      	ldr	r0, [pc, #104]	@ (8002a70 <checkfaceid+0x78>)
 8002a08:	f00a f912 	bl	800cc30 <memset>
    snprintf(Tx_Buffer, sizeof(Tx_Buffer), "Che.%d", key);
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	4a19      	ldr	r2, [pc, #100]	@ (8002a74 <checkfaceid+0x7c>)
 8002a10:	210a      	movs	r1, #10
 8002a12:	4819      	ldr	r0, [pc, #100]	@ (8002a78 <checkfaceid+0x80>)
 8002a14:	f00a f8b8 	bl	800cb88 <sniprintf>
    CDC_Transmit_FS(Tx_Buffer, strlen(Tx_Buffer));
 8002a18:	4817      	ldr	r0, [pc, #92]	@ (8002a78 <checkfaceid+0x80>)
 8002a1a:	f7fd fba1 	bl	8000160 <strlen>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4619      	mov	r1, r3
 8002a22:	4815      	ldr	r0, [pc, #84]	@ (8002a78 <checkfaceid+0x80>)
 8002a24:	f009 fc4a 	bl	800c2bc <CDC_Transmit_FS>
    while(Rx_Buffer[0] == 0){
 8002a28:	e000      	b.n	8002a2c <checkfaceid+0x34>
        continue;
 8002a2a:	bf00      	nop
    while(Rx_Buffer[0] == 0){
 8002a2c:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <checkfaceid+0x78>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f9      	beq.n	8002a2a <checkfaceid+0x32>
    }
    HAL_Delay(1000);
 8002a36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a3a:	f001 fa01 	bl	8003e40 <HAL_Delay>
    if(Rx_Buffer[0] == 'T'){
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <checkfaceid+0x78>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b25b      	sxtb	r3, r3
 8002a44:	2b54      	cmp	r3, #84	@ 0x54
 8002a46:	d101      	bne.n	8002a4c <checkfaceid+0x54>
        return key;
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	e00c      	b.n	8002a66 <checkfaceid+0x6e>
    } else if(Rx_Buffer[0] == 'F'){
 8002a4c:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <checkfaceid+0x78>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	2b46      	cmp	r3, #70	@ 0x46
 8002a54:	d101      	bne.n	8002a5a <checkfaceid+0x62>
        return 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e005      	b.n	8002a66 <checkfaceid+0x6e>
    }
    memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002a5a:	2280      	movs	r2, #128	@ 0x80
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4804      	ldr	r0, [pc, #16]	@ (8002a70 <checkfaceid+0x78>)
 8002a60:	f00a f8e6 	bl	800cc30 <memset>
    return 0;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000350 	.word	0x20000350
 8002a74:	0800dab8 	.word	0x0800dab8
 8002a78:	200003d0 	.word	0x200003d0

08002a7c <add_finger>:
//---------- them van tay---------------
void add_finger()
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
    ID = InputID_FINGER();
 8002a82:	f7fe fa8b 	bl	8000f9c <InputID_FINGER>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4bab      	ldr	r3, [pc, #684]	@ (8002d38 <add_finger+0x2bc>)
 8002a8c:	801a      	strh	r2, [r3, #0]
    uint32_t start_time_finger = HAL_GetTick();
 8002a8e:	f001 f9cd 	bl	8003e2c <HAL_GetTick>
 8002a92:	6078      	str	r0, [r7, #4]
    while (1)
    {
        if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8002a94:	f001 f9ca 	bl	8003e2c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d90c      	bls.n	8002ac0 <add_finger+0x44>
        {
            CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002aa6:	4aa5      	ldr	r2, [pc, #660]	@ (8002d3c <add_finger+0x2c0>)
 8002aa8:	49a5      	ldr	r1, [pc, #660]	@ (8002d40 <add_finger+0x2c4>)
 8002aaa:	48a6      	ldr	r0, [pc, #664]	@ (8002d44 <add_finger+0x2c8>)
 8002aac:	f7fd fcae 	bl	800040c <CLCD_I2C_Display>
            buzzer(5);
 8002ab0:	2005      	movs	r0, #5
 8002ab2:	f000 fcb7 	bl	8003424 <buzzer>
            HAL_Delay(2000);
 8002ab6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002aba:	f001 f9c1 	bl	8003e40 <HAL_Delay>
            return;
 8002abe:	e1b5      	b.n	8002e2c <add_finger+0x3b0>
        }

        collect_finger();
 8002ac0:	f7fd ff1e 	bl	8000900 <collect_finger>
        CLCD_I2C_Display(&LCD1, "Add Finger Print", "Put your finger!!     ");
 8002ac4:	4aa0      	ldr	r2, [pc, #640]	@ (8002d48 <add_finger+0x2cc>)
 8002ac6:	49a1      	ldr	r1, [pc, #644]	@ (8002d4c <add_finger+0x2d0>)
 8002ac8:	489e      	ldr	r0, [pc, #632]	@ (8002d44 <add_finger+0x2c8>)
 8002aca:	f7fd fc9f 	bl	800040c <CLCD_I2C_Display>
        HAL_Delay(1000);
 8002ace:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ad2:	f001 f9b5 	bl	8003e40 <HAL_Delay>

        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2100      	movs	r1, #0
 8002ada:	489a      	ldr	r0, [pc, #616]	@ (8002d44 <add_finger+0x2c8>)
 8002adc:	f7fd fc1c 	bl	8000318 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8002ae0:	499b      	ldr	r1, [pc, #620]	@ (8002d50 <add_finger+0x2d4>)
 8002ae2:	4898      	ldr	r0, [pc, #608]	@ (8002d44 <add_finger+0x2c8>)
 8002ae4:	f7fd fc6b 	bl	80003be <CLCD_I2C_WriteString>
        tmp=0xff;
 8002ae8:	4b9a      	ldr	r3, [pc, #616]	@ (8002d54 <add_finger+0x2d8>)
 8002aea:	22ff      	movs	r2, #255	@ 0xff
 8002aec:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8002aee:	e021      	b.n	8002b34 <add_finger+0xb8>
            collect_finger();
 8002af0:	f7fd ff06 	bl	8000900 <collect_finger>
            collect_finger();
 8002af4:	f7fd ff04 	bl	8000900 <collect_finger>
            tmp= collect_finger();
 8002af8:	f7fd ff02 	bl	8000900 <collect_finger>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4a95      	ldr	r2, [pc, #596]	@ (8002d54 <add_finger+0x2d8>)
 8002b00:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8002b02:	f001 f993 	bl	8003e2c <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d90f      	bls.n	8002b34 <add_finger+0xb8>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002b14:	4a89      	ldr	r2, [pc, #548]	@ (8002d3c <add_finger+0x2c0>)
 8002b16:	498a      	ldr	r1, [pc, #552]	@ (8002d40 <add_finger+0x2c4>)
 8002b18:	488a      	ldr	r0, [pc, #552]	@ (8002d44 <add_finger+0x2c8>)
 8002b1a:	f7fd fc77 	bl	800040c <CLCD_I2C_Display>
                buzzer(5);
 8002b1e:	2005      	movs	r0, #5
 8002b20:	f000 fc80 	bl	8003424 <buzzer>
                HAL_Delay(2000);
 8002b24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b28:	f001 f98a 	bl	8003e40 <HAL_Delay>
                exitmenu = Delaymenu;
 8002b2c:	4b8a      	ldr	r3, [pc, #552]	@ (8002d58 <add_finger+0x2dc>)
 8002b2e:	2214      	movs	r2, #20
 8002b30:	701a      	strb	r2, [r3, #0]
                return;
 8002b32:	e17b      	b.n	8002e2c <add_finger+0x3b0>
        while(tmp!=0x00){
 8002b34:	4b87      	ldr	r3, [pc, #540]	@ (8002d54 <add_finger+0x2d8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1d9      	bne.n	8002af0 <add_finger+0x74>
            }
        }
        tmp=0xff;
 8002b3c:	4b85      	ldr	r3, [pc, #532]	@ (8002d54 <add_finger+0x2d8>)
 8002b3e:	22ff      	movs	r2, #255	@ 0xff
 8002b40:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002b42:	2201      	movs	r2, #1
 8002b44:	2100      	movs	r1, #0
 8002b46:	487f      	ldr	r0, [pc, #508]	@ (8002d44 <add_finger+0x2c8>)
 8002b48:	f7fd fbe6 	bl	8000318 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8002b4c:	4983      	ldr	r1, [pc, #524]	@ (8002d5c <add_finger+0x2e0>)
 8002b4e:	487d      	ldr	r0, [pc, #500]	@ (8002d44 <add_finger+0x2c8>)
 8002b50:	f7fd fc35 	bl	80003be <CLCD_I2C_WriteString>
 8002b54:	2064      	movs	r0, #100	@ 0x64
 8002b56:	f001 f973 	bl	8003e40 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4879      	ldr	r0, [pc, #484]	@ (8002d44 <add_finger+0x2c8>)
 8002b60:	f7fd fbda 	bl	8000318 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8002b64:	497e      	ldr	r1, [pc, #504]	@ (8002d60 <add_finger+0x2e4>)
 8002b66:	4877      	ldr	r0, [pc, #476]	@ (8002d44 <add_finger+0x2c8>)
 8002b68:	f7fd fc29 	bl	80003be <CLCD_I2C_WriteString>
        tmp=0xff;
 8002b6c:	4b79      	ldr	r3, [pc, #484]	@ (8002d54 <add_finger+0x2d8>)
 8002b6e:	22ff      	movs	r2, #255	@ 0xff
 8002b70:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)    {
 8002b72:	e01e      	b.n	8002bb2 <add_finger+0x136>
            tmp=img2tz(0x01);
 8002b74:	2001      	movs	r0, #1
 8002b76:	f7fd feef 	bl	8000958 <img2tz>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4a75      	ldr	r2, [pc, #468]	@ (8002d54 <add_finger+0x2d8>)
 8002b7e:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8002b80:	f001 f954 	bl	8003e2c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d90f      	bls.n	8002bb2 <add_finger+0x136>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002b92:	4a6a      	ldr	r2, [pc, #424]	@ (8002d3c <add_finger+0x2c0>)
 8002b94:	496a      	ldr	r1, [pc, #424]	@ (8002d40 <add_finger+0x2c4>)
 8002b96:	486b      	ldr	r0, [pc, #428]	@ (8002d44 <add_finger+0x2c8>)
 8002b98:	f7fd fc38 	bl	800040c <CLCD_I2C_Display>
                buzzer(5);
 8002b9c:	2005      	movs	r0, #5
 8002b9e:	f000 fc41 	bl	8003424 <buzzer>
                HAL_Delay(2000);
 8002ba2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ba6:	f001 f94b 	bl	8003e40 <HAL_Delay>
                exitmenu = Delaymenu;
 8002baa:	4b6b      	ldr	r3, [pc, #428]	@ (8002d58 <add_finger+0x2dc>)
 8002bac:	2214      	movs	r2, #20
 8002bae:	701a      	strb	r2, [r3, #0]
                return;
 8002bb0:	e13c      	b.n	8002e2c <add_finger+0x3b0>
        while(tmp!=0x00)    {
 8002bb2:	4b68      	ldr	r3, [pc, #416]	@ (8002d54 <add_finger+0x2d8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1dc      	bne.n	8002b74 <add_finger+0xf8>
            }
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4861      	ldr	r0, [pc, #388]	@ (8002d44 <add_finger+0x2c8>)
 8002bc0:	f7fd fbaa 	bl	8000318 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"put finger again");HAL_Delay(100);
 8002bc4:	4967      	ldr	r1, [pc, #412]	@ (8002d64 <add_finger+0x2e8>)
 8002bc6:	485f      	ldr	r0, [pc, #380]	@ (8002d44 <add_finger+0x2c8>)
 8002bc8:	f7fd fbf9 	bl	80003be <CLCD_I2C_WriteString>
 8002bcc:	2064      	movs	r0, #100	@ 0x64
 8002bce:	f001 f937 	bl	8003e40 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	485b      	ldr	r0, [pc, #364]	@ (8002d44 <add_finger+0x2c8>)
 8002bd8:	f7fd fb9e 	bl	8000318 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 8002bdc:	495c      	ldr	r1, [pc, #368]	@ (8002d50 <add_finger+0x2d4>)
 8002bde:	4859      	ldr	r0, [pc, #356]	@ (8002d44 <add_finger+0x2c8>)
 8002be0:	f7fd fbed 	bl	80003be <CLCD_I2C_WriteString>
        tmp=0xff;
 8002be4:	4b5b      	ldr	r3, [pc, #364]	@ (8002d54 <add_finger+0x2d8>)
 8002be6:	22ff      	movs	r2, #255	@ 0xff
 8002be8:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)    {
 8002bea:	e021      	b.n	8002c30 <add_finger+0x1b4>
            collect_finger();
 8002bec:	f7fd fe88 	bl	8000900 <collect_finger>
            collect_finger();
 8002bf0:	f7fd fe86 	bl	8000900 <collect_finger>
            tmp=collect_finger();
 8002bf4:	f7fd fe84 	bl	8000900 <collect_finger>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4a56      	ldr	r2, [pc, #344]	@ (8002d54 <add_finger+0x2d8>)
 8002bfc:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8002bfe:	f001 f915 	bl	8003e2c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d90f      	bls.n	8002c30 <add_finger+0x1b4>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002c10:	4a4a      	ldr	r2, [pc, #296]	@ (8002d3c <add_finger+0x2c0>)
 8002c12:	494b      	ldr	r1, [pc, #300]	@ (8002d40 <add_finger+0x2c4>)
 8002c14:	484b      	ldr	r0, [pc, #300]	@ (8002d44 <add_finger+0x2c8>)
 8002c16:	f7fd fbf9 	bl	800040c <CLCD_I2C_Display>
                buzzer(5);
 8002c1a:	2005      	movs	r0, #5
 8002c1c:	f000 fc02 	bl	8003424 <buzzer>
                HAL_Delay(2000);
 8002c20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c24:	f001 f90c 	bl	8003e40 <HAL_Delay>
                exitmenu = Delaymenu;
 8002c28:	4b4b      	ldr	r3, [pc, #300]	@ (8002d58 <add_finger+0x2dc>)
 8002c2a:	2214      	movs	r2, #20
 8002c2c:	701a      	strb	r2, [r3, #0]
                return;
 8002c2e:	e0fd      	b.n	8002e2c <add_finger+0x3b0>
        while(tmp!=0x00)    {
 8002c30:	4b48      	ldr	r3, [pc, #288]	@ (8002d54 <add_finger+0x2d8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1d9      	bne.n	8002bec <add_finger+0x170>
            }
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002c38:	2201      	movs	r2, #1
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4841      	ldr	r0, [pc, #260]	@ (8002d44 <add_finger+0x2c8>)
 8002c3e:	f7fd fb6b 	bl	8000318 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8002c42:	4946      	ldr	r1, [pc, #280]	@ (8002d5c <add_finger+0x2e0>)
 8002c44:	483f      	ldr	r0, [pc, #252]	@ (8002d44 <add_finger+0x2c8>)
 8002c46:	f7fd fbba 	bl	80003be <CLCD_I2C_WriteString>
 8002c4a:	2064      	movs	r0, #100	@ 0x64
 8002c4c:	f001 f8f8 	bl	8003e40 <HAL_Delay>
        tmp=0xff;
 8002c50:	4b40      	ldr	r3, [pc, #256]	@ (8002d54 <add_finger+0x2d8>)
 8002c52:	22ff      	movs	r2, #255	@ 0xff
 8002c54:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002c56:	2201      	movs	r2, #1
 8002c58:	2100      	movs	r1, #0
 8002c5a:	483a      	ldr	r0, [pc, #232]	@ (8002d44 <add_finger+0x2c8>)
 8002c5c:	f7fd fb5c 	bl	8000318 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8002c60:	493f      	ldr	r1, [pc, #252]	@ (8002d60 <add_finger+0x2e4>)
 8002c62:	4838      	ldr	r0, [pc, #224]	@ (8002d44 <add_finger+0x2c8>)
 8002c64:	f7fd fbab 	bl	80003be <CLCD_I2C_WriteString>
        while(tmp!=0x00)    {
 8002c68:	e01e      	b.n	8002ca8 <add_finger+0x22c>
            tmp=img2tz(0x02);
 8002c6a:	2002      	movs	r0, #2
 8002c6c:	f7fd fe74 	bl	8000958 <img2tz>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4a38      	ldr	r2, [pc, #224]	@ (8002d54 <add_finger+0x2d8>)
 8002c74:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8002c76:	f001 f8d9 	bl	8003e2c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d90f      	bls.n	8002ca8 <add_finger+0x22c>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002c88:	4a2c      	ldr	r2, [pc, #176]	@ (8002d3c <add_finger+0x2c0>)
 8002c8a:	492d      	ldr	r1, [pc, #180]	@ (8002d40 <add_finger+0x2c4>)
 8002c8c:	482d      	ldr	r0, [pc, #180]	@ (8002d44 <add_finger+0x2c8>)
 8002c8e:	f7fd fbbd 	bl	800040c <CLCD_I2C_Display>
                buzzer(5);
 8002c92:	2005      	movs	r0, #5
 8002c94:	f000 fbc6 	bl	8003424 <buzzer>
                HAL_Delay(2000);
 8002c98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c9c:	f001 f8d0 	bl	8003e40 <HAL_Delay>
                exitmenu = Delaymenu;
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d58 <add_finger+0x2dc>)
 8002ca2:	2214      	movs	r2, #20
 8002ca4:	701a      	strb	r2, [r3, #0]
                return;
 8002ca6:	e0c1      	b.n	8002e2c <add_finger+0x3b0>
        while(tmp!=0x00)    {
 8002ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d54 <add_finger+0x2d8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1dc      	bne.n	8002c6a <add_finger+0x1ee>
            }
        }
        tmp=0xff;
 8002cb0:	4b28      	ldr	r3, [pc, #160]	@ (8002d54 <add_finger+0x2d8>)
 8002cb2:	22ff      	movs	r2, #255	@ 0xff
 8002cb4:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)
 8002cb6:	e036      	b.n	8002d26 <add_finger+0x2aa>
        {
            tmp=match();
 8002cb8:	f7fd fe8a 	bl	80009d0 <match>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4a25      	ldr	r2, [pc, #148]	@ (8002d54 <add_finger+0x2d8>)
 8002cc0:	6013      	str	r3, [r2, #0]
            if (tmp==0x08 || tmp==0x01)
 8002cc2:	4b24      	ldr	r3, [pc, #144]	@ (8002d54 <add_finger+0x2d8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d003      	beq.n	8002cd2 <add_finger+0x256>
 8002cca:	4b22      	ldr	r3, [pc, #136]	@ (8002d54 <add_finger+0x2d8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d110      	bne.n	8002cf4 <add_finger+0x278>
            {
                CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	481b      	ldr	r0, [pc, #108]	@ (8002d44 <add_finger+0x2c8>)
 8002cd8:	f7fd fb1e 	bl	8000318 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1," ER: try again!");buzzer(5);HAL_Delay(1500);
 8002cdc:	4922      	ldr	r1, [pc, #136]	@ (8002d68 <add_finger+0x2ec>)
 8002cde:	4819      	ldr	r0, [pc, #100]	@ (8002d44 <add_finger+0x2c8>)
 8002ce0:	f7fd fb6d 	bl	80003be <CLCD_I2C_WriteString>
 8002ce4:	2005      	movs	r0, #5
 8002ce6:	f000 fb9d 	bl	8003424 <buzzer>
 8002cea:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002cee:	f001 f8a7 	bl	8003e40 <HAL_Delay>
                return;
 8002cf2:	e09b      	b.n	8002e2c <add_finger+0x3b0>
            }
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8002cf4:	f001 f89a 	bl	8003e2c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d90f      	bls.n	8002d26 <add_finger+0x2aa>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002d06:	4a0d      	ldr	r2, [pc, #52]	@ (8002d3c <add_finger+0x2c0>)
 8002d08:	490d      	ldr	r1, [pc, #52]	@ (8002d40 <add_finger+0x2c4>)
 8002d0a:	480e      	ldr	r0, [pc, #56]	@ (8002d44 <add_finger+0x2c8>)
 8002d0c:	f7fd fb7e 	bl	800040c <CLCD_I2C_Display>
                buzzer(5);
 8002d10:	2005      	movs	r0, #5
 8002d12:	f000 fb87 	bl	8003424 <buzzer>
                HAL_Delay(2000);
 8002d16:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d1a:	f001 f891 	bl	8003e40 <HAL_Delay>
                exitmenu = Delaymenu;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d58 <add_finger+0x2dc>)
 8002d20:	2214      	movs	r2, #20
 8002d22:	701a      	strb	r2, [r3, #0]
                return;
 8002d24:	e082      	b.n	8002e2c <add_finger+0x3b0>
        while(tmp!=0x00)
 8002d26:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <add_finger+0x2d8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1c4      	bne.n	8002cb8 <add_finger+0x23c>
            }
        }
        tmp=0xff;
 8002d2e:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <add_finger+0x2d8>)
 8002d30:	22ff      	movs	r2, #255	@ 0xff
 8002d32:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8002d34:	e038      	b.n	8002da8 <add_finger+0x32c>
 8002d36:	bf00      	nop
 8002d38:	2000040c 	.word	0x2000040c
 8002d3c:	0800d584 	.word	0x0800d584
 8002d40:	0800d590 	.word	0x0800d590
 8002d44:	200003dc 	.word	0x200003dc
 8002d48:	0800dac0 	.word	0x0800dac0
 8002d4c:	0800dad8 	.word	0x0800dad8
 8002d50:	0800daec 	.word	0x0800daec
 8002d54:	20000408 	.word	0x20000408
 8002d58:	20000020 	.word	0x20000020
 8002d5c:	0800db08 	.word	0x0800db08
 8002d60:	0800db1c 	.word	0x0800db1c
 8002d64:	0800db34 	.word	0x0800db34
 8002d68:	0800db48 	.word	0x0800db48
            tmp=regmodel();
 8002d6c:	f7fd fe5c 	bl	8000a28 <regmodel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4a30      	ldr	r2, [pc, #192]	@ (8002e34 <add_finger+0x3b8>)
 8002d74:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8002d76:	f001 f859 	bl	8003e2c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d90f      	bls.n	8002da8 <add_finger+0x32c>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002d88:	4a2b      	ldr	r2, [pc, #172]	@ (8002e38 <add_finger+0x3bc>)
 8002d8a:	492c      	ldr	r1, [pc, #176]	@ (8002e3c <add_finger+0x3c0>)
 8002d8c:	482c      	ldr	r0, [pc, #176]	@ (8002e40 <add_finger+0x3c4>)
 8002d8e:	f7fd fb3d 	bl	800040c <CLCD_I2C_Display>
                buzzer(5);
 8002d92:	2005      	movs	r0, #5
 8002d94:	f000 fb46 	bl	8003424 <buzzer>
                HAL_Delay(2000);
 8002d98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d9c:	f001 f850 	bl	8003e40 <HAL_Delay>
                exitmenu = Delaymenu;
 8002da0:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <add_finger+0x3c8>)
 8002da2:	2214      	movs	r2, #20
 8002da4:	701a      	strb	r2, [r3, #0]
                return;
 8002da6:	e041      	b.n	8002e2c <add_finger+0x3b0>
        while(tmp!=0x00){
 8002da8:	4b22      	ldr	r3, [pc, #136]	@ (8002e34 <add_finger+0x3b8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1dd      	bne.n	8002d6c <add_finger+0x2f0>
            }
        }
        tmp=0xff;
 8002db0:	4b20      	ldr	r3, [pc, #128]	@ (8002e34 <add_finger+0x3b8>)
 8002db2:	22ff      	movs	r2, #255	@ 0xff
 8002db4:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8002db6:	e021      	b.n	8002dfc <add_finger+0x380>
            tmp=store(ID);
 8002db8:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <add_finger+0x3cc>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fe5e 	bl	8000a80 <store>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e34 <add_finger+0x3b8>)
 8002dc8:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - start_time_finger > 15000) // 15 seconds timeout
 8002dca:	f001 f82f 	bl	8003e2c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d90f      	bls.n	8002dfc <add_finger+0x380>
            {
                CLCD_I2C_Display(&LCD1, "TIMEOUT", "Try again");
 8002ddc:	4a16      	ldr	r2, [pc, #88]	@ (8002e38 <add_finger+0x3bc>)
 8002dde:	4917      	ldr	r1, [pc, #92]	@ (8002e3c <add_finger+0x3c0>)
 8002de0:	4817      	ldr	r0, [pc, #92]	@ (8002e40 <add_finger+0x3c4>)
 8002de2:	f7fd fb13 	bl	800040c <CLCD_I2C_Display>
                buzzer(5);
 8002de6:	2005      	movs	r0, #5
 8002de8:	f000 fb1c 	bl	8003424 <buzzer>
                HAL_Delay(2000);
 8002dec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002df0:	f001 f826 	bl	8003e40 <HAL_Delay>
                exitmenu = Delaymenu;
 8002df4:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <add_finger+0x3c8>)
 8002df6:	2214      	movs	r2, #20
 8002df8:	701a      	strb	r2, [r3, #0]
                return;
 8002dfa:	e017      	b.n	8002e2c <add_finger+0x3b0>
        while(tmp!=0x00){
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8002e34 <add_finger+0x3b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1d9      	bne.n	8002db8 <add_finger+0x33c>
            }
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002e04:	2201      	movs	r2, #1
 8002e06:	2100      	movs	r1, #0
 8002e08:	480d      	ldr	r0, [pc, #52]	@ (8002e40 <add_finger+0x3c4>)
 8002e0a:	f7fd fa85 	bl	8000318 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 8002e0e:	490f      	ldr	r1, [pc, #60]	@ (8002e4c <add_finger+0x3d0>)
 8002e10:	480b      	ldr	r0, [pc, #44]	@ (8002e40 <add_finger+0x3c4>)
 8002e12:	f7fd fad4 	bl	80003be <CLCD_I2C_WriteString>
        buzzer(1);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f000 fb04 	bl	8003424 <buzzer>
        HAL_Delay(1500);
 8002e1c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002e20:	f001 f80e 	bl	8003e40 <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 8002e24:	4806      	ldr	r0, [pc, #24]	@ (8002e40 <add_finger+0x3c4>)
 8002e26:	f7fd fae1 	bl	80003ec <CLCD_I2C_Clear>
        break;
 8002e2a:	bf00      	nop
    }
}
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000408 	.word	0x20000408
 8002e38:	0800d584 	.word	0x0800d584
 8002e3c:	0800d590 	.word	0x0800d590
 8002e40:	200003dc 	.word	0x200003dc
 8002e44:	20000020 	.word	0x20000020
 8002e48:	2000040c 	.word	0x2000040c
 8002e4c:	0800db58 	.word	0x0800db58

08002e50 <read_finger>:
//----------end them van tay---------------
void read_finger()
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 8002e54:	4b3a      	ldr	r3, [pc, #232]	@ (8002f40 <read_finger+0xf0>)
 8002e56:	22ff      	movs	r2, #255	@ 0xff
 8002e58:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 8002e5a:	f000 ffe7 	bl	8003e2c <HAL_GetTick>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4a38      	ldr	r2, [pc, #224]	@ (8002f44 <read_finger+0xf4>)
 8002e62:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 8002e64:	e013      	b.n	8002e8e <read_finger+0x3e>
		tmp=collect_finger();
 8002e66:	f7fd fd4b 	bl	8000900 <collect_finger>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4a34      	ldr	r2, [pc, #208]	@ (8002f40 <read_finger+0xf0>)
 8002e6e:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 8002e70:	f000 ffdc 	bl	8003e2c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b33      	ldr	r3, [pc, #204]	@ (8002f44 <read_finger+0xf4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002e80:	d305      	bcc.n	8002e8e <read_finger+0x3e>
		time_cho=HAL_GetTick();
 8002e82:	f000 ffd3 	bl	8003e2c <HAL_GetTick>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a2e      	ldr	r2, [pc, #184]	@ (8002f44 <read_finger+0xf4>)
 8002e8a:	6013      	str	r3, [r2, #0]
		return;}
 8002e8c:	e056      	b.n	8002f3c <read_finger+0xec>
	while(tmp!=0x00){
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f40 <read_finger+0xf0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e7      	bne.n	8002e66 <read_finger+0x16>

	}
	tmp=0xff;
 8002e96:	4b2a      	ldr	r3, [pc, #168]	@ (8002f40 <read_finger+0xf0>)
 8002e98:	22ff      	movs	r2, #255	@ 0xff
 8002e9a:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 8002e9c:	4b28      	ldr	r3, [pc, #160]	@ (8002f40 <read_finger+0xf0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <read_finger+0x60>
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f7fd fd57 	bl	8000958 <img2tz>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4a24      	ldr	r2, [pc, #144]	@ (8002f40 <read_finger+0xf0>)
 8002eae:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 8002eb0:	4b23      	ldr	r3, [pc, #140]	@ (8002f40 <read_finger+0xf0>)
 8002eb2:	22ff      	movs	r2, #255	@ 0xff
 8002eb4:	601a      	str	r2, [r3, #0]
	tmp=search();
 8002eb6:	f7fd fe22 	bl	8000afe <search>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4a20      	ldr	r2, [pc, #128]	@ (8002f40 <read_finger+0xf0>)
 8002ebe:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <read_finger+0xf0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d117      	bne.n	8002ef8 <read_finger+0xa8>
	{
		tmp=0xff;	// co van tay
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <read_finger+0xf0>)
 8002eca:	22ff      	movs	r2, #255	@ 0xff
 8002ecc:	601a      	str	r2, [r3, #0]
		CLCD_I2C_Display(&LCD1, "    WELCOME", " Finger");
 8002ece:	4a1e      	ldr	r2, [pc, #120]	@ (8002f48 <read_finger+0xf8>)
 8002ed0:	491e      	ldr	r1, [pc, #120]	@ (8002f4c <read_finger+0xfc>)
 8002ed2:	481f      	ldr	r0, [pc, #124]	@ (8002f50 <read_finger+0x100>)
 8002ed4:	f7fd fa9a 	bl	800040c <CLCD_I2C_Display>
		sprintf(mess,"-ID = %d  ", pID); // Use %d for integer
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f54 <read_finger+0x104>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	491e      	ldr	r1, [pc, #120]	@ (8002f58 <read_finger+0x108>)
 8002ee0:	481e      	ldr	r0, [pc, #120]	@ (8002f5c <read_finger+0x10c>)
 8002ee2:	f009 fe85 	bl	800cbf0 <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 8002ee6:	491d      	ldr	r1, [pc, #116]	@ (8002f5c <read_finger+0x10c>)
 8002ee8:	4819      	ldr	r0, [pc, #100]	@ (8002f50 <read_finger+0x100>)
 8002eea:	f7fd fa68 	bl	80003be <CLCD_I2C_WriteString>
		opendoor();
 8002eee:	f000 fa49 	bl	8003384 <opendoor>
		CLCD_I2C_Clear(&LCD1);
 8002ef2:	4817      	ldr	r0, [pc, #92]	@ (8002f50 <read_finger+0x100>)
 8002ef4:	f7fd fa7a 	bl	80003ec <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 8002ef8:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <read_finger+0xf0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b09      	cmp	r3, #9
 8002efe:	d11d      	bne.n	8002f3c <read_finger+0xec>
	{
		tmp=0xff;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	@ (8002f40 <read_finger+0xf0>)
 8002f02:	22ff      	movs	r2, #255	@ 0xff
 8002f04:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002f06:	2201      	movs	r2, #1
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4811      	ldr	r0, [pc, #68]	@ (8002f50 <read_finger+0x100>)
 8002f0c:	f7fd fa04 	bl	8000318 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"Wrong Fingerprint"); buzzer(5);HAL_Delay(1000);
 8002f10:	4913      	ldr	r1, [pc, #76]	@ (8002f60 <read_finger+0x110>)
 8002f12:	480f      	ldr	r0, [pc, #60]	@ (8002f50 <read_finger+0x100>)
 8002f14:	f7fd fa53 	bl	80003be <CLCD_I2C_WriteString>
 8002f18:	2005      	movs	r0, #5
 8002f1a:	f000 fa83 	bl	8003424 <buzzer>
 8002f1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f22:	f000 ff8d 	bl	8003e40 <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 8002f26:	490d      	ldr	r1, [pc, #52]	@ (8002f5c <read_finger+0x10c>)
 8002f28:	4809      	ldr	r0, [pc, #36]	@ (8002f50 <read_finger+0x100>)
 8002f2a:	f7fd fa48 	bl	80003be <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 8002f2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f32:	f000 ff85 	bl	8003e40 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8002f36:	4806      	ldr	r0, [pc, #24]	@ (8002f50 <read_finger+0x100>)
 8002f38:	f7fd fa58 	bl	80003ec <CLCD_I2C_Clear>
	}
}
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000408 	.word	0x20000408
 8002f44:	200003f8 	.word	0x200003f8
 8002f48:	0800db6c 	.word	0x0800db6c
 8002f4c:	0800d600 	.word	0x0800d600
 8002f50:	200003dc 	.word	0x200003dc
 8002f54:	20000218 	.word	0x20000218
 8002f58:	0800db74 	.word	0x0800db74
 8002f5c:	200003fc 	.word	0x200003fc
 8002f60:	0800db80 	.word	0x0800db80

08002f64 <remove_id_finger>:
void remove_id_finger()
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
    uint16_t id = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	83bb      	strh	r3, [r7, #28]
    char id_str[4] = {0};
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
    uint8_t index = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	77fb      	strb	r3, [r7, #31]
    CLCD_I2C_Display(&LCD1, "Enter ID to remove:", "ID= ");
 8002f76:	4a4e      	ldr	r2, [pc, #312]	@ (80030b0 <remove_id_finger+0x14c>)
 8002f78:	494e      	ldr	r1, [pc, #312]	@ (80030b4 <remove_id_finger+0x150>)
 8002f7a:	484f      	ldr	r0, [pc, #316]	@ (80030b8 <remove_id_finger+0x154>)
 8002f7c:	f7fd fa46 	bl	800040c <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 8002f80:	200a      	movs	r0, #10
 8002f82:	f7fd fb9d 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 8002f86:	4603      	mov	r3, r0
 8002f88:	76fb      	strb	r3, [r7, #27]
        if (key >= '0' && key <= '9' && index < 3)
 8002f8a:	7efb      	ldrb	r3, [r7, #27]
 8002f8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8002f8e:	d916      	bls.n	8002fbe <remove_id_finger+0x5a>
 8002f90:	7efb      	ldrb	r3, [r7, #27]
 8002f92:	2b39      	cmp	r3, #57	@ 0x39
 8002f94:	d813      	bhi.n	8002fbe <remove_id_finger+0x5a>
 8002f96:	7ffb      	ldrb	r3, [r7, #31]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d810      	bhi.n	8002fbe <remove_id_finger+0x5a>
        {
            buzzer(1);
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f000 fa41 	bl	8003424 <buzzer>
            id_str[index++] = key;
 8002fa2:	7ffb      	ldrb	r3, [r7, #31]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	77fa      	strb	r2, [r7, #31]
 8002fa8:	3320      	adds	r3, #32
 8002faa:	443b      	add	r3, r7
 8002fac:	7efa      	ldrb	r2, [r7, #27]
 8002fae:	f803 2c0c 	strb.w	r2, [r3, #-12]
            CLCD_I2C_WriteChar(&LCD1, key);
 8002fb2:	7efb      	ldrb	r3, [r7, #27]
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4840      	ldr	r0, [pc, #256]	@ (80030b8 <remove_id_finger+0x154>)
 8002fb8:	f7fd f9f1 	bl	800039e <CLCD_I2C_WriteChar>
 8002fbc:	e02f      	b.n	800301e <remove_id_finger+0xba>
        }
        else if (key == '#' && index > 0)
 8002fbe:	7efb      	ldrb	r3, [r7, #27]
 8002fc0:	2b23      	cmp	r3, #35	@ 0x23
 8002fc2:	d1dd      	bne.n	8002f80 <remove_id_finger+0x1c>
 8002fc4:	7ffb      	ldrb	r3, [r7, #31]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0da      	beq.n	8002f80 <remove_id_finger+0x1c>
        {
            buzzer(1);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f000 fa2a 	bl	8003424 <buzzer>
            id = atoi(id_str);
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f009 fd4f 	bl	800ca78 <atoi>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	83bb      	strh	r3, [r7, #28]
            if (id >= 1 && id <= 162)
 8002fde:	8bbb      	ldrh	r3, [r7, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <remove_id_finger+0x86>
 8002fe4:	8bbb      	ldrh	r3, [r7, #28]
 8002fe6:	2ba2      	cmp	r3, #162	@ 0xa2
 8002fe8:	d91a      	bls.n	8003020 <remove_id_finger+0xbc>
            {
                break;
            }
            else
            {
                CLCD_I2C_Display(&LCD1, "Invalid ID", "Enter ID (1-162):");
 8002fea:	4a34      	ldr	r2, [pc, #208]	@ (80030bc <remove_id_finger+0x158>)
 8002fec:	4934      	ldr	r1, [pc, #208]	@ (80030c0 <remove_id_finger+0x15c>)
 8002fee:	4832      	ldr	r0, [pc, #200]	@ (80030b8 <remove_id_finger+0x154>)
 8002ff0:	f7fd fa0c 	bl	800040c <CLCD_I2C_Display>
                buzzer(5);
 8002ff4:	2005      	movs	r0, #5
 8002ff6:	f000 fa15 	bl	8003424 <buzzer>
                HAL_Delay(2000);
 8002ffa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ffe:	f000 ff1f 	bl	8003e40 <HAL_Delay>
                CLCD_I2C_Display(&LCD1, "Enter ID to remove:", "ID= ");
 8003002:	4a2b      	ldr	r2, [pc, #172]	@ (80030b0 <remove_id_finger+0x14c>)
 8003004:	492b      	ldr	r1, [pc, #172]	@ (80030b4 <remove_id_finger+0x150>)
 8003006:	482c      	ldr	r0, [pc, #176]	@ (80030b8 <remove_id_finger+0x154>)
 8003008:	f7fd fa00 	bl	800040c <CLCD_I2C_Display>
                memset(id_str, 0, sizeof(id_str));
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	2204      	movs	r2, #4
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f009 fe0b 	bl	800cc30 <memset>
                index = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	77fb      	strb	r3, [r7, #31]
    {
 800301e:	e7af      	b.n	8002f80 <remove_id_finger+0x1c>
            }
        }
    }
    ID = id;
 8003020:	4a28      	ldr	r2, [pc, #160]	@ (80030c4 <remove_id_finger+0x160>)
 8003022:	8bbb      	ldrh	r3, [r7, #28]
 8003024:	8013      	strh	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8003026:	2201      	movs	r2, #1
 8003028:	2104      	movs	r1, #4
 800302a:	4823      	ldr	r0, [pc, #140]	@ (80030b8 <remove_id_finger+0x154>)
 800302c:	f7fd f974 	bl	8000318 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, id_str);
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	4619      	mov	r1, r3
 8003036:	4820      	ldr	r0, [pc, #128]	@ (80030b8 <remove_id_finger+0x154>)
 8003038:	f7fd f9c1 	bl	80003be <CLCD_I2C_WriteString>
    HAL_Delay(1000);
 800303c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003040:	f000 fefe 	bl	8003e40 <HAL_Delay>

    CLCD_I2C_Display(&LCD1, "Removing Finger", "");
 8003044:	4a20      	ldr	r2, [pc, #128]	@ (80030c8 <remove_id_finger+0x164>)
 8003046:	4921      	ldr	r1, [pc, #132]	@ (80030cc <remove_id_finger+0x168>)
 8003048:	481b      	ldr	r0, [pc, #108]	@ (80030b8 <remove_id_finger+0x154>)
 800304a:	f7fd f9df 	bl	800040c <CLCD_I2C_Display>
    uint8_t result = delete_id_finger(ID);
 800304e:	4b1d      	ldr	r3, [pc, #116]	@ (80030c4 <remove_id_finger+0x160>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fdb9 	bl	8000bcc <delete_id_finger>
 800305a:	4603      	mov	r3, r0
 800305c:	76bb      	strb	r3, [r7, #26]
    if (result == 0x00)
 800305e:	7ebb      	ldrb	r3, [r7, #26]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <remove_id_finger+0x118>
    {
        CLCD_I2C_Display(&LCD1, "Remove Finger", "Successfully");
 8003064:	4a1a      	ldr	r2, [pc, #104]	@ (80030d0 <remove_id_finger+0x16c>)
 8003066:	491b      	ldr	r1, [pc, #108]	@ (80030d4 <remove_id_finger+0x170>)
 8003068:	4813      	ldr	r0, [pc, #76]	@ (80030b8 <remove_id_finger+0x154>)
 800306a:	f7fd f9cf 	bl	800040c <CLCD_I2C_Display>
        buzzer(1);
 800306e:	2001      	movs	r0, #1
 8003070:	f000 f9d8 	bl	8003424 <buzzer>
        // Ensure the fingerprint is removed from memory
        fingerprint_detected = 0;
 8003074:	4b18      	ldr	r3, [pc, #96]	@ (80030d8 <remove_id_finger+0x174>)
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e00e      	b.n	800309a <remove_id_finger+0x136>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 800307c:	7ebb      	ldrb	r3, [r7, #26]
 800307e:	1d38      	adds	r0, r7, #4
 8003080:	4a16      	ldr	r2, [pc, #88]	@ (80030dc <remove_id_finger+0x178>)
 8003082:	2110      	movs	r1, #16
 8003084:	f009 fd80 	bl	800cb88 <sniprintf>
        buzzer(5);
 8003088:	2005      	movs	r0, #5
 800308a:	f000 f9cb 	bl	8003424 <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	461a      	mov	r2, r3
 8003092:	4910      	ldr	r1, [pc, #64]	@ (80030d4 <remove_id_finger+0x170>)
 8003094:	4808      	ldr	r0, [pc, #32]	@ (80030b8 <remove_id_finger+0x154>)
 8003096:	f7fd f9b9 	bl	800040c <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 800309a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800309e:	f000 fecf 	bl	8003e40 <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 80030a2:	4805      	ldr	r0, [pc, #20]	@ (80030b8 <remove_id_finger+0x154>)
 80030a4:	f7fd f9a2 	bl	80003ec <CLCD_I2C_Clear>
}
 80030a8:	bf00      	nop
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	0800d57c 	.word	0x0800d57c
 80030b4:	0800db94 	.word	0x0800db94
 80030b8:	200003dc 	.word	0x200003dc
 80030bc:	0800dba8 	.word	0x0800dba8
 80030c0:	0800d598 	.word	0x0800d598
 80030c4:	2000040c 	.word	0x2000040c
 80030c8:	0800d5ec 	.word	0x0800d5ec
 80030cc:	0800dbbc 	.word	0x0800dbbc
 80030d0:	0800dbcc 	.word	0x0800dbcc
 80030d4:	0800dbdc 	.word	0x0800dbdc
 80030d8:	2000040e 	.word	0x2000040e
 80030dc:	0800dbec 	.word	0x0800dbec

080030e0 <remove_all_finger>:

void remove_all_finger()
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
    CLCD_I2C_Display(&LCD1, "  RM ALL FINGER", "  Processing...");
 80030e6:	4a19      	ldr	r2, [pc, #100]	@ (800314c <remove_all_finger+0x6c>)
 80030e8:	4919      	ldr	r1, [pc, #100]	@ (8003150 <remove_all_finger+0x70>)
 80030ea:	481a      	ldr	r0, [pc, #104]	@ (8003154 <remove_all_finger+0x74>)
 80030ec:	f7fd f98e 	bl	800040c <CLCD_I2C_Display>
    uint8_t result = empty();
 80030f0:	f7fd fd40 	bl	8000b74 <empty>
 80030f4:	4603      	mov	r3, r0
 80030f6:	75fb      	strb	r3, [r7, #23]
    if (result == 0x00)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10b      	bne.n	8003116 <remove_all_finger+0x36>
    {
        CLCD_I2C_Display(&LCD1, "   REMOVE ALL", "  SUCCESSFULLY");
 80030fe:	4a16      	ldr	r2, [pc, #88]	@ (8003158 <remove_all_finger+0x78>)
 8003100:	4916      	ldr	r1, [pc, #88]	@ (800315c <remove_all_finger+0x7c>)
 8003102:	4814      	ldr	r0, [pc, #80]	@ (8003154 <remove_all_finger+0x74>)
 8003104:	f7fd f982 	bl	800040c <CLCD_I2C_Display>
        buzzer(1);
 8003108:	2001      	movs	r0, #1
 800310a:	f000 f98b 	bl	8003424 <buzzer>
        // Ensure all fingerprints are removed from memory
        fingerprint_detected = 0;
 800310e:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <remove_all_finger+0x80>)
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e00e      	b.n	8003134 <remove_all_finger+0x54>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	1d38      	adds	r0, r7, #4
 800311a:	4a12      	ldr	r2, [pc, #72]	@ (8003164 <remove_all_finger+0x84>)
 800311c:	2110      	movs	r1, #16
 800311e:	f009 fd33 	bl	800cb88 <sniprintf>
        buzzer(5);
 8003122:	2005      	movs	r0, #5
 8003124:	f000 f97e 	bl	8003424 <buzzer>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	461a      	mov	r2, r3
 800312c:	490e      	ldr	r1, [pc, #56]	@ (8003168 <remove_all_finger+0x88>)
 800312e:	4809      	ldr	r0, [pc, #36]	@ (8003154 <remove_all_finger+0x74>)
 8003130:	f7fd f96c 	bl	800040c <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 8003134:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003138:	f000 fe82 	bl	8003e40 <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 800313c:	4805      	ldr	r0, [pc, #20]	@ (8003154 <remove_all_finger+0x74>)
 800313e:	f7fd f955 	bl	80003ec <CLCD_I2C_Clear>
}
 8003142:	bf00      	nop
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	0800dc00 	.word	0x0800dc00
 8003150:	0800dc10 	.word	0x0800dc10
 8003154:	200003dc 	.word	0x200003dc
 8003158:	0800da44 	.word	0x0800da44
 800315c:	0800dc20 	.word	0x0800dc20
 8003160:	2000040e 	.word	0x2000040e
 8003164:	0800dbec 	.word	0x0800dbec
 8003168:	0800dbdc 	.word	0x0800dbdc

0800316c <startface>:

void startface(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
	if(Rx_Buffer[0] == 'Y'){
 8003170:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <startface+0x5c>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b25b      	sxtb	r3, r3
 8003176:	2b59      	cmp	r3, #89	@ 0x59
 8003178:	d10e      	bne.n	8003198 <startface+0x2c>
        CLCD_I2C_Clear(&LCD1);
 800317a:	4814      	ldr	r0, [pc, #80]	@ (80031cc <startface+0x60>)
 800317c:	f7fd f936 	bl	80003ec <CLCD_I2C_Clear>
        CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003180:	2200      	movs	r2, #0
 8003182:	2100      	movs	r1, #0
 8003184:	4811      	ldr	r0, [pc, #68]	@ (80031cc <startface+0x60>)
 8003186:	f7fd f8c7 	bl	8000318 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 800318a:	4911      	ldr	r1, [pc, #68]	@ (80031d0 <startface+0x64>)
 800318c:	480f      	ldr	r0, [pc, #60]	@ (80031cc <startface+0x60>)
 800318e:	f7fd f916 	bl	80003be <CLCD_I2C_WriteString>
        opendoor();
 8003192:	f000 f8f7 	bl	8003384 <opendoor>
 8003196:	e010      	b.n	80031ba <startface+0x4e>
//        HAL_Delay(2000);
	}else if(Rx_Buffer[0] == 'N'){
 8003198:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <startface+0x5c>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	b25b      	sxtb	r3, r3
 800319e:	2b4e      	cmp	r3, #78	@ 0x4e
 80031a0:	d10b      	bne.n	80031ba <startface+0x4e>
		CLCD_I2C_Display(&LCD1, "  WRONG FACEID", "CAN NOT ACCESS");
 80031a2:	4a0c      	ldr	r2, [pc, #48]	@ (80031d4 <startface+0x68>)
 80031a4:	490c      	ldr	r1, [pc, #48]	@ (80031d8 <startface+0x6c>)
 80031a6:	4809      	ldr	r0, [pc, #36]	@ (80031cc <startface+0x60>)
 80031a8:	f7fd f930 	bl	800040c <CLCD_I2C_Display>
		buzzer(5);
 80031ac:	2005      	movs	r0, #5
 80031ae:	f000 f939 	bl	8003424 <buzzer>
        HAL_Delay(2000);
 80031b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80031b6:	f000 fe43 	bl	8003e40 <HAL_Delay>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80031ba:	2280      	movs	r2, #128	@ 0x80
 80031bc:	2100      	movs	r1, #0
 80031be:	4802      	ldr	r0, [pc, #8]	@ (80031c8 <startface+0x5c>)
 80031c0:	f009 fd36 	bl	800cc30 <memset>
}
 80031c4:	bf00      	nop
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000350 	.word	0x20000350
 80031cc:	200003dc 	.word	0x200003dc
 80031d0:	0800d600 	.word	0x0800d600
 80031d4:	0800dc30 	.word	0x0800dc30
 80031d8:	0800dc40 	.word	0x0800dc40

080031dc <enter_password>:

void enter_password(char *password) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 6; i++) {
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e01c      	b.n	8003224 <enter_password+0x48>
        char key;
        do {
            key = KeyPad_WaitForKeyGetChar(10);
 80031ea:	200a      	movs	r0, #10
 80031ec:	f7fd fa68 	bl	80006c0 <KeyPad_WaitForKeyGetChar>
 80031f0:	4603      	mov	r3, r0
 80031f2:	72fb      	strb	r3, [r7, #11]
        } while (key == 0 || (key < '0' || key > '9')); // Only accept numeric keys
 80031f4:	7afb      	ldrb	r3, [r7, #11]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f7      	beq.n	80031ea <enter_password+0xe>
 80031fa:	7afb      	ldrb	r3, [r7, #11]
 80031fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80031fe:	d9f4      	bls.n	80031ea <enter_password+0xe>
 8003200:	7afb      	ldrb	r3, [r7, #11]
 8003202:	2b39      	cmp	r3, #57	@ 0x39
 8003204:	d8f1      	bhi.n	80031ea <enter_password+0xe>
        buzzer(1);
 8003206:	2001      	movs	r0, #1
 8003208:	f000 f90c 	bl	8003424 <buzzer>
        password[i] = key;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	7afa      	ldrb	r2, [r7, #11]
 8003214:	701a      	strb	r2, [r3, #0]
        CLCD_I2C_WriteChar(&LCD1, '*');
 8003216:	212a      	movs	r1, #42	@ 0x2a
 8003218:	4808      	ldr	r0, [pc, #32]	@ (800323c <enter_password+0x60>)
 800321a:	f7fd f8c0 	bl	800039e <CLCD_I2C_WriteChar>
    for (int i = 0; i < 6; i++) {
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3301      	adds	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b05      	cmp	r3, #5
 8003228:	dddf      	ble.n	80031ea <enter_password+0xe>
    }
    password[6] = '\0';
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3306      	adds	r3, #6
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	200003dc 	.word	0x200003dc

08003240 <change_password>:

void change_password(void) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
    char new_password[7] = {0};
 8003246:	2300      	movs	r3, #0
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	2100      	movs	r1, #0
 800324e:	460a      	mov	r2, r1
 8003250:	801a      	strh	r2, [r3, #0]
 8003252:	460a      	mov	r2, r1
 8003254:	709a      	strb	r2, [r3, #2]
    CLCD_I2C_Display(&LCD1, " ENTER NEW PASS", "     ");
 8003256:	4a11      	ldr	r2, [pc, #68]	@ (800329c <change_password+0x5c>)
 8003258:	4911      	ldr	r1, [pc, #68]	@ (80032a0 <change_password+0x60>)
 800325a:	4812      	ldr	r0, [pc, #72]	@ (80032a4 <change_password+0x64>)
 800325c:	f7fd f8d6 	bl	800040c <CLCD_I2C_Display>
    enter_password(new_password);
 8003260:	463b      	mov	r3, r7
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ffba 	bl	80031dc <enter_password>
    // Erase the flash memory at the password address before writing the new password
    Flash_Erase(StartAddressPassword);
 8003268:	480f      	ldr	r0, [pc, #60]	@ (80032a8 <change_password+0x68>)
 800326a:	f7fd fcf1 	bl	8000c50 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)new_password, 6);
 800326e:	463b      	mov	r3, r7
 8003270:	2206      	movs	r2, #6
 8003272:	4619      	mov	r1, r3
 8003274:	480c      	ldr	r0, [pc, #48]	@ (80032a8 <change_password+0x68>)
 8003276:	f7fd fd1f 	bl	8000cb8 <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, "PASSWORD CHANGED", "  SUCCESSFULLY");
 800327a:	4a0c      	ldr	r2, [pc, #48]	@ (80032ac <change_password+0x6c>)
 800327c:	490c      	ldr	r1, [pc, #48]	@ (80032b0 <change_password+0x70>)
 800327e:	4809      	ldr	r0, [pc, #36]	@ (80032a4 <change_password+0x64>)
 8003280:	f7fd f8c4 	bl	800040c <CLCD_I2C_Display>
    buzzer(1);
 8003284:	2001      	movs	r0, #1
 8003286:	f000 f8cd 	bl	8003424 <buzzer>
    HAL_Delay(2000);
 800328a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800328e:	f000 fdd7 	bl	8003e40 <HAL_Delay>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	0800dc50 	.word	0x0800dc50
 80032a0:	0800dc58 	.word	0x0800dc58
 80032a4:	200003dc 	.word	0x200003dc
 80032a8:	0800f400 	.word	0x0800f400
 80032ac:	0800da44 	.word	0x0800da44
 80032b0:	0800dc68 	.word	0x0800dc68

080032b4 <check_password>:

uint8_t check_password(char *password) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
    char stored_password[7] = {0};
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	2100      	movs	r1, #0
 80032c6:	460a      	mov	r2, r1
 80032c8:	801a      	strh	r2, [r3, #0]
 80032ca:	460a      	mov	r2, r1
 80032cc:	709a      	strb	r2, [r3, #2]
    Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	2206      	movs	r2, #6
 80032d4:	4619      	mov	r1, r3
 80032d6:	480a      	ldr	r0, [pc, #40]	@ (8003300 <check_password+0x4c>)
 80032d8:	f7fd fd29 	bl	8000d2e <Flash_Read_Array>
    stored_password[6] = '\0';
 80032dc:	2300      	movs	r3, #0
 80032de:	73bb      	strb	r3, [r7, #14]
    return strcmp(password, stored_password) == 0;
 80032e0:	f107 0308 	add.w	r3, r7, #8
 80032e4:	4619      	mov	r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fc ff30 	bl	800014c <strcmp>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf0c      	ite	eq
 80032f2:	2301      	moveq	r3, #1
 80032f4:	2300      	movne	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	0800f400 	.word	0x0800f400

08003304 <set_default_password>:

void set_default_password(void) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
    char default_password[6] = "111111";
 800330a:	4a16      	ldr	r2, [pc, #88]	@ (8003364 <set_default_password+0x60>)
 800330c:	463b      	mov	r3, r7
 800330e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003312:	6018      	str	r0, [r3, #0]
 8003314:	3304      	adds	r3, #4
 8003316:	8019      	strh	r1, [r3, #0]
    // Erase the flash memory at the password address before writing the default password
    Flash_Erase(StartAddressPassword);
 8003318:	4813      	ldr	r0, [pc, #76]	@ (8003368 <set_default_password+0x64>)
 800331a:	f7fd fc99 	bl	8000c50 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)default_password, 6);
 800331e:	463b      	mov	r3, r7
 8003320:	2206      	movs	r2, #6
 8003322:	4619      	mov	r1, r3
 8003324:	4810      	ldr	r0, [pc, #64]	@ (8003368 <set_default_password+0x64>)
 8003326:	f7fd fcc7 	bl	8000cb8 <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, " RESET PASSWORD", "  SUCCESSFULLY");
 800332a:	4a10      	ldr	r2, [pc, #64]	@ (800336c <set_default_password+0x68>)
 800332c:	4910      	ldr	r1, [pc, #64]	@ (8003370 <set_default_password+0x6c>)
 800332e:	4811      	ldr	r0, [pc, #68]	@ (8003374 <set_default_password+0x70>)
 8003330:	f7fd f86c 	bl	800040c <CLCD_I2C_Display>
    buzzer(1);
 8003334:	2001      	movs	r0, #1
 8003336:	f000 f875 	bl	8003424 <buzzer>
    HAL_Delay(1500);
 800333a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800333e:	f000 fd7f 	bl	8003e40 <HAL_Delay>
    CLCD_I2C_Display(&LCD1, "  NEW PASSWORD:", "     111111");
 8003342:	4a0d      	ldr	r2, [pc, #52]	@ (8003378 <set_default_password+0x74>)
 8003344:	490d      	ldr	r1, [pc, #52]	@ (800337c <set_default_password+0x78>)
 8003346:	480b      	ldr	r0, [pc, #44]	@ (8003374 <set_default_password+0x70>)
 8003348:	f7fd f860 	bl	800040c <CLCD_I2C_Display>
    HAL_Delay(1000);
 800334c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003350:	f000 fd76 	bl	8003e40 <HAL_Delay>
    exitmenu=0;
 8003354:	4b0a      	ldr	r3, [pc, #40]	@ (8003380 <set_default_password+0x7c>)
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	0800dca8 	.word	0x0800dca8
 8003368:	0800f400 	.word	0x0800f400
 800336c:	0800da44 	.word	0x0800da44
 8003370:	0800dc7c 	.word	0x0800dc7c
 8003374:	200003dc 	.word	0x200003dc
 8003378:	0800dc8c 	.word	0x0800dc8c
 800337c:	0800dc98 	.word	0x0800dc98
 8003380:	20000020 	.word	0x20000020

08003384 <opendoor>:

void opendoor(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
    buzzer(1);
 800338a:	2001      	movs	r0, #1
 800338c:	f000 f84a 	bl	8003424 <buzzer>
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 1);
 8003390:	2201      	movs	r2, #1
 8003392:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003396:	481e      	ldr	r0, [pc, #120]	@ (8003410 <opendoor+0x8c>)
 8003398:	f001 fa1f 	bl	80047da <HAL_GPIO_WritePin>
    HAL_Delay(1500);
 800339c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80033a0:	f000 fd4e 	bl	8003e40 <HAL_Delay>
    uint32_t door_open_time = HAL_GetTick();
 80033a4:	f000 fd42 	bl	8003e2c <HAL_GetTick>
 80033a8:	6178      	str	r0, [r7, #20]
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 80033aa:	e01b      	b.n	80033e4 <opendoor+0x60>
    {
        uint32_t remaining_time = (opendoortime - (HAL_GetTick() - door_open_time) + 999) / 1000; // Adjust to include 2s
 80033ac:	f000 fd3e 	bl	8003e2c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	f603 739f 	addw	r3, r3, #3999	@ 0xf9f
 80033ba:	4a16      	ldr	r2, [pc, #88]	@ (8003414 <opendoor+0x90>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	099b      	lsrs	r3, r3, #6
 80033c2:	613b      	str	r3, [r7, #16]
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "       %lus", remaining_time);
 80033c4:	4638      	mov	r0, r7
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4a13      	ldr	r2, [pc, #76]	@ (8003418 <opendoor+0x94>)
 80033ca:	2110      	movs	r1, #16
 80033cc:	f009 fbdc 	bl	800cb88 <sniprintf>
        CLCD_I2C_Display(&LCD1, " DOOR IS OPENING", buffer);
 80033d0:	463b      	mov	r3, r7
 80033d2:	461a      	mov	r2, r3
 80033d4:	4911      	ldr	r1, [pc, #68]	@ (800341c <opendoor+0x98>)
 80033d6:	4812      	ldr	r0, [pc, #72]	@ (8003420 <opendoor+0x9c>)
 80033d8:	f7fd f818 	bl	800040c <CLCD_I2C_Display>
        HAL_Delay(1000);
 80033dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033e0:	f000 fd2e 	bl	8003e40 <HAL_Delay>
    while ((HAL_GetTick() - door_open_time) < opendoortime)
 80033e4:	f000 fd22 	bl	8003e2c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d9da      	bls.n	80033ac <opendoor+0x28>
    }
    HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80033fc:	4804      	ldr	r0, [pc, #16]	@ (8003410 <opendoor+0x8c>)
 80033fe:	f001 f9ec 	bl	80047da <HAL_GPIO_WritePin>
    CLCD_I2C_Clear(&LCD1);
 8003402:	4807      	ldr	r0, [pc, #28]	@ (8003420 <opendoor+0x9c>)
 8003404:	f7fc fff2 	bl	80003ec <CLCD_I2C_Clear>
}
 8003408:	bf00      	nop
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40010800 	.word	0x40010800
 8003414:	10624dd3 	.word	0x10624dd3
 8003418:	0800dcb0 	.word	0x0800dcb0
 800341c:	0800dcbc 	.word	0x0800dcbc
 8003420:	200003dc 	.word	0x200003dc

08003424 <buzzer>:
void buzzer( uint8_t countbeep)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]

	while(countbeep--)
 800342e:	e011      	b.n	8003454 <buzzer+0x30>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,0);
 8003430:	2200      	movs	r2, #0
 8003432:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003436:	480c      	ldr	r0, [pc, #48]	@ (8003468 <buzzer+0x44>)
 8003438:	f001 f9cf 	bl	80047da <HAL_GPIO_WritePin>
		HAL_Delay(120);
 800343c:	2078      	movs	r0, #120	@ 0x78
 800343e:	f000 fcff 	bl	8003e40 <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,1);
 8003442:	2201      	movs	r2, #1
 8003444:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003448:	4807      	ldr	r0, [pc, #28]	@ (8003468 <buzzer+0x44>)
 800344a:	f001 f9c6 	bl	80047da <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800344e:	2032      	movs	r0, #50	@ 0x32
 8003450:	f000 fcf6 	bl	8003e40 <HAL_Delay>
	while(countbeep--)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	1e5a      	subs	r2, r3, #1
 8003458:	71fa      	strb	r2, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e8      	bne.n	8003430 <buzzer+0xc>
	}
}
 800345e:	bf00      	nop
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40010800 	.word	0x40010800

0800346c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003470:	b672      	cpsid	i
}
 8003472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <Error_Handler+0x8>

08003478 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af02      	add	r7, sp, #8
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003486:	bf00      	nop
 8003488:	4b0e      	ldr	r3, [pc, #56]	@ (80034c4 <TM_SPI_Send+0x4c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d1f8      	bne.n	8003488 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003496:	f107 0208 	add.w	r2, r7, #8
 800349a:	f107 010c 	add.w	r1, r7, #12
 800349e:	230a      	movs	r3, #10
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	2301      	movs	r3, #1
 80034a4:	4807      	ldr	r0, [pc, #28]	@ (80034c4 <TM_SPI_Send+0x4c>)
 80034a6:	f003 feff 	bl	80072a8 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 80034aa:	bf00      	nop
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <TM_SPI_Send+0x4c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b6:	2b80      	cmp	r3, #128	@ 0x80
 80034b8:	d0f8      	beq.n	80034ac <TM_SPI_Send+0x34>
	return data_re[0];
 80034ba:	7a3b      	ldrb	r3, [r7, #8]

}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000270 	.word	0x20000270

080034c8 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 80034cc:	f000 f8d5 	bl	800367a <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80034d0:	218d      	movs	r1, #141	@ 0x8d
 80034d2:	202a      	movs	r0, #42	@ 0x2a
 80034d4:	f000 f836 	bl	8003544 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80034d8:	213e      	movs	r1, #62	@ 0x3e
 80034da:	202b      	movs	r0, #43	@ 0x2b
 80034dc:	f000 f832 	bl	8003544 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 80034e0:	211e      	movs	r1, #30
 80034e2:	202d      	movs	r0, #45	@ 0x2d
 80034e4:	f000 f82e 	bl	8003544 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80034e8:	2100      	movs	r1, #0
 80034ea:	202c      	movs	r0, #44	@ 0x2c
 80034ec:	f000 f82a 	bl	8003544 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 80034f0:	2170      	movs	r1, #112	@ 0x70
 80034f2:	2026      	movs	r0, #38	@ 0x26
 80034f4:	f000 f826 	bl	8003544 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80034f8:	2140      	movs	r1, #64	@ 0x40
 80034fa:	2015      	movs	r0, #21
 80034fc:	f000 f822 	bl	8003544 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003500:	213d      	movs	r1, #61	@ 0x3d
 8003502:	2011      	movs	r0, #17
 8003504:	f000 f81e 	bl	8003544 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003508:	f000 f8a2 	bl	8003650 <TM_MFRC522_AntennaOn>
}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}

08003510 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	2026      	movs	r0, #38	@ 0x26
 800351c:	f000 f8b5 	bl	800368a <TM_MFRC522_Request>
 8003520:	4603      	mov	r3, r0
 8003522:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f9a1 	bl	8003872 <TM_MFRC522_Anticoll>
 8003530:	4603      	mov	r3, r0
 8003532:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 8003534:	f000 fa23 	bl	800397e <TM_MFRC522_Halt>
	return status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	460a      	mov	r2, r1
 800354e:	71fb      	strb	r3, [r7, #7]
 8003550:	4613      	mov	r3, r2
 8003552:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003554:	2200      	movs	r2, #0
 8003556:	2110      	movs	r1, #16
 8003558:	480c      	ldr	r0, [pc, #48]	@ (800358c <TM_MFRC522_WriteRegister+0x48>)
 800355a:	f001 f93e 	bl	80047da <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003568:	b2db      	uxtb	r3, r3
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff84 	bl	8003478 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003570:	79bb      	ldrb	r3, [r7, #6]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff80 	bl	8003478 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003578:	2201      	movs	r2, #1
 800357a:	2110      	movs	r1, #16
 800357c:	4803      	ldr	r0, [pc, #12]	@ (800358c <TM_MFRC522_WriteRegister+0x48>)
 800357e:	f001 f92c 	bl	80047da <HAL_GPIO_WritePin>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40010800 	.word	0x40010800

08003590 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 800359a:	2200      	movs	r2, #0
 800359c:	2110      	movs	r1, #16
 800359e:	480f      	ldr	r0, [pc, #60]	@ (80035dc <TM_MFRC522_ReadRegister+0x4c>)
 80035a0:	f001 f91b 	bl	80047da <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	b25b      	sxtb	r3, r3
 80035aa:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80035ae:	b25b      	sxtb	r3, r3
 80035b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff5d 	bl	8003478 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 80035be:	2000      	movs	r0, #0
 80035c0:	f7ff ff5a 	bl	8003478 <TM_SPI_Send>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 80035c8:	2201      	movs	r2, #1
 80035ca:	2110      	movs	r1, #16
 80035cc:	4803      	ldr	r0, [pc, #12]	@ (80035dc <TM_MFRC522_ReadRegister+0x4c>)
 80035ce:	f001 f904 	bl	80047da <HAL_GPIO_WritePin>

	return val;
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40010800 	.word	0x40010800

080035e0 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	460a      	mov	r2, r1
 80035ea:	71fb      	strb	r3, [r7, #7]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff ffcc 	bl	8003590 <TM_MFRC522_ReadRegister>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	79bb      	ldrb	r3, [r7, #6]
 80035fe:	4313      	orrs	r3, r2
 8003600:	b2da      	uxtb	r2, r3
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff9c 	bl	8003544 <TM_MFRC522_WriteRegister>
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	460a      	mov	r2, r1
 800361e:	71fb      	strb	r3, [r7, #7]
 8003620:	4613      	mov	r3, r2
 8003622:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ffb2 	bl	8003590 <TM_MFRC522_ReadRegister>
 800362c:	4603      	mov	r3, r0
 800362e:	b25a      	sxtb	r2, r3
 8003630:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003634:	43db      	mvns	r3, r3
 8003636:	b25b      	sxtb	r3, r3
 8003638:	4013      	ands	r3, r2
 800363a:	b25b      	sxtb	r3, r3
 800363c:	b2da      	uxtb	r2, r3
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ff7e 	bl	8003544 <TM_MFRC522_WriteRegister>
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003656:	2014      	movs	r0, #20
 8003658:	f7ff ff9a 	bl	8003590 <TM_MFRC522_ReadRegister>
 800365c:	4603      	mov	r3, r0
 800365e:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800366a:	2103      	movs	r1, #3
 800366c:	2014      	movs	r0, #20
 800366e:	f7ff ffb7 	bl	80035e0 <TM_MFRC522_SetBitMask>
	}
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 800367a:	b580      	push	{r7, lr}
 800367c:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800367e:	210f      	movs	r1, #15
 8003680:	2001      	movs	r0, #1
 8003682:	f7ff ff5f 	bl	8003544 <TM_MFRC522_WriteRegister>
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}

0800368a <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af02      	add	r7, sp, #8
 8003690:	4603      	mov	r3, r0
 8003692:	6039      	str	r1, [r7, #0]
 8003694:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003696:	2107      	movs	r1, #7
 8003698:	200d      	movs	r0, #13
 800369a:	f7ff ff53 	bl	8003544 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	79fa      	ldrb	r2, [r7, #7]
 80036a2:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80036a4:	f107 030c 	add.w	r3, r7, #12
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	6839      	ldr	r1, [r7, #0]
 80036b0:	200c      	movs	r0, #12
 80036b2:	f000 f80f 	bl	80036d4 <TM_MFRC522_ToCard>
 80036b6:	4603      	mov	r3, r0
 80036b8:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <TM_MFRC522_Request+0x3c>
 80036c0:	89bb      	ldrh	r3, [r7, #12]
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d001      	beq.n	80036ca <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 80036c6:	2302      	movs	r3, #2
 80036c8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	4603      	mov	r3, r0
 80036e0:	73fb      	strb	r3, [r7, #15]
 80036e2:	4613      	mov	r3, r2
 80036e4:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 80036e6:	2302      	movs	r3, #2
 80036e8:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80036ea:	2300      	movs	r3, #0
 80036ec:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80036ee:	2300      	movs	r3, #0
 80036f0:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d006      	beq.n	8003706 <TM_MFRC522_ToCard+0x32>
 80036f8:	2b0e      	cmp	r3, #14
 80036fa:	d109      	bne.n	8003710 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80036fc:	2312      	movs	r3, #18
 80036fe:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003700:	2310      	movs	r3, #16
 8003702:	757b      	strb	r3, [r7, #21]
			break;
 8003704:	e005      	b.n	8003712 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003706:	2377      	movs	r3, #119	@ 0x77
 8003708:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 800370a:	2330      	movs	r3, #48	@ 0x30
 800370c:	757b      	strb	r3, [r7, #21]
			break;
 800370e:	e000      	b.n	8003712 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003710:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003712:	7dbb      	ldrb	r3, [r7, #22]
 8003714:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003718:	b2db      	uxtb	r3, r3
 800371a:	4619      	mov	r1, r3
 800371c:	2002      	movs	r0, #2
 800371e:	f7ff ff11 	bl	8003544 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003722:	2180      	movs	r1, #128	@ 0x80
 8003724:	2004      	movs	r0, #4
 8003726:	f7ff ff75 	bl	8003614 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800372a:	2180      	movs	r1, #128	@ 0x80
 800372c:	200a      	movs	r0, #10
 800372e:	f7ff ff57 	bl	80035e0 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8003732:	2100      	movs	r1, #0
 8003734:	2001      	movs	r0, #1
 8003736:	f7ff ff05 	bl	8003544 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 800373a:	2300      	movs	r3, #0
 800373c:	827b      	strh	r3, [r7, #18]
 800373e:	e00a      	b.n	8003756 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8003740:	8a7b      	ldrh	r3, [r7, #18]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	4413      	add	r3, r2
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	4619      	mov	r1, r3
 800374a:	2009      	movs	r0, #9
 800374c:	f7ff fefa 	bl	8003544 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8003750:	8a7b      	ldrh	r3, [r7, #18]
 8003752:	3301      	adds	r3, #1
 8003754:	827b      	strh	r3, [r7, #18]
 8003756:	7bbb      	ldrb	r3, [r7, #14]
 8003758:	b29b      	uxth	r3, r3
 800375a:	8a7a      	ldrh	r2, [r7, #18]
 800375c:	429a      	cmp	r2, r3
 800375e:	d3ef      	bcc.n	8003740 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	4619      	mov	r1, r3
 8003764:	2001      	movs	r0, #1
 8003766:	f7ff feed 	bl	8003544 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	d103      	bne.n	8003778 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003770:	2180      	movs	r1, #128	@ 0x80
 8003772:	200d      	movs	r0, #13
 8003774:	f7ff ff34 	bl	80035e0 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003778:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800377c:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800377e:	2004      	movs	r0, #4
 8003780:	f7ff ff06 	bl	8003590 <TM_MFRC522_ReadRegister>
 8003784:	4603      	mov	r3, r0
 8003786:	753b      	strb	r3, [r7, #20]
		i--;
 8003788:	8a7b      	ldrh	r3, [r7, #18]
 800378a:	3b01      	subs	r3, #1
 800378c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800378e:	8a7b      	ldrh	r3, [r7, #18]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <TM_MFRC522_ToCard+0xd6>
 8003794:	7d3b      	ldrb	r3, [r7, #20]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <TM_MFRC522_ToCard+0xd6>
 800379e:	7d3a      	ldrb	r2, [r7, #20]
 80037a0:	7d7b      	ldrb	r3, [r7, #21]
 80037a2:	4013      	ands	r3, r2
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0e9      	beq.n	800377e <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 80037aa:	2180      	movs	r1, #128	@ 0x80
 80037ac:	200d      	movs	r0, #13
 80037ae:	f7ff ff31 	bl	8003614 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 80037b2:	8a7b      	ldrh	r3, [r7, #18]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d057      	beq.n	8003868 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80037b8:	2006      	movs	r0, #6
 80037ba:	f7ff fee9 	bl	8003590 <TM_MFRC522_ReadRegister>
 80037be:	4603      	mov	r3, r0
 80037c0:	f003 031b 	and.w	r3, r3, #27
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d14d      	bne.n	8003864 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 80037cc:	7d3a      	ldrb	r2, [r7, #20]
 80037ce:	7dbb      	ldrb	r3, [r7, #22]
 80037d0:	4013      	ands	r3, r2
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 80037dc:	2301      	movs	r3, #1
 80037de:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d140      	bne.n	8003868 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80037e6:	200a      	movs	r0, #10
 80037e8:	f7ff fed2 	bl	8003590 <TM_MFRC522_ReadRegister>
 80037ec:	4603      	mov	r3, r0
 80037ee:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80037f0:	200c      	movs	r0, #12
 80037f2:	f7ff fecd 	bl	8003590 <TM_MFRC522_ReadRegister>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 80037fe:	7c7b      	ldrb	r3, [r7, #17]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00b      	beq.n	800381c <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 8003804:	7d3b      	ldrb	r3, [r7, #20]
 8003806:	3b01      	subs	r3, #1
 8003808:	b29b      	uxth	r3, r3
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	b29a      	uxth	r2, r3
 800380e:	7c7b      	ldrb	r3, [r7, #17]
 8003810:	b29b      	uxth	r3, r3
 8003812:	4413      	add	r3, r2
 8003814:	b29a      	uxth	r2, r3
 8003816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003818:	801a      	strh	r2, [r3, #0]
 800381a:	e005      	b.n	8003828 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 800381c:	7d3b      	ldrb	r3, [r7, #20]
 800381e:	b29b      	uxth	r3, r3
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	b29a      	uxth	r2, r3
 8003824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003826:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8003828:	7d3b      	ldrb	r3, [r7, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <TM_MFRC522_ToCard+0x15e>
					n = 1;
 800382e:	2301      	movs	r3, #1
 8003830:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 8003832:	7d3b      	ldrb	r3, [r7, #20]
 8003834:	2b10      	cmp	r3, #16
 8003836:	d901      	bls.n	800383c <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8003838:	2310      	movs	r3, #16
 800383a:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 800383c:	2300      	movs	r3, #0
 800383e:	827b      	strh	r3, [r7, #18]
 8003840:	e00a      	b.n	8003858 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8003842:	8a7b      	ldrh	r3, [r7, #18]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	18d4      	adds	r4, r2, r3
 8003848:	2009      	movs	r0, #9
 800384a:	f7ff fea1 	bl	8003590 <TM_MFRC522_ReadRegister>
 800384e:	4603      	mov	r3, r0
 8003850:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8003852:	8a7b      	ldrh	r3, [r7, #18]
 8003854:	3301      	adds	r3, #1
 8003856:	827b      	strh	r3, [r7, #18]
 8003858:	7d3b      	ldrb	r3, [r7, #20]
 800385a:	b29b      	uxth	r3, r3
 800385c:	8a7a      	ldrh	r2, [r7, #18]
 800385e:	429a      	cmp	r2, r3
 8003860:	d3ef      	bcc.n	8003842 <TM_MFRC522_ToCard+0x16e>
 8003862:	e001      	b.n	8003868 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8003864:	2302      	movs	r3, #2
 8003866:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
}
 800386a:	4618      	mov	r0, r3
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}

08003872 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af02      	add	r7, sp, #8
 8003878:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800387e:	2100      	movs	r1, #0
 8003880:	200d      	movs	r0, #13
 8003882:	f7ff fe5f 	bl	8003544 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2293      	movs	r2, #147	@ 0x93
 800388a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3301      	adds	r3, #1
 8003890:	2220      	movs	r2, #32
 8003892:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003894:	f107 030a 	add.w	r3, r7, #10
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2202      	movs	r2, #2
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	200c      	movs	r0, #12
 80038a2:	f7ff ff17 	bl	80036d4 <TM_MFRC522_ToCard>
 80038a6:	4603      	mov	r3, r0
 80038a8:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d118      	bne.n	80038e2 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 80038b0:	2300      	movs	r3, #0
 80038b2:	73bb      	strb	r3, [r7, #14]
 80038b4:	e009      	b.n	80038ca <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4413      	add	r3, r2
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	7b7b      	ldrb	r3, [r7, #13]
 80038c0:	4053      	eors	r3, r2
 80038c2:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 80038c4:	7bbb      	ldrb	r3, [r7, #14]
 80038c6:	3301      	adds	r3, #1
 80038c8:	73bb      	strb	r3, [r7, #14]
 80038ca:	7bbb      	ldrb	r3, [r7, #14]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d9f2      	bls.n	80038b6 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 80038d0:	7bbb      	ldrb	r3, [r7, #14]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	7b7a      	ldrb	r2, [r7, #13]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d001      	beq.n	80038e2 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 80038de:	2302      	movs	r3, #2
 80038e0:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	460b      	mov	r3, r1
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 80038fa:	2104      	movs	r1, #4
 80038fc:	2005      	movs	r0, #5
 80038fe:	f7ff fe89 	bl	8003614 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8003902:	2180      	movs	r1, #128	@ 0x80
 8003904:	200a      	movs	r0, #10
 8003906:	f7ff fe6b 	bl	80035e0 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
 800390e:	e00a      	b.n	8003926 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	4619      	mov	r1, r3
 800391a:	2009      	movs	r0, #9
 800391c:	f7ff fe12 	bl	8003544 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	3301      	adds	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
 8003926:	7dfa      	ldrb	r2, [r7, #23]
 8003928:	7afb      	ldrb	r3, [r7, #11]
 800392a:	429a      	cmp	r2, r3
 800392c:	d3f0      	bcc.n	8003910 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800392e:	2103      	movs	r1, #3
 8003930:	2001      	movs	r0, #1
 8003932:	f7ff fe07 	bl	8003544 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8003936:	23ff      	movs	r3, #255	@ 0xff
 8003938:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800393a:	2005      	movs	r0, #5
 800393c:	f7ff fe28 	bl	8003590 <TM_MFRC522_ReadRegister>
 8003940:	4603      	mov	r3, r0
 8003942:	75bb      	strb	r3, [r7, #22]
		i--;
 8003944:	7dfb      	ldrb	r3, [r7, #23]
 8003946:	3b01      	subs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <TM_MFRC522_CalculateCRC+0x6e>
 8003950:	7dbb      	ldrb	r3, [r7, #22]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0ef      	beq.n	800393a <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800395a:	2022      	movs	r0, #34	@ 0x22
 800395c:	f7ff fe18 	bl	8003590 <TM_MFRC522_ReadRegister>
 8003960:	4603      	mov	r3, r0
 8003962:	461a      	mov	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	1c5c      	adds	r4, r3, #1
 800396c:	2021      	movs	r0, #33	@ 0x21
 800396e:	f7ff fe0f 	bl	8003590 <TM_MFRC522_ReadRegister>
 8003972:	4603      	mov	r3, r0
 8003974:	7023      	strb	r3, [r4, #0]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	bd90      	pop	{r4, r7, pc}

0800397e <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8003984:	2350      	movs	r3, #80	@ 0x50
 8003986:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 800398c:	463b      	mov	r3, r7
 800398e:	1c9a      	adds	r2, r3, #2
 8003990:	463b      	mov	r3, r7
 8003992:	2102      	movs	r1, #2
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ffa9 	bl	80038ec <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 800399a:	463a      	mov	r2, r7
 800399c:	4639      	mov	r1, r7
 800399e:	1dbb      	adds	r3, r7, #6
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4613      	mov	r3, r2
 80039a4:	2204      	movs	r2, #4
 80039a6:	200c      	movs	r0, #12
 80039a8:	f7ff fe94 	bl	80036d4 <TM_MFRC522_ToCard>



}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039ba:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <HAL_MspInit+0x5c>)
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	4a14      	ldr	r2, [pc, #80]	@ (8003a10 <HAL_MspInit+0x5c>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6193      	str	r3, [r2, #24]
 80039c6:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <HAL_MspInit+0x5c>)
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <HAL_MspInit+0x5c>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a10 <HAL_MspInit+0x5c>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	61d3      	str	r3, [r2, #28]
 80039de:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <HAL_MspInit+0x5c>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80039ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <HAL_MspInit+0x60>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <HAL_MspInit+0x60>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a06:	bf00      	nop
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40010000 	.word	0x40010000

08003a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a20:	f107 0310 	add.w	r3, r7, #16
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a16      	ldr	r2, [pc, #88]	@ (8003a8c <HAL_I2C_MspInit+0x74>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d124      	bne.n	8003a82 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a38:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <HAL_I2C_MspInit+0x78>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	4a14      	ldr	r2, [pc, #80]	@ (8003a90 <HAL_I2C_MspInit+0x78>)
 8003a3e:	f043 0308 	orr.w	r3, r3, #8
 8003a42:	6193      	str	r3, [r2, #24]
 8003a44:	4b12      	ldr	r3, [pc, #72]	@ (8003a90 <HAL_I2C_MspInit+0x78>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003a50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003a54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a56:	2312      	movs	r3, #18
 8003a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5e:	f107 0310 	add.w	r3, r7, #16
 8003a62:	4619      	mov	r1, r3
 8003a64:	480b      	ldr	r0, [pc, #44]	@ (8003a94 <HAL_I2C_MspInit+0x7c>)
 8003a66:	f000 fd1d 	bl	80044a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a6a:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <HAL_I2C_MspInit+0x78>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4a08      	ldr	r2, [pc, #32]	@ (8003a90 <HAL_I2C_MspInit+0x78>)
 8003a70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a74:	61d3      	str	r3, [r2, #28]
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <HAL_I2C_MspInit+0x78>)
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003a82:	bf00      	nop
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40005800 	.word	0x40005800
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40010c00 	.word	0x40010c00

08003a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	f107 0310 	add.w	r3, r7, #16
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b20 <HAL_SPI_MspInit+0x88>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d12f      	bne.n	8003b18 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <HAL_SPI_MspInit+0x8c>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	4a19      	ldr	r2, [pc, #100]	@ (8003b24 <HAL_SPI_MspInit+0x8c>)
 8003abe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ac2:	6193      	str	r3, [r2, #24]
 8003ac4:	4b17      	ldr	r3, [pc, #92]	@ (8003b24 <HAL_SPI_MspInit+0x8c>)
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad0:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <HAL_SPI_MspInit+0x8c>)
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	@ (8003b24 <HAL_SPI_MspInit+0x8c>)
 8003ad6:	f043 0304 	orr.w	r3, r3, #4
 8003ada:	6193      	str	r3, [r2, #24]
 8003adc:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <HAL_SPI_MspInit+0x8c>)
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003ae8:	23a0      	movs	r3, #160	@ 0xa0
 8003aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003af0:	2303      	movs	r3, #3
 8003af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af4:	f107 0310 	add.w	r3, r7, #16
 8003af8:	4619      	mov	r1, r3
 8003afa:	480b      	ldr	r0, [pc, #44]	@ (8003b28 <HAL_SPI_MspInit+0x90>)
 8003afc:	f000 fcd2 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b00:	2340      	movs	r3, #64	@ 0x40
 8003b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0c:	f107 0310 	add.w	r3, r7, #16
 8003b10:	4619      	mov	r1, r3
 8003b12:	4805      	ldr	r0, [pc, #20]	@ (8003b28 <HAL_SPI_MspInit+0x90>)
 8003b14:	f000 fcc6 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b18:	bf00      	nop
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40013000 	.word	0x40013000
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40010800 	.word	0x40010800

08003b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b3c:	d113      	bne.n	8003b66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <HAL_TIM_Base_MspInit+0x44>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	4a0b      	ldr	r2, [pc, #44]	@ (8003b70 <HAL_TIM_Base_MspInit+0x44>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	61d3      	str	r3, [r2, #28]
 8003b4a:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <HAL_TIM_Base_MspInit+0x44>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2100      	movs	r1, #0
 8003b5a:	201c      	movs	r0, #28
 8003b5c:	f000 fa6b 	bl	8004036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b60:	201c      	movs	r0, #28
 8003b62:	f000 fa84 	bl	800406e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	@ 0x28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	f107 0314 	add.w	r3, r7, #20
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a22      	ldr	r2, [pc, #136]	@ (8003c18 <HAL_UART_MspInit+0xa4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d13d      	bne.n	8003c10 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b94:	4b21      	ldr	r3, [pc, #132]	@ (8003c1c <HAL_UART_MspInit+0xa8>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4a20      	ldr	r2, [pc, #128]	@ (8003c1c <HAL_UART_MspInit+0xa8>)
 8003b9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b9e:	6193      	str	r3, [r2, #24]
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c1c <HAL_UART_MspInit+0xa8>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bac:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <HAL_UART_MspInit+0xa8>)
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c1c <HAL_UART_MspInit+0xa8>)
 8003bb2:	f043 0308 	orr.w	r3, r3, #8
 8003bb6:	6193      	str	r3, [r2, #24]
 8003bb8:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <HAL_UART_MspInit+0xa8>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003bc4:	2340      	movs	r3, #64	@ 0x40
 8003bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4812      	ldr	r0, [pc, #72]	@ (8003c20 <HAL_UART_MspInit+0xac>)
 8003bd8:	f000 fc64 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bdc:	2380      	movs	r3, #128	@ 0x80
 8003bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4619      	mov	r1, r3
 8003bee:	480c      	ldr	r0, [pc, #48]	@ (8003c20 <HAL_UART_MspInit+0xac>)
 8003bf0:	f000 fc58 	bl	80044a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <HAL_UART_MspInit+0xb0>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	f043 0304 	orr.w	r3, r3, #4
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0a:	4a06      	ldr	r2, [pc, #24]	@ (8003c24 <HAL_UART_MspInit+0xb0>)
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c10:	bf00      	nop
 8003c12:	3728      	adds	r7, #40	@ 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40010c00 	.word	0x40010c00
 8003c24:	40010000 	.word	0x40010000

08003c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <NMI_Handler+0x4>

08003c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <HardFault_Handler+0x4>

08003c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c3c:	bf00      	nop
 8003c3e:	e7fd      	b.n	8003c3c <MemManage_Handler+0x4>

08003c40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c44:	bf00      	nop
 8003c46:	e7fd      	b.n	8003c44 <BusFault_Handler+0x4>

08003c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <UsageFault_Handler+0x4>

08003c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c78:	f000 f8c6 	bl	8003e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c7c:	bf00      	nop
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003c84:	4802      	ldr	r0, [pc, #8]	@ (8003c90 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003c86:	f001 fb5e 	bl	8005346 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	200010d0 	.word	0x200010d0

08003c94 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003c98:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003c9c:	f000 fdb6 	bl	800480c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ca0:	bf00      	nop
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ca8:	4802      	ldr	r0, [pc, #8]	@ (8003cb4 <TIM2_IRQHandler+0x10>)
 8003caa:	f003 fde7 	bl	800787c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200002c8 	.word	0x200002c8

08003cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cc0:	4a14      	ldr	r2, [pc, #80]	@ (8003d14 <_sbrk+0x5c>)
 8003cc2:	4b15      	ldr	r3, [pc, #84]	@ (8003d18 <_sbrk+0x60>)
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ccc:	4b13      	ldr	r3, [pc, #76]	@ (8003d1c <_sbrk+0x64>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d102      	bne.n	8003cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cd4:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <_sbrk+0x64>)
 8003cd6:	4a12      	ldr	r2, [pc, #72]	@ (8003d20 <_sbrk+0x68>)
 8003cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cda:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <_sbrk+0x64>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d207      	bcs.n	8003cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ce8:	f008 ffaa 	bl	800cc40 <__errno>
 8003cec:	4603      	mov	r3, r0
 8003cee:	220c      	movs	r2, #12
 8003cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf6:	e009      	b.n	8003d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cf8:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <_sbrk+0x64>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cfe:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <_sbrk+0x64>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	4a05      	ldr	r2, [pc, #20]	@ (8003d1c <_sbrk+0x64>)
 8003d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20005000 	.word	0x20005000
 8003d18:	00000400 	.word	0x00000400
 8003d1c:	20000410 	.word	0x20000410
 8003d20:	20001728 	.word	0x20001728

08003d24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003d30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003d32:	e003      	b.n	8003d3c <LoopCopyDataInit>

08003d34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003d34:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003d36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003d38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003d3a:	3104      	adds	r1, #4

08003d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003d3c:	480a      	ldr	r0, [pc, #40]	@ (8003d68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003d40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003d42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003d44:	d3f6      	bcc.n	8003d34 <CopyDataInit>
  ldr r2, =_sbss
 8003d46:	4a0a      	ldr	r2, [pc, #40]	@ (8003d70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003d48:	e002      	b.n	8003d50 <LoopFillZerobss>

08003d4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003d4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003d4c:	f842 3b04 	str.w	r3, [r2], #4

08003d50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003d50:	4b08      	ldr	r3, [pc, #32]	@ (8003d74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003d52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003d54:	d3f9      	bcc.n	8003d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d56:	f7ff ffe5 	bl	8003d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d5a:	f008 ff77 	bl	800cc4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d5e:	f7fd f935 	bl	8000fcc <main>
  bx lr
 8003d62:	4770      	bx	lr
  ldr r3, =_sidata
 8003d64:	0800de94 	.word	0x0800de94
  ldr r0, =_sdata
 8003d68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003d6c:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8003d70:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003d74:	20001724 	.word	0x20001724

08003d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d78:	e7fe      	b.n	8003d78 <ADC1_2_IRQHandler>
	...

08003d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d80:	4b08      	ldr	r3, [pc, #32]	@ (8003da4 <HAL_Init+0x28>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a07      	ldr	r2, [pc, #28]	@ (8003da4 <HAL_Init+0x28>)
 8003d86:	f043 0310 	orr.w	r3, r3, #16
 8003d8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d8c:	2003      	movs	r0, #3
 8003d8e:	f000 f947 	bl	8004020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d92:	2000      	movs	r0, #0
 8003d94:	f000 f808 	bl	8003da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d98:	f7ff fe0c 	bl	80039b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40022000 	.word	0x40022000

08003da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003db0:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <HAL_InitTick+0x54>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b12      	ldr	r3, [pc, #72]	@ (8003e00 <HAL_InitTick+0x58>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	4619      	mov	r1, r3
 8003dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f95f 	bl	800408a <HAL_SYSTICK_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00e      	b.n	8003df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b0f      	cmp	r3, #15
 8003dda:	d80a      	bhi.n	8003df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ddc:	2200      	movs	r2, #0
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	f000 f927 	bl	8004036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003de8:	4a06      	ldr	r2, [pc, #24]	@ (8003e04 <HAL_InitTick+0x5c>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000028 	.word	0x20000028
 8003e00:	20000030 	.word	0x20000030
 8003e04:	2000002c 	.word	0x2000002c

08003e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <HAL_IncTick+0x1c>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b05      	ldr	r3, [pc, #20]	@ (8003e28 <HAL_IncTick+0x20>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4413      	add	r3, r2
 8003e18:	4a03      	ldr	r2, [pc, #12]	@ (8003e28 <HAL_IncTick+0x20>)
 8003e1a:	6013      	str	r3, [r2, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr
 8003e24:	20000030 	.word	0x20000030
 8003e28:	20000414 	.word	0x20000414

08003e2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e30:	4b02      	ldr	r3, [pc, #8]	@ (8003e3c <HAL_GetTick+0x10>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	20000414 	.word	0x20000414

08003e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e48:	f7ff fff0 	bl	8003e2c <HAL_GetTick>
 8003e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d005      	beq.n	8003e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <HAL_Delay+0x44>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e66:	bf00      	nop
 8003e68:	f7ff ffe0 	bl	8003e2c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d8f7      	bhi.n	8003e68 <HAL_Delay+0x28>
  {
  }
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000030 	.word	0x20000030

08003e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ecc <__NVIC_SetPriorityGrouping+0x44>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eba:	4a04      	ldr	r2, [pc, #16]	@ (8003ecc <__NVIC_SetPriorityGrouping+0x44>)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	60d3      	str	r3, [r2, #12]
}
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed4:	4b04      	ldr	r3, [pc, #16]	@ (8003ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	f003 0307 	and.w	r3, r3, #7
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	db0b      	blt.n	8003f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	f003 021f 	and.w	r2, r3, #31
 8003f04:	4906      	ldr	r1, [pc, #24]	@ (8003f20 <__NVIC_EnableIRQ+0x34>)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	e000e100 	.word	0xe000e100

08003f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db0a      	blt.n	8003f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	490c      	ldr	r1, [pc, #48]	@ (8003f70 <__NVIC_SetPriority+0x4c>)
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	0112      	lsls	r2, r2, #4
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	440b      	add	r3, r1
 8003f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f4c:	e00a      	b.n	8003f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4908      	ldr	r1, [pc, #32]	@ (8003f74 <__NVIC_SetPriority+0x50>)
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	0112      	lsls	r2, r2, #4
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	440b      	add	r3, r1
 8003f62:	761a      	strb	r2, [r3, #24]
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	e000e100 	.word	0xe000e100
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	@ 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f1c3 0307 	rsb	r3, r3, #7
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	bf28      	it	cs
 8003f96:	2304      	movcs	r3, #4
 8003f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d902      	bls.n	8003fa8 <NVIC_EncodePriority+0x30>
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3b03      	subs	r3, #3
 8003fa6:	e000      	b.n	8003faa <NVIC_EncodePriority+0x32>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	401a      	ands	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	43d9      	mvns	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd0:	4313      	orrs	r3, r2
         );
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3724      	adds	r7, #36	@ 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fec:	d301      	bcc.n	8003ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e00f      	b.n	8004012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800401c <SysTick_Config+0x40>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffa:	210f      	movs	r1, #15
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	f7ff ff90 	bl	8003f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004004:	4b05      	ldr	r3, [pc, #20]	@ (800401c <SysTick_Config+0x40>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400a:	4b04      	ldr	r3, [pc, #16]	@ (800401c <SysTick_Config+0x40>)
 800400c:	2207      	movs	r2, #7
 800400e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	e000e010 	.word	0xe000e010

08004020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff2d 	bl	8003e88 <__NVIC_SetPriorityGrouping>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004048:	f7ff ff42 	bl	8003ed0 <__NVIC_GetPriorityGrouping>
 800404c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7ff ff90 	bl	8003f78 <NVIC_EncodePriority>
 8004058:	4602      	mov	r2, r0
 800405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff5f 	bl	8003f24 <__NVIC_SetPriority>
}
 8004066:	bf00      	nop
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	4603      	mov	r3, r0
 8004076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff35 	bl	8003eec <__NVIC_EnableIRQ>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ffa2 	bl	8003fdc <SysTick_Config>
 8004098:	4603      	mov	r3, r0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80040be:	4b2f      	ldr	r3, [pc, #188]	@ (800417c <HAL_FLASH_Program+0xd8>)
 80040c0:	7e1b      	ldrb	r3, [r3, #24]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_FLASH_Program+0x26>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e054      	b.n	8004174 <HAL_FLASH_Program+0xd0>
 80040ca:	4b2c      	ldr	r3, [pc, #176]	@ (800417c <HAL_FLASH_Program+0xd8>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80040d4:	f000 f8a8 	bl	8004228 <FLASH_WaitForLastOperation>
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d144      	bne.n	800416c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d102      	bne.n	80040ee <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80040e8:	2301      	movs	r3, #1
 80040ea:	757b      	strb	r3, [r7, #21]
 80040ec:	e007      	b.n	80040fe <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d102      	bne.n	80040fa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80040f4:	2302      	movs	r3, #2
 80040f6:	757b      	strb	r3, [r7, #21]
 80040f8:	e001      	b.n	80040fe <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80040fa:	2304      	movs	r3, #4
 80040fc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80040fe:	2300      	movs	r3, #0
 8004100:	75bb      	strb	r3, [r7, #22]
 8004102:	e02d      	b.n	8004160 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004104:	7dbb      	ldrb	r3, [r7, #22]
 8004106:	005a      	lsls	r2, r3, #1
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	eb02 0c03 	add.w	ip, r2, r3
 800410e:	7dbb      	ldrb	r3, [r7, #22]
 8004110:	0119      	lsls	r1, r3, #4
 8004112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004116:	f1c1 0620 	rsb	r6, r1, #32
 800411a:	f1a1 0020 	sub.w	r0, r1, #32
 800411e:	fa22 f401 	lsr.w	r4, r2, r1
 8004122:	fa03 f606 	lsl.w	r6, r3, r6
 8004126:	4334      	orrs	r4, r6
 8004128:	fa23 f000 	lsr.w	r0, r3, r0
 800412c:	4304      	orrs	r4, r0
 800412e:	fa23 f501 	lsr.w	r5, r3, r1
 8004132:	b2a3      	uxth	r3, r4
 8004134:	4619      	mov	r1, r3
 8004136:	4660      	mov	r0, ip
 8004138:	f000 f85a 	bl	80041f0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800413c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004140:	f000 f872 	bl	8004228 <FLASH_WaitForLastOperation>
 8004144:	4603      	mov	r3, r0
 8004146:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004148:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <HAL_FLASH_Program+0xdc>)
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	4a0c      	ldr	r2, [pc, #48]	@ (8004180 <HAL_FLASH_Program+0xdc>)
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800415a:	7dbb      	ldrb	r3, [r7, #22]
 800415c:	3301      	adds	r3, #1
 800415e:	75bb      	strb	r3, [r7, #22]
 8004160:	7dba      	ldrb	r2, [r7, #22]
 8004162:	7d7b      	ldrb	r3, [r7, #21]
 8004164:	429a      	cmp	r2, r3
 8004166:	d3cd      	bcc.n	8004104 <HAL_FLASH_Program+0x60>
 8004168:	e000      	b.n	800416c <HAL_FLASH_Program+0xc8>
      {
        break;
 800416a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800416c:	4b03      	ldr	r3, [pc, #12]	@ (800417c <HAL_FLASH_Program+0xd8>)
 800416e:	2200      	movs	r2, #0
 8004170:	761a      	strb	r2, [r3, #24]

  return status;
 8004172:	7dfb      	ldrb	r3, [r7, #23]
}
 8004174:	4618      	mov	r0, r3
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800417c:	20000418 	.word	0x20000418
 8004180:	40022000 	.word	0x40022000

08004184 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <HAL_FLASH_Unlock+0x40>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00d      	beq.n	80041b6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800419a:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <HAL_FLASH_Unlock+0x40>)
 800419c:	4a0a      	ldr	r2, [pc, #40]	@ (80041c8 <HAL_FLASH_Unlock+0x44>)
 800419e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80041a0:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <HAL_FLASH_Unlock+0x40>)
 80041a2:	4a0a      	ldr	r2, [pc, #40]	@ (80041cc <HAL_FLASH_Unlock+0x48>)
 80041a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041a6:	4b07      	ldr	r3, [pc, #28]	@ (80041c4 <HAL_FLASH_Unlock+0x40>)
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80041b6:	79fb      	ldrb	r3, [r7, #7]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40022000 	.word	0x40022000
 80041c8:	45670123 	.word	0x45670123
 80041cc:	cdef89ab 	.word	0xcdef89ab

080041d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_FLASH_Lock+0x1c>)
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	4a04      	ldr	r2, [pc, #16]	@ (80041ec <HAL_FLASH_Lock+0x1c>)
 80041da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40022000 	.word	0x40022000

080041f0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041fc:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <FLASH_Program_HalfWord+0x30>)
 80041fe:	2200      	movs	r2, #0
 8004200:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004202:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <FLASH_Program_HalfWord+0x34>)
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	4a07      	ldr	r2, [pc, #28]	@ (8004224 <FLASH_Program_HalfWord+0x34>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	887a      	ldrh	r2, [r7, #2]
 8004212:	801a      	strh	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000418 	.word	0x20000418
 8004224:	40022000 	.word	0x40022000

08004228 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004230:	f7ff fdfc 	bl	8003e2c <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004236:	e010      	b.n	800425a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d00c      	beq.n	800425a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <FLASH_WaitForLastOperation+0x2e>
 8004246:	f7ff fdf1 	bl	8003e2c <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d201      	bcs.n	800425a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e025      	b.n	80042a6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800425a:	4b15      	ldr	r3, [pc, #84]	@ (80042b0 <FLASH_WaitForLastOperation+0x88>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e8      	bne.n	8004238 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004266:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <FLASH_WaitForLastOperation+0x88>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004272:	4b0f      	ldr	r3, [pc, #60]	@ (80042b0 <FLASH_WaitForLastOperation+0x88>)
 8004274:	2220      	movs	r2, #32
 8004276:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004278:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <FLASH_WaitForLastOperation+0x88>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004284:	4b0a      	ldr	r3, [pc, #40]	@ (80042b0 <FLASH_WaitForLastOperation+0x88>)
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004290:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <FLASH_WaitForLastOperation+0x88>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800429c:	f000 f80a 	bl	80042b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40022000 	.word	0x40022000

080042b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80042be:	4b23      	ldr	r3, [pc, #140]	@ (800434c <FLASH_SetErrorCode+0x98>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d009      	beq.n	80042de <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80042ca:	4b21      	ldr	r3, [pc, #132]	@ (8004350 <FLASH_SetErrorCode+0x9c>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f043 0302 	orr.w	r3, r3, #2
 80042d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004350 <FLASH_SetErrorCode+0x9c>)
 80042d4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f043 0310 	orr.w	r3, r3, #16
 80042dc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80042de:	4b1b      	ldr	r3, [pc, #108]	@ (800434c <FLASH_SetErrorCode+0x98>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80042ea:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <FLASH_SetErrorCode+0x9c>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	4a17      	ldr	r2, [pc, #92]	@ (8004350 <FLASH_SetErrorCode+0x9c>)
 80042f4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f043 0304 	orr.w	r3, r3, #4
 80042fc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80042fe:	4b13      	ldr	r3, [pc, #76]	@ (800434c <FLASH_SetErrorCode+0x98>)
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800430a:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <FLASH_SetErrorCode+0x9c>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f043 0304 	orr.w	r3, r3, #4
 8004312:	4a0f      	ldr	r2, [pc, #60]	@ (8004350 <FLASH_SetErrorCode+0x9c>)
 8004314:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004316:	4b0d      	ldr	r3, [pc, #52]	@ (800434c <FLASH_SetErrorCode+0x98>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	4a0c      	ldr	r2, [pc, #48]	@ (800434c <FLASH_SetErrorCode+0x98>)
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f240 1201 	movw	r2, #257	@ 0x101
 8004328:	4293      	cmp	r3, r2
 800432a:	d106      	bne.n	800433a <FLASH_SetErrorCode+0x86>
 800432c:	4b07      	ldr	r3, [pc, #28]	@ (800434c <FLASH_SetErrorCode+0x98>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4a06      	ldr	r2, [pc, #24]	@ (800434c <FLASH_SetErrorCode+0x98>)
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	61d3      	str	r3, [r2, #28]
}  
 8004338:	e002      	b.n	8004340 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800433a:	4a04      	ldr	r2, [pc, #16]	@ (800434c <FLASH_SetErrorCode+0x98>)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60d3      	str	r3, [r2, #12]
}  
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40022000 	.word	0x40022000
 8004350:	20000418 	.word	0x20000418

08004354 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004366:	4b2f      	ldr	r3, [pc, #188]	@ (8004424 <HAL_FLASHEx_Erase+0xd0>)
 8004368:	7e1b      	ldrb	r3, [r3, #24]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_FLASHEx_Erase+0x1e>
 800436e:	2302      	movs	r3, #2
 8004370:	e053      	b.n	800441a <HAL_FLASHEx_Erase+0xc6>
 8004372:	4b2c      	ldr	r3, [pc, #176]	@ (8004424 <HAL_FLASHEx_Erase+0xd0>)
 8004374:	2201      	movs	r2, #1
 8004376:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d116      	bne.n	80043ae <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004380:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004384:	f7ff ff50 	bl	8004228 <FLASH_WaitForLastOperation>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d141      	bne.n	8004412 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800438e:	2001      	movs	r0, #1
 8004390:	f000 f84c 	bl	800442c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004394:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004398:	f7ff ff46 	bl	8004228 <FLASH_WaitForLastOperation>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80043a0:	4b21      	ldr	r3, [pc, #132]	@ (8004428 <HAL_FLASHEx_Erase+0xd4>)
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	4a20      	ldr	r2, [pc, #128]	@ (8004428 <HAL_FLASHEx_Erase+0xd4>)
 80043a6:	f023 0304 	bic.w	r3, r3, #4
 80043aa:	6113      	str	r3, [r2, #16]
 80043ac:	e031      	b.n	8004412 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80043ae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80043b2:	f7ff ff39 	bl	8004228 <FLASH_WaitForLastOperation>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d12a      	bne.n	8004412 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f04f 32ff 	mov.w	r2, #4294967295
 80043c2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	e019      	b.n	8004400 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80043cc:	68b8      	ldr	r0, [r7, #8]
 80043ce:	f000 f849 	bl	8004464 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043d2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80043d6:	f7ff ff27 	bl	8004228 <FLASH_WaitForLastOperation>
 80043da:	4603      	mov	r3, r0
 80043dc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80043de:	4b12      	ldr	r3, [pc, #72]	@ (8004428 <HAL_FLASHEx_Erase+0xd4>)
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	4a11      	ldr	r2, [pc, #68]	@ (8004428 <HAL_FLASHEx_Erase+0xd4>)
 80043e4:	f023 0302 	bic.w	r3, r3, #2
 80043e8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	601a      	str	r2, [r3, #0]
            break;
 80043f6:	e00c      	b.n	8004412 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043fe:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	029a      	lsls	r2, r3, #10
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	4413      	add	r3, r2
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	d3dc      	bcc.n	80043cc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004412:	4b04      	ldr	r3, [pc, #16]	@ (8004424 <HAL_FLASHEx_Erase+0xd0>)
 8004414:	2200      	movs	r2, #0
 8004416:	761a      	strb	r2, [r3, #24]

  return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000418 	.word	0x20000418
 8004428:	40022000 	.word	0x40022000

0800442c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004434:	4b09      	ldr	r3, [pc, #36]	@ (800445c <FLASH_MassErase+0x30>)
 8004436:	2200      	movs	r2, #0
 8004438:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800443a:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <FLASH_MassErase+0x34>)
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	4a08      	ldr	r2, [pc, #32]	@ (8004460 <FLASH_MassErase+0x34>)
 8004440:	f043 0304 	orr.w	r3, r3, #4
 8004444:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004446:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <FLASH_MassErase+0x34>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4a05      	ldr	r2, [pc, #20]	@ (8004460 <FLASH_MassErase+0x34>)
 800444c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004450:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	20000418 	.word	0x20000418
 8004460:	40022000 	.word	0x40022000

08004464 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800446c:	4b0b      	ldr	r3, [pc, #44]	@ (800449c <FLASH_PageErase+0x38>)
 800446e:	2200      	movs	r2, #0
 8004470:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004472:	4b0b      	ldr	r3, [pc, #44]	@ (80044a0 <FLASH_PageErase+0x3c>)
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	4a0a      	ldr	r2, [pc, #40]	@ (80044a0 <FLASH_PageErase+0x3c>)
 8004478:	f043 0302 	orr.w	r3, r3, #2
 800447c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800447e:	4a08      	ldr	r2, [pc, #32]	@ (80044a0 <FLASH_PageErase+0x3c>)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004484:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <FLASH_PageErase+0x3c>)
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	4a05      	ldr	r2, [pc, #20]	@ (80044a0 <FLASH_PageErase+0x3c>)
 800448a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800448e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000418 	.word	0x20000418
 80044a0:	40022000 	.word	0x40022000

080044a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b08b      	sub	sp, #44	@ 0x2c
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ae:	2300      	movs	r3, #0
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044b2:	2300      	movs	r3, #0
 80044b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044b6:	e169      	b.n	800478c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044b8:	2201      	movs	r2, #1
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	f040 8158 	bne.w	8004786 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4a9a      	ldr	r2, [pc, #616]	@ (8004744 <HAL_GPIO_Init+0x2a0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d05e      	beq.n	800459e <HAL_GPIO_Init+0xfa>
 80044e0:	4a98      	ldr	r2, [pc, #608]	@ (8004744 <HAL_GPIO_Init+0x2a0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d875      	bhi.n	80045d2 <HAL_GPIO_Init+0x12e>
 80044e6:	4a98      	ldr	r2, [pc, #608]	@ (8004748 <HAL_GPIO_Init+0x2a4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d058      	beq.n	800459e <HAL_GPIO_Init+0xfa>
 80044ec:	4a96      	ldr	r2, [pc, #600]	@ (8004748 <HAL_GPIO_Init+0x2a4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d86f      	bhi.n	80045d2 <HAL_GPIO_Init+0x12e>
 80044f2:	4a96      	ldr	r2, [pc, #600]	@ (800474c <HAL_GPIO_Init+0x2a8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d052      	beq.n	800459e <HAL_GPIO_Init+0xfa>
 80044f8:	4a94      	ldr	r2, [pc, #592]	@ (800474c <HAL_GPIO_Init+0x2a8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d869      	bhi.n	80045d2 <HAL_GPIO_Init+0x12e>
 80044fe:	4a94      	ldr	r2, [pc, #592]	@ (8004750 <HAL_GPIO_Init+0x2ac>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d04c      	beq.n	800459e <HAL_GPIO_Init+0xfa>
 8004504:	4a92      	ldr	r2, [pc, #584]	@ (8004750 <HAL_GPIO_Init+0x2ac>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d863      	bhi.n	80045d2 <HAL_GPIO_Init+0x12e>
 800450a:	4a92      	ldr	r2, [pc, #584]	@ (8004754 <HAL_GPIO_Init+0x2b0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d046      	beq.n	800459e <HAL_GPIO_Init+0xfa>
 8004510:	4a90      	ldr	r2, [pc, #576]	@ (8004754 <HAL_GPIO_Init+0x2b0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d85d      	bhi.n	80045d2 <HAL_GPIO_Init+0x12e>
 8004516:	2b12      	cmp	r3, #18
 8004518:	d82a      	bhi.n	8004570 <HAL_GPIO_Init+0xcc>
 800451a:	2b12      	cmp	r3, #18
 800451c:	d859      	bhi.n	80045d2 <HAL_GPIO_Init+0x12e>
 800451e:	a201      	add	r2, pc, #4	@ (adr r2, 8004524 <HAL_GPIO_Init+0x80>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	0800459f 	.word	0x0800459f
 8004528:	08004579 	.word	0x08004579
 800452c:	0800458b 	.word	0x0800458b
 8004530:	080045cd 	.word	0x080045cd
 8004534:	080045d3 	.word	0x080045d3
 8004538:	080045d3 	.word	0x080045d3
 800453c:	080045d3 	.word	0x080045d3
 8004540:	080045d3 	.word	0x080045d3
 8004544:	080045d3 	.word	0x080045d3
 8004548:	080045d3 	.word	0x080045d3
 800454c:	080045d3 	.word	0x080045d3
 8004550:	080045d3 	.word	0x080045d3
 8004554:	080045d3 	.word	0x080045d3
 8004558:	080045d3 	.word	0x080045d3
 800455c:	080045d3 	.word	0x080045d3
 8004560:	080045d3 	.word	0x080045d3
 8004564:	080045d3 	.word	0x080045d3
 8004568:	08004581 	.word	0x08004581
 800456c:	08004595 	.word	0x08004595
 8004570:	4a79      	ldr	r2, [pc, #484]	@ (8004758 <HAL_GPIO_Init+0x2b4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004576:	e02c      	b.n	80045d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	623b      	str	r3, [r7, #32]
          break;
 800457e:	e029      	b.n	80045d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	3304      	adds	r3, #4
 8004586:	623b      	str	r3, [r7, #32]
          break;
 8004588:	e024      	b.n	80045d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	3308      	adds	r3, #8
 8004590:	623b      	str	r3, [r7, #32]
          break;
 8004592:	e01f      	b.n	80045d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	330c      	adds	r3, #12
 800459a:	623b      	str	r3, [r7, #32]
          break;
 800459c:	e01a      	b.n	80045d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045a6:	2304      	movs	r3, #4
 80045a8:	623b      	str	r3, [r7, #32]
          break;
 80045aa:	e013      	b.n	80045d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d105      	bne.n	80045c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045b4:	2308      	movs	r3, #8
 80045b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69fa      	ldr	r2, [r7, #28]
 80045bc:	611a      	str	r2, [r3, #16]
          break;
 80045be:	e009      	b.n	80045d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045c0:	2308      	movs	r3, #8
 80045c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	615a      	str	r2, [r3, #20]
          break;
 80045ca:	e003      	b.n	80045d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045cc:	2300      	movs	r3, #0
 80045ce:	623b      	str	r3, [r7, #32]
          break;
 80045d0:	e000      	b.n	80045d4 <HAL_GPIO_Init+0x130>
          break;
 80045d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2bff      	cmp	r3, #255	@ 0xff
 80045d8:	d801      	bhi.n	80045de <HAL_GPIO_Init+0x13a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	e001      	b.n	80045e2 <HAL_GPIO_Init+0x13e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3304      	adds	r3, #4
 80045e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2bff      	cmp	r3, #255	@ 0xff
 80045e8:	d802      	bhi.n	80045f0 <HAL_GPIO_Init+0x14c>
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	e002      	b.n	80045f6 <HAL_GPIO_Init+0x152>
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	3b08      	subs	r3, #8
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	210f      	movs	r1, #15
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	fa01 f303 	lsl.w	r3, r1, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	401a      	ands	r2, r3
 8004608:	6a39      	ldr	r1, [r7, #32]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	431a      	orrs	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80b1 	beq.w	8004786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004624:	4b4d      	ldr	r3, [pc, #308]	@ (800475c <HAL_GPIO_Init+0x2b8>)
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	4a4c      	ldr	r2, [pc, #304]	@ (800475c <HAL_GPIO_Init+0x2b8>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6193      	str	r3, [r2, #24]
 8004630:	4b4a      	ldr	r3, [pc, #296]	@ (800475c <HAL_GPIO_Init+0x2b8>)
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800463c:	4a48      	ldr	r2, [pc, #288]	@ (8004760 <HAL_GPIO_Init+0x2bc>)
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	3302      	adds	r3, #2
 8004644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	220f      	movs	r2, #15
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4013      	ands	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a40      	ldr	r2, [pc, #256]	@ (8004764 <HAL_GPIO_Init+0x2c0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <HAL_GPIO_Init+0x1ec>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a3f      	ldr	r2, [pc, #252]	@ (8004768 <HAL_GPIO_Init+0x2c4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00d      	beq.n	800468c <HAL_GPIO_Init+0x1e8>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a3e      	ldr	r2, [pc, #248]	@ (800476c <HAL_GPIO_Init+0x2c8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d007      	beq.n	8004688 <HAL_GPIO_Init+0x1e4>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a3d      	ldr	r2, [pc, #244]	@ (8004770 <HAL_GPIO_Init+0x2cc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d101      	bne.n	8004684 <HAL_GPIO_Init+0x1e0>
 8004680:	2303      	movs	r3, #3
 8004682:	e006      	b.n	8004692 <HAL_GPIO_Init+0x1ee>
 8004684:	2304      	movs	r3, #4
 8004686:	e004      	b.n	8004692 <HAL_GPIO_Init+0x1ee>
 8004688:	2302      	movs	r3, #2
 800468a:	e002      	b.n	8004692 <HAL_GPIO_Init+0x1ee>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <HAL_GPIO_Init+0x1ee>
 8004690:	2300      	movs	r3, #0
 8004692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004694:	f002 0203 	and.w	r2, r2, #3
 8004698:	0092      	lsls	r2, r2, #2
 800469a:	4093      	lsls	r3, r2
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046a2:	492f      	ldr	r1, [pc, #188]	@ (8004760 <HAL_GPIO_Init+0x2bc>)
 80046a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a6:	089b      	lsrs	r3, r3, #2
 80046a8:	3302      	adds	r3, #2
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d006      	beq.n	80046ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	492c      	ldr	r1, [pc, #176]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	600b      	str	r3, [r1, #0]
 80046c8:	e006      	b.n	80046d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	4928      	ldr	r1, [pc, #160]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d006      	beq.n	80046f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046e4:	4b23      	ldr	r3, [pc, #140]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	4922      	ldr	r1, [pc, #136]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	604b      	str	r3, [r1, #4]
 80046f0:	e006      	b.n	8004700 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046f2:	4b20      	ldr	r3, [pc, #128]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	491e      	ldr	r1, [pc, #120]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d006      	beq.n	800471a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800470c:	4b19      	ldr	r3, [pc, #100]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	4918      	ldr	r1, [pc, #96]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	4313      	orrs	r3, r2
 8004716:	608b      	str	r3, [r1, #8]
 8004718:	e006      	b.n	8004728 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800471a:	4b16      	ldr	r3, [pc, #88]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	43db      	mvns	r3, r3
 8004722:	4914      	ldr	r1, [pc, #80]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 8004724:	4013      	ands	r3, r2
 8004726:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d021      	beq.n	8004778 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004734:	4b0f      	ldr	r3, [pc, #60]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	490e      	ldr	r1, [pc, #56]	@ (8004774 <HAL_GPIO_Init+0x2d0>)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	4313      	orrs	r3, r2
 800473e:	60cb      	str	r3, [r1, #12]
 8004740:	e021      	b.n	8004786 <HAL_GPIO_Init+0x2e2>
 8004742:	bf00      	nop
 8004744:	10320000 	.word	0x10320000
 8004748:	10310000 	.word	0x10310000
 800474c:	10220000 	.word	0x10220000
 8004750:	10210000 	.word	0x10210000
 8004754:	10120000 	.word	0x10120000
 8004758:	10110000 	.word	0x10110000
 800475c:	40021000 	.word	0x40021000
 8004760:	40010000 	.word	0x40010000
 8004764:	40010800 	.word	0x40010800
 8004768:	40010c00 	.word	0x40010c00
 800476c:	40011000 	.word	0x40011000
 8004770:	40011400 	.word	0x40011400
 8004774:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004778:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <HAL_GPIO_Init+0x304>)
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	43db      	mvns	r3, r3
 8004780:	4909      	ldr	r1, [pc, #36]	@ (80047a8 <HAL_GPIO_Init+0x304>)
 8004782:	4013      	ands	r3, r2
 8004784:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	3301      	adds	r3, #1
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	fa22 f303 	lsr.w	r3, r2, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	f47f ae8e 	bne.w	80044b8 <HAL_GPIO_Init+0x14>
  }
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	372c      	adds	r7, #44	@ 0x2c
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr
 80047a8:	40010400 	.word	0x40010400

080047ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	887b      	ldrh	r3, [r7, #2]
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e001      	b.n	80047ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	807b      	strh	r3, [r7, #2]
 80047e6:	4613      	mov	r3, r2
 80047e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047ea:	787b      	ldrb	r3, [r7, #1]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047f0:	887a      	ldrh	r2, [r7, #2]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047f6:	e003      	b.n	8004800 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047f8:	887b      	ldrh	r3, [r7, #2]
 80047fa:	041a      	lsls	r2, r3, #16
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	611a      	str	r2, [r3, #16]
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr
	...

0800480c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004816:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	4013      	ands	r3, r2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d006      	beq.n	8004830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004822:	4a05      	ldr	r2, [pc, #20]	@ (8004838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f806 	bl	800483c <HAL_GPIO_EXTI_Callback>
  }
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40010400 	.word	0x40010400

0800483c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr

08004850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e12b      	b.n	8004aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff f8ce 	bl	8003a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2224      	movs	r2, #36	@ 0x24
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0201 	bic.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048b4:	f002 fb78 	bl	8006fa8 <HAL_RCC_GetPCLK1Freq>
 80048b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	4a81      	ldr	r2, [pc, #516]	@ (8004ac4 <HAL_I2C_Init+0x274>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d807      	bhi.n	80048d4 <HAL_I2C_Init+0x84>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a80      	ldr	r2, [pc, #512]	@ (8004ac8 <HAL_I2C_Init+0x278>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bf94      	ite	ls
 80048cc:	2301      	movls	r3, #1
 80048ce:	2300      	movhi	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	e006      	b.n	80048e2 <HAL_I2C_Init+0x92>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a7d      	ldr	r2, [pc, #500]	@ (8004acc <HAL_I2C_Init+0x27c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	bf94      	ite	ls
 80048dc:	2301      	movls	r3, #1
 80048de:	2300      	movhi	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0e7      	b.n	8004aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a78      	ldr	r2, [pc, #480]	@ (8004ad0 <HAL_I2C_Init+0x280>)
 80048ee:	fba2 2303 	umull	r2, r3, r2, r3
 80048f2:	0c9b      	lsrs	r3, r3, #18
 80048f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4a6a      	ldr	r2, [pc, #424]	@ (8004ac4 <HAL_I2C_Init+0x274>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d802      	bhi.n	8004924 <HAL_I2C_Init+0xd4>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	3301      	adds	r3, #1
 8004922:	e009      	b.n	8004938 <HAL_I2C_Init+0xe8>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	4a69      	ldr	r2, [pc, #420]	@ (8004ad4 <HAL_I2C_Init+0x284>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	099b      	lsrs	r3, r3, #6
 8004936:	3301      	adds	r3, #1
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	430b      	orrs	r3, r1
 800493e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800494a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	495c      	ldr	r1, [pc, #368]	@ (8004ac4 <HAL_I2C_Init+0x274>)
 8004954:	428b      	cmp	r3, r1
 8004956:	d819      	bhi.n	800498c <HAL_I2C_Init+0x13c>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	1e59      	subs	r1, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	fbb1 f3f3 	udiv	r3, r1, r3
 8004966:	1c59      	adds	r1, r3, #1
 8004968:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800496c:	400b      	ands	r3, r1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_I2C_Init+0x138>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1e59      	subs	r1, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004980:	3301      	adds	r3, #1
 8004982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004986:	e051      	b.n	8004a2c <HAL_I2C_Init+0x1dc>
 8004988:	2304      	movs	r3, #4
 800498a:	e04f      	b.n	8004a2c <HAL_I2C_Init+0x1dc>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d111      	bne.n	80049b8 <HAL_I2C_Init+0x168>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1e58      	subs	r0, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	440b      	add	r3, r1
 80049a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a6:	3301      	adds	r3, #1
 80049a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e012      	b.n	80049de <HAL_I2C_Init+0x18e>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1e58      	subs	r0, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	0099      	lsls	r1, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ce:	3301      	adds	r3, #1
 80049d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_I2C_Init+0x196>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e022      	b.n	8004a2c <HAL_I2C_Init+0x1dc>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10e      	bne.n	8004a0c <HAL_I2C_Init+0x1bc>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1e58      	subs	r0, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6859      	ldr	r1, [r3, #4]
 80049f6:	460b      	mov	r3, r1
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	440b      	add	r3, r1
 80049fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a00:	3301      	adds	r3, #1
 8004a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0a:	e00f      	b.n	8004a2c <HAL_I2C_Init+0x1dc>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1e58      	subs	r0, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6859      	ldr	r1, [r3, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	0099      	lsls	r1, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a22:	3301      	adds	r3, #1
 8004a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	6809      	ldr	r1, [r1, #0]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6911      	ldr	r1, [r2, #16]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68d2      	ldr	r2, [r2, #12]
 8004a66:	4311      	orrs	r1, r2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	000186a0 	.word	0x000186a0
 8004ac8:	001e847f 	.word	0x001e847f
 8004acc:	003d08ff 	.word	0x003d08ff
 8004ad0:	431bde83 	.word	0x431bde83
 8004ad4:	10624dd3 	.word	0x10624dd3

08004ad8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	817b      	strh	r3, [r7, #10]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aec:	f7ff f99e 	bl	8003e2c <HAL_GetTick>
 8004af0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	f040 80e0 	bne.w	8004cc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	2319      	movs	r3, #25
 8004b06:	2201      	movs	r2, #1
 8004b08:	4970      	ldr	r1, [pc, #448]	@ (8004ccc <HAL_I2C_Master_Transmit+0x1f4>)
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f964 	bl	8004dd8 <I2C_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b16:	2302      	movs	r3, #2
 8004b18:	e0d3      	b.n	8004cc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_I2C_Master_Transmit+0x50>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e0cc      	b.n	8004cc2 <HAL_I2C_Master_Transmit+0x1ea>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d007      	beq.n	8004b4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2221      	movs	r2, #33	@ 0x21
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	893a      	ldrh	r2, [r7, #8]
 8004b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4a50      	ldr	r2, [pc, #320]	@ (8004cd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b90:	8979      	ldrh	r1, [r7, #10]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	6a3a      	ldr	r2, [r7, #32]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f89c 	bl	8004cd4 <I2C_MasterRequestWrite>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e08d      	b.n	8004cc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004bbc:	e066      	b.n	8004c8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	6a39      	ldr	r1, [r7, #32]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f9de 	bl	8004f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00d      	beq.n	8004bea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d107      	bne.n	8004be6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e06b      	b.n	8004cc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	781a      	ldrb	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d11b      	bne.n	8004c60 <HAL_I2C_Master_Transmit+0x188>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d017      	beq.n	8004c60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	781a      	ldrb	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	6a39      	ldr	r1, [r7, #32]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f9ce 	bl	8005006 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00d      	beq.n	8004c8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d107      	bne.n	8004c88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e01a      	b.n	8004cc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d194      	bne.n	8004bbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e000      	b.n	8004cc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	00100002 	.word	0x00100002
 8004cd0:	ffff0000 	.word	0xffff0000

08004cd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d006      	beq.n	8004cfe <I2C_MasterRequestWrite+0x2a>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d003      	beq.n	8004cfe <I2C_MasterRequestWrite+0x2a>
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cfc:	d108      	bne.n	8004d10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e00b      	b.n	8004d28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d14:	2b12      	cmp	r3, #18
 8004d16:	d107      	bne.n	8004d28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f84f 	bl	8004dd8 <I2C_WaitOnFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d4e:	d103      	bne.n	8004d58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e035      	b.n	8004dc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d64:	d108      	bne.n	8004d78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d66:	897b      	ldrh	r3, [r7, #10]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d74:	611a      	str	r2, [r3, #16]
 8004d76:	e01b      	b.n	8004db0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d78:	897b      	ldrh	r3, [r7, #10]
 8004d7a:	11db      	asrs	r3, r3, #7
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 0306 	and.w	r3, r3, #6
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f063 030f 	orn	r3, r3, #15
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	490e      	ldr	r1, [pc, #56]	@ (8004dd0 <I2C_MasterRequestWrite+0xfc>)
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f875 	bl	8004e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e010      	b.n	8004dc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004da6:	897b      	ldrh	r3, [r7, #10]
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4907      	ldr	r1, [pc, #28]	@ (8004dd4 <I2C_MasterRequestWrite+0x100>)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f865 	bl	8004e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	00010008 	.word	0x00010008
 8004dd4:	00010002 	.word	0x00010002

08004dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	4613      	mov	r3, r2
 8004de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de8:	e025      	b.n	8004e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df0:	d021      	beq.n	8004e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df2:	f7ff f81b 	bl	8003e2c <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d302      	bcc.n	8004e08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d116      	bne.n	8004e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	f043 0220 	orr.w	r2, r3, #32
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e023      	b.n	8004e7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	0c1b      	lsrs	r3, r3, #16
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10d      	bne.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	43da      	mvns	r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bf0c      	ite	eq
 8004e52:	2301      	moveq	r3, #1
 8004e54:	2300      	movne	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	e00c      	b.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	43da      	mvns	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4013      	ands	r3, r2
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bf0c      	ite	eq
 8004e6e:	2301      	moveq	r3, #1
 8004e70:	2300      	movne	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d0b6      	beq.n	8004dea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e94:	e051      	b.n	8004f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea4:	d123      	bne.n	8004eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ebe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	f043 0204 	orr.w	r2, r3, #4
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e046      	b.n	8004f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef4:	d021      	beq.n	8004f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef6:	f7fe ff99 	bl	8003e2c <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d116      	bne.n	8004f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	f043 0220 	orr.w	r2, r3, #32
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e020      	b.n	8004f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	0c1b      	lsrs	r3, r3, #16
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d10c      	bne.n	8004f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	43da      	mvns	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bf14      	ite	ne
 8004f56:	2301      	movne	r3, #1
 8004f58:	2300      	moveq	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	e00b      	b.n	8004f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	43da      	mvns	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d18d      	bne.n	8004e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f90:	e02d      	b.n	8004fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f878 	bl	8005088 <I2C_IsAcknowledgeFailed>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e02d      	b.n	8004ffe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d021      	beq.n	8004fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004faa:	f7fe ff3f 	bl	8003e2c <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d302      	bcc.n	8004fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d116      	bne.n	8004fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e007      	b.n	8004ffe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff8:	2b80      	cmp	r3, #128	@ 0x80
 8004ffa:	d1ca      	bne.n	8004f92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005012:	e02d      	b.n	8005070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f837 	bl	8005088 <I2C_IsAcknowledgeFailed>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e02d      	b.n	8005080 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d021      	beq.n	8005070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502c:	f7fe fefe 	bl	8003e2c <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	429a      	cmp	r2, r3
 800503a:	d302      	bcc.n	8005042 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d116      	bne.n	8005070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e007      	b.n	8005080 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b04      	cmp	r3, #4
 800507c:	d1ca      	bne.n	8005014 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509e:	d11b      	bne.n	80050d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c4:	f043 0204 	orr.w	r2, r3, #4
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr

080050e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e6:	b08b      	sub	sp, #44	@ 0x2c
 80050e8:	af06      	add	r7, sp, #24
 80050ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e0fd      	b.n	80052f2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f007 fa0a 	bl	800c524 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2203      	movs	r2, #3
 8005114:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f003 f981 	bl	8008424 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	687e      	ldr	r6, [r7, #4]
 800512a:	466d      	mov	r5, sp
 800512c:	f106 0410 	add.w	r4, r6, #16
 8005130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	602b      	str	r3, [r5, #0]
 8005138:	1d33      	adds	r3, r6, #4
 800513a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800513c:	6838      	ldr	r0, [r7, #0]
 800513e:	f003 f94b 	bl	80083d8 <USB_CoreInit>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0ce      	b.n	80052f2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f003 f97c 	bl	8008458 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]
 8005164:	e04c      	b.n	8005200 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	440b      	add	r3, r1
 8005176:	3301      	adds	r3, #1
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	440b      	add	r3, r1
 800518c:	7bfa      	ldrb	r2, [r7, #15]
 800518e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	b298      	uxth	r0, r3
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	440b      	add	r3, r1
 80051a2:	3336      	adds	r3, #54	@ 0x36
 80051a4:	4602      	mov	r2, r0
 80051a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	440b      	add	r3, r1
 80051b8:	3303      	adds	r3, #3
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	3338      	adds	r3, #56	@ 0x38
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051d2:	7bfa      	ldrb	r2, [r7, #15]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	440b      	add	r3, r1
 80051e0:	333c      	adds	r3, #60	@ 0x3c
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	440b      	add	r3, r1
 80051f4:	3340      	adds	r3, #64	@ 0x40
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	3301      	adds	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
 8005200:	7bfa      	ldrb	r2, [r7, #15]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	429a      	cmp	r2, r3
 8005208:	d3ad      	bcc.n	8005166 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
 800520e:	e044      	b.n	800529a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005210:	7bfa      	ldrb	r2, [r7, #15]
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	440b      	add	r3, r1
 800521e:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005226:	7bfa      	ldrb	r2, [r7, #15]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	440b      	add	r3, r1
 8005234:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005238:	7bfa      	ldrb	r2, [r7, #15]
 800523a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800523c:	7bfa      	ldrb	r2, [r7, #15]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	440b      	add	r3, r1
 800524a:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005252:	7bfa      	ldrb	r2, [r7, #15]
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	440b      	add	r3, r1
 8005260:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005268:	7bfa      	ldrb	r2, [r7, #15]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	440b      	add	r3, r1
 8005276:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800527e:	7bfa      	ldrb	r2, [r7, #15]
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	440b      	add	r3, r1
 800528c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	3301      	adds	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
 800529a:	7bfa      	ldrb	r2, [r7, #15]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d3b5      	bcc.n	8005210 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	603b      	str	r3, [r7, #0]
 80052aa:	687e      	ldr	r6, [r7, #4]
 80052ac:	466d      	mov	r5, sp
 80052ae:	f106 0410 	add.w	r4, r6, #16
 80052b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	602b      	str	r3, [r5, #0]
 80052ba:	1d33      	adds	r3, r6, #4
 80052bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052be:	6838      	ldr	r0, [r7, #0]
 80052c0:	f003 f8d6 	bl	8008470 <USB_DevInit>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e00d      	b.n	80052f2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f005 faf7 	bl	800a8de <USB_DevDisconnect>

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_PCD_Start+0x16>
 800530c:	2302      	movs	r3, #2
 800530e:	e016      	b.n	800533e <HAL_PCD_Start+0x44>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f003 f86b 	bl	80083f8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005322:	2101      	movs	r1, #1
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f007 fb70 	bl	800ca0a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f005 facb 	bl	800a8ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b088      	sub	sp, #32
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f005 facd 	bl	800a8f2 <USB_ReadInterrupts>
 8005358:	4603      	mov	r3, r0
 800535a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800535e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005362:	d102      	bne.n	800536a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fb5f 	bl	8005a28 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f005 fabf 	bl	800a8f2 <USB_ReadInterrupts>
 8005374:	4603      	mov	r3, r0
 8005376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800537e:	d112      	bne.n	80053a6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005388:	b29a      	uxth	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005392:	b292      	uxth	r2, r2
 8005394:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f007 f93e 	bl	800c61a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800539e:	2100      	movs	r1, #0
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f923 	bl	80055ec <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f005 faa1 	bl	800a8f2 <USB_ReadInterrupts>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053ba:	d10b      	bne.n	80053d4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053ce:	b292      	uxth	r2, r2
 80053d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f005 fa8a 	bl	800a8f2 <USB_ReadInterrupts>
 80053de:	4603      	mov	r3, r0
 80053e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e8:	d10b      	bne.n	8005402 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053fc:	b292      	uxth	r2, r2
 80053fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f005 fa73 	bl	800a8f2 <USB_ReadInterrupts>
 800540c:	4603      	mov	r3, r0
 800540e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005416:	d126      	bne.n	8005466 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005420:	b29a      	uxth	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0204 	bic.w	r2, r2, #4
 800542a:	b292      	uxth	r2, r2
 800542c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005438:	b29a      	uxth	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0208 	bic.w	r2, r2, #8
 8005442:	b292      	uxth	r2, r2
 8005444:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f007 f91f 	bl	800c68c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005456:	b29a      	uxth	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005460:	b292      	uxth	r2, r2
 8005462:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f005 fa41 	bl	800a8f2 <USB_ReadInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800547a:	f040 8082 	bne.w	8005582 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800547e:	2300      	movs	r3, #0
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e010      	b.n	80054a6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	7ffb      	ldrb	r3, [r7, #31]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	441a      	add	r2, r3
 8005490:	7ffb      	ldrb	r3, [r7, #31]
 8005492:	8812      	ldrh	r2, [r2, #0]
 8005494:	b292      	uxth	r2, r2
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	3320      	adds	r3, #32
 800549a:	443b      	add	r3, r7
 800549c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80054a0:	7ffb      	ldrb	r3, [r7, #31]
 80054a2:	3301      	adds	r3, #1
 80054a4:	77fb      	strb	r3, [r7, #31]
 80054a6:	7ffb      	ldrb	r3, [r7, #31]
 80054a8:	2b07      	cmp	r3, #7
 80054aa:	d9eb      	bls.n	8005484 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	b292      	uxth	r2, r2
 80054c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	b292      	uxth	r2, r2
 80054d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80054dc:	bf00      	nop
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f6      	beq.n	80054de <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005502:	b292      	uxth	r2, r2
 8005504:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005508:	2300      	movs	r3, #0
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e00f      	b.n	800552e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800550e:	7ffb      	ldrb	r3, [r7, #31]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	4611      	mov	r1, r2
 8005516:	7ffa      	ldrb	r2, [r7, #31]
 8005518:	0092      	lsls	r2, r2, #2
 800551a:	440a      	add	r2, r1
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	3320      	adds	r3, #32
 8005520:	443b      	add	r3, r7
 8005522:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005526:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005528:	7ffb      	ldrb	r3, [r7, #31]
 800552a:	3301      	adds	r3, #1
 800552c:	77fb      	strb	r3, [r7, #31]
 800552e:	7ffb      	ldrb	r3, [r7, #31]
 8005530:	2b07      	cmp	r3, #7
 8005532:	d9ec      	bls.n	800550e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800553c:	b29a      	uxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	b292      	uxth	r2, r2
 8005548:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005554:	b29a      	uxth	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800555e:	b292      	uxth	r2, r2
 8005560:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800556c:	b29a      	uxth	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0204 	orr.w	r2, r2, #4
 8005576:	b292      	uxth	r2, r2
 8005578:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f007 f86b 	bl	800c658 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f005 f9b3 	bl	800a8f2 <USB_ReadInterrupts>
 800558c:	4603      	mov	r3, r0
 800558e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005592:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005596:	d10e      	bne.n	80055b6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80055aa:	b292      	uxth	r2, r2
 80055ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f007 f824 	bl	800c5fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f005 f999 	bl	800a8f2 <USB_ReadInterrupts>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ca:	d10b      	bne.n	80055e4 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055de:	b292      	uxth	r2, r2
 80055e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 80055e4:	bf00      	nop
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_PCD_SetAddress+0x1a>
 8005602:	2302      	movs	r3, #2
 8005604:	e013      	b.n	800562e <HAL_PCD_SetAddress+0x42>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	78fa      	ldrb	r2, [r7, #3]
 8005612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	4611      	mov	r1, r2
 800561e:	4618      	mov	r0, r3
 8005620:	f005 f940 	bl	800a8a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	4608      	mov	r0, r1
 8005640:	4611      	mov	r1, r2
 8005642:	461a      	mov	r2, r3
 8005644:	4603      	mov	r3, r0
 8005646:	70fb      	strb	r3, [r7, #3]
 8005648:	460b      	mov	r3, r1
 800564a:	803b      	strh	r3, [r7, #0]
 800564c:	4613      	mov	r3, r2
 800564e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005658:	2b00      	cmp	r3, #0
 800565a:	da0e      	bge.n	800567a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	4413      	add	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	705a      	strb	r2, [r3, #1]
 8005678:	e00e      	b.n	8005698 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	f003 0207 	and.w	r2, r3, #7
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4413      	add	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80056a4:	883a      	ldrh	r2, [r7, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	78ba      	ldrb	r2, [r7, #2]
 80056ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80056c2:	78bb      	ldrb	r3, [r7, #2]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d102      	bne.n	80056ce <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_PCD_EP_Open+0xa6>
 80056d8:	2302      	movs	r3, #2
 80056da:	e00e      	b.n	80056fa <HAL_PCD_EP_Open+0xc4>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68f9      	ldr	r1, [r7, #12]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f002 fee0 	bl	80084b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80056f8:	7afb      	ldrb	r3, [r7, #11]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	460b      	mov	r3, r1
 800570c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800570e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005712:	2b00      	cmp	r3, #0
 8005714:	da0e      	bge.n	8005734 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	4413      	add	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	705a      	strb	r2, [r3, #1]
 8005732:	e00e      	b.n	8005752 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	f003 0207 	and.w	r2, r3, #7
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_PCD_EP_Close+0x6a>
 8005768:	2302      	movs	r3, #2
 800576a:	e00e      	b.n	800578a <HAL_PCD_EP_Close+0x88>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68f9      	ldr	r1, [r7, #12]
 800577a:	4618      	mov	r0, r3
 800577c:	f003 fa02 	bl	8008b84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b086      	sub	sp, #24
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	460b      	mov	r3, r1
 80057a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057a2:	7afb      	ldrb	r3, [r7, #11]
 80057a4:	f003 0207 	and.w	r2, r3, #7
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2200      	movs	r2, #0
 80057ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2200      	movs	r2, #0
 80057d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d2:	7afb      	ldrb	r3, [r7, #11]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057de:	7afb      	ldrb	r3, [r7, #11]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d106      	bne.n	80057f6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6979      	ldr	r1, [r7, #20]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f003 fbb4 	bl	8008f5c <USB_EPStartXfer>
 80057f4:	e005      	b.n	8005802 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6979      	ldr	r1, [r7, #20]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f003 fbad 	bl	8008f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	f003 0207 	and.w	r2, r3, #7
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	440b      	add	r3, r1
 800582a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800582e:	681b      	ldr	r3, [r3, #0]
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b086      	sub	sp, #24
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	460b      	mov	r3, r1
 8005848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800584a:	7afb      	ldrb	r3, [r7, #11]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2200      	movs	r2, #0
 800587e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2201      	movs	r2, #1
 8005884:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005886:	7afb      	ldrb	r3, [r7, #11]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	b2da      	uxtb	r2, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005892:	7afb      	ldrb	r3, [r7, #11]
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6979      	ldr	r1, [r7, #20]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f003 fb5a 	bl	8008f5c <USB_EPStartXfer>
 80058a8:	e005      	b.n	80058b6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6979      	ldr	r1, [r7, #20]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f003 fb53 	bl	8008f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	f003 0207 	and.w	r2, r3, #7
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d901      	bls.n	80058de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e04c      	b.n	8005978 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da0e      	bge.n	8005904 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4413      	add	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	705a      	strb	r2, [r3, #1]
 8005902:	e00c      	b.n	800591e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4413      	add	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2201      	movs	r2, #1
 8005922:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	b2da      	uxtb	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_PCD_EP_SetStall+0x7e>
 800593a:	2302      	movs	r3, #2
 800593c:	e01c      	b.n	8005978 <HAL_PCD_EP_SetStall+0xb8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	4618      	mov	r0, r3
 800594e:	f004 feac 	bl	800a6aa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	2b00      	cmp	r3, #0
 800595a:	d108      	bne.n	800596e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8005966:	4619      	mov	r1, r3
 8005968:	4610      	mov	r0, r2
 800596a:	f004 ffd1 	bl	800a910 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	f003 020f 	and.w	r2, r3, #15
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	429a      	cmp	r2, r3
 8005998:	d901      	bls.n	800599e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e040      	b.n	8005a20 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800599e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	da0e      	bge.n	80059c4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2201      	movs	r2, #1
 80059c0:	705a      	strb	r2, [r3, #1]
 80059c2:	e00e      	b.n	80059e2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	f003 0207 	and.w	r2, r3, #7
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_PCD_EP_ClrStall+0x82>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e00e      	b.n	8005a20 <HAL_PCD_EP_ClrStall+0xa0>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f004 fe9a 	bl	800a74a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08e      	sub	sp, #56	@ 0x38
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005a30:	e2de      	b.n	8005ff0 <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a3a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005a3c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 8005a48:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 8157 	bne.w	8005d00 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005a52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d151      	bne.n	8005b00 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6c:	81fb      	strh	r3, [r7, #14]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	89fb      	ldrh	r3, [r7, #14]
 8005a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3328      	adds	r3, #40	@ 0x28
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4413      	add	r3, r2
 8005a9a:	3302      	adds	r3, #2
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	441a      	add	r2, r3
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f006 fd81 	bl	800c5ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 828d 	beq.w	8005ff0 <PCD_EP_ISR_Handler+0x5c8>
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f040 8288 	bne.w	8005ff0 <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005afe:	e277      	b.n	8005ff0 <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005b06:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005b10:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d034      	beq.n	8005b84 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3306      	adds	r3, #6
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f004 ff28 	bl	800a9ae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	823b      	strh	r3, [r7, #16]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	8a3a      	ldrh	r2, [r7, #16]
 8005b74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b78:	b292      	uxth	r2, r2
 8005b7a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f006 fcf7 	bl	800c570 <HAL_PCD_SetupStageCallback>
 8005b82:	e235      	b.n	8005ff0 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b84:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f280 8231 	bge.w	8005ff0 <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	83bb      	strh	r3, [r7, #28]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	8bba      	ldrh	r2, [r7, #28]
 8005ba4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ba8:	b292      	uxth	r2, r2
 8005baa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3306      	adds	r3, #6
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d019      	beq.n	8005c14 <PCD_EP_ISR_Handler+0x1ec>
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d015      	beq.n	8005c14 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	6959      	ldr	r1, [r3, #20]
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f004 fed8 	bl	800a9ae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	441a      	add	r2, r3
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f006 fcc0 	bl	800c594 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	4413      	add	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d112      	bne.n	8005c62 <PCD_EP_ISR_Handler+0x23a>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	e02f      	b.n	8005cc2 <PCD_EP_ISR_Handler+0x29a>
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c68:	d813      	bhi.n	8005c92 <PCD_EP_ISR_Handler+0x26a>
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <PCD_EP_ISR_Handler+0x25c>
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	3301      	adds	r3, #1
 8005c82:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	029b      	lsls	r3, r3, #10
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	e017      	b.n	8005cc2 <PCD_EP_ISR_Handler+0x29a>
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <PCD_EP_ISR_Handler+0x284>
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	029b      	lsls	r3, r3, #10
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd2:	827b      	strh	r3, [r7, #18]
 8005cd4:	8a7b      	ldrh	r3, [r7, #18]
 8005cd6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005cda:	827b      	strh	r3, [r7, #18]
 8005cdc:	8a7b      	ldrh	r3, [r7, #18]
 8005cde:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ce2:	827b      	strh	r3, [r7, #18]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	8a7b      	ldrh	r3, [r7, #18]
 8005cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	8013      	strh	r3, [r2, #0]
 8005cfe:	e177      	b.n	8005ff0 <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d12:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f280 80ea 	bge.w	8005ef0 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005d32:	4013      	ands	r3, r2
 8005d34:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005d46:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d4a:	b292      	uxth	r2, r2
 8005d4c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005d4e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	4413      	add	r3, r2
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	7b1b      	ldrb	r3, [r3, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d122      	bne.n	8005db2 <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4413      	add	r3, r2
 8005d80:	3306      	adds	r3, #6
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d94:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 8005d96:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8087 	beq.w	8005eac <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	6959      	ldr	r1, [r3, #20]
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	88da      	ldrh	r2, [r3, #6]
 8005daa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005dac:	f004 fdff 	bl	800a9ae <USB_ReadPMA>
 8005db0:	e07c      	b.n	8005eac <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	78db      	ldrb	r3, [r3, #3]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d108      	bne.n	8005dcc <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005dba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f923 	bl	800600c <HAL_PCD_EP_DB_Receive>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005dca:	e06f      	b.n	8005eac <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	441a      	add	r2, r3
 8005df6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005df8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d021      	beq.n	8005e6a <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	4413      	add	r3, r2
 8005e3a:	3302      	adds	r3, #2
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e4e:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8005e50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d02a      	beq.n	8005eac <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	6959      	ldr	r1, [r3, #20]
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	891a      	ldrh	r2, [r3, #8]
 8005e62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e64:	f004 fda3 	bl	800a9ae <USB_ReadPMA>
 8005e68:	e020      	b.n	8005eac <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3306      	adds	r3, #6
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e92:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8005e94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d008      	beq.n	8005eac <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	6959      	ldr	r1, [r3, #20]
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	895a      	ldrh	r2, [r3, #10]
 8005ea6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ea8:	f004 fd81 	bl	800a9ae <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005eb2:	441a      	add	r2, r3
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ebe:	441a      	add	r2, r3
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d004      	beq.n	8005ed6 <PCD_EP_ISR_Handler+0x4ae>
 8005ecc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d206      	bcs.n	8005ee4 <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f006 fb59 	bl	800c594 <HAL_PCD_DataOutStageCallback>
 8005ee2:	e005      	b.n	8005ef0 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005eea:	4618      	mov	r0, r3
 8005eec:	f003 f836 	bl	8008f5c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005ef0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d07a      	beq.n	8005ff0 <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 8005efa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f28:	843b      	strh	r3, [r7, #32]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	8c3b      	ldrh	r3, [r7, #32]
 8005f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	78db      	ldrb	r3, [r3, #3]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d108      	bne.n	8005f60 <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d146      	bne.n	8005fe4 <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005f56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d141      	bne.n	8005fe4 <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	4413      	add	r3, r2
 8005f74:	3302      	adds	r3, #2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6812      	ldr	r2, [r2, #0]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f88:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	8bfb      	ldrh	r3, [r7, #30]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d906      	bls.n	8005fa2 <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 8005f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f96:	699a      	ldr	r2, [r3, #24]
 8005f98:	8bfb      	ldrh	r3, [r7, #30]
 8005f9a:	1ad2      	subs	r2, r2, r3
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	619a      	str	r2, [r3, #24]
 8005fa0:	e002      	b.n	8005fa8 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d106      	bne.n	8005fbe <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f006 fb07 	bl	800c5ca <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 8005fbc:	e018      	b.n	8005ff0 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	695a      	ldr	r2, [r3, #20]
 8005fc2:	8bfb      	ldrh	r3, [r7, #30]
 8005fc4:	441a      	add	r2, r3
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	69da      	ldr	r2, [r3, #28]
 8005fce:	8bfb      	ldrh	r3, [r7, #30]
 8005fd0:	441a      	add	r2, r3
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f002 ffbd 	bl	8008f5c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005fe2:	e005      	b.n	8005ff0 <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005fe4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f91b 	bl	8006226 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	b21b      	sxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f6ff ad18 	blt.w	8005a32 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3738      	adds	r7, #56	@ 0x38
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	4613      	mov	r3, r2
 8006018:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d07e      	beq.n	8006122 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800602c:	b29b      	uxth	r3, r3
 800602e:	461a      	mov	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4413      	add	r3, r2
 8006038:	3302      	adds	r3, #2
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800604c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	8b7b      	ldrh	r3, [r7, #26]
 8006054:	429a      	cmp	r2, r3
 8006056:	d306      	bcc.n	8006066 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	699a      	ldr	r2, [r3, #24]
 800605c:	8b7b      	ldrh	r3, [r7, #26]
 800605e:	1ad2      	subs	r2, r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	619a      	str	r2, [r3, #24]
 8006064:	e002      	b.n	800606c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2200      	movs	r2, #0
 800606a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d123      	bne.n	80060bc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800608a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608e:	833b      	strh	r3, [r7, #24]
 8006090:	8b3b      	ldrh	r3, [r7, #24]
 8006092:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006096:	833b      	strh	r3, [r7, #24]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	441a      	add	r2, r3
 80060a6:	8b3b      	ldrh	r3, [r7, #24]
 80060a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01f      	beq.n	8006106 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e0:	82fb      	strh	r3, [r7, #22]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	441a      	add	r2, r3
 80060f0:	8afb      	ldrh	r3, [r7, #22]
 80060f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006102:	b29b      	uxth	r3, r3
 8006104:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006106:	8b7b      	ldrh	r3, [r7, #26]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 8087 	beq.w	800621c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6959      	ldr	r1, [r3, #20]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	891a      	ldrh	r2, [r3, #8]
 800611a:	8b7b      	ldrh	r3, [r7, #26]
 800611c:	f004 fc47 	bl	800a9ae <USB_ReadPMA>
 8006120:	e07c      	b.n	800621c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	4413      	add	r3, r2
 8006136:	3306      	adds	r3, #6
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	6812      	ldr	r2, [r2, #0]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800614a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	8b7b      	ldrh	r3, [r7, #26]
 8006152:	429a      	cmp	r2, r3
 8006154:	d306      	bcc.n	8006164 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	8b7b      	ldrh	r3, [r7, #26]
 800615c:	1ad2      	subs	r2, r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	619a      	str	r2, [r3, #24]
 8006162:	e002      	b.n	800616a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2200      	movs	r2, #0
 8006168:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d123      	bne.n	80061ba <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618c:	83fb      	strh	r3, [r7, #30]
 800618e:	8bfb      	ldrh	r3, [r7, #30]
 8006190:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006194:	83fb      	strh	r3, [r7, #30]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	441a      	add	r2, r3
 80061a4:	8bfb      	ldrh	r3, [r7, #30]
 80061a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11f      	bne.n	8006204 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061de:	83bb      	strh	r3, [r7, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	441a      	add	r2, r3
 80061ee:	8bbb      	ldrh	r3, [r7, #28]
 80061f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006200:	b29b      	uxth	r3, r3
 8006202:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006204:	8b7b      	ldrh	r3, [r7, #26]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d008      	beq.n	800621c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	6959      	ldr	r1, [r3, #20]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	895a      	ldrh	r2, [r3, #10]
 8006216:	8b7b      	ldrh	r3, [r7, #26]
 8006218:	f004 fbc9 	bl	800a9ae <USB_ReadPMA>
    }
  }

  return count;
 800621c:	8b7b      	ldrh	r3, [r7, #26]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b094      	sub	sp, #80	@ 0x50
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	4613      	mov	r3, r2
 8006232:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006234:	88fb      	ldrh	r3, [r7, #6]
 8006236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 8138 	beq.w	80064b0 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006248:	b29b      	uxth	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	4413      	add	r3, r2
 8006254:	3302      	adds	r3, #2
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	6812      	ldr	r2, [r2, #0]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006268:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	699a      	ldr	r2, [r3, #24]
 8006270:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006274:	429a      	cmp	r2, r3
 8006276:	d907      	bls.n	8006288 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006280:	1ad2      	subs	r2, r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	619a      	str	r2, [r3, #24]
 8006286:	e002      	b.n	800628e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2200      	movs	r2, #0
 800628c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d12c      	bne.n	80062f0 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	4619      	mov	r1, r3
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f006 f994 	bl	800c5ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 823a 	beq.w	8006722 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c8:	82fb      	strh	r3, [r7, #22]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	441a      	add	r2, r3
 80062d8:	8afb      	ldrh	r3, [r7, #22]
 80062da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	8013      	strh	r3, [r2, #0]
 80062ee:	e218      	b.n	8006722 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01f      	beq.n	800633a <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006314:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	441a      	add	r2, r3
 8006324:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006326:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800632a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800632e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006336:	b29b      	uxth	r3, r3
 8006338:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006340:	2b01      	cmp	r3, #1
 8006342:	f040 81ee 	bne.w	8006722 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	695a      	ldr	r2, [r3, #20]
 800634a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800634e:	441a      	add	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800635c:	441a      	add	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	6a1a      	ldr	r2, [r3, #32]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	429a      	cmp	r2, r3
 800636c:	d309      	bcc.n	8006382 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800637a:	1ad2      	subs	r2, r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	621a      	str	r2, [r3, #32]
 8006380:	e015      	b.n	80063ae <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d107      	bne.n	800639a <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 800638a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800638e:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006398:	e009      	b.n	80063ae <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2200      	movs	r2, #0
 80063ac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d155      	bne.n	8006462 <HAL_PCD_EP_DB_Transmit+0x23c>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	61fb      	str	r3, [r7, #28]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	011a      	lsls	r2, r3, #4
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d112      	bne.n	800640a <HAL_PCD_EP_DB_Transmit+0x1e4>
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006402:	b29a      	uxth	r2, r3
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	e047      	b.n	800649a <HAL_PCD_EP_DB_Transmit+0x274>
 800640a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800640c:	2b3e      	cmp	r3, #62	@ 0x3e
 800640e:	d811      	bhi.n	8006434 <HAL_PCD_EP_DB_Transmit+0x20e>
 8006410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_PCD_EP_DB_Transmit+0x200>
 8006420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006422:	3301      	adds	r3, #1
 8006424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006428:	b29b      	uxth	r3, r3
 800642a:	029b      	lsls	r3, r3, #10
 800642c:	b29a      	uxth	r2, r3
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	e032      	b.n	800649a <HAL_PCD_EP_DB_Transmit+0x274>
 8006434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800643a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <HAL_PCD_EP_DB_Transmit+0x224>
 8006444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006446:	3b01      	subs	r3, #1
 8006448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644c:	b29b      	uxth	r3, r3
 800644e:	029b      	lsls	r3, r3, #10
 8006450:	b29b      	uxth	r3, r3
 8006452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645a:	b29a      	uxth	r2, r3
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	801a      	strh	r2, [r3, #0]
 8006460:	e01b      	b.n	800649a <HAL_PCD_EP_DB_Transmit+0x274>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d117      	bne.n	800649a <HAL_PCD_EP_DB_Transmit+0x274>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006478:	b29b      	uxth	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	4413      	add	r3, r2
 8006480:	627b      	str	r3, [r7, #36]	@ 0x24
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	011a      	lsls	r2, r3, #4
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	4413      	add	r3, r2
 800648c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006494:	b29a      	uxth	r2, r3
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6959      	ldr	r1, [r3, #20]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	891a      	ldrh	r2, [r3, #8]
 80064a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f004 fa3c 	bl	800a926 <USB_WritePMA>
 80064ae:	e138      	b.n	8006722 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	4413      	add	r3, r2
 80064c4:	3306      	adds	r3, #6
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064d8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	699a      	ldr	r2, [r3, #24]
 80064e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d307      	bcc.n	80064f8 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	699a      	ldr	r2, [r3, #24]
 80064ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	619a      	str	r2, [r3, #24]
 80064f6:	e002      	b.n	80064fe <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2200      	movs	r2, #0
 80064fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d12e      	bne.n	8006564 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	4619      	mov	r1, r3
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f006 f85c 	bl	800c5ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006518:	2b00      	cmp	r3, #0
 800651a:	f040 8102 	bne.w	8006722 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	b29b      	uxth	r3, r3
 8006530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006538:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	441a      	add	r2, r3
 800654a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800654e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006556:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800655a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800655e:	b29b      	uxth	r3, r3
 8006560:	8013      	strh	r3, [r2, #0]
 8006562:	e0de      	b.n	8006722 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d11f      	bne.n	80065ae <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006588:	867b      	strh	r3, [r7, #50]	@ 0x32
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	441a      	add	r2, r3
 8006598:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800659a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800659e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	f040 80b4 	bne.w	8006722 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	695a      	ldr	r2, [r3, #20]
 80065be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80065c2:	441a      	add	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	69da      	ldr	r2, [r3, #28]
 80065cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80065d0:	441a      	add	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	6a1a      	ldr	r2, [r3, #32]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d309      	bcc.n	80065f6 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6a1a      	ldr	r2, [r3, #32]
 80065ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ee:	1ad2      	subs	r2, r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	621a      	str	r2, [r3, #32]
 80065f4:	e015      	b.n	8006622 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d107      	bne.n	800660e <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80065fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006602:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800660c:	e009      	b.n	8006622 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2200      	movs	r2, #0
 8006618:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	643b      	str	r3, [r7, #64]	@ 0x40
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d155      	bne.n	80066dc <HAL_PCD_EP_DB_Transmit+0x4b6>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800663e:	b29b      	uxth	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	4413      	add	r3, r2
 8006646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	011a      	lsls	r2, r3, #4
 800664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006650:	4413      	add	r3, r2
 8006652:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006656:	637b      	str	r3, [r7, #52]	@ 0x34
 8006658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800665a:	2b00      	cmp	r3, #0
 800665c:	d112      	bne.n	8006684 <HAL_PCD_EP_DB_Transmit+0x45e>
 800665e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006668:	b29a      	uxth	r2, r3
 800666a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667c:	b29a      	uxth	r2, r3
 800667e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	e044      	b.n	800670e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006686:	2b3e      	cmp	r3, #62	@ 0x3e
 8006688:	d811      	bhi.n	80066ae <HAL_PCD_EP_DB_Transmit+0x488>
 800668a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x47a>
 800669a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669c:	3301      	adds	r3, #1
 800669e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	029b      	lsls	r3, r3, #10
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	801a      	strh	r2, [r3, #0]
 80066ac:	e02f      	b.n	800670e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80066ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <HAL_PCD_EP_DB_Transmit+0x49e>
 80066be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c0:	3b01      	subs	r3, #1
 80066c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	029b      	lsls	r3, r3, #10
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d8:	801a      	strh	r2, [r3, #0]
 80066da:	e018      	b.n	800670e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d114      	bne.n	800670e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f2:	4413      	add	r3, r2
 80066f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	011a      	lsls	r2, r3, #4
 80066fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066fe:	4413      	add	r3, r2
 8006700:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006708:	b29a      	uxth	r2, r3
 800670a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800670c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6959      	ldr	r1, [r3, #20]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	895a      	ldrh	r2, [r3, #10]
 800671a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800671c:	b29b      	uxth	r3, r3
 800671e:	f004 f902 	bl	800a926 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800673c:	82bb      	strh	r3, [r7, #20]
 800673e:	8abb      	ldrh	r3, [r7, #20]
 8006740:	f083 0310 	eor.w	r3, r3, #16
 8006744:	82bb      	strh	r3, [r7, #20]
 8006746:	8abb      	ldrh	r3, [r7, #20]
 8006748:	f083 0320 	eor.w	r3, r3, #32
 800674c:	82bb      	strh	r3, [r7, #20]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	441a      	add	r2, r3
 800675c:	8abb      	ldrh	r3, [r7, #20]
 800675e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800676a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800676e:	b29b      	uxth	r3, r3
 8006770:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3750      	adds	r7, #80	@ 0x50
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	460b      	mov	r3, r1
 8006788:	817b      	strh	r3, [r7, #10]
 800678a:	4613      	mov	r3, r2
 800678c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800678e:	897b      	ldrh	r3, [r7, #10]
 8006790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00b      	beq.n	80067b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800679a:	897b      	ldrh	r3, [r7, #10]
 800679c:	f003 0307 	and.w	r3, r3, #7
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	e009      	b.n	80067c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067b2:	897a      	ldrh	r2, [r7, #10]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80067c6:	893b      	ldrh	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d107      	bne.n	80067dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2200      	movs	r2, #0
 80067d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	80da      	strh	r2, [r3, #6]
 80067da:	e00b      	b.n	80067f4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2201      	movs	r2, #1
 80067e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	0c1b      	lsrs	r3, r3, #16
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e272      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8087 	beq.w	800692e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006820:	4b92      	ldr	r3, [pc, #584]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f003 030c 	and.w	r3, r3, #12
 8006828:	2b04      	cmp	r3, #4
 800682a:	d00c      	beq.n	8006846 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800682c:	4b8f      	ldr	r3, [pc, #572]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f003 030c 	and.w	r3, r3, #12
 8006834:	2b08      	cmp	r3, #8
 8006836:	d112      	bne.n	800685e <HAL_RCC_OscConfig+0x5e>
 8006838:	4b8c      	ldr	r3, [pc, #560]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006844:	d10b      	bne.n	800685e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006846:	4b89      	ldr	r3, [pc, #548]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d06c      	beq.n	800692c <HAL_RCC_OscConfig+0x12c>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d168      	bne.n	800692c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e24c      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006866:	d106      	bne.n	8006876 <HAL_RCC_OscConfig+0x76>
 8006868:	4b80      	ldr	r3, [pc, #512]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a7f      	ldr	r2, [pc, #508]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 800686e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	e02e      	b.n	80068d4 <HAL_RCC_OscConfig+0xd4>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10c      	bne.n	8006898 <HAL_RCC_OscConfig+0x98>
 800687e:	4b7b      	ldr	r3, [pc, #492]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a7a      	ldr	r2, [pc, #488]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	4b78      	ldr	r3, [pc, #480]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a77      	ldr	r2, [pc, #476]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006890:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	e01d      	b.n	80068d4 <HAL_RCC_OscConfig+0xd4>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068a0:	d10c      	bne.n	80068bc <HAL_RCC_OscConfig+0xbc>
 80068a2:	4b72      	ldr	r3, [pc, #456]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a71      	ldr	r2, [pc, #452]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80068a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	4b6f      	ldr	r3, [pc, #444]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a6e      	ldr	r2, [pc, #440]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80068b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	e00b      	b.n	80068d4 <HAL_RCC_OscConfig+0xd4>
 80068bc:	4b6b      	ldr	r3, [pc, #428]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a6a      	ldr	r2, [pc, #424]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80068c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	4b68      	ldr	r3, [pc, #416]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a67      	ldr	r2, [pc, #412]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80068ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d013      	beq.n	8006904 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068dc:	f7fd faa6 	bl	8003e2c <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068e4:	f7fd faa2 	bl	8003e2c <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b64      	cmp	r3, #100	@ 0x64
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e200      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f6:	4b5d      	ldr	r3, [pc, #372]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0f0      	beq.n	80068e4 <HAL_RCC_OscConfig+0xe4>
 8006902:	e014      	b.n	800692e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006904:	f7fd fa92 	bl	8003e2c <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800690c:	f7fd fa8e 	bl	8003e2c <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b64      	cmp	r3, #100	@ 0x64
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e1ec      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800691e:	4b53      	ldr	r3, [pc, #332]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1f0      	bne.n	800690c <HAL_RCC_OscConfig+0x10c>
 800692a:	e000      	b.n	800692e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800692c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d063      	beq.n	8006a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800693a:	4b4c      	ldr	r3, [pc, #304]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f003 030c 	and.w	r3, r3, #12
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006946:	4b49      	ldr	r3, [pc, #292]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f003 030c 	and.w	r3, r3, #12
 800694e:	2b08      	cmp	r3, #8
 8006950:	d11c      	bne.n	800698c <HAL_RCC_OscConfig+0x18c>
 8006952:	4b46      	ldr	r3, [pc, #280]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d116      	bne.n	800698c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800695e:	4b43      	ldr	r3, [pc, #268]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <HAL_RCC_OscConfig+0x176>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d001      	beq.n	8006976 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e1c0      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006976:	4b3d      	ldr	r3, [pc, #244]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	4939      	ldr	r1, [pc, #228]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006986:	4313      	orrs	r3, r2
 8006988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800698a:	e03a      	b.n	8006a02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d020      	beq.n	80069d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006994:	4b36      	ldr	r3, [pc, #216]	@ (8006a70 <HAL_RCC_OscConfig+0x270>)
 8006996:	2201      	movs	r2, #1
 8006998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699a:	f7fd fa47 	bl	8003e2c <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a2:	f7fd fa43 	bl	8003e2c <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e1a1      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b4:	4b2d      	ldr	r3, [pc, #180]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c0:	4b2a      	ldr	r3, [pc, #168]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	4927      	ldr	r1, [pc, #156]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	600b      	str	r3, [r1, #0]
 80069d4:	e015      	b.n	8006a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069d6:	4b26      	ldr	r3, [pc, #152]	@ (8006a70 <HAL_RCC_OscConfig+0x270>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069dc:	f7fd fa26 	bl	8003e2c <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069e4:	f7fd fa22 	bl	8003e2c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e180      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069f6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f0      	bne.n	80069e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d03a      	beq.n	8006a84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d019      	beq.n	8006a4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a16:	4b17      	ldr	r3, [pc, #92]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a1c:	f7fd fa06 	bl	8003e2c <HAL_GetTick>
 8006a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a24:	f7fd fa02 	bl	8003e2c <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e160      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a36:	4b0d      	ldr	r3, [pc, #52]	@ (8006a6c <HAL_RCC_OscConfig+0x26c>)
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0f0      	beq.n	8006a24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006a42:	2001      	movs	r0, #1
 8006a44:	f000 fad8 	bl	8006ff8 <RCC_Delay>
 8006a48:	e01c      	b.n	8006a84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <HAL_RCC_OscConfig+0x274>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a50:	f7fd f9ec 	bl	8003e2c <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a56:	e00f      	b.n	8006a78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a58:	f7fd f9e8 	bl	8003e2c <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d908      	bls.n	8006a78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e146      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
 8006a6a:	bf00      	nop
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	42420000 	.word	0x42420000
 8006a74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a78:	4b92      	ldr	r3, [pc, #584]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e9      	bne.n	8006a58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 80a6 	beq.w	8006bde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a92:	2300      	movs	r3, #0
 8006a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a96:	4b8b      	ldr	r3, [pc, #556]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10d      	bne.n	8006abe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aa2:	4b88      	ldr	r3, [pc, #544]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	4a87      	ldr	r2, [pc, #540]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aac:	61d3      	str	r3, [r2, #28]
 8006aae:	4b85      	ldr	r3, [pc, #532]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ab6:	60bb      	str	r3, [r7, #8]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aba:	2301      	movs	r3, #1
 8006abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006abe:	4b82      	ldr	r3, [pc, #520]	@ (8006cc8 <HAL_RCC_OscConfig+0x4c8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d118      	bne.n	8006afc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006aca:	4b7f      	ldr	r3, [pc, #508]	@ (8006cc8 <HAL_RCC_OscConfig+0x4c8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a7e      	ldr	r2, [pc, #504]	@ (8006cc8 <HAL_RCC_OscConfig+0x4c8>)
 8006ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ad6:	f7fd f9a9 	bl	8003e2c <HAL_GetTick>
 8006ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006adc:	e008      	b.n	8006af0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ade:	f7fd f9a5 	bl	8003e2c <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b64      	cmp	r3, #100	@ 0x64
 8006aea:	d901      	bls.n	8006af0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e103      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006af0:	4b75      	ldr	r3, [pc, #468]	@ (8006cc8 <HAL_RCC_OscConfig+0x4c8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0f0      	beq.n	8006ade <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d106      	bne.n	8006b12 <HAL_RCC_OscConfig+0x312>
 8006b04:	4b6f      	ldr	r3, [pc, #444]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	4a6e      	ldr	r2, [pc, #440]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b0a:	f043 0301 	orr.w	r3, r3, #1
 8006b0e:	6213      	str	r3, [r2, #32]
 8006b10:	e02d      	b.n	8006b6e <HAL_RCC_OscConfig+0x36e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10c      	bne.n	8006b34 <HAL_RCC_OscConfig+0x334>
 8006b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	4a69      	ldr	r2, [pc, #420]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	6213      	str	r3, [r2, #32]
 8006b26:	4b67      	ldr	r3, [pc, #412]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	4a66      	ldr	r2, [pc, #408]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b2c:	f023 0304 	bic.w	r3, r3, #4
 8006b30:	6213      	str	r3, [r2, #32]
 8006b32:	e01c      	b.n	8006b6e <HAL_RCC_OscConfig+0x36e>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	2b05      	cmp	r3, #5
 8006b3a:	d10c      	bne.n	8006b56 <HAL_RCC_OscConfig+0x356>
 8006b3c:	4b61      	ldr	r3, [pc, #388]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	4a60      	ldr	r2, [pc, #384]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b42:	f043 0304 	orr.w	r3, r3, #4
 8006b46:	6213      	str	r3, [r2, #32]
 8006b48:	4b5e      	ldr	r3, [pc, #376]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b4e:	f043 0301 	orr.w	r3, r3, #1
 8006b52:	6213      	str	r3, [r2, #32]
 8006b54:	e00b      	b.n	8006b6e <HAL_RCC_OscConfig+0x36e>
 8006b56:	4b5b      	ldr	r3, [pc, #364]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	4a5a      	ldr	r2, [pc, #360]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b5c:	f023 0301 	bic.w	r3, r3, #1
 8006b60:	6213      	str	r3, [r2, #32]
 8006b62:	4b58      	ldr	r3, [pc, #352]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	4a57      	ldr	r2, [pc, #348]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b68:	f023 0304 	bic.w	r3, r3, #4
 8006b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d015      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b76:	f7fd f959 	bl	8003e2c <HAL_GetTick>
 8006b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b7c:	e00a      	b.n	8006b94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b7e:	f7fd f955 	bl	8003e2c <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e0b1      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b94:	4b4b      	ldr	r3, [pc, #300]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d0ee      	beq.n	8006b7e <HAL_RCC_OscConfig+0x37e>
 8006ba0:	e014      	b.n	8006bcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ba2:	f7fd f943 	bl	8003e2c <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ba8:	e00a      	b.n	8006bc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006baa:	f7fd f93f 	bl	8003e2c <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e09b      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bc0:	4b40      	ldr	r3, [pc, #256]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1ee      	bne.n	8006baa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d105      	bne.n	8006bde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bd2:	4b3c      	ldr	r3, [pc, #240]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 8087 	beq.w	8006cf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006be8:	4b36      	ldr	r3, [pc, #216]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f003 030c 	and.w	r3, r3, #12
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d061      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d146      	bne.n	8006c8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bfc:	4b33      	ldr	r3, [pc, #204]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c02:	f7fd f913 	bl	8003e2c <HAL_GetTick>
 8006c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c08:	e008      	b.n	8006c1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c0a:	f7fd f90f 	bl	8003e2c <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d901      	bls.n	8006c1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e06d      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c1c:	4b29      	ldr	r3, [pc, #164]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1f0      	bne.n	8006c0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c30:	d108      	bne.n	8006c44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c32:	4b24      	ldr	r3, [pc, #144]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	4921      	ldr	r1, [pc, #132]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c44:	4b1f      	ldr	r3, [pc, #124]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a19      	ldr	r1, [r3, #32]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c54:	430b      	orrs	r3, r1
 8006c56:	491b      	ldr	r1, [pc, #108]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c62:	f7fd f8e3 	bl	8003e2c <HAL_GetTick>
 8006c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c6a:	f7fd f8df 	bl	8003e2c <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e03d      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c7c:	4b11      	ldr	r3, [pc, #68]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <HAL_RCC_OscConfig+0x46a>
 8006c88:	e035      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8a:	4b10      	ldr	r3, [pc, #64]	@ (8006ccc <HAL_RCC_OscConfig+0x4cc>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c90:	f7fd f8cc 	bl	8003e2c <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c98:	f7fd f8c8 	bl	8003e2c <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e026      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006caa:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <HAL_RCC_OscConfig+0x4c4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f0      	bne.n	8006c98 <HAL_RCC_OscConfig+0x498>
 8006cb6:	e01e      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e019      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
 8006cc4:	40021000 	.word	0x40021000
 8006cc8:	40007000 	.word	0x40007000
 8006ccc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d00 <HAL_RCC_OscConfig+0x500>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d106      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d001      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40021000 	.word	0x40021000

08006d04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e0d0      	b.n	8006eba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d18:	4b6a      	ldr	r3, [pc, #424]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d910      	bls.n	8006d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d26:	4b67      	ldr	r3, [pc, #412]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f023 0207 	bic.w	r2, r3, #7
 8006d2e:	4965      	ldr	r1, [pc, #404]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d36:	4b63      	ldr	r3, [pc, #396]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d001      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0b8      	b.n	8006eba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d020      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d60:	4b59      	ldr	r3, [pc, #356]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	4a58      	ldr	r2, [pc, #352]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d78:	4b53      	ldr	r3, [pc, #332]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	4a52      	ldr	r2, [pc, #328]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d7e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006d82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d84:	4b50      	ldr	r3, [pc, #320]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	494d      	ldr	r1, [pc, #308]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d040      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d107      	bne.n	8006dba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006daa:	4b47      	ldr	r3, [pc, #284]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d115      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e07f      	b.n	8006eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d107      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc2:	4b41      	ldr	r3, [pc, #260]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e073      	b.n	8006eba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e06b      	b.n	8006eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006de2:	4b39      	ldr	r3, [pc, #228]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f023 0203 	bic.w	r2, r3, #3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4936      	ldr	r1, [pc, #216]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006df4:	f7fd f81a 	bl	8003e2c <HAL_GetTick>
 8006df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dfa:	e00a      	b.n	8006e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dfc:	f7fd f816 	bl	8003e2c <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e053      	b.n	8006eba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e12:	4b2d      	ldr	r3, [pc, #180]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f003 020c 	and.w	r2, r3, #12
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d1eb      	bne.n	8006dfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e24:	4b27      	ldr	r3, [pc, #156]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d210      	bcs.n	8006e54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e32:	4b24      	ldr	r3, [pc, #144]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f023 0207 	bic.w	r2, r3, #7
 8006e3a:	4922      	ldr	r1, [pc, #136]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e42:	4b20      	ldr	r3, [pc, #128]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d001      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e032      	b.n	8006eba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d008      	beq.n	8006e72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e60:	4b19      	ldr	r3, [pc, #100]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	4916      	ldr	r1, [pc, #88]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0308 	and.w	r3, r3, #8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e7e:	4b12      	ldr	r3, [pc, #72]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	490e      	ldr	r1, [pc, #56]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e92:	f000 f821 	bl	8006ed8 <HAL_RCC_GetSysClockFreq>
 8006e96:	4602      	mov	r2, r0
 8006e98:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	091b      	lsrs	r3, r3, #4
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	490a      	ldr	r1, [pc, #40]	@ (8006ecc <HAL_RCC_ClockConfig+0x1c8>)
 8006ea4:	5ccb      	ldrb	r3, [r1, r3]
 8006ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eaa:	4a09      	ldr	r2, [pc, #36]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8006eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006eae:	4b09      	ldr	r3, [pc, #36]	@ (8006ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fc ff78 	bl	8003da8 <HAL_InitTick>

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40022000 	.word	0x40022000
 8006ec8:	40021000 	.word	0x40021000
 8006ecc:	0800dd38 	.word	0x0800dd38
 8006ed0:	20000028 	.word	0x20000028
 8006ed4:	2000002c 	.word	0x2000002c

08006ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed8:	b490      	push	{r4, r7}
 8006eda:	b08a      	sub	sp, #40	@ 0x28
 8006edc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006ede:	4b29      	ldr	r3, [pc, #164]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0xac>)
 8006ee0:	1d3c      	adds	r4, r7, #4
 8006ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ee8:	f240 2301 	movw	r3, #513	@ 0x201
 8006eec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61bb      	str	r3, [r7, #24]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006f02:	4b21      	ldr	r3, [pc, #132]	@ (8006f88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f003 030c 	and.w	r3, r3, #12
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d002      	beq.n	8006f18 <HAL_RCC_GetSysClockFreq+0x40>
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d003      	beq.n	8006f1e <HAL_RCC_GetSysClockFreq+0x46>
 8006f16:	e02b      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f18:	4b1c      	ldr	r3, [pc, #112]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f1a:	623b      	str	r3, [r7, #32]
      break;
 8006f1c:	e02b      	b.n	8006f76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	0c9b      	lsrs	r3, r3, #18
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	3328      	adds	r3, #40	@ 0x28
 8006f28:	443b      	add	r3, r7
 8006f2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006f2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d012      	beq.n	8006f60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f3a:	4b13      	ldr	r3, [pc, #76]	@ (8006f88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	0c5b      	lsrs	r3, r3, #17
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	3328      	adds	r3, #40	@ 0x28
 8006f46:	443b      	add	r3, r7
 8006f48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006f4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	4a0e      	ldr	r2, [pc, #56]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f52:	fb03 f202 	mul.w	r2, r3, r2
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f5e:	e004      	b.n	8006f6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	4a0b      	ldr	r2, [pc, #44]	@ (8006f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f64:	fb02 f303 	mul.w	r3, r2, r3
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	623b      	str	r3, [r7, #32]
      break;
 8006f6e:	e002      	b.n	8006f76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f70:	4b06      	ldr	r3, [pc, #24]	@ (8006f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f72:	623b      	str	r3, [r7, #32]
      break;
 8006f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f76:	6a3b      	ldr	r3, [r7, #32]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3728      	adds	r7, #40	@ 0x28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc90      	pop	{r4, r7}
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	0800dcd0 	.word	0x0800dcd0
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	007a1200 	.word	0x007a1200
 8006f90:	003d0900 	.word	0x003d0900

08006f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f98:	4b02      	ldr	r3, [pc, #8]	@ (8006fa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr
 8006fa4:	20000028 	.word	0x20000028

08006fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fac:	f7ff fff2 	bl	8006f94 <HAL_RCC_GetHCLKFreq>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	4b05      	ldr	r3, [pc, #20]	@ (8006fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	0a1b      	lsrs	r3, r3, #8
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	4903      	ldr	r1, [pc, #12]	@ (8006fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fbe:	5ccb      	ldrb	r3, [r1, r3]
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	0800dd48 	.word	0x0800dd48

08006fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fd4:	f7ff ffde 	bl	8006f94 <HAL_RCC_GetHCLKFreq>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	4b05      	ldr	r3, [pc, #20]	@ (8006ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	0adb      	lsrs	r3, r3, #11
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	4903      	ldr	r1, [pc, #12]	@ (8006ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fe6:	5ccb      	ldrb	r3, [r1, r3]
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	0800dd48 	.word	0x0800dd48

08006ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007000:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <RCC_Delay+0x34>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a0a      	ldr	r2, [pc, #40]	@ (8007030 <RCC_Delay+0x38>)
 8007006:	fba2 2303 	umull	r2, r3, r2, r3
 800700a:	0a5b      	lsrs	r3, r3, #9
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007014:	bf00      	nop
  }
  while (Delay --);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	1e5a      	subs	r2, r3, #1
 800701a:	60fa      	str	r2, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1f9      	bne.n	8007014 <RCC_Delay+0x1c>
}
 8007020:	bf00      	nop
 8007022:	bf00      	nop
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr
 800702c:	20000028 	.word	0x20000028
 8007030:	10624dd3 	.word	0x10624dd3

08007034 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d07d      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007050:	2300      	movs	r3, #0
 8007052:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007054:	4b4f      	ldr	r3, [pc, #316]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10d      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007060:	4b4c      	ldr	r3, [pc, #304]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	4a4b      	ldr	r2, [pc, #300]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800706a:	61d3      	str	r3, [r2, #28]
 800706c:	4b49      	ldr	r3, [pc, #292]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800707c:	4b46      	ldr	r3, [pc, #280]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007084:	2b00      	cmp	r3, #0
 8007086:	d118      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007088:	4b43      	ldr	r3, [pc, #268]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a42      	ldr	r2, [pc, #264]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800708e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007092:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007094:	f7fc feca 	bl	8003e2c <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800709a:	e008      	b.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800709c:	f7fc fec6 	bl	8003e2c <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b64      	cmp	r3, #100	@ 0x64
 80070a8:	d901      	bls.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e06d      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ae:	4b3a      	ldr	r3, [pc, #232]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070ba:	4b36      	ldr	r3, [pc, #216]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d02e      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d027      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070d8:	4b2e      	ldr	r3, [pc, #184]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070e2:	4b2e      	ldr	r3, [pc, #184]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80070e4:	2201      	movs	r2, #1
 80070e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070e8:	4b2c      	ldr	r3, [pc, #176]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80070ee:	4a29      	ldr	r2, [pc, #164]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d014      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070fe:	f7fc fe95 	bl	8003e2c <HAL_GetTick>
 8007102:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007104:	e00a      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007106:	f7fc fe91 	bl	8003e2c <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e036      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800711c:	4b1d      	ldr	r3, [pc, #116]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0ee      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007128:	4b1a      	ldr	r3, [pc, #104]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	4917      	ldr	r1, [pc, #92]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007136:	4313      	orrs	r3, r2
 8007138:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800713a:	7dfb      	ldrb	r3, [r7, #23]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d105      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007140:	4b14      	ldr	r3, [pc, #80]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	4a13      	ldr	r2, [pc, #76]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800714a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d008      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007158:	4b0e      	ldr	r3, [pc, #56]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	490b      	ldr	r1, [pc, #44]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007166:	4313      	orrs	r3, r2
 8007168:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0310 	and.w	r3, r3, #16
 8007172:	2b00      	cmp	r3, #0
 8007174:	d008      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007176:	4b07      	ldr	r3, [pc, #28]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	4904      	ldr	r1, [pc, #16]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007184:	4313      	orrs	r3, r2
 8007186:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40021000 	.word	0x40021000
 8007198:	40007000 	.word	0x40007000
 800719c:	42420440 	.word	0x42420440

080071a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e076      	b.n	80072a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d108      	bne.n	80071cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071c2:	d009      	beq.n	80071d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	61da      	str	r2, [r3, #28]
 80071ca:	e005      	b.n	80071d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d106      	bne.n	80071f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fc fc50 	bl	8003a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800720e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007220:	431a      	orrs	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	431a      	orrs	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	431a      	orrs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800725c:	ea42 0103 	orr.w	r1, r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007264:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	0c1a      	lsrs	r2, r3, #16
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f002 0204 	and.w	r2, r2, #4
 800727e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	69da      	ldr	r2, [r3, #28]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800728e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08c      	sub	sp, #48	@ 0x30
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072b6:	2301      	movs	r3, #1
 80072b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_SPI_TransmitReceive+0x26>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e18a      	b.n	80075e4 <HAL_SPI_TransmitReceive+0x33c>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072d6:	f7fc fda9 	bl	8003e2c <HAL_GetTick>
 80072da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80072ec:	887b      	ldrh	r3, [r7, #2]
 80072ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d00f      	beq.n	8007318 <HAL_SPI_TransmitReceive+0x70>
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072fe:	d107      	bne.n	8007310 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d103      	bne.n	8007310 <HAL_SPI_TransmitReceive+0x68>
 8007308:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800730c:	2b04      	cmp	r3, #4
 800730e:	d003      	beq.n	8007318 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007310:	2302      	movs	r3, #2
 8007312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007316:	e15b      	b.n	80075d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <HAL_SPI_TransmitReceive+0x82>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <HAL_SPI_TransmitReceive+0x82>
 8007324:	887b      	ldrh	r3, [r7, #2]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007330:	e14e      	b.n	80075d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b04      	cmp	r3, #4
 800733c:	d003      	beq.n	8007346 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2205      	movs	r2, #5
 8007342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	887a      	ldrh	r2, [r7, #2]
 8007356:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	887a      	ldrh	r2, [r7, #2]
 800735c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	887a      	ldrh	r2, [r7, #2]
 8007368:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	887a      	ldrh	r2, [r7, #2]
 800736e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007386:	2b40      	cmp	r3, #64	@ 0x40
 8007388:	d007      	beq.n	800739a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007398:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073a2:	d178      	bne.n	8007496 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <HAL_SPI_TransmitReceive+0x10a>
 80073ac:	8b7b      	ldrh	r3, [r7, #26]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d166      	bne.n	8007480 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b6:	881a      	ldrh	r2, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c2:	1c9a      	adds	r2, r3, #2
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d6:	e053      	b.n	8007480 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d11b      	bne.n	800741e <HAL_SPI_TransmitReceive+0x176>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d016      	beq.n	800741e <HAL_SPI_TransmitReceive+0x176>
 80073f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d113      	bne.n	800741e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073fa:	881a      	ldrh	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007406:	1c9a      	adds	r2, r3, #2
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007410:	b29b      	uxth	r3, r3
 8007412:	3b01      	subs	r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b01      	cmp	r3, #1
 800742a:	d119      	bne.n	8007460 <HAL_SPI_TransmitReceive+0x1b8>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d014      	beq.n	8007460 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007440:	b292      	uxth	r2, r2
 8007442:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007448:	1c9a      	adds	r2, r3, #2
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007452:	b29b      	uxth	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800745c:	2301      	movs	r3, #1
 800745e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007460:	f7fc fce4 	bl	8003e2c <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800746c:	429a      	cmp	r2, r3
 800746e:	d807      	bhi.n	8007480 <HAL_SPI_TransmitReceive+0x1d8>
 8007470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d003      	beq.n	8007480 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800747e:	e0a7      	b.n	80075d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007484:	b29b      	uxth	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1a6      	bne.n	80073d8 <HAL_SPI_TransmitReceive+0x130>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800748e:	b29b      	uxth	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1a1      	bne.n	80073d8 <HAL_SPI_TransmitReceive+0x130>
 8007494:	e07c      	b.n	8007590 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <HAL_SPI_TransmitReceive+0x1fc>
 800749e:	8b7b      	ldrh	r3, [r7, #26]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d16b      	bne.n	800757c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	330c      	adds	r3, #12
 80074ae:	7812      	ldrb	r2, [r2, #0]
 80074b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074ca:	e057      	b.n	800757c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d11c      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x26c>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074de:	b29b      	uxth	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d017      	beq.n	8007514 <HAL_SPI_TransmitReceive+0x26c>
 80074e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d114      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	330c      	adds	r3, #12
 80074f4:	7812      	ldrb	r2, [r2, #0]
 80074f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b01      	cmp	r3, #1
 8007520:	d119      	bne.n	8007556 <HAL_SPI_TransmitReceive+0x2ae>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007526:	b29b      	uxth	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d014      	beq.n	8007556 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007552:	2301      	movs	r3, #1
 8007554:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007556:	f7fc fc69 	bl	8003e2c <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007562:	429a      	cmp	r2, r3
 8007564:	d803      	bhi.n	800756e <HAL_SPI_TransmitReceive+0x2c6>
 8007566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756c:	d102      	bne.n	8007574 <HAL_SPI_TransmitReceive+0x2cc>
 800756e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800757a:	e029      	b.n	80075d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1a2      	bne.n	80074cc <HAL_SPI_TransmitReceive+0x224>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800758a:	b29b      	uxth	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d19d      	bne.n	80074cc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007592:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f8b1 	bl	80076fc <SPI_EndRxTxTransaction>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d006      	beq.n	80075ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2220      	movs	r2, #32
 80075aa:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80075ac:	e010      	b.n	80075d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10b      	bne.n	80075ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075b6:	2300      	movs	r3, #0
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	617b      	str	r3, [r7, #20]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	e000      	b.n	80075d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80075ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80075e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3730      	adds	r7, #48	@ 0x30
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	603b      	str	r3, [r7, #0]
 80075f8:	4613      	mov	r3, r2
 80075fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075fc:	f7fc fc16 	bl	8003e2c <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	4413      	add	r3, r2
 800760a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800760c:	f7fc fc0e 	bl	8003e2c <HAL_GetTick>
 8007610:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007612:	4b39      	ldr	r3, [pc, #228]	@ (80076f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	015b      	lsls	r3, r3, #5
 8007618:	0d1b      	lsrs	r3, r3, #20
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	fb02 f303 	mul.w	r3, r2, r3
 8007620:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007622:	e054      	b.n	80076ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762a:	d050      	beq.n	80076ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800762c:	f7fc fbfe 	bl	8003e2c <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	429a      	cmp	r2, r3
 800763a:	d902      	bls.n	8007642 <SPI_WaitFlagStateUntilTimeout+0x56>
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d13d      	bne.n	80076be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800765a:	d111      	bne.n	8007680 <SPI_WaitFlagStateUntilTimeout+0x94>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007664:	d004      	beq.n	8007670 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800766e:	d107      	bne.n	8007680 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800767e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007688:	d10f      	bne.n	80076aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e017      	b.n	80076ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4013      	ands	r3, r2
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	429a      	cmp	r2, r3
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	79fb      	ldrb	r3, [r7, #7]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d19b      	bne.n	8007624 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20000028 	.word	0x20000028

080076fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af02      	add	r7, sp, #8
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2200      	movs	r2, #0
 8007710:	2180      	movs	r1, #128	@ 0x80
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f7ff ff6a 	bl	80075ec <SPI_WaitFlagStateUntilTimeout>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007722:	f043 0220 	orr.w	r2, r3, #32
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e000      	b.n	8007730 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e041      	b.n	80077ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d106      	bne.n	8007764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fc f9e4 	bl	8003b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3304      	adds	r3, #4
 8007774:	4619      	mov	r1, r3
 8007776:	4610      	mov	r0, r2
 8007778:	f000 fa70 	bl	8007c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d001      	beq.n	80077f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e03a      	b.n	8007866 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0201 	orr.w	r2, r2, #1
 8007806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a18      	ldr	r2, [pc, #96]	@ (8007870 <HAL_TIM_Base_Start_IT+0x98>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00e      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x58>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800781a:	d009      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x58>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a14      	ldr	r2, [pc, #80]	@ (8007874 <HAL_TIM_Base_Start_IT+0x9c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x58>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a13      	ldr	r2, [pc, #76]	@ (8007878 <HAL_TIM_Base_Start_IT+0xa0>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d111      	bne.n	8007854 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b06      	cmp	r3, #6
 8007840:	d010      	beq.n	8007864 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0201 	orr.w	r2, r2, #1
 8007850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007852:	e007      	b.n	8007864 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr
 8007870:	40012c00 	.word	0x40012c00
 8007874:	40000400 	.word	0x40000400
 8007878:	40000800 	.word	0x40000800

0800787c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b02      	cmp	r3, #2
 8007890:	d122      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b02      	cmp	r3, #2
 800789e:	d11b      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f06f 0202 	mvn.w	r2, #2
 80078a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f9b1 	bl	8007c26 <HAL_TIM_IC_CaptureCallback>
 80078c4:	e005      	b.n	80078d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f9a4 	bl	8007c14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f9b3 	bl	8007c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f003 0304 	and.w	r3, r3, #4
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	d122      	bne.n	800792c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f003 0304 	and.w	r3, r3, #4
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d11b      	bne.n	800792c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0204 	mvn.w	r2, #4
 80078fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2202      	movs	r2, #2
 8007902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f987 	bl	8007c26 <HAL_TIM_IC_CaptureCallback>
 8007918:	e005      	b.n	8007926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f97a 	bl	8007c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f989 	bl	8007c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b08      	cmp	r3, #8
 8007938:	d122      	bne.n	8007980 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b08      	cmp	r3, #8
 8007946:	d11b      	bne.n	8007980 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f06f 0208 	mvn.w	r2, #8
 8007950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2204      	movs	r2, #4
 8007956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f95d 	bl	8007c26 <HAL_TIM_IC_CaptureCallback>
 800796c:	e005      	b.n	800797a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f950 	bl	8007c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f95f 	bl	8007c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0310 	and.w	r3, r3, #16
 800798a:	2b10      	cmp	r3, #16
 800798c:	d122      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0310 	and.w	r3, r3, #16
 8007998:	2b10      	cmp	r3, #16
 800799a:	d11b      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f06f 0210 	mvn.w	r2, #16
 80079a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2208      	movs	r2, #8
 80079aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f933 	bl	8007c26 <HAL_TIM_IC_CaptureCallback>
 80079c0:	e005      	b.n	80079ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f926 	bl	8007c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f935 	bl	8007c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d10e      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d107      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0201 	mvn.w	r2, #1
 80079f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7f9 f9b8 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a0a:	2b80      	cmp	r3, #128	@ 0x80
 8007a0c:	d10e      	bne.n	8007a2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a18:	2b80      	cmp	r3, #128	@ 0x80
 8007a1a:	d107      	bne.n	8007a2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa77 	bl	8007f1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a36:	2b40      	cmp	r3, #64	@ 0x40
 8007a38:	d10e      	bne.n	8007a58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a44:	2b40      	cmp	r3, #64	@ 0x40
 8007a46:	d107      	bne.n	8007a58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8f9 	bl	8007c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d10e      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d107      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f06f 0220 	mvn.w	r2, #32
 8007a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa42 	bl	8007f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d101      	bne.n	8007aa4 <HAL_TIM_ConfigClockSource+0x18>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e0b3      	b.n	8007c0c <HAL_TIM_ConfigClockSource+0x180>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ac2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007aca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007adc:	d03e      	beq.n	8007b5c <HAL_TIM_ConfigClockSource+0xd0>
 8007ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ae2:	f200 8087 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x168>
 8007ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aea:	f000 8085 	beq.w	8007bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007af2:	d87f      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x168>
 8007af4:	2b70      	cmp	r3, #112	@ 0x70
 8007af6:	d01a      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0xa2>
 8007af8:	2b70      	cmp	r3, #112	@ 0x70
 8007afa:	d87b      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x168>
 8007afc:	2b60      	cmp	r3, #96	@ 0x60
 8007afe:	d050      	beq.n	8007ba2 <HAL_TIM_ConfigClockSource+0x116>
 8007b00:	2b60      	cmp	r3, #96	@ 0x60
 8007b02:	d877      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x168>
 8007b04:	2b50      	cmp	r3, #80	@ 0x50
 8007b06:	d03c      	beq.n	8007b82 <HAL_TIM_ConfigClockSource+0xf6>
 8007b08:	2b50      	cmp	r3, #80	@ 0x50
 8007b0a:	d873      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x168>
 8007b0c:	2b40      	cmp	r3, #64	@ 0x40
 8007b0e:	d058      	beq.n	8007bc2 <HAL_TIM_ConfigClockSource+0x136>
 8007b10:	2b40      	cmp	r3, #64	@ 0x40
 8007b12:	d86f      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x168>
 8007b14:	2b30      	cmp	r3, #48	@ 0x30
 8007b16:	d064      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x156>
 8007b18:	2b30      	cmp	r3, #48	@ 0x30
 8007b1a:	d86b      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x168>
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	d060      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x156>
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d867      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x168>
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d05c      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x156>
 8007b28:	2b10      	cmp	r3, #16
 8007b2a:	d05a      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007b2c:	e062      	b.n	8007bf4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	6899      	ldr	r1, [r3, #8]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f000 f966 	bl	8007e0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007b50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	609a      	str	r2, [r3, #8]
      break;
 8007b5a:	e04e      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	6899      	ldr	r1, [r3, #8]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f000 f94f 	bl	8007e0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b7e:	609a      	str	r2, [r3, #8]
      break;
 8007b80:	e03b      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	6859      	ldr	r1, [r3, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f000 f8c6 	bl	8007d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2150      	movs	r1, #80	@ 0x50
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 f91d 	bl	8007dda <TIM_ITRx_SetConfig>
      break;
 8007ba0:	e02b      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	6859      	ldr	r1, [r3, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f000 f8e4 	bl	8007d7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2160      	movs	r1, #96	@ 0x60
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 f90d 	bl	8007dda <TIM_ITRx_SetConfig>
      break;
 8007bc0:	e01b      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6859      	ldr	r1, [r3, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f000 f8a6 	bl	8007d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2140      	movs	r1, #64	@ 0x40
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 f8fd 	bl	8007dda <TIM_ITRx_SetConfig>
      break;
 8007be0:	e00b      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f000 f8f4 	bl	8007dda <TIM_ITRx_SetConfig>
        break;
 8007bf2:	e002      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007bf4:	bf00      	nop
 8007bf6:	e000      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007bf8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bc80      	pop	{r7}
 8007c24:	4770      	bx	lr

08007c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr

08007c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bc80      	pop	{r7}
 8007c5a:	4770      	bx	lr

08007c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a29      	ldr	r2, [pc, #164]	@ (8007d14 <TIM_Base_SetConfig+0xb8>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00b      	beq.n	8007c8c <TIM_Base_SetConfig+0x30>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c7a:	d007      	beq.n	8007c8c <TIM_Base_SetConfig+0x30>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a26      	ldr	r2, [pc, #152]	@ (8007d18 <TIM_Base_SetConfig+0xbc>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d003      	beq.n	8007c8c <TIM_Base_SetConfig+0x30>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a25      	ldr	r2, [pc, #148]	@ (8007d1c <TIM_Base_SetConfig+0xc0>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d108      	bne.n	8007c9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d14 <TIM_Base_SetConfig+0xb8>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00b      	beq.n	8007cbe <TIM_Base_SetConfig+0x62>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cac:	d007      	beq.n	8007cbe <TIM_Base_SetConfig+0x62>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a19      	ldr	r2, [pc, #100]	@ (8007d18 <TIM_Base_SetConfig+0xbc>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d003      	beq.n	8007cbe <TIM_Base_SetConfig+0x62>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a18      	ldr	r2, [pc, #96]	@ (8007d1c <TIM_Base_SetConfig+0xc0>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d108      	bne.n	8007cd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a07      	ldr	r2, [pc, #28]	@ (8007d14 <TIM_Base_SetConfig+0xb8>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d103      	bne.n	8007d04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	615a      	str	r2, [r3, #20]
}
 8007d0a:	bf00      	nop
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bc80      	pop	{r7}
 8007d12:	4770      	bx	lr
 8007d14:	40012c00 	.word	0x40012c00
 8007d18:	40000400 	.word	0x40000400
 8007d1c:	40000800 	.word	0x40000800

08007d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6a1b      	ldr	r3, [r3, #32]
 8007d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	f023 0201 	bic.w	r2, r3, #1
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	f023 030a 	bic.w	r3, r3, #10
 8007d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	621a      	str	r2, [r3, #32]
}
 8007d72:	bf00      	nop
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bc80      	pop	{r7}
 8007d7a:	4770      	bx	lr

08007d7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	f023 0210 	bic.w	r2, r3, #16
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007da6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	031b      	lsls	r3, r3, #12
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007db8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	621a      	str	r2, [r3, #32]
}
 8007dd0:	bf00      	nop
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bc80      	pop	{r7}
 8007dd8:	4770      	bx	lr

08007dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b085      	sub	sp, #20
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	f043 0307 	orr.w	r3, r3, #7
 8007dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	609a      	str	r2, [r3, #8]
}
 8007e04:	bf00      	nop
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr

08007e0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b087      	sub	sp, #28
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	607a      	str	r2, [r7, #4]
 8007e1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	021a      	lsls	r2, r3, #8
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	431a      	orrs	r2, r3
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	609a      	str	r2, [r3, #8]
}
 8007e42:	bf00      	nop
 8007e44:	371c      	adds	r7, #28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bc80      	pop	{r7}
 8007e4a:	4770      	bx	lr

08007e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d101      	bne.n	8007e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e60:	2302      	movs	r3, #2
 8007e62:	e046      	b.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a16      	ldr	r2, [pc, #88]	@ (8007efc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d00e      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb0:	d009      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a12      	ldr	r2, [pc, #72]	@ (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a10      	ldr	r2, [pc, #64]	@ (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bc80      	pop	{r7}
 8007efa:	4770      	bx	lr
 8007efc:	40012c00 	.word	0x40012c00
 8007f00:	40000400 	.word	0x40000400
 8007f04:	40000800 	.word	0x40000800

08007f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr

08007f1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bc80      	pop	{r7}
 8007f2a:	4770      	bx	lr

08007f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e03f      	b.n	8007fbe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d106      	bne.n	8007f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fb fe0e 	bl	8003b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2224      	movs	r2, #36	@ 0x24
 8007f5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f9a3 	bl	80082bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	695a      	ldr	r2, [r3, #20]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b08a      	sub	sp, #40	@ 0x28
 8007fca:	af02      	add	r7, sp, #8
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	603b      	str	r3, [r7, #0]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d17c      	bne.n	80080e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <HAL_UART_Transmit+0x2c>
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e075      	b.n	80080e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_UART_Transmit+0x3e>
 8008000:	2302      	movs	r3, #2
 8008002:	e06e      	b.n	80080e2 <HAL_UART_Transmit+0x11c>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2221      	movs	r2, #33	@ 0x21
 8008016:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800801a:	f7fb ff07 	bl	8003e2c <HAL_GetTick>
 800801e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	88fa      	ldrh	r2, [r7, #6]
 800802a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008034:	d108      	bne.n	8008048 <HAL_UART_Transmit+0x82>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d104      	bne.n	8008048 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	e003      	b.n	8008050 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800804c:	2300      	movs	r3, #0
 800804e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8008058:	e02a      	b.n	80080b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2200      	movs	r2, #0
 8008062:	2180      	movs	r1, #128	@ 0x80
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 f8df 	bl	8008228 <UART_WaitOnFlagUntilTimeout>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e036      	b.n	80080e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10b      	bne.n	8008092 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	3302      	adds	r3, #2
 800808e:	61bb      	str	r3, [r7, #24]
 8008090:	e007      	b.n	80080a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	781a      	ldrb	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	3301      	adds	r3, #1
 80080a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1cf      	bne.n	800805a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2200      	movs	r2, #0
 80080c2:	2140      	movs	r1, #64	@ 0x40
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 f8af 	bl	8008228 <UART_WaitOnFlagUntilTimeout>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e006      	b.n	80080e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	e000      	b.n	80080e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080e0:	2302      	movs	r3, #2
  }
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3720      	adds	r7, #32
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b08a      	sub	sp, #40	@ 0x28
 80080ee:	af02      	add	r7, sp, #8
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	603b      	str	r3, [r7, #0]
 80080f6:	4613      	mov	r3, r2
 80080f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b20      	cmp	r3, #32
 8008108:	f040 8089 	bne.w	800821e <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <HAL_UART_Receive+0x2e>
 8008112:	88fb      	ldrh	r3, [r7, #6]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e081      	b.n	8008220 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <HAL_UART_Receive+0x40>
 8008126:	2302      	movs	r3, #2
 8008128:	e07a      	b.n	8008220 <HAL_UART_Receive+0x136>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2222      	movs	r2, #34	@ 0x22
 800813c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008140:	f7fb fe74 	bl	8003e2c <HAL_GetTick>
 8008144:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	88fa      	ldrh	r2, [r7, #6]
 800814a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	88fa      	ldrh	r2, [r7, #6]
 8008150:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800815a:	d108      	bne.n	800816e <HAL_UART_Receive+0x84>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d104      	bne.n	800816e <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8008164:	2300      	movs	r3, #0
 8008166:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	e003      	b.n	8008176 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800817e:	e043      	b.n	8008208 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2200      	movs	r2, #0
 8008188:	2120      	movs	r1, #32
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 f84c 	bl	8008228 <UART_WaitOnFlagUntilTimeout>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e042      	b.n	8008220 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10c      	bne.n	80081ba <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	3302      	adds	r3, #2
 80081b6:	61bb      	str	r3, [r7, #24]
 80081b8:	e01f      	b.n	80081fa <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081c2:	d007      	beq.n	80081d4 <HAL_UART_Receive+0xea>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <HAL_UART_Receive+0xf8>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d106      	bne.n	80081e2 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	701a      	strb	r2, [r3, #0]
 80081e0:	e008      	b.n	80081f4 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	3301      	adds	r3, #1
 80081f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081fe:	b29b      	uxth	r3, r3
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800820c:	b29b      	uxth	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1b6      	bne.n	8008180 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2220      	movs	r2, #32
 8008216:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	e000      	b.n	8008220 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800821e:	2302      	movs	r3, #2
  }
}
 8008220:	4618      	mov	r0, r3
 8008222:	3720      	adds	r7, #32
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	4613      	mov	r3, r2
 8008236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008238:	e02c      	b.n	8008294 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008240:	d028      	beq.n	8008294 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <UART_WaitOnFlagUntilTimeout+0x30>
 8008248:	f7fb fdf0 	bl	8003e2c <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	429a      	cmp	r2, r3
 8008256:	d21d      	bcs.n	8008294 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8008266:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	695a      	ldr	r2, [r3, #20]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0201 	bic.w	r2, r2, #1
 8008276:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2220      	movs	r2, #32
 8008284:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e00f      	b.n	80082b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	4013      	ands	r3, r2
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	bf0c      	ite	eq
 80082a4:	2301      	moveq	r3, #1
 80082a6:	2300      	movne	r3, #0
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	461a      	mov	r2, r3
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d0c3      	beq.n	800823a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689a      	ldr	r2, [r3, #8]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80082f6:	f023 030c 	bic.w	r3, r3, #12
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6812      	ldr	r2, [r2, #0]
 80082fe:	68b9      	ldr	r1, [r7, #8]
 8008300:	430b      	orrs	r3, r1
 8008302:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	699a      	ldr	r2, [r3, #24]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a2c      	ldr	r2, [pc, #176]	@ (80083d0 <UART_SetConfig+0x114>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d103      	bne.n	800832c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008324:	f7fe fe54 	bl	8006fd0 <HAL_RCC_GetPCLK2Freq>
 8008328:	60f8      	str	r0, [r7, #12]
 800832a:	e002      	b.n	8008332 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800832c:	f7fe fe3c 	bl	8006fa8 <HAL_RCC_GetPCLK1Freq>
 8008330:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4613      	mov	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	009a      	lsls	r2, r3, #2
 800833c:	441a      	add	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	fbb2 f3f3 	udiv	r3, r2, r3
 8008348:	4a22      	ldr	r2, [pc, #136]	@ (80083d4 <UART_SetConfig+0x118>)
 800834a:	fba2 2303 	umull	r2, r3, r2, r3
 800834e:	095b      	lsrs	r3, r3, #5
 8008350:	0119      	lsls	r1, r3, #4
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	009a      	lsls	r2, r3, #2
 800835c:	441a      	add	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	fbb2 f2f3 	udiv	r2, r2, r3
 8008368:	4b1a      	ldr	r3, [pc, #104]	@ (80083d4 <UART_SetConfig+0x118>)
 800836a:	fba3 0302 	umull	r0, r3, r3, r2
 800836e:	095b      	lsrs	r3, r3, #5
 8008370:	2064      	movs	r0, #100	@ 0x64
 8008372:	fb00 f303 	mul.w	r3, r0, r3
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	011b      	lsls	r3, r3, #4
 800837a:	3332      	adds	r3, #50	@ 0x32
 800837c:	4a15      	ldr	r2, [pc, #84]	@ (80083d4 <UART_SetConfig+0x118>)
 800837e:	fba2 2303 	umull	r2, r3, r2, r3
 8008382:	095b      	lsrs	r3, r3, #5
 8008384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008388:	4419      	add	r1, r3
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009a      	lsls	r2, r3, #2
 8008394:	441a      	add	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	fbb2 f2f3 	udiv	r2, r2, r3
 80083a0:	4b0c      	ldr	r3, [pc, #48]	@ (80083d4 <UART_SetConfig+0x118>)
 80083a2:	fba3 0302 	umull	r0, r3, r3, r2
 80083a6:	095b      	lsrs	r3, r3, #5
 80083a8:	2064      	movs	r0, #100	@ 0x64
 80083aa:	fb00 f303 	mul.w	r3, r0, r3
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	3332      	adds	r3, #50	@ 0x32
 80083b4:	4a07      	ldr	r2, [pc, #28]	@ (80083d4 <UART_SetConfig+0x118>)
 80083b6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ba:	095b      	lsrs	r3, r3, #5
 80083bc:	f003 020f 	and.w	r2, r3, #15
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	440a      	add	r2, r1
 80083c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80083c8:	bf00      	nop
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	40013800 	.word	0x40013800
 80083d4:	51eb851f 	.word	0x51eb851f

080083d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80083d8:	b084      	sub	sp, #16
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	f107 0014 	add.w	r0, r7, #20
 80083e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bc80      	pop	{r7}
 80083f4:	b004      	add	sp, #16
 80083f6:	4770      	bx	lr

080083f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008408:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800840c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	bc80      	pop	{r7}
 8008422:	4770      	bx	lr

08008424 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800842c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008430:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008438:	b29a      	uxth	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	b29b      	uxth	r3, r3
 800843e:	43db      	mvns	r3, r3
 8008440:	b29b      	uxth	r3, r3
 8008442:	4013      	ands	r3, r2
 8008444:	b29a      	uxth	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	bc80      	pop	{r7}
 8008456:	4770      	bx	lr

08008458 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	bc80      	pop	{r7}
 800846e:	4770      	bx	lr

08008470 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008470:	b084      	sub	sp, #16
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	f107 0014 	add.w	r0, r7, #20
 800847e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bc80      	pop	{r7}
 80084ac:	b004      	add	sp, #16
 80084ae:	4770      	bx	lr

080084b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b09b      	sub	sp, #108	@ 0x6c
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80084d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084d6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	78db      	ldrb	r3, [r3, #3]
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d81f      	bhi.n	8008522 <USB_ActivateEndpoint+0x72>
 80084e2:	a201      	add	r2, pc, #4	@ (adr r2, 80084e8 <USB_ActivateEndpoint+0x38>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	080084f9 	.word	0x080084f9
 80084ec:	08008515 	.word	0x08008515
 80084f0:	0800852b 	.word	0x0800852b
 80084f4:	08008507 	.word	0x08008507
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80084f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80084fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008500:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008504:	e012      	b.n	800852c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008506:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800850a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800850e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008512:	e00b      	b.n	800852c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008514:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008518:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800851c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008520:	e004      	b.n	800852c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 8008528:	e000      	b.n	800852c <USB_ActivateEndpoint+0x7c>
      break;
 800852a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	441a      	add	r2, r3
 8008536:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800853a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800853e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800854a:	b29b      	uxth	r3, r3
 800854c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	b29b      	uxth	r3, r3
 800855c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008564:	b29b      	uxth	r3, r3
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	7812      	ldrb	r2, [r2, #0]
 800856a:	4313      	orrs	r3, r2
 800856c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	441a      	add	r2, r3
 800857a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800857e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800858a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800858e:	b29b      	uxth	r3, r3
 8008590:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	7b1b      	ldrb	r3, [r3, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f040 8149 	bne.w	800882e <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	785b      	ldrb	r3, [r3, #1]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 8084 	beq.w	80086ae <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	617b      	str	r3, [r7, #20]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	461a      	mov	r2, r3
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	4413      	add	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	011a      	lsls	r2, r3, #4
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	88db      	ldrh	r3, [r3, #6]
 80085ce:	085b      	lsrs	r3, r3, #1
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	81fb      	strh	r3, [r7, #14]
 80085e8:	89fb      	ldrh	r3, [r7, #14]
 80085ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d01b      	beq.n	800862a <USB_ActivateEndpoint+0x17a>
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	b29b      	uxth	r3, r3
 8008600:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008608:	81bb      	strh	r3, [r7, #12]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	441a      	add	r2, r3
 8008614:	89bb      	ldrh	r3, [r7, #12]
 8008616:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800861a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800861e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008622:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008626:	b29b      	uxth	r3, r3
 8008628:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	78db      	ldrb	r3, [r3, #3]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d020      	beq.n	8008674 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29b      	uxth	r3, r3
 8008640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008644:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008648:	813b      	strh	r3, [r7, #8]
 800864a:	893b      	ldrh	r3, [r7, #8]
 800864c:	f083 0320 	eor.w	r3, r3, #32
 8008650:	813b      	strh	r3, [r7, #8]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	441a      	add	r2, r3
 800865c:	893b      	ldrh	r3, [r7, #8]
 800865e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800866a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800866e:	b29b      	uxth	r3, r3
 8008670:	8013      	strh	r3, [r2, #0]
 8008672:	e27f      	b.n	8008b74 <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	b29b      	uxth	r3, r3
 8008682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800868a:	817b      	strh	r3, [r7, #10]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	441a      	add	r2, r3
 8008696:	897b      	ldrh	r3, [r7, #10]
 8008698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800869c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	8013      	strh	r3, [r2, #0]
 80086ac:	e262      	b.n	8008b74 <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	461a      	mov	r2, r3
 80086bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086be:	4413      	add	r3, r2
 80086c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	011a      	lsls	r2, r3, #4
 80086c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80086d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	88db      	ldrh	r3, [r3, #6]
 80086d6:	085b      	lsrs	r3, r3, #1
 80086d8:	b29b      	uxth	r3, r3
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e0:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	461a      	mov	r2, r3
 80086f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f2:	4413      	add	r3, r2
 80086f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	011a      	lsls	r2, r3, #4
 80086fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fe:	4413      	add	r3, r2
 8008700:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008704:	623b      	str	r3, [r7, #32]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d112      	bne.n	8008734 <USB_ActivateEndpoint+0x284>
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008718:	b29a      	uxth	r2, r3
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	801a      	strh	r2, [r3, #0]
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	b29b      	uxth	r3, r3
 8008724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800872c:	b29a      	uxth	r2, r3
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	801a      	strh	r2, [r3, #0]
 8008732:	e02f      	b.n	8008794 <USB_ActivateEndpoint+0x2e4>
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	2b3e      	cmp	r3, #62	@ 0x3e
 800873a:	d813      	bhi.n	8008764 <USB_ActivateEndpoint+0x2b4>
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	663b      	str	r3, [r7, #96]	@ 0x60
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <USB_ActivateEndpoint+0x2a6>
 8008750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008752:	3301      	adds	r3, #1
 8008754:	663b      	str	r3, [r7, #96]	@ 0x60
 8008756:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008758:	b29b      	uxth	r3, r3
 800875a:	029b      	lsls	r3, r3, #10
 800875c:	b29a      	uxth	r2, r3
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	801a      	strh	r2, [r3, #0]
 8008762:	e017      	b.n	8008794 <USB_ActivateEndpoint+0x2e4>
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	095b      	lsrs	r3, r3, #5
 800876a:	663b      	str	r3, [r7, #96]	@ 0x60
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f003 031f 	and.w	r3, r3, #31
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <USB_ActivateEndpoint+0x2ce>
 8008778:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800877a:	3b01      	subs	r3, #1
 800877c:	663b      	str	r3, [r7, #96]	@ 0x60
 800877e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008780:	b29b      	uxth	r3, r3
 8008782:	029b      	lsls	r3, r3, #10
 8008784:	b29b      	uxth	r3, r3
 8008786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800878a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800878e:	b29a      	uxth	r2, r3
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	83fb      	strh	r3, [r7, #30]
 80087a2:	8bfb      	ldrh	r3, [r7, #30]
 80087a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d01b      	beq.n	80087e4 <USB_ActivateEndpoint+0x334>
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c2:	83bb      	strh	r3, [r7, #28]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	441a      	add	r2, r3
 80087ce:	8bbb      	ldrh	r3, [r7, #28]
 80087d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087fa:	837b      	strh	r3, [r7, #26]
 80087fc:	8b7b      	ldrh	r3, [r7, #26]
 80087fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008802:	837b      	strh	r3, [r7, #26]
 8008804:	8b7b      	ldrh	r3, [r7, #26]
 8008806:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800880a:	837b      	strh	r3, [r7, #26]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	441a      	add	r2, r3
 8008816:	8b7b      	ldrh	r3, [r7, #26]
 8008818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800881c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008828:	b29b      	uxth	r3, r3
 800882a:	8013      	strh	r3, [r2, #0]
 800882c:	e1a2      	b.n	8008b74 <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	b29b      	uxth	r3, r3
 800883c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008844:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	441a      	add	r2, r3
 8008852:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800885a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800885e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008866:	b29b      	uxth	r3, r3
 8008868:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008874:	b29b      	uxth	r3, r3
 8008876:	461a      	mov	r2, r3
 8008878:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800887a:	4413      	add	r3, r2
 800887c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	011a      	lsls	r2, r3, #4
 8008884:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008886:	4413      	add	r3, r2
 8008888:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800888c:	657b      	str	r3, [r7, #84]	@ 0x54
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	891b      	ldrh	r3, [r3, #8]
 8008892:	085b      	lsrs	r3, r3, #1
 8008894:	b29b      	uxth	r3, r3
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	b29a      	uxth	r2, r3
 800889a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800889c:	801a      	strh	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	461a      	mov	r2, r3
 80088ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088ae:	4413      	add	r3, r2
 80088b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	011a      	lsls	r2, r3, #4
 80088b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80088c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	895b      	ldrh	r3, [r3, #10]
 80088c6:	085b      	lsrs	r3, r3, #1
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088d0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f040 8091 	bne.w	80089fe <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	881b      	ldrh	r3, [r3, #0]
 80088e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80088ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80088ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d01b      	beq.n	800892c <USB_ActivateEndpoint+0x47c>
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	b29b      	uxth	r3, r3
 8008902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800890a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	441a      	add	r2, r3
 8008916:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800891c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008920:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008928:	b29b      	uxth	r3, r3
 800892a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	873b      	strh	r3, [r7, #56]	@ 0x38
 800893a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800893c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d01b      	beq.n	800897c <USB_ActivateEndpoint+0x4cc>
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	b29b      	uxth	r3, r3
 8008952:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	441a      	add	r2, r3
 8008966:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800896c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008974:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008978:	b29b      	uxth	r3, r3
 800897a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	b29b      	uxth	r3, r3
 800898a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800898e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008992:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008994:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008996:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800899a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800899c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800899e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80089a2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	441a      	add	r2, r3
 80089ae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80089b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089da:	867b      	strh	r3, [r7, #50]	@ 0x32
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	441a      	add	r2, r3
 80089e6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80089e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	8013      	strh	r3, [r2, #0]
 80089fc:	e0ba      	b.n	8008b74 <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008a0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d01d      	beq.n	8008a56 <USB_ActivateEndpoint+0x5a6>
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a30:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	441a      	add	r2, r3
 8008a3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008a66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d01d      	beq.n	8008aae <USB_ActivateEndpoint+0x5fe>
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a88:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	441a      	add	r2, r3
 8008a96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aa6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	78db      	ldrb	r3, [r3, #3]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d024      	beq.n	8008b00 <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008acc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008ad0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008ad4:	f083 0320 	eor.w	r3, r3, #32
 8008ad8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	441a      	add	r2, r3
 8008ae6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008aea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	8013      	strh	r3, [r2, #0]
 8008afe:	e01d      	b.n	8008b3c <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	881b      	ldrh	r3, [r3, #0]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b16:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	441a      	add	r2, r3
 8008b24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008b28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b52:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	441a      	add	r2, r3
 8008b5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008b74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	376c      	adds	r7, #108	@ 0x6c
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop

08008b84 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b08d      	sub	sp, #52	@ 0x34
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	7b1b      	ldrb	r3, [r3, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f040 808e 	bne.w	8008cb4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	785b      	ldrb	r3, [r3, #1]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d044      	beq.n	8008c2a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	81bb      	strh	r3, [r7, #12]
 8008bae:	89bb      	ldrh	r3, [r7, #12]
 8008bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01b      	beq.n	8008bf0 <USB_DeactivateEndpoint+0x6c>
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bce:	817b      	strh	r3, [r7, #10]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	441a      	add	r2, r3
 8008bda:	897b      	ldrh	r3, [r7, #10]
 8008bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008be8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c06:	813b      	strh	r3, [r7, #8]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	441a      	add	r2, r3
 8008c12:	893b      	ldrh	r3, [r7, #8]
 8008c14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	8013      	strh	r3, [r2, #0]
 8008c28:	e192      	b.n	8008f50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	827b      	strh	r3, [r7, #18]
 8008c38:	8a7b      	ldrh	r3, [r7, #18]
 8008c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d01b      	beq.n	8008c7a <USB_DeactivateEndpoint+0xf6>
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c58:	823b      	strh	r3, [r7, #16]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	441a      	add	r2, r3
 8008c64:	8a3b      	ldrh	r3, [r7, #16]
 8008c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c90:	81fb      	strh	r3, [r7, #14]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	441a      	add	r2, r3
 8008c9c:	89fb      	ldrh	r3, [r7, #14]
 8008c9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	8013      	strh	r3, [r2, #0]
 8008cb2:	e14d      	b.n	8008f50 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	785b      	ldrb	r3, [r3, #1]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f040 80a5 	bne.w	8008e08 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	843b      	strh	r3, [r7, #32]
 8008ccc:	8c3b      	ldrh	r3, [r7, #32]
 8008cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01b      	beq.n	8008d0e <USB_DeactivateEndpoint+0x18a>
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cec:	83fb      	strh	r3, [r7, #30]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	441a      	add	r2, r3
 8008cf8:	8bfb      	ldrh	r3, [r7, #30]
 8008cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	83bb      	strh	r3, [r7, #28]
 8008d1c:	8bbb      	ldrh	r3, [r7, #28]
 8008d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d01b      	beq.n	8008d5e <USB_DeactivateEndpoint+0x1da>
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d3c:	837b      	strh	r3, [r7, #26]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	441a      	add	r2, r3
 8008d48:	8b7b      	ldrh	r3, [r7, #26]
 8008d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d74:	833b      	strh	r3, [r7, #24]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	441a      	add	r2, r3
 8008d80:	8b3b      	ldrh	r3, [r7, #24]
 8008d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dac:	82fb      	strh	r3, [r7, #22]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	441a      	add	r2, r3
 8008db8:	8afb      	ldrh	r3, [r7, #22]
 8008dba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008de4:	82bb      	strh	r3, [r7, #20]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	441a      	add	r2, r3
 8008df0:	8abb      	ldrh	r3, [r7, #20]
 8008df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008df6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	8013      	strh	r3, [r2, #0]
 8008e06:	e0a3      	b.n	8008f50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008e16:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d01b      	beq.n	8008e58 <USB_DeactivateEndpoint+0x2d4>
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e36:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	441a      	add	r2, r3
 8008e42:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008e66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01b      	beq.n	8008ea8 <USB_DeactivateEndpoint+0x324>
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e86:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	441a      	add	r2, r3
 8008e92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ea0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ebe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	441a      	add	r2, r3
 8008eca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ecc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ed0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ed4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	441a      	add	r2, r3
 8008f02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f2e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	441a      	add	r2, r3
 8008f3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3734      	adds	r7, #52	@ 0x34
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bc80      	pop	{r7}
 8008f5a:	4770      	bx	lr

08008f5c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b0c4      	sub	sp, #272	@ 0x110
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f6a:	6018      	str	r0, [r3, #0]
 8008f6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f70:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008f74:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	785b      	ldrb	r3, [r3, #1]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	f040 86ec 	bne.w	8009d60 <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008f88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	699a      	ldr	r2, [r3, #24]
 8008f94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d908      	bls.n	8008fb6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008fa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fa8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008fb4:	e007      	b.n	8008fc6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008fb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008fc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	7b1b      	ldrb	r3, [r3, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d142      	bne.n	800905c <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008fd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6959      	ldr	r1, [r3, #20]
 8008fe2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fe6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	88da      	ldrh	r2, [r3, #6]
 8008fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8008ff8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8008ffc:	6800      	ldr	r0, [r0, #0]
 8008ffe:	f001 fc92 	bl	800a926 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009002:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009006:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	617b      	str	r3, [r7, #20]
 800900e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009012:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800901c:	b29b      	uxth	r3, r3
 800901e:	461a      	mov	r2, r3
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	4413      	add	r3, r2
 8009024:	617b      	str	r3, [r7, #20]
 8009026:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800902a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	011a      	lsls	r2, r3, #4
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	4413      	add	r3, r2
 8009038:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 800903c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009040:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800904a:	b29a      	uxth	r2, r3
 800904c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009050:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	801a      	strh	r2, [r3, #0]
 8009058:	f000 be34 	b.w	8009cc4 <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800905c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009060:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	78db      	ldrb	r3, [r3, #3]
 8009068:	2b02      	cmp	r3, #2
 800906a:	f040 843b 	bne.w	80098e4 <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800906e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009072:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6a1a      	ldr	r2, [r3, #32]
 800907a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800907e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	429a      	cmp	r2, r3
 8009088:	f240 83b8 	bls.w	80097fc <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800908c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009090:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800909a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090b2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80090b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	441a      	add	r2, r3
 80090d0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80090d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090dc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80090e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80090e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6a1a      	ldr	r2, [r3, #32]
 80090f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090f8:	1ad2      	subs	r2, r2, r3
 80090fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009106:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800910a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009114:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	b29b      	uxth	r3, r3
 8009124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 81b4 	beq.w	8009496 <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800912e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009132:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	637b      	str	r3, [r7, #52]	@ 0x34
 800913a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800913e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	785b      	ldrb	r3, [r3, #1]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d16d      	bne.n	8009226 <USB_EPStartXfer+0x2ca>
 800914a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800914e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009156:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800915a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009164:	b29b      	uxth	r3, r3
 8009166:	461a      	mov	r2, r3
 8009168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916a:	4413      	add	r3, r2
 800916c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800916e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009172:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	011a      	lsls	r2, r3, #4
 800917c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917e:	4413      	add	r3, r2
 8009180:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800918a:	2b00      	cmp	r3, #0
 800918c:	d112      	bne.n	80091b4 <USB_EPStartXfer+0x258>
 800918e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009190:	881b      	ldrh	r3, [r3, #0]
 8009192:	b29b      	uxth	r3, r3
 8009194:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009198:	b29a      	uxth	r2, r3
 800919a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919c:	801a      	strh	r2, [r3, #0]
 800919e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b0:	801a      	strh	r2, [r3, #0]
 80091b2:	e05d      	b.n	8009270 <USB_EPStartXfer+0x314>
 80091b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80091ba:	d817      	bhi.n	80091ec <USB_EPStartXfer+0x290>
 80091bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091c0:	085b      	lsrs	r3, r3, #1
 80091c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80091c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d004      	beq.n	80091dc <USB_EPStartXfer+0x280>
 80091d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d6:	3301      	adds	r3, #1
 80091d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80091dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	029b      	lsls	r3, r3, #10
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e8:	801a      	strh	r2, [r3, #0]
 80091ea:	e041      	b.n	8009270 <USB_EPStartXfer+0x314>
 80091ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f0:	095b      	lsrs	r3, r3, #5
 80091f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80091f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091fa:	f003 031f 	and.w	r3, r3, #31
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d104      	bne.n	800920c <USB_EPStartXfer+0x2b0>
 8009202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009206:	3b01      	subs	r3, #1
 8009208:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800920c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009210:	b29b      	uxth	r3, r3
 8009212:	029b      	lsls	r3, r3, #10
 8009214:	b29b      	uxth	r3, r3
 8009216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800921a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800921e:	b29a      	uxth	r2, r3
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	801a      	strh	r2, [r3, #0]
 8009224:	e024      	b.n	8009270 <USB_EPStartXfer+0x314>
 8009226:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800922a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	785b      	ldrb	r3, [r3, #1]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d11c      	bne.n	8009270 <USB_EPStartXfer+0x314>
 8009236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800923a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009244:	b29b      	uxth	r3, r3
 8009246:	461a      	mov	r2, r3
 8009248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800924a:	4413      	add	r3, r2
 800924c:	637b      	str	r3, [r7, #52]	@ 0x34
 800924e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009252:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	011a      	lsls	r2, r3, #4
 800925c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925e:	4413      	add	r3, r2
 8009260:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009264:	633b      	str	r3, [r7, #48]	@ 0x30
 8009266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800926a:	b29a      	uxth	r2, r3
 800926c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009270:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009274:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	895b      	ldrh	r3, [r3, #10]
 800927c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009280:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009284:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6959      	ldr	r1, [r3, #20]
 800928c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009290:	b29b      	uxth	r3, r3
 8009292:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009296:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800929a:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800929e:	6800      	ldr	r0, [r0, #0]
 80092a0:	f001 fb41 	bl	800a926 <USB_WritePMA>
            ep->xfer_buff += len;
 80092a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	695a      	ldr	r2, [r3, #20]
 80092b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b4:	441a      	add	r2, r3
 80092b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80092c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6a1a      	ldr	r2, [r3, #32]
 80092ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d90f      	bls.n	80092fe <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 80092de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6a1a      	ldr	r2, [r3, #32]
 80092ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092ee:	1ad2      	subs	r2, r2, r3
 80092f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	621a      	str	r2, [r3, #32]
 80092fc:	e00e      	b.n	800931c <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 80092fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009302:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 800930e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009312:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2200      	movs	r2, #0
 800931a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800931c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009320:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	785b      	ldrb	r3, [r3, #1]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d16d      	bne.n	8009408 <USB_EPStartXfer+0x4ac>
 800932c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009330:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	61fb      	str	r3, [r7, #28]
 8009338:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800933c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009346:	b29b      	uxth	r3, r3
 8009348:	461a      	mov	r2, r3
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	4413      	add	r3, r2
 800934e:	61fb      	str	r3, [r7, #28]
 8009350:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009354:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	011a      	lsls	r2, r3, #4
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	4413      	add	r3, r2
 8009362:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009366:	61bb      	str	r3, [r7, #24]
 8009368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800936c:	2b00      	cmp	r3, #0
 800936e:	d112      	bne.n	8009396 <USB_EPStartXfer+0x43a>
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	b29b      	uxth	r3, r3
 8009376:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800937a:	b29a      	uxth	r2, r3
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	801a      	strh	r2, [r3, #0]
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29b      	uxth	r3, r3
 8009386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800938a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800938e:	b29a      	uxth	r2, r3
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	801a      	strh	r2, [r3, #0]
 8009394:	e063      	b.n	800945e <USB_EPStartXfer+0x502>
 8009396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800939a:	2b3e      	cmp	r3, #62	@ 0x3e
 800939c:	d817      	bhi.n	80093ce <USB_EPStartXfer+0x472>
 800939e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093a2:	085b      	lsrs	r3, r3, #1
 80093a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80093a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d004      	beq.n	80093be <USB_EPStartXfer+0x462>
 80093b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80093b8:	3301      	adds	r3, #1
 80093ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80093be:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	029b      	lsls	r3, r3, #10
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	801a      	strh	r2, [r3, #0]
 80093cc:	e047      	b.n	800945e <USB_EPStartXfer+0x502>
 80093ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093d2:	095b      	lsrs	r3, r3, #5
 80093d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80093d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093dc:	f003 031f 	and.w	r3, r3, #31
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d104      	bne.n	80093ee <USB_EPStartXfer+0x492>
 80093e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80093e8:	3b01      	subs	r3, #1
 80093ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80093ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	029b      	lsls	r3, r3, #10
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009400:	b29a      	uxth	r2, r3
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	801a      	strh	r2, [r3, #0]
 8009406:	e02a      	b.n	800945e <USB_EPStartXfer+0x502>
 8009408:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800940c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	785b      	ldrb	r3, [r3, #1]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d122      	bne.n	800945e <USB_EPStartXfer+0x502>
 8009418:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800941c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	627b      	str	r3, [r7, #36]	@ 0x24
 8009424:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009428:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009432:	b29b      	uxth	r3, r3
 8009434:	461a      	mov	r2, r3
 8009436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009438:	4413      	add	r3, r2
 800943a:	627b      	str	r3, [r7, #36]	@ 0x24
 800943c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009440:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	011a      	lsls	r2, r3, #4
 800944a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944c:	4413      	add	r3, r2
 800944e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009452:	623b      	str	r3, [r7, #32]
 8009454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009458:	b29a      	uxth	r2, r3
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800945e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009462:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	891b      	ldrh	r3, [r3, #8]
 800946a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800946e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009472:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6959      	ldr	r1, [r3, #20]
 800947a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800947e:	b29b      	uxth	r3, r3
 8009480:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009484:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009488:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800948c:	6800      	ldr	r0, [r0, #0]
 800948e:	f001 fa4a 	bl	800a926 <USB_WritePMA>
 8009492:	f000 bc17 	b.w	8009cc4 <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009496:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800949a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	785b      	ldrb	r3, [r3, #1]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d16d      	bne.n	8009582 <USB_EPStartXfer+0x626>
 80094a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	461a      	mov	r2, r3
 80094c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094c6:	4413      	add	r3, r2
 80094c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	011a      	lsls	r2, r3, #4
 80094d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094da:	4413      	add	r3, r2
 80094dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80094e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d112      	bne.n	8009510 <USB_EPStartXfer+0x5b4>
 80094ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094f8:	801a      	strh	r2, [r3, #0]
 80094fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	b29b      	uxth	r3, r3
 8009500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009508:	b29a      	uxth	r2, r3
 800950a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800950c:	801a      	strh	r2, [r3, #0]
 800950e:	e063      	b.n	80095d8 <USB_EPStartXfer+0x67c>
 8009510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009514:	2b3e      	cmp	r3, #62	@ 0x3e
 8009516:	d817      	bhi.n	8009548 <USB_EPStartXfer+0x5ec>
 8009518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800951c:	085b      	lsrs	r3, r3, #1
 800951e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d004      	beq.n	8009538 <USB_EPStartXfer+0x5dc>
 800952e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009532:	3301      	adds	r3, #1
 8009534:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800953c:	b29b      	uxth	r3, r3
 800953e:	029b      	lsls	r3, r3, #10
 8009540:	b29a      	uxth	r2, r3
 8009542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009544:	801a      	strh	r2, [r3, #0]
 8009546:	e047      	b.n	80095d8 <USB_EPStartXfer+0x67c>
 8009548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800954c:	095b      	lsrs	r3, r3, #5
 800954e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009556:	f003 031f 	and.w	r3, r3, #31
 800955a:	2b00      	cmp	r3, #0
 800955c:	d104      	bne.n	8009568 <USB_EPStartXfer+0x60c>
 800955e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009562:	3b01      	subs	r3, #1
 8009564:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800956c:	b29b      	uxth	r3, r3
 800956e:	029b      	lsls	r3, r3, #10
 8009570:	b29b      	uxth	r3, r3
 8009572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800957a:	b29a      	uxth	r2, r3
 800957c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800957e:	801a      	strh	r2, [r3, #0]
 8009580:	e02a      	b.n	80095d8 <USB_EPStartXfer+0x67c>
 8009582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009586:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	785b      	ldrb	r3, [r3, #1]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d122      	bne.n	80095d8 <USB_EPStartXfer+0x67c>
 8009592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009596:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	657b      	str	r3, [r7, #84]	@ 0x54
 800959e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095b2:	4413      	add	r3, r2
 80095b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80095b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	011a      	lsls	r2, r3, #4
 80095c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095c6:	4413      	add	r3, r2
 80095c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80095cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80095ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80095d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	891b      	ldrh	r3, [r3, #8]
 80095e4:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6959      	ldr	r1, [r3, #20]
 80095f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80095fe:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009602:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009606:	6800      	ldr	r0, [r0, #0]
 8009608:	f001 f98d 	bl	800a926 <USB_WritePMA>
            ep->xfer_buff += len;
 800960c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009610:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	695a      	ldr	r2, [r3, #20]
 8009618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800961c:	441a      	add	r2, r3
 800961e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009622:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800962a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800962e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6a1a      	ldr	r2, [r3, #32]
 8009636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800963a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	429a      	cmp	r2, r3
 8009644:	d90f      	bls.n	8009666 <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 8009646:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800964a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6a1a      	ldr	r2, [r3, #32]
 8009652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009656:	1ad2      	subs	r2, r2, r3
 8009658:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800965c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	621a      	str	r2, [r3, #32]
 8009664:	e00e      	b.n	8009684 <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8009666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800966a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009676:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800967a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2200      	movs	r2, #0
 8009682:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009684:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009688:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009690:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009694:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	785b      	ldrb	r3, [r3, #1]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d16d      	bne.n	800977c <USB_EPStartXfer+0x820>
 80096a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	461a      	mov	r2, r3
 80096be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c0:	4413      	add	r3, r2
 80096c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	011a      	lsls	r2, r3, #4
 80096d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096d4:	4413      	add	r3, r2
 80096d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80096da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d112      	bne.n	800970a <USB_EPStartXfer+0x7ae>
 80096e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	801a      	strh	r2, [r3, #0]
 80096f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009702:	b29a      	uxth	r2, r3
 8009704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009706:	801a      	strh	r2, [r3, #0]
 8009708:	e05d      	b.n	80097c6 <USB_EPStartXfer+0x86a>
 800970a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800970e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009710:	d817      	bhi.n	8009742 <USB_EPStartXfer+0x7e6>
 8009712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009716:	085b      	lsrs	r3, r3, #1
 8009718:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800971c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d004      	beq.n	8009732 <USB_EPStartXfer+0x7d6>
 8009728:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800972c:	3301      	adds	r3, #1
 800972e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009736:	b29b      	uxth	r3, r3
 8009738:	029b      	lsls	r3, r3, #10
 800973a:	b29a      	uxth	r2, r3
 800973c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973e:	801a      	strh	r2, [r3, #0]
 8009740:	e041      	b.n	80097c6 <USB_EPStartXfer+0x86a>
 8009742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009746:	095b      	lsrs	r3, r3, #5
 8009748:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800974c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009750:	f003 031f 	and.w	r3, r3, #31
 8009754:	2b00      	cmp	r3, #0
 8009756:	d104      	bne.n	8009762 <USB_EPStartXfer+0x806>
 8009758:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800975c:	3b01      	subs	r3, #1
 800975e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009766:	b29b      	uxth	r3, r3
 8009768:	029b      	lsls	r3, r3, #10
 800976a:	b29b      	uxth	r3, r3
 800976c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009774:	b29a      	uxth	r2, r3
 8009776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009778:	801a      	strh	r2, [r3, #0]
 800977a:	e024      	b.n	80097c6 <USB_EPStartXfer+0x86a>
 800977c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009780:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	785b      	ldrb	r3, [r3, #1]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d11c      	bne.n	80097c6 <USB_EPStartXfer+0x86a>
 800978c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009790:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800979a:	b29b      	uxth	r3, r3
 800979c:	461a      	mov	r2, r3
 800979e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097a0:	4413      	add	r3, r2
 80097a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80097a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	011a      	lsls	r2, r3, #4
 80097b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097b4:	4413      	add	r3, r2
 80097b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80097ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80097bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80097c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	895b      	ldrh	r3, [r3, #10]
 80097d2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6959      	ldr	r1, [r3, #20]
 80097e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80097ec:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80097f0:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80097f4:	6800      	ldr	r0, [r0, #0]
 80097f6:	f001 f896 	bl	800a926 <USB_WritePMA>
 80097fa:	e263      	b.n	8009cc4 <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80097fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009800:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800980c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009810:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800981a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	881b      	ldrh	r3, [r3, #0]
 8009828:	b29b      	uxth	r3, r3
 800982a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800982e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009832:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009836:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800983a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009844:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	441a      	add	r2, r3
 8009850:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800985c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009864:	b29b      	uxth	r3, r3
 8009866:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009868:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800986c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	663b      	str	r3, [r7, #96]	@ 0x60
 8009874:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009878:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009882:	b29b      	uxth	r3, r3
 8009884:	461a      	mov	r2, r3
 8009886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009888:	4413      	add	r3, r2
 800988a:	663b      	str	r3, [r7, #96]	@ 0x60
 800988c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009890:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	011a      	lsls	r2, r3, #4
 800989a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800989c:	4413      	add	r3, r2
 800989e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80098a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80098ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	891b      	ldrh	r3, [r3, #8]
 80098ba:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6959      	ldr	r1, [r3, #20]
 80098ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80098d4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80098d8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80098dc:	6800      	ldr	r0, [r0, #0]
 80098de:	f001 f822 	bl	800a926 <USB_WritePMA>
 80098e2:	e1ef      	b.n	8009cc4 <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80098e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	b29b      	uxth	r3, r3
 8009902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009906:	2b00      	cmp	r3, #0
 8009908:	f000 80aa 	beq.w	8009a60 <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800990c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009910:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009918:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800991c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	785b      	ldrb	r3, [r3, #1]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d16d      	bne.n	8009a04 <USB_EPStartXfer+0xaa8>
 8009928:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800992c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	673b      	str	r3, [r7, #112]	@ 0x70
 8009934:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009938:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009942:	b29b      	uxth	r3, r3
 8009944:	461a      	mov	r2, r3
 8009946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009948:	4413      	add	r3, r2
 800994a:	673b      	str	r3, [r7, #112]	@ 0x70
 800994c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009950:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	011a      	lsls	r2, r3, #4
 800995a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800995c:	4413      	add	r3, r2
 800995e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009962:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009968:	2b00      	cmp	r3, #0
 800996a:	d112      	bne.n	8009992 <USB_EPStartXfer+0xa36>
 800996c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	b29b      	uxth	r3, r3
 8009972:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009976:	b29a      	uxth	r2, r3
 8009978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800997a:	801a      	strh	r2, [r3, #0]
 800997c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	b29b      	uxth	r3, r3
 8009982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800998a:	b29a      	uxth	r2, r3
 800998c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800998e:	801a      	strh	r2, [r3, #0]
 8009990:	e05d      	b.n	8009a4e <USB_EPStartXfer+0xaf2>
 8009992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009996:	2b3e      	cmp	r3, #62	@ 0x3e
 8009998:	d817      	bhi.n	80099ca <USB_EPStartXfer+0xa6e>
 800999a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800999e:	085b      	lsrs	r3, r3, #1
 80099a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80099a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d004      	beq.n	80099ba <USB_EPStartXfer+0xa5e>
 80099b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099b4:	3301      	adds	r3, #1
 80099b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80099ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099be:	b29b      	uxth	r3, r3
 80099c0:	029b      	lsls	r3, r3, #10
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099c6:	801a      	strh	r2, [r3, #0]
 80099c8:	e041      	b.n	8009a4e <USB_EPStartXfer+0xaf2>
 80099ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ce:	095b      	lsrs	r3, r3, #5
 80099d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80099d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099d8:	f003 031f 	and.w	r3, r3, #31
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <USB_EPStartXfer+0xa8e>
 80099e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e4:	3b01      	subs	r3, #1
 80099e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80099ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	029b      	lsls	r3, r3, #10
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a00:	801a      	strh	r2, [r3, #0]
 8009a02:	e024      	b.n	8009a4e <USB_EPStartXfer+0xaf2>
 8009a04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	785b      	ldrb	r3, [r3, #1]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d11c      	bne.n	8009a4e <USB_EPStartXfer+0xaf2>
 8009a14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	461a      	mov	r2, r3
 8009a26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a28:	4413      	add	r3, r2
 8009a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	011a      	lsls	r2, r3, #4
 8009a3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009a42:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a4c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009a4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	895b      	ldrh	r3, [r3, #10]
 8009a5a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 8009a5e:	e0b2      	b.n	8009bc6 <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a64:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d171      	bne.n	8009b54 <USB_EPStartXfer+0xbf8>
 8009a70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009a94:	4413      	add	r3, r2
 8009a96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a9e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	011a      	lsls	r2, r3, #4
 8009aa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009aac:	4413      	add	r3, r2
 8009aae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ab2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d112      	bne.n	8009ae2 <USB_EPStartXfer+0xb86>
 8009abc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009abe:	881b      	ldrh	r3, [r3, #0]
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009aca:	801a      	strh	r2, [r3, #0]
 8009acc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ade:	801a      	strh	r2, [r3, #0]
 8009ae0:	e069      	b.n	8009bb6 <USB_EPStartXfer+0xc5a>
 8009ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ae6:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ae8:	d817      	bhi.n	8009b1a <USB_EPStartXfer+0xbbe>
 8009aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aee:	085b      	lsrs	r3, r3, #1
 8009af0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d004      	beq.n	8009b0a <USB_EPStartXfer+0xbae>
 8009b00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009b04:	3301      	adds	r3, #1
 8009b06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009b0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	029b      	lsls	r3, r3, #10
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b16:	801a      	strh	r2, [r3, #0]
 8009b18:	e04d      	b.n	8009bb6 <USB_EPStartXfer+0xc5a>
 8009b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b1e:	095b      	lsrs	r3, r3, #5
 8009b20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b28:	f003 031f 	and.w	r3, r3, #31
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d104      	bne.n	8009b3a <USB_EPStartXfer+0xbde>
 8009b30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009b34:	3b01      	subs	r3, #1
 8009b36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009b3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	029b      	lsls	r3, r3, #10
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b50:	801a      	strh	r2, [r3, #0]
 8009b52:	e030      	b.n	8009bb6 <USB_EPStartXfer+0xc5a>
 8009b54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	785b      	ldrb	r3, [r3, #1]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d128      	bne.n	8009bb6 <USB_EPStartXfer+0xc5a>
 8009b64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	461a      	mov	r2, r3
 8009b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b88:	4413      	add	r3, r2
 8009b8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	011a      	lsls	r2, r3, #4
 8009b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ba6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009bb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009bb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	891b      	ldrh	r3, [r3, #8]
 8009bc2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6959      	ldr	r1, [r3, #20]
 8009bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009bdc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009be0:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009be4:	6800      	ldr	r0, [r0, #0]
 8009be6:	f000 fe9e 	bl	800a926 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009bea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	785b      	ldrb	r3, [r3, #1]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d12e      	bne.n	8009c58 <USB_EPStartXfer+0xcfc>
 8009bfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bfe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c20:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009c24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	441a      	add	r2, r3
 8009c3e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	8013      	strh	r3, [r2, #0]
 8009c56:	e035      	b.n	8009cc4 <USB_EPStartXfer+0xd68>
 8009c58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	785b      	ldrb	r3, [r3, #1]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d12d      	bne.n	8009cc4 <USB_EPStartXfer+0xd68>
 8009c68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c76:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	881b      	ldrh	r3, [r3, #0]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c8e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009c92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ca0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	441a      	add	r2, r3
 8009cac:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009cc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cc8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009ce6:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cf2:	8013      	strh	r3, [r2, #0]
 8009cf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cf8:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009cfc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009d00:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009d04:	8812      	ldrh	r2, [r2, #0]
 8009d06:	f082 0210 	eor.w	r2, r2, #16
 8009d0a:	801a      	strh	r2, [r3, #0]
 8009d0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d10:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009d14:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009d18:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 8009d1c:	8812      	ldrh	r2, [r2, #0]
 8009d1e:	f082 0220 	eor.w	r2, r2, #32
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d32:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	441a      	add	r2, r3
 8009d3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d42:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8009d46:	881b      	ldrh	r3, [r3, #0]
 8009d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	8013      	strh	r3, [r2, #0]
 8009d5c:	f000 bc9f 	b.w	800a69e <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009d60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d64:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	7b1b      	ldrb	r3, [r3, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f040 80ae 	bne.w	8009ece <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009d72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d76:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	699a      	ldr	r2, [r3, #24]
 8009d7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d917      	bls.n	8009dbe <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 8009d8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 8009d9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009da2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	699a      	ldr	r2, [r3, #24]
 8009daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dae:	1ad2      	subs	r2, r2, r3
 8009db0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009db4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	619a      	str	r2, [r3, #24]
 8009dbc:	e00e      	b.n	8009ddc <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 8009dbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 8009dce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009ddc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009de0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e00:	4413      	add	r3, r2
 8009e02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e0a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	011a      	lsls	r2, r3, #4
 8009e14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e18:	4413      	add	r3, r2
 8009e1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009e1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d116      	bne.n	8009e58 <USB_EPStartXfer+0xefc>
 8009e2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e3c:	801a      	strh	r2, [r3, #0]
 8009e3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e42:	881b      	ldrh	r3, [r3, #0]
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e54:	801a      	strh	r2, [r3, #0]
 8009e56:	e3e8      	b.n	800a62a <USB_EPStartXfer+0x16ce>
 8009e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e5e:	d818      	bhi.n	8009e92 <USB_EPStartXfer+0xf36>
 8009e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e64:	085b      	lsrs	r3, r3, #1
 8009e66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <USB_EPStartXfer+0xf24>
 8009e76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009e80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	029b      	lsls	r3, r3, #10
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e8e:	801a      	strh	r2, [r3, #0]
 8009e90:	e3cb      	b.n	800a62a <USB_EPStartXfer+0x16ce>
 8009e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e96:	095b      	lsrs	r3, r3, #5
 8009e98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ea0:	f003 031f 	and.w	r3, r3, #31
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d104      	bne.n	8009eb2 <USB_EPStartXfer+0xf56>
 8009ea8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009eac:	3b01      	subs	r3, #1
 8009eae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009eb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	029b      	lsls	r3, r3, #10
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009eca:	801a      	strh	r2, [r3, #0]
 8009ecc:	e3ad      	b.n	800a62a <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009ece:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ed2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	78db      	ldrb	r3, [r3, #3]
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	f040 8200 	bne.w	800a2e0 <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009ee0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ee4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	785b      	ldrb	r3, [r3, #1]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f040 8091 	bne.w	800a014 <USB_EPStartXfer+0x10b8>
 8009ef2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ef6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	461a      	mov	r2, r3
 8009f12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009f16:	4413      	add	r3, r2
 8009f18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	011a      	lsls	r2, r3, #4
 8009f2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009f2e:	4413      	add	r3, r2
 8009f30:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d116      	bne.n	8009f76 <USB_EPStartXfer+0x101a>
 8009f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f5a:	801a      	strh	r2, [r3, #0]
 8009f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f72:	801a      	strh	r2, [r3, #0]
 8009f74:	e083      	b.n	800a07e <USB_EPStartXfer+0x1122>
 8009f76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f84:	d820      	bhi.n	8009fc8 <USB_EPStartXfer+0x106c>
 8009f86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	085b      	lsrs	r3, r3, #1
 8009f94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009f98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d004      	beq.n	8009fb6 <USB_EPStartXfer+0x105a>
 8009fac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009fb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	029b      	lsls	r3, r3, #10
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fc4:	801a      	strh	r2, [r3, #0]
 8009fc6:	e05a      	b.n	800a07e <USB_EPStartXfer+0x1122>
 8009fc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fcc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	095b      	lsrs	r3, r3, #5
 8009fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009fda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fde:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	f003 031f 	and.w	r3, r3, #31
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d104      	bne.n	8009ff8 <USB_EPStartXfer+0x109c>
 8009fee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009ff8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	029b      	lsls	r3, r3, #10
 800a000:	b29b      	uxth	r3, r3
 800a002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a010:	801a      	strh	r2, [r3, #0]
 800a012:	e034      	b.n	800a07e <USB_EPStartXfer+0x1122>
 800a014:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a018:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	785b      	ldrb	r3, [r3, #1]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d12c      	bne.n	800a07e <USB_EPStartXfer+0x1122>
 800a024:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a028:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a032:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a036:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a040:	b29b      	uxth	r3, r3
 800a042:	461a      	mov	r2, r3
 800a044:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a048:	4413      	add	r3, r2
 800a04a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a04e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a052:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	011a      	lsls	r2, r3, #4
 800a05c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a060:	4413      	add	r3, r2
 800a062:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a066:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a06a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a06e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	b29a      	uxth	r2, r3
 800a078:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a07c:	801a      	strh	r2, [r3, #0]
 800a07e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a082:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a08c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a090:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	785b      	ldrb	r3, [r3, #1]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f040 8091 	bne.w	800a1c0 <USB_EPStartXfer+0x1264>
 800a09e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a0ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	461a      	mov	r2, r3
 800a0be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a0c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	011a      	lsls	r2, r3, #4
 800a0d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a0da:	4413      	add	r3, r2
 800a0dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a0e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d116      	bne.n	800a122 <USB_EPStartXfer+0x11c6>
 800a0f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a100:	b29a      	uxth	r2, r3
 800a102:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a106:	801a      	strh	r2, [r3, #0]
 800a108:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	b29b      	uxth	r3, r3
 800a110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a118:	b29a      	uxth	r2, r3
 800a11a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a11e:	801a      	strh	r2, [r3, #0]
 800a120:	e07c      	b.n	800a21c <USB_EPStartXfer+0x12c0>
 800a122:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a126:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a130:	d820      	bhi.n	800a174 <USB_EPStartXfer+0x1218>
 800a132:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a136:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	085b      	lsrs	r3, r3, #1
 800a140:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a144:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a148:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	2b00      	cmp	r3, #0
 800a156:	d004      	beq.n	800a162 <USB_EPStartXfer+0x1206>
 800a158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a15c:	3301      	adds	r3, #1
 800a15e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a166:	b29b      	uxth	r3, r3
 800a168:	029b      	lsls	r3, r3, #10
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a170:	801a      	strh	r2, [r3, #0]
 800a172:	e053      	b.n	800a21c <USB_EPStartXfer+0x12c0>
 800a174:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a178:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	095b      	lsrs	r3, r3, #5
 800a182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a186:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a18a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	f003 031f 	and.w	r3, r3, #31
 800a196:	2b00      	cmp	r3, #0
 800a198:	d104      	bne.n	800a1a4 <USB_EPStartXfer+0x1248>
 800a19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	029b      	lsls	r3, r3, #10
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a1bc:	801a      	strh	r2, [r3, #0]
 800a1be:	e02d      	b.n	800a21c <USB_EPStartXfer+0x12c0>
 800a1c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	785b      	ldrb	r3, [r3, #1]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d125      	bne.n	800a21c <USB_EPStartXfer+0x12c0>
 800a1d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a1ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	011a      	lsls	r2, r3, #4
 800a1fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a1fe:	4413      	add	r3, r2
 800a200:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a204:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a208:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a20c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	b29a      	uxth	r2, r3
 800a216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a21a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a21c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a220:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 81fe 	beq.w	800a62a <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a22e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a232:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a23c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a24e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <USB_EPStartXfer+0x130a>
 800a25a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a25e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10d      	bne.n	800a282 <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a266:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a26a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f040 81db 	bne.w	800a62a <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a274:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f040 81d4 	bne.w	800a62a <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a282:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a286:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a290:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2a8:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800a2ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	441a      	add	r2, r3
 800a2c6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800a2ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	8013      	strh	r3, [r2, #0]
 800a2de:	e1a4      	b.n	800a62a <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a2e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	78db      	ldrb	r3, [r3, #3]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	f040 819a 	bne.w	800a626 <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a2f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	699a      	ldr	r2, [r3, #24]
 800a2fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a302:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d917      	bls.n	800a33e <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800a30e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a312:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800a31e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a322:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	699a      	ldr	r2, [r3, #24]
 800a32a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a32e:	1ad2      	subs	r2, r2, r3
 800a330:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a334:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	619a      	str	r2, [r3, #24]
 800a33c:	e00e      	b.n	800a35c <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800a33e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a342:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800a34e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a352:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2200      	movs	r2, #0
 800a35a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a35c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a360:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d178      	bne.n	800a45e <USB_EPStartXfer+0x1502>
 800a36c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a370:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a37a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a37e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a388:	b29b      	uxth	r3, r3
 800a38a:	461a      	mov	r2, r3
 800a38c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a390:	4413      	add	r3, r2
 800a392:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a396:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a39a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	011a      	lsls	r2, r3, #4
 800a3a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a3ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d116      	bne.n	800a3e8 <USB_EPStartXfer+0x148c>
 800a3ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a3be:	881b      	ldrh	r3, [r3, #0]
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a3cc:	801a      	strh	r2, [r3, #0]
 800a3ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a3e4:	801a      	strh	r2, [r3, #0]
 800a3e6:	e06b      	b.n	800a4c0 <USB_EPStartXfer+0x1564>
 800a3e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3ee:	d818      	bhi.n	800a422 <USB_EPStartXfer+0x14c6>
 800a3f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3f4:	085b      	lsrs	r3, r3, #1
 800a3f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a3fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	d004      	beq.n	800a410 <USB_EPStartXfer+0x14b4>
 800a406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a40a:	3301      	adds	r3, #1
 800a40c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a414:	b29b      	uxth	r3, r3
 800a416:	029b      	lsls	r3, r3, #10
 800a418:	b29a      	uxth	r2, r3
 800a41a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a41e:	801a      	strh	r2, [r3, #0]
 800a420:	e04e      	b.n	800a4c0 <USB_EPStartXfer+0x1564>
 800a422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a426:	095b      	lsrs	r3, r3, #5
 800a428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a42c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a430:	f003 031f 	and.w	r3, r3, #31
 800a434:	2b00      	cmp	r3, #0
 800a436:	d104      	bne.n	800a442 <USB_EPStartXfer+0x14e6>
 800a438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a43c:	3b01      	subs	r3, #1
 800a43e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a446:	b29b      	uxth	r3, r3
 800a448:	029b      	lsls	r3, r3, #10
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a454:	b29a      	uxth	r2, r3
 800a456:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a45a:	801a      	strh	r2, [r3, #0]
 800a45c:	e030      	b.n	800a4c0 <USB_EPStartXfer+0x1564>
 800a45e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a462:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	785b      	ldrb	r3, [r3, #1]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d128      	bne.n	800a4c0 <USB_EPStartXfer+0x1564>
 800a46e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a472:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a47c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a480:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	461a      	mov	r2, r3
 800a48e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a492:	4413      	add	r3, r2
 800a494:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a498:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a49c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	011a      	lsls	r2, r3, #4
 800a4a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a4b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a4b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a4be:	801a      	strh	r2, [r3, #0]
 800a4c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	785b      	ldrb	r3, [r3, #1]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d178      	bne.n	800a5d0 <USB_EPStartXfer+0x1674>
 800a4de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a4ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a502:	4413      	add	r3, r2
 800a504:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a508:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a50c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	011a      	lsls	r2, r3, #4
 800a516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a51a:	4413      	add	r3, r2
 800a51c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a520:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d116      	bne.n	800a55a <USB_EPStartXfer+0x15fe>
 800a52c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	b29b      	uxth	r3, r3
 800a534:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a538:	b29a      	uxth	r2, r3
 800a53a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a53e:	801a      	strh	r2, [r3, #0]
 800a540:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	b29b      	uxth	r3, r3
 800a548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a54c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a550:	b29a      	uxth	r2, r3
 800a552:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a556:	801a      	strh	r2, [r3, #0]
 800a558:	e067      	b.n	800a62a <USB_EPStartXfer+0x16ce>
 800a55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a55e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a560:	d818      	bhi.n	800a594 <USB_EPStartXfer+0x1638>
 800a562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a566:	085b      	lsrs	r3, r3, #1
 800a568:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a56c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <USB_EPStartXfer+0x1626>
 800a578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a57c:	3301      	adds	r3, #1
 800a57e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a586:	b29b      	uxth	r3, r3
 800a588:	029b      	lsls	r3, r3, #10
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a590:	801a      	strh	r2, [r3, #0]
 800a592:	e04a      	b.n	800a62a <USB_EPStartXfer+0x16ce>
 800a594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a598:	095b      	lsrs	r3, r3, #5
 800a59a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a59e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a2:	f003 031f 	and.w	r3, r3, #31
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d104      	bne.n	800a5b4 <USB_EPStartXfer+0x1658>
 800a5aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a5b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	029b      	lsls	r3, r3, #10
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a5cc:	801a      	strh	r2, [r3, #0]
 800a5ce:	e02c      	b.n	800a62a <USB_EPStartXfer+0x16ce>
 800a5d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	785b      	ldrb	r3, [r3, #1]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d124      	bne.n	800a62a <USB_EPStartXfer+0x16ce>
 800a5e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a5fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a600:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	011a      	lsls	r2, r3, #4
 800a60a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a60e:	4413      	add	r3, r2
 800a610:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a622:	801a      	strh	r2, [r3, #0]
 800a624:	e001      	b.n	800a62a <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e03a      	b.n	800a6a0 <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a62a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a62e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a638:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	b29b      	uxth	r3, r3
 800a648:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a64c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a650:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a654:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a658:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a65c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a660:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a664:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a668:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a66c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a670:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a67a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	441a      	add	r2, r3
 800a686:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a68a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a68e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b085      	sub	sp, #20
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	785b      	ldrb	r3, [r3, #1]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d020      	beq.n	800a6fe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	881b      	ldrh	r3, [r3, #0]
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6d2:	81bb      	strh	r3, [r7, #12]
 800a6d4:	89bb      	ldrh	r3, [r7, #12]
 800a6d6:	f083 0310 	eor.w	r3, r3, #16
 800a6da:	81bb      	strh	r3, [r7, #12]
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	441a      	add	r2, r3
 800a6e6:	89bb      	ldrh	r3, [r7, #12]
 800a6e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	8013      	strh	r3, [r2, #0]
 800a6fc:	e01f      	b.n	800a73e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a714:	81fb      	strh	r3, [r7, #14]
 800a716:	89fb      	ldrh	r3, [r7, #14]
 800a718:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a71c:	81fb      	strh	r3, [r7, #14]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	441a      	add	r2, r3
 800a728:	89fb      	ldrh	r3, [r7, #14]
 800a72a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a72e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	bc80      	pop	{r7}
 800a748:	4770      	bx	lr

0800a74a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b087      	sub	sp, #28
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	7b1b      	ldrb	r3, [r3, #12]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f040 809d 	bne.w	800a898 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	785b      	ldrb	r3, [r3, #1]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d04c      	beq.n	800a800 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	823b      	strh	r3, [r7, #16]
 800a774:	8a3b      	ldrh	r3, [r7, #16]
 800a776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d01b      	beq.n	800a7b6 <USB_EPClearStall+0x6c>
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a794:	81fb      	strh	r3, [r7, #14]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	441a      	add	r2, r3
 800a7a0:	89fb      	ldrh	r3, [r7, #14]
 800a7a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	78db      	ldrb	r3, [r3, #3]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d06c      	beq.n	800a898 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4413      	add	r3, r2
 800a7c8:	881b      	ldrh	r3, [r3, #0]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7d4:	81bb      	strh	r3, [r7, #12]
 800a7d6:	89bb      	ldrh	r3, [r7, #12]
 800a7d8:	f083 0320 	eor.w	r3, r3, #32
 800a7dc:	81bb      	strh	r3, [r7, #12]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	441a      	add	r2, r3
 800a7e8:	89bb      	ldrh	r3, [r7, #12]
 800a7ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	8013      	strh	r3, [r2, #0]
 800a7fe:	e04b      	b.n	800a898 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	82fb      	strh	r3, [r7, #22]
 800a80e:	8afb      	ldrh	r3, [r7, #22]
 800a810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d01b      	beq.n	800a850 <USB_EPClearStall+0x106>
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	b29b      	uxth	r3, r3
 800a826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a82a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a82e:	82bb      	strh	r3, [r7, #20]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	441a      	add	r2, r3
 800a83a:	8abb      	ldrh	r3, [r7, #20]
 800a83c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	881b      	ldrh	r3, [r3, #0]
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a866:	827b      	strh	r3, [r7, #18]
 800a868:	8a7b      	ldrh	r3, [r7, #18]
 800a86a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a86e:	827b      	strh	r3, [r7, #18]
 800a870:	8a7b      	ldrh	r3, [r7, #18]
 800a872:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a876:	827b      	strh	r3, [r7, #18]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	441a      	add	r2, r3
 800a882:	8a7b      	ldrh	r3, [r7, #18]
 800a884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a88c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a894:	b29b      	uxth	r3, r3
 800a896:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	371c      	adds	r7, #28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bc80      	pop	{r7}
 800a8a2:	4770      	bx	lr

0800a8a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a8b0:	78fb      	ldrb	r3, [r7, #3]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d103      	bne.n	800a8be <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2280      	movs	r2, #128	@ 0x80
 800a8ba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bc80      	pop	{r7}
 800a8c8:	4770      	bx	lr

0800a8ca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b083      	sub	sp, #12
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr

0800a8de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bc80      	pop	{r7}
 800a8f0:	4770      	bx	lr

0800a8f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b085      	sub	sp, #20
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a900:	b29b      	uxth	r3, r3
 800a902:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a904:	68fb      	ldr	r3, [r7, #12]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bc80      	pop	{r7}
 800a90e:	4770      	bx	lr

0800a910 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	bc80      	pop	{r7}
 800a924:	4770      	bx	lr

0800a926 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a926:	b480      	push	{r7}
 800a928:	b08d      	sub	sp, #52	@ 0x34
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	60f8      	str	r0, [r7, #12]
 800a92e:	60b9      	str	r1, [r7, #8]
 800a930:	4611      	mov	r1, r2
 800a932:	461a      	mov	r2, r3
 800a934:	460b      	mov	r3, r1
 800a936:	80fb      	strh	r3, [r7, #6]
 800a938:	4613      	mov	r3, r2
 800a93a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a93c:	88bb      	ldrh	r3, [r7, #4]
 800a93e:	3301      	adds	r3, #1
 800a940:	085b      	lsrs	r3, r3, #1
 800a942:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a94c:	88fb      	ldrh	r3, [r7, #6]
 800a94e:	005a      	lsls	r2, r3, #1
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a958:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a95e:	e01d      	b.n	800a99c <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800a960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a968:	3301      	adds	r3, #1
 800a96a:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	021b      	lsls	r3, r3, #8
 800a972:	b29b      	uxth	r3, r3
 800a974:	461a      	mov	r2, r3
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	4313      	orrs	r3, r2
 800a97a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	b29a      	uxth	r2, r3
 800a980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a982:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a986:	3302      	adds	r3, #2
 800a988:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a98c:	3302      	adds	r3, #2
 800a98e:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800a990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a992:	3301      	adds	r3, #1
 800a994:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800a996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a998:	3b01      	subs	r3, #1
 800a99a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1de      	bne.n	800a960 <USB_WritePMA+0x3a>
  }
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	3734      	adds	r7, #52	@ 0x34
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bc80      	pop	{r7}
 800a9ac:	4770      	bx	lr

0800a9ae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b08b      	sub	sp, #44	@ 0x2c
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	60f8      	str	r0, [r7, #12]
 800a9b6:	60b9      	str	r1, [r7, #8]
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	460b      	mov	r3, r1
 800a9be:	80fb      	strh	r3, [r7, #6]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a9c4:	88bb      	ldrh	r3, [r7, #4]
 800a9c6:	085b      	lsrs	r3, r3, #1
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	005a      	lsls	r2, r3, #1
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a9e0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9e6:	e01b      	b.n	800aa20 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a9e8:	6a3b      	ldr	r3, [r7, #32]
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	3301      	adds	r3, #1
 800aa02:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	0a1b      	lsrs	r3, r3, #8
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	3301      	adds	r3, #1
 800aa12:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	3302      	adds	r3, #2
 800aa18:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1e0      	bne.n	800a9e8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800aa26:	88bb      	ldrh	r3, [r7, #4]
 800aa28:	f003 0301 	and.w	r3, r3, #1
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d007      	beq.n	800aa42 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	881b      	ldrh	r3, [r3, #0]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	b2da      	uxtb	r2, r3
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	701a      	strb	r2, [r3, #0]
  }
}
 800aa42:	bf00      	nop
 800aa44:	372c      	adds	r7, #44	@ 0x2c
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bc80      	pop	{r7}
 800aa4a:	4770      	bx	lr

0800aa4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	7c1b      	ldrb	r3, [r3, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d115      	bne.n	800aa90 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa68:	2202      	movs	r2, #2
 800aa6a:	2181      	movs	r1, #129	@ 0x81
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 fe90 	bl	800c792 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	2101      	movs	r1, #1
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f001 fe86 	bl	800c792 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800aa8e:	e012      	b.n	800aab6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa90:	2340      	movs	r3, #64	@ 0x40
 800aa92:	2202      	movs	r2, #2
 800aa94:	2181      	movs	r1, #129	@ 0x81
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f001 fe7b 	bl	800c792 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aaa2:	2340      	movs	r3, #64	@ 0x40
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f001 fe72 	bl	800c792 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aab6:	2308      	movs	r3, #8
 800aab8:	2203      	movs	r2, #3
 800aaba:	2182      	movs	r1, #130	@ 0x82
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f001 fe68 	bl	800c792 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aac8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aacc:	f001 ff88 	bl	800c9e0 <USBD_static_malloc>
 800aad0:	4602      	mov	r2, r0
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d102      	bne.n	800aae8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800aae2:	2301      	movs	r3, #1
 800aae4:	73fb      	strb	r3, [r7, #15]
 800aae6:	e026      	b.n	800ab36 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	7c1b      	ldrb	r3, [r3, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d109      	bne.n	800ab26 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f001 ff28 	bl	800c974 <USBD_LL_PrepareReceive>
 800ab24:	e007      	b.n	800ab36 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab2c:	2340      	movs	r3, #64	@ 0x40
 800ab2e:	2101      	movs	r1, #1
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f001 ff1f 	bl	800c974 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ab50:	2181      	movs	r1, #129	@ 0x81
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f001 fe43 	bl	800c7de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ab5e:	2101      	movs	r1, #1
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f001 fe3c 	bl	800c7de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ab6e:	2182      	movs	r1, #130	@ 0x82
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 fe34 	bl	800c7de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00e      	beq.n	800aba4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab96:	4618      	mov	r0, r3
 800ab98:	f001 ff2e 	bl	800c9f8 <USBD_static_free>
    pdev->pClassData = NULL;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b086      	sub	sp, #24
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abbe:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800abc4:	2300      	movs	r3, #0
 800abc6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d039      	beq.n	800ac4c <USBD_CDC_Setup+0x9e>
 800abd8:	2b20      	cmp	r3, #32
 800abda:	d17f      	bne.n	800acdc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	88db      	ldrh	r3, [r3, #6]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d029      	beq.n	800ac38 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	b25b      	sxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	da11      	bge.n	800ac12 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800abfa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	88d2      	ldrh	r2, [r2, #6]
 800ac00:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ac02:	6939      	ldr	r1, [r7, #16]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	88db      	ldrh	r3, [r3, #6]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f001 fa06 	bl	800c01c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800ac10:	e06b      	b.n	800acea <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	785a      	ldrb	r2, [r3, #1]
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	88db      	ldrh	r3, [r3, #6]
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ac28:	6939      	ldr	r1, [r7, #16]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	88db      	ldrh	r3, [r3, #6]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 fa21 	bl	800c078 <USBD_CtlPrepareRx>
      break;
 800ac36:	e058      	b.n	800acea <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	7850      	ldrb	r0, [r2, #1]
 800ac44:	2200      	movs	r2, #0
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	4798      	blx	r3
      break;
 800ac4a:	e04e      	b.n	800acea <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	785b      	ldrb	r3, [r3, #1]
 800ac50:	2b0b      	cmp	r3, #11
 800ac52:	d02e      	beq.n	800acb2 <USBD_CDC_Setup+0x104>
 800ac54:	2b0b      	cmp	r3, #11
 800ac56:	dc38      	bgt.n	800acca <USBD_CDC_Setup+0x11c>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <USBD_CDC_Setup+0xb4>
 800ac5c:	2b0a      	cmp	r3, #10
 800ac5e:	d014      	beq.n	800ac8a <USBD_CDC_Setup+0xdc>
 800ac60:	e033      	b.n	800acca <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d107      	bne.n	800ac7c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ac6c:	f107 030c 	add.w	r3, r7, #12
 800ac70:	2202      	movs	r2, #2
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f001 f9d1 	bl	800c01c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac7a:	e02e      	b.n	800acda <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f001 f962 	bl	800bf48 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac84:	2302      	movs	r3, #2
 800ac86:	75fb      	strb	r3, [r7, #23]
          break;
 800ac88:	e027      	b.n	800acda <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac90:	2b03      	cmp	r3, #3
 800ac92:	d107      	bne.n	800aca4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac94:	f107 030f 	add.w	r3, r7, #15
 800ac98:	2201      	movs	r2, #1
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f001 f9bd 	bl	800c01c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aca2:	e01a      	b.n	800acda <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f001 f94e 	bl	800bf48 <USBD_CtlError>
            ret = USBD_FAIL;
 800acac:	2302      	movs	r3, #2
 800acae:	75fb      	strb	r3, [r7, #23]
          break;
 800acb0:	e013      	b.n	800acda <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acb8:	2b03      	cmp	r3, #3
 800acba:	d00d      	beq.n	800acd8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f001 f942 	bl	800bf48 <USBD_CtlError>
            ret = USBD_FAIL;
 800acc4:	2302      	movs	r3, #2
 800acc6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800acc8:	e006      	b.n	800acd8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f001 f93b 	bl	800bf48 <USBD_CtlError>
          ret = USBD_FAIL;
 800acd2:	2302      	movs	r3, #2
 800acd4:	75fb      	strb	r3, [r7, #23]
          break;
 800acd6:	e000      	b.n	800acda <USBD_CDC_Setup+0x12c>
          break;
 800acd8:	bf00      	nop
      }
      break;
 800acda:	e006      	b.n	800acea <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 f932 	bl	800bf48 <USBD_CtlError>
      ret = USBD_FAIL;
 800ace4:	2302      	movs	r3, #2
 800ace6:	75fb      	strb	r3, [r7, #23]
      break;
 800ace8:	bf00      	nop
  }

  return ret;
 800acea:	7dfb      	ldrb	r3, [r7, #23]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3718      	adds	r7, #24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad06:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad0e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d03a      	beq.n	800ad90 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ad1a:	78fa      	ldrb	r2, [r7, #3]
 800ad1c:	6879      	ldr	r1, [r7, #4]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	440b      	add	r3, r1
 800ad28:	331c      	adds	r3, #28
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d029      	beq.n	800ad84 <USBD_CDC_DataIn+0x90>
 800ad30:	78fa      	ldrb	r2, [r7, #3]
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	4613      	mov	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	440b      	add	r3, r1
 800ad3e:	331c      	adds	r3, #28
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	78f9      	ldrb	r1, [r7, #3]
 800ad44:	68b8      	ldr	r0, [r7, #8]
 800ad46:	460b      	mov	r3, r1
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	440b      	add	r3, r1
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	4403      	add	r3, r0
 800ad50:	3338      	adds	r3, #56	@ 0x38
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad58:	fb01 f303 	mul.w	r3, r1, r3
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d110      	bne.n	800ad84 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ad62:	78fa      	ldrb	r2, [r7, #3]
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	440b      	add	r3, r1
 800ad70:	331c      	adds	r3, #28
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ad76:	78f9      	ldrb	r1, [r7, #3]
 800ad78:	2300      	movs	r3, #0
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f001 fdd6 	bl	800c92e <USBD_LL_Transmit>
 800ad82:	e003      	b.n	800ad8c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e000      	b.n	800ad92 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ad90:	2302      	movs	r3, #2
  }
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	460b      	mov	r3, r1
 800ada4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800adae:	78fb      	ldrb	r3, [r7, #3]
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f001 fe01 	bl	800c9ba <USBD_LL_GetRxDataSize>
 800adb8:	4602      	mov	r2, r0
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00d      	beq.n	800ade6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800adde:	4611      	mov	r1, r2
 800ade0:	4798      	blx	r3

    return USBD_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	e000      	b.n	800ade8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ade6:	2302      	movs	r3, #2
  }
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adfe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d014      	beq.n	800ae34 <USBD_CDC_EP0_RxReady+0x44>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ae10:	2bff      	cmp	r3, #255	@ 0xff
 800ae12:	d00f      	beq.n	800ae34 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ae22:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	22ff      	movs	r2, #255	@ 0xff
 800ae30:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
	...

0800ae40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2243      	movs	r2, #67	@ 0x43
 800ae4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ae4e:	4b03      	ldr	r3, [pc, #12]	@ (800ae5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bc80      	pop	{r7}
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	200000bc 	.word	0x200000bc

0800ae60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2243      	movs	r2, #67	@ 0x43
 800ae6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ae6e:	4b03      	ldr	r3, [pc, #12]	@ (800ae7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bc80      	pop	{r7}
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	20000078 	.word	0x20000078

0800ae80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2243      	movs	r2, #67	@ 0x43
 800ae8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ae8e:	4b03      	ldr	r3, [pc, #12]	@ (800ae9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bc80      	pop	{r7}
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	20000100 	.word	0x20000100

0800aea0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	220a      	movs	r2, #10
 800aeac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800aeae:	4b03      	ldr	r3, [pc, #12]	@ (800aebc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bc80      	pop	{r7}
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	20000034 	.word	0x20000034

0800aec0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800aeca:	2302      	movs	r3, #2
 800aecc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d005      	beq.n	800aee0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bc80      	pop	{r7}
 800aeea:	4770      	bx	lr

0800aeec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b087      	sub	sp, #28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	4613      	mov	r3, r2
 800aef8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af00:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800af0a:	88fa      	ldrh	r2, [r7, #6]
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	371c      	adds	r7, #28
 800af18:	46bd      	mov	sp, r7
 800af1a:	bc80      	pop	{r7}
 800af1c:	4770      	bx	lr

0800af1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800af1e:	b480      	push	{r7}
 800af20:	b085      	sub	sp, #20
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af2e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	bc80      	pop	{r7}
 800af42:	4770      	bx	lr

0800af44 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d01c      	beq.n	800af98 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800af64:	2b00      	cmp	r3, #0
 800af66:	d115      	bne.n	800af94 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800af86:	b29b      	uxth	r3, r3
 800af88:	2181      	movs	r1, #129	@ 0x81
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f001 fccf 	bl	800c92e <USBD_LL_Transmit>

      return USBD_OK;
 800af90:	2300      	movs	r3, #0
 800af92:	e002      	b.n	800af9a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800af94:	2301      	movs	r3, #1
 800af96:	e000      	b.n	800af9a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800af98:	2302      	movs	r3, #2
  }
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d017      	beq.n	800afec <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	7c1b      	ldrb	r3, [r3, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d109      	bne.n	800afd8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afce:	2101      	movs	r1, #1
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f001 fccf 	bl	800c974 <USBD_LL_PrepareReceive>
 800afd6:	e007      	b.n	800afe8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afde:	2340      	movs	r3, #64	@ 0x40
 800afe0:	2101      	movs	r1, #1
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f001 fcc6 	bl	800c974 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	e000      	b.n	800afee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800afec:	2302      	movs	r3, #2
  }
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b084      	sub	sp, #16
 800affa:	af00      	add	r7, sp, #0
 800affc:	60f8      	str	r0, [r7, #12]
 800affe:	60b9      	str	r1, [r7, #8]
 800b000:	4613      	mov	r3, r2
 800b002:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b00a:	2302      	movs	r3, #2
 800b00c:	e01a      	b.n	800b044 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b014:	2b00      	cmp	r3, #0
 800b016:	d003      	beq.n	800b020 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	79fa      	ldrb	r2, [r7, #7]
 800b03a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f001 fb33 	bl	800c6a8 <USBD_LL_Init>

  return USBD_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d006      	beq.n	800b06e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	73fb      	strb	r3, [r7, #15]
 800b06c:	e001      	b.n	800b072 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b06e:	2302      	movs	r3, #2
 800b070:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b072:	7bfb      	ldrb	r3, [r7, #15]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	bc80      	pop	{r7}
 800b07c:	4770      	bx	lr

0800b07e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b082      	sub	sp, #8
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f001 fb68 	bl	800c75c <USBD_LL_Start>

  return USBD_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b096:	b480      	push	{r7}
 800b098:	b083      	sub	sp, #12
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bc80      	pop	{r7}
 800b0a8:	4770      	bx	lr

0800b0aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00c      	beq.n	800b0de <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	78fa      	ldrb	r2, [r7, #3]
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	4798      	blx	r3
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	78fa      	ldrb	r2, [r7, #3]
 800b0fe:	4611      	mov	r1, r2
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	4798      	blx	r3

  return USBD_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b082      	sub	sp, #8
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	4618      	mov	r0, r3
 800b122:	f000 fed8 	bl	800bed6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b134:	461a      	mov	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b142:	f003 031f 	and.w	r3, r3, #31
 800b146:	2b02      	cmp	r3, #2
 800b148:	d016      	beq.n	800b178 <USBD_LL_SetupStage+0x6a>
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d81c      	bhi.n	800b188 <USBD_LL_SetupStage+0x7a>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d002      	beq.n	800b158 <USBD_LL_SetupStage+0x4a>
 800b152:	2b01      	cmp	r3, #1
 800b154:	d008      	beq.n	800b168 <USBD_LL_SetupStage+0x5a>
 800b156:	e017      	b.n	800b188 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b15e:	4619      	mov	r1, r3
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f9cb 	bl	800b4fc <USBD_StdDevReq>
      break;
 800b166:	e01a      	b.n	800b19e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fa2d 	bl	800b5d0 <USBD_StdItfReq>
      break;
 800b176:	e012      	b.n	800b19e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fa6d 	bl	800b660 <USBD_StdEPReq>
      break;
 800b186:	e00a      	b.n	800b19e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b18e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b192:	b2db      	uxtb	r3, r3
 800b194:	4619      	mov	r1, r3
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f001 fb40 	bl	800c81c <USBD_LL_StallEP>
      break;
 800b19c:	bf00      	nop
  }

  return USBD_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b1b6:	7afb      	ldrb	r3, [r7, #11]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d14b      	bne.n	800b254 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b1c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d134      	bne.n	800b238 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	68da      	ldr	r2, [r3, #12]
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d919      	bls.n	800b20e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	68da      	ldr	r2, [r3, #12]
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	1ad2      	subs	r2, r2, r3
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d203      	bcs.n	800b1fc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	e002      	b.n	800b202 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b200:	b29b      	uxth	r3, r3
 800b202:	461a      	mov	r2, r3
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f000 ff54 	bl	800c0b4 <USBD_CtlContinueRx>
 800b20c:	e038      	b.n	800b280 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b220:	2b03      	cmp	r3, #3
 800b222:	d105      	bne.n	800b230 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f000 ff51 	bl	800c0d8 <USBD_CtlSendStatus>
 800b236:	e023      	b.n	800b280 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b23e:	2b05      	cmp	r3, #5
 800b240:	d11e      	bne.n	800b280 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b24a:	2100      	movs	r1, #0
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f001 fae5 	bl	800c81c <USBD_LL_StallEP>
 800b252:	e015      	b.n	800b280 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00d      	beq.n	800b27c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b266:	2b03      	cmp	r3, #3
 800b268:	d108      	bne.n	800b27c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	7afa      	ldrb	r2, [r7, #11]
 800b274:	4611      	mov	r1, r2
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	4798      	blx	r3
 800b27a:	e001      	b.n	800b280 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b27c:	2302      	movs	r3, #2
 800b27e:	e000      	b.n	800b282 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b086      	sub	sp, #24
 800b28e:	af00      	add	r7, sp, #0
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	460b      	mov	r3, r1
 800b294:	607a      	str	r2, [r7, #4]
 800b296:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b298:	7afb      	ldrb	r3, [r7, #11]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d17f      	bne.n	800b39e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3314      	adds	r3, #20
 800b2a2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d15c      	bne.n	800b368 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d915      	bls.n	800b2e6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	1ad2      	subs	r2, r2, r3
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f000 febe 	bl	800c054 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2d8:	2300      	movs	r3, #0
 800b2da:	2200      	movs	r2, #0
 800b2dc:	2100      	movs	r1, #0
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f001 fb48 	bl	800c974 <USBD_LL_PrepareReceive>
 800b2e4:	e04e      	b.n	800b384 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	6912      	ldr	r2, [r2, #16]
 800b2ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2f2:	fb01 f202 	mul.w	r2, r1, r2
 800b2f6:	1a9b      	subs	r3, r3, r2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d11c      	bne.n	800b336 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	689a      	ldr	r2, [r3, #8]
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b304:	429a      	cmp	r2, r3
 800b306:	d316      	bcc.n	800b336 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	689a      	ldr	r2, [r3, #8]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b312:	429a      	cmp	r2, r3
 800b314:	d20f      	bcs.n	800b336 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b316:	2200      	movs	r2, #0
 800b318:	2100      	movs	r1, #0
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 fe9a 	bl	800c054 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b328:	2300      	movs	r3, #0
 800b32a:	2200      	movs	r2, #0
 800b32c:	2100      	movs	r1, #0
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f001 fb20 	bl	800c974 <USBD_LL_PrepareReceive>
 800b334:	e026      	b.n	800b384 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00a      	beq.n	800b358 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b348:	2b03      	cmp	r3, #3
 800b34a:	d105      	bne.n	800b358 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b358:	2180      	movs	r1, #128	@ 0x80
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f001 fa5e 	bl	800c81c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f000 fecc 	bl	800c0fe <USBD_CtlReceiveStatus>
 800b366:	e00d      	b.n	800b384 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d004      	beq.n	800b37c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d103      	bne.n	800b384 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b37c:	2180      	movs	r1, #128	@ 0x80
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f001 fa4c 	bl	800c81c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d11d      	bne.n	800b3ca <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f7ff fe81 	bl	800b096 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b39c:	e015      	b.n	800b3ca <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00d      	beq.n	800b3c6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b3b0:	2b03      	cmp	r3, #3
 800b3b2:	d108      	bne.n	800b3c6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	7afa      	ldrb	r2, [r7, #11]
 800b3be:	4611      	mov	r1, r2
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	4798      	blx	r3
 800b3c4:	e001      	b.n	800b3ca <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	e000      	b.n	800b3cc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3718      	adds	r7, #24
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3dc:	2340      	movs	r3, #64	@ 0x40
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f001 f9d5 	bl	800c792 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2240      	movs	r2, #64	@ 0x40
 800b3f4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3f8:	2340      	movs	r3, #64	@ 0x40
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2180      	movs	r1, #128	@ 0x80
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f001 f9c7 	bl	800c792 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2240      	movs	r2, #64	@ 0x40
 800b40e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b434:	2b00      	cmp	r3, #0
 800b436:	d009      	beq.n	800b44c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	6852      	ldr	r2, [r2, #4]
 800b444:	b2d2      	uxtb	r2, r2
 800b446:	4611      	mov	r1, r2
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	4798      	blx	r3
  }

  return USBD_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b456:	b480      	push	{r7}
 800b458:	b083      	sub	sp, #12
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	460b      	mov	r3, r1
 800b460:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	78fa      	ldrb	r2, [r7, #3]
 800b466:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	370c      	adds	r7, #12
 800b46e:	46bd      	mov	sp, r7
 800b470:	bc80      	pop	{r7}
 800b472:	4770      	bx	lr

0800b474 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2204      	movs	r2, #4
 800b48c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	bc80      	pop	{r7}
 800b49a:	4770      	bx	lr

0800b49c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4aa:	2b04      	cmp	r3, #4
 800b4ac:	d105      	bne.n	800b4ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bc80      	pop	{r7}
 800b4c4:	4770      	bx	lr

0800b4c6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b082      	sub	sp, #8
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4d4:	2b03      	cmp	r3, #3
 800b4d6:	d10b      	bne.n	800b4f0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4de:	69db      	ldr	r3, [r3, #28]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d005      	beq.n	800b4f0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4ea:	69db      	ldr	r3, [r3, #28]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3708      	adds	r7, #8
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
	...

0800b4fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b512:	2b40      	cmp	r3, #64	@ 0x40
 800b514:	d005      	beq.n	800b522 <USBD_StdDevReq+0x26>
 800b516:	2b40      	cmp	r3, #64	@ 0x40
 800b518:	d84f      	bhi.n	800b5ba <USBD_StdDevReq+0xbe>
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d009      	beq.n	800b532 <USBD_StdDevReq+0x36>
 800b51e:	2b20      	cmp	r3, #32
 800b520:	d14b      	bne.n	800b5ba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	4798      	blx	r3
      break;
 800b530:	e048      	b.n	800b5c4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	785b      	ldrb	r3, [r3, #1]
 800b536:	2b09      	cmp	r3, #9
 800b538:	d839      	bhi.n	800b5ae <USBD_StdDevReq+0xb2>
 800b53a:	a201      	add	r2, pc, #4	@ (adr r2, 800b540 <USBD_StdDevReq+0x44>)
 800b53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b540:	0800b591 	.word	0x0800b591
 800b544:	0800b5a5 	.word	0x0800b5a5
 800b548:	0800b5af 	.word	0x0800b5af
 800b54c:	0800b59b 	.word	0x0800b59b
 800b550:	0800b5af 	.word	0x0800b5af
 800b554:	0800b573 	.word	0x0800b573
 800b558:	0800b569 	.word	0x0800b569
 800b55c:	0800b5af 	.word	0x0800b5af
 800b560:	0800b587 	.word	0x0800b587
 800b564:	0800b57d 	.word	0x0800b57d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f9dc 	bl	800b928 <USBD_GetDescriptor>
          break;
 800b570:	e022      	b.n	800b5b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fb3f 	bl	800bbf8 <USBD_SetAddress>
          break;
 800b57a:	e01d      	b.n	800b5b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fb7e 	bl	800bc80 <USBD_SetConfig>
          break;
 800b584:	e018      	b.n	800b5b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fc07 	bl	800bd9c <USBD_GetConfig>
          break;
 800b58e:	e013      	b.n	800b5b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fc37 	bl	800be06 <USBD_GetStatus>
          break;
 800b598:	e00e      	b.n	800b5b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fc65 	bl	800be6c <USBD_SetFeature>
          break;
 800b5a2:	e009      	b.n	800b5b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fc74 	bl	800be94 <USBD_ClrFeature>
          break;
 800b5ac:	e004      	b.n	800b5b8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b5ae:	6839      	ldr	r1, [r7, #0]
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fcc9 	bl	800bf48 <USBD_CtlError>
          break;
 800b5b6:	bf00      	nop
      }
      break;
 800b5b8:	e004      	b.n	800b5c4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b5ba:	6839      	ldr	r1, [r7, #0]
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fcc3 	bl	800bf48 <USBD_CtlError>
      break;
 800b5c2:	bf00      	nop
  }

  return ret;
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop

0800b5d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b5e6:	2b40      	cmp	r3, #64	@ 0x40
 800b5e8:	d005      	beq.n	800b5f6 <USBD_StdItfReq+0x26>
 800b5ea:	2b40      	cmp	r3, #64	@ 0x40
 800b5ec:	d82e      	bhi.n	800b64c <USBD_StdItfReq+0x7c>
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <USBD_StdItfReq+0x26>
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d12a      	bne.n	800b64c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d81d      	bhi.n	800b63e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	889b      	ldrh	r3, [r3, #4]
 800b606:	b2db      	uxtb	r3, r3
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d813      	bhi.n	800b634 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	4798      	blx	r3
 800b61a:	4603      	mov	r3, r0
 800b61c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	88db      	ldrh	r3, [r3, #6]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d110      	bne.n	800b648 <USBD_StdItfReq+0x78>
 800b626:	7bfb      	ldrb	r3, [r7, #15]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10d      	bne.n	800b648 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fd53 	bl	800c0d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b632:	e009      	b.n	800b648 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fc86 	bl	800bf48 <USBD_CtlError>
          break;
 800b63c:	e004      	b.n	800b648 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fc81 	bl	800bf48 <USBD_CtlError>
          break;
 800b646:	e000      	b.n	800b64a <USBD_StdItfReq+0x7a>
          break;
 800b648:	bf00      	nop
      }
      break;
 800b64a:	e004      	b.n	800b656 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fc7a 	bl	800bf48 <USBD_CtlError>
      break;
 800b654:	bf00      	nop
  }

  return USBD_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b66a:	2300      	movs	r3, #0
 800b66c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	889b      	ldrh	r3, [r3, #4]
 800b672:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b67c:	2b40      	cmp	r3, #64	@ 0x40
 800b67e:	d007      	beq.n	800b690 <USBD_StdEPReq+0x30>
 800b680:	2b40      	cmp	r3, #64	@ 0x40
 800b682:	f200 8146 	bhi.w	800b912 <USBD_StdEPReq+0x2b2>
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <USBD_StdEPReq+0x40>
 800b68a:	2b20      	cmp	r3, #32
 800b68c:	f040 8141 	bne.w	800b912 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	4798      	blx	r3
      break;
 800b69e:	e13d      	b.n	800b91c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b6a8:	2b20      	cmp	r3, #32
 800b6aa:	d10a      	bne.n	800b6c2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	4798      	blx	r3
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
 800b6c0:	e12d      	b.n	800b91e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	785b      	ldrb	r3, [r3, #1]
 800b6c6:	2b03      	cmp	r3, #3
 800b6c8:	d007      	beq.n	800b6da <USBD_StdEPReq+0x7a>
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	f300 811b 	bgt.w	800b906 <USBD_StdEPReq+0x2a6>
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d072      	beq.n	800b7ba <USBD_StdEPReq+0x15a>
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d03a      	beq.n	800b74e <USBD_StdEPReq+0xee>
 800b6d8:	e115      	b.n	800b906 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d002      	beq.n	800b6ea <USBD_StdEPReq+0x8a>
 800b6e4:	2b03      	cmp	r3, #3
 800b6e6:	d015      	beq.n	800b714 <USBD_StdEPReq+0xb4>
 800b6e8:	e02b      	b.n	800b742 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00c      	beq.n	800b70a <USBD_StdEPReq+0xaa>
 800b6f0:	7bbb      	ldrb	r3, [r7, #14]
 800b6f2:	2b80      	cmp	r3, #128	@ 0x80
 800b6f4:	d009      	beq.n	800b70a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b6f6:	7bbb      	ldrb	r3, [r7, #14]
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f001 f88e 	bl	800c81c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b700:	2180      	movs	r1, #128	@ 0x80
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f001 f88a 	bl	800c81c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b708:	e020      	b.n	800b74c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fc1b 	bl	800bf48 <USBD_CtlError>
              break;
 800b712:	e01b      	b.n	800b74c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	885b      	ldrh	r3, [r3, #2]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d10e      	bne.n	800b73a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b71c:	7bbb      	ldrb	r3, [r7, #14]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00b      	beq.n	800b73a <USBD_StdEPReq+0xda>
 800b722:	7bbb      	ldrb	r3, [r7, #14]
 800b724:	2b80      	cmp	r3, #128	@ 0x80
 800b726:	d008      	beq.n	800b73a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	88db      	ldrh	r3, [r3, #6]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d104      	bne.n	800b73a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b730:	7bbb      	ldrb	r3, [r7, #14]
 800b732:	4619      	mov	r1, r3
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f001 f871 	bl	800c81c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fccc 	bl	800c0d8 <USBD_CtlSendStatus>

              break;
 800b740:	e004      	b.n	800b74c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fbff 	bl	800bf48 <USBD_CtlError>
              break;
 800b74a:	bf00      	nop
          }
          break;
 800b74c:	e0e0      	b.n	800b910 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b754:	2b02      	cmp	r3, #2
 800b756:	d002      	beq.n	800b75e <USBD_StdEPReq+0xfe>
 800b758:	2b03      	cmp	r3, #3
 800b75a:	d015      	beq.n	800b788 <USBD_StdEPReq+0x128>
 800b75c:	e026      	b.n	800b7ac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b75e:	7bbb      	ldrb	r3, [r7, #14]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00c      	beq.n	800b77e <USBD_StdEPReq+0x11e>
 800b764:	7bbb      	ldrb	r3, [r7, #14]
 800b766:	2b80      	cmp	r3, #128	@ 0x80
 800b768:	d009      	beq.n	800b77e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b76a:	7bbb      	ldrb	r3, [r7, #14]
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f001 f854 	bl	800c81c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b774:	2180      	movs	r1, #128	@ 0x80
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f001 f850 	bl	800c81c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b77c:	e01c      	b.n	800b7b8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fbe1 	bl	800bf48 <USBD_CtlError>
              break;
 800b786:	e017      	b.n	800b7b8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	885b      	ldrh	r3, [r3, #2]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d112      	bne.n	800b7b6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b796:	2b00      	cmp	r3, #0
 800b798:	d004      	beq.n	800b7a4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b79a:	7bbb      	ldrb	r3, [r7, #14]
 800b79c:	4619      	mov	r1, r3
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f001 f85b 	bl	800c85a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fc97 	bl	800c0d8 <USBD_CtlSendStatus>
              }
              break;
 800b7aa:	e004      	b.n	800b7b6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fbca 	bl	800bf48 <USBD_CtlError>
              break;
 800b7b4:	e000      	b.n	800b7b8 <USBD_StdEPReq+0x158>
              break;
 800b7b6:	bf00      	nop
          }
          break;
 800b7b8:	e0aa      	b.n	800b910 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d002      	beq.n	800b7ca <USBD_StdEPReq+0x16a>
 800b7c4:	2b03      	cmp	r3, #3
 800b7c6:	d032      	beq.n	800b82e <USBD_StdEPReq+0x1ce>
 800b7c8:	e097      	b.n	800b8fa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7ca:	7bbb      	ldrb	r3, [r7, #14]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d007      	beq.n	800b7e0 <USBD_StdEPReq+0x180>
 800b7d0:	7bbb      	ldrb	r3, [r7, #14]
 800b7d2:	2b80      	cmp	r3, #128	@ 0x80
 800b7d4:	d004      	beq.n	800b7e0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fbb5 	bl	800bf48 <USBD_CtlError>
                break;
 800b7de:	e091      	b.n	800b904 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	da0b      	bge.n	800b800 <USBD_StdEPReq+0x1a0>
 800b7e8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	3310      	adds	r3, #16
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	e00b      	b.n	800b818 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b800:	7bbb      	ldrb	r3, [r7, #14]
 800b802:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b806:	4613      	mov	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	4413      	add	r3, r2
 800b816:	3304      	adds	r3, #4
 800b818:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	2200      	movs	r2, #0
 800b81e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2202      	movs	r2, #2
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fbf8 	bl	800c01c <USBD_CtlSendData>
              break;
 800b82c:	e06a      	b.n	800b904 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b82e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b832:	2b00      	cmp	r3, #0
 800b834:	da11      	bge.n	800b85a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b836:	7bbb      	ldrb	r3, [r7, #14]
 800b838:	f003 020f 	and.w	r2, r3, #15
 800b83c:	6879      	ldr	r1, [r7, #4]
 800b83e:	4613      	mov	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	4413      	add	r3, r2
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	440b      	add	r3, r1
 800b848:	3318      	adds	r3, #24
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d117      	bne.n	800b880 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b850:	6839      	ldr	r1, [r7, #0]
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 fb78 	bl	800bf48 <USBD_CtlError>
                  break;
 800b858:	e054      	b.n	800b904 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b85a:	7bbb      	ldrb	r3, [r7, #14]
 800b85c:	f003 020f 	and.w	r2, r3, #15
 800b860:	6879      	ldr	r1, [r7, #4]
 800b862:	4613      	mov	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	440b      	add	r3, r1
 800b86c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d104      	bne.n	800b880 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 fb65 	bl	800bf48 <USBD_CtlError>
                  break;
 800b87e:	e041      	b.n	800b904 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b884:	2b00      	cmp	r3, #0
 800b886:	da0b      	bge.n	800b8a0 <USBD_StdEPReq+0x240>
 800b888:	7bbb      	ldrb	r3, [r7, #14]
 800b88a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b88e:	4613      	mov	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	3310      	adds	r3, #16
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	4413      	add	r3, r2
 800b89c:	3304      	adds	r3, #4
 800b89e:	e00b      	b.n	800b8b8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8a0:	7bbb      	ldrb	r3, [r7, #14]
 800b8a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	3304      	adds	r3, #4
 800b8b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b8ba:	7bbb      	ldrb	r3, [r7, #14]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <USBD_StdEPReq+0x266>
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
 800b8c2:	2b80      	cmp	r3, #128	@ 0x80
 800b8c4:	d103      	bne.n	800b8ce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	601a      	str	r2, [r3, #0]
 800b8cc:	e00e      	b.n	800b8ec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 ffe0 	bl	800c898 <USBD_LL_IsStallEP>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d003      	beq.n	800b8e6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	601a      	str	r2, [r3, #0]
 800b8e4:	e002      	b.n	800b8ec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fb92 	bl	800c01c <USBD_CtlSendData>
              break;
 800b8f8:	e004      	b.n	800b904 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fb23 	bl	800bf48 <USBD_CtlError>
              break;
 800b902:	bf00      	nop
          }
          break;
 800b904:	e004      	b.n	800b910 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fb1d 	bl	800bf48 <USBD_CtlError>
          break;
 800b90e:	bf00      	nop
      }
      break;
 800b910:	e004      	b.n	800b91c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fb17 	bl	800bf48 <USBD_CtlError>
      break;
 800b91a:	bf00      	nop
  }

  return ret;
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b932:	2300      	movs	r3, #0
 800b934:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b936:	2300      	movs	r3, #0
 800b938:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	885b      	ldrh	r3, [r3, #2]
 800b942:	0a1b      	lsrs	r3, r3, #8
 800b944:	b29b      	uxth	r3, r3
 800b946:	3b01      	subs	r3, #1
 800b948:	2b06      	cmp	r3, #6
 800b94a:	f200 8128 	bhi.w	800bb9e <USBD_GetDescriptor+0x276>
 800b94e:	a201      	add	r2, pc, #4	@ (adr r2, 800b954 <USBD_GetDescriptor+0x2c>)
 800b950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b954:	0800b971 	.word	0x0800b971
 800b958:	0800b989 	.word	0x0800b989
 800b95c:	0800b9c9 	.word	0x0800b9c9
 800b960:	0800bb9f 	.word	0x0800bb9f
 800b964:	0800bb9f 	.word	0x0800bb9f
 800b968:	0800bb3f 	.word	0x0800bb3f
 800b96c:	0800bb6b 	.word	0x0800bb6b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	7c12      	ldrb	r2, [r2, #16]
 800b97c:	f107 0108 	add.w	r1, r7, #8
 800b980:	4610      	mov	r0, r2
 800b982:	4798      	blx	r3
 800b984:	60f8      	str	r0, [r7, #12]
      break;
 800b986:	e112      	b.n	800bbae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	7c1b      	ldrb	r3, [r3, #16]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10d      	bne.n	800b9ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b998:	f107 0208 	add.w	r2, r7, #8
 800b99c:	4610      	mov	r0, r2
 800b99e:	4798      	blx	r3
 800b9a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b9aa:	e100      	b.n	800bbae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b4:	f107 0208 	add.w	r2, r7, #8
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	4798      	blx	r3
 800b9bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	701a      	strb	r2, [r3, #0]
      break;
 800b9c6:	e0f2      	b.n	800bbae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	885b      	ldrh	r3, [r3, #2]
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b05      	cmp	r3, #5
 800b9d0:	f200 80ac 	bhi.w	800bb2c <USBD_GetDescriptor+0x204>
 800b9d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b9dc <USBD_GetDescriptor+0xb4>)
 800b9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9da:	bf00      	nop
 800b9dc:	0800b9f5 	.word	0x0800b9f5
 800b9e0:	0800ba29 	.word	0x0800ba29
 800b9e4:	0800ba5d 	.word	0x0800ba5d
 800b9e8:	0800ba91 	.word	0x0800ba91
 800b9ec:	0800bac5 	.word	0x0800bac5
 800b9f0:	0800baf9 	.word	0x0800baf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00b      	beq.n	800ba18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	7c12      	ldrb	r2, [r2, #16]
 800ba0c:	f107 0108 	add.w	r1, r7, #8
 800ba10:	4610      	mov	r0, r2
 800ba12:	4798      	blx	r3
 800ba14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba16:	e091      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fa94 	bl	800bf48 <USBD_CtlError>
            err++;
 800ba20:	7afb      	ldrb	r3, [r7, #11]
 800ba22:	3301      	adds	r3, #1
 800ba24:	72fb      	strb	r3, [r7, #11]
          break;
 800ba26:	e089      	b.n	800bb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00b      	beq.n	800ba4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	7c12      	ldrb	r2, [r2, #16]
 800ba40:	f107 0108 	add.w	r1, r7, #8
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
 800ba48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba4a:	e077      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fa7a 	bl	800bf48 <USBD_CtlError>
            err++;
 800ba54:	7afb      	ldrb	r3, [r7, #11]
 800ba56:	3301      	adds	r3, #1
 800ba58:	72fb      	strb	r3, [r7, #11]
          break;
 800ba5a:	e06f      	b.n	800bb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00b      	beq.n	800ba80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	7c12      	ldrb	r2, [r2, #16]
 800ba74:	f107 0108 	add.w	r1, r7, #8
 800ba78:	4610      	mov	r0, r2
 800ba7a:	4798      	blx	r3
 800ba7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba7e:	e05d      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fa60 	bl	800bf48 <USBD_CtlError>
            err++;
 800ba88:	7afb      	ldrb	r3, [r7, #11]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba8e:	e055      	b.n	800bb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00b      	beq.n	800bab4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	7c12      	ldrb	r2, [r2, #16]
 800baa8:	f107 0108 	add.w	r1, r7, #8
 800baac:	4610      	mov	r0, r2
 800baae:	4798      	blx	r3
 800bab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bab2:	e043      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fa46 	bl	800bf48 <USBD_CtlError>
            err++;
 800babc:	7afb      	ldrb	r3, [r7, #11]
 800babe:	3301      	adds	r3, #1
 800bac0:	72fb      	strb	r3, [r7, #11]
          break;
 800bac2:	e03b      	b.n	800bb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00b      	beq.n	800bae8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bad6:	695b      	ldr	r3, [r3, #20]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	7c12      	ldrb	r2, [r2, #16]
 800badc:	f107 0108 	add.w	r1, r7, #8
 800bae0:	4610      	mov	r0, r2
 800bae2:	4798      	blx	r3
 800bae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bae6:	e029      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fa2c 	bl	800bf48 <USBD_CtlError>
            err++;
 800baf0:	7afb      	ldrb	r3, [r7, #11]
 800baf2:	3301      	adds	r3, #1
 800baf4:	72fb      	strb	r3, [r7, #11]
          break;
 800baf6:	e021      	b.n	800bb3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00b      	beq.n	800bb1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	7c12      	ldrb	r2, [r2, #16]
 800bb10:	f107 0108 	add.w	r1, r7, #8
 800bb14:	4610      	mov	r0, r2
 800bb16:	4798      	blx	r3
 800bb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb1a:	e00f      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fa12 	bl	800bf48 <USBD_CtlError>
            err++;
 800bb24:	7afb      	ldrb	r3, [r7, #11]
 800bb26:	3301      	adds	r3, #1
 800bb28:	72fb      	strb	r3, [r7, #11]
          break;
 800bb2a:	e007      	b.n	800bb3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fa0a 	bl	800bf48 <USBD_CtlError>
          err++;
 800bb34:	7afb      	ldrb	r3, [r7, #11]
 800bb36:	3301      	adds	r3, #1
 800bb38:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bb3a:	e038      	b.n	800bbae <USBD_GetDescriptor+0x286>
 800bb3c:	e037      	b.n	800bbae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	7c1b      	ldrb	r3, [r3, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d109      	bne.n	800bb5a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb4e:	f107 0208 	add.w	r2, r7, #8
 800bb52:	4610      	mov	r0, r2
 800bb54:	4798      	blx	r3
 800bb56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb58:	e029      	b.n	800bbae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 f9f3 	bl	800bf48 <USBD_CtlError>
        err++;
 800bb62:	7afb      	ldrb	r3, [r7, #11]
 800bb64:	3301      	adds	r3, #1
 800bb66:	72fb      	strb	r3, [r7, #11]
      break;
 800bb68:	e021      	b.n	800bbae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	7c1b      	ldrb	r3, [r3, #16]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10d      	bne.n	800bb8e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb7a:	f107 0208 	add.w	r2, r7, #8
 800bb7e:	4610      	mov	r0, r2
 800bb80:	4798      	blx	r3
 800bb82:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3301      	adds	r3, #1
 800bb88:	2207      	movs	r2, #7
 800bb8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb8c:	e00f      	b.n	800bbae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f9d9 	bl	800bf48 <USBD_CtlError>
        err++;
 800bb96:	7afb      	ldrb	r3, [r7, #11]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	72fb      	strb	r3, [r7, #11]
      break;
 800bb9c:	e007      	b.n	800bbae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f9d1 	bl	800bf48 <USBD_CtlError>
      err++;
 800bba6:	7afb      	ldrb	r3, [r7, #11]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	72fb      	strb	r3, [r7, #11]
      break;
 800bbac:	bf00      	nop
  }

  if (err != 0U)
 800bbae:	7afb      	ldrb	r3, [r7, #11]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d11c      	bne.n	800bbee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bbb4:	893b      	ldrh	r3, [r7, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d011      	beq.n	800bbde <USBD_GetDescriptor+0x2b6>
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	88db      	ldrh	r3, [r3, #6]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00d      	beq.n	800bbde <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	88da      	ldrh	r2, [r3, #6]
 800bbc6:	893b      	ldrh	r3, [r7, #8]
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	bf28      	it	cs
 800bbcc:	4613      	movcs	r3, r2
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bbd2:	893b      	ldrh	r3, [r7, #8]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	68f9      	ldr	r1, [r7, #12]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fa1f 	bl	800c01c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	88db      	ldrh	r3, [r3, #6]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d104      	bne.n	800bbf0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fa76 	bl	800c0d8 <USBD_CtlSendStatus>
 800bbec:	e000      	b.n	800bbf0 <USBD_GetDescriptor+0x2c8>
    return;
 800bbee:	bf00      	nop
    }
  }
}
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop

0800bbf8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	889b      	ldrh	r3, [r3, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d130      	bne.n	800bc6c <USBD_SetAddress+0x74>
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	88db      	ldrh	r3, [r3, #6]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d12c      	bne.n	800bc6c <USBD_SetAddress+0x74>
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	885b      	ldrh	r3, [r3, #2]
 800bc16:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc18:	d828      	bhi.n	800bc6c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	885b      	ldrh	r3, [r3, #2]
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d104      	bne.n	800bc3a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 f988 	bl	800bf48 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc38:	e01d      	b.n	800bc76 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	7bfa      	ldrb	r2, [r7, #15]
 800bc3e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fe52 	bl	800c8f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fa43 	bl	800c0d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bc52:	7bfb      	ldrb	r3, [r7, #15]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d004      	beq.n	800bc62 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc60:	e009      	b.n	800bc76 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc6a:	e004      	b.n	800bc76 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f96a 	bl	800bf48 <USBD_CtlError>
  }
}
 800bc74:	bf00      	nop
 800bc76:	bf00      	nop
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
	...

0800bc80 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	885b      	ldrh	r3, [r3, #2]
 800bc8e:	b2da      	uxtb	r2, r3
 800bc90:	4b41      	ldr	r3, [pc, #260]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bc92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bc94:	4b40      	ldr	r3, [pc, #256]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d904      	bls.n	800bca6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f952 	bl	800bf48 <USBD_CtlError>
 800bca4:	e075      	b.n	800bd92 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcac:	2b02      	cmp	r3, #2
 800bcae:	d002      	beq.n	800bcb6 <USBD_SetConfig+0x36>
 800bcb0:	2b03      	cmp	r3, #3
 800bcb2:	d023      	beq.n	800bcfc <USBD_SetConfig+0x7c>
 800bcb4:	e062      	b.n	800bd7c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bcb6:	4b38      	ldr	r3, [pc, #224]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d01a      	beq.n	800bcf4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bcbe:	4b36      	ldr	r3, [pc, #216]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2203      	movs	r2, #3
 800bccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bcd0:	4b31      	ldr	r3, [pc, #196]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f7ff f9e7 	bl	800b0aa <USBD_SetClassConfig>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d104      	bne.n	800bcec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 f92f 	bl	800bf48 <USBD_CtlError>
            return;
 800bcea:	e052      	b.n	800bd92 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f9f3 	bl	800c0d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bcf2:	e04e      	b.n	800bd92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 f9ef 	bl	800c0d8 <USBD_CtlSendStatus>
        break;
 800bcfa:	e04a      	b.n	800bd92 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bcfc:	4b26      	ldr	r3, [pc, #152]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d112      	bne.n	800bd2a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2202      	movs	r2, #2
 800bd08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800bd0c:	4b22      	ldr	r3, [pc, #136]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	461a      	mov	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bd16:	4b20      	ldr	r3, [pc, #128]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7ff f9e3 	bl	800b0e8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f9d8 	bl	800c0d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bd28:	e033      	b.n	800bd92 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bd2a:	4b1b      	ldr	r3, [pc, #108]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d01d      	beq.n	800bd74 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	4619      	mov	r1, r3
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7ff f9d1 	bl	800b0e8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bd46:	4b14      	ldr	r3, [pc, #80]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bd50:	4b11      	ldr	r3, [pc, #68]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	4619      	mov	r1, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7ff f9a7 	bl	800b0aa <USBD_SetClassConfig>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	d104      	bne.n	800bd6c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bd62:	6839      	ldr	r1, [r7, #0]
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 f8ef 	bl	800bf48 <USBD_CtlError>
            return;
 800bd6a:	e012      	b.n	800bd92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 f9b3 	bl	800c0d8 <USBD_CtlSendStatus>
        break;
 800bd72:	e00e      	b.n	800bd92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 f9af 	bl	800c0d8 <USBD_CtlSendStatus>
        break;
 800bd7a:	e00a      	b.n	800bd92 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 f8e2 	bl	800bf48 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bd84:	4b04      	ldr	r3, [pc, #16]	@ (800bd98 <USBD_SetConfig+0x118>)
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	4619      	mov	r1, r3
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff f9ac 	bl	800b0e8 <USBD_ClrClassConfig>
        break;
 800bd90:	bf00      	nop
    }
  }
}
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	20000438 	.word	0x20000438

0800bd9c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	88db      	ldrh	r3, [r3, #6]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d004      	beq.n	800bdb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 f8c9 	bl	800bf48 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bdb6:	e022      	b.n	800bdfe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	dc02      	bgt.n	800bdc8 <USBD_GetConfig+0x2c>
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	dc03      	bgt.n	800bdce <USBD_GetConfig+0x32>
 800bdc6:	e015      	b.n	800bdf4 <USBD_GetConfig+0x58>
 800bdc8:	2b03      	cmp	r3, #3
 800bdca:	d00b      	beq.n	800bde4 <USBD_GetConfig+0x48>
 800bdcc:	e012      	b.n	800bdf4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	3308      	adds	r3, #8
 800bdd8:	2201      	movs	r2, #1
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f91d 	bl	800c01c <USBD_CtlSendData>
        break;
 800bde2:	e00c      	b.n	800bdfe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	3304      	adds	r3, #4
 800bde8:	2201      	movs	r2, #1
 800bdea:	4619      	mov	r1, r3
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f915 	bl	800c01c <USBD_CtlSendData>
        break;
 800bdf2:	e004      	b.n	800bdfe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f8a6 	bl	800bf48 <USBD_CtlError>
        break;
 800bdfc:	bf00      	nop
}
 800bdfe:	bf00      	nop
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b082      	sub	sp, #8
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be16:	3b01      	subs	r3, #1
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d81e      	bhi.n	800be5a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	88db      	ldrh	r3, [r3, #6]
 800be20:	2b02      	cmp	r3, #2
 800be22:	d004      	beq.n	800be2e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f88e 	bl	800bf48 <USBD_CtlError>
        break;
 800be2c:	e01a      	b.n	800be64 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d005      	beq.n	800be4a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	f043 0202 	orr.w	r2, r3, #2
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	330c      	adds	r3, #12
 800be4e:	2202      	movs	r2, #2
 800be50:	4619      	mov	r1, r3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f8e2 	bl	800c01c <USBD_CtlSendData>
      break;
 800be58:	e004      	b.n	800be64 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800be5a:	6839      	ldr	r1, [r7, #0]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f873 	bl	800bf48 <USBD_CtlError>
      break;
 800be62:	bf00      	nop
  }
}
 800be64:	bf00      	nop
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	885b      	ldrh	r3, [r3, #2]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d106      	bne.n	800be8c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f926 	bl	800c0d8 <USBD_CtlSendStatus>
  }
}
 800be8c:	bf00      	nop
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bea4:	3b01      	subs	r3, #1
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d80b      	bhi.n	800bec2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	885b      	ldrh	r3, [r3, #2]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d10c      	bne.n	800becc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 f90c 	bl	800c0d8 <USBD_CtlSendStatus>
      }
      break;
 800bec0:	e004      	b.n	800becc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f83f 	bl	800bf48 <USBD_CtlError>
      break;
 800beca:	e000      	b.n	800bece <USBD_ClrFeature+0x3a>
      break;
 800becc:	bf00      	nop
  }
}
 800bece:	bf00      	nop
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bed6:	b480      	push	{r7}
 800bed8:	b083      	sub	sp, #12
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	781a      	ldrb	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	785a      	ldrb	r2, [r3, #1]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	3302      	adds	r3, #2
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	3303      	adds	r3, #3
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	021b      	lsls	r3, r3, #8
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	4413      	add	r3, r2
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	461a      	mov	r2, r3
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	3305      	adds	r3, #5
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	021b      	lsls	r3, r3, #8
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	4413      	add	r3, r2
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	3306      	adds	r3, #6
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	3307      	adds	r3, #7
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	021b      	lsls	r3, r3, #8
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	4413      	add	r3, r2
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	80da      	strh	r2, [r3, #6]

}
 800bf3e:	bf00      	nop
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bc80      	pop	{r7}
 800bf46:	4770      	bx	lr

0800bf48 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bf52:	2180      	movs	r1, #128	@ 0x80
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fc61 	bl	800c81c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fc5d 	bl	800c81c <USBD_LL_StallEP>
}
 800bf62:	bf00      	nop
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b086      	sub	sp, #24
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	60f8      	str	r0, [r7, #12]
 800bf72:	60b9      	str	r1, [r7, #8]
 800bf74:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf76:	2300      	movs	r3, #0
 800bf78:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d032      	beq.n	800bfe6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f000 f834 	bl	800bfee <USBD_GetLen>
 800bf86:	4603      	mov	r3, r0
 800bf88:	3301      	adds	r3, #1
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bf94:	7dfb      	ldrb	r3, [r7, #23]
 800bf96:	1c5a      	adds	r2, r3, #1
 800bf98:	75fa      	strb	r2, [r7, #23]
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	7812      	ldrb	r2, [r2, #0]
 800bfa4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	1c5a      	adds	r2, r3, #1
 800bfaa:	75fa      	strb	r2, [r7, #23]
 800bfac:	461a      	mov	r2, r3
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	2203      	movs	r2, #3
 800bfb4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bfb6:	e012      	b.n	800bfde <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	1c5a      	adds	r2, r3, #1
 800bfbc:	60fa      	str	r2, [r7, #12]
 800bfbe:	7dfa      	ldrb	r2, [r7, #23]
 800bfc0:	1c51      	adds	r1, r2, #1
 800bfc2:	75f9      	strb	r1, [r7, #23]
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	440a      	add	r2, r1
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	75fa      	strb	r2, [r7, #23]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	4413      	add	r3, r2
 800bfda:	2200      	movs	r2, #0
 800bfdc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d1e8      	bne.n	800bfb8 <USBD_GetString+0x4e>
    }
  }
}
 800bfe6:	bf00      	nop
 800bfe8:	3718      	adds	r7, #24
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bfee:	b480      	push	{r7}
 800bff0:	b085      	sub	sp, #20
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bff6:	2300      	movs	r3, #0
 800bff8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bffa:	e005      	b.n	800c008 <USBD_GetLen+0x1a>
  {
    len++;
 800bffc:	7bfb      	ldrb	r3, [r7, #15]
 800bffe:	3301      	adds	r3, #1
 800c000:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	3301      	adds	r3, #1
 800c006:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1f5      	bne.n	800bffc <USBD_GetLen+0xe>
  }

  return len;
 800c010:	7bfb      	ldrb	r3, [r7, #15]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	bc80      	pop	{r7}
 800c01a:	4770      	bx	lr

0800c01c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	4613      	mov	r3, r2
 800c028:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2202      	movs	r2, #2
 800c02e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c032:	88fa      	ldrh	r2, [r7, #6]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c038:	88fa      	ldrh	r2, [r7, #6]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c03e:	88fb      	ldrh	r3, [r7, #6]
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	2100      	movs	r1, #0
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f000 fc72 	bl	800c92e <USBD_LL_Transmit>

  return USBD_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	4613      	mov	r3, r2
 800c060:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c062:	88fb      	ldrh	r3, [r7, #6]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	2100      	movs	r1, #0
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 fc60 	bl	800c92e <USBD_LL_Transmit>

  return USBD_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	4613      	mov	r3, r2
 800c084:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2203      	movs	r2, #3
 800c08a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c08e:	88fa      	ldrh	r2, [r7, #6]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c096:	88fa      	ldrh	r2, [r7, #6]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c09e:	88fb      	ldrh	r3, [r7, #6]
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f000 fc65 	bl	800c974 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c0c2:	88fb      	ldrh	r3, [r7, #6]
 800c0c4:	68ba      	ldr	r2, [r7, #8]
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f000 fc53 	bl	800c974 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2204      	movs	r2, #4
 800c0e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 fc1d 	bl	800c92e <USBD_LL_Transmit>

  return USBD_OK;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b082      	sub	sp, #8
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2205      	movs	r2, #5
 800c10a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c10e:	2300      	movs	r3, #0
 800c110:	2200      	movs	r2, #0
 800c112:	2100      	movs	r1, #0
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fc2d 	bl	800c974 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c128:	2200      	movs	r2, #0
 800c12a:	4912      	ldr	r1, [pc, #72]	@ (800c174 <MX_USB_DEVICE_Init+0x50>)
 800c12c:	4812      	ldr	r0, [pc, #72]	@ (800c178 <MX_USB_DEVICE_Init+0x54>)
 800c12e:	f7fe ff62 	bl	800aff6 <USBD_Init>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d001      	beq.n	800c13c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c138:	f7f7 f998 	bl	800346c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c13c:	490f      	ldr	r1, [pc, #60]	@ (800c17c <MX_USB_DEVICE_Init+0x58>)
 800c13e:	480e      	ldr	r0, [pc, #56]	@ (800c178 <MX_USB_DEVICE_Init+0x54>)
 800c140:	f7fe ff84 	bl	800b04c <USBD_RegisterClass>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c14a:	f7f7 f98f 	bl	800346c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c14e:	490c      	ldr	r1, [pc, #48]	@ (800c180 <MX_USB_DEVICE_Init+0x5c>)
 800c150:	4809      	ldr	r0, [pc, #36]	@ (800c178 <MX_USB_DEVICE_Init+0x54>)
 800c152:	f7fe feb5 	bl	800aec0 <USBD_CDC_RegisterInterface>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c15c:	f7f7 f986 	bl	800346c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c160:	4805      	ldr	r0, [pc, #20]	@ (800c178 <MX_USB_DEVICE_Init+0x54>)
 800c162:	f7fe ff8c 	bl	800b07e <USBD_Start>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d001      	beq.n	800c170 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c16c:	f7f7 f97e 	bl	800346c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c170:	bf00      	nop
 800c172:	bd80      	pop	{r7, pc}
 800c174:	20000154 	.word	0x20000154
 800c178:	2000043c 	.word	0x2000043c
 800c17c:	20000040 	.word	0x20000040
 800c180:	20000144 	.word	0x20000144

0800c184 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c188:	2200      	movs	r2, #0
 800c18a:	4905      	ldr	r1, [pc, #20]	@ (800c1a0 <CDC_Init_FS+0x1c>)
 800c18c:	4805      	ldr	r0, [pc, #20]	@ (800c1a4 <CDC_Init_FS+0x20>)
 800c18e:	f7fe fead 	bl	800aeec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c192:	4905      	ldr	r1, [pc, #20]	@ (800c1a8 <CDC_Init_FS+0x24>)
 800c194:	4803      	ldr	r0, [pc, #12]	@ (800c1a4 <CDC_Init_FS+0x20>)
 800c196:	f7fe fec2 	bl	800af1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c19a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	20000ae8 	.word	0x20000ae8
 800c1a4:	2000043c 	.word	0x2000043c
 800c1a8:	20000700 	.word	0x20000700

0800c1ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c1b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bc80      	pop	{r7}
 800c1b8:	4770      	bx	lr
	...

0800c1bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	6039      	str	r1, [r7, #0]
 800c1c6:	71fb      	strb	r3, [r7, #7]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c1cc:	79fb      	ldrb	r3, [r7, #7]
 800c1ce:	2b23      	cmp	r3, #35	@ 0x23
 800c1d0:	d84a      	bhi.n	800c268 <CDC_Control_FS+0xac>
 800c1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1d8 <CDC_Control_FS+0x1c>)
 800c1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d8:	0800c269 	.word	0x0800c269
 800c1dc:	0800c269 	.word	0x0800c269
 800c1e0:	0800c269 	.word	0x0800c269
 800c1e4:	0800c269 	.word	0x0800c269
 800c1e8:	0800c269 	.word	0x0800c269
 800c1ec:	0800c269 	.word	0x0800c269
 800c1f0:	0800c269 	.word	0x0800c269
 800c1f4:	0800c269 	.word	0x0800c269
 800c1f8:	0800c269 	.word	0x0800c269
 800c1fc:	0800c269 	.word	0x0800c269
 800c200:	0800c269 	.word	0x0800c269
 800c204:	0800c269 	.word	0x0800c269
 800c208:	0800c269 	.word	0x0800c269
 800c20c:	0800c269 	.word	0x0800c269
 800c210:	0800c269 	.word	0x0800c269
 800c214:	0800c269 	.word	0x0800c269
 800c218:	0800c269 	.word	0x0800c269
 800c21c:	0800c269 	.word	0x0800c269
 800c220:	0800c269 	.word	0x0800c269
 800c224:	0800c269 	.word	0x0800c269
 800c228:	0800c269 	.word	0x0800c269
 800c22c:	0800c269 	.word	0x0800c269
 800c230:	0800c269 	.word	0x0800c269
 800c234:	0800c269 	.word	0x0800c269
 800c238:	0800c269 	.word	0x0800c269
 800c23c:	0800c269 	.word	0x0800c269
 800c240:	0800c269 	.word	0x0800c269
 800c244:	0800c269 	.word	0x0800c269
 800c248:	0800c269 	.word	0x0800c269
 800c24c:	0800c269 	.word	0x0800c269
 800c250:	0800c269 	.word	0x0800c269
 800c254:	0800c269 	.word	0x0800c269
 800c258:	0800c269 	.word	0x0800c269
 800c25c:	0800c269 	.word	0x0800c269
 800c260:	0800c269 	.word	0x0800c269
 800c264:	0800c269 	.word	0x0800c269
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c268:	bf00      	nop
  }

  return (USBD_OK);
 800c26a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	bc80      	pop	{r7}
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop

0800c278 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c282:	6879      	ldr	r1, [r7, #4]
 800c284:	480a      	ldr	r0, [pc, #40]	@ (800c2b0 <CDC_Receive_FS+0x38>)
 800c286:	f7fe fe4a 	bl	800af1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c28a:	4809      	ldr	r0, [pc, #36]	@ (800c2b0 <CDC_Receive_FS+0x38>)
 800c28c:	f7fe fe89 	bl	800afa2 <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d006      	beq.n	800c2a6 <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	461a      	mov	r2, r3
 800c29e:	4905      	ldr	r1, [pc, #20]	@ (800c2b4 <CDC_Receive_FS+0x3c>)
 800c2a0:	4805      	ldr	r0, [pc, #20]	@ (800c2b8 <CDC_Receive_FS+0x40>)
 800c2a2:	f000 fcf9 	bl	800cc98 <memcpy>
  }
  return (USBD_OK);
 800c2a6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	2000043c 	.word	0x2000043c
 800c2b4:	20000700 	.word	0x20000700
 800c2b8:	20000350 	.word	0x20000350

0800c2bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c2cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c304 <CDC_Transmit_FS+0x48>)
 800c2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e00b      	b.n	800c2fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c2e2:	887b      	ldrh	r3, [r7, #2]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	6879      	ldr	r1, [r7, #4]
 800c2e8:	4806      	ldr	r0, [pc, #24]	@ (800c304 <CDC_Transmit_FS+0x48>)
 800c2ea:	f7fe fdff 	bl	800aeec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c2ee:	4805      	ldr	r0, [pc, #20]	@ (800c304 <CDC_Transmit_FS+0x48>)
 800c2f0:	f7fe fe28 	bl	800af44 <USBD_CDC_TransmitPacket>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	2000043c 	.word	0x2000043c

0800c308 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	4603      	mov	r3, r0
 800c310:	6039      	str	r1, [r7, #0]
 800c312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2212      	movs	r2, #18
 800c318:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c31a:	4b03      	ldr	r3, [pc, #12]	@ (800c328 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	bc80      	pop	{r7}
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	20000170 	.word	0x20000170

0800c32c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	4603      	mov	r3, r0
 800c334:	6039      	str	r1, [r7, #0]
 800c336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	2204      	movs	r2, #4
 800c33c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c33e:	4b03      	ldr	r3, [pc, #12]	@ (800c34c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c340:	4618      	mov	r0, r3
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	bc80      	pop	{r7}
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	20000184 	.word	0x20000184

0800c350 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	4603      	mov	r3, r0
 800c358:	6039      	str	r1, [r7, #0]
 800c35a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c35c:	79fb      	ldrb	r3, [r7, #7]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d105      	bne.n	800c36e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c362:	683a      	ldr	r2, [r7, #0]
 800c364:	4907      	ldr	r1, [pc, #28]	@ (800c384 <USBD_FS_ProductStrDescriptor+0x34>)
 800c366:	4808      	ldr	r0, [pc, #32]	@ (800c388 <USBD_FS_ProductStrDescriptor+0x38>)
 800c368:	f7ff fdff 	bl	800bf6a <USBD_GetString>
 800c36c:	e004      	b.n	800c378 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c36e:	683a      	ldr	r2, [r7, #0]
 800c370:	4904      	ldr	r1, [pc, #16]	@ (800c384 <USBD_FS_ProductStrDescriptor+0x34>)
 800c372:	4805      	ldr	r0, [pc, #20]	@ (800c388 <USBD_FS_ProductStrDescriptor+0x38>)
 800c374:	f7ff fdf9 	bl	800bf6a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c378:	4b02      	ldr	r3, [pc, #8]	@ (800c384 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	20000ed0 	.word	0x20000ed0
 800c388:	0800dce0 	.word	0x0800dce0

0800c38c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	4603      	mov	r3, r0
 800c394:	6039      	str	r1, [r7, #0]
 800c396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	4904      	ldr	r1, [pc, #16]	@ (800c3ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c39c:	4804      	ldr	r0, [pc, #16]	@ (800c3b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c39e:	f7ff fde4 	bl	800bf6a <USBD_GetString>
  return USBD_StrDesc;
 800c3a2:	4b02      	ldr	r3, [pc, #8]	@ (800c3ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20000ed0 	.word	0x20000ed0
 800c3b0:	0800dcf8 	.word	0x0800dcf8

0800c3b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	6039      	str	r1, [r7, #0]
 800c3be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	221a      	movs	r2, #26
 800c3c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c3c6:	f000 f843 	bl	800c450 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c3ca:	4b02      	ldr	r3, [pc, #8]	@ (800c3d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	20000188 	.word	0x20000188

0800c3d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	6039      	str	r1, [r7, #0]
 800c3e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c3e4:	79fb      	ldrb	r3, [r7, #7]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d105      	bne.n	800c3f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	4907      	ldr	r1, [pc, #28]	@ (800c40c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c3ee:	4808      	ldr	r0, [pc, #32]	@ (800c410 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c3f0:	f7ff fdbb 	bl	800bf6a <USBD_GetString>
 800c3f4:	e004      	b.n	800c400 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	4904      	ldr	r1, [pc, #16]	@ (800c40c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c3fa:	4805      	ldr	r0, [pc, #20]	@ (800c410 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c3fc:	f7ff fdb5 	bl	800bf6a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c400:	4b02      	ldr	r3, [pc, #8]	@ (800c40c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c402:	4618      	mov	r0, r3
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20000ed0 	.word	0x20000ed0
 800c410:	0800dd0c 	.word	0x0800dd0c

0800c414 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	6039      	str	r1, [r7, #0]
 800c41e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c420:	79fb      	ldrb	r3, [r7, #7]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d105      	bne.n	800c432 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	4907      	ldr	r1, [pc, #28]	@ (800c448 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c42a:	4808      	ldr	r0, [pc, #32]	@ (800c44c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c42c:	f7ff fd9d 	bl	800bf6a <USBD_GetString>
 800c430:	e004      	b.n	800c43c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	4904      	ldr	r1, [pc, #16]	@ (800c448 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c436:	4805      	ldr	r0, [pc, #20]	@ (800c44c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c438:	f7ff fd97 	bl	800bf6a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c43c:	4b02      	ldr	r3, [pc, #8]	@ (800c448 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	20000ed0 	.word	0x20000ed0
 800c44c:	0800dd18 	.word	0x0800dd18

0800c450 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c456:	4b0f      	ldr	r3, [pc, #60]	@ (800c494 <Get_SerialNum+0x44>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c45c:	4b0e      	ldr	r3, [pc, #56]	@ (800c498 <Get_SerialNum+0x48>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c462:	4b0e      	ldr	r3, [pc, #56]	@ (800c49c <Get_SerialNum+0x4c>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4413      	add	r3, r2
 800c46e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d009      	beq.n	800c48a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c476:	2208      	movs	r2, #8
 800c478:	4909      	ldr	r1, [pc, #36]	@ (800c4a0 <Get_SerialNum+0x50>)
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f000 f814 	bl	800c4a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c480:	2204      	movs	r2, #4
 800c482:	4908      	ldr	r1, [pc, #32]	@ (800c4a4 <Get_SerialNum+0x54>)
 800c484:	68b8      	ldr	r0, [r7, #8]
 800c486:	f000 f80f 	bl	800c4a8 <IntToUnicode>
  }
}
 800c48a:	bf00      	nop
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	1ffff7e8 	.word	0x1ffff7e8
 800c498:	1ffff7ec 	.word	0x1ffff7ec
 800c49c:	1ffff7f0 	.word	0x1ffff7f0
 800c4a0:	2000018a 	.word	0x2000018a
 800c4a4:	2000019a 	.word	0x2000019a

0800c4a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b087      	sub	sp, #28
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	75fb      	strb	r3, [r7, #23]
 800c4be:	e027      	b.n	800c510 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	0f1b      	lsrs	r3, r3, #28
 800c4c4:	2b09      	cmp	r3, #9
 800c4c6:	d80b      	bhi.n	800c4e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	0f1b      	lsrs	r3, r3, #28
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	7dfb      	ldrb	r3, [r7, #23]
 800c4d0:	005b      	lsls	r3, r3, #1
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	440b      	add	r3, r1
 800c4d8:	3230      	adds	r2, #48	@ 0x30
 800c4da:	b2d2      	uxtb	r2, r2
 800c4dc:	701a      	strb	r2, [r3, #0]
 800c4de:	e00a      	b.n	800c4f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	0f1b      	lsrs	r3, r3, #28
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	7dfb      	ldrb	r3, [r7, #23]
 800c4e8:	005b      	lsls	r3, r3, #1
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	440b      	add	r3, r1
 800c4f0:	3237      	adds	r2, #55	@ 0x37
 800c4f2:	b2d2      	uxtb	r2, r2
 800c4f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	011b      	lsls	r3, r3, #4
 800c4fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c4fc:	7dfb      	ldrb	r3, [r7, #23]
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	3301      	adds	r3, #1
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	4413      	add	r3, r2
 800c506:	2200      	movs	r2, #0
 800c508:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c50a:	7dfb      	ldrb	r3, [r7, #23]
 800c50c:	3301      	adds	r3, #1
 800c50e:	75fb      	strb	r3, [r7, #23]
 800c510:	7dfa      	ldrb	r2, [r7, #23]
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	429a      	cmp	r2, r3
 800c516:	d3d3      	bcc.n	800c4c0 <IntToUnicode+0x18>
  }
}
 800c518:	bf00      	nop
 800c51a:	bf00      	nop
 800c51c:	371c      	adds	r7, #28
 800c51e:	46bd      	mov	sp, r7
 800c520:	bc80      	pop	{r7}
 800c522:	4770      	bx	lr

0800c524 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a0d      	ldr	r2, [pc, #52]	@ (800c568 <HAL_PCD_MspInit+0x44>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d113      	bne.n	800c55e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c536:	4b0d      	ldr	r3, [pc, #52]	@ (800c56c <HAL_PCD_MspInit+0x48>)
 800c538:	69db      	ldr	r3, [r3, #28]
 800c53a:	4a0c      	ldr	r2, [pc, #48]	@ (800c56c <HAL_PCD_MspInit+0x48>)
 800c53c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c540:	61d3      	str	r3, [r2, #28]
 800c542:	4b0a      	ldr	r3, [pc, #40]	@ (800c56c <HAL_PCD_MspInit+0x48>)
 800c544:	69db      	ldr	r3, [r3, #28]
 800c546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c54e:	2200      	movs	r2, #0
 800c550:	2100      	movs	r1, #0
 800c552:	2014      	movs	r0, #20
 800c554:	f7f7 fd6f 	bl	8004036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c558:	2014      	movs	r0, #20
 800c55a:	f7f7 fd88 	bl	800406e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c55e:	bf00      	nop
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	40005c00 	.word	0x40005c00
 800c56c:	40021000 	.word	0x40021000

0800c570 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800c584:	4619      	mov	r1, r3
 800c586:	4610      	mov	r0, r2
 800c588:	f7fe fdc1 	bl	800b10e <USBD_LL_SetupStage>
}
 800c58c:	bf00      	nop
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	460b      	mov	r3, r1
 800c59e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800c5a6:	78fa      	ldrb	r2, [r7, #3]
 800c5a8:	6879      	ldr	r1, [r7, #4]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	00db      	lsls	r3, r3, #3
 800c5b2:	440b      	add	r3, r1
 800c5b4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	78fb      	ldrb	r3, [r7, #3]
 800c5bc:	4619      	mov	r1, r3
 800c5be:	f7fe fdf3 	bl	800b1a8 <USBD_LL_DataOutStage>
}
 800c5c2:	bf00      	nop
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800c5dc:	78fa      	ldrb	r2, [r7, #3]
 800c5de:	6879      	ldr	r1, [r7, #4]
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	4413      	add	r3, r2
 800c5e6:	00db      	lsls	r3, r3, #3
 800c5e8:	440b      	add	r3, r1
 800c5ea:	333c      	adds	r3, #60	@ 0x3c
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	78fb      	ldrb	r3, [r7, #3]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	f7fe fe4a 	bl	800b28a <USBD_LL_DataInStage>
}
 800c5f6:	bf00      	nop
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fe ff5a 	bl	800b4c6 <USBD_LL_SOF>
}
 800c612:	bf00      	nop
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b084      	sub	sp, #16
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c622:	2301      	movs	r3, #1
 800c624:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d001      	beq.n	800c632 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c62e:	f7f6 ff1d 	bl	800346c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c638:	7bfa      	ldrb	r2, [r7, #15]
 800c63a:	4611      	mov	r1, r2
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fe ff0a 	bl	800b456 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fe fec3 	bl	800b3d4 <USBD_LL_Reset>
}
 800c64e:	bf00      	nop
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
	...

0800c658 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c666:	4618      	mov	r0, r3
 800c668:	f7fe ff04 	bl	800b474 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	699b      	ldr	r3, [r3, #24]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d005      	beq.n	800c680 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c674:	4b04      	ldr	r3, [pc, #16]	@ (800c688 <HAL_PCD_SuspendCallback+0x30>)
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	4a03      	ldr	r2, [pc, #12]	@ (800c688 <HAL_PCD_SuspendCallback+0x30>)
 800c67a:	f043 0306 	orr.w	r3, r3, #6
 800c67e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	e000ed00 	.word	0xe000ed00

0800c68c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fe fefe 	bl	800b49c <USBD_LL_Resume>
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c6b0:	4a28      	ldr	r2, [pc, #160]	@ (800c754 <USBD_LL_Init+0xac>)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a26      	ldr	r2, [pc, #152]	@ (800c754 <USBD_LL_Init+0xac>)
 800c6bc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c6c0:	4b24      	ldr	r3, [pc, #144]	@ (800c754 <USBD_LL_Init+0xac>)
 800c6c2:	4a25      	ldr	r2, [pc, #148]	@ (800c758 <USBD_LL_Init+0xb0>)
 800c6c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c6c6:	4b23      	ldr	r3, [pc, #140]	@ (800c754 <USBD_LL_Init+0xac>)
 800c6c8:	2208      	movs	r2, #8
 800c6ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c6cc:	4b21      	ldr	r3, [pc, #132]	@ (800c754 <USBD_LL_Init+0xac>)
 800c6ce:	2202      	movs	r2, #2
 800c6d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c6d2:	4b20      	ldr	r3, [pc, #128]	@ (800c754 <USBD_LL_Init+0xac>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c6d8:	4b1e      	ldr	r3, [pc, #120]	@ (800c754 <USBD_LL_Init+0xac>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c6de:	4b1d      	ldr	r3, [pc, #116]	@ (800c754 <USBD_LL_Init+0xac>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c6e4:	481b      	ldr	r0, [pc, #108]	@ (800c754 <USBD_LL_Init+0xac>)
 800c6e6:	f7f8 fcfd 	bl	80050e4 <HAL_PCD_Init>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c6f0:	f7f6 febc 	bl	800346c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c6fa:	2318      	movs	r3, #24
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	2100      	movs	r1, #0
 800c700:	f7fa f83c 	bl	800677c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c70a:	2358      	movs	r3, #88	@ 0x58
 800c70c:	2200      	movs	r2, #0
 800c70e:	2180      	movs	r1, #128	@ 0x80
 800c710:	f7fa f834 	bl	800677c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c71a:	23c0      	movs	r3, #192	@ 0xc0
 800c71c:	2200      	movs	r2, #0
 800c71e:	2181      	movs	r1, #129	@ 0x81
 800c720:	f7fa f82c 	bl	800677c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c72a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c72e:	2200      	movs	r2, #0
 800c730:	2101      	movs	r1, #1
 800c732:	f7fa f823 	bl	800677c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c73c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c740:	2200      	movs	r2, #0
 800c742:	2182      	movs	r1, #130	@ 0x82
 800c744:	f7fa f81a 	bl	800677c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	200010d0 	.word	0x200010d0
 800c758:	40005c00 	.word	0x40005c00

0800c75c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c772:	4618      	mov	r0, r3
 800c774:	f7f8 fdc1 	bl	80052fa <HAL_PCD_Start>
 800c778:	4603      	mov	r3, r0
 800c77a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	4618      	mov	r0, r3
 800c780:	f000 f94e 	bl	800ca20 <USBD_Get_USB_Status>
 800c784:	4603      	mov	r3, r0
 800c786:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c788:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b084      	sub	sp, #16
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	4608      	mov	r0, r1
 800c79c:	4611      	mov	r1, r2
 800c79e:	461a      	mov	r2, r3
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	70fb      	strb	r3, [r7, #3]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	70bb      	strb	r3, [r7, #2]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c7ba:	78bb      	ldrb	r3, [r7, #2]
 800c7bc:	883a      	ldrh	r2, [r7, #0]
 800c7be:	78f9      	ldrb	r1, [r7, #3]
 800c7c0:	f7f8 ff39 	bl	8005636 <HAL_PCD_EP_Open>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 f928 	bl	800ca20 <USBD_Get_USB_Status>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b084      	sub	sp, #16
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c7f8:	78fa      	ldrb	r2, [r7, #3]
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7f8 ff80 	bl	8005702 <HAL_PCD_EP_Close>
 800c802:	4603      	mov	r3, r0
 800c804:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c806:	7bfb      	ldrb	r3, [r7, #15]
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 f909 	bl	800ca20 <USBD_Get_USB_Status>
 800c80e:	4603      	mov	r3, r0
 800c810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c812:	7bbb      	ldrb	r3, [r7, #14]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	460b      	mov	r3, r1
 800c826:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c828:	2300      	movs	r3, #0
 800c82a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c82c:	2300      	movs	r3, #0
 800c82e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c836:	78fa      	ldrb	r2, [r7, #3]
 800c838:	4611      	mov	r1, r2
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7f9 f840 	bl	80058c0 <HAL_PCD_EP_SetStall>
 800c840:	4603      	mov	r3, r0
 800c842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c844:	7bfb      	ldrb	r3, [r7, #15]
 800c846:	4618      	mov	r0, r3
 800c848:	f000 f8ea 	bl	800ca20 <USBD_Get_USB_Status>
 800c84c:	4603      	mov	r3, r0
 800c84e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c850:	7bbb      	ldrb	r3, [r7, #14]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b084      	sub	sp, #16
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
 800c862:	460b      	mov	r3, r1
 800c864:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c866:	2300      	movs	r3, #0
 800c868:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c874:	78fa      	ldrb	r2, [r7, #3]
 800c876:	4611      	mov	r1, r2
 800c878:	4618      	mov	r0, r3
 800c87a:	f7f9 f881 	bl	8005980 <HAL_PCD_EP_ClrStall>
 800c87e:	4603      	mov	r3, r0
 800c880:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c882:	7bfb      	ldrb	r3, [r7, #15]
 800c884:	4618      	mov	r0, r3
 800c886:	f000 f8cb 	bl	800ca20 <USBD_Get_USB_Status>
 800c88a:	4603      	mov	r3, r0
 800c88c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c88e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c8aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c8ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	da0c      	bge.n	800c8ce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c8b4:	78fb      	ldrb	r3, [r7, #3]
 800c8b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8ba:	68f9      	ldr	r1, [r7, #12]
 800c8bc:	1c5a      	adds	r2, r3, #1
 800c8be:	4613      	mov	r3, r2
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	4413      	add	r3, r2
 800c8c4:	00db      	lsls	r3, r3, #3
 800c8c6:	440b      	add	r3, r1
 800c8c8:	3302      	adds	r3, #2
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	e00b      	b.n	800c8e6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c8ce:	78fb      	ldrb	r3, [r7, #3]
 800c8d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8d4:	68f9      	ldr	r1, [r7, #12]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	440b      	add	r3, r1
 800c8e0:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800c8e4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bc80      	pop	{r7}
 800c8ee:	4770      	bx	lr

0800c8f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c90a:	78fa      	ldrb	r2, [r7, #3]
 800c90c:	4611      	mov	r1, r2
 800c90e:	4618      	mov	r0, r3
 800c910:	f7f8 fe6c 	bl	80055ec <HAL_PCD_SetAddress>
 800c914:	4603      	mov	r3, r0
 800c916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 f880 	bl	800ca20 <USBD_Get_USB_Status>
 800c920:	4603      	mov	r3, r0
 800c922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c924:	7bbb      	ldrb	r3, [r7, #14]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b086      	sub	sp, #24
 800c932:	af00      	add	r7, sp, #0
 800c934:	60f8      	str	r0, [r7, #12]
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	461a      	mov	r2, r3
 800c93a:	460b      	mov	r3, r1
 800c93c:	72fb      	strb	r3, [r7, #11]
 800c93e:	4613      	mov	r3, r2
 800c940:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c950:	893b      	ldrh	r3, [r7, #8]
 800c952:	7af9      	ldrb	r1, [r7, #11]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	f7f8 ff70 	bl	800583a <HAL_PCD_EP_Transmit>
 800c95a:	4603      	mov	r3, r0
 800c95c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	4618      	mov	r0, r3
 800c962:	f000 f85d 	bl	800ca20 <USBD_Get_USB_Status>
 800c966:	4603      	mov	r3, r0
 800c968:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c96a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3718      	adds	r7, #24
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b086      	sub	sp, #24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	607a      	str	r2, [r7, #4]
 800c97e:	461a      	mov	r2, r3
 800c980:	460b      	mov	r3, r1
 800c982:	72fb      	strb	r3, [r7, #11]
 800c984:	4613      	mov	r3, r2
 800c986:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c996:	893b      	ldrh	r3, [r7, #8]
 800c998:	7af9      	ldrb	r1, [r7, #11]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	f7f8 fef9 	bl	8005792 <HAL_PCD_EP_Receive>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a4:	7dfb      	ldrb	r3, [r7, #23]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 f83a 	bl	800ca20 <USBD_Get_USB_Status>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3718      	adds	r7, #24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b082      	sub	sp, #8
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c9cc:	78fa      	ldrb	r2, [r7, #3]
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7f8 ff1b 	bl	800580c <HAL_PCD_EP_GetRxCount>
 800c9d6:	4603      	mov	r3, r0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c9e8:	4b02      	ldr	r3, [pc, #8]	@ (800c9f4 <USBD_static_malloc+0x14>)
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	370c      	adds	r7, #12
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bc80      	pop	{r7}
 800c9f2:	4770      	bx	lr
 800c9f4:	200013bc 	.word	0x200013bc

0800c9f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]

}
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bc80      	pop	{r7}
 800ca08:	4770      	bx	lr

0800ca0a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca0a:	b480      	push	{r7}
 800ca0c:	b083      	sub	sp, #12
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
 800ca12:	460b      	mov	r3, r1
 800ca14:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ca16:	bf00      	nop
 800ca18:	370c      	adds	r7, #12
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bc80      	pop	{r7}
 800ca1e:	4770      	bx	lr

0800ca20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	4603      	mov	r3, r0
 800ca28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca2e:	79fb      	ldrb	r3, [r7, #7]
 800ca30:	2b03      	cmp	r3, #3
 800ca32:	d817      	bhi.n	800ca64 <USBD_Get_USB_Status+0x44>
 800ca34:	a201      	add	r2, pc, #4	@ (adr r2, 800ca3c <USBD_Get_USB_Status+0x1c>)
 800ca36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3a:	bf00      	nop
 800ca3c:	0800ca4d 	.word	0x0800ca4d
 800ca40:	0800ca53 	.word	0x0800ca53
 800ca44:	0800ca59 	.word	0x0800ca59
 800ca48:	0800ca5f 	.word	0x0800ca5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca50:	e00b      	b.n	800ca6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca52:	2302      	movs	r3, #2
 800ca54:	73fb      	strb	r3, [r7, #15]
    break;
 800ca56:	e008      	b.n	800ca6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca5c:	e005      	b.n	800ca6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca5e:	2302      	movs	r3, #2
 800ca60:	73fb      	strb	r3, [r7, #15]
    break;
 800ca62:	e002      	b.n	800ca6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca64:	2302      	movs	r3, #2
 800ca66:	73fb      	strb	r3, [r7, #15]
    break;
 800ca68:	bf00      	nop
  }
  return usb_status;
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3714      	adds	r7, #20
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bc80      	pop	{r7}
 800ca74:	4770      	bx	lr
 800ca76:	bf00      	nop

0800ca78 <atoi>:
 800ca78:	220a      	movs	r2, #10
 800ca7a:	2100      	movs	r1, #0
 800ca7c:	f000 b87a 	b.w	800cb74 <strtol>

0800ca80 <_strtol_l.constprop.0>:
 800ca80:	2b24      	cmp	r3, #36	@ 0x24
 800ca82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca86:	4686      	mov	lr, r0
 800ca88:	4690      	mov	r8, r2
 800ca8a:	d801      	bhi.n	800ca90 <_strtol_l.constprop.0+0x10>
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d106      	bne.n	800ca9e <_strtol_l.constprop.0+0x1e>
 800ca90:	f000 f8d6 	bl	800cc40 <__errno>
 800ca94:	2316      	movs	r3, #22
 800ca96:	6003      	str	r3, [r0, #0]
 800ca98:	2000      	movs	r0, #0
 800ca9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9e:	460d      	mov	r5, r1
 800caa0:	4833      	ldr	r0, [pc, #204]	@ (800cb70 <_strtol_l.constprop.0+0xf0>)
 800caa2:	462a      	mov	r2, r5
 800caa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800caa8:	5d06      	ldrb	r6, [r0, r4]
 800caaa:	f016 0608 	ands.w	r6, r6, #8
 800caae:	d1f8      	bne.n	800caa2 <_strtol_l.constprop.0+0x22>
 800cab0:	2c2d      	cmp	r4, #45	@ 0x2d
 800cab2:	d12d      	bne.n	800cb10 <_strtol_l.constprop.0+0x90>
 800cab4:	2601      	movs	r6, #1
 800cab6:	782c      	ldrb	r4, [r5, #0]
 800cab8:	1c95      	adds	r5, r2, #2
 800caba:	f033 0210 	bics.w	r2, r3, #16
 800cabe:	d109      	bne.n	800cad4 <_strtol_l.constprop.0+0x54>
 800cac0:	2c30      	cmp	r4, #48	@ 0x30
 800cac2:	d12a      	bne.n	800cb1a <_strtol_l.constprop.0+0x9a>
 800cac4:	782a      	ldrb	r2, [r5, #0]
 800cac6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800caca:	2a58      	cmp	r2, #88	@ 0x58
 800cacc:	d125      	bne.n	800cb1a <_strtol_l.constprop.0+0x9a>
 800cace:	2310      	movs	r3, #16
 800cad0:	786c      	ldrb	r4, [r5, #1]
 800cad2:	3502      	adds	r5, #2
 800cad4:	2200      	movs	r2, #0
 800cad6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cada:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cade:	fbbc f9f3 	udiv	r9, ip, r3
 800cae2:	4610      	mov	r0, r2
 800cae4:	fb03 ca19 	mls	sl, r3, r9, ip
 800cae8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800caec:	2f09      	cmp	r7, #9
 800caee:	d81b      	bhi.n	800cb28 <_strtol_l.constprop.0+0xa8>
 800caf0:	463c      	mov	r4, r7
 800caf2:	42a3      	cmp	r3, r4
 800caf4:	dd27      	ble.n	800cb46 <_strtol_l.constprop.0+0xc6>
 800caf6:	1c57      	adds	r7, r2, #1
 800caf8:	d007      	beq.n	800cb0a <_strtol_l.constprop.0+0x8a>
 800cafa:	4581      	cmp	r9, r0
 800cafc:	d320      	bcc.n	800cb40 <_strtol_l.constprop.0+0xc0>
 800cafe:	d101      	bne.n	800cb04 <_strtol_l.constprop.0+0x84>
 800cb00:	45a2      	cmp	sl, r4
 800cb02:	db1d      	blt.n	800cb40 <_strtol_l.constprop.0+0xc0>
 800cb04:	2201      	movs	r2, #1
 800cb06:	fb00 4003 	mla	r0, r0, r3, r4
 800cb0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb0e:	e7eb      	b.n	800cae8 <_strtol_l.constprop.0+0x68>
 800cb10:	2c2b      	cmp	r4, #43	@ 0x2b
 800cb12:	bf04      	itt	eq
 800cb14:	782c      	ldrbeq	r4, [r5, #0]
 800cb16:	1c95      	addeq	r5, r2, #2
 800cb18:	e7cf      	b.n	800caba <_strtol_l.constprop.0+0x3a>
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1da      	bne.n	800cad4 <_strtol_l.constprop.0+0x54>
 800cb1e:	2c30      	cmp	r4, #48	@ 0x30
 800cb20:	bf0c      	ite	eq
 800cb22:	2308      	moveq	r3, #8
 800cb24:	230a      	movne	r3, #10
 800cb26:	e7d5      	b.n	800cad4 <_strtol_l.constprop.0+0x54>
 800cb28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cb2c:	2f19      	cmp	r7, #25
 800cb2e:	d801      	bhi.n	800cb34 <_strtol_l.constprop.0+0xb4>
 800cb30:	3c37      	subs	r4, #55	@ 0x37
 800cb32:	e7de      	b.n	800caf2 <_strtol_l.constprop.0+0x72>
 800cb34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cb38:	2f19      	cmp	r7, #25
 800cb3a:	d804      	bhi.n	800cb46 <_strtol_l.constprop.0+0xc6>
 800cb3c:	3c57      	subs	r4, #87	@ 0x57
 800cb3e:	e7d8      	b.n	800caf2 <_strtol_l.constprop.0+0x72>
 800cb40:	f04f 32ff 	mov.w	r2, #4294967295
 800cb44:	e7e1      	b.n	800cb0a <_strtol_l.constprop.0+0x8a>
 800cb46:	1c53      	adds	r3, r2, #1
 800cb48:	d108      	bne.n	800cb5c <_strtol_l.constprop.0+0xdc>
 800cb4a:	2322      	movs	r3, #34	@ 0x22
 800cb4c:	4660      	mov	r0, ip
 800cb4e:	f8ce 3000 	str.w	r3, [lr]
 800cb52:	f1b8 0f00 	cmp.w	r8, #0
 800cb56:	d0a0      	beq.n	800ca9a <_strtol_l.constprop.0+0x1a>
 800cb58:	1e69      	subs	r1, r5, #1
 800cb5a:	e006      	b.n	800cb6a <_strtol_l.constprop.0+0xea>
 800cb5c:	b106      	cbz	r6, 800cb60 <_strtol_l.constprop.0+0xe0>
 800cb5e:	4240      	negs	r0, r0
 800cb60:	f1b8 0f00 	cmp.w	r8, #0
 800cb64:	d099      	beq.n	800ca9a <_strtol_l.constprop.0+0x1a>
 800cb66:	2a00      	cmp	r2, #0
 800cb68:	d1f6      	bne.n	800cb58 <_strtol_l.constprop.0+0xd8>
 800cb6a:	f8c8 1000 	str.w	r1, [r8]
 800cb6e:	e794      	b.n	800ca9a <_strtol_l.constprop.0+0x1a>
 800cb70:	0800dd51 	.word	0x0800dd51

0800cb74 <strtol>:
 800cb74:	4613      	mov	r3, r2
 800cb76:	460a      	mov	r2, r1
 800cb78:	4601      	mov	r1, r0
 800cb7a:	4802      	ldr	r0, [pc, #8]	@ (800cb84 <strtol+0x10>)
 800cb7c:	6800      	ldr	r0, [r0, #0]
 800cb7e:	f7ff bf7f 	b.w	800ca80 <_strtol_l.constprop.0>
 800cb82:	bf00      	nop
 800cb84:	200001a4 	.word	0x200001a4

0800cb88 <sniprintf>:
 800cb88:	b40c      	push	{r2, r3}
 800cb8a:	b530      	push	{r4, r5, lr}
 800cb8c:	4b17      	ldr	r3, [pc, #92]	@ (800cbec <sniprintf+0x64>)
 800cb8e:	1e0c      	subs	r4, r1, #0
 800cb90:	681d      	ldr	r5, [r3, #0]
 800cb92:	b09d      	sub	sp, #116	@ 0x74
 800cb94:	da08      	bge.n	800cba8 <sniprintf+0x20>
 800cb96:	238b      	movs	r3, #139	@ 0x8b
 800cb98:	f04f 30ff 	mov.w	r0, #4294967295
 800cb9c:	602b      	str	r3, [r5, #0]
 800cb9e:	b01d      	add	sp, #116	@ 0x74
 800cba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cba4:	b002      	add	sp, #8
 800cba6:	4770      	bx	lr
 800cba8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cbac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cbb0:	bf0c      	ite	eq
 800cbb2:	4623      	moveq	r3, r4
 800cbb4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cbb8:	9304      	str	r3, [sp, #16]
 800cbba:	9307      	str	r3, [sp, #28]
 800cbbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cbc0:	9002      	str	r0, [sp, #8]
 800cbc2:	9006      	str	r0, [sp, #24]
 800cbc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cbc8:	4628      	mov	r0, r5
 800cbca:	ab21      	add	r3, sp, #132	@ 0x84
 800cbcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cbce:	a902      	add	r1, sp, #8
 800cbd0:	9301      	str	r3, [sp, #4]
 800cbd2:	f000 f9c1 	bl	800cf58 <_svfiprintf_r>
 800cbd6:	1c43      	adds	r3, r0, #1
 800cbd8:	bfbc      	itt	lt
 800cbda:	238b      	movlt	r3, #139	@ 0x8b
 800cbdc:	602b      	strlt	r3, [r5, #0]
 800cbde:	2c00      	cmp	r4, #0
 800cbe0:	d0dd      	beq.n	800cb9e <sniprintf+0x16>
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	9b02      	ldr	r3, [sp, #8]
 800cbe6:	701a      	strb	r2, [r3, #0]
 800cbe8:	e7d9      	b.n	800cb9e <sniprintf+0x16>
 800cbea:	bf00      	nop
 800cbec:	200001a4 	.word	0x200001a4

0800cbf0 <siprintf>:
 800cbf0:	b40e      	push	{r1, r2, r3}
 800cbf2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cbf6:	b500      	push	{lr}
 800cbf8:	b09c      	sub	sp, #112	@ 0x70
 800cbfa:	ab1d      	add	r3, sp, #116	@ 0x74
 800cbfc:	9002      	str	r0, [sp, #8]
 800cbfe:	9006      	str	r0, [sp, #24]
 800cc00:	9107      	str	r1, [sp, #28]
 800cc02:	9104      	str	r1, [sp, #16]
 800cc04:	4808      	ldr	r0, [pc, #32]	@ (800cc28 <siprintf+0x38>)
 800cc06:	4909      	ldr	r1, [pc, #36]	@ (800cc2c <siprintf+0x3c>)
 800cc08:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc0c:	9105      	str	r1, [sp, #20]
 800cc0e:	6800      	ldr	r0, [r0, #0]
 800cc10:	a902      	add	r1, sp, #8
 800cc12:	9301      	str	r3, [sp, #4]
 800cc14:	f000 f9a0 	bl	800cf58 <_svfiprintf_r>
 800cc18:	2200      	movs	r2, #0
 800cc1a:	9b02      	ldr	r3, [sp, #8]
 800cc1c:	701a      	strb	r2, [r3, #0]
 800cc1e:	b01c      	add	sp, #112	@ 0x70
 800cc20:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc24:	b003      	add	sp, #12
 800cc26:	4770      	bx	lr
 800cc28:	200001a4 	.word	0x200001a4
 800cc2c:	ffff0208 	.word	0xffff0208

0800cc30 <memset>:
 800cc30:	4603      	mov	r3, r0
 800cc32:	4402      	add	r2, r0
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d100      	bne.n	800cc3a <memset+0xa>
 800cc38:	4770      	bx	lr
 800cc3a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc3e:	e7f9      	b.n	800cc34 <memset+0x4>

0800cc40 <__errno>:
 800cc40:	4b01      	ldr	r3, [pc, #4]	@ (800cc48 <__errno+0x8>)
 800cc42:	6818      	ldr	r0, [r3, #0]
 800cc44:	4770      	bx	lr
 800cc46:	bf00      	nop
 800cc48:	200001a4 	.word	0x200001a4

0800cc4c <__libc_init_array>:
 800cc4c:	b570      	push	{r4, r5, r6, lr}
 800cc4e:	2600      	movs	r6, #0
 800cc50:	4d0c      	ldr	r5, [pc, #48]	@ (800cc84 <__libc_init_array+0x38>)
 800cc52:	4c0d      	ldr	r4, [pc, #52]	@ (800cc88 <__libc_init_array+0x3c>)
 800cc54:	1b64      	subs	r4, r4, r5
 800cc56:	10a4      	asrs	r4, r4, #2
 800cc58:	42a6      	cmp	r6, r4
 800cc5a:	d109      	bne.n	800cc70 <__libc_init_array+0x24>
 800cc5c:	f000 fc78 	bl	800d550 <_init>
 800cc60:	2600      	movs	r6, #0
 800cc62:	4d0a      	ldr	r5, [pc, #40]	@ (800cc8c <__libc_init_array+0x40>)
 800cc64:	4c0a      	ldr	r4, [pc, #40]	@ (800cc90 <__libc_init_array+0x44>)
 800cc66:	1b64      	subs	r4, r4, r5
 800cc68:	10a4      	asrs	r4, r4, #2
 800cc6a:	42a6      	cmp	r6, r4
 800cc6c:	d105      	bne.n	800cc7a <__libc_init_array+0x2e>
 800cc6e:	bd70      	pop	{r4, r5, r6, pc}
 800cc70:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc74:	4798      	blx	r3
 800cc76:	3601      	adds	r6, #1
 800cc78:	e7ee      	b.n	800cc58 <__libc_init_array+0xc>
 800cc7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc7e:	4798      	blx	r3
 800cc80:	3601      	adds	r6, #1
 800cc82:	e7f2      	b.n	800cc6a <__libc_init_array+0x1e>
 800cc84:	0800de8c 	.word	0x0800de8c
 800cc88:	0800de8c 	.word	0x0800de8c
 800cc8c:	0800de8c 	.word	0x0800de8c
 800cc90:	0800de90 	.word	0x0800de90

0800cc94 <__retarget_lock_acquire_recursive>:
 800cc94:	4770      	bx	lr

0800cc96 <__retarget_lock_release_recursive>:
 800cc96:	4770      	bx	lr

0800cc98 <memcpy>:
 800cc98:	440a      	add	r2, r1
 800cc9a:	4291      	cmp	r1, r2
 800cc9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cca0:	d100      	bne.n	800cca4 <memcpy+0xc>
 800cca2:	4770      	bx	lr
 800cca4:	b510      	push	{r4, lr}
 800cca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccaa:	4291      	cmp	r1, r2
 800ccac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccb0:	d1f9      	bne.n	800cca6 <memcpy+0xe>
 800ccb2:	bd10      	pop	{r4, pc}

0800ccb4 <_free_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	2900      	cmp	r1, #0
 800ccba:	d040      	beq.n	800cd3e <_free_r+0x8a>
 800ccbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccc0:	1f0c      	subs	r4, r1, #4
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	bfb8      	it	lt
 800ccc6:	18e4      	addlt	r4, r4, r3
 800ccc8:	f000 f8de 	bl	800ce88 <__malloc_lock>
 800cccc:	4a1c      	ldr	r2, [pc, #112]	@ (800cd40 <_free_r+0x8c>)
 800ccce:	6813      	ldr	r3, [r2, #0]
 800ccd0:	b933      	cbnz	r3, 800cce0 <_free_r+0x2c>
 800ccd2:	6063      	str	r3, [r4, #4]
 800ccd4:	6014      	str	r4, [r2, #0]
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccdc:	f000 b8da 	b.w	800ce94 <__malloc_unlock>
 800cce0:	42a3      	cmp	r3, r4
 800cce2:	d908      	bls.n	800ccf6 <_free_r+0x42>
 800cce4:	6820      	ldr	r0, [r4, #0]
 800cce6:	1821      	adds	r1, r4, r0
 800cce8:	428b      	cmp	r3, r1
 800ccea:	bf01      	itttt	eq
 800ccec:	6819      	ldreq	r1, [r3, #0]
 800ccee:	685b      	ldreq	r3, [r3, #4]
 800ccf0:	1809      	addeq	r1, r1, r0
 800ccf2:	6021      	streq	r1, [r4, #0]
 800ccf4:	e7ed      	b.n	800ccd2 <_free_r+0x1e>
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	b10b      	cbz	r3, 800cd00 <_free_r+0x4c>
 800ccfc:	42a3      	cmp	r3, r4
 800ccfe:	d9fa      	bls.n	800ccf6 <_free_r+0x42>
 800cd00:	6811      	ldr	r1, [r2, #0]
 800cd02:	1850      	adds	r0, r2, r1
 800cd04:	42a0      	cmp	r0, r4
 800cd06:	d10b      	bne.n	800cd20 <_free_r+0x6c>
 800cd08:	6820      	ldr	r0, [r4, #0]
 800cd0a:	4401      	add	r1, r0
 800cd0c:	1850      	adds	r0, r2, r1
 800cd0e:	4283      	cmp	r3, r0
 800cd10:	6011      	str	r1, [r2, #0]
 800cd12:	d1e0      	bne.n	800ccd6 <_free_r+0x22>
 800cd14:	6818      	ldr	r0, [r3, #0]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	4408      	add	r0, r1
 800cd1a:	6010      	str	r0, [r2, #0]
 800cd1c:	6053      	str	r3, [r2, #4]
 800cd1e:	e7da      	b.n	800ccd6 <_free_r+0x22>
 800cd20:	d902      	bls.n	800cd28 <_free_r+0x74>
 800cd22:	230c      	movs	r3, #12
 800cd24:	602b      	str	r3, [r5, #0]
 800cd26:	e7d6      	b.n	800ccd6 <_free_r+0x22>
 800cd28:	6820      	ldr	r0, [r4, #0]
 800cd2a:	1821      	adds	r1, r4, r0
 800cd2c:	428b      	cmp	r3, r1
 800cd2e:	bf01      	itttt	eq
 800cd30:	6819      	ldreq	r1, [r3, #0]
 800cd32:	685b      	ldreq	r3, [r3, #4]
 800cd34:	1809      	addeq	r1, r1, r0
 800cd36:	6021      	streq	r1, [r4, #0]
 800cd38:	6063      	str	r3, [r4, #4]
 800cd3a:	6054      	str	r4, [r2, #4]
 800cd3c:	e7cb      	b.n	800ccd6 <_free_r+0x22>
 800cd3e:	bd38      	pop	{r3, r4, r5, pc}
 800cd40:	20001720 	.word	0x20001720

0800cd44 <sbrk_aligned>:
 800cd44:	b570      	push	{r4, r5, r6, lr}
 800cd46:	4e0f      	ldr	r6, [pc, #60]	@ (800cd84 <sbrk_aligned+0x40>)
 800cd48:	460c      	mov	r4, r1
 800cd4a:	6831      	ldr	r1, [r6, #0]
 800cd4c:	4605      	mov	r5, r0
 800cd4e:	b911      	cbnz	r1, 800cd56 <sbrk_aligned+0x12>
 800cd50:	f000 fbaa 	bl	800d4a8 <_sbrk_r>
 800cd54:	6030      	str	r0, [r6, #0]
 800cd56:	4621      	mov	r1, r4
 800cd58:	4628      	mov	r0, r5
 800cd5a:	f000 fba5 	bl	800d4a8 <_sbrk_r>
 800cd5e:	1c43      	adds	r3, r0, #1
 800cd60:	d103      	bne.n	800cd6a <sbrk_aligned+0x26>
 800cd62:	f04f 34ff 	mov.w	r4, #4294967295
 800cd66:	4620      	mov	r0, r4
 800cd68:	bd70      	pop	{r4, r5, r6, pc}
 800cd6a:	1cc4      	adds	r4, r0, #3
 800cd6c:	f024 0403 	bic.w	r4, r4, #3
 800cd70:	42a0      	cmp	r0, r4
 800cd72:	d0f8      	beq.n	800cd66 <sbrk_aligned+0x22>
 800cd74:	1a21      	subs	r1, r4, r0
 800cd76:	4628      	mov	r0, r5
 800cd78:	f000 fb96 	bl	800d4a8 <_sbrk_r>
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	d1f2      	bne.n	800cd66 <sbrk_aligned+0x22>
 800cd80:	e7ef      	b.n	800cd62 <sbrk_aligned+0x1e>
 800cd82:	bf00      	nop
 800cd84:	2000171c 	.word	0x2000171c

0800cd88 <_malloc_r>:
 800cd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd8c:	1ccd      	adds	r5, r1, #3
 800cd8e:	f025 0503 	bic.w	r5, r5, #3
 800cd92:	3508      	adds	r5, #8
 800cd94:	2d0c      	cmp	r5, #12
 800cd96:	bf38      	it	cc
 800cd98:	250c      	movcc	r5, #12
 800cd9a:	2d00      	cmp	r5, #0
 800cd9c:	4606      	mov	r6, r0
 800cd9e:	db01      	blt.n	800cda4 <_malloc_r+0x1c>
 800cda0:	42a9      	cmp	r1, r5
 800cda2:	d904      	bls.n	800cdae <_malloc_r+0x26>
 800cda4:	230c      	movs	r3, #12
 800cda6:	6033      	str	r3, [r6, #0]
 800cda8:	2000      	movs	r0, #0
 800cdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce84 <_malloc_r+0xfc>
 800cdb2:	f000 f869 	bl	800ce88 <__malloc_lock>
 800cdb6:	f8d8 3000 	ldr.w	r3, [r8]
 800cdba:	461c      	mov	r4, r3
 800cdbc:	bb44      	cbnz	r4, 800ce10 <_malloc_r+0x88>
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	f7ff ffbf 	bl	800cd44 <sbrk_aligned>
 800cdc6:	1c43      	adds	r3, r0, #1
 800cdc8:	4604      	mov	r4, r0
 800cdca:	d158      	bne.n	800ce7e <_malloc_r+0xf6>
 800cdcc:	f8d8 4000 	ldr.w	r4, [r8]
 800cdd0:	4627      	mov	r7, r4
 800cdd2:	2f00      	cmp	r7, #0
 800cdd4:	d143      	bne.n	800ce5e <_malloc_r+0xd6>
 800cdd6:	2c00      	cmp	r4, #0
 800cdd8:	d04b      	beq.n	800ce72 <_malloc_r+0xea>
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	4639      	mov	r1, r7
 800cdde:	4630      	mov	r0, r6
 800cde0:	eb04 0903 	add.w	r9, r4, r3
 800cde4:	f000 fb60 	bl	800d4a8 <_sbrk_r>
 800cde8:	4581      	cmp	r9, r0
 800cdea:	d142      	bne.n	800ce72 <_malloc_r+0xea>
 800cdec:	6821      	ldr	r1, [r4, #0]
 800cdee:	4630      	mov	r0, r6
 800cdf0:	1a6d      	subs	r5, r5, r1
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	f7ff ffa6 	bl	800cd44 <sbrk_aligned>
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	d03a      	beq.n	800ce72 <_malloc_r+0xea>
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	442b      	add	r3, r5
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	f8d8 3000 	ldr.w	r3, [r8]
 800ce06:	685a      	ldr	r2, [r3, #4]
 800ce08:	bb62      	cbnz	r2, 800ce64 <_malloc_r+0xdc>
 800ce0a:	f8c8 7000 	str.w	r7, [r8]
 800ce0e:	e00f      	b.n	800ce30 <_malloc_r+0xa8>
 800ce10:	6822      	ldr	r2, [r4, #0]
 800ce12:	1b52      	subs	r2, r2, r5
 800ce14:	d420      	bmi.n	800ce58 <_malloc_r+0xd0>
 800ce16:	2a0b      	cmp	r2, #11
 800ce18:	d917      	bls.n	800ce4a <_malloc_r+0xc2>
 800ce1a:	1961      	adds	r1, r4, r5
 800ce1c:	42a3      	cmp	r3, r4
 800ce1e:	6025      	str	r5, [r4, #0]
 800ce20:	bf18      	it	ne
 800ce22:	6059      	strne	r1, [r3, #4]
 800ce24:	6863      	ldr	r3, [r4, #4]
 800ce26:	bf08      	it	eq
 800ce28:	f8c8 1000 	streq.w	r1, [r8]
 800ce2c:	5162      	str	r2, [r4, r5]
 800ce2e:	604b      	str	r3, [r1, #4]
 800ce30:	4630      	mov	r0, r6
 800ce32:	f000 f82f 	bl	800ce94 <__malloc_unlock>
 800ce36:	f104 000b 	add.w	r0, r4, #11
 800ce3a:	1d23      	adds	r3, r4, #4
 800ce3c:	f020 0007 	bic.w	r0, r0, #7
 800ce40:	1ac2      	subs	r2, r0, r3
 800ce42:	bf1c      	itt	ne
 800ce44:	1a1b      	subne	r3, r3, r0
 800ce46:	50a3      	strne	r3, [r4, r2]
 800ce48:	e7af      	b.n	800cdaa <_malloc_r+0x22>
 800ce4a:	6862      	ldr	r2, [r4, #4]
 800ce4c:	42a3      	cmp	r3, r4
 800ce4e:	bf0c      	ite	eq
 800ce50:	f8c8 2000 	streq.w	r2, [r8]
 800ce54:	605a      	strne	r2, [r3, #4]
 800ce56:	e7eb      	b.n	800ce30 <_malloc_r+0xa8>
 800ce58:	4623      	mov	r3, r4
 800ce5a:	6864      	ldr	r4, [r4, #4]
 800ce5c:	e7ae      	b.n	800cdbc <_malloc_r+0x34>
 800ce5e:	463c      	mov	r4, r7
 800ce60:	687f      	ldr	r7, [r7, #4]
 800ce62:	e7b6      	b.n	800cdd2 <_malloc_r+0x4a>
 800ce64:	461a      	mov	r2, r3
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	42a3      	cmp	r3, r4
 800ce6a:	d1fb      	bne.n	800ce64 <_malloc_r+0xdc>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	6053      	str	r3, [r2, #4]
 800ce70:	e7de      	b.n	800ce30 <_malloc_r+0xa8>
 800ce72:	230c      	movs	r3, #12
 800ce74:	4630      	mov	r0, r6
 800ce76:	6033      	str	r3, [r6, #0]
 800ce78:	f000 f80c 	bl	800ce94 <__malloc_unlock>
 800ce7c:	e794      	b.n	800cda8 <_malloc_r+0x20>
 800ce7e:	6005      	str	r5, [r0, #0]
 800ce80:	e7d6      	b.n	800ce30 <_malloc_r+0xa8>
 800ce82:	bf00      	nop
 800ce84:	20001720 	.word	0x20001720

0800ce88 <__malloc_lock>:
 800ce88:	4801      	ldr	r0, [pc, #4]	@ (800ce90 <__malloc_lock+0x8>)
 800ce8a:	f7ff bf03 	b.w	800cc94 <__retarget_lock_acquire_recursive>
 800ce8e:	bf00      	nop
 800ce90:	20001718 	.word	0x20001718

0800ce94 <__malloc_unlock>:
 800ce94:	4801      	ldr	r0, [pc, #4]	@ (800ce9c <__malloc_unlock+0x8>)
 800ce96:	f7ff befe 	b.w	800cc96 <__retarget_lock_release_recursive>
 800ce9a:	bf00      	nop
 800ce9c:	20001718 	.word	0x20001718

0800cea0 <__ssputs_r>:
 800cea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea4:	461f      	mov	r7, r3
 800cea6:	688e      	ldr	r6, [r1, #8]
 800cea8:	4682      	mov	sl, r0
 800ceaa:	42be      	cmp	r6, r7
 800ceac:	460c      	mov	r4, r1
 800ceae:	4690      	mov	r8, r2
 800ceb0:	680b      	ldr	r3, [r1, #0]
 800ceb2:	d82d      	bhi.n	800cf10 <__ssputs_r+0x70>
 800ceb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ceb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cebc:	d026      	beq.n	800cf0c <__ssputs_r+0x6c>
 800cebe:	6965      	ldr	r5, [r4, #20]
 800cec0:	6909      	ldr	r1, [r1, #16]
 800cec2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cec6:	eba3 0901 	sub.w	r9, r3, r1
 800ceca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cece:	1c7b      	adds	r3, r7, #1
 800ced0:	444b      	add	r3, r9
 800ced2:	106d      	asrs	r5, r5, #1
 800ced4:	429d      	cmp	r5, r3
 800ced6:	bf38      	it	cc
 800ced8:	461d      	movcc	r5, r3
 800ceda:	0553      	lsls	r3, r2, #21
 800cedc:	d527      	bpl.n	800cf2e <__ssputs_r+0x8e>
 800cede:	4629      	mov	r1, r5
 800cee0:	f7ff ff52 	bl	800cd88 <_malloc_r>
 800cee4:	4606      	mov	r6, r0
 800cee6:	b360      	cbz	r0, 800cf42 <__ssputs_r+0xa2>
 800cee8:	464a      	mov	r2, r9
 800ceea:	6921      	ldr	r1, [r4, #16]
 800ceec:	f7ff fed4 	bl	800cc98 <memcpy>
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cefa:	81a3      	strh	r3, [r4, #12]
 800cefc:	6126      	str	r6, [r4, #16]
 800cefe:	444e      	add	r6, r9
 800cf00:	6026      	str	r6, [r4, #0]
 800cf02:	463e      	mov	r6, r7
 800cf04:	6165      	str	r5, [r4, #20]
 800cf06:	eba5 0509 	sub.w	r5, r5, r9
 800cf0a:	60a5      	str	r5, [r4, #8]
 800cf0c:	42be      	cmp	r6, r7
 800cf0e:	d900      	bls.n	800cf12 <__ssputs_r+0x72>
 800cf10:	463e      	mov	r6, r7
 800cf12:	4632      	mov	r2, r6
 800cf14:	4641      	mov	r1, r8
 800cf16:	6820      	ldr	r0, [r4, #0]
 800cf18:	f000 faac 	bl	800d474 <memmove>
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	68a3      	ldr	r3, [r4, #8]
 800cf20:	1b9b      	subs	r3, r3, r6
 800cf22:	60a3      	str	r3, [r4, #8]
 800cf24:	6823      	ldr	r3, [r4, #0]
 800cf26:	4433      	add	r3, r6
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2e:	462a      	mov	r2, r5
 800cf30:	f000 fad8 	bl	800d4e4 <_realloc_r>
 800cf34:	4606      	mov	r6, r0
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d1e0      	bne.n	800cefc <__ssputs_r+0x5c>
 800cf3a:	4650      	mov	r0, sl
 800cf3c:	6921      	ldr	r1, [r4, #16]
 800cf3e:	f7ff feb9 	bl	800ccb4 <_free_r>
 800cf42:	230c      	movs	r3, #12
 800cf44:	f8ca 3000 	str.w	r3, [sl]
 800cf48:	89a3      	ldrh	r3, [r4, #12]
 800cf4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf52:	81a3      	strh	r3, [r4, #12]
 800cf54:	e7e9      	b.n	800cf2a <__ssputs_r+0x8a>
	...

0800cf58 <_svfiprintf_r>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	4698      	mov	r8, r3
 800cf5e:	898b      	ldrh	r3, [r1, #12]
 800cf60:	4607      	mov	r7, r0
 800cf62:	061b      	lsls	r3, r3, #24
 800cf64:	460d      	mov	r5, r1
 800cf66:	4614      	mov	r4, r2
 800cf68:	b09d      	sub	sp, #116	@ 0x74
 800cf6a:	d510      	bpl.n	800cf8e <_svfiprintf_r+0x36>
 800cf6c:	690b      	ldr	r3, [r1, #16]
 800cf6e:	b973      	cbnz	r3, 800cf8e <_svfiprintf_r+0x36>
 800cf70:	2140      	movs	r1, #64	@ 0x40
 800cf72:	f7ff ff09 	bl	800cd88 <_malloc_r>
 800cf76:	6028      	str	r0, [r5, #0]
 800cf78:	6128      	str	r0, [r5, #16]
 800cf7a:	b930      	cbnz	r0, 800cf8a <_svfiprintf_r+0x32>
 800cf7c:	230c      	movs	r3, #12
 800cf7e:	603b      	str	r3, [r7, #0]
 800cf80:	f04f 30ff 	mov.w	r0, #4294967295
 800cf84:	b01d      	add	sp, #116	@ 0x74
 800cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8a:	2340      	movs	r3, #64	@ 0x40
 800cf8c:	616b      	str	r3, [r5, #20]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf92:	2320      	movs	r3, #32
 800cf94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf98:	2330      	movs	r3, #48	@ 0x30
 800cf9a:	f04f 0901 	mov.w	r9, #1
 800cf9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfa2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d13c <_svfiprintf_r+0x1e4>
 800cfa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfaa:	4623      	mov	r3, r4
 800cfac:	469a      	mov	sl, r3
 800cfae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfb2:	b10a      	cbz	r2, 800cfb8 <_svfiprintf_r+0x60>
 800cfb4:	2a25      	cmp	r2, #37	@ 0x25
 800cfb6:	d1f9      	bne.n	800cfac <_svfiprintf_r+0x54>
 800cfb8:	ebba 0b04 	subs.w	fp, sl, r4
 800cfbc:	d00b      	beq.n	800cfd6 <_svfiprintf_r+0x7e>
 800cfbe:	465b      	mov	r3, fp
 800cfc0:	4622      	mov	r2, r4
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	4638      	mov	r0, r7
 800cfc6:	f7ff ff6b 	bl	800cea0 <__ssputs_r>
 800cfca:	3001      	adds	r0, #1
 800cfcc:	f000 80a7 	beq.w	800d11e <_svfiprintf_r+0x1c6>
 800cfd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfd2:	445a      	add	r2, fp
 800cfd4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfd6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	f000 809f 	beq.w	800d11e <_svfiprintf_r+0x1c6>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfea:	f10a 0a01 	add.w	sl, sl, #1
 800cfee:	9304      	str	r3, [sp, #16]
 800cff0:	9307      	str	r3, [sp, #28]
 800cff2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cff6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cff8:	4654      	mov	r4, sl
 800cffa:	2205      	movs	r2, #5
 800cffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d000:	484e      	ldr	r0, [pc, #312]	@ (800d13c <_svfiprintf_r+0x1e4>)
 800d002:	f000 fa61 	bl	800d4c8 <memchr>
 800d006:	9a04      	ldr	r2, [sp, #16]
 800d008:	b9d8      	cbnz	r0, 800d042 <_svfiprintf_r+0xea>
 800d00a:	06d0      	lsls	r0, r2, #27
 800d00c:	bf44      	itt	mi
 800d00e:	2320      	movmi	r3, #32
 800d010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d014:	0711      	lsls	r1, r2, #28
 800d016:	bf44      	itt	mi
 800d018:	232b      	movmi	r3, #43	@ 0x2b
 800d01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d01e:	f89a 3000 	ldrb.w	r3, [sl]
 800d022:	2b2a      	cmp	r3, #42	@ 0x2a
 800d024:	d015      	beq.n	800d052 <_svfiprintf_r+0xfa>
 800d026:	4654      	mov	r4, sl
 800d028:	2000      	movs	r0, #0
 800d02a:	f04f 0c0a 	mov.w	ip, #10
 800d02e:	9a07      	ldr	r2, [sp, #28]
 800d030:	4621      	mov	r1, r4
 800d032:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d036:	3b30      	subs	r3, #48	@ 0x30
 800d038:	2b09      	cmp	r3, #9
 800d03a:	d94b      	bls.n	800d0d4 <_svfiprintf_r+0x17c>
 800d03c:	b1b0      	cbz	r0, 800d06c <_svfiprintf_r+0x114>
 800d03e:	9207      	str	r2, [sp, #28]
 800d040:	e014      	b.n	800d06c <_svfiprintf_r+0x114>
 800d042:	eba0 0308 	sub.w	r3, r0, r8
 800d046:	fa09 f303 	lsl.w	r3, r9, r3
 800d04a:	4313      	orrs	r3, r2
 800d04c:	46a2      	mov	sl, r4
 800d04e:	9304      	str	r3, [sp, #16]
 800d050:	e7d2      	b.n	800cff8 <_svfiprintf_r+0xa0>
 800d052:	9b03      	ldr	r3, [sp, #12]
 800d054:	1d19      	adds	r1, r3, #4
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	9103      	str	r1, [sp, #12]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	bfbb      	ittet	lt
 800d05e:	425b      	neglt	r3, r3
 800d060:	f042 0202 	orrlt.w	r2, r2, #2
 800d064:	9307      	strge	r3, [sp, #28]
 800d066:	9307      	strlt	r3, [sp, #28]
 800d068:	bfb8      	it	lt
 800d06a:	9204      	strlt	r2, [sp, #16]
 800d06c:	7823      	ldrb	r3, [r4, #0]
 800d06e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d070:	d10a      	bne.n	800d088 <_svfiprintf_r+0x130>
 800d072:	7863      	ldrb	r3, [r4, #1]
 800d074:	2b2a      	cmp	r3, #42	@ 0x2a
 800d076:	d132      	bne.n	800d0de <_svfiprintf_r+0x186>
 800d078:	9b03      	ldr	r3, [sp, #12]
 800d07a:	3402      	adds	r4, #2
 800d07c:	1d1a      	adds	r2, r3, #4
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	9203      	str	r2, [sp, #12]
 800d082:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d086:	9305      	str	r3, [sp, #20]
 800d088:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d140 <_svfiprintf_r+0x1e8>
 800d08c:	2203      	movs	r2, #3
 800d08e:	4650      	mov	r0, sl
 800d090:	7821      	ldrb	r1, [r4, #0]
 800d092:	f000 fa19 	bl	800d4c8 <memchr>
 800d096:	b138      	cbz	r0, 800d0a8 <_svfiprintf_r+0x150>
 800d098:	2240      	movs	r2, #64	@ 0x40
 800d09a:	9b04      	ldr	r3, [sp, #16]
 800d09c:	eba0 000a 	sub.w	r0, r0, sl
 800d0a0:	4082      	lsls	r2, r0
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	3401      	adds	r4, #1
 800d0a6:	9304      	str	r3, [sp, #16]
 800d0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ac:	2206      	movs	r2, #6
 800d0ae:	4825      	ldr	r0, [pc, #148]	@ (800d144 <_svfiprintf_r+0x1ec>)
 800d0b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0b4:	f000 fa08 	bl	800d4c8 <memchr>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d036      	beq.n	800d12a <_svfiprintf_r+0x1d2>
 800d0bc:	4b22      	ldr	r3, [pc, #136]	@ (800d148 <_svfiprintf_r+0x1f0>)
 800d0be:	bb1b      	cbnz	r3, 800d108 <_svfiprintf_r+0x1b0>
 800d0c0:	9b03      	ldr	r3, [sp, #12]
 800d0c2:	3307      	adds	r3, #7
 800d0c4:	f023 0307 	bic.w	r3, r3, #7
 800d0c8:	3308      	adds	r3, #8
 800d0ca:	9303      	str	r3, [sp, #12]
 800d0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ce:	4433      	add	r3, r6
 800d0d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0d2:	e76a      	b.n	800cfaa <_svfiprintf_r+0x52>
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0dc:	e7a8      	b.n	800d030 <_svfiprintf_r+0xd8>
 800d0de:	2300      	movs	r3, #0
 800d0e0:	f04f 0c0a 	mov.w	ip, #10
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	3401      	adds	r4, #1
 800d0e8:	9305      	str	r3, [sp, #20]
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0f0:	3a30      	subs	r2, #48	@ 0x30
 800d0f2:	2a09      	cmp	r2, #9
 800d0f4:	d903      	bls.n	800d0fe <_svfiprintf_r+0x1a6>
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d0c6      	beq.n	800d088 <_svfiprintf_r+0x130>
 800d0fa:	9105      	str	r1, [sp, #20]
 800d0fc:	e7c4      	b.n	800d088 <_svfiprintf_r+0x130>
 800d0fe:	4604      	mov	r4, r0
 800d100:	2301      	movs	r3, #1
 800d102:	fb0c 2101 	mla	r1, ip, r1, r2
 800d106:	e7f0      	b.n	800d0ea <_svfiprintf_r+0x192>
 800d108:	ab03      	add	r3, sp, #12
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	462a      	mov	r2, r5
 800d10e:	4638      	mov	r0, r7
 800d110:	4b0e      	ldr	r3, [pc, #56]	@ (800d14c <_svfiprintf_r+0x1f4>)
 800d112:	a904      	add	r1, sp, #16
 800d114:	f3af 8000 	nop.w
 800d118:	1c42      	adds	r2, r0, #1
 800d11a:	4606      	mov	r6, r0
 800d11c:	d1d6      	bne.n	800d0cc <_svfiprintf_r+0x174>
 800d11e:	89ab      	ldrh	r3, [r5, #12]
 800d120:	065b      	lsls	r3, r3, #25
 800d122:	f53f af2d 	bmi.w	800cf80 <_svfiprintf_r+0x28>
 800d126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d128:	e72c      	b.n	800cf84 <_svfiprintf_r+0x2c>
 800d12a:	ab03      	add	r3, sp, #12
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	462a      	mov	r2, r5
 800d130:	4638      	mov	r0, r7
 800d132:	4b06      	ldr	r3, [pc, #24]	@ (800d14c <_svfiprintf_r+0x1f4>)
 800d134:	a904      	add	r1, sp, #16
 800d136:	f000 f87d 	bl	800d234 <_printf_i>
 800d13a:	e7ed      	b.n	800d118 <_svfiprintf_r+0x1c0>
 800d13c:	0800de51 	.word	0x0800de51
 800d140:	0800de57 	.word	0x0800de57
 800d144:	0800de5b 	.word	0x0800de5b
 800d148:	00000000 	.word	0x00000000
 800d14c:	0800cea1 	.word	0x0800cea1

0800d150 <_printf_common>:
 800d150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d154:	4616      	mov	r6, r2
 800d156:	4698      	mov	r8, r3
 800d158:	688a      	ldr	r2, [r1, #8]
 800d15a:	690b      	ldr	r3, [r1, #16]
 800d15c:	4607      	mov	r7, r0
 800d15e:	4293      	cmp	r3, r2
 800d160:	bfb8      	it	lt
 800d162:	4613      	movlt	r3, r2
 800d164:	6033      	str	r3, [r6, #0]
 800d166:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d16a:	460c      	mov	r4, r1
 800d16c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d170:	b10a      	cbz	r2, 800d176 <_printf_common+0x26>
 800d172:	3301      	adds	r3, #1
 800d174:	6033      	str	r3, [r6, #0]
 800d176:	6823      	ldr	r3, [r4, #0]
 800d178:	0699      	lsls	r1, r3, #26
 800d17a:	bf42      	ittt	mi
 800d17c:	6833      	ldrmi	r3, [r6, #0]
 800d17e:	3302      	addmi	r3, #2
 800d180:	6033      	strmi	r3, [r6, #0]
 800d182:	6825      	ldr	r5, [r4, #0]
 800d184:	f015 0506 	ands.w	r5, r5, #6
 800d188:	d106      	bne.n	800d198 <_printf_common+0x48>
 800d18a:	f104 0a19 	add.w	sl, r4, #25
 800d18e:	68e3      	ldr	r3, [r4, #12]
 800d190:	6832      	ldr	r2, [r6, #0]
 800d192:	1a9b      	subs	r3, r3, r2
 800d194:	42ab      	cmp	r3, r5
 800d196:	dc2b      	bgt.n	800d1f0 <_printf_common+0xa0>
 800d198:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d19c:	6822      	ldr	r2, [r4, #0]
 800d19e:	3b00      	subs	r3, #0
 800d1a0:	bf18      	it	ne
 800d1a2:	2301      	movne	r3, #1
 800d1a4:	0692      	lsls	r2, r2, #26
 800d1a6:	d430      	bmi.n	800d20a <_printf_common+0xba>
 800d1a8:	4641      	mov	r1, r8
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d1b0:	47c8      	blx	r9
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	d023      	beq.n	800d1fe <_printf_common+0xae>
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	6922      	ldr	r2, [r4, #16]
 800d1ba:	f003 0306 	and.w	r3, r3, #6
 800d1be:	2b04      	cmp	r3, #4
 800d1c0:	bf14      	ite	ne
 800d1c2:	2500      	movne	r5, #0
 800d1c4:	6833      	ldreq	r3, [r6, #0]
 800d1c6:	f04f 0600 	mov.w	r6, #0
 800d1ca:	bf08      	it	eq
 800d1cc:	68e5      	ldreq	r5, [r4, #12]
 800d1ce:	f104 041a 	add.w	r4, r4, #26
 800d1d2:	bf08      	it	eq
 800d1d4:	1aed      	subeq	r5, r5, r3
 800d1d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d1da:	bf08      	it	eq
 800d1dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	bfc4      	itt	gt
 800d1e4:	1a9b      	subgt	r3, r3, r2
 800d1e6:	18ed      	addgt	r5, r5, r3
 800d1e8:	42b5      	cmp	r5, r6
 800d1ea:	d11a      	bne.n	800d222 <_printf_common+0xd2>
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	e008      	b.n	800d202 <_printf_common+0xb2>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	4652      	mov	r2, sl
 800d1f4:	4641      	mov	r1, r8
 800d1f6:	4638      	mov	r0, r7
 800d1f8:	47c8      	blx	r9
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	d103      	bne.n	800d206 <_printf_common+0xb6>
 800d1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d206:	3501      	adds	r5, #1
 800d208:	e7c1      	b.n	800d18e <_printf_common+0x3e>
 800d20a:	2030      	movs	r0, #48	@ 0x30
 800d20c:	18e1      	adds	r1, r4, r3
 800d20e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d218:	4422      	add	r2, r4
 800d21a:	3302      	adds	r3, #2
 800d21c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d220:	e7c2      	b.n	800d1a8 <_printf_common+0x58>
 800d222:	2301      	movs	r3, #1
 800d224:	4622      	mov	r2, r4
 800d226:	4641      	mov	r1, r8
 800d228:	4638      	mov	r0, r7
 800d22a:	47c8      	blx	r9
 800d22c:	3001      	adds	r0, #1
 800d22e:	d0e6      	beq.n	800d1fe <_printf_common+0xae>
 800d230:	3601      	adds	r6, #1
 800d232:	e7d9      	b.n	800d1e8 <_printf_common+0x98>

0800d234 <_printf_i>:
 800d234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d238:	7e0f      	ldrb	r7, [r1, #24]
 800d23a:	4691      	mov	r9, r2
 800d23c:	2f78      	cmp	r7, #120	@ 0x78
 800d23e:	4680      	mov	r8, r0
 800d240:	460c      	mov	r4, r1
 800d242:	469a      	mov	sl, r3
 800d244:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d24a:	d807      	bhi.n	800d25c <_printf_i+0x28>
 800d24c:	2f62      	cmp	r7, #98	@ 0x62
 800d24e:	d80a      	bhi.n	800d266 <_printf_i+0x32>
 800d250:	2f00      	cmp	r7, #0
 800d252:	f000 80d3 	beq.w	800d3fc <_printf_i+0x1c8>
 800d256:	2f58      	cmp	r7, #88	@ 0x58
 800d258:	f000 80ba 	beq.w	800d3d0 <_printf_i+0x19c>
 800d25c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d264:	e03a      	b.n	800d2dc <_printf_i+0xa8>
 800d266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d26a:	2b15      	cmp	r3, #21
 800d26c:	d8f6      	bhi.n	800d25c <_printf_i+0x28>
 800d26e:	a101      	add	r1, pc, #4	@ (adr r1, 800d274 <_printf_i+0x40>)
 800d270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d274:	0800d2cd 	.word	0x0800d2cd
 800d278:	0800d2e1 	.word	0x0800d2e1
 800d27c:	0800d25d 	.word	0x0800d25d
 800d280:	0800d25d 	.word	0x0800d25d
 800d284:	0800d25d 	.word	0x0800d25d
 800d288:	0800d25d 	.word	0x0800d25d
 800d28c:	0800d2e1 	.word	0x0800d2e1
 800d290:	0800d25d 	.word	0x0800d25d
 800d294:	0800d25d 	.word	0x0800d25d
 800d298:	0800d25d 	.word	0x0800d25d
 800d29c:	0800d25d 	.word	0x0800d25d
 800d2a0:	0800d3e3 	.word	0x0800d3e3
 800d2a4:	0800d30b 	.word	0x0800d30b
 800d2a8:	0800d39d 	.word	0x0800d39d
 800d2ac:	0800d25d 	.word	0x0800d25d
 800d2b0:	0800d25d 	.word	0x0800d25d
 800d2b4:	0800d405 	.word	0x0800d405
 800d2b8:	0800d25d 	.word	0x0800d25d
 800d2bc:	0800d30b 	.word	0x0800d30b
 800d2c0:	0800d25d 	.word	0x0800d25d
 800d2c4:	0800d25d 	.word	0x0800d25d
 800d2c8:	0800d3a5 	.word	0x0800d3a5
 800d2cc:	6833      	ldr	r3, [r6, #0]
 800d2ce:	1d1a      	adds	r2, r3, #4
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	6032      	str	r2, [r6, #0]
 800d2d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e09e      	b.n	800d41e <_printf_i+0x1ea>
 800d2e0:	6833      	ldr	r3, [r6, #0]
 800d2e2:	6820      	ldr	r0, [r4, #0]
 800d2e4:	1d19      	adds	r1, r3, #4
 800d2e6:	6031      	str	r1, [r6, #0]
 800d2e8:	0606      	lsls	r6, r0, #24
 800d2ea:	d501      	bpl.n	800d2f0 <_printf_i+0xbc>
 800d2ec:	681d      	ldr	r5, [r3, #0]
 800d2ee:	e003      	b.n	800d2f8 <_printf_i+0xc4>
 800d2f0:	0645      	lsls	r5, r0, #25
 800d2f2:	d5fb      	bpl.n	800d2ec <_printf_i+0xb8>
 800d2f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d2f8:	2d00      	cmp	r5, #0
 800d2fa:	da03      	bge.n	800d304 <_printf_i+0xd0>
 800d2fc:	232d      	movs	r3, #45	@ 0x2d
 800d2fe:	426d      	negs	r5, r5
 800d300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d304:	230a      	movs	r3, #10
 800d306:	4859      	ldr	r0, [pc, #356]	@ (800d46c <_printf_i+0x238>)
 800d308:	e011      	b.n	800d32e <_printf_i+0xfa>
 800d30a:	6821      	ldr	r1, [r4, #0]
 800d30c:	6833      	ldr	r3, [r6, #0]
 800d30e:	0608      	lsls	r0, r1, #24
 800d310:	f853 5b04 	ldr.w	r5, [r3], #4
 800d314:	d402      	bmi.n	800d31c <_printf_i+0xe8>
 800d316:	0649      	lsls	r1, r1, #25
 800d318:	bf48      	it	mi
 800d31a:	b2ad      	uxthmi	r5, r5
 800d31c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d31e:	6033      	str	r3, [r6, #0]
 800d320:	bf14      	ite	ne
 800d322:	230a      	movne	r3, #10
 800d324:	2308      	moveq	r3, #8
 800d326:	4851      	ldr	r0, [pc, #324]	@ (800d46c <_printf_i+0x238>)
 800d328:	2100      	movs	r1, #0
 800d32a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d32e:	6866      	ldr	r6, [r4, #4]
 800d330:	2e00      	cmp	r6, #0
 800d332:	bfa8      	it	ge
 800d334:	6821      	ldrge	r1, [r4, #0]
 800d336:	60a6      	str	r6, [r4, #8]
 800d338:	bfa4      	itt	ge
 800d33a:	f021 0104 	bicge.w	r1, r1, #4
 800d33e:	6021      	strge	r1, [r4, #0]
 800d340:	b90d      	cbnz	r5, 800d346 <_printf_i+0x112>
 800d342:	2e00      	cmp	r6, #0
 800d344:	d04b      	beq.n	800d3de <_printf_i+0x1aa>
 800d346:	4616      	mov	r6, r2
 800d348:	fbb5 f1f3 	udiv	r1, r5, r3
 800d34c:	fb03 5711 	mls	r7, r3, r1, r5
 800d350:	5dc7      	ldrb	r7, [r0, r7]
 800d352:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d356:	462f      	mov	r7, r5
 800d358:	42bb      	cmp	r3, r7
 800d35a:	460d      	mov	r5, r1
 800d35c:	d9f4      	bls.n	800d348 <_printf_i+0x114>
 800d35e:	2b08      	cmp	r3, #8
 800d360:	d10b      	bne.n	800d37a <_printf_i+0x146>
 800d362:	6823      	ldr	r3, [r4, #0]
 800d364:	07df      	lsls	r7, r3, #31
 800d366:	d508      	bpl.n	800d37a <_printf_i+0x146>
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	6861      	ldr	r1, [r4, #4]
 800d36c:	4299      	cmp	r1, r3
 800d36e:	bfde      	ittt	le
 800d370:	2330      	movle	r3, #48	@ 0x30
 800d372:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d376:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d37a:	1b92      	subs	r2, r2, r6
 800d37c:	6122      	str	r2, [r4, #16]
 800d37e:	464b      	mov	r3, r9
 800d380:	4621      	mov	r1, r4
 800d382:	4640      	mov	r0, r8
 800d384:	f8cd a000 	str.w	sl, [sp]
 800d388:	aa03      	add	r2, sp, #12
 800d38a:	f7ff fee1 	bl	800d150 <_printf_common>
 800d38e:	3001      	adds	r0, #1
 800d390:	d14a      	bne.n	800d428 <_printf_i+0x1f4>
 800d392:	f04f 30ff 	mov.w	r0, #4294967295
 800d396:	b004      	add	sp, #16
 800d398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d39c:	6823      	ldr	r3, [r4, #0]
 800d39e:	f043 0320 	orr.w	r3, r3, #32
 800d3a2:	6023      	str	r3, [r4, #0]
 800d3a4:	2778      	movs	r7, #120	@ 0x78
 800d3a6:	4832      	ldr	r0, [pc, #200]	@ (800d470 <_printf_i+0x23c>)
 800d3a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3ac:	6823      	ldr	r3, [r4, #0]
 800d3ae:	6831      	ldr	r1, [r6, #0]
 800d3b0:	061f      	lsls	r7, r3, #24
 800d3b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d3b6:	d402      	bmi.n	800d3be <_printf_i+0x18a>
 800d3b8:	065f      	lsls	r7, r3, #25
 800d3ba:	bf48      	it	mi
 800d3bc:	b2ad      	uxthmi	r5, r5
 800d3be:	6031      	str	r1, [r6, #0]
 800d3c0:	07d9      	lsls	r1, r3, #31
 800d3c2:	bf44      	itt	mi
 800d3c4:	f043 0320 	orrmi.w	r3, r3, #32
 800d3c8:	6023      	strmi	r3, [r4, #0]
 800d3ca:	b11d      	cbz	r5, 800d3d4 <_printf_i+0x1a0>
 800d3cc:	2310      	movs	r3, #16
 800d3ce:	e7ab      	b.n	800d328 <_printf_i+0xf4>
 800d3d0:	4826      	ldr	r0, [pc, #152]	@ (800d46c <_printf_i+0x238>)
 800d3d2:	e7e9      	b.n	800d3a8 <_printf_i+0x174>
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	f023 0320 	bic.w	r3, r3, #32
 800d3da:	6023      	str	r3, [r4, #0]
 800d3dc:	e7f6      	b.n	800d3cc <_printf_i+0x198>
 800d3de:	4616      	mov	r6, r2
 800d3e0:	e7bd      	b.n	800d35e <_printf_i+0x12a>
 800d3e2:	6833      	ldr	r3, [r6, #0]
 800d3e4:	6825      	ldr	r5, [r4, #0]
 800d3e6:	1d18      	adds	r0, r3, #4
 800d3e8:	6961      	ldr	r1, [r4, #20]
 800d3ea:	6030      	str	r0, [r6, #0]
 800d3ec:	062e      	lsls	r6, r5, #24
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	d501      	bpl.n	800d3f6 <_printf_i+0x1c2>
 800d3f2:	6019      	str	r1, [r3, #0]
 800d3f4:	e002      	b.n	800d3fc <_printf_i+0x1c8>
 800d3f6:	0668      	lsls	r0, r5, #25
 800d3f8:	d5fb      	bpl.n	800d3f2 <_printf_i+0x1be>
 800d3fa:	8019      	strh	r1, [r3, #0]
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	4616      	mov	r6, r2
 800d400:	6123      	str	r3, [r4, #16]
 800d402:	e7bc      	b.n	800d37e <_printf_i+0x14a>
 800d404:	6833      	ldr	r3, [r6, #0]
 800d406:	2100      	movs	r1, #0
 800d408:	1d1a      	adds	r2, r3, #4
 800d40a:	6032      	str	r2, [r6, #0]
 800d40c:	681e      	ldr	r6, [r3, #0]
 800d40e:	6862      	ldr	r2, [r4, #4]
 800d410:	4630      	mov	r0, r6
 800d412:	f000 f859 	bl	800d4c8 <memchr>
 800d416:	b108      	cbz	r0, 800d41c <_printf_i+0x1e8>
 800d418:	1b80      	subs	r0, r0, r6
 800d41a:	6060      	str	r0, [r4, #4]
 800d41c:	6863      	ldr	r3, [r4, #4]
 800d41e:	6123      	str	r3, [r4, #16]
 800d420:	2300      	movs	r3, #0
 800d422:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d426:	e7aa      	b.n	800d37e <_printf_i+0x14a>
 800d428:	4632      	mov	r2, r6
 800d42a:	4649      	mov	r1, r9
 800d42c:	4640      	mov	r0, r8
 800d42e:	6923      	ldr	r3, [r4, #16]
 800d430:	47d0      	blx	sl
 800d432:	3001      	adds	r0, #1
 800d434:	d0ad      	beq.n	800d392 <_printf_i+0x15e>
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	079b      	lsls	r3, r3, #30
 800d43a:	d413      	bmi.n	800d464 <_printf_i+0x230>
 800d43c:	68e0      	ldr	r0, [r4, #12]
 800d43e:	9b03      	ldr	r3, [sp, #12]
 800d440:	4298      	cmp	r0, r3
 800d442:	bfb8      	it	lt
 800d444:	4618      	movlt	r0, r3
 800d446:	e7a6      	b.n	800d396 <_printf_i+0x162>
 800d448:	2301      	movs	r3, #1
 800d44a:	4632      	mov	r2, r6
 800d44c:	4649      	mov	r1, r9
 800d44e:	4640      	mov	r0, r8
 800d450:	47d0      	blx	sl
 800d452:	3001      	adds	r0, #1
 800d454:	d09d      	beq.n	800d392 <_printf_i+0x15e>
 800d456:	3501      	adds	r5, #1
 800d458:	68e3      	ldr	r3, [r4, #12]
 800d45a:	9903      	ldr	r1, [sp, #12]
 800d45c:	1a5b      	subs	r3, r3, r1
 800d45e:	42ab      	cmp	r3, r5
 800d460:	dcf2      	bgt.n	800d448 <_printf_i+0x214>
 800d462:	e7eb      	b.n	800d43c <_printf_i+0x208>
 800d464:	2500      	movs	r5, #0
 800d466:	f104 0619 	add.w	r6, r4, #25
 800d46a:	e7f5      	b.n	800d458 <_printf_i+0x224>
 800d46c:	0800de62 	.word	0x0800de62
 800d470:	0800de73 	.word	0x0800de73

0800d474 <memmove>:
 800d474:	4288      	cmp	r0, r1
 800d476:	b510      	push	{r4, lr}
 800d478:	eb01 0402 	add.w	r4, r1, r2
 800d47c:	d902      	bls.n	800d484 <memmove+0x10>
 800d47e:	4284      	cmp	r4, r0
 800d480:	4623      	mov	r3, r4
 800d482:	d807      	bhi.n	800d494 <memmove+0x20>
 800d484:	1e43      	subs	r3, r0, #1
 800d486:	42a1      	cmp	r1, r4
 800d488:	d008      	beq.n	800d49c <memmove+0x28>
 800d48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d492:	e7f8      	b.n	800d486 <memmove+0x12>
 800d494:	4601      	mov	r1, r0
 800d496:	4402      	add	r2, r0
 800d498:	428a      	cmp	r2, r1
 800d49a:	d100      	bne.n	800d49e <memmove+0x2a>
 800d49c:	bd10      	pop	{r4, pc}
 800d49e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4a6:	e7f7      	b.n	800d498 <memmove+0x24>

0800d4a8 <_sbrk_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	4d05      	ldr	r5, [pc, #20]	@ (800d4c4 <_sbrk_r+0x1c>)
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	602b      	str	r3, [r5, #0]
 800d4b4:	f7f6 fc00 	bl	8003cb8 <_sbrk>
 800d4b8:	1c43      	adds	r3, r0, #1
 800d4ba:	d102      	bne.n	800d4c2 <_sbrk_r+0x1a>
 800d4bc:	682b      	ldr	r3, [r5, #0]
 800d4be:	b103      	cbz	r3, 800d4c2 <_sbrk_r+0x1a>
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	bd38      	pop	{r3, r4, r5, pc}
 800d4c4:	20001714 	.word	0x20001714

0800d4c8 <memchr>:
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	b510      	push	{r4, lr}
 800d4cc:	b2c9      	uxtb	r1, r1
 800d4ce:	4402      	add	r2, r0
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	d101      	bne.n	800d4da <memchr+0x12>
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	e003      	b.n	800d4e2 <memchr+0x1a>
 800d4da:	7804      	ldrb	r4, [r0, #0]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	428c      	cmp	r4, r1
 800d4e0:	d1f6      	bne.n	800d4d0 <memchr+0x8>
 800d4e2:	bd10      	pop	{r4, pc}

0800d4e4 <_realloc_r>:
 800d4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e8:	4680      	mov	r8, r0
 800d4ea:	4615      	mov	r5, r2
 800d4ec:	460c      	mov	r4, r1
 800d4ee:	b921      	cbnz	r1, 800d4fa <_realloc_r+0x16>
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f6:	f7ff bc47 	b.w	800cd88 <_malloc_r>
 800d4fa:	b92a      	cbnz	r2, 800d508 <_realloc_r+0x24>
 800d4fc:	f7ff fbda 	bl	800ccb4 <_free_r>
 800d500:	2400      	movs	r4, #0
 800d502:	4620      	mov	r0, r4
 800d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d508:	f000 f81a 	bl	800d540 <_malloc_usable_size_r>
 800d50c:	4285      	cmp	r5, r0
 800d50e:	4606      	mov	r6, r0
 800d510:	d802      	bhi.n	800d518 <_realloc_r+0x34>
 800d512:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d516:	d8f4      	bhi.n	800d502 <_realloc_r+0x1e>
 800d518:	4629      	mov	r1, r5
 800d51a:	4640      	mov	r0, r8
 800d51c:	f7ff fc34 	bl	800cd88 <_malloc_r>
 800d520:	4607      	mov	r7, r0
 800d522:	2800      	cmp	r0, #0
 800d524:	d0ec      	beq.n	800d500 <_realloc_r+0x1c>
 800d526:	42b5      	cmp	r5, r6
 800d528:	462a      	mov	r2, r5
 800d52a:	4621      	mov	r1, r4
 800d52c:	bf28      	it	cs
 800d52e:	4632      	movcs	r2, r6
 800d530:	f7ff fbb2 	bl	800cc98 <memcpy>
 800d534:	4621      	mov	r1, r4
 800d536:	4640      	mov	r0, r8
 800d538:	f7ff fbbc 	bl	800ccb4 <_free_r>
 800d53c:	463c      	mov	r4, r7
 800d53e:	e7e0      	b.n	800d502 <_realloc_r+0x1e>

0800d540 <_malloc_usable_size_r>:
 800d540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d544:	1f18      	subs	r0, r3, #4
 800d546:	2b00      	cmp	r3, #0
 800d548:	bfbc      	itt	lt
 800d54a:	580b      	ldrlt	r3, [r1, r0]
 800d54c:	18c0      	addlt	r0, r0, r3
 800d54e:	4770      	bx	lr

0800d550 <_init>:
 800d550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d552:	bf00      	nop
 800d554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d556:	bc08      	pop	{r3}
 800d558:	469e      	mov	lr, r3
 800d55a:	4770      	bx	lr

0800d55c <_fini>:
 800d55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d55e:	bf00      	nop
 800d560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d562:	bc08      	pop	{r3}
 800d564:	469e      	mov	lr, r3
 800d566:	4770      	bx	lr

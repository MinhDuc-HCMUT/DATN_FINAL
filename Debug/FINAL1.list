
FINAL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d854  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  0800d960  0800d960  0000e960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3d8  0800e3d8  000101f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3d8  0800e3d8  0000f3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3e0  0800e3e0  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3e0  0800e3e0  0000f3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3e4  0800e3e4  0000f3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e3e8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  200001f8  0800e5dc  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800e5dc  00010724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa56  00000000  00000000  0001021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e9  00000000  00000000  0002ac73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  0002f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c2  00000000  00000000  00031040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c73b  00000000  00000000  00032502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000211d5  00000000  00000000  0004ec3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000949de  00000000  00000000  0006fe12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001047f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075c0  00000000  00000000  00104834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0010bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d948 	.word	0x0800d948

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800d948 	.word	0x0800d948

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f004 f8eb 	bl	8004348 <HAL_Delay>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b086      	sub	sp, #24
 800017e:	af02      	add	r7, sp, #8
 8000180:	6078      	str	r0, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	70fb      	strb	r3, [r7, #3]
 8000186:	4613      	mov	r3, r2
 8000188:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7adb      	ldrb	r3, [r3, #11]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d007      	beq.n	80001b0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001b0:	78bb      	ldrb	r3, [r7, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d108      	bne.n	80001c8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00a      	b.n	80001de <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001c8:	78bb      	ldrb	r3, [r7, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d107      	bne.n	80001de <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0301 	bic.w	r3, r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffb9 	bl	8000160 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffaf 	bl	8000160 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	4619      	mov	r1, r3
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2304      	movs	r3, #4
 800021c:	f004 fee0 	bl	8004fe0 <HAL_I2C_Master_Transmit>
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	460b      	mov	r3, r1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7e3a      	ldrb	r2, [r7, #24]
 8000254:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2228      	movs	r2, #40	@ 0x28
 800025a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2206      	movs	r2, #6
 8000260:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	220c      	movs	r2, #12
 8000266:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2214      	movs	r2, #20
 800026c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2208      	movs	r2, #8
 8000272:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000274:	2032      	movs	r0, #50	@ 0x32
 8000276:	f7ff ff73 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800027a:	2200      	movs	r2, #0
 800027c:	2133      	movs	r1, #51	@ 0x33
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f7ff ff7b 	bl	800017a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000284:	2200      	movs	r2, #0
 8000286:	2133      	movs	r1, #51	@ 0x33
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f7ff ff76 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff66 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2132      	movs	r1, #50	@ 0x32
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff6e 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff5e 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2120      	movs	r1, #32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff66 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff56 	bl	8000160 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	79db      	ldrb	r3, [r3, #7]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ff5c 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	7a1b      	ldrb	r3, [r3, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f7ff ff55 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff4e 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff47 	bl	800017a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff42 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f7ff ff3d 	bl	800017a <CLCD_WriteI2C>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
 8000314:	4613      	mov	r3, r2
 8000316:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000318:	2300      	movs	r3, #0
 800031a:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	78fa      	ldrb	r2, [r7, #3]
 8000322:	429a      	cmp	r2, r3
 8000324:	d303      	bcc.n	800032e <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	795b      	ldrb	r3, [r3, #5]
 800032a:	3b01      	subs	r3, #1
 800032c:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	799b      	ldrb	r3, [r3, #6]
 8000332:	78ba      	ldrb	r2, [r7, #2]
 8000334:	429a      	cmp	r2, r3
 8000336:	d303      	bcc.n	8000340 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	799b      	ldrb	r3, [r3, #6]
 800033c:	3b01      	subs	r3, #1
 800033e:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e013      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 800034c:	78bb      	ldrb	r3, [r7, #2]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d103      	bne.n	800035a <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8000352:	78fb      	ldrb	r3, [r7, #3]
 8000354:	3340      	adds	r3, #64	@ 0x40
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e00c      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800035a:	78bb      	ldrb	r3, [r7, #2]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d103      	bne.n	8000368 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	3314      	adds	r3, #20
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e005      	b.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	2b03      	cmp	r3, #3
 800036c:	d102      	bne.n	8000374 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	3354      	adds	r3, #84	@ 0x54
 8000372:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2200      	movs	r2, #0
 800037e:	4619      	mov	r1, r3
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff fefa 	bl	800017a <CLCD_WriteI2C>
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b082      	sub	sp, #8
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff feea 	bl	800017a <CLCD_WriteI2C>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b082      	sub	sp, #8
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80003b8:	e007      	b.n	80003ca <CLCD_I2C_WriteString+0x1c>
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	1c5a      	adds	r2, r3, #1
 80003be:	603a      	str	r2, [r7, #0]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	4619      	mov	r1, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffe2 	bl	800038e <CLCD_I2C_WriteChar>
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d1f3      	bne.n	80003ba <CLCD_I2C_WriteString+0xc>
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff fec6 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80003ee:	2005      	movs	r0, #5
 80003f0:	f7ff feb6 	bl	8000160 <CLCD_Delay>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <CLCD_I2C_Display>:
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}
void CLCD_I2C_Display(CLCD_I2C_Name* LCD, char *String1, char *String2)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	CLCD_I2C_Clear(LCD);
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f7ff ffe7 	bl	80003dc <CLCD_I2C_Clear>
	CLCD_I2C_SetCursor(LCD, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f7ff ff78 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String1);
 8000418:	68b9      	ldr	r1, [r7, #8]
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	f7ff ffc7 	bl	80003ae <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(LCD, 0, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	2100      	movs	r1, #0
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f7ff ff6f 	bl	8000308 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(LCD, String2);
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f7ff ffbe 	bl	80003ae <CLCD_I2C_WriteString>
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8000442:	4b2a      	ldr	r3, [pc, #168]	@ (80004ec <KeyPad_Init+0xb0>)
 8000444:	2204      	movs	r2, #4
 8000446:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000448:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <KeyPad_Init+0xb0>)
 800044a:	2204      	movs	r2, #4
 800044c:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	75fb      	strb	r3, [r7, #23]
 8000452:	e022      	b.n	800049a <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8000460:	7dfb      	ldrb	r3, [r7, #23]
 8000462:	4a23      	ldr	r2, [pc, #140]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000468:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 800046a:	7dfb      	ldrb	r3, [r7, #23]
 800046c:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <KeyPad_Init+0xb8>)
 800046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000472:	1d3a      	adds	r2, r7, #4
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f004 fa98 	bl	80049ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 800047c:	7dfb      	ldrb	r3, [r7, #23]
 800047e:	4a1d      	ldr	r2, [pc, #116]	@ (80004f4 <KeyPad_Init+0xb8>)
 8000480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	4a1a      	ldr	r2, [pc, #104]	@ (80004f0 <KeyPad_Init+0xb4>)
 8000488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	f004 fc27 	bl	8004ce2 <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	3301      	adds	r3, #1
 8000498:	75fb      	strb	r3, [r7, #23]
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <KeyPad_Init+0xb0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	7dfa      	ldrb	r2, [r7, #23]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d3d7      	bcc.n	8000454 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	75bb      	strb	r3, [r7, #22]
 80004a8:	e016      	b.n	80004d8 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
    gpio.Pull = GPIO_PULLUP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	613b      	str	r3, [r7, #16]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 80004b6:	7dbb      	ldrb	r3, [r7, #22]
 80004b8:	4a0f      	ldr	r2, [pc, #60]	@ (80004f8 <KeyPad_Init+0xbc>)
 80004ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004be:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);
 80004c0:	7dbb      	ldrb	r3, [r7, #22]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <KeyPad_Init+0xc0>)
 80004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f004 fa6d 	bl	80049ac <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 80004d2:	7dbb      	ldrb	r3, [r7, #22]
 80004d4:	3301      	adds	r3, #1
 80004d6:	75bb      	strb	r3, [r7, #22]
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <KeyPad_Init+0xb0>)
 80004da:	785b      	ldrb	r3, [r3, #1]
 80004dc:	7dba      	ldrb	r2, [r7, #22]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d3e3      	bcc.n	80004aa <KeyPad_Init+0x6e>
  }
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000214 	.word	0x20000214
 80004f0:	0800e37c 	.word	0x0800e37c
 80004f4:	20000000 	.word	0x20000000
 80004f8:	0800e384 	.word	0x0800e384
 80004fc:	20000010 	.word	0x20000010

08000500 <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8000506:	2300      	movs	r3, #0
 8000508:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	e07e      	b.n	800060e <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000510:	2300      	movs	r3, #0
 8000512:	71bb      	strb	r3, [r7, #6]
 8000514:	e00e      	b.n	8000534 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	4a42      	ldr	r2, [pc, #264]	@ (8000624 <KeyPad_Scan+0x124>)
 800051a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	4a41      	ldr	r2, [pc, #260]	@ (8000628 <KeyPad_Scan+0x128>)
 8000522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	f004 fbda 	bl	8004ce2 <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	3301      	adds	r3, #1
 8000532:	71bb      	strb	r3, [r7, #6]
 8000534:	4b3d      	ldr	r3, [pc, #244]	@ (800062c <KeyPad_Scan+0x12c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3eb      	bcc.n	8000516 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4a38      	ldr	r2, [pc, #224]	@ (8000624 <KeyPad_Scan+0x124>)
 8000542:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a37      	ldr	r2, [pc, #220]	@ (8000628 <KeyPad_Scan+0x128>)
 800054a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fbc6 	bl	8004ce2 <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000556:	2005      	movs	r0, #5
 8000558:	f003 fef6 	bl	8004348 <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 800055c:	2300      	movs	r3, #0
 800055e:	717b      	strb	r3, [r7, #5]
 8000560:	e04d      	b.n	80005fe <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	4a32      	ldr	r2, [pc, #200]	@ (8000630 <KeyPad_Scan+0x130>)
 8000566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	4931      	ldr	r1, [pc, #196]	@ (8000634 <KeyPad_Scan+0x134>)
 800056e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000572:	4619      	mov	r1, r3
 8000574:	4610      	mov	r0, r2
 8000576:	f004 fb9d 	bl	8004cb4 <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d13b      	bne.n	80005f8 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000580:	2014      	movs	r0, #20
 8000582:	f003 fee1 	bl	8004348 <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <KeyPad_Scan+0x130>)
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	797b      	ldrb	r3, [r7, #5]
 8000590:	4928      	ldr	r1, [pc, #160]	@ (8000634 <KeyPad_Scan+0x134>)
 8000592:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000596:	4619      	mov	r1, r3
 8000598:	4610      	mov	r0, r2
 800059a:	f004 fb8b 	bl	8004cb4 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d129      	bne.n	80005f8 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2201      	movs	r2, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	3308      	adds	r3, #8
 80005bc:	2201      	movs	r2, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b21b      	sxth	r3, r3
 80005cc:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005ce:	e002      	b.n	80005d6 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 80005d0:	2005      	movs	r0, #5
 80005d2:	f003 feb9 	bl	8004348 <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <KeyPad_Scan+0x130>)
 80005da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	4914      	ldr	r1, [pc, #80]	@ (8000634 <KeyPad_Scan+0x134>)
 80005e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4610      	mov	r0, r2
 80005ea:	f004 fb63 	bl	8004cb4 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0ed      	beq.n	80005d0 <KeyPad_Scan+0xd0>
          return key;
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	e011      	b.n	800061c <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	3301      	adds	r3, #1
 80005fc:	717b      	strb	r3, [r7, #5]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <KeyPad_Scan+0x12c>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	797a      	ldrb	r2, [r7, #5]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3ac      	bcc.n	8000562 <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3301      	adds	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <KeyPad_Scan+0x12c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	429a      	cmp	r2, r3
 8000616:	f4ff af7b 	bcc.w	8000510 <KeyPad_Scan+0x10>
        }
      }
    }
  }
  return key;
 800061a:	887b      	ldrh	r3, [r7, #2]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	0800e37c 	.word	0x0800e37c
 800062c:	20000214 	.word	0x20000214
 8000630:	20000010 	.word	0x20000010
 8000634:	0800e384 	.word	0x0800e384

08000638 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 8000640:	e00e      	b.n	8000660 <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 8000642:	f7ff ff5d 	bl	8000500 <KeyPad_Scan>
 8000646:	4603      	mov	r3, r0
 8000648:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 800064a:	897b      	ldrh	r3, [r7, #10]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 8000650:	4a16      	ldr	r2, [pc, #88]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000656:	897b      	ldrh	r3, [r7, #10]
 8000658:	e024      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 800065a:	2014      	movs	r0, #20
 800065c:	f003 fe74 	bl	8004348 <HAL_Delay>
  while(Timeout_ms==0)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0ed      	beq.n	8000642 <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000666:	f003 fe65 	bl	8004334 <HAL_GetTick>
 800066a:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800066c:	e00e      	b.n	800068c <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 800066e:	f7ff ff47 	bl	8000500 <KeyPad_Scan>
 8000672:	4603      	mov	r3, r0
 8000674:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000676:	897b      	ldrh	r3, [r7, #10]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d004      	beq.n	8000686 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 800067c:	4a0b      	ldr	r2, [pc, #44]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800067e:	897b      	ldrh	r3, [r7, #10]
 8000680:	8053      	strh	r3, [r2, #2]
			return keyRead;
 8000682:	897b      	ldrh	r3, [r7, #10]
 8000684:	e00e      	b.n	80006a4 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000686:	2014      	movs	r0, #20
 8000688:	f003 fe5e 	bl	8004348 <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 800068c:	f003 fe52 	bl	8004334 <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8e8      	bhi.n	800066e <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <KeyPad_WaitForKey+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	805a      	strh	r2, [r3, #2]
	return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000214 	.word	0x20000214

080006b0 <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffbd 	bl	8000638 <KeyPad_WaitForKey>
 80006be:	4603      	mov	r3, r0
 80006c0:	f640 0208 	movw	r2, #2056	@ 0x808
 80006c4:	4293      	cmp	r3, r2
 80006c6:	f300 809f 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ce:	dc1a      	bgt.n	8000706 <KeyPad_WaitForKeyGetChar+0x56>
 80006d0:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80006d4:	f300 8098 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006dc:	dc2a      	bgt.n	8000734 <KeyPad_WaitForKeyGetChar+0x84>
 80006de:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80006e2:	f300 8091 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006ea:	dc3b      	bgt.n	8000764 <KeyPad_WaitForKeyGetChar+0xb4>
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d069      	beq.n	80007c4 <KeyPad_WaitForKeyGetChar+0x114>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f2c0 8089 	blt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006f6:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80006fa:	f300 8085 	bgt.w	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 80006fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000702:	dc47      	bgt.n	8000794 <KeyPad_WaitForKeyGetChar+0xe4>
 8000704:	e080      	b.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 8000706:	f6a3 0301 	subw	r3, r3, #2049	@ 0x801
 800070a:	2b07      	cmp	r3, #7
 800070c:	d87c      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800070e:	a201      	add	r2, pc, #4	@ (adr r2, 8000714 <KeyPad_WaitForKeyGetChar+0x64>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	080007d5 	.word	0x080007d5
 8000718:	080007e5 	.word	0x080007e5
 800071c:	08000809 	.word	0x08000809
 8000720:	080007f5 	.word	0x080007f5
 8000724:	08000809 	.word	0x08000809
 8000728:	08000809 	.word	0x08000809
 800072c:	08000809 	.word	0x08000809
 8000730:	08000805 	.word	0x08000805
 8000734:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8000738:	2b07      	cmp	r3, #7
 800073a:	d865      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800073c:	a201      	add	r2, pc, #4	@ (adr r2, 8000744 <KeyPad_WaitForKeyGetChar+0x94>)
 800073e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000742:	bf00      	nop
 8000744:	080007d1 	.word	0x080007d1
 8000748:	080007e1 	.word	0x080007e1
 800074c:	08000809 	.word	0x08000809
 8000750:	080007f1 	.word	0x080007f1
 8000754:	08000809 	.word	0x08000809
 8000758:	08000809 	.word	0x08000809
 800075c:	08000809 	.word	0x08000809
 8000760:	08000801 	.word	0x08000801
 8000764:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000768:	2b07      	cmp	r3, #7
 800076a:	d84d      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800076c:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <KeyPad_WaitForKeyGetChar+0xc4>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	080007cd 	.word	0x080007cd
 8000778:	080007dd 	.word	0x080007dd
 800077c:	08000809 	.word	0x08000809
 8000780:	080007ed 	.word	0x080007ed
 8000784:	08000809 	.word	0x08000809
 8000788:	08000809 	.word	0x08000809
 800078c:	08000809 	.word	0x08000809
 8000790:	080007fd 	.word	0x080007fd
 8000794:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000798:	2b07      	cmp	r3, #7
 800079a:	d835      	bhi.n	8000808 <KeyPad_WaitForKeyGetChar+0x158>
 800079c:	a201      	add	r2, pc, #4	@ (adr r2, 80007a4 <KeyPad_WaitForKeyGetChar+0xf4>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007c9 	.word	0x080007c9
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	08000809 	.word	0x08000809
 80007b0:	080007e9 	.word	0x080007e9
 80007b4:	08000809 	.word	0x08000809
 80007b8:	08000809 	.word	0x08000809
 80007bc:	08000809 	.word	0x08000809
 80007c0:	080007f9 	.word	0x080007f9
  {
    case 0x0000:
      return 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	e020      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 80007c8:	2331      	movs	r3, #49	@ 0x31
 80007ca:	e01e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 80007cc:	2332      	movs	r3, #50	@ 0x32
 80007ce:	e01c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 80007d0:	2333      	movs	r3, #51	@ 0x33
 80007d2:	e01a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 80007d4:	2341      	movs	r3, #65	@ 0x41
 80007d6:	e018      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 80007d8:	2334      	movs	r3, #52	@ 0x34
 80007da:	e016      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 80007dc:	2335      	movs	r3, #53	@ 0x35
 80007de:	e014      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 80007e0:	2336      	movs	r3, #54	@ 0x36
 80007e2:	e012      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 80007e4:	2342      	movs	r3, #66	@ 0x42
 80007e6:	e010      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 80007e8:	2337      	movs	r3, #55	@ 0x37
 80007ea:	e00e      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';
 80007ec:	2338      	movs	r3, #56	@ 0x38
 80007ee:	e00c      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 80007f0:	2339      	movs	r3, #57	@ 0x39
 80007f2:	e00a      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 80007f4:	2343      	movs	r3, #67	@ 0x43
 80007f6:	e008      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';
 80007f8:	232a      	movs	r3, #42	@ 0x2a
 80007fa:	e006      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';
 80007fc:	2330      	movs	r3, #48	@ 0x30
 80007fe:	e004      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 8000800:	2323      	movs	r3, #35	@ 0x23
 8000802:	e002      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8000804:	2344      	movs	r3, #68	@ 0x44
 8000806:	e000      	b.n	800080a <KeyPad_WaitForKeyGetChar+0x15a>

		default:
			return 0;
 8000808:	2300      	movs	r3, #0
	}
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop

08000814 <USART_SendByte>:
/*****************************************************************************/
uint8_t pID;
extern UART_HandleTypeDef huart1;
/*****************************************************************************/
void USART_SendByte (uint8_t	byte)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&byte,1,500);
 800081e:	1df9      	adds	r1, r7, #7
 8000820:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000824:	2201      	movs	r2, #1
 8000826:	4803      	ldr	r0, [pc, #12]	@ (8000834 <USART_SendByte+0x20>)
 8000828:	f007 fe51 	bl	80084ce <HAL_UART_Transmit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000310 	.word	0x20000310

08000838 <receive_finger>:
uint8_t receive_finger(uint8_t len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[13];
	while((HAL_UART_Receive(&huart1,D,len,1000))==HAL_OK);
 8000842:	bf00      	nop
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 0108 	add.w	r1, r7, #8
 800084c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <receive_finger+0x3c>)
 8000852:	f007 fece 	bl	80085f2 <HAL_UART_Receive>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f3      	beq.n	8000844 <receive_finger+0xc>
	//HAL_UART_Receive(&huart1,D,len,500);
	p=D[len-3];
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3b03      	subs	r3, #3
 8000860:	3318      	adds	r3, #24
 8000862:	443b      	add	r3, r7
 8000864:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000868:	75fb      	strb	r3, [r7, #23]
	return p;
 800086a:	7dfb      	ldrb	r3, [r7, #23]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000310 	.word	0x20000310

08000878 <receive_finger_match>:
uint8_t receive_finger_match(uint8_t len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[15];
//	while((HAL_UART_Receive(&huart1,D,len,500))==HAL_OK);
	HAL_UART_Receive(&huart1,D,len,1000);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	b29a      	uxth	r2, r3
 8000886:	f107 0108 	add.w	r1, r7, #8
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	4807      	ldr	r0, [pc, #28]	@ (80008ac <receive_finger_match+0x34>)
 8000890:	f007 feaf 	bl	80085f2 <HAL_UART_Receive>
	p=D[len-5];
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	3b05      	subs	r3, #5
 8000898:	3318      	adds	r3, #24
 800089a:	443b      	add	r3, r7
 800089c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008a0:	75fb      	strb	r3, [r7, #23]
	return p;
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000310 	.word	0x20000310

080008b0 <receive_finger_search>:
uint8_t receive_finger_search(uint8_t len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	uint8_t p,D[17];
//	while((HAL_UART_Receive(&huart1,D,len,500))==HAL_OK);
	HAL_UART_Receive(&huart1,D,len,200);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 010c 	add.w	r1, r7, #12
 80008c2:	23c8      	movs	r3, #200	@ 0xc8
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <receive_finger_search+0x38>)
 80008c6:	f007 fe94 	bl	80085f2 <HAL_UART_Receive>
	p=D[len-7];
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b07      	subs	r3, #7
 80008ce:	3320      	adds	r3, #32
 80008d0:	443b      	add	r3, r7
 80008d2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008d6:	77fb      	strb	r3, [r7, #31]
	pID = D[11];
 80008d8:	7dfa      	ldrb	r2, [r7, #23]
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <receive_finger_search+0x3c>)
 80008dc:	701a      	strb	r2, [r3, #0]

	return p;
 80008de:	7ffb      	ldrb	r3, [r7, #31]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000310 	.word	0x20000310
 80008ec:	20000218 	.word	0x20000218

080008f0 <collect_finger>:
int collect_finger(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 80008f4:	20ef      	movs	r0, #239	@ 0xef
 80008f6:	f7ff ff8d 	bl	8000814 <USART_SendByte>
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ff8a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000900:	20ff      	movs	r0, #255	@ 0xff
 8000902:	f7ff ff87 	bl	8000814 <USART_SendByte>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	f7ff ff84 	bl	8000814 <USART_SendByte>
 800090c:	20ff      	movs	r0, #255	@ 0xff
 800090e:	f7ff ff81 	bl	8000814 <USART_SendByte>
 8000912:	20ff      	movs	r0, #255	@ 0xff
 8000914:	f7ff ff7e 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff ff7b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff78 	bl	8000814 <USART_SendByte>
 8000924:	2003      	movs	r0, #3
 8000926:	f7ff ff75 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff ff72 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x05);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff6f 	bl	8000814 <USART_SendByte>
 8000936:	2005      	movs	r0, #5
 8000938:	f7ff ff6c 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 800093c:	200c      	movs	r0, #12
 800093e:	f7ff ff7b 	bl	8000838 <receive_finger>
 8000942:	4603      	mov	r3, r0
}
 8000944:	4618      	mov	r0, r3
 8000946:	bd80      	pop	{r7, pc}

08000948 <img2tz>:
int img2tz(uint8_t local)
{//ghi du lieu van tay vao bo nho dem local(local co the la: 0x01 vung 1, 0x02 vung 2)
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  int  sum = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
   sum = local + 0x07;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	3307      	adds	r3, #7
 800095a:	60fb      	str	r3, [r7, #12]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 800095c:	20ef      	movs	r0, #239	@ 0xef
 800095e:	f7ff ff59 	bl	8000814 <USART_SendByte>
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff ff56 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000968:	20ff      	movs	r0, #255	@ 0xff
 800096a:	f7ff ff53 	bl	8000814 <USART_SendByte>
 800096e:	20ff      	movs	r0, #255	@ 0xff
 8000970:	f7ff ff50 	bl	8000814 <USART_SendByte>
 8000974:	20ff      	movs	r0, #255	@ 0xff
 8000976:	f7ff ff4d 	bl	8000814 <USART_SendByte>
 800097a:	20ff      	movs	r0, #255	@ 0xff
 800097c:	f7ff ff4a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff ff47 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x04);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff44 	bl	8000814 <USART_SendByte>
 800098c:	2004      	movs	r0, #4
 800098e:	f7ff ff41 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x02);
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff ff3e 	bl	8000814 <USART_SendByte>
   USART_SendByte(local);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff3a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff37 	bl	8000814 <USART_SendByte>
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff32 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 80009b0:	200c      	movs	r0, #12
 80009b2:	f7ff ff41 	bl	8000838 <receive_finger>
 80009b6:	4603      	mov	r3, r0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <match>:
int match(void)
{//so s�nh 2 bo dem ve trung khop van tay
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

   USART_SendByte(0xEF);USART_SendByte(0x01);
 80009c4:	20ef      	movs	r0, #239	@ 0xef
 80009c6:	f7ff ff25 	bl	8000814 <USART_SendByte>
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff ff22 	bl	8000814 <USART_SendByte>
   USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 80009d0:	20ff      	movs	r0, #255	@ 0xff
 80009d2:	f7ff ff1f 	bl	8000814 <USART_SendByte>
 80009d6:	20ff      	movs	r0, #255	@ 0xff
 80009d8:	f7ff ff1c 	bl	8000814 <USART_SendByte>
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	f7ff ff19 	bl	8000814 <USART_SendByte>
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	f7ff ff16 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ff13 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff ff10 	bl	8000814 <USART_SendByte>
 80009f4:	2003      	movs	r0, #3
 80009f6:	f7ff ff0d 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x03);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff ff0a 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x07);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ff07 	bl	8000814 <USART_SendByte>
 8000a06:	2007      	movs	r0, #7
 8000a08:	f7ff ff04 	bl	8000814 <USART_SendByte>
   return receive_finger_match(14);
 8000a0c:	200e      	movs	r0, #14
 8000a0e:	f7ff ff33 	bl	8000878 <receive_finger_match>
 8000a12:	4603      	mov	r3, r0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <regmodel>:
int regmodel(void)
{//tao ma van tay chuan tu 2 bo dem
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a1c:	20ef      	movs	r0, #239	@ 0xef
 8000a1e:	f7ff fef9 	bl	8000814 <USART_SendByte>
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fef6 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a28:	20ff      	movs	r0, #255	@ 0xff
 8000a2a:	f7ff fef3 	bl	8000814 <USART_SendByte>
 8000a2e:	20ff      	movs	r0, #255	@ 0xff
 8000a30:	f7ff fef0 	bl	8000814 <USART_SendByte>
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	f7ff feed 	bl	8000814 <USART_SendByte>
 8000a3a:	20ff      	movs	r0, #255	@ 0xff
 8000a3c:	f7ff feea 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fee7 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x03);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fee4 	bl	8000814 <USART_SendByte>
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f7ff fee1 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x05);
 8000a52:	2005      	movs	r0, #5
 8000a54:	f7ff fede 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x09);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fedb 	bl	8000814 <USART_SendByte>
 8000a5e:	2009      	movs	r0, #9
 8000a60:	f7ff fed8 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000a64:	200c      	movs	r0, #12
 8000a66:	f7ff fee7 	bl	8000838 <receive_finger>
 8000a6a:	4603      	mov	r3, r0
   //if (tmp==0x00){
   //LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)"da lay mau",0x001F ,YELLOW);DELAY_MS(2500000);}
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <store>:
int store(uint8_t ID)
{// luu ma van tay chuan vao flash
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
//	int D[20];
   uint8_t sum1;
 //  for(i=0;i<20;i++) D[i]=0xDD;
   sum1= 0x0E + ID;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	330e      	adds	r3, #14
 8000a7e:	73fb      	strb	r3, [r7, #15]
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000a80:	20ef      	movs	r0, #239	@ 0xef
 8000a82:	f7ff fec7 	bl	8000814 <USART_SendByte>
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fec4 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000a8c:	20ff      	movs	r0, #255	@ 0xff
 8000a8e:	f7ff fec1 	bl	8000814 <USART_SendByte>
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	f7ff febe 	bl	8000814 <USART_SendByte>
 8000a98:	20ff      	movs	r0, #255	@ 0xff
 8000a9a:	f7ff febb 	bl	8000814 <USART_SendByte>
 8000a9e:	20ff      	movs	r0, #255	@ 0xff
 8000aa0:	f7ff feb8 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff feb5 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x06);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff feb2 	bl	8000814 <USART_SendByte>
 8000ab0:	2006      	movs	r0, #6
 8000ab2:	f7ff feaf 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x06);
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	f7ff feac 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fea9 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(ID);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fea6 	bl	8000814 <USART_SendByte>
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fea2 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(sum1);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fe9f 	bl	8000814 <USART_SendByte>
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe9b 	bl	8000814 <USART_SendByte>
   return receive_finger(12);
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f7ff feaa 	bl	8000838 <receive_finger>
 8000ae4:	4603      	mov	r3, r0
//    {
//      LCD_Clear(YELLOW);LCD_ShowString(80,80,(unsigned char*)
//       "da luu",0x001F ,YELLOW);
//      DELAY_MS(500);
//    }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <search>:
int search(void)
{//l�i ma van tay chua tu flash ra de so sanh voi van tay vua nhan tren bo dem
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
   USART_SendByte(0xEF);USART_SendByte(0x01);
 8000af2:	20ef      	movs	r0, #239	@ 0xef
 8000af4:	f7ff fe8e 	bl	8000814 <USART_SendByte>
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fe8b 	bl	8000814 <USART_SendByte>
   USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);USART_SendByte(0XFF);
 8000afe:	20ff      	movs	r0, #255	@ 0xff
 8000b00:	f7ff fe88 	bl	8000814 <USART_SendByte>
 8000b04:	20ff      	movs	r0, #255	@ 0xff
 8000b06:	f7ff fe85 	bl	8000814 <USART_SendByte>
 8000b0a:	20ff      	movs	r0, #255	@ 0xff
 8000b0c:	f7ff fe82 	bl	8000814 <USART_SendByte>
 8000b10:	20ff      	movs	r0, #255	@ 0xff
 8000b12:	f7ff fe7f 	bl	8000814 <USART_SendByte>
	// kiem tra check sum tu day
   USART_SendByte(0x01);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fe7c 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x08);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe79 	bl	8000814 <USART_SendByte>
 8000b22:	2008      	movs	r0, #8
 8000b24:	f7ff fe76 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x04);
 8000b28:	2004      	movs	r0, #4
 8000b2a:	f7ff fe73 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x01);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe70 	bl	8000814 <USART_SendByte>
   USART_SendByte(0x00);USART_SendByte(0x00);// dia chi bat dau
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe6d 	bl	8000814 <USART_SendByte>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe6a 	bl	8000814 <USART_SendByte>
////   USART_SendByte(0x00);USART_SendByte(0xFF);
	USART_SendByte(0x00);USART_SendByte(0xff);// dia chi ket thuc
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fe67 	bl	8000814 <USART_SendByte>
 8000b46:	20ff      	movs	r0, #255	@ 0xff
 8000b48:	f7ff fe64 	bl	8000814 <USART_SendByte>
	//ket thuc kt ch�chum
//  USART_SendByte(0x00);USART_SendByte(0x0F);// ma check sum dc tinh
		USART_SendByte(0x01);USART_SendByte(0x0D);// ma check sum dc tinh
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fe61 	bl	8000814 <USART_SendByte>
 8000b52:	200d      	movs	r0, #13
 8000b54:	f7ff fe5e 	bl	8000814 <USART_SendByte>
   return receive_finger_search(16);
 8000b58:	2010      	movs	r0, #16
 8000b5a:	f7ff fea9 	bl	80008b0 <receive_finger_search>
 8000b5e:	4603      	mov	r3, r0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <del>:
   USART_SendByte(0x00);USART_SendByte(0x11);
   return receive_finger(12);

}
int del(uint8_t id)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	uint8_t sum1;
    sum1 = 0x15 + id;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	3315      	adds	r3, #21
 8000b72:	73fb      	strb	r3, [r7, #15]
    USART_SendByte(0xEF);USART_SendByte(0x01);
 8000b74:	20ef      	movs	r0, #239	@ 0xef
 8000b76:	f7ff fe4d 	bl	8000814 <USART_SendByte>
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff fe4a 	bl	8000814 <USART_SendByte>
    USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);USART_SendByte(0xFF);
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	f7ff fe47 	bl	8000814 <USART_SendByte>
 8000b86:	20ff      	movs	r0, #255	@ 0xff
 8000b88:	f7ff fe44 	bl	8000814 <USART_SendByte>
 8000b8c:	20ff      	movs	r0, #255	@ 0xff
 8000b8e:	f7ff fe41 	bl	8000814 <USART_SendByte>
 8000b92:	20ff      	movs	r0, #255	@ 0xff
 8000b94:	f7ff fe3e 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x01);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff fe3b 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x07);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fe38 	bl	8000814 <USART_SendByte>
 8000ba4:	2007      	movs	r0, #7
 8000ba6:	f7ff fe35 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x0C);
 8000baa:	200c      	movs	r0, #12
 8000bac:	f7ff fe32 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(id);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fe2f 	bl	8000814 <USART_SendByte>
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fe2b 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(0x01);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fe28 	bl	8000814 <USART_SendByte>
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff fe25 	bl	8000814 <USART_SendByte>
    USART_SendByte(0x00);USART_SendByte(sum1);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff fe22 	bl	8000814 <USART_SendByte>
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fe1e 	bl	8000814 <USART_SendByte>
    return receive_finger(12);
 8000bd8:	200c      	movs	r0, #12
 8000bda:	f7ff fe2d 	bl	8000838 <receive_finger>
 8000bde:	4603      	mov	r3, r0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <delete_finger>:

uint8_t delete_finger(uint8_t id)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
    return del(id);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffb5 	bl	8000b64 <del>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b2db      	uxtb	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <Flash_Erase>:
 */


#include <flash.h>

void Flash_Erase(uint32_t address){
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b088      	sub	sp, #32
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000c0e:	f003 fd3d 	bl	800468c <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000c22:	f107 020c 	add.w	r2, r7, #12
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 fe15 	bl	800485c <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000c32:	f003 fd51 	bl	80046d8 <HAL_FLASH_Lock>
}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000c3e:	b5b0      	push	{r4, r5, r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000c4a:	f003 fd1f 	bl	800468c <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	2200      	movs	r2, #0
 8000c52:	461c      	mov	r4, r3
 8000c54:	4615      	mov	r5, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	462b      	mov	r3, r5
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f003 fca5 	bl	80045ac <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000c62:	f003 fd39 	bl	80046d8 <HAL_FLASH_Lock>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bdb0      	pop	{r4, r5, r7, pc}

08000c6e <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000c7c:	f003 fd06 	bl	800468c <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000c80:	2300      	movs	r3, #0
 8000c82:	82fb      	strh	r3, [r7, #22]
 8000c84:	e00c      	b.n	8000ca0 <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 8000c86:	8afa      	ldrh	r2, [r7, #22]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	18d0      	adds	r0, r2, r3
 8000c8c:	8afb      	ldrh	r3, [r7, #22]
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	4413      	add	r3, r2
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f7ff ffd2 	bl	8000c3e <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 8000c9a:	8afb      	ldrh	r3, [r7, #22]
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	82fb      	strh	r3, [r7, #22]
 8000ca0:	8afa      	ldrh	r2, [r7, #22]
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3ee      	bcc.n	8000c86 <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 8000ca8:	f003 fd16 	bl	80046d8 <HAL_FLASH_Lock>
}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b29b      	uxth	r3, r3
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000cfe:	b480      	push	{r7}
 8000d00:	b087      	sub	sp, #28
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	82fb      	strh	r3, [r7, #22]
 8000d10:	e00c      	b.n	8000d2c <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000d12:	8afa      	ldrh	r2, [r7, #22]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	8afb      	ldrh	r3, [r7, #22]
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	4413      	add	r3, r2
 8000d20:	780a      	ldrb	r2, [r1, #0]
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 8000d26:	8afb      	ldrh	r3, [r7, #22]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	82fb      	strh	r3, [r7, #22]
 8000d2c:	8afa      	ldrh	r2, [r7, #22]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3ee      	bcc.n	8000d12 <Flash_Read_Array+0x14>
	}
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	371c      	adds	r7, #28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	if(exitmenu > 0)
 8000d48:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0x1e>
		exitmenu --;
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d5a:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000d5c:	e002      	b.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x24>
	else exitmenu = 0;
 8000d5e:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000020 	.word	0x20000020

08000d74 <check_fingerprint_status>:
void check_fingerprint_status()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
    uint8_t status = collect_finger(); // Hàm kiểm tra trạng thái vân tay
 8000d7a:	f7ff fdb9 	bl	80008f0 <collect_finger>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
    if (status == 0x00) // Nếu phát hiện vân tay
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <check_fingerprint_status+0x1a>
    {
        fingerprint_detected = 1; // �?ặt c�? báo hiệu
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <check_fingerprint_status+0x24>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
    }
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000409 	.word	0x20000409

08000d9c <process_fingerprint>:
void process_fingerprint()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    if (fingerprint_detected) // Nếu có vân tay
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <process_fingerprint+0x1c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <process_fingerprint+0x16>
    {
        fingerprint_detected = 0; // Xóa c�?
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <process_fingerprint+0x1c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
        read_finger(); // G�?i hàm xử lý vân tay
 8000dae:	f002 fb97 	bl	80034e0 <read_finger>
    }
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000409 	.word	0x20000409

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b090      	sub	sp, #64	@ 0x40
 8000dc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f003 fa5f 	bl	8004284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f989 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f000 fabf 	bl	800134c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dce:	f000 fa0f 	bl	80011f0 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000dd2:	f000 f9df 	bl	8001194 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000dd6:	f000 fa8f 	bl	80012f8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000dda:	f000 fa3f 	bl	800125c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000dde:	f00b fc25 	bl	800c62c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000de2:	f002 fdf5 	bl	80039d0 <TM_MFRC522_Init>
  KeyPad_Init();
 8000de6:	f7ff fb29 	bl	800043c <KeyPad_Init>
  CLCD_I2C_Init(&LCD1, &hi2c2, 0x4E, 16, 2);
 8000dea:	2302      	movs	r3, #2
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2310      	movs	r3, #16
 8000df0:	224e      	movs	r2, #78	@ 0x4e
 8000df2:	49a9      	ldr	r1, [pc, #676]	@ (8001098 <main+0x2dc>)
 8000df4:	48a9      	ldr	r0, [pc, #676]	@ (800109c <main+0x2e0>)
 8000df6:	f7ff fa17 	bl	8000228 <CLCD_I2C_Init>

  // Check if the password is set, if not, set the default password
  char stored_password[7] = {0};
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2100      	movs	r1, #0
 8000e04:	460a      	mov	r2, r1
 8000e06:	801a      	strh	r2, [r3, #0]
 8000e08:	460a      	mov	r2, r1
 8000e0a:	709a      	strb	r2, [r3, #2]
  Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	2206      	movs	r2, #6
 8000e12:	4619      	mov	r1, r3
 8000e14:	48a2      	ldr	r0, [pc, #648]	@ (80010a0 <main+0x2e4>)
 8000e16:	f7ff ff72 	bl	8000cfe <Flash_Read_Array>
  stored_password[6] = '\0';
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	77bb      	strb	r3, [r7, #30]
  int is_empty = 1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	637b      	str	r3, [r7, #52]	@ 0x34
  for (int i = 0; i < 6; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e26:	e00c      	b.n	8000e42 <main+0x86>
      if (stored_password[i] != (char)0xFF) {
 8000e28:	f107 0218 	add.w	r2, r7, #24
 8000e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e2e:	4413      	add	r3, r2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2bff      	cmp	r3, #255	@ 0xff
 8000e34:	d002      	beq.n	8000e3c <main+0x80>
          is_empty = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8000e3a:	e005      	b.n	8000e48 <main+0x8c>
  for (int i = 0; i < 6; i++) {
 8000e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e3e:	3301      	adds	r3, #1
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	ddef      	ble.n	8000e28 <main+0x6c>
      }
  }
  if (is_empty) {
 8000e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <main+0x96>
      set_default_password();
 8000e4e:	f002 fd61 	bl	8003914 <set_default_password>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e52:	4894      	ldr	r0, [pc, #592]	@ (80010a4 <main+0x2e8>)
 8000e54:	f006 ff44 	bl	8007ce0 <HAL_TIM_Base_Start_IT>
  if (checkcountUID() == 0)
 8000e58:	f001 fef4 	bl	8002c44 <checkcountUID>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <main+0xaa>
  {
      startadd();
 8000e62:	f002 f87b 	bl	8002f5c <startadd>
  }
  int incorrect_attempts = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    CLCD_I2C_Clear(&LCD1);
 8000e6a:	488c      	ldr	r0, [pc, #560]	@ (800109c <main+0x2e0>)
 8000e6c:	f7ff fab6 	bl	80003dc <CLCD_I2C_Clear>
    CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	4889      	ldr	r0, [pc, #548]	@ (800109c <main+0x2e0>)
 8000e76:	f7ff fa47 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteString(&LCD1, " SCAN YOUR CARD");
 8000e7a:	498b      	ldr	r1, [pc, #556]	@ (80010a8 <main+0x2ec>)
 8000e7c:	4887      	ldr	r0, [pc, #540]	@ (800109c <main+0x2e0>)
 8000e7e:	f7ff fa96 	bl	80003ae <CLCD_I2C_WriteString>

    char selected_key = KeyPad_WaitForKeyGetChar(10); // Chờ vô hạn cho đến khi có phím nhấn.
 8000e82:	200a      	movs	r0, #10
 8000e84:	f7ff fc14 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    if (selected_key == '#')
 8000e8e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000e92:	2b23      	cmp	r3, #35	@ 0x23
 8000e94:	d15e      	bne.n	8000f54 <main+0x198>
    {
        char entered_password[7] = {0};
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	801a      	strh	r2, [r3, #0]
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	709a      	strb	r2, [r3, #2]
        CLCD_I2C_Display(&LCD1, "ENTER PASSWORD", "");
 8000ea8:	4a80      	ldr	r2, [pc, #512]	@ (80010ac <main+0x2f0>)
 8000eaa:	4981      	ldr	r1, [pc, #516]	@ (80010b0 <main+0x2f4>)
 8000eac:	487b      	ldr	r0, [pc, #492]	@ (800109c <main+0x2e0>)
 8000eae:	f7ff faa5 	bl	80003fc <CLCD_I2C_Display>
        enter_password(entered_password);
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fc9c 	bl	80037f4 <enter_password>
        if (check_password(entered_password)) {
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fcff 	bl	80038c4 <check_password>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d007      	beq.n	8000edc <main+0x120>
            CLCD_I2C_Display(&LCD1, "    WELCOME", "");
 8000ecc:	4a77      	ldr	r2, [pc, #476]	@ (80010ac <main+0x2f0>)
 8000ece:	4979      	ldr	r1, [pc, #484]	@ (80010b4 <main+0x2f8>)
 8000ed0:	4872      	ldr	r0, [pc, #456]	@ (800109c <main+0x2e0>)
 8000ed2:	f7ff fa93 	bl	80003fc <CLCD_I2C_Display>
            incorrect_attempts = 0; // Reset incorrect attempts on successful login
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eda:	e033      	b.n	8000f44 <main+0x188>
        } else {
            incorrect_attempts++;
 8000edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ede:	3301      	adds	r3, #1
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            CLCD_I2C_Display(&LCD1, "WRONG PASSWORD", "");
 8000ee2:	4a72      	ldr	r2, [pc, #456]	@ (80010ac <main+0x2f0>)
 8000ee4:	4974      	ldr	r1, [pc, #464]	@ (80010b8 <main+0x2fc>)
 8000ee6:	486d      	ldr	r0, [pc, #436]	@ (800109c <main+0x2e0>)
 8000ee8:	f7ff fa88 	bl	80003fc <CLCD_I2C_Display>
            int delay_time = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (incorrect_attempts == 1) {
 8000ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d102      	bne.n	8000efc <main+0x140>
                delay_time = 5;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000efa:	e00a      	b.n	8000f12 <main+0x156>
            } else if (incorrect_attempts == 2) {
 8000efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d102      	bne.n	8000f08 <main+0x14c>
                delay_time = 10;
 8000f02:	230a      	movs	r3, #10
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f06:	e004      	b.n	8000f12 <main+0x156>
            } else if (incorrect_attempts >= 3) {
 8000f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	dd01      	ble.n	8000f12 <main+0x156>
                delay_time = 20;
 8000f0e:	2314      	movs	r3, #20
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            for (int i = delay_time; i > 0; i--) {
 8000f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f16:	e012      	b.n	8000f3e <main+0x182>
                char buffer[16];
                snprintf(buffer, sizeof(buffer), "     WAIT %ds", i);
 8000f18:	4638      	mov	r0, r7
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	4a67      	ldr	r2, [pc, #412]	@ (80010bc <main+0x300>)
 8000f1e:	2110      	movs	r1, #16
 8000f20:	f00c f82e 	bl	800cf80 <sniprintf>
                CLCD_I2C_Display(&LCD1, buffer, "  TO TRY AGAIN");
 8000f24:	463b      	mov	r3, r7
 8000f26:	4a66      	ldr	r2, [pc, #408]	@ (80010c0 <main+0x304>)
 8000f28:	4619      	mov	r1, r3
 8000f2a:	485c      	ldr	r0, [pc, #368]	@ (800109c <main+0x2e0>)
 8000f2c:	f7ff fa66 	bl	80003fc <CLCD_I2C_Display>
                HAL_Delay(1000);
 8000f30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f34:	f003 fa08 	bl	8004348 <HAL_Delay>
            for (int i = delay_time; i > 0; i--) {
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dce9      	bgt.n	8000f18 <main+0x15c>
            }
        }
        HAL_Delay(2000);
 8000f44:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f48:	f003 f9fe 	bl	8004348 <HAL_Delay>
        CLCD_I2C_Clear(&LCD1);
 8000f4c:	4853      	ldr	r0, [pc, #332]	@ (800109c <main+0x2e0>)
 8000f4e:	f7ff fa45 	bl	80003dc <CLCD_I2C_Clear>
 8000f52:	e09c      	b.n	800108e <main+0x2d2>
    }
    else if (selected_key != 0)
 8000f54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d061      	beq.n	8001020 <main+0x264>
    {
        uint8_t key = 0; // Key quản lý quyền truy cập.
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        exitmenu = 15;
 8000f62:	4b58      	ldr	r3, [pc, #352]	@ (80010c4 <main+0x308>)
 8000f64:	220f      	movs	r2, #15
 8000f66:	701a      	strb	r2, [r3, #0]

        switch (selected_key)
 8000f68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f6c:	3b41      	subs	r3, #65	@ 0x41
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	f200 808c 	bhi.w	800108c <main+0x2d0>
        {
        case 'A': // RFID
        case 'B': // FACEID
        case 'C': // FINGER
        case 'D': // PASSWORD
            CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2100      	movs	r1, #0
 8000f78:	4848      	ldr	r0, [pc, #288]	@ (800109c <main+0x2e0>)
 8000f7a:	f7ff f9c5 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   Admin Card");
 8000f7e:	4952      	ldr	r1, [pc, #328]	@ (80010c8 <main+0x30c>)
 8000f80:	4846      	ldr	r0, [pc, #280]	@ (800109c <main+0x2e0>)
 8000f82:	f7ff fa14 	bl	80003ae <CLCD_I2C_WriteString>

            while (exitmenu)
 8000f86:	e011      	b.n	8000fac <main+0x1f0>
            {
                if (TM_MFRC522_Check(CardID) == MI_OK)
 8000f88:	4850      	ldr	r0, [pc, #320]	@ (80010cc <main+0x310>)
 8000f8a:	f002 fd45 	bl	8003a18 <TM_MFRC522_Check>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10b      	bne.n	8000fac <main+0x1f0>
                {
                    key = CheckListUID(CardID);
 8000f94:	484d      	ldr	r0, [pc, #308]	@ (80010cc <main+0x310>)
 8000f96:	f001 fe25 	bl	8002be4 <CheckListUID>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    key = key >> 4;
 8000fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    break;
 8000faa:	e003      	b.n	8000fb4 <main+0x1f8>
            while (exitmenu)
 8000fac:	4b45      	ldr	r3, [pc, #276]	@ (80010c4 <main+0x308>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1e9      	bne.n	8000f88 <main+0x1cc>
                }
            }

            switch (key)
 8000fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d11b      	bne.n	8000ff4 <main+0x238>
            {
            case 1:
                if (selected_key == 'A')
 8000fbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fc0:	2b41      	cmp	r3, #65	@ 0x41
 8000fc2:	d102      	bne.n	8000fca <main+0x20e>
                    RFID();
 8000fc4:	f000 fa70 	bl	80014a8 <RFID>
                    FACEID();
                else if (selected_key == 'C')
                    FINGER();
                else if (selected_key == 'D')
                    PASSWORD();
                break;
 8000fc8:	e028      	b.n	800101c <main+0x260>
                else if (selected_key == 'B')
 8000fca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fce:	2b42      	cmp	r3, #66	@ 0x42
 8000fd0:	d102      	bne.n	8000fd8 <main+0x21c>
                    FACEID();
 8000fd2:	f001 f95b 	bl	800228c <FACEID>
                break;
 8000fd6:	e021      	b.n	800101c <main+0x260>
                else if (selected_key == 'C')
 8000fd8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fdc:	2b43      	cmp	r3, #67	@ 0x43
 8000fde:	d102      	bne.n	8000fe6 <main+0x22a>
                    FINGER();
 8000fe0:	f001 fcd8 	bl	8002994 <FINGER>
                break;
 8000fe4:	e01a      	b.n	800101c <main+0x260>
                else if (selected_key == 'D')
 8000fe6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fea:	2b44      	cmp	r3, #68	@ 0x44
 8000fec:	d116      	bne.n	800101c <main+0x260>
                    PASSWORD();
 8000fee:	f001 fd5b 	bl	8002aa8 <PASSWORD>
                break;
 8000ff2:	e013      	b.n	800101c <main+0x260>
            default:
                CLCD_I2C_Clear(&LCD1);
 8000ff4:	4829      	ldr	r0, [pc, #164]	@ (800109c <main+0x2e0>)
 8000ff6:	f7ff f9f1 	bl	80003dc <CLCD_I2C_Clear>
                CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4827      	ldr	r0, [pc, #156]	@ (800109c <main+0x2e0>)
 8001000:	f7ff f982 	bl	8000308 <CLCD_I2C_SetCursor>
                CLCD_I2C_WriteString(&LCD1, "NOT ACCESSIBLE");
 8001004:	4932      	ldr	r1, [pc, #200]	@ (80010d0 <main+0x314>)
 8001006:	4825      	ldr	r0, [pc, #148]	@ (800109c <main+0x2e0>)
 8001008:	f7ff f9d1 	bl	80003ae <CLCD_I2C_WriteString>
                HAL_Delay(2000);
 800100c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001010:	f003 f99a 	bl	8004348 <HAL_Delay>
                CLCD_I2C_Clear(&LCD1);
 8001014:	4821      	ldr	r0, [pc, #132]	@ (800109c <main+0x2e0>)
 8001016:	f7ff f9e1 	bl	80003dc <CLCD_I2C_Clear>
                break;
 800101a:	e000      	b.n	800101e <main+0x262>
                break;
 800101c:	bf00      	nop
            }
            break;
 800101e:	e036      	b.n	800108e <main+0x2d2>

        default:
            break;
        }
    }
    else if (TM_MFRC522_Check(CardID) == MI_OK)
 8001020:	482a      	ldr	r0, [pc, #168]	@ (80010cc <main+0x310>)
 8001022:	f002 fcf9 	bl	8003a18 <TM_MFRC522_Check>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d127      	bne.n	800107c <main+0x2c0>
    {
        if (CheckListUID(CardID) != 0)
 800102c:	4827      	ldr	r0, [pc, #156]	@ (80010cc <main+0x310>)
 800102e:	f001 fdd9 	bl	8002be4 <CheckListUID>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d010      	beq.n	800105a <main+0x29e>
        {
            CLCD_I2C_Clear(&LCD1);
 8001038:	4818      	ldr	r0, [pc, #96]	@ (800109c <main+0x2e0>)
 800103a:	f7ff f9cf 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	4816      	ldr	r0, [pc, #88]	@ (800109c <main+0x2e0>)
 8001044:	f7ff f960 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 8001048:	491a      	ldr	r1, [pc, #104]	@ (80010b4 <main+0x2f8>)
 800104a:	4814      	ldr	r0, [pc, #80]	@ (800109c <main+0x2e0>)
 800104c:	f7ff f9af 	bl	80003ae <CLCD_I2C_WriteString>
            HAL_Delay(500);
 8001050:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001054:	f003 f978 	bl	8004348 <HAL_Delay>
 8001058:	e019      	b.n	800108e <main+0x2d2>
        }
        else
        {
            CLCD_I2C_Clear(&LCD1);
 800105a:	4810      	ldr	r0, [pc, #64]	@ (800109c <main+0x2e0>)
 800105c:	f7ff f9be 	bl	80003dc <CLCD_I2C_Clear>
            CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	480d      	ldr	r0, [pc, #52]	@ (800109c <main+0x2e0>)
 8001066:	f7ff f94f 	bl	8000308 <CLCD_I2C_SetCursor>
            CLCD_I2C_WriteString(&LCD1, "   WRONG CARD");
 800106a:	491a      	ldr	r1, [pc, #104]	@ (80010d4 <main+0x318>)
 800106c:	480b      	ldr	r0, [pc, #44]	@ (800109c <main+0x2e0>)
 800106e:	f7ff f99e 	bl	80003ae <CLCD_I2C_WriteString>
            HAL_Delay(3000);
 8001072:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001076:	f003 f967 	bl	8004348 <HAL_Delay>
 800107a:	e008      	b.n	800108e <main+0x2d2>
        }
    }
    else if(Rx_Buffer[0]!= 0)
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <main+0x31c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b25b      	sxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <main+0x2d2>
    {
        startface();
 8001086:	f002 fb7d 	bl	8003784 <startface>
 800108a:	e000      	b.n	800108e <main+0x2d2>
            break;
 800108c:	bf00      	nop
    }

    // Kiểm tra trạng thái vân tay định kỳ
    check_fingerprint_status();
 800108e:	f7ff fe71 	bl	8000d74 <check_fingerprint_status>

    // Xử lý vân tay nếu phát hiện
    process_fingerprint();
 8001092:	f7ff fe83 	bl	8000d9c <process_fingerprint>
  {
 8001096:	e6e8      	b.n	8000e6a <main+0xae>
 8001098:	2000021c 	.word	0x2000021c
 800109c:	200003d8 	.word	0x200003d8
 80010a0:	0800f400 	.word	0x0800f400
 80010a4:	200002c8 	.word	0x200002c8
 80010a8:	0800d960 	.word	0x0800d960
 80010ac:	0800d970 	.word	0x0800d970
 80010b0:	0800d974 	.word	0x0800d974
 80010b4:	0800d984 	.word	0x0800d984
 80010b8:	0800d990 	.word	0x0800d990
 80010bc:	0800d9a0 	.word	0x0800d9a0
 80010c0:	0800d9b0 	.word	0x0800d9b0
 80010c4:	20000020 	.word	0x20000020
 80010c8:	0800d9c0 	.word	0x0800d9c0
 80010cc:	200003e4 	.word	0x200003e4
 80010d0:	0800d9d0 	.word	0x0800d9d0
 80010d4:	0800d9e0 	.word	0x0800d9e0
 80010d8:	20000350 	.word	0x20000350

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	@ 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e6:	2228      	movs	r2, #40	@ 0x28
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00b ff9c 	bl	800d028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0}; // Corrected type
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110c:	2301      	movs	r3, #1
 800110e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001110:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111a:	2301      	movs	r3, #1
 800111c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111e:	2302      	movs	r3, #2
 8001120:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001122:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001126:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001128:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800112c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001132:	4618      	mov	r0, r3
 8001134:	f005 fde8 	bl	8006d08 <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800113e:	f002 fc19 	bl	8003974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800114e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001152:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2101      	movs	r1, #1
 800115e:	4618      	mov	r0, r3
 8001160:	f006 f854 	bl	800720c <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800116a:	f002 fc03 	bl	8003974 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800116e:	2310      	movs	r3, #16
 8001170:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001172:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001176:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4618      	mov	r0, r3
 800117c:	f006 f9de 	bl	800753c <HAL_RCCEx_PeriphCLKConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001186:	f002 fbf5 	bl	8003974 <Error_Handler>
  }
}
 800118a:	bf00      	nop
 800118c:	3750      	adds	r7, #80	@ 0x50
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_I2C2_Init+0x50>)
 800119a:	4a13      	ldr	r2, [pc, #76]	@ (80011e8 <MX_I2C2_Init+0x54>)
 800119c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011a0:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <MX_I2C2_Init+0x58>)
 80011a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <MX_I2C2_Init+0x50>)
 80011d2:	f003 fdc1 	bl	8004d58 <HAL_I2C_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011dc:	f002 fbca 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000021c 	.word	0x2000021c
 80011e8:	40005800 	.word	0x40005800
 80011ec:	000186a0 	.word	0x000186a0

080011f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f4:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <MX_SPI1_Init+0x64>)
 80011f6:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <MX_SPI1_Init+0x68>)
 80011f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <MX_SPI1_Init+0x64>)
 80011fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001202:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <MX_SPI1_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <MX_SPI1_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <MX_SPI1_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_SPI1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <MX_SPI1_Init+0x64>)
 800121c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001220:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001222:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <MX_SPI1_Init+0x64>)
 8001224:	2230      	movs	r2, #48	@ 0x30
 8001226:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001228:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <MX_SPI1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <MX_SPI1_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <MX_SPI1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <MX_SPI1_Init+0x64>)
 800123c:	220a      	movs	r2, #10
 800123e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <MX_SPI1_Init+0x64>)
 8001242:	f006 fa31 	bl	80076a8 <HAL_SPI_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800124c:	f002 fb92 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000270 	.word	0x20000270
 8001258:	40013000 	.word	0x40013000

0800125c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001278:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <MX_TIM2_Init+0x98>)
 800127a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800127e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001280:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <MX_TIM2_Init+0x98>)
 8001282:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001286:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <MX_TIM2_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800128e:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <MX_TIM2_Init+0x98>)
 8001290:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001294:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <MX_TIM2_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800129c:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <MX_TIM2_Init+0x98>)
 800129e:	2280      	movs	r2, #128	@ 0x80
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a2:	4814      	ldr	r0, [pc, #80]	@ (80012f4 <MX_TIM2_Init+0x98>)
 80012a4:	f006 fccc 	bl	8007c40 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ae:	f002 fb61 	bl	8003974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4619      	mov	r1, r3
 80012be:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <MX_TIM2_Init+0x98>)
 80012c0:	f006 fe68 	bl	8007f94 <HAL_TIM_ConfigClockSource>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012ca:	f002 fb53 	bl	8003974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <MX_TIM2_Init+0x98>)
 80012dc:	f007 f83a 	bl	8008354 <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012e6:	f002 fb45 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002c8 	.word	0x200002c8

080012f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_USART1_UART_Init+0x4c>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <MX_USART1_UART_Init+0x50>)
 8001300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <MX_USART1_UART_Init+0x4c>)
 8001304:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_USART1_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_USART1_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_USART1_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_USART1_UART_Init+0x4c>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_USART1_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_USART1_UART_Init+0x4c>)
 8001330:	f007 f880 	bl	8008434 <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800133a:	f002 fb1b 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000310 	.word	0x20000310
 8001348:	40013800 	.word	0x40013800

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	4b4c      	ldr	r3, [pc, #304]	@ (8001494 <MX_GPIO_Init+0x148>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a4b      	ldr	r2, [pc, #300]	@ (8001494 <MX_GPIO_Init+0x148>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b49      	ldr	r3, [pc, #292]	@ (8001494 <MX_GPIO_Init+0x148>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001378:	4b46      	ldr	r3, [pc, #280]	@ (8001494 <MX_GPIO_Init+0x148>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a45      	ldr	r2, [pc, #276]	@ (8001494 <MX_GPIO_Init+0x148>)
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b43      	ldr	r3, [pc, #268]	@ (8001494 <MX_GPIO_Init+0x148>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b40      	ldr	r3, [pc, #256]	@ (8001494 <MX_GPIO_Init+0x148>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a3f      	ldr	r2, [pc, #252]	@ (8001494 <MX_GPIO_Init+0x148>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b3d      	ldr	r3, [pc, #244]	@ (8001494 <MX_GPIO_Init+0x148>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001494 <MX_GPIO_Init+0x148>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a39      	ldr	r2, [pc, #228]	@ (8001494 <MX_GPIO_Init+0x148>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b37      	ldr	r3, [pc, #220]	@ (8001494 <MX_GPIO_Init+0x148>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|buzzer_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80013c6:	4834      	ldr	r0, [pc, #208]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013c8:	f003 fc8b 	bl	8004ce2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 80013cc:	2200      	movs	r2, #0
 80013ce:	f24f 0108 	movw	r1, #61448	@ 0xf008
 80013d2:	4832      	ldr	r0, [pc, #200]	@ (800149c <MX_GPIO_Init+0x150>)
 80013d4:	f003 fc85 	bl	8004ce2 <HAL_GPIO_WritePin>
                          |chotkhoa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 80013d8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4619      	mov	r1, r3
 80013ec:	482c      	ldr	r0, [pc, #176]	@ (80014a0 <MX_GPIO_Init+0x154>)
 80013ee:	f003 fadd 	bl	80049ac <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 80013f2:	2303      	movs	r3, #3
 80013f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	4824      	ldr	r0, [pc, #144]	@ (8001498 <MX_GPIO_Init+0x14c>)
 8001406:	f003 fad1 	bl	80049ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = CS_Pin|buzzer_Pin;
 800140a:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800140e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2302      	movs	r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4619      	mov	r1, r3
 8001422:	481d      	ldr	r0, [pc, #116]	@ (8001498 <MX_GPIO_Init+0x14c>)
 8001424:	f003 fac2 	bl	80049ac <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8001428:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001432:	2301      	movs	r3, #1
 8001434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4619      	mov	r1, r3
 8001440:	4816      	ldr	r0, [pc, #88]	@ (800149c <MX_GPIO_Init+0x150>)
 8001442:	f003 fab3 	bl	80049ac <HAL_GPIO_Init>

  /*Configure GPIO pin : chotkhoa_Pin */
  GPIO_InitStruct.Pin = chotkhoa_Pin;
 8001446:	2308      	movs	r3, #8
 8001448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2302      	movs	r3, #2
 8001454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chotkhoa_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	4619      	mov	r1, r3
 800145c:	480f      	ldr	r0, [pc, #60]	@ (800149c <MX_GPIO_Init+0x150>)
 800145e:	f003 faa5 	bl	80049ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001462:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_GPIO_Init+0x158>)
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	4619      	mov	r1, r3
 8001476:	4809      	ldr	r0, [pc, #36]	@ (800149c <MX_GPIO_Init+0x150>)
 8001478:	f003 fa98 	bl	80049ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2101      	movs	r1, #1
 8001480:	2017      	movs	r0, #23
 8001482:	f003 f85c 	bl	800453e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001486:	2017      	movs	r0, #23
 8001488:	f003 f875 	bl	8004576 <HAL_NVIC_EnableIRQ>

}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	40010800 	.word	0x40010800
 800149c:	40010c00 	.word	0x40010c00
 80014a0:	40011000 	.word	0x40011000
 80014a4:	10110000 	.word	0x10110000

080014a8 <RFID>:

/* USER CODE BEGIN 4 */
void RFID(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
	exitmenu = 15;
 80014ae:	4ba3      	ldr	r3, [pc, #652]	@ (800173c <RFID+0x294>)
 80014b0:	220f      	movs	r2, #15
 80014b2:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80014b4:	23ff      	movs	r3, #255	@ 0xff
 80014b6:	75fb      	strb	r3, [r7, #23]
	CLCD_I2C_Display(&LCD1," RFID SETTINGS ","Pls Press DOWN");
 80014b8:	4aa1      	ldr	r2, [pc, #644]	@ (8001740 <RFID+0x298>)
 80014ba:	49a2      	ldr	r1, [pc, #648]	@ (8001744 <RFID+0x29c>)
 80014bc:	48a2      	ldr	r0, [pc, #648]	@ (8001748 <RFID+0x2a0>)
 80014be:	f7fe ff9d 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 80014c2:	f000 beaa 	b.w	800221a <RFID+0xd72>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80014c6:	200a      	movs	r0, #10
 80014c8:	f7ff f8f2 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80014cc:	4603      	mov	r3, r0
 80014ce:	717b      	strb	r3, [r7, #5]
		if (key_pressed =='*')
 80014d0:	797b      	ldrb	r3, [r7, #5]
 80014d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80014d4:	d12e      	bne.n	8001534 <RFID+0x8c>
		{
			exitmenu = 15;
 80014d6:	4b99      	ldr	r3, [pc, #612]	@ (800173c <RFID+0x294>)
 80014d8:	220f      	movs	r2, #15
 80014da:	701a      	strb	r2, [r3, #0]
			status++;
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	3301      	adds	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d801      	bhi.n	80014ec <RFID+0x44>
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	e000      	b.n	80014ee <RFID+0x46>
 80014ec:	2300      	movs	r3, #0
 80014ee:	75fb      	strb	r3, [r7, #23]
			switch (status)
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d012      	beq.n	800151c <RFID+0x74>
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	dc16      	bgt.n	8001528 <RFID+0x80>
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <RFID+0x5c>
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d006      	beq.n	8001510 <RFID+0x68>
 8001502:	e011      	b.n	8001528 <RFID+0x80>
			{
			case 0:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 8001504:	4a91      	ldr	r2, [pc, #580]	@ (800174c <RFID+0x2a4>)
 8001506:	498f      	ldr	r1, [pc, #572]	@ (8001744 <RFID+0x29c>)
 8001508:	488f      	ldr	r0, [pc, #572]	@ (8001748 <RFID+0x2a0>)
 800150a:	f7fe ff77 	bl	80003fc <CLCD_I2C_Display>
				break;
 800150e:	e011      	b.n	8001534 <RFID+0x8c>
			case 1:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 8001510:	4a8f      	ldr	r2, [pc, #572]	@ (8001750 <RFID+0x2a8>)
 8001512:	498c      	ldr	r1, [pc, #560]	@ (8001744 <RFID+0x29c>)
 8001514:	488c      	ldr	r0, [pc, #560]	@ (8001748 <RFID+0x2a0>)
 8001516:	f7fe ff71 	bl	80003fc <CLCD_I2C_Display>
				break;
 800151a:	e00b      	b.n	8001534 <RFID+0x8c>
			case 2:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 800151c:	4a8d      	ldr	r2, [pc, #564]	@ (8001754 <RFID+0x2ac>)
 800151e:	4989      	ldr	r1, [pc, #548]	@ (8001744 <RFID+0x29c>)
 8001520:	4889      	ldr	r0, [pc, #548]	@ (8001748 <RFID+0x2a0>)
 8001522:	f7fe ff6b 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001526:	e005      	b.n	8001534 <RFID+0x8c>
			default:
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Back");
 8001528:	4a8b      	ldr	r2, [pc, #556]	@ (8001758 <RFID+0x2b0>)
 800152a:	4986      	ldr	r1, [pc, #536]	@ (8001744 <RFID+0x29c>)
 800152c:	4886      	ldr	r0, [pc, #536]	@ (8001748 <RFID+0x2a0>)
 800152e:	f7fe ff65 	bl	80003fc <CLCD_I2C_Display>
				break;
 8001532:	bf00      	nop
			}
		}
		if (key_pressed =='#')
 8001534:	797b      	ldrb	r3, [r7, #5]
 8001536:	2b23      	cmp	r3, #35	@ 0x23
 8001538:	f040 866f 	bne.w	800221a <RFID+0xd72>
		{
			exitmenu = 15;
 800153c:	4b7f      	ldr	r3, [pc, #508]	@ (800173c <RFID+0x294>)
 800153e:	220f      	movs	r2, #15
 8001540:	701a      	strb	r2, [r3, #0]
			switch (status)
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	2b02      	cmp	r3, #2
 8001546:	f000 865c 	beq.w	8002202 <RFID+0xd5a>
 800154a:	2b02      	cmp	r3, #2
 800154c:	f300 8661 	bgt.w	8002212 <RFID+0xd6a>
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <RFID+0xb6>
 8001554:	2b01      	cmp	r3, #1
 8001556:	f000 8231 	beq.w	80019bc <RFID+0x514>
 800155a:	f000 be5a 	b.w	8002212 <RFID+0xd6a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800155e:	4a7f      	ldr	r2, [pc, #508]	@ (800175c <RFID+0x2b4>)
 8001560:	497f      	ldr	r1, [pc, #508]	@ (8001760 <RFID+0x2b8>)
 8001562:	4879      	ldr	r0, [pc, #484]	@ (8001748 <RFID+0x2a0>)
 8001564:	f7fe ff4a 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8001570:	e219      	b.n	80019a6 <RFID+0x4fe>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001572:	200a      	movs	r0, #10
 8001574:	f7ff f89c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001578:	4603      	mov	r3, r0
 800157a:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 800157c:	4b6f      	ldr	r3, [pc, #444]	@ (800173c <RFID+0x294>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d108      	bne.n	8001596 <RFID+0xee>
					{
						CLCD_I2C_Clear(&LCD1);
 8001584:	4870      	ldr	r0, [pc, #448]	@ (8001748 <RFID+0x2a0>)
 8001586:	f7fe ff29 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800158a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800158e:	f002 fedb 	bl	8004348 <HAL_Delay>
						return;
 8001592:	f000 be4a 	b.w	800222a <RFID+0xd82>
					}
					if (key_pressed =='*')
 8001596:	797b      	ldrb	r3, [r7, #5]
 8001598:	2b2a      	cmp	r3, #42	@ 0x2a
 800159a:	d124      	bne.n	80015e6 <RFID+0x13e>
					{
						exitmenu = 15;
 800159c:	4b67      	ldr	r3, [pc, #412]	@ (800173c <RFID+0x294>)
 800159e:	220f      	movs	r2, #15
 80015a0:	701a      	strb	r2, [r3, #0]
						statusadd++;
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	3301      	adds	r3, #1
 80015a6:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 80015a8:	7dbb      	ldrb	r3, [r7, #22]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d801      	bhi.n	80015b2 <RFID+0x10a>
 80015ae:	7dbb      	ldrb	r3, [r7, #22]
 80015b0:	e000      	b.n	80015b4 <RFID+0x10c>
 80015b2:	2300      	movs	r3, #0
 80015b4:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 80015b6:	7dbb      	ldrb	r3, [r7, #22]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d002      	beq.n	80015c2 <RFID+0x11a>
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d006      	beq.n	80015ce <RFID+0x126>
 80015c0:	e00b      	b.n	80015da <RFID+0x132>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80015c2:	4a68      	ldr	r2, [pc, #416]	@ (8001764 <RFID+0x2bc>)
 80015c4:	4968      	ldr	r1, [pc, #416]	@ (8001768 <RFID+0x2c0>)
 80015c6:	4860      	ldr	r0, [pc, #384]	@ (8001748 <RFID+0x2a0>)
 80015c8:	f7fe ff18 	bl	80003fc <CLCD_I2C_Display>
							break;
 80015cc:	e00b      	b.n	80015e6 <RFID+0x13e>
						case 2:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 80015ce:	4a67      	ldr	r2, [pc, #412]	@ (800176c <RFID+0x2c4>)
 80015d0:	4965      	ldr	r1, [pc, #404]	@ (8001768 <RFID+0x2c0>)
 80015d2:	485d      	ldr	r0, [pc, #372]	@ (8001748 <RFID+0x2a0>)
 80015d4:	f7fe ff12 	bl	80003fc <CLCD_I2C_Display>
							break;
 80015d8:	e005      	b.n	80015e6 <RFID+0x13e>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Back");
 80015da:	4a5f      	ldr	r2, [pc, #380]	@ (8001758 <RFID+0x2b0>)
 80015dc:	4962      	ldr	r1, [pc, #392]	@ (8001768 <RFID+0x2c0>)
 80015de:	485a      	ldr	r0, [pc, #360]	@ (8001748 <RFID+0x2a0>)
 80015e0:	f7fe ff0c 	bl	80003fc <CLCD_I2C_Display>
							break;
 80015e4:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 80015e6:	797b      	ldrb	r3, [r7, #5]
 80015e8:	2b23      	cmp	r3, #35	@ 0x23
 80015ea:	f040 81dc 	bne.w	80019a6 <RFID+0x4fe>
					{
						exitmenu = 15;
 80015ee:	4b53      	ldr	r3, [pc, #332]	@ (800173c <RFID+0x294>)
 80015f0:	220f      	movs	r2, #15
 80015f2:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 80015f4:	7dbb      	ldrb	r3, [r7, #22]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d003      	beq.n	8001602 <RFID+0x15a>
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	f000 80ff 	beq.w	80017fe <RFID+0x356>
 8001600:	e1ce      	b.n	80019a0 <RFID+0x4f8>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001602:	4a56      	ldr	r2, [pc, #344]	@ (800175c <RFID+0x2b4>)
 8001604:	4956      	ldr	r1, [pc, #344]	@ (8001760 <RFID+0x2b8>)
 8001606:	4850      	ldr	r0, [pc, #320]	@ (8001748 <RFID+0x2a0>)
 8001608:	f7fe fef8 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusadd1 = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 8001614:	e0e9      	b.n	80017ea <RFID+0x342>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001616:	200a      	movs	r0, #10
 8001618:	f7ff f84a 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800161c:	4603      	mov	r3, r0
 800161e:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001620:	4b46      	ldr	r3, [pc, #280]	@ (800173c <RFID+0x294>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <RFID+0x192>
								{
									CLCD_I2C_Clear(&LCD1);
 8001628:	4847      	ldr	r0, [pc, #284]	@ (8001748 <RFID+0x2a0>)
 800162a:	f7fe fed7 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800162e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001632:	f002 fe89 	bl	8004348 <HAL_Delay>
									return;
 8001636:	f000 bdf8 	b.w	800222a <RFID+0xd82>
								}
								if (key_pressed =='*')
 800163a:	797b      	ldrb	r3, [r7, #5]
 800163c:	2b2a      	cmp	r3, #42	@ 0x2a
 800163e:	d12e      	bne.n	800169e <RFID+0x1f6>
								{
									exitmenu = 15;
 8001640:	4b3e      	ldr	r3, [pc, #248]	@ (800173c <RFID+0x294>)
 8001642:	220f      	movs	r2, #15
 8001644:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 8001646:	7d3b      	ldrb	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 800164c:	7d3b      	ldrb	r3, [r7, #20]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d801      	bhi.n	8001656 <RFID+0x1ae>
 8001652:	7d3b      	ldrb	r3, [r7, #20]
 8001654:	e000      	b.n	8001658 <RFID+0x1b0>
 8001656:	2300      	movs	r3, #0
 8001658:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 800165a:	7d3b      	ldrb	r3, [r7, #20]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d012      	beq.n	8001686 <RFID+0x1de>
 8001660:	2b03      	cmp	r3, #3
 8001662:	dc16      	bgt.n	8001692 <RFID+0x1ea>
 8001664:	2b01      	cmp	r3, #1
 8001666:	d002      	beq.n	800166e <RFID+0x1c6>
 8001668:	2b02      	cmp	r3, #2
 800166a:	d006      	beq.n	800167a <RFID+0x1d2>
 800166c:	e011      	b.n	8001692 <RFID+0x1ea>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 800166e:	4a40      	ldr	r2, [pc, #256]	@ (8001770 <RFID+0x2c8>)
 8001670:	4940      	ldr	r1, [pc, #256]	@ (8001774 <RFID+0x2cc>)
 8001672:	4835      	ldr	r0, [pc, #212]	@ (8001748 <RFID+0x2a0>)
 8001674:	f7fe fec2 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001678:	e011      	b.n	800169e <RFID+0x1f6>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 800167a:	4a3f      	ldr	r2, [pc, #252]	@ (8001778 <RFID+0x2d0>)
 800167c:	493d      	ldr	r1, [pc, #244]	@ (8001774 <RFID+0x2cc>)
 800167e:	4832      	ldr	r0, [pc, #200]	@ (8001748 <RFID+0x2a0>)
 8001680:	f7fe febc 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001684:	e00b      	b.n	800169e <RFID+0x1f6>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 8001686:	4a3d      	ldr	r2, [pc, #244]	@ (800177c <RFID+0x2d4>)
 8001688:	493a      	ldr	r1, [pc, #232]	@ (8001774 <RFID+0x2cc>)
 800168a:	482f      	ldr	r0, [pc, #188]	@ (8001748 <RFID+0x2a0>)
 800168c:	f7fe feb6 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001690:	e005      	b.n	800169e <RFID+0x1f6>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Back");
 8001692:	4a31      	ldr	r2, [pc, #196]	@ (8001758 <RFID+0x2b0>)
 8001694:	4937      	ldr	r1, [pc, #220]	@ (8001774 <RFID+0x2cc>)
 8001696:	482c      	ldr	r0, [pc, #176]	@ (8001748 <RFID+0x2a0>)
 8001698:	f7fe feb0 	bl	80003fc <CLCD_I2C_Display>
										break;
 800169c:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 800169e:	797b      	ldrb	r3, [r7, #5]
 80016a0:	2b23      	cmp	r3, #35	@ 0x23
 80016a2:	f040 80a2 	bne.w	80017ea <RFID+0x342>
								{
									exitmenu = 15;
 80016a6:	4b25      	ldr	r3, [pc, #148]	@ (800173c <RFID+0x294>)
 80016a8:	220f      	movs	r2, #15
 80016aa:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 80016ac:	7dbb      	ldrb	r3, [r7, #22]
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	7d3b      	ldrb	r3, [r7, #20]
 80016b4:	4413      	add	r3, r2
 80016b6:	707b      	strb	r3, [r7, #1]
									switch (statusadd1)
 80016b8:	7d3b      	ldrb	r3, [r7, #20]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d072      	beq.n	80017a4 <RFID+0x2fc>
 80016be:	2b03      	cmp	r3, #3
 80016c0:	f300 8090 	bgt.w	80017e4 <RFID+0x33c>
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d002      	beq.n	80016ce <RFID+0x226>
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d020      	beq.n	800170e <RFID+0x266>
 80016cc:	e08a      	b.n	80017e4 <RFID+0x33c>
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 80016ce:	787b      	ldrb	r3, [r7, #1]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 fc07 	bl	8002ee4 <CheckKey>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00e      	beq.n	80016fa <RFID+0x252>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 1"," Card 1 Existed ");
 80016dc:	4a28      	ldr	r2, [pc, #160]	@ (8001780 <RFID+0x2d8>)
 80016de:	4929      	ldr	r1, [pc, #164]	@ (8001784 <RFID+0x2dc>)
 80016e0:	4819      	ldr	r0, [pc, #100]	@ (8001748 <RFID+0x2a0>)
 80016e2:	f7fe fe8b 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80016e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ea:	f002 fe2d 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 80016ee:	4a20      	ldr	r2, [pc, #128]	@ (8001770 <RFID+0x2c8>)
 80016f0:	4920      	ldr	r1, [pc, #128]	@ (8001774 <RFID+0x2cc>)
 80016f2:	4815      	ldr	r0, [pc, #84]	@ (8001748 <RFID+0x2a0>)
 80016f4:	f7fe fe82 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
										}
										break;
 80016f8:	e077      	b.n	80017ea <RFID+0x342>
											adduid(keyadd1);
 80016fa:	787b      	ldrb	r3, [r7, #1]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f001 fad3 	bl	8002ca8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 1 ");
 8001702:	4a1b      	ldr	r2, [pc, #108]	@ (8001770 <RFID+0x2c8>)
 8001704:	491b      	ldr	r1, [pc, #108]	@ (8001774 <RFID+0x2cc>)
 8001706:	4810      	ldr	r0, [pc, #64]	@ (8001748 <RFID+0x2a0>)
 8001708:	f7fe fe78 	bl	80003fc <CLCD_I2C_Display>
										break;
 800170c:	e06d      	b.n	80017ea <RFID+0x342>
									case 2:
										if (CheckKey(keyadd1) != 0)
 800170e:	787b      	ldrb	r3, [r7, #1]
 8001710:	4618      	mov	r0, r3
 8001712:	f001 fbe7 	bl	8002ee4 <CheckKey>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d039      	beq.n	8001790 <RFID+0x2e8>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 2"," Card 2 Existed ");
 800171c:	4a1a      	ldr	r2, [pc, #104]	@ (8001788 <RFID+0x2e0>)
 800171e:	491b      	ldr	r1, [pc, #108]	@ (800178c <RFID+0x2e4>)
 8001720:	4809      	ldr	r0, [pc, #36]	@ (8001748 <RFID+0x2a0>)
 8001722:	f7fe fe6b 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8001726:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800172a:	f002 fe0d 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 800172e:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <RFID+0x2d0>)
 8001730:	4910      	ldr	r1, [pc, #64]	@ (8001774 <RFID+0x2cc>)
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <RFID+0x2a0>)
 8001734:	f7fe fe62 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
										}
										break;
 8001738:	e057      	b.n	80017ea <RFID+0x342>
 800173a:	bf00      	nop
 800173c:	20000020 	.word	0x20000020
 8001740:	0800d9f0 	.word	0x0800d9f0
 8001744:	0800da00 	.word	0x0800da00
 8001748:	200003d8 	.word	0x200003d8
 800174c:	0800da10 	.word	0x0800da10
 8001750:	0800da1c 	.word	0x0800da1c
 8001754:	0800da2c 	.word	0x0800da2c
 8001758:	0800da3c 	.word	0x0800da3c
 800175c:	0800da44 	.word	0x0800da44
 8001760:	0800da50 	.word	0x0800da50
 8001764:	0800da60 	.word	0x0800da60
 8001768:	0800da70 	.word	0x0800da70
 800176c:	0800da7c 	.word	0x0800da7c
 8001770:	0800da8c 	.word	0x0800da8c
 8001774:	0800daa0 	.word	0x0800daa0
 8001778:	0800dab0 	.word	0x0800dab0
 800177c:	0800dac4 	.word	0x0800dac4
 8001780:	0800dad8 	.word	0x0800dad8
 8001784:	0800daec 	.word	0x0800daec
 8001788:	0800daf8 	.word	0x0800daf8
 800178c:	0800db0c 	.word	0x0800db0c
											adduid(keyadd1);
 8001790:	787b      	ldrb	r3, [r7, #1]
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fa88 	bl	8002ca8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 2 ");
 8001798:	4aa5      	ldr	r2, [pc, #660]	@ (8001a30 <RFID+0x588>)
 800179a:	49a6      	ldr	r1, [pc, #664]	@ (8001a34 <RFID+0x58c>)
 800179c:	48a6      	ldr	r0, [pc, #664]	@ (8001a38 <RFID+0x590>)
 800179e:	f7fe fe2d 	bl	80003fc <CLCD_I2C_Display>
										break;
 80017a2:	e022      	b.n	80017ea <RFID+0x342>
									case 3:
										if (CheckKey(keyadd1) != 0)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 fb9c 	bl	8002ee4 <CheckKey>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00e      	beq.n	80017d0 <RFID+0x328>
										{
											CLCD_I2C_Display(&LCD1,"    ADMIN 3"," Card 3 Existed ");
 80017b2:	4aa2      	ldr	r2, [pc, #648]	@ (8001a3c <RFID+0x594>)
 80017b4:	49a2      	ldr	r1, [pc, #648]	@ (8001a40 <RFID+0x598>)
 80017b6:	48a0      	ldr	r0, [pc, #640]	@ (8001a38 <RFID+0x590>)
 80017b8:	f7fe fe20 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80017bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c0:	f002 fdc2 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80017c4:	4a9f      	ldr	r2, [pc, #636]	@ (8001a44 <RFID+0x59c>)
 80017c6:	499b      	ldr	r1, [pc, #620]	@ (8001a34 <RFID+0x58c>)
 80017c8:	489b      	ldr	r0, [pc, #620]	@ (8001a38 <RFID+0x590>)
 80017ca:	f7fe fe17 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd1);
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
										}
										break;
 80017ce:	e00c      	b.n	80017ea <RFID+0x342>
											adduid(keyadd1);
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f001 fa68 	bl	8002ca8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD ADMIN","=> Admin Card 3 ");
 80017d8:	4a9a      	ldr	r2, [pc, #616]	@ (8001a44 <RFID+0x59c>)
 80017da:	4996      	ldr	r1, [pc, #600]	@ (8001a34 <RFID+0x58c>)
 80017dc:	4896      	ldr	r0, [pc, #600]	@ (8001a38 <RFID+0x590>)
 80017de:	f7fe fe0d 	bl	80003fc <CLCD_I2C_Display>
										break;
 80017e2:	e002      	b.n	80017ea <RFID+0x342>
									default:
										back11 = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	74fb      	strb	r3, [r7, #19]
										break;
 80017e8:	bf00      	nop
							while (back11 == 1)
 80017ea:	7cfb      	ldrb	r3, [r7, #19]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	f43f af12 	beq.w	8001616 <RFID+0x16e>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> Admin Card");
 80017f2:	4a95      	ldr	r2, [pc, #596]	@ (8001a48 <RFID+0x5a0>)
 80017f4:	4995      	ldr	r1, [pc, #596]	@ (8001a4c <RFID+0x5a4>)
 80017f6:	4890      	ldr	r0, [pc, #576]	@ (8001a38 <RFID+0x590>)
 80017f8:	f7fe fe00 	bl	80003fc <CLCD_I2C_Display>
							break;
 80017fc:	e0d3      	b.n	80019a6 <RFID+0x4fe>
						case 2:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80017fe:	4a94      	ldr	r2, [pc, #592]	@ (8001a50 <RFID+0x5a8>)
 8001800:	4994      	ldr	r1, [pc, #592]	@ (8001a54 <RFID+0x5ac>)
 8001802:	488d      	ldr	r0, [pc, #564]	@ (8001a38 <RFID+0x590>)
 8001804:	f7fe fdfa 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusadd2 = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 800180c:	2301      	movs	r3, #1
 800180e:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 8001810:	e0bc      	b.n	800198c <RFID+0x4e4>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001812:	200a      	movs	r0, #10
 8001814:	f7fe ff4c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001818:	4603      	mov	r3, r0
 800181a:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 800181c:	4b8e      	ldr	r3, [pc, #568]	@ (8001a58 <RFID+0x5b0>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d108      	bne.n	8001836 <RFID+0x38e>
								{
									CLCD_I2C_Clear(&LCD1);
 8001824:	4884      	ldr	r0, [pc, #528]	@ (8001a38 <RFID+0x590>)
 8001826:	f7fe fdd9 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 800182a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800182e:	f002 fd8b 	bl	8004348 <HAL_Delay>
									return;
 8001832:	f000 bcfa 	b.w	800222a <RFID+0xd82>
								}
								if (key_pressed =='*')
 8001836:	797b      	ldrb	r3, [r7, #5]
 8001838:	2b2a      	cmp	r3, #42	@ 0x2a
 800183a:	d12e      	bne.n	800189a <RFID+0x3f2>
								{
									exitmenu = 15;
 800183c:	4b86      	ldr	r3, [pc, #536]	@ (8001a58 <RFID+0x5b0>)
 800183e:	220f      	movs	r2, #15
 8001840:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 8001842:	7cbb      	ldrb	r3, [r7, #18]
 8001844:	3301      	adds	r3, #1
 8001846:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001848:	7cbb      	ldrb	r3, [r7, #18]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d801      	bhi.n	8001852 <RFID+0x3aa>
 800184e:	7cbb      	ldrb	r3, [r7, #18]
 8001850:	e000      	b.n	8001854 <RFID+0x3ac>
 8001852:	2300      	movs	r3, #0
 8001854:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 8001856:	7cbb      	ldrb	r3, [r7, #18]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d012      	beq.n	8001882 <RFID+0x3da>
 800185c:	2b03      	cmp	r3, #3
 800185e:	dc16      	bgt.n	800188e <RFID+0x3e6>
 8001860:	2b01      	cmp	r3, #1
 8001862:	d002      	beq.n	800186a <RFID+0x3c2>
 8001864:	2b02      	cmp	r3, #2
 8001866:	d006      	beq.n	8001876 <RFID+0x3ce>
 8001868:	e011      	b.n	800188e <RFID+0x3e6>
									{
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 800186a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a5c <RFID+0x5b4>)
 800186c:	497c      	ldr	r1, [pc, #496]	@ (8001a60 <RFID+0x5b8>)
 800186e:	4872      	ldr	r0, [pc, #456]	@ (8001a38 <RFID+0x590>)
 8001870:	f7fe fdc4 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001874:	e011      	b.n	800189a <RFID+0x3f2>
									case 2:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001876:	4a7b      	ldr	r2, [pc, #492]	@ (8001a64 <RFID+0x5bc>)
 8001878:	4979      	ldr	r1, [pc, #484]	@ (8001a60 <RFID+0x5b8>)
 800187a:	486f      	ldr	r0, [pc, #444]	@ (8001a38 <RFID+0x590>)
 800187c:	f7fe fdbe 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001880:	e00b      	b.n	800189a <RFID+0x3f2>
									case 3:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001882:	4a79      	ldr	r2, [pc, #484]	@ (8001a68 <RFID+0x5c0>)
 8001884:	4976      	ldr	r1, [pc, #472]	@ (8001a60 <RFID+0x5b8>)
 8001886:	486c      	ldr	r0, [pc, #432]	@ (8001a38 <RFID+0x590>)
 8001888:	f7fe fdb8 	bl	80003fc <CLCD_I2C_Display>
										break;
 800188c:	e005      	b.n	800189a <RFID+0x3f2>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> Back");
 800188e:	4a77      	ldr	r2, [pc, #476]	@ (8001a6c <RFID+0x5c4>)
 8001890:	4973      	ldr	r1, [pc, #460]	@ (8001a60 <RFID+0x5b8>)
 8001892:	4869      	ldr	r0, [pc, #420]	@ (8001a38 <RFID+0x590>)
 8001894:	f7fe fdb2 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001898:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 800189a:	797b      	ldrb	r3, [r7, #5]
 800189c:	2b23      	cmp	r3, #35	@ 0x23
 800189e:	d175      	bne.n	800198c <RFID+0x4e4>
								{
									exitmenu = 15;
 80018a0:	4b6d      	ldr	r3, [pc, #436]	@ (8001a58 <RFID+0x5b0>)
 80018a2:	220f      	movs	r2, #15
 80018a4:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 80018a6:	7dbb      	ldrb	r3, [r7, #22]
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	7cbb      	ldrb	r3, [r7, #18]
 80018ae:	4413      	add	r3, r2
 80018b0:	70bb      	strb	r3, [r7, #2]
									switch (statusadd2)
 80018b2:	7cbb      	ldrb	r3, [r7, #18]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d046      	beq.n	8001946 <RFID+0x49e>
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	dc64      	bgt.n	8001986 <RFID+0x4de>
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d002      	beq.n	80018c6 <RFID+0x41e>
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d020      	beq.n	8001906 <RFID+0x45e>
 80018c4:	e05f      	b.n	8001986 <RFID+0x4de>
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 80018c6:	78bb      	ldrb	r3, [r7, #2]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 fb0b 	bl	8002ee4 <CheckKey>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00e      	beq.n	80018f2 <RFID+0x44a>
										{
											CLCD_I2C_Display(&LCD1,"     USER 1"," Card 1 Existed ");
 80018d4:	4a66      	ldr	r2, [pc, #408]	@ (8001a70 <RFID+0x5c8>)
 80018d6:	4967      	ldr	r1, [pc, #412]	@ (8001a74 <RFID+0x5cc>)
 80018d8:	4857      	ldr	r0, [pc, #348]	@ (8001a38 <RFID+0x590>)
 80018da:	f7fe fd8f 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80018de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018e2:	f002 fd31 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80018e6:	4a5d      	ldr	r2, [pc, #372]	@ (8001a5c <RFID+0x5b4>)
 80018e8:	495d      	ldr	r1, [pc, #372]	@ (8001a60 <RFID+0x5b8>)
 80018ea:	4853      	ldr	r0, [pc, #332]	@ (8001a38 <RFID+0x590>)
 80018ec:	f7fe fd86 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
										}
										break;
 80018f0:	e04c      	b.n	800198c <RFID+0x4e4>
											adduid(keyadd2);
 80018f2:	78bb      	ldrb	r3, [r7, #2]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f001 f9d7 	bl	8002ca8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 1 ");
 80018fa:	4a58      	ldr	r2, [pc, #352]	@ (8001a5c <RFID+0x5b4>)
 80018fc:	4958      	ldr	r1, [pc, #352]	@ (8001a60 <RFID+0x5b8>)
 80018fe:	484e      	ldr	r0, [pc, #312]	@ (8001a38 <RFID+0x590>)
 8001900:	f7fe fd7c 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001904:	e042      	b.n	800198c <RFID+0x4e4>
									case 2:
										if (CheckKey(keyadd2) != 0)
 8001906:	78bb      	ldrb	r3, [r7, #2]
 8001908:	4618      	mov	r0, r3
 800190a:	f001 faeb 	bl	8002ee4 <CheckKey>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00e      	beq.n	8001932 <RFID+0x48a>
										{
											CLCD_I2C_Display(&LCD1,"     USER 2"," Card 2 Existed ");
 8001914:	4a58      	ldr	r2, [pc, #352]	@ (8001a78 <RFID+0x5d0>)
 8001916:	4959      	ldr	r1, [pc, #356]	@ (8001a7c <RFID+0x5d4>)
 8001918:	4847      	ldr	r0, [pc, #284]	@ (8001a38 <RFID+0x590>)
 800191a:	f7fe fd6f 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800191e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001922:	f002 fd11 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 8001926:	4a4f      	ldr	r2, [pc, #316]	@ (8001a64 <RFID+0x5bc>)
 8001928:	494d      	ldr	r1, [pc, #308]	@ (8001a60 <RFID+0x5b8>)
 800192a:	4843      	ldr	r0, [pc, #268]	@ (8001a38 <RFID+0x590>)
 800192c:	f7fe fd66 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
										}
										break;
 8001930:	e02c      	b.n	800198c <RFID+0x4e4>
											adduid(keyadd2);
 8001932:	78bb      	ldrb	r3, [r7, #2]
 8001934:	4618      	mov	r0, r3
 8001936:	f001 f9b7 	bl	8002ca8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 2 ");
 800193a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a64 <RFID+0x5bc>)
 800193c:	4948      	ldr	r1, [pc, #288]	@ (8001a60 <RFID+0x5b8>)
 800193e:	483e      	ldr	r0, [pc, #248]	@ (8001a38 <RFID+0x590>)
 8001940:	f7fe fd5c 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001944:	e022      	b.n	800198c <RFID+0x4e4>
									case 3:
										if (CheckKey(keyadd2) != 0)
 8001946:	78bb      	ldrb	r3, [r7, #2]
 8001948:	4618      	mov	r0, r3
 800194a:	f001 facb 	bl	8002ee4 <CheckKey>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00e      	beq.n	8001972 <RFID+0x4ca>
										{
											CLCD_I2C_Display(&LCD1,"     USER 3"," Card 3 Existed ");
 8001954:	4a39      	ldr	r2, [pc, #228]	@ (8001a3c <RFID+0x594>)
 8001956:	494a      	ldr	r1, [pc, #296]	@ (8001a80 <RFID+0x5d8>)
 8001958:	4837      	ldr	r0, [pc, #220]	@ (8001a38 <RFID+0x590>)
 800195a:	f7fe fd4f 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800195e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001962:	f002 fcf1 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 8001966:	4a40      	ldr	r2, [pc, #256]	@ (8001a68 <RFID+0x5c0>)
 8001968:	493d      	ldr	r1, [pc, #244]	@ (8001a60 <RFID+0x5b8>)
 800196a:	4833      	ldr	r0, [pc, #204]	@ (8001a38 <RFID+0x590>)
 800196c:	f7fe fd46 	bl	80003fc <CLCD_I2C_Display>
										else
										{
											adduid(keyadd2);
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
										}
										break;
 8001970:	e00c      	b.n	800198c <RFID+0x4e4>
											adduid(keyadd2);
 8001972:	78bb      	ldrb	r3, [r7, #2]
 8001974:	4618      	mov	r0, r3
 8001976:	f001 f997 	bl	8002ca8 <adduid>
											CLCD_I2C_Display(&LCD1,"MODE: ADD USER","=> User Card 3 ");
 800197a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a68 <RFID+0x5c0>)
 800197c:	4938      	ldr	r1, [pc, #224]	@ (8001a60 <RFID+0x5b8>)
 800197e:	482e      	ldr	r0, [pc, #184]	@ (8001a38 <RFID+0x590>)
 8001980:	f7fe fd3c 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001984:	e002      	b.n	800198c <RFID+0x4e4>
									default:
										back12 = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	747b      	strb	r3, [r7, #17]
										break;
 800198a:	bf00      	nop
							while (back12 == 1)
 800198c:	7c7b      	ldrb	r3, [r7, #17]
 800198e:	2b01      	cmp	r3, #1
 8001990:	f43f af3f 	beq.w	8001812 <RFID+0x36a>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: ADD","=> User Card");
 8001994:	4a3b      	ldr	r2, [pc, #236]	@ (8001a84 <RFID+0x5dc>)
 8001996:	492d      	ldr	r1, [pc, #180]	@ (8001a4c <RFID+0x5a4>)
 8001998:	4827      	ldr	r0, [pc, #156]	@ (8001a38 <RFID+0x590>)
 800199a:	f7fe fd2f 	bl	80003fc <CLCD_I2C_Display>
							break;
 800199e:	e002      	b.n	80019a6 <RFID+0x4fe>
						default:
							back = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	757b      	strb	r3, [r7, #21]
							break;
 80019a4:	bf00      	nop
				while (back == 1)
 80019a6:	7d7b      	ldrb	r3, [r7, #21]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	f43f ade2 	beq.w	8001572 <RFID+0xca>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Add Card");
 80019ae:	4a36      	ldr	r2, [pc, #216]	@ (8001a88 <RFID+0x5e0>)
 80019b0:	4936      	ldr	r1, [pc, #216]	@ (8001a8c <RFID+0x5e4>)
 80019b2:	4821      	ldr	r0, [pc, #132]	@ (8001a38 <RFID+0x590>)
 80019b4:	f7fe fd22 	bl	80003fc <CLCD_I2C_Display>
				break;
 80019b8:	f000 bc2f 	b.w	800221a <RFID+0xd72>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 80019bc:	4a24      	ldr	r2, [pc, #144]	@ (8001a50 <RFID+0x5a8>)
 80019be:	4925      	ldr	r1, [pc, #148]	@ (8001a54 <RFID+0x5ac>)
 80019c0:	481d      	ldr	r0, [pc, #116]	@ (8001a38 <RFID+0x590>)
 80019c2:	f7fe fd1b 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusremove = -1;
 80019c6:	23ff      	movs	r3, #255	@ 0xff
 80019c8:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 80019ce:	f000 bc0e 	b.w	80021ee <RFID+0xd46>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 80019d2:	200a      	movs	r0, #10
 80019d4:	f7fe fe6c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80019d8:	4603      	mov	r3, r0
 80019da:	717b      	strb	r3, [r7, #5]
					if (exitmenu == 0)
 80019dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <RFID+0x5b0>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d108      	bne.n	80019f6 <RFID+0x54e>
					{
						CLCD_I2C_Clear(&LCD1);
 80019e4:	4814      	ldr	r0, [pc, #80]	@ (8001a38 <RFID+0x590>)
 80019e6:	f7fe fcf9 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80019ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ee:	f002 fcab 	bl	8004348 <HAL_Delay>
						return;
 80019f2:	f000 bc1a 	b.w	800222a <RFID+0xd82>
					}
					if (key_pressed =='*')
 80019f6:	797b      	ldrb	r3, [r7, #5]
 80019f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80019fa:	d159      	bne.n	8001ab0 <RFID+0x608>
					{
						exitmenu = 15;
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <RFID+0x5b0>)
 80019fe:	220f      	movs	r2, #15
 8001a00:	701a      	strb	r2, [r3, #0]
						statusremove++;
 8001a02:	7c3b      	ldrb	r3, [r7, #16]
 8001a04:	3301      	adds	r3, #1
 8001a06:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 8001a08:	7c3b      	ldrb	r3, [r7, #16]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d801      	bhi.n	8001a12 <RFID+0x56a>
 8001a0e:	7c3b      	ldrb	r3, [r7, #16]
 8001a10:	e000      	b.n	8001a14 <RFID+0x56c>
 8001a12:	2300      	movs	r3, #0
 8001a14:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 8001a16:	7c3b      	ldrb	r3, [r7, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <RFID+0x57a>
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d03b      	beq.n	8001a98 <RFID+0x5f0>
 8001a20:	e040      	b.n	8001aa4 <RFID+0x5fc>
						{
						case 0:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 8001a22:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <RFID+0x5e8>)
 8001a24:	491b      	ldr	r1, [pc, #108]	@ (8001a94 <RFID+0x5ec>)
 8001a26:	4804      	ldr	r0, [pc, #16]	@ (8001a38 <RFID+0x590>)
 8001a28:	f7fe fce8 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001a2c:	e040      	b.n	8001ab0 <RFID+0x608>
 8001a2e:	bf00      	nop
 8001a30:	0800dab0 	.word	0x0800dab0
 8001a34:	0800daa0 	.word	0x0800daa0
 8001a38:	200003d8 	.word	0x200003d8
 8001a3c:	0800db18 	.word	0x0800db18
 8001a40:	0800db2c 	.word	0x0800db2c
 8001a44:	0800dac4 	.word	0x0800dac4
 8001a48:	0800da60 	.word	0x0800da60
 8001a4c:	0800da70 	.word	0x0800da70
 8001a50:	0800da44 	.word	0x0800da44
 8001a54:	0800da50 	.word	0x0800da50
 8001a58:	20000020 	.word	0x20000020
 8001a5c:	0800db38 	.word	0x0800db38
 8001a60:	0800db48 	.word	0x0800db48
 8001a64:	0800db58 	.word	0x0800db58
 8001a68:	0800db68 	.word	0x0800db68
 8001a6c:	0800da3c 	.word	0x0800da3c
 8001a70:	0800dad8 	.word	0x0800dad8
 8001a74:	0800db78 	.word	0x0800db78
 8001a78:	0800daf8 	.word	0x0800daf8
 8001a7c:	0800db84 	.word	0x0800db84
 8001a80:	0800db90 	.word	0x0800db90
 8001a84:	0800da7c 	.word	0x0800da7c
 8001a88:	0800da10 	.word	0x0800da10
 8001a8c:	0800da00 	.word	0x0800da00
 8001a90:	0800db9c 	.word	0x0800db9c
 8001a94:	0800dbb0 	.word	0x0800dbb0
						case 1:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove ALL");
 8001a98:	4a9a      	ldr	r2, [pc, #616]	@ (8001d04 <RFID+0x85c>)
 8001a9a:	499b      	ldr	r1, [pc, #620]	@ (8001d08 <RFID+0x860>)
 8001a9c:	489b      	ldr	r0, [pc, #620]	@ (8001d0c <RFID+0x864>)
 8001a9e:	f7fe fcad 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001aa2:	e005      	b.n	8001ab0 <RFID+0x608>
						default:
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Back");
 8001aa4:	4a9a      	ldr	r2, [pc, #616]	@ (8001d10 <RFID+0x868>)
 8001aa6:	4998      	ldr	r1, [pc, #608]	@ (8001d08 <RFID+0x860>)
 8001aa8:	4898      	ldr	r0, [pc, #608]	@ (8001d0c <RFID+0x864>)
 8001aaa:	f7fe fca7 	bl	80003fc <CLCD_I2C_Display>
							break;
 8001aae:	bf00      	nop
						}
					}
					if (key_pressed =='#')
 8001ab0:	797b      	ldrb	r3, [r7, #5]
 8001ab2:	2b23      	cmp	r3, #35	@ 0x23
 8001ab4:	f040 839b 	bne.w	80021ee <RFID+0xd46>
					{
						CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001ab8:	4a96      	ldr	r2, [pc, #600]	@ (8001d14 <RFID+0x86c>)
 8001aba:	4997      	ldr	r1, [pc, #604]	@ (8001d18 <RFID+0x870>)
 8001abc:	4893      	ldr	r0, [pc, #588]	@ (8001d0c <RFID+0x864>)
 8001abe:	f7fe fc9d 	bl	80003fc <CLCD_I2C_Display>
						exitmenu = 15;
 8001ac2:	4b96      	ldr	r3, [pc, #600]	@ (8001d1c <RFID+0x874>)
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001ac8:	7c3b      	ldrb	r3, [r7, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <RFID+0x62e>
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	f000 8382 	beq.w	80021d8 <RFID+0xd30>
 8001ad4:	e388      	b.n	80021e8 <RFID+0xd40>
						{
						case 0:
							uint8_t statusrm1 = -1;
 8001ad6:	23ff      	movs	r3, #255	@ 0xff
 8001ad8:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8001ade:	e371      	b.n	80021c4 <RFID+0xd1c>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001ae0:	200a      	movs	r0, #10
 8001ae2:	f7fe fde5 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	717b      	strb	r3, [r7, #5]
								if (exitmenu == 0)
 8001aea:	4b8c      	ldr	r3, [pc, #560]	@ (8001d1c <RFID+0x874>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d107      	bne.n	8001b02 <RFID+0x65a>
								{
									CLCD_I2C_Clear(&LCD1);
 8001af2:	4886      	ldr	r0, [pc, #536]	@ (8001d0c <RFID+0x864>)
 8001af4:	f7fe fc72 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8001af8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001afc:	f002 fc24 	bl	8004348 <HAL_Delay>
									return;
 8001b00:	e393      	b.n	800222a <RFID+0xd82>
								}
								if (key_pressed =='*')
 8001b02:	797b      	ldrb	r3, [r7, #5]
 8001b04:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b06:	d121      	bne.n	8001b4c <RFID+0x6a4>
								{
									statusrm1++;
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001b0e:	7bbb      	ldrb	r3, [r7, #14]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d801      	bhi.n	8001b18 <RFID+0x670>
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	e000      	b.n	8001b1a <RFID+0x672>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001b1c:	7bbb      	ldrb	r3, [r7, #14]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <RFID+0x680>
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d006      	beq.n	8001b34 <RFID+0x68c>
 8001b26:	e00b      	b.n	8001b40 <RFID+0x698>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 8001b28:	4a7d      	ldr	r2, [pc, #500]	@ (8001d20 <RFID+0x878>)
 8001b2a:	497e      	ldr	r1, [pc, #504]	@ (8001d24 <RFID+0x87c>)
 8001b2c:	4877      	ldr	r0, [pc, #476]	@ (8001d0c <RFID+0x864>)
 8001b2e:	f7fe fc65 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001b32:	e00b      	b.n	8001b4c <RFID+0x6a4>
									case 1:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 8001b34:	4a7c      	ldr	r2, [pc, #496]	@ (8001d28 <RFID+0x880>)
 8001b36:	497b      	ldr	r1, [pc, #492]	@ (8001d24 <RFID+0x87c>)
 8001b38:	4874      	ldr	r0, [pc, #464]	@ (8001d0c <RFID+0x864>)
 8001b3a:	f7fe fc5f 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001b3e:	e005      	b.n	8001b4c <RFID+0x6a4>
									default:
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Back");
 8001b40:	4a73      	ldr	r2, [pc, #460]	@ (8001d10 <RFID+0x868>)
 8001b42:	4978      	ldr	r1, [pc, #480]	@ (8001d24 <RFID+0x87c>)
 8001b44:	4871      	ldr	r0, [pc, #452]	@ (8001d0c <RFID+0x864>)
 8001b46:	f7fe fc59 	bl	80003fc <CLCD_I2C_Display>
										break;
 8001b4a:	bf00      	nop
									}
								}
								if (key_pressed =='#')
 8001b4c:	797b      	ldrb	r3, [r7, #5]
 8001b4e:	2b23      	cmp	r3, #35	@ 0x23
 8001b50:	f040 8338 	bne.w	80021c4 <RFID+0xd1c>
								{
									exitmenu = 15;
 8001b54:	4b71      	ldr	r3, [pc, #452]	@ (8001d1c <RFID+0x874>)
 8001b56:	220f      	movs	r2, #15
 8001b58:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001b5a:	7bbb      	ldrb	r3, [r7, #14]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <RFID+0x6c0>
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	f000 82d0 	beq.w	8002106 <RFID+0xc5e>
 8001b66:	e32a      	b.n	80021be <RFID+0xd16>
									{
									case 0:
										CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001b68:	4a6a      	ldr	r2, [pc, #424]	@ (8001d14 <RFID+0x86c>)
 8001b6a:	496b      	ldr	r1, [pc, #428]	@ (8001d18 <RFID+0x870>)
 8001b6c:	4867      	ldr	r0, [pc, #412]	@ (8001d0c <RFID+0x864>)
 8001b6e:	f7fe fc45 	bl	80003fc <CLCD_I2C_Display>
										uint8_t statusadd = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8001b7a:	e2ba      	b.n	80020f2 <RFID+0xc4a>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001b7c:	200a      	movs	r0, #10
 8001b7e:	f7fe fd97 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001b82:	4603      	mov	r3, r0
 8001b84:	717b      	strb	r3, [r7, #5]
											if (exitmenu == 0)
 8001b86:	4b65      	ldr	r3, [pc, #404]	@ (8001d1c <RFID+0x874>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d107      	bne.n	8001b9e <RFID+0x6f6>
											{
												CLCD_I2C_Clear(&LCD1);
 8001b8e:	485f      	ldr	r0, [pc, #380]	@ (8001d0c <RFID+0x864>)
 8001b90:	f7fe fc24 	bl	80003dc <CLCD_I2C_Clear>
												HAL_Delay(1000);
 8001b94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b98:	f002 fbd6 	bl	8004348 <HAL_Delay>
												return;
 8001b9c:	e345      	b.n	800222a <RFID+0xd82>
											}
											if (key_pressed =='*')
 8001b9e:	797b      	ldrb	r3, [r7, #5]
 8001ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ba2:	d124      	bne.n	8001bee <RFID+0x746>
											{
												exitmenu = 15;
 8001ba4:	4b5d      	ldr	r3, [pc, #372]	@ (8001d1c <RFID+0x874>)
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001baa:	7b3b      	ldrb	r3, [r7, #12]
 8001bac:	3301      	adds	r3, #1
 8001bae:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001bb0:	7b3b      	ldrb	r3, [r7, #12]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d801      	bhi.n	8001bba <RFID+0x712>
 8001bb6:	7b3b      	ldrb	r3, [r7, #12]
 8001bb8:	e000      	b.n	8001bbc <RFID+0x714>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001bbe:	7b3b      	ldrb	r3, [r7, #12]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d002      	beq.n	8001bca <RFID+0x722>
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d006      	beq.n	8001bd6 <RFID+0x72e>
 8001bc8:	e00b      	b.n	8001be2 <RFID+0x73a>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001bca:	4a58      	ldr	r2, [pc, #352]	@ (8001d2c <RFID+0x884>)
 8001bcc:	4958      	ldr	r1, [pc, #352]	@ (8001d30 <RFID+0x888>)
 8001bce:	484f      	ldr	r0, [pc, #316]	@ (8001d0c <RFID+0x864>)
 8001bd0:	f7fe fc14 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001bd4:	e00b      	b.n	8001bee <RFID+0x746>
												case 2:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 8001bd6:	4a57      	ldr	r2, [pc, #348]	@ (8001d34 <RFID+0x88c>)
 8001bd8:	4955      	ldr	r1, [pc, #340]	@ (8001d30 <RFID+0x888>)
 8001bda:	484c      	ldr	r0, [pc, #304]	@ (8001d0c <RFID+0x864>)
 8001bdc:	f7fe fc0e 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001be0:	e005      	b.n	8001bee <RFID+0x746>
												default:
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> Back");													break;
 8001be2:	4a4b      	ldr	r2, [pc, #300]	@ (8001d10 <RFID+0x868>)
 8001be4:	4952      	ldr	r1, [pc, #328]	@ (8001d30 <RFID+0x888>)
 8001be6:	4849      	ldr	r0, [pc, #292]	@ (8001d0c <RFID+0x864>)
 8001be8:	f7fe fc08 	bl	80003fc <CLCD_I2C_Display>
 8001bec:	bf00      	nop
												}
											}
											if (key_pressed =='#')
 8001bee:	797b      	ldrb	r3, [r7, #5]
 8001bf0:	2b23      	cmp	r3, #35	@ 0x23
 8001bf2:	f040 827e 	bne.w	80020f2 <RFID+0xc4a>
											{
												exitmenu = 15;
 8001bf6:	4b49      	ldr	r3, [pc, #292]	@ (8001d1c <RFID+0x874>)
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001bfc:	7b3b      	ldrb	r3, [r7, #12]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d003      	beq.n	8001c0a <RFID+0x762>
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	f000 8143 	beq.w	8001e8e <RFID+0x9e6>
 8001c08:	e270      	b.n	80020ec <RFID+0xc44>
												{
												case 1:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001c0a:	4a42      	ldr	r2, [pc, #264]	@ (8001d14 <RFID+0x86c>)
 8001c0c:	4942      	ldr	r1, [pc, #264]	@ (8001d18 <RFID+0x870>)
 8001c0e:	483f      	ldr	r0, [pc, #252]	@ (8001d0c <RFID+0x864>)
 8001c10:	f7fe fbf4 	bl	80003fc <CLCD_I2C_Display>
													uint8_t statusadd1 = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 8001c1c:	e12d      	b.n	8001e7a <RFID+0x9d2>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001c1e:	200a      	movs	r0, #10
 8001c20:	f7fe fd46 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001c24:	4603      	mov	r3, r0
 8001c26:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001c28:	4b3c      	ldr	r3, [pc, #240]	@ (8001d1c <RFID+0x874>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <RFID+0x798>
														{
															CLCD_I2C_Clear(&LCD1);
 8001c30:	4836      	ldr	r0, [pc, #216]	@ (8001d0c <RFID+0x864>)
 8001c32:	f7fe fbd3 	bl	80003dc <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001c36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c3a:	f002 fb85 	bl	8004348 <HAL_Delay>
															return;
 8001c3e:	e2f4      	b.n	800222a <RFID+0xd82>
														}
														if (key_pressed =='*')
 8001c40:	797b      	ldrb	r3, [r7, #5]
 8001c42:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c44:	d12e      	bne.n	8001ca4 <RFID+0x7fc>
														{
															exitmenu = 15;
 8001c46:	4b35      	ldr	r3, [pc, #212]	@ (8001d1c <RFID+0x874>)
 8001c48:	220f      	movs	r2, #15
 8001c4a:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001c4c:	7abb      	ldrb	r3, [r7, #10]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 3) ? 0 : statusadd1;
 8001c52:	7abb      	ldrb	r3, [r7, #10]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d801      	bhi.n	8001c5c <RFID+0x7b4>
 8001c58:	7abb      	ldrb	r3, [r7, #10]
 8001c5a:	e000      	b.n	8001c5e <RFID+0x7b6>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001c60:	7abb      	ldrb	r3, [r7, #10]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d012      	beq.n	8001c8c <RFID+0x7e4>
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	dc16      	bgt.n	8001c98 <RFID+0x7f0>
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d002      	beq.n	8001c74 <RFID+0x7cc>
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d006      	beq.n	8001c80 <RFID+0x7d8>
 8001c72:	e011      	b.n	8001c98 <RFID+0x7f0>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001c74:	4a30      	ldr	r2, [pc, #192]	@ (8001d38 <RFID+0x890>)
 8001c76:	4931      	ldr	r1, [pc, #196]	@ (8001d3c <RFID+0x894>)
 8001c78:	4824      	ldr	r0, [pc, #144]	@ (8001d0c <RFID+0x864>)
 8001c7a:	f7fe fbbf 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001c7e:	e011      	b.n	8001ca4 <RFID+0x7fc>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001c80:	4a2f      	ldr	r2, [pc, #188]	@ (8001d40 <RFID+0x898>)
 8001c82:	492e      	ldr	r1, [pc, #184]	@ (8001d3c <RFID+0x894>)
 8001c84:	4821      	ldr	r0, [pc, #132]	@ (8001d0c <RFID+0x864>)
 8001c86:	f7fe fbb9 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001c8a:	e00b      	b.n	8001ca4 <RFID+0x7fc>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001d44 <RFID+0x89c>)
 8001c8e:	492b      	ldr	r1, [pc, #172]	@ (8001d3c <RFID+0x894>)
 8001c90:	481e      	ldr	r0, [pc, #120]	@ (8001d0c <RFID+0x864>)
 8001c92:	f7fe fbb3 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001c96:	e005      	b.n	8001ca4 <RFID+0x7fc>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> Back");
 8001c98:	4a1d      	ldr	r2, [pc, #116]	@ (8001d10 <RFID+0x868>)
 8001c9a:	4928      	ldr	r1, [pc, #160]	@ (8001d3c <RFID+0x894>)
 8001c9c:	481b      	ldr	r0, [pc, #108]	@ (8001d0c <RFID+0x864>)
 8001c9e:	f7fe fbad 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001ca2:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001ca4:	797b      	ldrb	r3, [r7, #5]
 8001ca6:	2b23      	cmp	r3, #35	@ 0x23
 8001ca8:	f040 80e7 	bne.w	8001e7a <RFID+0x9d2>
														{
															exitmenu = 15;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <RFID+0x874>)
 8001cae:	220f      	movs	r2, #15
 8001cb0:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001cb2:	7b3b      	ldrb	r3, [r7, #12]
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	7abb      	ldrb	r3, [r7, #10]
 8001cba:	4413      	add	r3, r2
 8001cbc:	70fb      	strb	r3, [r7, #3]
															switch (statusadd1)
 8001cbe:	7abb      	ldrb	r3, [r7, #10]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	f000 809f 	beq.w	8001e04 <RFID+0x95c>
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	f300 80d4 	bgt.w	8001e74 <RFID+0x9cc>
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d002      	beq.n	8001cd6 <RFID+0x82e>
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d05f      	beq.n	8001d94 <RFID+0x8ec>
 8001cd4:	e0ce      	b.n	8001e74 <RFID+0x9cc>
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 f903 	bl	8002ee4 <CheckKey>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d135      	bne.n	8001d50 <RFID+0x8a8>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 1", "  Do Not Exist");
 8001ce4:	4a18      	ldr	r2, [pc, #96]	@ (8001d48 <RFID+0x8a0>)
 8001ce6:	4919      	ldr	r1, [pc, #100]	@ (8001d4c <RFID+0x8a4>)
 8001ce8:	4808      	ldr	r0, [pc, #32]	@ (8001d0c <RFID+0x864>)
 8001cea:	f7fe fb87 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001cee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cf2:	f002 fb29 	bl	8004348 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001cf6:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <RFID+0x890>)
 8001cf8:	4910      	ldr	r1, [pc, #64]	@ (8001d3c <RFID+0x894>)
 8001cfa:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <RFID+0x864>)
 8001cfc:	f7fe fb7e 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
																	}
																}
																break;
 8001d00:	e0bb      	b.n	8001e7a <RFID+0x9d2>
 8001d02:	bf00      	nop
 8001d04:	0800dbc0 	.word	0x0800dbc0
 8001d08:	0800dbb0 	.word	0x0800dbb0
 8001d0c:	200003d8 	.word	0x200003d8
 8001d10:	0800da3c 	.word	0x0800da3c
 8001d14:	0800da44 	.word	0x0800da44
 8001d18:	0800da50 	.word	0x0800da50
 8001d1c:	20000020 	.word	0x20000020
 8001d20:	0800dbd0 	.word	0x0800dbd0
 8001d24:	0800dbe0 	.word	0x0800dbe0
 8001d28:	0800dbf0 	.word	0x0800dbf0
 8001d2c:	0800dc00 	.word	0x0800dc00
 8001d30:	0800dc14 	.word	0x0800dc14
 8001d34:	0800dc24 	.word	0x0800dc24
 8001d38:	0800dc34 	.word	0x0800dc34
 8001d3c:	0800dc44 	.word	0x0800dc44
 8001d40:	0800dc54 	.word	0x0800dc54
 8001d44:	0800dc64 	.word	0x0800dc64
 8001d48:	0800dc74 	.word	0x0800dc74
 8001d4c:	0800daec 	.word	0x0800daec
																	removeuid(CheckKey(keyadd1));
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 f8c6 	bl	8002ee4 <CheckKey>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f001 f8f0 	bl	8002f40 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 1 ","   SUCCESSFUL  ");
 8001d60:	4aab      	ldr	r2, [pc, #684]	@ (8002010 <RFID+0xb68>)
 8001d62:	49ac      	ldr	r1, [pc, #688]	@ (8002014 <RFID+0xb6c>)
 8001d64:	48ac      	ldr	r0, [pc, #688]	@ (8002018 <RFID+0xb70>)
 8001d66:	f7fe fb49 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001d6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d6e:	f002 faeb 	bl	8004348 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001d72:	f000 ff67 	bl	8002c44 <checkcountUID>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <RFID+0x8e0>
																		startadd();
 8001d7c:	f001 f8ee 	bl	8002f5c <startadd>
																		exitmenu = 0;
 8001d80:	4ba6      	ldr	r3, [pc, #664]	@ (800201c <RFID+0xb74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
																break;
 8001d86:	e078      	b.n	8001e7a <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 1");
 8001d88:	4aa5      	ldr	r2, [pc, #660]	@ (8002020 <RFID+0xb78>)
 8001d8a:	49a6      	ldr	r1, [pc, #664]	@ (8002024 <RFID+0xb7c>)
 8001d8c:	48a2      	ldr	r0, [pc, #648]	@ (8002018 <RFID+0xb70>)
 8001d8e:	f7fe fb35 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001d92:	e072      	b.n	8001e7a <RFID+0x9d2>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 f8a4 	bl	8002ee4 <CheckKey>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10e      	bne.n	8001dc0 <RFID+0x918>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 2", "  Do Not Exist");
 8001da2:	4aa1      	ldr	r2, [pc, #644]	@ (8002028 <RFID+0xb80>)
 8001da4:	49a1      	ldr	r1, [pc, #644]	@ (800202c <RFID+0xb84>)
 8001da6:	489c      	ldr	r0, [pc, #624]	@ (8002018 <RFID+0xb70>)
 8001da8:	f7fe fb28 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001dac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001db0:	f002 faca 	bl	8004348 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001db4:	4a9e      	ldr	r2, [pc, #632]	@ (8002030 <RFID+0xb88>)
 8001db6:	499b      	ldr	r1, [pc, #620]	@ (8002024 <RFID+0xb7c>)
 8001db8:	4897      	ldr	r0, [pc, #604]	@ (8002018 <RFID+0xb70>)
 8001dba:	f7fe fb1f 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
																	}
																}
																break;
 8001dbe:	e05c      	b.n	8001e7a <RFID+0x9d2>
																	removeuid(CheckKey(keyadd1));
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f001 f88e 	bl	8002ee4 <CheckKey>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 f8b8 	bl	8002f40 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 2 ","   SUCCESSFUL  ");
 8001dd0:	4a8f      	ldr	r2, [pc, #572]	@ (8002010 <RFID+0xb68>)
 8001dd2:	4998      	ldr	r1, [pc, #608]	@ (8002034 <RFID+0xb8c>)
 8001dd4:	4890      	ldr	r0, [pc, #576]	@ (8002018 <RFID+0xb70>)
 8001dd6:	f7fe fb11 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001dda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dde:	f002 fab3 	bl	8004348 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001de2:	f000 ff2f 	bl	8002c44 <checkcountUID>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <RFID+0x950>
																		startadd();
 8001dec:	f001 f8b6 	bl	8002f5c <startadd>
																		exitmenu = 0;
 8001df0:	4b8a      	ldr	r3, [pc, #552]	@ (800201c <RFID+0xb74>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
																break;
 8001df6:	e040      	b.n	8001e7a <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 2");
 8001df8:	4a8d      	ldr	r2, [pc, #564]	@ (8002030 <RFID+0xb88>)
 8001dfa:	498a      	ldr	r1, [pc, #552]	@ (8002024 <RFID+0xb7c>)
 8001dfc:	4886      	ldr	r0, [pc, #536]	@ (8002018 <RFID+0xb70>)
 8001dfe:	f7fe fafd 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001e02:	e03a      	b.n	8001e7a <RFID+0x9d2>
															case 3:
																if (CheckKey(keyadd1) == 0)
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 f86c 	bl	8002ee4 <CheckKey>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10e      	bne.n	8001e30 <RFID+0x988>
																{
																	CLCD_I2C_Display(&LCD1, "    ADMIN 3", "  Do Not Exist");
 8001e12:	4a85      	ldr	r2, [pc, #532]	@ (8002028 <RFID+0xb80>)
 8001e14:	4988      	ldr	r1, [pc, #544]	@ (8002038 <RFID+0xb90>)
 8001e16:	4880      	ldr	r0, [pc, #512]	@ (8002018 <RFID+0xb70>)
 8001e18:	f7fe faf0 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001e1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e20:	f002 fa92 	bl	8004348 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001e24:	4a85      	ldr	r2, [pc, #532]	@ (800203c <RFID+0xb94>)
 8001e26:	497f      	ldr	r1, [pc, #508]	@ (8002024 <RFID+0xb7c>)
 8001e28:	487b      	ldr	r0, [pc, #492]	@ (8002018 <RFID+0xb70>)
 8001e2a:	f7fe fae7 	bl	80003fc <CLCD_I2C_Display>
																	else
																	{
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
																	}
																}
																break;
 8001e2e:	e024      	b.n	8001e7a <RFID+0x9d2>
																	removeuid(CheckKey(keyadd1));
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 f856 	bl	8002ee4 <CheckKey>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 f880 	bl	8002f40 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE ADCARD 3 ","   SUCCESSFUL  ");
 8001e40:	4a73      	ldr	r2, [pc, #460]	@ (8002010 <RFID+0xb68>)
 8001e42:	497f      	ldr	r1, [pc, #508]	@ (8002040 <RFID+0xb98>)
 8001e44:	4874      	ldr	r0, [pc, #464]	@ (8002018 <RFID+0xb70>)
 8001e46:	f7fe fad9 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001e4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e4e:	f002 fa7b 	bl	8004348 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001e52:	f000 fef7 	bl	8002c44 <checkcountUID>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <RFID+0x9c0>
																		startadd();
 8001e5c:	f001 f87e 	bl	8002f5c <startadd>
																		exitmenu = 0;
 8001e60:	4b6e      	ldr	r3, [pc, #440]	@ (800201c <RFID+0xb74>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
																break;
 8001e66:	e008      	b.n	8001e7a <RFID+0x9d2>
																		CLCD_I2C_Display(&LCD1,"MODE: RM ADMIN","=> RM Admin 3");
 8001e68:	4a74      	ldr	r2, [pc, #464]	@ (800203c <RFID+0xb94>)
 8001e6a:	496e      	ldr	r1, [pc, #440]	@ (8002024 <RFID+0xb7c>)
 8001e6c:	486a      	ldr	r0, [pc, #424]	@ (8002018 <RFID+0xb70>)
 8001e6e:	f7fe fac5 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001e72:	e002      	b.n	8001e7a <RFID+0x9d2>
															default:
																back11 = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	727b      	strb	r3, [r7, #9]
																break;
 8001e78:	bf00      	nop
													while (back11 == 1)
 8001e7a:	7a7b      	ldrb	r3, [r7, #9]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	f43f aece 	beq.w	8001c1e <RFID+0x776>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM Admin Card");
 8001e82:	4a70      	ldr	r2, [pc, #448]	@ (8002044 <RFID+0xb9c>)
 8001e84:	4970      	ldr	r1, [pc, #448]	@ (8002048 <RFID+0xba0>)
 8001e86:	4864      	ldr	r0, [pc, #400]	@ (8002018 <RFID+0xb70>)
 8001e88:	f7fe fab8 	bl	80003fc <CLCD_I2C_Display>
													break;
 8001e8c:	e131      	b.n	80020f2 <RFID+0xc4a>
												case 2:
													CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 8001e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800204c <RFID+0xba4>)
 8001e90:	496f      	ldr	r1, [pc, #444]	@ (8002050 <RFID+0xba8>)
 8001e92:	4861      	ldr	r0, [pc, #388]	@ (8002018 <RFID+0xb70>)
 8001e94:	f7fe fab2 	bl	80003fc <CLCD_I2C_Display>
													uint8_t statusadd2 = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 8001ea0:	e11a      	b.n	80020d8 <RFID+0xc30>
													{
														key_pressed = KeyPad_WaitForKeyGetChar(10);
 8001ea2:	200a      	movs	r0, #10
 8001ea4:	f7fe fc04 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	717b      	strb	r3, [r7, #5]
														if (exitmenu == 0)
 8001eac:	4b5b      	ldr	r3, [pc, #364]	@ (800201c <RFID+0xb74>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <RFID+0xa1c>
														{
															CLCD_I2C_Clear(&LCD1);
 8001eb4:	4858      	ldr	r0, [pc, #352]	@ (8002018 <RFID+0xb70>)
 8001eb6:	f7fe fa91 	bl	80003dc <CLCD_I2C_Clear>
															HAL_Delay(1000);
 8001eba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ebe:	f002 fa43 	bl	8004348 <HAL_Delay>
															return;
 8001ec2:	e1b2      	b.n	800222a <RFID+0xd82>
														}
														if (key_pressed =='*')
 8001ec4:	797b      	ldrb	r3, [r7, #5]
 8001ec6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ec8:	d12e      	bne.n	8001f28 <RFID+0xa80>
														{
															exitmenu = 15;
 8001eca:	4b54      	ldr	r3, [pc, #336]	@ (800201c <RFID+0xb74>)
 8001ecc:	220f      	movs	r2, #15
 8001ece:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8001ed0:	7a3b      	ldrb	r3, [r7, #8]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 3) ? 0 : statusadd2;
 8001ed6:	7a3b      	ldrb	r3, [r7, #8]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d801      	bhi.n	8001ee0 <RFID+0xa38>
 8001edc:	7a3b      	ldrb	r3, [r7, #8]
 8001ede:	e000      	b.n	8001ee2 <RFID+0xa3a>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 8001ee4:	7a3b      	ldrb	r3, [r7, #8]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d012      	beq.n	8001f10 <RFID+0xa68>
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	dc16      	bgt.n	8001f1c <RFID+0xa74>
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d002      	beq.n	8001ef8 <RFID+0xa50>
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d006      	beq.n	8001f04 <RFID+0xa5c>
 8001ef6:	e011      	b.n	8001f1c <RFID+0xa74>
															{
															case 1:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001ef8:	4a56      	ldr	r2, [pc, #344]	@ (8002054 <RFID+0xbac>)
 8001efa:	4957      	ldr	r1, [pc, #348]	@ (8002058 <RFID+0xbb0>)
 8001efc:	4846      	ldr	r0, [pc, #280]	@ (8002018 <RFID+0xb70>)
 8001efe:	f7fe fa7d 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001f02:	e011      	b.n	8001f28 <RFID+0xa80>
															case 2:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001f04:	4a55      	ldr	r2, [pc, #340]	@ (800205c <RFID+0xbb4>)
 8001f06:	4954      	ldr	r1, [pc, #336]	@ (8002058 <RFID+0xbb0>)
 8001f08:	4843      	ldr	r0, [pc, #268]	@ (8002018 <RFID+0xb70>)
 8001f0a:	f7fe fa77 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001f0e:	e00b      	b.n	8001f28 <RFID+0xa80>
															case 3:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8001f10:	4a53      	ldr	r2, [pc, #332]	@ (8002060 <RFID+0xbb8>)
 8001f12:	4951      	ldr	r1, [pc, #324]	@ (8002058 <RFID+0xbb0>)
 8001f14:	4840      	ldr	r0, [pc, #256]	@ (8002018 <RFID+0xb70>)
 8001f16:	f7fe fa71 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001f1a:	e005      	b.n	8001f28 <RFID+0xa80>
															default:
																CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> Back");
 8001f1c:	4a51      	ldr	r2, [pc, #324]	@ (8002064 <RFID+0xbbc>)
 8001f1e:	494e      	ldr	r1, [pc, #312]	@ (8002058 <RFID+0xbb0>)
 8001f20:	483d      	ldr	r0, [pc, #244]	@ (8002018 <RFID+0xb70>)
 8001f22:	f7fe fa6b 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001f26:	bf00      	nop
															}
														}
														if (key_pressed =='#')
 8001f28:	797b      	ldrb	r3, [r7, #5]
 8001f2a:	2b23      	cmp	r3, #35	@ 0x23
 8001f2c:	f040 80d4 	bne.w	80020d8 <RFID+0xc30>
														{
															exitmenu = 15;
 8001f30:	4b3a      	ldr	r3, [pc, #232]	@ (800201c <RFID+0xb74>)
 8001f32:	220f      	movs	r2, #15
 8001f34:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8001f36:	7b3b      	ldrb	r3, [r7, #12]
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	7a3b      	ldrb	r3, [r7, #8]
 8001f3e:	4413      	add	r3, r2
 8001f40:	713b      	strb	r3, [r7, #4]
															switch (statusadd2)
 8001f42:	7a3b      	ldrb	r3, [r7, #8]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	f000 8097 	beq.w	8002078 <RFID+0xbd0>
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	f300 80c1 	bgt.w	80020d2 <RFID+0xc2a>
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d002      	beq.n	8001f5a <RFID+0xab2>
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d02d      	beq.n	8001fb4 <RFID+0xb0c>
 8001f58:	e0bb      	b.n	80020d2 <RFID+0xc2a>
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 8001f5a:	793b      	ldrb	r3, [r7, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 ffc1 	bl	8002ee4 <CheckKey>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10e      	bne.n	8001f86 <RFID+0xade>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 1","  Do Not Exist");
 8001f68:	4a2f      	ldr	r2, [pc, #188]	@ (8002028 <RFID+0xb80>)
 8001f6a:	493f      	ldr	r1, [pc, #252]	@ (8002068 <RFID+0xbc0>)
 8001f6c:	482a      	ldr	r0, [pc, #168]	@ (8002018 <RFID+0xb70>)
 8001f6e:	f7fe fa45 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001f72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f76:	f002 f9e7 	bl	8004348 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001f7a:	4a36      	ldr	r2, [pc, #216]	@ (8002054 <RFID+0xbac>)
 8001f7c:	4936      	ldr	r1, [pc, #216]	@ (8002058 <RFID+0xbb0>)
 8001f7e:	4826      	ldr	r0, [pc, #152]	@ (8002018 <RFID+0xb70>)
 8001f80:	f7fe fa3c 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
																}
																break;
 8001f84:	e0a8      	b.n	80020d8 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 8001f86:	793b      	ldrb	r3, [r7, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 ffab 	bl	8002ee4 <CheckKey>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 ffd5 	bl	8002f40 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 1 ","   SUCCESSFUL  ");
 8001f96:	4a1e      	ldr	r2, [pc, #120]	@ (8002010 <RFID+0xb68>)
 8001f98:	4934      	ldr	r1, [pc, #208]	@ (800206c <RFID+0xbc4>)
 8001f9a:	481f      	ldr	r0, [pc, #124]	@ (8002018 <RFID+0xb70>)
 8001f9c:	f7fe fa2e 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001fa0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fa4:	f002 f9d0 	bl	8004348 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 1");
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8002054 <RFID+0xbac>)
 8001faa:	492b      	ldr	r1, [pc, #172]	@ (8002058 <RFID+0xbb0>)
 8001fac:	481a      	ldr	r0, [pc, #104]	@ (8002018 <RFID+0xb70>)
 8001fae:	f7fe fa25 	bl	80003fc <CLCD_I2C_Display>
																break;
 8001fb2:	e091      	b.n	80020d8 <RFID+0xc30>
															case 2:
																if (CheckKey(keyadd2) == 0)
 8001fb4:	793b      	ldrb	r3, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 ff94 	bl	8002ee4 <CheckKey>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10e      	bne.n	8001fe0 <RFID+0xb38>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 2","  Do Not Exist");
 8001fc2:	4a19      	ldr	r2, [pc, #100]	@ (8002028 <RFID+0xb80>)
 8001fc4:	492a      	ldr	r1, [pc, #168]	@ (8002070 <RFID+0xbc8>)
 8001fc6:	4814      	ldr	r0, [pc, #80]	@ (8002018 <RFID+0xb70>)
 8001fc8:	f7fe fa18 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001fcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fd0:	f002 f9ba 	bl	8004348 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8001fd4:	4a21      	ldr	r2, [pc, #132]	@ (800205c <RFID+0xbb4>)
 8001fd6:	4920      	ldr	r1, [pc, #128]	@ (8002058 <RFID+0xbb0>)
 8001fd8:	480f      	ldr	r0, [pc, #60]	@ (8002018 <RFID+0xb70>)
 8001fda:	f7fe fa0f 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
																}
																break;
 8001fde:	e07b      	b.n	80020d8 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 8001fe0:	793b      	ldrb	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 ff7e 	bl	8002ee4 <CheckKey>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 ffa8 	bl	8002f40 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 2 ","   SUCCESSFUL  ");
 8001ff0:	4a07      	ldr	r2, [pc, #28]	@ (8002010 <RFID+0xb68>)
 8001ff2:	4920      	ldr	r1, [pc, #128]	@ (8002074 <RFID+0xbcc>)
 8001ff4:	4808      	ldr	r0, [pc, #32]	@ (8002018 <RFID+0xb70>)
 8001ff6:	f7fe fa01 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8001ffa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ffe:	f002 f9a3 	bl	8004348 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 2");
 8002002:	4a16      	ldr	r2, [pc, #88]	@ (800205c <RFID+0xbb4>)
 8002004:	4914      	ldr	r1, [pc, #80]	@ (8002058 <RFID+0xbb0>)
 8002006:	4804      	ldr	r0, [pc, #16]	@ (8002018 <RFID+0xb70>)
 8002008:	f7fe f9f8 	bl	80003fc <CLCD_I2C_Display>
																break;
 800200c:	e064      	b.n	80020d8 <RFID+0xc30>
 800200e:	bf00      	nop
 8002010:	0800dc84 	.word	0x0800dc84
 8002014:	0800dc94 	.word	0x0800dc94
 8002018:	200003d8 	.word	0x200003d8
 800201c:	20000020 	.word	0x20000020
 8002020:	0800dc34 	.word	0x0800dc34
 8002024:	0800dc44 	.word	0x0800dc44
 8002028:	0800dc74 	.word	0x0800dc74
 800202c:	0800db0c 	.word	0x0800db0c
 8002030:	0800dc54 	.word	0x0800dc54
 8002034:	0800dca8 	.word	0x0800dca8
 8002038:	0800db2c 	.word	0x0800db2c
 800203c:	0800dc64 	.word	0x0800dc64
 8002040:	0800dcbc 	.word	0x0800dcbc
 8002044:	0800dc00 	.word	0x0800dc00
 8002048:	0800dc14 	.word	0x0800dc14
 800204c:	0800da44 	.word	0x0800da44
 8002050:	0800da50 	.word	0x0800da50
 8002054:	0800dcd0 	.word	0x0800dcd0
 8002058:	0800dce0 	.word	0x0800dce0
 800205c:	0800dcf0 	.word	0x0800dcf0
 8002060:	0800dd00 	.word	0x0800dd00
 8002064:	0800da3c 	.word	0x0800da3c
 8002068:	0800db78 	.word	0x0800db78
 800206c:	0800dd10 	.word	0x0800dd10
 8002070:	0800db84 	.word	0x0800db84
 8002074:	0800dd24 	.word	0x0800dd24
															case 3:
																if (CheckKey(keyadd2) == 0)
 8002078:	793b      	ldrb	r3, [r7, #4]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 ff32 	bl	8002ee4 <CheckKey>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10e      	bne.n	80020a4 <RFID+0xbfc>
																{
																	CLCD_I2C_Display(&LCD1, "     USER 3","  Do Not Exist");
 8002086:	4a6a      	ldr	r2, [pc, #424]	@ (8002230 <RFID+0xd88>)
 8002088:	496a      	ldr	r1, [pc, #424]	@ (8002234 <RFID+0xd8c>)
 800208a:	486b      	ldr	r0, [pc, #428]	@ (8002238 <RFID+0xd90>)
 800208c:	f7fe f9b6 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 8002090:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002094:	f002 f958 	bl	8004348 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 8002098:	4a68      	ldr	r2, [pc, #416]	@ (800223c <RFID+0xd94>)
 800209a:	4969      	ldr	r1, [pc, #420]	@ (8002240 <RFID+0xd98>)
 800209c:	4866      	ldr	r0, [pc, #408]	@ (8002238 <RFID+0xd90>)
 800209e:	f7fe f9ad 	bl	80003fc <CLCD_I2C_Display>
																	removeuid(CheckKey(keyadd2));
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
																	HAL_Delay(1000);
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
																}
																break;
 80020a2:	e019      	b.n	80020d8 <RFID+0xc30>
																	removeuid(CheckKey(keyadd2));
 80020a4:	793b      	ldrb	r3, [r7, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 ff1c 	bl	8002ee4 <CheckKey>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 ff46 	bl	8002f40 <removeuid>
																	CLCD_I2C_Display(&LCD1,"  REMOVE USCARD 3 ","   SUCCESSFUL  ");
 80020b4:	4a63      	ldr	r2, [pc, #396]	@ (8002244 <RFID+0xd9c>)
 80020b6:	4964      	ldr	r1, [pc, #400]	@ (8002248 <RFID+0xda0>)
 80020b8:	485f      	ldr	r0, [pc, #380]	@ (8002238 <RFID+0xd90>)
 80020ba:	f7fe f99f 	bl	80003fc <CLCD_I2C_Display>
																	HAL_Delay(1000);
 80020be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020c2:	f002 f941 	bl	8004348 <HAL_Delay>
																	CLCD_I2C_Display(&LCD1,"MODE: RM USER","=> RM User 3");
 80020c6:	4a5d      	ldr	r2, [pc, #372]	@ (800223c <RFID+0xd94>)
 80020c8:	495d      	ldr	r1, [pc, #372]	@ (8002240 <RFID+0xd98>)
 80020ca:	485b      	ldr	r0, [pc, #364]	@ (8002238 <RFID+0xd90>)
 80020cc:	f7fe f996 	bl	80003fc <CLCD_I2C_Display>
																break;
 80020d0:	e002      	b.n	80020d8 <RFID+0xc30>
															default:
																back12 = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	71fb      	strb	r3, [r7, #7]
																break;
 80020d6:	bf00      	nop
													while (back12 == 1)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	f43f aee1 	beq.w	8001ea2 <RFID+0x9fa>
															}
														}
													}
													CLCD_I2C_Display(&LCD1,"MODE: RM SELECT","=> RM User Card");
 80020e0:	4a5a      	ldr	r2, [pc, #360]	@ (800224c <RFID+0xda4>)
 80020e2:	495b      	ldr	r1, [pc, #364]	@ (8002250 <RFID+0xda8>)
 80020e4:	4854      	ldr	r0, [pc, #336]	@ (8002238 <RFID+0xd90>)
 80020e6:	f7fe f989 	bl	80003fc <CLCD_I2C_Display>
													break;
 80020ea:	e002      	b.n	80020f2 <RFID+0xc4a>
												default:
													backrm10 = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	72fb      	strb	r3, [r7, #11]
													break;
 80020f0:	bf00      	nop
										while (backrm10 == 1)
 80020f2:	7afb      	ldrb	r3, [r7, #11]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	f43f ad41 	beq.w	8001b7c <RFID+0x6d4>
												}
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Select Card");
 80020fa:	4a56      	ldr	r2, [pc, #344]	@ (8002254 <RFID+0xdac>)
 80020fc:	4956      	ldr	r1, [pc, #344]	@ (8002258 <RFID+0xdb0>)
 80020fe:	484e      	ldr	r0, [pc, #312]	@ (8002238 <RFID+0xd90>)
 8002100:	f7fe f97c 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002104:	e05e      	b.n	80021c4 <RFID+0xd1c>
									case 1:
										CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8002106:	4a55      	ldr	r2, [pc, #340]	@ (800225c <RFID+0xdb4>)
 8002108:	4955      	ldr	r1, [pc, #340]	@ (8002260 <RFID+0xdb8>)
 800210a:	484b      	ldr	r0, [pc, #300]	@ (8002238 <RFID+0xd90>)
 800210c:	f7fe f976 	bl	80003fc <CLCD_I2C_Display>
										uint8_t rmquet = 1;
 8002110:	2301      	movs	r3, #1
 8002112:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002114:	e04a      	b.n	80021ac <RFID+0xd04>
										{
											key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002116:	200a      	movs	r0, #10
 8002118:	f7fe faca 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800211c:	4603      	mov	r3, r0
 800211e:	717b      	strb	r3, [r7, #5]
											if (TM_MFRC522_Check(CardID) == MI_OK)
 8002120:	4850      	ldr	r0, [pc, #320]	@ (8002264 <RFID+0xdbc>)
 8002122:	f001 fc79 	bl	8003a18 <TM_MFRC522_Check>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d13a      	bne.n	80021a2 <RFID+0xcfa>
											{
												if (CheckListUID(CardID) != 0)
 800212c:	484d      	ldr	r0, [pc, #308]	@ (8002264 <RFID+0xdbc>)
 800212e:	f000 fd59 	bl	8002be4 <CheckListUID>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d026      	beq.n	8002186 <RFID+0xcde>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 8002138:	484a      	ldr	r0, [pc, #296]	@ (8002264 <RFID+0xdbc>)
 800213a:	f000 fd53 	bl	8002be4 <CheckListUID>
 800213e:	4603      	mov	r3, r0
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fecf 	bl	8002ee4 <CheckKey>
 8002146:	4603      	mov	r3, r0
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fef9 	bl	8002f40 <removeuid>
													CLCD_I2C_Display(&LCD1,"  DELETE CARD ","   SUCCESSFUL  ");
 800214e:	4a3d      	ldr	r2, [pc, #244]	@ (8002244 <RFID+0xd9c>)
 8002150:	4945      	ldr	r1, [pc, #276]	@ (8002268 <RFID+0xdc0>)
 8002152:	4839      	ldr	r0, [pc, #228]	@ (8002238 <RFID+0xd90>)
 8002154:	f7fe f952 	bl	80003fc <CLCD_I2C_Display>
													HAL_Delay(1000);
 8002158:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800215c:	f002 f8f4 	bl	8004348 <HAL_Delay>
													if (checkcountUID() == 0)
 8002160:	f000 fd70 	bl	8002c44 <checkcountUID>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d107      	bne.n	800217a <RFID+0xcd2>
													{
														startadd();
 800216a:	f000 fef7 	bl	8002f5c <startadd>
														rmquet = 1;
 800216e:	2301      	movs	r3, #1
 8002170:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 8002172:	4b3e      	ldr	r3, [pc, #248]	@ (800226c <RFID+0xdc4>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
														return;
 8002178:	e057      	b.n	800222a <RFID+0xd82>
													}else{
														CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 800217a:	4a38      	ldr	r2, [pc, #224]	@ (800225c <RFID+0xdb4>)
 800217c:	4938      	ldr	r1, [pc, #224]	@ (8002260 <RFID+0xdb8>)
 800217e:	482e      	ldr	r0, [pc, #184]	@ (8002238 <RFID+0xd90>)
 8002180:	f7fe f93c 	bl	80003fc <CLCD_I2C_Display>
 8002184:	e00d      	b.n	80021a2 <RFID+0xcfa>
													}

												}
												else
												{
													CLCD_I2C_Display(&LCD1, "   THIS CARD","  Do Not Exist");
 8002186:	4a2a      	ldr	r2, [pc, #168]	@ (8002230 <RFID+0xd88>)
 8002188:	4939      	ldr	r1, [pc, #228]	@ (8002270 <RFID+0xdc8>)
 800218a:	482b      	ldr	r0, [pc, #172]	@ (8002238 <RFID+0xd90>)
 800218c:	f7fe f936 	bl	80003fc <CLCD_I2C_Display>
													HAL_Delay(1000);
 8002190:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002194:	f002 f8d8 	bl	8004348 <HAL_Delay>
													CLCD_I2C_Display(&LCD1,"PLS SCAN CARD","=> Back");
 8002198:	4a30      	ldr	r2, [pc, #192]	@ (800225c <RFID+0xdb4>)
 800219a:	4931      	ldr	r1, [pc, #196]	@ (8002260 <RFID+0xdb8>)
 800219c:	4826      	ldr	r0, [pc, #152]	@ (8002238 <RFID+0xd90>)
 800219e:	f7fe f92d 	bl	80003fc <CLCD_I2C_Display>
												}
											}
											if (key_pressed =='#')
 80021a2:	797b      	ldrb	r3, [r7, #5]
 80021a4:	2b23      	cmp	r3, #35	@ 0x23
 80021a6:	d101      	bne.n	80021ac <RFID+0xd04>
											{
												rmquet = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 80021ac:	79bb      	ldrb	r3, [r7, #6]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1b1      	bne.n	8002116 <RFID+0xc6e>
											}
										}
										CLCD_I2C_Display(&LCD1,"MODE: REMOVE 1","=> Scan Card");
 80021b2:	4a30      	ldr	r2, [pc, #192]	@ (8002274 <RFID+0xdcc>)
 80021b4:	4928      	ldr	r1, [pc, #160]	@ (8002258 <RFID+0xdb0>)
 80021b6:	4820      	ldr	r0, [pc, #128]	@ (8002238 <RFID+0xd90>)
 80021b8:	f7fe f920 	bl	80003fc <CLCD_I2C_Display>
										break;
 80021bc:	e002      	b.n	80021c4 <RFID+0xd1c>
									default:
										backrm1 = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	737b      	strb	r3, [r7, #13]
										break;
 80021c2:	bf00      	nop
							while (backrm1 == 1)
 80021c4:	7b7b      	ldrb	r3, [r7, #13]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	f43f ac8a 	beq.w	8001ae0 <RFID+0x638>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"CARD: REMOVE","=> Remove 1 Card");
 80021cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002278 <RFID+0xdd0>)
 80021ce:	492b      	ldr	r1, [pc, #172]	@ (800227c <RFID+0xdd4>)
 80021d0:	4819      	ldr	r0, [pc, #100]	@ (8002238 <RFID+0xd90>)
 80021d2:	f7fe f913 	bl	80003fc <CLCD_I2C_Display>
							break;
 80021d6:	e00a      	b.n	80021ee <RFID+0xd46>
						case 1:
							remoall();
 80021d8:	f000 ff30 	bl	800303c <remoall>
							startadd();
 80021dc:	f000 febe 	bl	8002f5c <startadd>
							exitmenu = 0;
 80021e0:	4b22      	ldr	r3, [pc, #136]	@ (800226c <RFID+0xdc4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
							break;
 80021e6:	e002      	b.n	80021ee <RFID+0xd46>
						default:
							backrm = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
							break;
 80021ec:	bf00      	nop
				while (backrm == 1)
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f43f abee 	beq.w	80019d2 <RFID+0x52a>
						}
					}
				}
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Remove Card");
 80021f6:	4a22      	ldr	r2, [pc, #136]	@ (8002280 <RFID+0xdd8>)
 80021f8:	4922      	ldr	r1, [pc, #136]	@ (8002284 <RFID+0xddc>)
 80021fa:	480f      	ldr	r0, [pc, #60]	@ (8002238 <RFID+0xd90>)
 80021fc:	f7fe f8fe 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002200:	e00b      	b.n	800221a <RFID+0xd72>
			case 2:
				checkthe();
 8002202:	f000 fdc1 	bl	8002d88 <checkthe>
				CLCD_I2C_Display(&LCD1," RFID SETTINGS ","=> Check Card");
 8002206:	4a20      	ldr	r2, [pc, #128]	@ (8002288 <RFID+0xde0>)
 8002208:	491e      	ldr	r1, [pc, #120]	@ (8002284 <RFID+0xddc>)
 800220a:	480b      	ldr	r0, [pc, #44]	@ (8002238 <RFID+0xd90>)
 800220c:	f7fe f8f6 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002210:	e003      	b.n	800221a <RFID+0xd72>
			default:
				exitmenu = 0;
 8002212:	4b16      	ldr	r3, [pc, #88]	@ (800226c <RFID+0xdc4>)
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
				break;
 8002218:	bf00      	nop
	while (exitmenu )
 800221a:	4b14      	ldr	r3, [pc, #80]	@ (800226c <RFID+0xdc4>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f47f a951 	bne.w	80014c6 <RFID+0x1e>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002224:	4804      	ldr	r0, [pc, #16]	@ (8002238 <RFID+0xd90>)
 8002226:	f7fe f8d9 	bl	80003dc <CLCD_I2C_Clear>
}
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	0800dc74 	.word	0x0800dc74
 8002234:	0800db90 	.word	0x0800db90
 8002238:	200003d8 	.word	0x200003d8
 800223c:	0800dd00 	.word	0x0800dd00
 8002240:	0800dce0 	.word	0x0800dce0
 8002244:	0800dc84 	.word	0x0800dc84
 8002248:	0800dd38 	.word	0x0800dd38
 800224c:	0800dc24 	.word	0x0800dc24
 8002250:	0800dc14 	.word	0x0800dc14
 8002254:	0800dbd0 	.word	0x0800dbd0
 8002258:	0800dbe0 	.word	0x0800dbe0
 800225c:	0800da3c 	.word	0x0800da3c
 8002260:	0800dd4c 	.word	0x0800dd4c
 8002264:	200003e4 	.word	0x200003e4
 8002268:	0800dd5c 	.word	0x0800dd5c
 800226c:	20000020 	.word	0x20000020
 8002270:	0800dd6c 	.word	0x0800dd6c
 8002274:	0800dbf0 	.word	0x0800dbf0
 8002278:	0800db9c 	.word	0x0800db9c
 800227c:	0800dbb0 	.word	0x0800dbb0
 8002280:	0800da1c 	.word	0x0800da1c
 8002284:	0800da00 	.word	0x0800da00
 8002288:	0800da2c 	.word	0x0800da2c

0800228c <FACEID>:
void FACEID(void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
	exitmenu = Delaymenu;
 8002292:	4ba8      	ldr	r3, [pc, #672]	@ (8002534 <FACEID+0x2a8>)
 8002294:	2214      	movs	r2, #20
 8002296:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002298:	23ff      	movs	r3, #255	@ 0xff
 800229a:	73fb      	strb	r3, [r7, #15]
	CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","Pls Press DOWN");
 800229c:	4aa6      	ldr	r2, [pc, #664]	@ (8002538 <FACEID+0x2ac>)
 800229e:	49a7      	ldr	r1, [pc, #668]	@ (800253c <FACEID+0x2b0>)
 80022a0:	48a7      	ldr	r0, [pc, #668]	@ (8002540 <FACEID+0x2b4>)
 80022a2:	f7fe f8ab 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 80022a6:	e34f      	b.n	8002948 <FACEID+0x6bc>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80022a8:	200a      	movs	r0, #10
 80022aa:	f7fe fa01 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80022ae:	4603      	mov	r3, r0
 80022b0:	723b      	strb	r3, [r7, #8]
		if (key_pressed == '*')
 80022b2:	7a3b      	ldrb	r3, [r7, #8]
 80022b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80022b6:	d124      	bne.n	8002302 <FACEID+0x76>
		{
			exitmenu = Delaymenu;
 80022b8:	4b9e      	ldr	r3, [pc, #632]	@ (8002534 <FACEID+0x2a8>)
 80022ba:	2214      	movs	r2, #20
 80022bc:	701a      	strb	r2, [r3, #0]
			status++;
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	3301      	adds	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
			status = (status > 2) ? 0 : status;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d801      	bhi.n	80022ce <FACEID+0x42>
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	e000      	b.n	80022d0 <FACEID+0x44>
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
			switch (status)
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <FACEID+0x52>
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d006      	beq.n	80022ea <FACEID+0x5e>
 80022dc:	e00b      	b.n	80022f6 <FACEID+0x6a>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 80022de:	4a99      	ldr	r2, [pc, #612]	@ (8002544 <FACEID+0x2b8>)
 80022e0:	4996      	ldr	r1, [pc, #600]	@ (800253c <FACEID+0x2b0>)
 80022e2:	4897      	ldr	r0, [pc, #604]	@ (8002540 <FACEID+0x2b4>)
 80022e4:	f7fe f88a 	bl	80003fc <CLCD_I2C_Display>
				break;
 80022e8:	e00b      	b.n	8002302 <FACEID+0x76>
			case 1:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 80022ea:	4a97      	ldr	r2, [pc, #604]	@ (8002548 <FACEID+0x2bc>)
 80022ec:	4993      	ldr	r1, [pc, #588]	@ (800253c <FACEID+0x2b0>)
 80022ee:	4894      	ldr	r0, [pc, #592]	@ (8002540 <FACEID+0x2b4>)
 80022f0:	f7fe f884 	bl	80003fc <CLCD_I2C_Display>
				break;
 80022f4:	e005      	b.n	8002302 <FACEID+0x76>
			default:
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Back");
 80022f6:	4a95      	ldr	r2, [pc, #596]	@ (800254c <FACEID+0x2c0>)
 80022f8:	4990      	ldr	r1, [pc, #576]	@ (800253c <FACEID+0x2b0>)
 80022fa:	4891      	ldr	r0, [pc, #580]	@ (8002540 <FACEID+0x2b4>)
 80022fc:	f7fe f87e 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002300:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002302:	7a3b      	ldrb	r3, [r7, #8]
 8002304:	2b23      	cmp	r3, #35	@ 0x23
 8002306:	f040 831f 	bne.w	8002948 <FACEID+0x6bc>
		{
			exitmenu = Delaymenu;
 800230a:	4b8a      	ldr	r3, [pc, #552]	@ (8002534 <FACEID+0x2a8>)
 800230c:	2214      	movs	r2, #20
 800230e:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <FACEID+0x92>
 8002316:	2b01      	cmp	r3, #1
 8002318:	f000 8101 	beq.w	800251e <FACEID+0x292>
 800231c:	e310      	b.n	8002940 <FACEID+0x6b4>
			{
			case 0:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800231e:	4a8c      	ldr	r2, [pc, #560]	@ (8002550 <FACEID+0x2c4>)
 8002320:	498c      	ldr	r1, [pc, #560]	@ (8002554 <FACEID+0x2c8>)
 8002322:	4887      	ldr	r0, [pc, #540]	@ (8002540 <FACEID+0x2b4>)
 8002324:	f7fe f86a 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusadd = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	73bb      	strb	r3, [r7, #14]
				uint8_t back = 1;
 800232c:	2301      	movs	r3, #1
 800232e:	737b      	strb	r3, [r7, #13]
				while (back == 1)
 8002330:	e0eb      	b.n	800250a <FACEID+0x27e>
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002332:	200a      	movs	r0, #10
 8002334:	f7fe f9bc 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002338:	4603      	mov	r3, r0
 800233a:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 800233c:	4b7d      	ldr	r3, [pc, #500]	@ (8002534 <FACEID+0x2a8>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <FACEID+0xc8>
					{
						CLCD_I2C_Clear(&LCD1);
 8002344:	487e      	ldr	r0, [pc, #504]	@ (8002540 <FACEID+0x2b4>)
 8002346:	f7fe f849 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 800234a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800234e:	f001 fffb 	bl	8004348 <HAL_Delay>
						return;
 8002352:	e301      	b.n	8002958 <FACEID+0x6cc>
					}
					if (key_pressed == '*')
 8002354:	7a3b      	ldrb	r3, [r7, #8]
 8002356:	2b2a      	cmp	r3, #42	@ 0x2a
 8002358:	d13a      	bne.n	80023d0 <FACEID+0x144>
					{
						exitmenu = Delaymenu;
 800235a:	4b76      	ldr	r3, [pc, #472]	@ (8002534 <FACEID+0x2a8>)
 800235c:	2214      	movs	r2, #20
 800235e:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8002360:	7bbb      	ldrb	r3, [r7, #14]
 8002362:	3301      	adds	r3, #1
 8002364:	73bb      	strb	r3, [r7, #14]
						statusadd = (statusadd > 4) ? 0 : statusadd;
 8002366:	7bbb      	ldrb	r3, [r7, #14]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d801      	bhi.n	8002370 <FACEID+0xe4>
 800236c:	7bbb      	ldrb	r3, [r7, #14]
 800236e:	e000      	b.n	8002372 <FACEID+0xe6>
 8002370:	2300      	movs	r3, #0
 8002372:	73bb      	strb	r3, [r7, #14]
						switch (statusadd)
 8002374:	7bbb      	ldrb	r3, [r7, #14]
 8002376:	3b01      	subs	r3, #1
 8002378:	2b03      	cmp	r3, #3
 800237a:	d823      	bhi.n	80023c4 <FACEID+0x138>
 800237c:	a201      	add	r2, pc, #4	@ (adr r2, 8002384 <FACEID+0xf8>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	08002395 	.word	0x08002395
 8002388:	080023a1 	.word	0x080023a1
 800238c:	080023ad 	.word	0x080023ad
 8002390:	080023b9 	.word	0x080023b9
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002394:	4a70      	ldr	r2, [pc, #448]	@ (8002558 <FACEID+0x2cc>)
 8002396:	4971      	ldr	r1, [pc, #452]	@ (800255c <FACEID+0x2d0>)
 8002398:	4869      	ldr	r0, [pc, #420]	@ (8002540 <FACEID+0x2b4>)
 800239a:	f7fe f82f 	bl	80003fc <CLCD_I2C_Display>
							break;
 800239e:	e017      	b.n	80023d0 <FACEID+0x144>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 80023a0:	4a6f      	ldr	r2, [pc, #444]	@ (8002560 <FACEID+0x2d4>)
 80023a2:	496e      	ldr	r1, [pc, #440]	@ (800255c <FACEID+0x2d0>)
 80023a4:	4866      	ldr	r0, [pc, #408]	@ (8002540 <FACEID+0x2b4>)
 80023a6:	f7fe f829 	bl	80003fc <CLCD_I2C_Display>
							break;
 80023aa:	e011      	b.n	80023d0 <FACEID+0x144>
						case 3:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 80023ac:	4a6d      	ldr	r2, [pc, #436]	@ (8002564 <FACEID+0x2d8>)
 80023ae:	496b      	ldr	r1, [pc, #428]	@ (800255c <FACEID+0x2d0>)
 80023b0:	4863      	ldr	r0, [pc, #396]	@ (8002540 <FACEID+0x2b4>)
 80023b2:	f7fe f823 	bl	80003fc <CLCD_I2C_Display>
							break;
 80023b6:	e00b      	b.n	80023d0 <FACEID+0x144>
						case 4:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80023b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002568 <FACEID+0x2dc>)
 80023ba:	4968      	ldr	r1, [pc, #416]	@ (800255c <FACEID+0x2d0>)
 80023bc:	4860      	ldr	r0, [pc, #384]	@ (8002540 <FACEID+0x2b4>)
 80023be:	f7fe f81d 	bl	80003fc <CLCD_I2C_Display>
							break;
 80023c2:	e005      	b.n	80023d0 <FACEID+0x144>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> Back");
 80023c4:	4a61      	ldr	r2, [pc, #388]	@ (800254c <FACEID+0x2c0>)
 80023c6:	4965      	ldr	r1, [pc, #404]	@ (800255c <FACEID+0x2d0>)
 80023c8:	485d      	ldr	r0, [pc, #372]	@ (8002540 <FACEID+0x2b4>)
 80023ca:	f7fe f817 	bl	80003fc <CLCD_I2C_Display>
							break;
 80023ce:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 80023d0:	7a3b      	ldrb	r3, [r7, #8]
 80023d2:	2b23      	cmp	r3, #35	@ 0x23
 80023d4:	f040 8099 	bne.w	800250a <FACEID+0x27e>
					{
						exitmenu = Delaymenu;
 80023d8:	4b56      	ldr	r3, [pc, #344]	@ (8002534 <FACEID+0x2a8>)
 80023da:	2214      	movs	r2, #20
 80023dc:	701a      	strb	r2, [r3, #0]
						uint8_t keyadd1 = statusadd;
 80023de:	7bbb      	ldrb	r3, [r7, #14]
 80023e0:	71bb      	strb	r3, [r7, #6]
						switch (statusadd)
 80023e2:	7bbb      	ldrb	r3, [r7, #14]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	f200 808c 	bhi.w	8002504 <FACEID+0x278>
 80023ec:	a201      	add	r2, pc, #4	@ (adr r2, 80023f4 <FACEID+0x168>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	08002405 	.word	0x08002405
 80023f8:	08002445 	.word	0x08002445
 80023fc:	08002485 	.word	0x08002485
 8002400:	080024c5 	.word	0x080024c5
						{
						case 1:
							if (checkfaceid(keyadd1) != 0)
 8002404:	79bb      	ldrb	r3, [r7, #6]
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fef4 	bl	80031f4 <checkfaceid>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00e      	beq.n	8002430 <FACEID+0x1a4>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 1"," Face 1 Existed ");
 8002412:	4a56      	ldr	r2, [pc, #344]	@ (800256c <FACEID+0x2e0>)
 8002414:	4956      	ldr	r1, [pc, #344]	@ (8002570 <FACEID+0x2e4>)
 8002416:	484a      	ldr	r0, [pc, #296]	@ (8002540 <FACEID+0x2b4>)
 8002418:	f7fd fff0 	bl	80003fc <CLCD_I2C_Display>
								HAL_Delay(1000);
 800241c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002420:	f001 ff92 	bl	8004348 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002424:	4a4c      	ldr	r2, [pc, #304]	@ (8002558 <FACEID+0x2cc>)
 8002426:	494d      	ldr	r1, [pc, #308]	@ (800255c <FACEID+0x2d0>)
 8002428:	4845      	ldr	r0, [pc, #276]	@ (8002540 <FACEID+0x2b4>)
 800242a:	f7fd ffe7 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
							}
							break;
 800242e:	e06c      	b.n	800250a <FACEID+0x27e>
								addface(keyadd1);
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fe28 	bl	8003088 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 1");
 8002438:	4a47      	ldr	r2, [pc, #284]	@ (8002558 <FACEID+0x2cc>)
 800243a:	4948      	ldr	r1, [pc, #288]	@ (800255c <FACEID+0x2d0>)
 800243c:	4840      	ldr	r0, [pc, #256]	@ (8002540 <FACEID+0x2b4>)
 800243e:	f7fd ffdd 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002442:	e062      	b.n	800250a <FACEID+0x27e>
						case 2:
							if (checkfaceid(keyadd1) != 0)
 8002444:	79bb      	ldrb	r3, [r7, #6]
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fed4 	bl	80031f4 <checkfaceid>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00e      	beq.n	8002470 <FACEID+0x1e4>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 2"," Face 2 Existed ");
 8002452:	4a48      	ldr	r2, [pc, #288]	@ (8002574 <FACEID+0x2e8>)
 8002454:	4948      	ldr	r1, [pc, #288]	@ (8002578 <FACEID+0x2ec>)
 8002456:	483a      	ldr	r0, [pc, #232]	@ (8002540 <FACEID+0x2b4>)
 8002458:	f7fd ffd0 	bl	80003fc <CLCD_I2C_Display>
								HAL_Delay(1000);
 800245c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002460:	f001 ff72 	bl	8004348 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002464:	4a3e      	ldr	r2, [pc, #248]	@ (8002560 <FACEID+0x2d4>)
 8002466:	493d      	ldr	r1, [pc, #244]	@ (800255c <FACEID+0x2d0>)
 8002468:	4835      	ldr	r0, [pc, #212]	@ (8002540 <FACEID+0x2b4>)
 800246a:	f7fd ffc7 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
							}
							break;
 800246e:	e04c      	b.n	800250a <FACEID+0x27e>
								addface(keyadd1);
 8002470:	79bb      	ldrb	r3, [r7, #6]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fe08 	bl	8003088 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 2");
 8002478:	4a39      	ldr	r2, [pc, #228]	@ (8002560 <FACEID+0x2d4>)
 800247a:	4938      	ldr	r1, [pc, #224]	@ (800255c <FACEID+0x2d0>)
 800247c:	4830      	ldr	r0, [pc, #192]	@ (8002540 <FACEID+0x2b4>)
 800247e:	f7fd ffbd 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002482:	e042      	b.n	800250a <FACEID+0x27e>
						case 3:
							if (checkfaceid(keyadd1) != 0)
 8002484:	79bb      	ldrb	r3, [r7, #6]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 feb4 	bl	80031f4 <checkfaceid>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00e      	beq.n	80024b0 <FACEID+0x224>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 3"," Face 3 Existed ");
 8002492:	4a3a      	ldr	r2, [pc, #232]	@ (800257c <FACEID+0x2f0>)
 8002494:	493a      	ldr	r1, [pc, #232]	@ (8002580 <FACEID+0x2f4>)
 8002496:	482a      	ldr	r0, [pc, #168]	@ (8002540 <FACEID+0x2b4>)
 8002498:	f7fd ffb0 	bl	80003fc <CLCD_I2C_Display>
								HAL_Delay(1000);
 800249c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024a0:	f001 ff52 	bl	8004348 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 80024a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002564 <FACEID+0x2d8>)
 80024a6:	492d      	ldr	r1, [pc, #180]	@ (800255c <FACEID+0x2d0>)
 80024a8:	4825      	ldr	r0, [pc, #148]	@ (8002540 <FACEID+0x2b4>)
 80024aa:	f7fd ffa7 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
							}
							break;
 80024ae:	e02c      	b.n	800250a <FACEID+0x27e>
								addface(keyadd1);
 80024b0:	79bb      	ldrb	r3, [r7, #6]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fde8 	bl	8003088 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 3");
 80024b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002564 <FACEID+0x2d8>)
 80024ba:	4928      	ldr	r1, [pc, #160]	@ (800255c <FACEID+0x2d0>)
 80024bc:	4820      	ldr	r0, [pc, #128]	@ (8002540 <FACEID+0x2b4>)
 80024be:	f7fd ff9d 	bl	80003fc <CLCD_I2C_Display>
							break;
 80024c2:	e022      	b.n	800250a <FACEID+0x27e>
						case 4:
							if (checkfaceid(keyadd1) != 0)
 80024c4:	79bb      	ldrb	r3, [r7, #6]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fe94 	bl	80031f4 <checkfaceid>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00e      	beq.n	80024f0 <FACEID+0x264>
							{
								CLCD_I2C_Display(&LCD1,"    FACEID 4"," Face 4 Existed ");
 80024d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002584 <FACEID+0x2f8>)
 80024d4:	492c      	ldr	r1, [pc, #176]	@ (8002588 <FACEID+0x2fc>)
 80024d6:	481a      	ldr	r0, [pc, #104]	@ (8002540 <FACEID+0x2b4>)
 80024d8:	f7fd ff90 	bl	80003fc <CLCD_I2C_Display>
								HAL_Delay(1000);
 80024dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024e0:	f001 ff32 	bl	8004348 <HAL_Delay>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80024e4:	4a20      	ldr	r2, [pc, #128]	@ (8002568 <FACEID+0x2dc>)
 80024e6:	491d      	ldr	r1, [pc, #116]	@ (800255c <FACEID+0x2d0>)
 80024e8:	4815      	ldr	r0, [pc, #84]	@ (8002540 <FACEID+0x2b4>)
 80024ea:	f7fd ff87 	bl	80003fc <CLCD_I2C_Display>
							else
							{
								addface(keyadd1);
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
							}
							break;
 80024ee:	e00c      	b.n	800250a <FACEID+0x27e>
								addface(keyadd1);
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fdc8 	bl	8003088 <addface>
								CLCD_I2C_Display(&LCD1,"FACEID: ADD","=> FaceID 4");
 80024f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002568 <FACEID+0x2dc>)
 80024fa:	4918      	ldr	r1, [pc, #96]	@ (800255c <FACEID+0x2d0>)
 80024fc:	4810      	ldr	r0, [pc, #64]	@ (8002540 <FACEID+0x2b4>)
 80024fe:	f7fd ff7d 	bl	80003fc <CLCD_I2C_Display>
							break;
 8002502:	e002      	b.n	800250a <FACEID+0x27e>
						default:
							back = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	737b      	strb	r3, [r7, #13]
							break;
 8002508:	bf00      	nop
				while (back == 1)
 800250a:	7b7b      	ldrb	r3, [r7, #13]
 800250c:	2b01      	cmp	r3, #1
 800250e:	f43f af10 	beq.w	8002332 <FACEID+0xa6>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Add FaceID");
 8002512:	4a0c      	ldr	r2, [pc, #48]	@ (8002544 <FACEID+0x2b8>)
 8002514:	4909      	ldr	r1, [pc, #36]	@ (800253c <FACEID+0x2b0>)
 8002516:	480a      	ldr	r0, [pc, #40]	@ (8002540 <FACEID+0x2b4>)
 8002518:	f7fd ff70 	bl	80003fc <CLCD_I2C_Display>
				break;
 800251c:	e214      	b.n	8002948 <FACEID+0x6bc>
			case 1:
				CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800251e:	4a0c      	ldr	r2, [pc, #48]	@ (8002550 <FACEID+0x2c4>)
 8002520:	490c      	ldr	r1, [pc, #48]	@ (8002554 <FACEID+0x2c8>)
 8002522:	4807      	ldr	r0, [pc, #28]	@ (8002540 <FACEID+0x2b4>)
 8002524:	f7fd ff6a 	bl	80003fc <CLCD_I2C_Display>
				uint8_t statusrm = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	733b      	strb	r3, [r7, #12]
				uint8_t backrm = 1;
 800252c:	2301      	movs	r3, #1
 800252e:	72fb      	strb	r3, [r7, #11]
				while (backrm == 1)
 8002530:	e1fc      	b.n	800292c <FACEID+0x6a0>
 8002532:	bf00      	nop
 8002534:	20000020 	.word	0x20000020
 8002538:	0800d9f0 	.word	0x0800d9f0
 800253c:	0800dd7c 	.word	0x0800dd7c
 8002540:	200003d8 	.word	0x200003d8
 8002544:	0800dd90 	.word	0x0800dd90
 8002548:	0800dda0 	.word	0x0800dda0
 800254c:	0800da3c 	.word	0x0800da3c
 8002550:	0800da44 	.word	0x0800da44
 8002554:	0800da50 	.word	0x0800da50
 8002558:	0800ddb4 	.word	0x0800ddb4
 800255c:	0800ddc0 	.word	0x0800ddc0
 8002560:	0800ddcc 	.word	0x0800ddcc
 8002564:	0800ddd8 	.word	0x0800ddd8
 8002568:	0800dde4 	.word	0x0800dde4
 800256c:	0800ddf0 	.word	0x0800ddf0
 8002570:	0800de04 	.word	0x0800de04
 8002574:	0800de14 	.word	0x0800de14
 8002578:	0800de28 	.word	0x0800de28
 800257c:	0800de38 	.word	0x0800de38
 8002580:	0800de4c 	.word	0x0800de4c
 8002584:	0800de5c 	.word	0x0800de5c
 8002588:	0800de70 	.word	0x0800de70
				{
					key_pressed = KeyPad_WaitForKeyGetChar(10);
 800258c:	200a      	movs	r0, #10
 800258e:	f7fe f88f 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002592:	4603      	mov	r3, r0
 8002594:	723b      	strb	r3, [r7, #8]
					if (exitmenu == 0)
 8002596:	4bac      	ldr	r3, [pc, #688]	@ (8002848 <FACEID+0x5bc>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d107      	bne.n	80025ae <FACEID+0x322>
					{
						CLCD_I2C_Clear(&LCD1);
 800259e:	48ab      	ldr	r0, [pc, #684]	@ (800284c <FACEID+0x5c0>)
 80025a0:	f7fd ff1c 	bl	80003dc <CLCD_I2C_Clear>
						HAL_Delay(1000);
 80025a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025a8:	f001 fece 	bl	8004348 <HAL_Delay>
						return;
 80025ac:	e1d4      	b.n	8002958 <FACEID+0x6cc>
					}
					if (key_pressed == '*')
 80025ae:	7a3b      	ldrb	r3, [r7, #8]
 80025b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80025b2:	d124      	bne.n	80025fe <FACEID+0x372>
					{
						exitmenu = Delaymenu;
 80025b4:	4ba4      	ldr	r3, [pc, #656]	@ (8002848 <FACEID+0x5bc>)
 80025b6:	2214      	movs	r2, #20
 80025b8:	701a      	strb	r2, [r3, #0]
						statusrm++;
 80025ba:	7b3b      	ldrb	r3, [r7, #12]
 80025bc:	3301      	adds	r3, #1
 80025be:	733b      	strb	r3, [r7, #12]
						statusrm = (statusrm > 2) ? 0 : statusrm;
 80025c0:	7b3b      	ldrb	r3, [r7, #12]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d801      	bhi.n	80025ca <FACEID+0x33e>
 80025c6:	7b3b      	ldrb	r3, [r7, #12]
 80025c8:	e000      	b.n	80025cc <FACEID+0x340>
 80025ca:	2300      	movs	r3, #0
 80025cc:	733b      	strb	r3, [r7, #12]
						switch (statusrm)
 80025ce:	7b3b      	ldrb	r3, [r7, #12]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d002      	beq.n	80025da <FACEID+0x34e>
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d006      	beq.n	80025e6 <FACEID+0x35a>
 80025d8:	e00b      	b.n	80025f2 <FACEID+0x366>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 80025da:	4a9d      	ldr	r2, [pc, #628]	@ (8002850 <FACEID+0x5c4>)
 80025dc:	499d      	ldr	r1, [pc, #628]	@ (8002854 <FACEID+0x5c8>)
 80025de:	489b      	ldr	r0, [pc, #620]	@ (800284c <FACEID+0x5c0>)
 80025e0:	f7fd ff0c 	bl	80003fc <CLCD_I2C_Display>
							break;
 80025e4:	e00b      	b.n	80025fe <FACEID+0x372>
						case 2:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
 80025e6:	4a9c      	ldr	r2, [pc, #624]	@ (8002858 <FACEID+0x5cc>)
 80025e8:	499a      	ldr	r1, [pc, #616]	@ (8002854 <FACEID+0x5c8>)
 80025ea:	4898      	ldr	r0, [pc, #608]	@ (800284c <FACEID+0x5c0>)
 80025ec:	f7fd ff06 	bl	80003fc <CLCD_I2C_Display>
							break;
 80025f0:	e005      	b.n	80025fe <FACEID+0x372>
						default:
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Back");
 80025f2:	4a9a      	ldr	r2, [pc, #616]	@ (800285c <FACEID+0x5d0>)
 80025f4:	4997      	ldr	r1, [pc, #604]	@ (8002854 <FACEID+0x5c8>)
 80025f6:	4895      	ldr	r0, [pc, #596]	@ (800284c <FACEID+0x5c0>)
 80025f8:	f7fd ff00 	bl	80003fc <CLCD_I2C_Display>
							break;
 80025fc:	bf00      	nop
						}
					}
					if (key_pressed == '#')
 80025fe:	7a3b      	ldrb	r3, [r7, #8]
 8002600:	2b23      	cmp	r3, #35	@ 0x23
 8002602:	f040 8193 	bne.w	800292c <FACEID+0x6a0>
					{
						exitmenu = Delaymenu;
 8002606:	4b90      	ldr	r3, [pc, #576]	@ (8002848 <FACEID+0x5bc>)
 8002608:	2214      	movs	r2, #20
 800260a:	701a      	strb	r2, [r3, #0]
						switch (statusrm)
 800260c:	7b3b      	ldrb	r3, [r7, #12]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d003      	beq.n	800261a <FACEID+0x38e>
 8002612:	2b02      	cmp	r3, #2
 8002614:	f000 8155 	beq.w	80028c2 <FACEID+0x636>
 8002618:	e185      	b.n	8002926 <FACEID+0x69a>
						{
						case 1:
							CLCD_I2C_Display(&LCD1,"  Please Press","      DOWN");
 800261a:	4a91      	ldr	r2, [pc, #580]	@ (8002860 <FACEID+0x5d4>)
 800261c:	4991      	ldr	r1, [pc, #580]	@ (8002864 <FACEID+0x5d8>)
 800261e:	488b      	ldr	r0, [pc, #556]	@ (800284c <FACEID+0x5c0>)
 8002620:	f7fd feec 	bl	80003fc <CLCD_I2C_Display>
							uint8_t statusrm1 = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	72bb      	strb	r3, [r7, #10]
							uint8_t backrm1 = 1;
 8002628:	2301      	movs	r3, #1
 800262a:	727b      	strb	r3, [r7, #9]
							while (backrm1 == 1)
 800262c:	e13f      	b.n	80028ae <FACEID+0x622>
							{
								key_pressed = KeyPad_WaitForKeyGetChar(10);
 800262e:	200a      	movs	r0, #10
 8002630:	f7fe f83e 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002634:	4603      	mov	r3, r0
 8002636:	723b      	strb	r3, [r7, #8]
								if (exitmenu == 0)
 8002638:	4b83      	ldr	r3, [pc, #524]	@ (8002848 <FACEID+0x5bc>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <FACEID+0x3c4>
								{
									CLCD_I2C_Clear(&LCD1);
 8002640:	4882      	ldr	r0, [pc, #520]	@ (800284c <FACEID+0x5c0>)
 8002642:	f7fd fecb 	bl	80003dc <CLCD_I2C_Clear>
									HAL_Delay(1000);
 8002646:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800264a:	f001 fe7d 	bl	8004348 <HAL_Delay>
									return;
 800264e:	e183      	b.n	8002958 <FACEID+0x6cc>
								}
								if (key_pressed == '*')
 8002650:	7a3b      	ldrb	r3, [r7, #8]
 8002652:	2b2a      	cmp	r3, #42	@ 0x2a
 8002654:	d13a      	bne.n	80026cc <FACEID+0x440>
								{
									exitmenu = Delaymenu;
 8002656:	4b7c      	ldr	r3, [pc, #496]	@ (8002848 <FACEID+0x5bc>)
 8002658:	2214      	movs	r2, #20
 800265a:	701a      	strb	r2, [r3, #0]
									statusrm1++;
 800265c:	7abb      	ldrb	r3, [r7, #10]
 800265e:	3301      	adds	r3, #1
 8002660:	72bb      	strb	r3, [r7, #10]
									statusrm1 = (statusrm1 > 4) ? 0 : statusrm1;
 8002662:	7abb      	ldrb	r3, [r7, #10]
 8002664:	2b04      	cmp	r3, #4
 8002666:	d801      	bhi.n	800266c <FACEID+0x3e0>
 8002668:	7abb      	ldrb	r3, [r7, #10]
 800266a:	e000      	b.n	800266e <FACEID+0x3e2>
 800266c:	2300      	movs	r3, #0
 800266e:	72bb      	strb	r3, [r7, #10]
									switch (statusrm1)
 8002670:	7abb      	ldrb	r3, [r7, #10]
 8002672:	3b01      	subs	r3, #1
 8002674:	2b03      	cmp	r3, #3
 8002676:	d823      	bhi.n	80026c0 <FACEID+0x434>
 8002678:	a201      	add	r2, pc, #4	@ (adr r2, 8002680 <FACEID+0x3f4>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	08002691 	.word	0x08002691
 8002684:	0800269d 	.word	0x0800269d
 8002688:	080026a9 	.word	0x080026a9
 800268c:	080026b5 	.word	0x080026b5
									{
									case 1:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002690:	4a75      	ldr	r2, [pc, #468]	@ (8002868 <FACEID+0x5dc>)
 8002692:	4976      	ldr	r1, [pc, #472]	@ (800286c <FACEID+0x5e0>)
 8002694:	486d      	ldr	r0, [pc, #436]	@ (800284c <FACEID+0x5c0>)
 8002696:	f7fd feb1 	bl	80003fc <CLCD_I2C_Display>
										break;
 800269a:	e017      	b.n	80026cc <FACEID+0x440>
									case 2:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 800269c:	4a74      	ldr	r2, [pc, #464]	@ (8002870 <FACEID+0x5e4>)
 800269e:	4973      	ldr	r1, [pc, #460]	@ (800286c <FACEID+0x5e0>)
 80026a0:	486a      	ldr	r0, [pc, #424]	@ (800284c <FACEID+0x5c0>)
 80026a2:	f7fd feab 	bl	80003fc <CLCD_I2C_Display>
										break;
 80026a6:	e011      	b.n	80026cc <FACEID+0x440>
									case 3:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80026a8:	4a72      	ldr	r2, [pc, #456]	@ (8002874 <FACEID+0x5e8>)
 80026aa:	4970      	ldr	r1, [pc, #448]	@ (800286c <FACEID+0x5e0>)
 80026ac:	4867      	ldr	r0, [pc, #412]	@ (800284c <FACEID+0x5c0>)
 80026ae:	f7fd fea5 	bl	80003fc <CLCD_I2C_Display>
										break;
 80026b2:	e00b      	b.n	80026cc <FACEID+0x440>
									case 4:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 80026b4:	4a70      	ldr	r2, [pc, #448]	@ (8002878 <FACEID+0x5ec>)
 80026b6:	496d      	ldr	r1, [pc, #436]	@ (800286c <FACEID+0x5e0>)
 80026b8:	4864      	ldr	r0, [pc, #400]	@ (800284c <FACEID+0x5c0>)
 80026ba:	f7fd fe9f 	bl	80003fc <CLCD_I2C_Display>
										break;
 80026be:	e005      	b.n	80026cc <FACEID+0x440>
									default:
										CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=>  Back ");
 80026c0:	4a6e      	ldr	r2, [pc, #440]	@ (800287c <FACEID+0x5f0>)
 80026c2:	496a      	ldr	r1, [pc, #424]	@ (800286c <FACEID+0x5e0>)
 80026c4:	4861      	ldr	r0, [pc, #388]	@ (800284c <FACEID+0x5c0>)
 80026c6:	f7fd fe99 	bl	80003fc <CLCD_I2C_Display>
										break;
 80026ca:	bf00      	nop
									}
								}
								if (key_pressed == '#')
 80026cc:	7a3b      	ldrb	r3, [r7, #8]
 80026ce:	2b23      	cmp	r3, #35	@ 0x23
 80026d0:	f040 80ed 	bne.w	80028ae <FACEID+0x622>
								{
									exitmenu = Delaymenu;
 80026d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002848 <FACEID+0x5bc>)
 80026d6:	2214      	movs	r2, #20
 80026d8:	701a      	strb	r2, [r3, #0]
									uint8_t keyrm1 = statusrm1;
 80026da:	7abb      	ldrb	r3, [r7, #10]
 80026dc:	71fb      	strb	r3, [r7, #7]
									switch (keyrm1)
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	f200 80e0 	bhi.w	80028a8 <FACEID+0x61c>
 80026e8:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <FACEID+0x464>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002701 	.word	0x08002701
 80026f4:	08002753 	.word	0x08002753
 80026f8:	080027a5 	.word	0x080027a5
 80026fc:	080027f7 	.word	0x080027f7
									{
									case 1:
										if (checkfaceid(keyrm1) == 0)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fd76 	bl	80031f4 <checkfaceid>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10e      	bne.n	800272c <FACEID+0x4a0>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 1", "  Do Not Exist");
 800270e:	4a5c      	ldr	r2, [pc, #368]	@ (8002880 <FACEID+0x5f4>)
 8002710:	495c      	ldr	r1, [pc, #368]	@ (8002884 <FACEID+0x5f8>)
 8002712:	484e      	ldr	r0, [pc, #312]	@ (800284c <FACEID+0x5c0>)
 8002714:	f7fd fe72 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002718:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800271c:	f001 fe14 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002720:	4a51      	ldr	r2, [pc, #324]	@ (8002868 <FACEID+0x5dc>)
 8002722:	4952      	ldr	r1, [pc, #328]	@ (800286c <FACEID+0x5e0>)
 8002724:	4849      	ldr	r0, [pc, #292]	@ (800284c <FACEID+0x5c0>)
 8002726:	f7fd fe69 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
										}
										break;
 800272a:	e0c0      	b.n	80028ae <FACEID+0x622>
											removeface(keyrm1);
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fd06 	bl	8003140 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 1","   SUCCESSFUL  ");
 8002734:	4a54      	ldr	r2, [pc, #336]	@ (8002888 <FACEID+0x5fc>)
 8002736:	4955      	ldr	r1, [pc, #340]	@ (800288c <FACEID+0x600>)
 8002738:	4844      	ldr	r0, [pc, #272]	@ (800284c <FACEID+0x5c0>)
 800273a:	f7fd fe5f 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800273e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002742:	f001 fe01 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 1");
 8002746:	4a48      	ldr	r2, [pc, #288]	@ (8002868 <FACEID+0x5dc>)
 8002748:	4948      	ldr	r1, [pc, #288]	@ (800286c <FACEID+0x5e0>)
 800274a:	4840      	ldr	r0, [pc, #256]	@ (800284c <FACEID+0x5c0>)
 800274c:	f7fd fe56 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002750:	e0ad      	b.n	80028ae <FACEID+0x622>
									case 2:
										if (checkfaceid(keyrm1) == 0)
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fd4d 	bl	80031f4 <checkfaceid>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10e      	bne.n	800277e <FACEID+0x4f2>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 2", "  Do Not Exist");
 8002760:	4a47      	ldr	r2, [pc, #284]	@ (8002880 <FACEID+0x5f4>)
 8002762:	494b      	ldr	r1, [pc, #300]	@ (8002890 <FACEID+0x604>)
 8002764:	4839      	ldr	r0, [pc, #228]	@ (800284c <FACEID+0x5c0>)
 8002766:	f7fd fe49 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800276a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800276e:	f001 fdeb 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002772:	4a3f      	ldr	r2, [pc, #252]	@ (8002870 <FACEID+0x5e4>)
 8002774:	493d      	ldr	r1, [pc, #244]	@ (800286c <FACEID+0x5e0>)
 8002776:	4835      	ldr	r0, [pc, #212]	@ (800284c <FACEID+0x5c0>)
 8002778:	f7fd fe40 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
										}
										break;
 800277c:	e097      	b.n	80028ae <FACEID+0x622>
											removeface(keyrm1);
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fcdd 	bl	8003140 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 2","   SUCCESSFUL  ");
 8002786:	4a40      	ldr	r2, [pc, #256]	@ (8002888 <FACEID+0x5fc>)
 8002788:	4942      	ldr	r1, [pc, #264]	@ (8002894 <FACEID+0x608>)
 800278a:	4830      	ldr	r0, [pc, #192]	@ (800284c <FACEID+0x5c0>)
 800278c:	f7fd fe36 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002794:	f001 fdd8 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 2");
 8002798:	4a35      	ldr	r2, [pc, #212]	@ (8002870 <FACEID+0x5e4>)
 800279a:	4934      	ldr	r1, [pc, #208]	@ (800286c <FACEID+0x5e0>)
 800279c:	482b      	ldr	r0, [pc, #172]	@ (800284c <FACEID+0x5c0>)
 800279e:	f7fd fe2d 	bl	80003fc <CLCD_I2C_Display>
										break;
 80027a2:	e084      	b.n	80028ae <FACEID+0x622>
									case 3:
										if (checkfaceid(keyrm1) == 0)
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fd24 	bl	80031f4 <checkfaceid>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10e      	bne.n	80027d0 <FACEID+0x544>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 3", "  Do Not Exist");
 80027b2:	4a33      	ldr	r2, [pc, #204]	@ (8002880 <FACEID+0x5f4>)
 80027b4:	4938      	ldr	r1, [pc, #224]	@ (8002898 <FACEID+0x60c>)
 80027b6:	4825      	ldr	r0, [pc, #148]	@ (800284c <FACEID+0x5c0>)
 80027b8:	f7fd fe20 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80027bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027c0:	f001 fdc2 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80027c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002874 <FACEID+0x5e8>)
 80027c6:	4929      	ldr	r1, [pc, #164]	@ (800286c <FACEID+0x5e0>)
 80027c8:	4820      	ldr	r0, [pc, #128]	@ (800284c <FACEID+0x5c0>)
 80027ca:	f7fd fe17 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
										}
										break;
 80027ce:	e06e      	b.n	80028ae <FACEID+0x622>
											removeface(keyrm1);
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fcb4 	bl	8003140 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 3","   SUCCESSFUL  ");
 80027d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002888 <FACEID+0x5fc>)
 80027da:	4930      	ldr	r1, [pc, #192]	@ (800289c <FACEID+0x610>)
 80027dc:	481b      	ldr	r0, [pc, #108]	@ (800284c <FACEID+0x5c0>)
 80027de:	f7fd fe0d 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 80027e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027e6:	f001 fdaf 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 3");
 80027ea:	4a22      	ldr	r2, [pc, #136]	@ (8002874 <FACEID+0x5e8>)
 80027ec:	491f      	ldr	r1, [pc, #124]	@ (800286c <FACEID+0x5e0>)
 80027ee:	4817      	ldr	r0, [pc, #92]	@ (800284c <FACEID+0x5c0>)
 80027f0:	f7fd fe04 	bl	80003fc <CLCD_I2C_Display>
										break;
 80027f4:	e05b      	b.n	80028ae <FACEID+0x622>
									case 4:
										if (checkfaceid(keyrm1) == 0)
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fcfb 	bl	80031f4 <checkfaceid>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10e      	bne.n	8002822 <FACEID+0x596>
										{
											CLCD_I2C_Display(&LCD1, "    FaceID 4", "  Do Not Exist");
 8002804:	4a1e      	ldr	r2, [pc, #120]	@ (8002880 <FACEID+0x5f4>)
 8002806:	4926      	ldr	r1, [pc, #152]	@ (80028a0 <FACEID+0x614>)
 8002808:	4810      	ldr	r0, [pc, #64]	@ (800284c <FACEID+0x5c0>)
 800280a:	f7fd fdf7 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 800280e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002812:	f001 fd99 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 8002816:	4a18      	ldr	r2, [pc, #96]	@ (8002878 <FACEID+0x5ec>)
 8002818:	4914      	ldr	r1, [pc, #80]	@ (800286c <FACEID+0x5e0>)
 800281a:	480c      	ldr	r0, [pc, #48]	@ (800284c <FACEID+0x5c0>)
 800281c:	f7fd fdee 	bl	80003fc <CLCD_I2C_Display>
											removeface(keyrm1);
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
											HAL_Delay(1000);
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
										}
										break;
 8002820:	e045      	b.n	80028ae <FACEID+0x622>
											removeface(keyrm1);
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fc8b 	bl	8003140 <removeface>
											CLCD_I2C_Display(&LCD1,"REMOVE FACEID 4","   SUCCESSFUL  ");
 800282a:	4a17      	ldr	r2, [pc, #92]	@ (8002888 <FACEID+0x5fc>)
 800282c:	491d      	ldr	r1, [pc, #116]	@ (80028a4 <FACEID+0x618>)
 800282e:	4807      	ldr	r0, [pc, #28]	@ (800284c <FACEID+0x5c0>)
 8002830:	f7fd fde4 	bl	80003fc <CLCD_I2C_Display>
											HAL_Delay(1000);
 8002834:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002838:	f001 fd86 	bl	8004348 <HAL_Delay>
											CLCD_I2C_Display(&LCD1, "MODE: REMOVE 1", "=> Remove Face 4");
 800283c:	4a0e      	ldr	r2, [pc, #56]	@ (8002878 <FACEID+0x5ec>)
 800283e:	490b      	ldr	r1, [pc, #44]	@ (800286c <FACEID+0x5e0>)
 8002840:	4802      	ldr	r0, [pc, #8]	@ (800284c <FACEID+0x5c0>)
 8002842:	f7fd fddb 	bl	80003fc <CLCD_I2C_Display>
										break;
 8002846:	e032      	b.n	80028ae <FACEID+0x622>
 8002848:	20000020 	.word	0x20000020
 800284c:	200003d8 	.word	0x200003d8
 8002850:	0800de80 	.word	0x0800de80
 8002854:	0800de94 	.word	0x0800de94
 8002858:	0800dbc0 	.word	0x0800dbc0
 800285c:	0800da3c 	.word	0x0800da3c
 8002860:	0800da44 	.word	0x0800da44
 8002864:	0800da50 	.word	0x0800da50
 8002868:	0800dea4 	.word	0x0800dea4
 800286c:	0800dbe0 	.word	0x0800dbe0
 8002870:	0800deb8 	.word	0x0800deb8
 8002874:	0800decc 	.word	0x0800decc
 8002878:	0800dee0 	.word	0x0800dee0
 800287c:	0800def4 	.word	0x0800def4
 8002880:	0800dc74 	.word	0x0800dc74
 8002884:	0800df00 	.word	0x0800df00
 8002888:	0800dc84 	.word	0x0800dc84
 800288c:	0800df10 	.word	0x0800df10
 8002890:	0800df20 	.word	0x0800df20
 8002894:	0800df30 	.word	0x0800df30
 8002898:	0800df40 	.word	0x0800df40
 800289c:	0800df50 	.word	0x0800df50
 80028a0:	0800df60 	.word	0x0800df60
 80028a4:	0800df70 	.word	0x0800df70
									default:
										backrm1 = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	727b      	strb	r3, [r7, #9]
										break;
 80028ac:	bf00      	nop
							while (backrm1 == 1)
 80028ae:	7a7b      	ldrb	r3, [r7, #9]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	f43f aebc 	beq.w	800262e <FACEID+0x3a2>
									}
								}
							}
							CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove 1 Face");
 80028b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002960 <FACEID+0x6d4>)
 80028b8:	492a      	ldr	r1, [pc, #168]	@ (8002964 <FACEID+0x6d8>)
 80028ba:	482b      	ldr	r0, [pc, #172]	@ (8002968 <FACEID+0x6dc>)
 80028bc:	f7fd fd9e 	bl	80003fc <CLCD_I2C_Display>
							break;
 80028c0:	e034      	b.n	800292c <FACEID+0x6a0>
						case 2:
							sprintf(Tx_Buffer , "Del.ALL" );
 80028c2:	492a      	ldr	r1, [pc, #168]	@ (800296c <FACEID+0x6e0>)
 80028c4:	482a      	ldr	r0, [pc, #168]	@ (8002970 <FACEID+0x6e4>)
 80028c6:	f00a fb8f 	bl	800cfe8 <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 7);
 80028ca:	2107      	movs	r1, #7
 80028cc:	4828      	ldr	r0, [pc, #160]	@ (8002970 <FACEID+0x6e4>)
 80028ce:	f009 ff79 	bl	800c7c4 <CDC_Transmit_FS>
							CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80028d2:	4a28      	ldr	r2, [pc, #160]	@ (8002974 <FACEID+0x6e8>)
 80028d4:	4928      	ldr	r1, [pc, #160]	@ (8002978 <FACEID+0x6ec>)
 80028d6:	4824      	ldr	r0, [pc, #144]	@ (8002968 <FACEID+0x6dc>)
 80028d8:	f7fd fd90 	bl	80003fc <CLCD_I2C_Display>
							exitmenu = 60;
 80028dc:	4b27      	ldr	r3, [pc, #156]	@ (800297c <FACEID+0x6f0>)
 80028de:	223c      	movs	r2, #60	@ 0x3c
 80028e0:	701a      	strb	r2, [r3, #0]
							memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80028e2:	2280      	movs	r2, #128	@ 0x80
 80028e4:	2100      	movs	r1, #0
 80028e6:	4826      	ldr	r0, [pc, #152]	@ (8002980 <FACEID+0x6f4>)
 80028e8:	f00a fb9e 	bl	800d028 <memset>
							while(exitmenu != 0){
 80028ec:	e013      	b.n	8002916 <FACEID+0x68a>
								if(Rx_Buffer[0] == 'T'){
 80028ee:	4b24      	ldr	r3, [pc, #144]	@ (8002980 <FACEID+0x6f4>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	2b54      	cmp	r3, #84	@ 0x54
 80028f6:	d10e      	bne.n	8002916 <FACEID+0x68a>
									CLCD_I2C_Display(&LCD1, "REMOVE ALL FACE","   SUCCESSFUL  ");
 80028f8:	4a22      	ldr	r2, [pc, #136]	@ (8002984 <FACEID+0x6f8>)
 80028fa:	4923      	ldr	r1, [pc, #140]	@ (8002988 <FACEID+0x6fc>)
 80028fc:	481a      	ldr	r0, [pc, #104]	@ (8002968 <FACEID+0x6dc>)
 80028fe:	f7fd fd7d 	bl	80003fc <CLCD_I2C_Display>
									HAL_Delay(2000);
 8002902:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002906:	f001 fd1f 	bl	8004348 <HAL_Delay>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800290a:	2280      	movs	r2, #128	@ 0x80
 800290c:	2100      	movs	r1, #0
 800290e:	481c      	ldr	r0, [pc, #112]	@ (8002980 <FACEID+0x6f4>)
 8002910:	f00a fb8a 	bl	800d028 <memset>
									break;
 8002914:	e003      	b.n	800291e <FACEID+0x692>
							while(exitmenu != 0){
 8002916:	4b19      	ldr	r3, [pc, #100]	@ (800297c <FACEID+0x6f0>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1e7      	bne.n	80028ee <FACEID+0x662>
								}
							}
							exitmenu = 0;
 800291e:	4b17      	ldr	r3, [pc, #92]	@ (800297c <FACEID+0x6f0>)
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
							// CLCD_I2C_Display(&LCD1,"FACEID: REMOVE","=> Remove ALL");
							break;
 8002924:	e002      	b.n	800292c <FACEID+0x6a0>
						default:
							backrm=0;
 8002926:	2300      	movs	r3, #0
 8002928:	72fb      	strb	r3, [r7, #11]
							break;
 800292a:	bf00      	nop
				while (backrm == 1)
 800292c:	7afb      	ldrb	r3, [r7, #11]
 800292e:	2b01      	cmp	r3, #1
 8002930:	f43f ae2c 	beq.w	800258c <FACEID+0x300>
						}
					}
				}
				CLCD_I2C_Display(&LCD1,"FACEID SETTINGS ","=> Remove FaceID");
 8002934:	4a15      	ldr	r2, [pc, #84]	@ (800298c <FACEID+0x700>)
 8002936:	4916      	ldr	r1, [pc, #88]	@ (8002990 <FACEID+0x704>)
 8002938:	480b      	ldr	r0, [pc, #44]	@ (8002968 <FACEID+0x6dc>)
 800293a:	f7fd fd5f 	bl	80003fc <CLCD_I2C_Display>
				break;
 800293e:	e003      	b.n	8002948 <FACEID+0x6bc>
			default:
				exitmenu=0;
 8002940:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <FACEID+0x6f0>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
				break;
 8002946:	bf00      	nop
	while (exitmenu )
 8002948:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <FACEID+0x6f0>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f acab 	bne.w	80022a8 <FACEID+0x1c>
			}
		}
	}
	CLCD_I2C_Clear(&LCD1);
 8002952:	4805      	ldr	r0, [pc, #20]	@ (8002968 <FACEID+0x6dc>)
 8002954:	f7fd fd42 	bl	80003dc <CLCD_I2C_Clear>
}
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	0800de80 	.word	0x0800de80
 8002964:	0800de94 	.word	0x0800de94
 8002968:	200003d8 	.word	0x200003d8
 800296c:	0800df80 	.word	0x0800df80
 8002970:	200003d0 	.word	0x200003d0
 8002974:	0800d970 	.word	0x0800d970
 8002978:	0800df88 	.word	0x0800df88
 800297c:	20000020 	.word	0x20000020
 8002980:	20000350 	.word	0x20000350
 8002984:	0800dc84 	.word	0x0800dc84
 8002988:	0800df94 	.word	0x0800df94
 800298c:	0800dda0 	.word	0x0800dda0
 8002990:	0800dd7c 	.word	0x0800dd7c

08002994 <FINGER>:
void FINGER(void) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
	exitmenu = Delaymenu;
 800299a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a88 <FINGER+0xf4>)
 800299c:	2214      	movs	r2, #20
 800299e:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80029a0:	23ff      	movs	r3, #255	@ 0xff
 80029a2:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"FINGER SETTING ","Pls Press DOWN");
 80029a4:	4a39      	ldr	r2, [pc, #228]	@ (8002a8c <FINGER+0xf8>)
 80029a6:	493a      	ldr	r1, [pc, #232]	@ (8002a90 <FINGER+0xfc>)
 80029a8:	483a      	ldr	r0, [pc, #232]	@ (8002a94 <FINGER+0x100>)
 80029aa:	f7fd fd27 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 80029ae:	e062      	b.n	8002a76 <FINGER+0xe2>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 80029b0:	200a      	movs	r0, #10
 80029b2:	f7fd fe7d 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 80029b6:	4603      	mov	r3, r0
 80029b8:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 80029ba:	79bb      	ldrb	r3, [r7, #6]
 80029bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80029be:	d12e      	bne.n	8002a1e <FINGER+0x8a>
		{
			exitmenu = Delaymenu;
 80029c0:	4b31      	ldr	r3, [pc, #196]	@ (8002a88 <FINGER+0xf4>)
 80029c2:	2214      	movs	r2, #20
 80029c4:	701a      	strb	r2, [r3, #0]
			status++;
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	3301      	adds	r3, #1
 80029ca:	71fb      	strb	r3, [r7, #7]
			status = (status > 3) ? 0 : status;
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d801      	bhi.n	80029d6 <FINGER+0x42>
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	e000      	b.n	80029d8 <FINGER+0x44>
 80029d6:	2300      	movs	r3, #0
 80029d8:	71fb      	strb	r3, [r7, #7]
			switch (status)
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d012      	beq.n	8002a06 <FINGER+0x72>
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	dc16      	bgt.n	8002a12 <FINGER+0x7e>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <FINGER+0x5a>
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d006      	beq.n	80029fa <FINGER+0x66>
 80029ec:	e011      	b.n	8002a12 <FINGER+0x7e>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 80029ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002a98 <FINGER+0x104>)
 80029f0:	4927      	ldr	r1, [pc, #156]	@ (8002a90 <FINGER+0xfc>)
 80029f2:	4828      	ldr	r0, [pc, #160]	@ (8002a94 <FINGER+0x100>)
 80029f4:	f7fd fd02 	bl	80003fc <CLCD_I2C_Display>
				break;
 80029f8:	e011      	b.n	8002a1e <FINGER+0x8a>
			case 1:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 80029fa:	4a28      	ldr	r2, [pc, #160]	@ (8002a9c <FINGER+0x108>)
 80029fc:	4924      	ldr	r1, [pc, #144]	@ (8002a90 <FINGER+0xfc>)
 80029fe:	4825      	ldr	r0, [pc, #148]	@ (8002a94 <FINGER+0x100>)
 8002a00:	f7fd fcfc 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002a04:	e00b      	b.n	8002a1e <FINGER+0x8a>
            case 2:
                CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002a06:	4a26      	ldr	r2, [pc, #152]	@ (8002aa0 <FINGER+0x10c>)
 8002a08:	4921      	ldr	r1, [pc, #132]	@ (8002a90 <FINGER+0xfc>)
 8002a0a:	4822      	ldr	r0, [pc, #136]	@ (8002a94 <FINGER+0x100>)
 8002a0c:	f7fd fcf6 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002a10:	e005      	b.n	8002a1e <FINGER+0x8a>
			default:
	            CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Back");
 8002a12:	4a24      	ldr	r2, [pc, #144]	@ (8002aa4 <FINGER+0x110>)
 8002a14:	491e      	ldr	r1, [pc, #120]	@ (8002a90 <FINGER+0xfc>)
 8002a16:	481f      	ldr	r0, [pc, #124]	@ (8002a94 <FINGER+0x100>)
 8002a18:	f7fd fcf0 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002a1c:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002a1e:	79bb      	ldrb	r3, [r7, #6]
 8002a20:	2b23      	cmp	r3, #35	@ 0x23
 8002a22:	d128      	bne.n	8002a76 <FINGER+0xe2>
		{
			exitmenu = Delaymenu;
 8002a24:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <FINGER+0xf4>)
 8002a26:	2214      	movs	r2, #20
 8002a28:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d016      	beq.n	8002a5e <FINGER+0xca>
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	dc1c      	bgt.n	8002a6e <FINGER+0xda>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <FINGER+0xaa>
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d008      	beq.n	8002a4e <FINGER+0xba>
 8002a3c:	e017      	b.n	8002a6e <FINGER+0xda>
			{
			case 0:
                add_finger();
 8002a3e:	f000 fc15 	bl	800326c <add_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Add Finger");
 8002a42:	4a15      	ldr	r2, [pc, #84]	@ (8002a98 <FINGER+0x104>)
 8002a44:	4912      	ldr	r1, [pc, #72]	@ (8002a90 <FINGER+0xfc>)
 8002a46:	4813      	ldr	r0, [pc, #76]	@ (8002a94 <FINGER+0x100>)
 8002a48:	f7fd fcd8 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002a4c:	e013      	b.n	8002a76 <FINGER+0xe2>
            case 1:
                remove_id_finger();
 8002a4e:	f000 fdcf 	bl	80035f0 <remove_id_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove Finger");
 8002a52:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <FINGER+0x108>)
 8002a54:	490e      	ldr	r1, [pc, #56]	@ (8002a90 <FINGER+0xfc>)
 8002a56:	480f      	ldr	r0, [pc, #60]	@ (8002a94 <FINGER+0x100>)
 8002a58:	f7fd fcd0 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002a5c:	e00b      	b.n	8002a76 <FINGER+0xe2>
            case 2:
                remove_all_finger();
 8002a5e:	f000 fe39 	bl	80036d4 <remove_all_finger>
				CLCD_I2C_Display(&LCD1,"FINGER SETTING ","=> Remove All");
 8002a62:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa0 <FINGER+0x10c>)
 8002a64:	490a      	ldr	r1, [pc, #40]	@ (8002a90 <FINGER+0xfc>)
 8002a66:	480b      	ldr	r0, [pc, #44]	@ (8002a94 <FINGER+0x100>)
 8002a68:	f7fd fcc8 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002a6c:	e003      	b.n	8002a76 <FINGER+0xe2>
            default:
                exitmenu = 0;
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <FINGER+0xf4>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
                break;
 8002a74:	bf00      	nop
	while (exitmenu )
 8002a76:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <FINGER+0xf4>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d198      	bne.n	80029b0 <FINGER+0x1c>
            }
        }
    }
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000020 	.word	0x20000020
 8002a8c:	0800d9f0 	.word	0x0800d9f0
 8002a90:	0800dfa4 	.word	0x0800dfa4
 8002a94:	200003d8 	.word	0x200003d8
 8002a98:	0800dfb4 	.word	0x0800dfb4
 8002a9c:	0800dfc4 	.word	0x0800dfc4
 8002aa0:	0800dfd8 	.word	0x0800dfd8
 8002aa4:	0800da3c 	.word	0x0800da3c

08002aa8 <PASSWORD>:


void PASSWORD(void) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
	exitmenu = Delaymenu;
 8002aae:	4b30      	ldr	r3, [pc, #192]	@ (8002b70 <PASSWORD+0xc8>)
 8002ab0:	2214      	movs	r2, #20
 8002ab2:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8002ab4:	23ff      	movs	r3, #255	@ 0xff
 8002ab6:	71fb      	strb	r3, [r7, #7]
	CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","Pls Press DOWN");
 8002ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8002b74 <PASSWORD+0xcc>)
 8002aba:	492f      	ldr	r1, [pc, #188]	@ (8002b78 <PASSWORD+0xd0>)
 8002abc:	482f      	ldr	r0, [pc, #188]	@ (8002b7c <PASSWORD+0xd4>)
 8002abe:	f7fd fc9d 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002ac2:	e04c      	b.n	8002b5e <PASSWORD+0xb6>
	{
		char key_pressed = KeyPad_WaitForKeyGetChar(10);
 8002ac4:	200a      	movs	r0, #10
 8002ac6:	f7fd fdf3 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002aca:	4603      	mov	r3, r0
 8002acc:	71bb      	strb	r3, [r7, #6]
		if (key_pressed == '*')
 8002ace:	79bb      	ldrb	r3, [r7, #6]
 8002ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ad2:	d124      	bne.n	8002b1e <PASSWORD+0x76>
		{
			exitmenu = Delaymenu;
 8002ad4:	4b26      	ldr	r3, [pc, #152]	@ (8002b70 <PASSWORD+0xc8>)
 8002ad6:	2214      	movs	r2, #20
 8002ad8:	701a      	strb	r2, [r3, #0]
			status++;
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	3301      	adds	r3, #1
 8002ade:	71fb      	strb	r3, [r7, #7]
			status = (status > 2) ? 0 : status;
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d801      	bhi.n	8002aea <PASSWORD+0x42>
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	e000      	b.n	8002aec <PASSWORD+0x44>
 8002aea:	2300      	movs	r3, #0
 8002aec:	71fb      	strb	r3, [r7, #7]
			switch (status)
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <PASSWORD+0x52>
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d006      	beq.n	8002b06 <PASSWORD+0x5e>
 8002af8:	e00b      	b.n	8002b12 <PASSWORD+0x6a>
			{
			case 0:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002afa:	4a21      	ldr	r2, [pc, #132]	@ (8002b80 <PASSWORD+0xd8>)
 8002afc:	491e      	ldr	r1, [pc, #120]	@ (8002b78 <PASSWORD+0xd0>)
 8002afe:	481f      	ldr	r0, [pc, #124]	@ (8002b7c <PASSWORD+0xd4>)
 8002b00:	f7fd fc7c 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002b04:	e00b      	b.n	8002b1e <PASSWORD+0x76>
			case 1:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002b06:	4a1f      	ldr	r2, [pc, #124]	@ (8002b84 <PASSWORD+0xdc>)
 8002b08:	491b      	ldr	r1, [pc, #108]	@ (8002b78 <PASSWORD+0xd0>)
 8002b0a:	481c      	ldr	r0, [pc, #112]	@ (8002b7c <PASSWORD+0xd4>)
 8002b0c:	f7fd fc76 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002b10:	e005      	b.n	8002b1e <PASSWORD+0x76>
			default:
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Back");
 8002b12:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <PASSWORD+0xe0>)
 8002b14:	4918      	ldr	r1, [pc, #96]	@ (8002b78 <PASSWORD+0xd0>)
 8002b16:	4819      	ldr	r0, [pc, #100]	@ (8002b7c <PASSWORD+0xd4>)
 8002b18:	f7fd fc70 	bl	80003fc <CLCD_I2C_Display>
				break;
 8002b1c:	bf00      	nop
			}
		}
		if (key_pressed == '#')
 8002b1e:	79bb      	ldrb	r3, [r7, #6]
 8002b20:	2b23      	cmp	r3, #35	@ 0x23
 8002b22:	d11c      	bne.n	8002b5e <PASSWORD+0xb6>
		{
			exitmenu = Delaymenu;
 8002b24:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <PASSWORD+0xc8>)
 8002b26:	2214      	movs	r2, #20
 8002b28:	701a      	strb	r2, [r3, #0]
			switch (status)
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <PASSWORD+0x8e>
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d008      	beq.n	8002b46 <PASSWORD+0x9e>
 8002b34:	e00f      	b.n	8002b56 <PASSWORD+0xae>
			{
			case 0:
                change_password();
 8002b36:	f000 fe8b 	bl	8003850 <change_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Change Pass");
 8002b3a:	4a11      	ldr	r2, [pc, #68]	@ (8002b80 <PASSWORD+0xd8>)
 8002b3c:	490e      	ldr	r1, [pc, #56]	@ (8002b78 <PASSWORD+0xd0>)
 8002b3e:	480f      	ldr	r0, [pc, #60]	@ (8002b7c <PASSWORD+0xd4>)
 8002b40:	f7fd fc5c 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002b44:	e00b      	b.n	8002b5e <PASSWORD+0xb6>
            case 1:
                set_default_password();
 8002b46:	f000 fee5 	bl	8003914 <set_default_password>
	            CLCD_I2C_Display(&LCD1,"PASSWORD SETTING ","=> Reset Pass");
 8002b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b84 <PASSWORD+0xdc>)
 8002b4c:	490a      	ldr	r1, [pc, #40]	@ (8002b78 <PASSWORD+0xd0>)
 8002b4e:	480b      	ldr	r0, [pc, #44]	@ (8002b7c <PASSWORD+0xd4>)
 8002b50:	f7fd fc54 	bl	80003fc <CLCD_I2C_Display>
                break;
 8002b54:	e003      	b.n	8002b5e <PASSWORD+0xb6>
            default:
                exitmenu = 0;
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <PASSWORD+0xc8>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
                break;
 8002b5c:	bf00      	nop
	while (exitmenu )
 8002b5e:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <PASSWORD+0xc8>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ae      	bne.n	8002ac4 <PASSWORD+0x1c>
            }
        }
    }
}
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000020 	.word	0x20000020
 8002b74:	0800d9f0 	.word	0x0800d9f0
 8002b78:	0800dfe8 	.word	0x0800dfe8
 8002b7c:	200003d8 	.word	0x200003d8
 8002b80:	0800dffc 	.word	0x0800dffc
 8002b84:	0800e00c 	.word	0x0800e00c
 8002b88:	0800da3c 	.word	0x0800da3c

08002b8c <CheckUID>:

uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002b96:	f107 030c 	add.w	r3, r7, #12
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	6838      	ldr	r0, [r7, #0]
 8002ba0:	f7fe f8ad 	bl	8000cfe <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002ba4:	7cbb      	ldrb	r3, [r7, #18]
 8002ba6:	2bff      	cmp	r3, #255	@ 0xff
 8002ba8:	d001      	beq.n	8002bae <CheckUID+0x22>
		return 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e016      	b.n	8002bdc <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]
 8002bb2:	e00f      	b.n	8002bd4 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	781a      	ldrb	r2, [r3, #0]
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	3318      	adds	r3, #24
 8002bc0:	443b      	add	r3, r7
 8002bc2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d001      	beq.n	8002bce <CheckUID+0x42>
			return 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e006      	b.n	8002bdc <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	75fb      	strb	r3, [r7, #23]
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d9ec      	bls.n	8002bb4 <CheckUID+0x28>
	}
	return 1;
 8002bda:	2301      	movs	r3, #1
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002bec:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <CheckListUID+0x5c>)
 8002bee:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002bf0:	e018      	b.n	8002c24 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3306      	adds	r3, #6
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe f868 	bl	8000ccc <Flash_Read_2Byte>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d10a      	bne.n	8002c1e <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002c08:	68f9      	ldr	r1, [r7, #12]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ffbe 	bl	8002b8c <CheckUID>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d103      	bne.n	8002c1e <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3305      	adds	r3, #5
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	e00b      	b.n	8002c36 <CheckListUID+0x52>
		}
		pt = pt + 8;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3308      	adds	r3, #8
 8002c22:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3305      	adds	r3, #5
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe f843 	bl	8000cb4 <Flash_Read_Byte>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2bff      	cmp	r3, #255	@ 0xff
 8002c32:	d1de      	bne.n	8002bf2 <CheckListUID+0xe>
	}
	return 0;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	0800f000 	.word	0x0800f000

08002c44 <checkcountUID>:

uint8_t checkcountUID(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002c4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <checkcountUID+0x60>)
 8002c4c:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c52:	e01a      	b.n	8002c8a <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3306      	adds	r3, #6
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe f837 	bl	8000ccc <Flash_Read_2Byte>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	461a      	mov	r2, r3
 8002c62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d10c      	bne.n	8002c84 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3305      	adds	r3, #5
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe f820 	bl	8000cb4 <Flash_Read_Byte>
 8002c74:	4603      	mov	r3, r0
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d102      	bne.n	8002c84 <checkcountUID+0x40>
			{
				count++;
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	3301      	adds	r3, #1
 8002c82:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3308      	adds	r3, #8
 8002c88:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3305      	adds	r3, #5
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe f810 	bl	8000cb4 <Flash_Read_Byte>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2bff      	cmp	r3, #255	@ 0xff
 8002c98:	d1dc      	bne.n	8002c54 <checkcountUID+0x10>
	}
	return count;
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	0800f000 	.word	0x0800f000

08002ca8 <adduid>:

void adduid(uint8_t key)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
	setaddress();
 8002cb2:	f000 f9a7 	bl	8003004 <setaddress>
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002d68 <adduid+0xc0>)
 8002cb8:	492c      	ldr	r1, [pc, #176]	@ (8002d6c <adduid+0xc4>)
 8002cba:	482d      	ldr	r0, [pc, #180]	@ (8002d70 <adduid+0xc8>)
 8002cbc:	f7fd fb9e 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu)
 8002cc0:	e049      	b.n	8002d56 <adduid+0xae>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002cc2:	482c      	ldr	r0, [pc, #176]	@ (8002d74 <adduid+0xcc>)
 8002cc4:	f000 fea8 	bl	8003a18 <TM_MFRC522_Check>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d13d      	bne.n	8002d4a <adduid+0xa2>
		{
			HAL_Delay(100);
 8002cce:	2064      	movs	r0, #100	@ 0x64
 8002cd0:	f001 fb3a 	bl	8004348 <HAL_Delay>
			if (CheckListUID(CardID) == 0)
 8002cd4:	4827      	ldr	r0, [pc, #156]	@ (8002d74 <adduid+0xcc>)
 8002cd6:	f7ff ff85 	bl	8002be4 <CheckListUID>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d11f      	bne.n	8002d20 <adduid+0x78>
			{
				CardID[5] = key;
 8002ce0:	4a24      	ldr	r2, [pc, #144]	@ (8002d74 <adduid+0xcc>)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002ce6:	4b24      	ldr	r3, [pc, #144]	@ (8002d78 <adduid+0xd0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2206      	movs	r2, #6
 8002cec:	4921      	ldr	r1, [pc, #132]	@ (8002d74 <adduid+0xcc>)
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd ffbd 	bl	8000c6e <Flash_Write_Array>
				AddressUID += 8;
 8002cf4:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <adduid+0xd0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8002d78 <adduid+0xd0>)
 8002cfc:	6013      	str	r3, [r2, #0]
				CLCD_I2C_Clear(&LCD1);
 8002cfe:	481c      	ldr	r0, [pc, #112]	@ (8002d70 <adduid+0xc8>)
 8002d00:	f7fd fb6c 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002d04:	2200      	movs	r2, #0
 8002d06:	2100      	movs	r1, #0
 8002d08:	4819      	ldr	r0, [pc, #100]	@ (8002d70 <adduid+0xc8>)
 8002d0a:	f7fd fafd 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "   SUCCESSFUL");
 8002d0e:	491b      	ldr	r1, [pc, #108]	@ (8002d7c <adduid+0xd4>)
 8002d10:	4817      	ldr	r0, [pc, #92]	@ (8002d70 <adduid+0xc8>)
 8002d12:	f7fd fb4c 	bl	80003ae <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002d16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d1a:	f001 fb15 	bl	8004348 <HAL_Delay>
				return;
 8002d1e:	e020      	b.n	8002d62 <adduid+0xba>
			}
			else
			{
				CLCD_I2C_Clear(&LCD1);
 8002d20:	4813      	ldr	r0, [pc, #76]	@ (8002d70 <adduid+0xc8>)
 8002d22:	f7fd fb5b 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4811      	ldr	r0, [pc, #68]	@ (8002d70 <adduid+0xc8>)
 8002d2c:	f7fd faec 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD EXISTED");
 8002d30:	4913      	ldr	r1, [pc, #76]	@ (8002d80 <adduid+0xd8>)
 8002d32:	480f      	ldr	r0, [pc, #60]	@ (8002d70 <adduid+0xc8>)
 8002d34:	f7fd fb3b 	bl	80003ae <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002d38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d3c:	f001 fb04 	bl	8004348 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002d40:	4a09      	ldr	r2, [pc, #36]	@ (8002d68 <adduid+0xc0>)
 8002d42:	490a      	ldr	r1, [pc, #40]	@ (8002d6c <adduid+0xc4>)
 8002d44:	480a      	ldr	r0, [pc, #40]	@ (8002d70 <adduid+0xc8>)
 8002d46:	f7fd fb59 	bl	80003fc <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8002d4a:	2064      	movs	r0, #100	@ 0x64
 8002d4c:	f7fd fcb0 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b23      	cmp	r3, #35	@ 0x23
 8002d54:	d004      	beq.n	8002d60 <adduid+0xb8>
	while (exitmenu)
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <adduid+0xdc>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1b1      	bne.n	8002cc2 <adduid+0x1a>
 8002d5e:	e000      	b.n	8002d62 <adduid+0xba>
		{
			return;
 8002d60:	bf00      	nop
		}
	}
}
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	0800da3c 	.word	0x0800da3c
 8002d6c:	0800e01c 	.word	0x0800e01c
 8002d70:	200003d8 	.word	0x200003d8
 8002d74:	200003e4 	.word	0x200003e4
 8002d78:	20000024 	.word	0x20000024
 8002d7c:	0800e028 	.word	0x0800e028
 8002d80:	0800e038 	.word	0x0800e038
 8002d84:	20000020 	.word	0x20000020

08002d88 <checkthe>:

void checkthe(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002d8e:	4b49      	ldr	r3, [pc, #292]	@ (8002eb4 <checkthe+0x12c>)
 8002d90:	221e      	movs	r2, #30
 8002d92:	701a      	strb	r2, [r3, #0]
	CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002d94:	4a48      	ldr	r2, [pc, #288]	@ (8002eb8 <checkthe+0x130>)
 8002d96:	4949      	ldr	r1, [pc, #292]	@ (8002ebc <checkthe+0x134>)
 8002d98:	4849      	ldr	r0, [pc, #292]	@ (8002ec0 <checkthe+0x138>)
 8002d9a:	f7fd fb2f 	bl	80003fc <CLCD_I2C_Display>
	while (exitmenu )
 8002d9e:	e07e      	b.n	8002e9e <checkthe+0x116>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002da0:	4848      	ldr	r0, [pc, #288]	@ (8002ec4 <checkthe+0x13c>)
 8002da2:	f000 fe39 	bl	8003a18 <TM_MFRC522_Check>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d172      	bne.n	8002e92 <checkthe+0x10a>
		{
			if (CheckListUID(CardID) == 0)
 8002dac:	4845      	ldr	r0, [pc, #276]	@ (8002ec4 <checkthe+0x13c>)
 8002dae:	f7ff ff19 	bl	8002be4 <CheckListUID>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d119      	bne.n	8002dec <checkthe+0x64>
			{
				CLCD_I2C_Clear(&LCD1);
 8002db8:	4841      	ldr	r0, [pc, #260]	@ (8002ec0 <checkthe+0x138>)
 8002dba:	f7fd fb0f 	bl	80003dc <CLCD_I2C_Clear>
				CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	483f      	ldr	r0, [pc, #252]	@ (8002ec0 <checkthe+0x138>)
 8002dc4:	f7fd faa0 	bl	8000308 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(&LCD1, "CARD DONT EXIST");
 8002dc8:	493f      	ldr	r1, [pc, #252]	@ (8002ec8 <checkthe+0x140>)
 8002dca:	483d      	ldr	r0, [pc, #244]	@ (8002ec0 <checkthe+0x138>)
 8002dcc:	f7fd faef 	bl	80003ae <CLCD_I2C_WriteString>
				HAL_Delay(1000);
 8002dd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dd4:	f001 fab8 	bl	8004348 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "SCAN CARD", "=> Back");
 8002dd8:	4a37      	ldr	r2, [pc, #220]	@ (8002eb8 <checkthe+0x130>)
 8002dda:	4938      	ldr	r1, [pc, #224]	@ (8002ebc <checkthe+0x134>)
 8002ddc:	4838      	ldr	r0, [pc, #224]	@ (8002ec0 <checkthe+0x138>)
 8002dde:	f7fd fb0d 	bl	80003fc <CLCD_I2C_Display>
				HAL_Delay(1000);
 8002de2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002de6:	f001 faaf 	bl	8004348 <HAL_Delay>
 8002dea:	e052      	b.n	8002e92 <checkthe+0x10a>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 8002dec:	4835      	ldr	r0, [pc, #212]	@ (8002ec4 <checkthe+0x13c>)
 8002dee:	f7ff fef9 	bl	8002be4 <CheckListUID>
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	717b      	strb	r3, [r7, #5]
				CLCD_I2C_Clear(&LCD1);
 8002e04:	482e      	ldr	r0, [pc, #184]	@ (8002ec0 <checkthe+0x138>)
 8002e06:	f7fd fae9 	bl	80003dc <CLCD_I2C_Clear>
				switch (key1)
 8002e0a:	797b      	ldrb	r3, [r7, #5]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d109      	bne.n	8002e24 <checkthe+0x9c>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	2100      	movs	r1, #0
 8002e14:	482a      	ldr	r0, [pc, #168]	@ (8002ec0 <checkthe+0x138>)
 8002e16:	f7fd fa77 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "ADMIN CARD");
 8002e1a:	492c      	ldr	r1, [pc, #176]	@ (8002ecc <checkthe+0x144>)
 8002e1c:	4828      	ldr	r0, [pc, #160]	@ (8002ec0 <checkthe+0x138>)
 8002e1e:	f7fd fac6 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8002e22:	e009      	b.n	8002e38 <checkthe+0xb0>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2100      	movs	r1, #0
 8002e28:	4825      	ldr	r0, [pc, #148]	@ (8002ec0 <checkthe+0x138>)
 8002e2a:	f7fd fa6d 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "USER CARD");
 8002e2e:	4928      	ldr	r1, [pc, #160]	@ (8002ed0 <checkthe+0x148>)
 8002e30:	4823      	ldr	r0, [pc, #140]	@ (8002ec0 <checkthe+0x138>)
 8002e32:	f7fd fabc 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8002e36:	bf00      	nop
				}
				switch (key2)
 8002e38:	79bb      	ldrb	r3, [r7, #6]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d002      	beq.n	8002e44 <checkthe+0xbc>
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d00a      	beq.n	8002e58 <checkthe+0xd0>
 8002e42:	e013      	b.n	8002e6c <checkthe+0xe4>
				{
				case 1:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002e44:	2201      	movs	r2, #1
 8002e46:	2100      	movs	r1, #0
 8002e48:	481d      	ldr	r0, [pc, #116]	@ (8002ec0 <checkthe+0x138>)
 8002e4a:	f7fd fa5d 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 1");
 8002e4e:	4921      	ldr	r1, [pc, #132]	@ (8002ed4 <checkthe+0x14c>)
 8002e50:	481b      	ldr	r0, [pc, #108]	@ (8002ec0 <checkthe+0x138>)
 8002e52:	f7fd faac 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8002e56:	e013      	b.n	8002e80 <checkthe+0xf8>
				case 2:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002e58:	2201      	movs	r2, #1
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4818      	ldr	r0, [pc, #96]	@ (8002ec0 <checkthe+0x138>)
 8002e5e:	f7fd fa53 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 2");
 8002e62:	491d      	ldr	r1, [pc, #116]	@ (8002ed8 <checkthe+0x150>)
 8002e64:	4816      	ldr	r0, [pc, #88]	@ (8002ec0 <checkthe+0x138>)
 8002e66:	f7fd faa2 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8002e6a:	e009      	b.n	8002e80 <checkthe+0xf8>
				default:
					CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4813      	ldr	r0, [pc, #76]	@ (8002ec0 <checkthe+0x138>)
 8002e72:	f7fd fa49 	bl	8000308 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(&LCD1, "Card 3");
 8002e76:	4919      	ldr	r1, [pc, #100]	@ (8002edc <checkthe+0x154>)
 8002e78:	4811      	ldr	r0, [pc, #68]	@ (8002ec0 <checkthe+0x138>)
 8002e7a:	f7fd fa98 	bl	80003ae <CLCD_I2C_WriteString>
					break;
 8002e7e:	bf00      	nop
				}
				HAL_Delay(1000);
 8002e80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e84:	f001 fa60 	bl	8004348 <HAL_Delay>
				CLCD_I2C_Display(&LCD1, "PLS SCAN CARD", "=> Back");
 8002e88:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb8 <checkthe+0x130>)
 8002e8a:	4915      	ldr	r1, [pc, #84]	@ (8002ee0 <checkthe+0x158>)
 8002e8c:	480c      	ldr	r0, [pc, #48]	@ (8002ec0 <checkthe+0x138>)
 8002e8e:	f7fd fab5 	bl	80003fc <CLCD_I2C_Display>
			}
		}
		if (KeyPad_WaitForKeyGetChar(100)=='#')
 8002e92:	2064      	movs	r0, #100	@ 0x64
 8002e94:	f7fd fc0c 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b23      	cmp	r3, #35	@ 0x23
 8002e9c:	d005      	beq.n	8002eaa <checkthe+0x122>
	while (exitmenu )
 8002e9e:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <checkthe+0x12c>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f47f af7c 	bne.w	8002da0 <checkthe+0x18>
 8002ea8:	e000      	b.n	8002eac <checkthe+0x124>
		{
			return;
 8002eaa:	bf00      	nop
		}
	}
}
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000020 	.word	0x20000020
 8002eb8:	0800da3c 	.word	0x0800da3c
 8002ebc:	0800e01c 	.word	0x0800e01c
 8002ec0:	200003d8 	.word	0x200003d8
 8002ec4:	200003e4 	.word	0x200003e4
 8002ec8:	0800e048 	.word	0x0800e048
 8002ecc:	0800e058 	.word	0x0800e058
 8002ed0:	0800e064 	.word	0x0800e064
 8002ed4:	0800e070 	.word	0x0800e070
 8002ed8:	0800e078 	.word	0x0800e078
 8002edc:	0800e080 	.word	0x0800e080
 8002ee0:	0800dd4c 	.word	0x0800dd4c

08002ee4 <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 8002eee:	4b13      	ldr	r3, [pc, #76]	@ (8002f3c <CheckKey+0x58>)
 8002ef0:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002ef2:	e015      	b.n	8002f20 <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3306      	adds	r3, #6
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fee7 	bl	8000ccc <Flash_Read_2Byte>
 8002efe:	4603      	mov	r3, r0
 8002f00:	461a      	mov	r2, r3
 8002f02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d107      	bne.n	8002f1a <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3305      	adds	r3, #5
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	79fa      	ldrb	r2, [r7, #7]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d101      	bne.n	8002f1a <CheckKey+0x36>
				return pt;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	e00b      	b.n	8002f32 <CheckKey+0x4e>
		}
		pt = pt + 8;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3305      	adds	r3, #5
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fec5 	bl	8000cb4 <Flash_Read_Byte>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2bff      	cmp	r3, #255	@ 0xff
 8002f2e:	d1e1      	bne.n	8002ef4 <CheckKey+0x10>
	}
	return 0;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	0800f000 	.word	0x0800f000

08002f40 <removeuid>:
void removeuid(uint32_t addressrm)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3306      	adds	r3, #6
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd fe75 	bl	8000c3e <Flash_Write_2Byte>
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <startadd>:
void startadd(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002f60:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <startadd+0x84>)
 8002f62:	4920      	ldr	r1, [pc, #128]	@ (8002fe4 <startadd+0x88>)
 8002f64:	4820      	ldr	r0, [pc, #128]	@ (8002fe8 <startadd+0x8c>)
 8002f66:	f7fd fa49 	bl	80003fc <CLCD_I2C_Display>
	setaddress();
 8002f6a:	f000 f84b 	bl	8003004 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002f6e:	481f      	ldr	r0, [pc, #124]	@ (8002fec <startadd+0x90>)
 8002f70:	f000 fd52 	bl	8003a18 <TM_MFRC522_Check>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f9      	bne.n	8002f6e <startadd+0x12>
			{
				if (CheckListUID(CardID) == 0)
 8002f7a:	481c      	ldr	r0, [pc, #112]	@ (8002fec <startadd+0x90>)
 8002f7c:	f7ff fe32 	bl	8002be4 <CheckListUID>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <startadd+0x4a>
				{
					CardID[5] = 0x11;
 8002f86:	4b19      	ldr	r3, [pc, #100]	@ (8002fec <startadd+0x90>)
 8002f88:	2211      	movs	r2, #17
 8002f8a:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8002f8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ff0 <startadd+0x94>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2206      	movs	r2, #6
 8002f92:	4916      	ldr	r1, [pc, #88]	@ (8002fec <startadd+0x90>)
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fe6a 	bl	8000c6e <Flash_Write_Array>
					AddressUID += 8;
 8002f9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <startadd+0x94>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	4a13      	ldr	r2, [pc, #76]	@ (8002ff0 <startadd+0x94>)
 8002fa2:	6013      	str	r3, [r2, #0]
					break;
 8002fa4:	e00e      	b.n	8002fc4 <startadd+0x68>
				}
				else
				{
					CLCD_I2C_Display(&LCD1, "    WARNING!", "Try another card");
 8002fa6:	4a13      	ldr	r2, [pc, #76]	@ (8002ff4 <startadd+0x98>)
 8002fa8:	4913      	ldr	r1, [pc, #76]	@ (8002ff8 <startadd+0x9c>)
 8002faa:	480f      	ldr	r0, [pc, #60]	@ (8002fe8 <startadd+0x8c>)
 8002fac:	f7fd fa26 	bl	80003fc <CLCD_I2C_Display>
					HAL_Delay(1000);
 8002fb0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fb4:	f001 f9c8 	bl	8004348 <HAL_Delay>
					CLCD_I2C_Display(&LCD1, "PLS SCAN CARD","First Admin Card");
 8002fb8:	4a09      	ldr	r2, [pc, #36]	@ (8002fe0 <startadd+0x84>)
 8002fba:	490a      	ldr	r1, [pc, #40]	@ (8002fe4 <startadd+0x88>)
 8002fbc:	480a      	ldr	r0, [pc, #40]	@ (8002fe8 <startadd+0x8c>)
 8002fbe:	f7fd fa1d 	bl	80003fc <CLCD_I2C_Display>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8002fc2:	e7d4      	b.n	8002f6e <startadd+0x12>
				}
			}
		}
	CLCD_I2C_Display(&LCD1, "ADD SUCCESSFUL","Admin Card 1");
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002ffc <startadd+0xa0>)
 8002fc6:	490e      	ldr	r1, [pc, #56]	@ (8003000 <startadd+0xa4>)
 8002fc8:	4807      	ldr	r0, [pc, #28]	@ (8002fe8 <startadd+0x8c>)
 8002fca:	f7fd fa17 	bl	80003fc <CLCD_I2C_Display>
	HAL_Delay(1000);
 8002fce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fd2:	f001 f9b9 	bl	8004348 <HAL_Delay>
	CLCD_I2C_Clear(&LCD1);
 8002fd6:	4804      	ldr	r0, [pc, #16]	@ (8002fe8 <startadd+0x8c>)
 8002fd8:	f7fd fa00 	bl	80003dc <CLCD_I2C_Clear>
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	0800e088 	.word	0x0800e088
 8002fe4:	0800dd4c 	.word	0x0800dd4c
 8002fe8:	200003d8 	.word	0x200003d8
 8002fec:	200003e4 	.word	0x200003e4
 8002ff0:	20000024 	.word	0x20000024
 8002ff4:	0800e09c 	.word	0x0800e09c
 8002ff8:	0800e0b0 	.word	0x0800e0b0
 8002ffc:	0800e0c0 	.word	0x0800e0c0
 8003000:	0800e0d0 	.word	0x0800e0d0

08003004 <setaddress>:
void setaddress(void){
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 800300a:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <setaddress+0x30>)
 800300c:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800300e:	e002      	b.n	8003016 <setaddress+0x12>
	{
		pt = pt + 8;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3308      	adds	r3, #8
 8003014:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3305      	adds	r3, #5
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fe4a 	bl	8000cb4 <Flash_Read_Byte>
 8003020:	4603      	mov	r3, r0
 8003022:	2bff      	cmp	r3, #255	@ 0xff
 8003024:	d1f4      	bne.n	8003010 <setaddress+0xc>
	}
	AddressUID = pt;
 8003026:	4a04      	ldr	r2, [pc, #16]	@ (8003038 <setaddress+0x34>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	0800f000 	.word	0x0800f000
 8003038:	20000024 	.word	0x20000024

0800303c <remoall>:

void remoall(){
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8003042:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <remoall+0x44>)
 8003044:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8003046:	e00a      	b.n	800305e <remoall+0x22>
		Flash_Erase(pt);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7fd fddc 	bl	8000c06 <Flash_Erase>
		pt = pt + 0x400;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003054:	607b      	str	r3, [r7, #4]
		if(pt == 0x800FC00)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <remoall+0x48>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00b      	beq.n	8003076 <remoall+0x3a>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fd fe40 	bl	8000ce4 <Flash_Read_8Byte>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	bf08      	it	eq
 800306e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8003072:	d1e9      	bne.n	8003048 <remoall+0xc>
			break;
	}
}
 8003074:	e000      	b.n	8003078 <remoall+0x3c>
			break;
 8003076:	bf00      	nop
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	0800f000 	.word	0x0800f000
 8003084:	0800fc00 	.word	0x0800fc00

08003088 <addface>:
		}
	}
}

void addface(uint8_t key)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003092:	2280      	movs	r2, #128	@ 0x80
 8003094:	2100      	movs	r1, #0
 8003096:	4820      	ldr	r0, [pc, #128]	@ (8003118 <addface+0x90>)
 8003098:	f009 ffc6 	bl	800d028 <memset>
	sprintf(Tx_Buffer , "Add.%d", key );
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	461a      	mov	r2, r3
 80030a0:	491e      	ldr	r1, [pc, #120]	@ (800311c <addface+0x94>)
 80030a2:	481f      	ldr	r0, [pc, #124]	@ (8003120 <addface+0x98>)
 80030a4:	f009 ffa0 	bl	800cfe8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 80030a8:	2105      	movs	r1, #5
 80030aa:	481d      	ldr	r0, [pc, #116]	@ (8003120 <addface+0x98>)
 80030ac:	f009 fb8a 	bl	800c7c4 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 80030b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003124 <addface+0x9c>)
 80030b2:	491d      	ldr	r1, [pc, #116]	@ (8003128 <addface+0xa0>)
 80030b4:	481d      	ldr	r0, [pc, #116]	@ (800312c <addface+0xa4>)
 80030b6:	f7fd f9a1 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 80030ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003130 <addface+0xa8>)
 80030bc:	223c      	movs	r2, #60	@ 0x3c
 80030be:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 80030c0:	e01d      	b.n	80030fe <addface+0x76>
		if(Rx_Buffer[0] == 'T'){
 80030c2:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <addface+0x90>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b25b      	sxtb	r3, r3
 80030c8:	2b54      	cmp	r3, #84	@ 0x54
 80030ca:	d109      	bne.n	80030e0 <addface+0x58>
			CLCD_I2C_Display(&LCD1, "   ADD FACEID", "   SUCCESSFUL");
 80030cc:	4a19      	ldr	r2, [pc, #100]	@ (8003134 <addface+0xac>)
 80030ce:	491a      	ldr	r1, [pc, #104]	@ (8003138 <addface+0xb0>)
 80030d0:	4816      	ldr	r0, [pc, #88]	@ (800312c <addface+0xa4>)
 80030d2:	f7fd f993 	bl	80003fc <CLCD_I2C_Display>
			HAL_Delay(2000);
 80030d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80030da:	f001 f935 	bl	8004348 <HAL_Delay>
			break;
 80030de:	e012      	b.n	8003106 <addface+0x7e>
		}
		else if(Rx_Buffer[0] == 'F'){
 80030e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003118 <addface+0x90>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b25b      	sxtb	r3, r3
 80030e6:	2b46      	cmp	r3, #70	@ 0x46
 80030e8:	d109      	bne.n	80030fe <addface+0x76>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKNOWN", "");
 80030ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003124 <addface+0x9c>)
 80030ec:	4913      	ldr	r1, [pc, #76]	@ (800313c <addface+0xb4>)
 80030ee:	480f      	ldr	r0, [pc, #60]	@ (800312c <addface+0xa4>)
 80030f0:	f7fd f984 	bl	80003fc <CLCD_I2C_Display>
			HAL_Delay(2000);
 80030f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80030f8:	f001 f926 	bl	8004348 <HAL_Delay>
			break;
 80030fc:	e003      	b.n	8003106 <addface+0x7e>
	while(exitmenu != 0){
 80030fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003130 <addface+0xa8>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1dd      	bne.n	80030c2 <addface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003106:	2280      	movs	r2, #128	@ 0x80
 8003108:	2100      	movs	r1, #0
 800310a:	4803      	ldr	r0, [pc, #12]	@ (8003118 <addface+0x90>)
 800310c:	f009 ff8c 	bl	800d028 <memset>
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000350 	.word	0x20000350
 800311c:	0800e0e0 	.word	0x0800e0e0
 8003120:	200003d0 	.word	0x200003d0
 8003124:	0800d970 	.word	0x0800d970
 8003128:	0800df88 	.word	0x0800df88
 800312c:	200003d8 	.word	0x200003d8
 8003130:	20000020 	.word	0x20000020
 8003134:	0800e028 	.word	0x0800e028
 8003138:	0800e0e8 	.word	0x0800e0e8
 800313c:	0800e0f8 	.word	0x0800e0f8

08003140 <removeface>:
void removeface(uint8_t key)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800314a:	2280      	movs	r2, #128	@ 0x80
 800314c:	2100      	movs	r1, #0
 800314e:	4820      	ldr	r0, [pc, #128]	@ (80031d0 <removeface+0x90>)
 8003150:	f009 ff6a 	bl	800d028 <memset>
	sprintf(Tx_Buffer , "Rem.%d", key );
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	461a      	mov	r2, r3
 8003158:	491e      	ldr	r1, [pc, #120]	@ (80031d4 <removeface+0x94>)
 800315a:	481f      	ldr	r0, [pc, #124]	@ (80031d8 <removeface+0x98>)
 800315c:	f009 ff44 	bl	800cfe8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8003160:	2105      	movs	r1, #5
 8003162:	481d      	ldr	r0, [pc, #116]	@ (80031d8 <removeface+0x98>)
 8003164:	f009 fb2e 	bl	800c7c4 <CDC_Transmit_FS>
	CLCD_I2C_Display(&LCD1, "WAITING....", "");
 8003168:	4a1c      	ldr	r2, [pc, #112]	@ (80031dc <removeface+0x9c>)
 800316a:	491d      	ldr	r1, [pc, #116]	@ (80031e0 <removeface+0xa0>)
 800316c:	481d      	ldr	r0, [pc, #116]	@ (80031e4 <removeface+0xa4>)
 800316e:	f7fd f945 	bl	80003fc <CLCD_I2C_Display>
	exitmenu = 60;
 8003172:	4b1d      	ldr	r3, [pc, #116]	@ (80031e8 <removeface+0xa8>)
 8003174:	223c      	movs	r2, #60	@ 0x3c
 8003176:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8003178:	e01d      	b.n	80031b6 <removeface+0x76>
		if(Rx_Buffer[0] == 'T'){
 800317a:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <removeface+0x90>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	b25b      	sxtb	r3, r3
 8003180:	2b54      	cmp	r3, #84	@ 0x54
 8003182:	d109      	bne.n	8003198 <removeface+0x58>
			CLCD_I2C_Display(&LCD1, "XOA THANH CONG", "");
 8003184:	4a15      	ldr	r2, [pc, #84]	@ (80031dc <removeface+0x9c>)
 8003186:	4919      	ldr	r1, [pc, #100]	@ (80031ec <removeface+0xac>)
 8003188:	4816      	ldr	r0, [pc, #88]	@ (80031e4 <removeface+0xa4>)
 800318a:	f7fd f937 	bl	80003fc <CLCD_I2C_Display>
			HAL_Delay(2000);
 800318e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003192:	f001 f8d9 	bl	8004348 <HAL_Delay>
			break;
 8003196:	e012      	b.n	80031be <removeface+0x7e>
		}
		else if(Rx_Buffer[0] == 'F'){
 8003198:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <removeface+0x90>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	b25b      	sxtb	r3, r3
 800319e:	2b46      	cmp	r3, #70	@ 0x46
 80031a0:	d109      	bne.n	80031b6 <removeface+0x76>
			CLCD_I2C_Display(&LCD1, "ERROR: UNKOWN", "");
 80031a2:	4a0e      	ldr	r2, [pc, #56]	@ (80031dc <removeface+0x9c>)
 80031a4:	4912      	ldr	r1, [pc, #72]	@ (80031f0 <removeface+0xb0>)
 80031a6:	480f      	ldr	r0, [pc, #60]	@ (80031e4 <removeface+0xa4>)
 80031a8:	f7fd f928 	bl	80003fc <CLCD_I2C_Display>
			HAL_Delay(2000);
 80031ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80031b0:	f001 f8ca 	bl	8004348 <HAL_Delay>
			break;
 80031b4:	e003      	b.n	80031be <removeface+0x7e>
	while(exitmenu != 0){
 80031b6:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <removeface+0xa8>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1dd      	bne.n	800317a <removeface+0x3a>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80031be:	2280      	movs	r2, #128	@ 0x80
 80031c0:	2100      	movs	r1, #0
 80031c2:	4803      	ldr	r0, [pc, #12]	@ (80031d0 <removeface+0x90>)
 80031c4:	f009 ff30 	bl	800d028 <memset>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000350 	.word	0x20000350
 80031d4:	0800e108 	.word	0x0800e108
 80031d8:	200003d0 	.word	0x200003d0
 80031dc:	0800d970 	.word	0x0800d970
 80031e0:	0800df88 	.word	0x0800df88
 80031e4:	200003d8 	.word	0x200003d8
 80031e8:	20000020 	.word	0x20000020
 80031ec:	0800e110 	.word	0x0800e110
 80031f0:	0800e120 	.word	0x0800e120

080031f4 <checkfaceid>:
uint8_t checkfaceid(uint8_t key){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80031fe:	2280      	movs	r2, #128	@ 0x80
 8003200:	2100      	movs	r1, #0
 8003202:	4817      	ldr	r0, [pc, #92]	@ (8003260 <checkfaceid+0x6c>)
 8003204:	f009 ff10 	bl	800d028 <memset>
	sprintf(Tx_Buffer , "Che.%d", key );
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	461a      	mov	r2, r3
 800320c:	4915      	ldr	r1, [pc, #84]	@ (8003264 <checkfaceid+0x70>)
 800320e:	4816      	ldr	r0, [pc, #88]	@ (8003268 <checkfaceid+0x74>)
 8003210:	f009 feea 	bl	800cfe8 <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 5);
 8003214:	2105      	movs	r1, #5
 8003216:	4814      	ldr	r0, [pc, #80]	@ (8003268 <checkfaceid+0x74>)
 8003218:	f009 fad4 	bl	800c7c4 <CDC_Transmit_FS>
	while(Rx_Buffer[0] ==0){
 800321c:	e000      	b.n	8003220 <checkfaceid+0x2c>
			continue;
 800321e:	bf00      	nop
	while(Rx_Buffer[0] ==0){
 8003220:	4b0f      	ldr	r3, [pc, #60]	@ (8003260 <checkfaceid+0x6c>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b25b      	sxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f9      	beq.n	800321e <checkfaceid+0x2a>
		}
//	CLCD_I2C_Display(&LCD1, Rx_Buffer, "");
	HAL_Delay(1000);
 800322a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800322e:	f001 f88b 	bl	8004348 <HAL_Delay>
	if(Rx_Buffer[0] == 'T'){
 8003232:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <checkfaceid+0x6c>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b25b      	sxtb	r3, r3
 8003238:	2b54      	cmp	r3, #84	@ 0x54
 800323a:	d101      	bne.n	8003240 <checkfaceid+0x4c>
		return key;
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	e00b      	b.n	8003258 <checkfaceid+0x64>
	}else if(Rx_Buffer[0] == 'F'){
 8003240:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <checkfaceid+0x6c>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b25b      	sxtb	r3, r3
 8003246:	2b46      	cmp	r3, #70	@ 0x46
 8003248:	d101      	bne.n	800324e <checkfaceid+0x5a>
		return 0;
 800324a:	2300      	movs	r3, #0
 800324c:	e004      	b.n	8003258 <checkfaceid+0x64>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800324e:	2280      	movs	r2, #128	@ 0x80
 8003250:	2100      	movs	r1, #0
 8003252:	4803      	ldr	r0, [pc, #12]	@ (8003260 <checkfaceid+0x6c>)
 8003254:	f009 fee8 	bl	800d028 <memset>
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000350 	.word	0x20000350
 8003264:	0800e130 	.word	0x0800e130
 8003268:	200003d0 	.word	0x200003d0

0800326c <add_finger>:
//---------- them van tay---------------
void add_finger()
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
    uint8_t id = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	71fb      	strb	r3, [r7, #7]
    CLCD_I2C_Display(&LCD1, "Enter ID (1-9):", "ID= ");
 8003276:	4a8d      	ldr	r2, [pc, #564]	@ (80034ac <add_finger+0x240>)
 8003278:	498d      	ldr	r1, [pc, #564]	@ (80034b0 <add_finger+0x244>)
 800327a:	488e      	ldr	r0, [pc, #568]	@ (80034b4 <add_finger+0x248>)
 800327c:	f7fd f8be 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 8003280:	200a      	movs	r0, #10
 8003282:	f7fd fa15 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8003286:	4603      	mov	r3, r0
 8003288:	71bb      	strb	r3, [r7, #6]
        if (key >= '1' && key <= '9')
 800328a:	79bb      	ldrb	r3, [r7, #6]
 800328c:	2b30      	cmp	r3, #48	@ 0x30
 800328e:	d9f7      	bls.n	8003280 <add_finger+0x14>
 8003290:	79bb      	ldrb	r3, [r7, #6]
 8003292:	2b39      	cmp	r3, #57	@ 0x39
 8003294:	d8f4      	bhi.n	8003280 <add_finger+0x14>
        {
            id = key - '0';
 8003296:	79bb      	ldrb	r3, [r7, #6]
 8003298:	3b30      	subs	r3, #48	@ 0x30
 800329a:	71fb      	strb	r3, [r7, #7]
            break;
 800329c:	bf00      	nop
        }
    }
    ID = id;
 800329e:	4a86      	ldr	r2, [pc, #536]	@ (80034b8 <add_finger+0x24c>)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	7013      	strb	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 80032a4:	2201      	movs	r2, #1
 80032a6:	2104      	movs	r1, #4
 80032a8:	4882      	ldr	r0, [pc, #520]	@ (80034b4 <add_finger+0x248>)
 80032aa:	f7fd f82d 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteChar(&LCD1, '0' + ID);
 80032ae:	4b82      	ldr	r3, [pc, #520]	@ (80034b8 <add_finger+0x24c>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	3330      	adds	r3, #48	@ 0x30
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4619      	mov	r1, r3
 80032b8:	487e      	ldr	r0, [pc, #504]	@ (80034b4 <add_finger+0x248>)
 80032ba:	f7fd f868 	bl	800038e <CLCD_I2C_WriteChar>
    HAL_Delay(1000);
 80032be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032c2:	f001 f841 	bl	8004348 <HAL_Delay>

    vitri2:
    while(1)
    {
        collect_finger();
 80032c6:	f7fd fb13 	bl	80008f0 <collect_finger>
        CLCD_I2C_Display(&LCD1, "Add Finger Print", "Put your finger!!     ");
 80032ca:	4a7c      	ldr	r2, [pc, #496]	@ (80034bc <add_finger+0x250>)
 80032cc:	497c      	ldr	r1, [pc, #496]	@ (80034c0 <add_finger+0x254>)
 80032ce:	4879      	ldr	r0, [pc, #484]	@ (80034b4 <add_finger+0x248>)
 80032d0:	f7fd f894 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(1000);
 80032d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032d8:	f001 f836 	bl	8004348 <HAL_Delay>
    // dat tay vao
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80032dc:	2201      	movs	r2, #1
 80032de:	2100      	movs	r1, #0
 80032e0:	4874      	ldr	r0, [pc, #464]	@ (80034b4 <add_finger+0x248>)
 80032e2:	f7fd f811 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 80032e6:	4977      	ldr	r1, [pc, #476]	@ (80034c4 <add_finger+0x258>)
 80032e8:	4872      	ldr	r0, [pc, #456]	@ (80034b4 <add_finger+0x248>)
 80032ea:	f7fd f860 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 80032ee:	4b76      	ldr	r3, [pc, #472]	@ (80034c8 <add_finger+0x25c>)
 80032f0:	22ff      	movs	r2, #255	@ 0xff
 80032f2:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 80032f4:	e008      	b.n	8003308 <add_finger+0x9c>
            collect_finger();
 80032f6:	f7fd fafb 	bl	80008f0 <collect_finger>
            collect_finger();
 80032fa:	f7fd faf9 	bl	80008f0 <collect_finger>
            tmp= collect_finger();
 80032fe:	f7fd faf7 	bl	80008f0 <collect_finger>
 8003302:	4603      	mov	r3, r0
 8003304:	4a70      	ldr	r2, [pc, #448]	@ (80034c8 <add_finger+0x25c>)
 8003306:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00){
 8003308:	4b6f      	ldr	r3, [pc, #444]	@ (80034c8 <add_finger+0x25c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f2      	bne.n	80032f6 <add_finger+0x8a>
        }
        tmp=0xff;
 8003310:	4b6d      	ldr	r3, [pc, #436]	@ (80034c8 <add_finger+0x25c>)
 8003312:	22ff      	movs	r2, #255	@ 0xff
 8003314:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003316:	2201      	movs	r2, #1
 8003318:	2100      	movs	r1, #0
 800331a:	4866      	ldr	r0, [pc, #408]	@ (80034b4 <add_finger+0x248>)
 800331c:	f7fc fff4 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 8003320:	496a      	ldr	r1, [pc, #424]	@ (80034cc <add_finger+0x260>)
 8003322:	4864      	ldr	r0, [pc, #400]	@ (80034b4 <add_finger+0x248>)
 8003324:	f7fd f843 	bl	80003ae <CLCD_I2C_WriteString>
 8003328:	2064      	movs	r0, #100	@ 0x64
 800332a:	f001 f80d 	bl	8004348 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800332e:	2201      	movs	r2, #1
 8003330:	2100      	movs	r1, #0
 8003332:	4860      	ldr	r0, [pc, #384]	@ (80034b4 <add_finger+0x248>)
 8003334:	f7fc ffe8 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 8003338:	4965      	ldr	r1, [pc, #404]	@ (80034d0 <add_finger+0x264>)
 800333a:	485e      	ldr	r0, [pc, #376]	@ (80034b4 <add_finger+0x248>)
 800333c:	f7fd f837 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8003340:	4b61      	ldr	r3, [pc, #388]	@ (80034c8 <add_finger+0x25c>)
 8003342:	22ff      	movs	r2, #255	@ 0xff
 8003344:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){
 8003346:	e005      	b.n	8003354 <add_finger+0xe8>
        tmp=img2tz(0x01);
 8003348:	2001      	movs	r0, #1
 800334a:	f7fd fafd 	bl	8000948 <img2tz>
 800334e:	4603      	mov	r3, r0
 8003350:	4a5d      	ldr	r2, [pc, #372]	@ (80034c8 <add_finger+0x25c>)
 8003352:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00){
 8003354:	4b5c      	ldr	r3, [pc, #368]	@ (80034c8 <add_finger+0x25c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f5      	bne.n	8003348 <add_finger+0xdc>
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800335c:	2201      	movs	r2, #1
 800335e:	2100      	movs	r1, #0
 8003360:	4854      	ldr	r0, [pc, #336]	@ (80034b4 <add_finger+0x248>)
 8003362:	f7fc ffd1 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"put finger again");HAL_Delay(100);
 8003366:	495b      	ldr	r1, [pc, #364]	@ (80034d4 <add_finger+0x268>)
 8003368:	4852      	ldr	r0, [pc, #328]	@ (80034b4 <add_finger+0x248>)
 800336a:	f7fd f820 	bl	80003ae <CLCD_I2C_WriteString>
 800336e:	2064      	movs	r0, #100	@ 0x64
 8003370:	f000 ffea 	bl	8004348 <HAL_Delay>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003374:	2201      	movs	r2, #1
 8003376:	2100      	movs	r1, #0
 8003378:	484e      	ldr	r0, [pc, #312]	@ (80034b4 <add_finger+0x248>)
 800337a:	f7fc ffc5 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Reading finger...!!     ");
 800337e:	4951      	ldr	r1, [pc, #324]	@ (80034c4 <add_finger+0x258>)
 8003380:	484c      	ldr	r0, [pc, #304]	@ (80034b4 <add_finger+0x248>)
 8003382:	f7fd f814 	bl	80003ae <CLCD_I2C_WriteString>
        tmp=0xff;
 8003386:	4b50      	ldr	r3, [pc, #320]	@ (80034c8 <add_finger+0x25c>)
 8003388:	22ff      	movs	r2, #255	@ 0xff
 800338a:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00)    {
 800338c:	e008      	b.n	80033a0 <add_finger+0x134>
            collect_finger();
 800338e:	f7fd faaf 	bl	80008f0 <collect_finger>
            collect_finger();
 8003392:	f7fd faad 	bl	80008f0 <collect_finger>
            tmp=collect_finger();
 8003396:	f7fd faab 	bl	80008f0 <collect_finger>
 800339a:	4603      	mov	r3, r0
 800339c:	4a4a      	ldr	r2, [pc, #296]	@ (80034c8 <add_finger+0x25c>)
 800339e:	6013      	str	r3, [r2, #0]
        while(tmp!=0x00)    {
 80033a0:	4b49      	ldr	r3, [pc, #292]	@ (80034c8 <add_finger+0x25c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f2      	bne.n	800338e <add_finger+0x122>
        }
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80033a8:	2201      	movs	r2, #1
 80033aa:	2100      	movs	r1, #0
 80033ac:	4841      	ldr	r0, [pc, #260]	@ (80034b4 <add_finger+0x248>)
 80033ae:	f7fc ffab 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Remove Finger!!   ");HAL_Delay(100);
 80033b2:	4946      	ldr	r1, [pc, #280]	@ (80034cc <add_finger+0x260>)
 80033b4:	483f      	ldr	r0, [pc, #252]	@ (80034b4 <add_finger+0x248>)
 80033b6:	f7fc fffa 	bl	80003ae <CLCD_I2C_WriteString>
 80033ba:	2064      	movs	r0, #100	@ 0x64
 80033bc:	f000 ffc4 	bl	8004348 <HAL_Delay>
        tmp=0xff;
 80033c0:	4b41      	ldr	r3, [pc, #260]	@ (80034c8 <add_finger+0x25c>)
 80033c2:	22ff      	movs	r2, #255	@ 0xff
 80033c4:	601a      	str	r2, [r3, #0]
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80033c6:	2201      	movs	r2, #1
 80033c8:	2100      	movs	r1, #0
 80033ca:	483a      	ldr	r0, [pc, #232]	@ (80034b4 <add_finger+0x248>)
 80033cc:	f7fc ff9c 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"Processing Finger!!   ");
 80033d0:	493f      	ldr	r1, [pc, #252]	@ (80034d0 <add_finger+0x264>)
 80033d2:	4838      	ldr	r0, [pc, #224]	@ (80034b4 <add_finger+0x248>)
 80033d4:	f7fc ffeb 	bl	80003ae <CLCD_I2C_WriteString>
        while(tmp!=0x00)    {tmp=img2tz(0x02);}
 80033d8:	e005      	b.n	80033e6 <add_finger+0x17a>
 80033da:	2002      	movs	r0, #2
 80033dc:	f7fd fab4 	bl	8000948 <img2tz>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4a39      	ldr	r2, [pc, #228]	@ (80034c8 <add_finger+0x25c>)
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b38      	ldr	r3, [pc, #224]	@ (80034c8 <add_finger+0x25c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f5      	bne.n	80033da <add_finger+0x16e>
        tmp=0xff;
 80033ee:	4b36      	ldr	r3, [pc, #216]	@ (80034c8 <add_finger+0x25c>)
 80033f0:	22ff      	movs	r2, #255	@ 0xff
 80033f2:	601a      	str	r2, [r3, #0]
        // kiem tra 2 buff co trung nhau khong
        while(tmp!=0x00)
 80033f4:	e01a      	b.n	800342c <add_finger+0x1c0>
        {
            tmp=match();    //HAL_Delay(100);
 80033f6:	f7fd fae3 	bl	80009c0 <match>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4a32      	ldr	r2, [pc, #200]	@ (80034c8 <add_finger+0x25c>)
 80033fe:	6013      	str	r3, [r2, #0]
            if(tmp==0x08||tmp==0x01)
 8003400:	4b31      	ldr	r3, [pc, #196]	@ (80034c8 <add_finger+0x25c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d003      	beq.n	8003410 <add_finger+0x1a4>
 8003408:	4b2f      	ldr	r3, [pc, #188]	@ (80034c8 <add_finger+0x25c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d10d      	bne.n	800342c <add_finger+0x1c0>
            {
                // loi, lam lai
                    CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8003410:	2201      	movs	r2, #1
 8003412:	2100      	movs	r1, #0
 8003414:	4827      	ldr	r0, [pc, #156]	@ (80034b4 <add_finger+0x248>)
 8003416:	f7fc ff77 	bl	8000308 <CLCD_I2C_SetCursor>
                    CLCD_I2C_WriteString(&LCD1," ER: try again!");HAL_Delay(1500);
 800341a:	492f      	ldr	r1, [pc, #188]	@ (80034d8 <add_finger+0x26c>)
 800341c:	4825      	ldr	r0, [pc, #148]	@ (80034b4 <add_finger+0x248>)
 800341e:	f7fc ffc6 	bl	80003ae <CLCD_I2C_WriteString>
 8003422:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003426:	f000 ff8f 	bl	8004348 <HAL_Delay>
                goto vitri2;
 800342a:	e74c      	b.n	80032c6 <add_finger+0x5a>
        while(tmp!=0x00)
 800342c:	4b26      	ldr	r3, [pc, #152]	@ (80034c8 <add_finger+0x25c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e0      	bne.n	80033f6 <add_finger+0x18a>
            }
        }
        tmp=0xff;
 8003434:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <add_finger+0x25c>)
 8003436:	22ff      	movs	r2, #255	@ 0xff
 8003438:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){tmp=regmodel();HAL_Delay(100);}
 800343a:	e007      	b.n	800344c <add_finger+0x1e0>
 800343c:	f7fd faec 	bl	8000a18 <regmodel>
 8003440:	4603      	mov	r3, r0
 8003442:	4a21      	ldr	r2, [pc, #132]	@ (80034c8 <add_finger+0x25c>)
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	2064      	movs	r0, #100	@ 0x64
 8003448:	f000 ff7e 	bl	8004348 <HAL_Delay>
 800344c:	4b1e      	ldr	r3, [pc, #120]	@ (80034c8 <add_finger+0x25c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f3      	bne.n	800343c <add_finger+0x1d0>
        tmp=0xff;
 8003454:	4b1c      	ldr	r3, [pc, #112]	@ (80034c8 <add_finger+0x25c>)
 8003456:	22ff      	movs	r2, #255	@ 0xff
 8003458:	601a      	str	r2, [r3, #0]
        while(tmp!=0x00){tmp=store(ID);HAL_Delay(100);}            // luu id
 800345a:	e00a      	b.n	8003472 <add_finger+0x206>
 800345c:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <add_finger+0x24c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7fd fb05 	bl	8000a70 <store>
 8003466:	4603      	mov	r3, r0
 8003468:	4a17      	ldr	r2, [pc, #92]	@ (80034c8 <add_finger+0x25c>)
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	2064      	movs	r0, #100	@ 0x64
 800346e:	f000 ff6b 	bl	8004348 <HAL_Delay>
 8003472:	4b15      	ldr	r3, [pc, #84]	@ (80034c8 <add_finger+0x25c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <add_finger+0x1f0>
        CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800347a:	2201      	movs	r2, #1
 800347c:	2100      	movs	r1, #0
 800347e:	480d      	ldr	r0, [pc, #52]	@ (80034b4 <add_finger+0x248>)
 8003480:	f7fc ff42 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1,"  Save Finger!    ");
 8003484:	4915      	ldr	r1, [pc, #84]	@ (80034dc <add_finger+0x270>)
 8003486:	480b      	ldr	r0, [pc, #44]	@ (80034b4 <add_finger+0x248>)
 8003488:	f7fc ff91 	bl	80003ae <CLCD_I2C_WriteString>
                /***************** DA LUU XONG**************************/
        HAL_Delay(1500);
 800348c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003490:	f000 ff5a 	bl	8004348 <HAL_Delay>
        tmp=0xff;
 8003494:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <add_finger+0x25c>)
 8003496:	22ff      	movs	r2, #255	@ 0xff
 8003498:	601a      	str	r2, [r3, #0]
        CLCD_I2C_Clear(&LCD1);
 800349a:	4806      	ldr	r0, [pc, #24]	@ (80034b4 <add_finger+0x248>)
 800349c:	f7fc ff9e 	bl	80003dc <CLCD_I2C_Clear>
        break;
 80034a0:	bf00      	nop
    }
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	0800e138 	.word	0x0800e138
 80034b0:	0800e140 	.word	0x0800e140
 80034b4:	200003d8 	.word	0x200003d8
 80034b8:	20000408 	.word	0x20000408
 80034bc:	0800e150 	.word	0x0800e150
 80034c0:	0800e168 	.word	0x0800e168
 80034c4:	0800e17c 	.word	0x0800e17c
 80034c8:	20000404 	.word	0x20000404
 80034cc:	0800e198 	.word	0x0800e198
 80034d0:	0800e1ac 	.word	0x0800e1ac
 80034d4:	0800e1c4 	.word	0x0800e1c4
 80034d8:	0800e1d8 	.word	0x0800e1d8
 80034dc:	0800e1e8 	.word	0x0800e1e8

080034e0 <read_finger>:
                        //----------end them van tay---------------
void read_finger()
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
/**************************BEgin Doc van tay*****************************/
	tmp=0xff;
 80034e4:	4b39      	ldr	r3, [pc, #228]	@ (80035cc <read_finger+0xec>)
 80034e6:	22ff      	movs	r2, #255	@ 0xff
 80034e8:	601a      	str	r2, [r3, #0]
	time_cho=HAL_GetTick();
 80034ea:	f000 ff23 	bl	8004334 <HAL_GetTick>
 80034ee:	4603      	mov	r3, r0
 80034f0:	4a37      	ldr	r2, [pc, #220]	@ (80035d0 <read_finger+0xf0>)
 80034f2:	6013      	str	r3, [r2, #0]
	while(tmp!=0x00){
 80034f4:	e013      	b.n	800351e <read_finger+0x3e>
		tmp=collect_finger();
 80034f6:	f7fd f9fb 	bl	80008f0 <collect_finger>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4a33      	ldr	r2, [pc, #204]	@ (80035cc <read_finger+0xec>)
 80034fe:	6013      	str	r3, [r2, #0]
		if(HAL_GetTick()-time_cho>=1600) {
 8003500:	f000 ff18 	bl	8004334 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	4b32      	ldr	r3, [pc, #200]	@ (80035d0 <read_finger+0xf0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003510:	d305      	bcc.n	800351e <read_finger+0x3e>
		time_cho=HAL_GetTick();
 8003512:	f000 ff0f 	bl	8004334 <HAL_GetTick>
 8003516:	4603      	mov	r3, r0
 8003518:	4a2d      	ldr	r2, [pc, #180]	@ (80035d0 <read_finger+0xf0>)
 800351a:	6013      	str	r3, [r2, #0]
		return;}
 800351c:	e055      	b.n	80035ca <read_finger+0xea>
	while(tmp!=0x00){
 800351e:	4b2b      	ldr	r3, [pc, #172]	@ (80035cc <read_finger+0xec>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e7      	bne.n	80034f6 <read_finger+0x16>

	}
	tmp=0xff;
 8003526:	4b29      	ldr	r3, [pc, #164]	@ (80035cc <read_finger+0xec>)
 8003528:	22ff      	movs	r2, #255	@ 0xff
 800352a:	601a      	str	r2, [r3, #0]
	if(tmp!=0x00){tmp=img2tz(0x01);}
 800352c:	4b27      	ldr	r3, [pc, #156]	@ (80035cc <read_finger+0xec>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <read_finger+0x60>
 8003534:	2001      	movs	r0, #1
 8003536:	f7fd fa07 	bl	8000948 <img2tz>
 800353a:	4603      	mov	r3, r0
 800353c:	4a23      	ldr	r2, [pc, #140]	@ (80035cc <read_finger+0xec>)
 800353e:	6013      	str	r3, [r2, #0]
	tmp=0xff;
 8003540:	4b22      	ldr	r3, [pc, #136]	@ (80035cc <read_finger+0xec>)
 8003542:	22ff      	movs	r2, #255	@ 0xff
 8003544:	601a      	str	r2, [r3, #0]
	tmp=search();
 8003546:	f7fd fad2 	bl	8000aee <search>
 800354a:	4603      	mov	r3, r0
 800354c:	4a1f      	ldr	r2, [pc, #124]	@ (80035cc <read_finger+0xec>)
 800354e:	6013      	str	r3, [r2, #0]
	if(tmp==0x00)
 8003550:	4b1e      	ldr	r3, [pc, #120]	@ (80035cc <read_finger+0xec>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d119      	bne.n	800358c <read_finger+0xac>
	{
		tmp=0xff;	// co van tay
 8003558:	4b1c      	ldr	r3, [pc, #112]	@ (80035cc <read_finger+0xec>)
 800355a:	22ff      	movs	r2, #255	@ 0xff
 800355c:	601a      	str	r2, [r3, #0]
		CLCD_I2C_Display(&LCD1, "    WELCOME", "Finger");
 800355e:	4a1d      	ldr	r2, [pc, #116]	@ (80035d4 <read_finger+0xf4>)
 8003560:	491d      	ldr	r1, [pc, #116]	@ (80035d8 <read_finger+0xf8>)
 8003562:	481e      	ldr	r0, [pc, #120]	@ (80035dc <read_finger+0xfc>)
 8003564:	f7fc ff4a 	bl	80003fc <CLCD_I2C_Display>
		sprintf(mess," - id = %d  ", pID); // Use %d for integer
 8003568:	4b1d      	ldr	r3, [pc, #116]	@ (80035e0 <read_finger+0x100>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	491d      	ldr	r1, [pc, #116]	@ (80035e4 <read_finger+0x104>)
 8003570:	481d      	ldr	r0, [pc, #116]	@ (80035e8 <read_finger+0x108>)
 8003572:	f009 fd39 	bl	800cfe8 <siprintf>
		CLCD_I2C_WriteString(&LCD1,mess);
 8003576:	491c      	ldr	r1, [pc, #112]	@ (80035e8 <read_finger+0x108>)
 8003578:	4818      	ldr	r0, [pc, #96]	@ (80035dc <read_finger+0xfc>)
 800357a:	f7fc ff18 	bl	80003ae <CLCD_I2C_WriteString>
		HAL_Delay(2000);
 800357e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003582:	f000 fee1 	bl	8004348 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 8003586:	4815      	ldr	r0, [pc, #84]	@ (80035dc <read_finger+0xfc>)
 8003588:	f7fc ff28 	bl	80003dc <CLCD_I2C_Clear>
	}
	if(tmp==0x09)	// khong co van tay
 800358c:	4b0f      	ldr	r3, [pc, #60]	@ (80035cc <read_finger+0xec>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b09      	cmp	r3, #9
 8003592:	d11a      	bne.n	80035ca <read_finger+0xea>
	{
		tmp=0xff;
 8003594:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <read_finger+0xec>)
 8003596:	22ff      	movs	r2, #255	@ 0xff
 8003598:	601a      	str	r2, [r3, #0]
		CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800359a:	2201      	movs	r2, #1
 800359c:	2100      	movs	r1, #0
 800359e:	480f      	ldr	r0, [pc, #60]	@ (80035dc <read_finger+0xfc>)
 80035a0:	f7fc feb2 	bl	8000308 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(&LCD1,"WRONG Fingerprint"); HAL_Delay(1000);
 80035a4:	4911      	ldr	r1, [pc, #68]	@ (80035ec <read_finger+0x10c>)
 80035a6:	480d      	ldr	r0, [pc, #52]	@ (80035dc <read_finger+0xfc>)
 80035a8:	f7fc ff01 	bl	80003ae <CLCD_I2C_WriteString>
 80035ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035b0:	f000 feca 	bl	8004348 <HAL_Delay>
		CLCD_I2C_WriteString(&LCD1,mess);
 80035b4:	490c      	ldr	r1, [pc, #48]	@ (80035e8 <read_finger+0x108>)
 80035b6:	4809      	ldr	r0, [pc, #36]	@ (80035dc <read_finger+0xfc>)
 80035b8:	f7fc fef9 	bl	80003ae <CLCD_I2C_WriteString>
		HAL_Delay(1000);
 80035bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035c0:	f000 fec2 	bl	8004348 <HAL_Delay>
		CLCD_I2C_Clear(&LCD1);
 80035c4:	4805      	ldr	r0, [pc, #20]	@ (80035dc <read_finger+0xfc>)
 80035c6:	f7fc ff09 	bl	80003dc <CLCD_I2C_Clear>
	}
}
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000404 	.word	0x20000404
 80035d0:	200003f4 	.word	0x200003f4
 80035d4:	0800e1fc 	.word	0x0800e1fc
 80035d8:	0800d984 	.word	0x0800d984
 80035dc:	200003d8 	.word	0x200003d8
 80035e0:	20000218 	.word	0x20000218
 80035e4:	0800e204 	.word	0x0800e204
 80035e8:	200003f8 	.word	0x200003f8
 80035ec:	0800e214 	.word	0x0800e214

080035f0 <remove_id_finger>:
void remove_id_finger()
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
    uint8_t id = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]
    CLCD_I2C_Display(&LCD1, "Enter ID to remove:", "ID= ");
 80035fa:	4a2c      	ldr	r2, [pc, #176]	@ (80036ac <remove_id_finger+0xbc>)
 80035fc:	492c      	ldr	r1, [pc, #176]	@ (80036b0 <remove_id_finger+0xc0>)
 80035fe:	482d      	ldr	r0, [pc, #180]	@ (80036b4 <remove_id_finger+0xc4>)
 8003600:	f7fc fefc 	bl	80003fc <CLCD_I2C_Display>
    while (1)
    {
        char key = KeyPad_WaitForKeyGetChar(10);
 8003604:	200a      	movs	r0, #10
 8003606:	f7fd f853 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 800360a:	4603      	mov	r3, r0
 800360c:	75bb      	strb	r3, [r7, #22]
        if (key >= '1' && key <= '9')
 800360e:	7dbb      	ldrb	r3, [r7, #22]
 8003610:	2b30      	cmp	r3, #48	@ 0x30
 8003612:	d9f7      	bls.n	8003604 <remove_id_finger+0x14>
 8003614:	7dbb      	ldrb	r3, [r7, #22]
 8003616:	2b39      	cmp	r3, #57	@ 0x39
 8003618:	d8f4      	bhi.n	8003604 <remove_id_finger+0x14>
        {
            id = key - '0';
 800361a:	7dbb      	ldrb	r3, [r7, #22]
 800361c:	3b30      	subs	r3, #48	@ 0x30
 800361e:	75fb      	strb	r3, [r7, #23]
            break;
 8003620:	bf00      	nop
        }
    }
    ID = id;
 8003622:	4a25      	ldr	r2, [pc, #148]	@ (80036b8 <remove_id_finger+0xc8>)
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	7013      	strb	r3, [r2, #0]
    CLCD_I2C_SetCursor(&LCD1, 4, 1);
 8003628:	2201      	movs	r2, #1
 800362a:	2104      	movs	r1, #4
 800362c:	4821      	ldr	r0, [pc, #132]	@ (80036b4 <remove_id_finger+0xc4>)
 800362e:	f7fc fe6b 	bl	8000308 <CLCD_I2C_SetCursor>
    CLCD_I2C_WriteChar(&LCD1, '0' + ID);
 8003632:	4b21      	ldr	r3, [pc, #132]	@ (80036b8 <remove_id_finger+0xc8>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	3330      	adds	r3, #48	@ 0x30
 8003638:	b2db      	uxtb	r3, r3
 800363a:	4619      	mov	r1, r3
 800363c:	481d      	ldr	r0, [pc, #116]	@ (80036b4 <remove_id_finger+0xc4>)
 800363e:	f7fc fea6 	bl	800038e <CLCD_I2C_WriteChar>
    HAL_Delay(1000);
 8003642:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003646:	f000 fe7f 	bl	8004348 <HAL_Delay>

    CLCD_I2C_Display(&LCD1, "Removing Finger", "");
 800364a:	4a1c      	ldr	r2, [pc, #112]	@ (80036bc <remove_id_finger+0xcc>)
 800364c:	491c      	ldr	r1, [pc, #112]	@ (80036c0 <remove_id_finger+0xd0>)
 800364e:	4819      	ldr	r0, [pc, #100]	@ (80036b4 <remove_id_finger+0xc4>)
 8003650:	f7fc fed4 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result = delete_finger(ID);
 8003654:	4b18      	ldr	r3, [pc, #96]	@ (80036b8 <remove_id_finger+0xc8>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd fac5 	bl	8000be8 <delete_finger>
 800365e:	4603      	mov	r3, r0
 8003660:	757b      	strb	r3, [r7, #21]
    if (result == 0x00)
 8003662:	7d7b      	ldrb	r3, [r7, #21]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <remove_id_finger+0x8e>
    {
        CLCD_I2C_Display(&LCD1, "Remove Finger", "Successfully");
 8003668:	4a16      	ldr	r2, [pc, #88]	@ (80036c4 <remove_id_finger+0xd4>)
 800366a:	4917      	ldr	r1, [pc, #92]	@ (80036c8 <remove_id_finger+0xd8>)
 800366c:	4811      	ldr	r0, [pc, #68]	@ (80036b4 <remove_id_finger+0xc4>)
 800366e:	f7fc fec5 	bl	80003fc <CLCD_I2C_Display>
        // Ensure the fingerprint is removed from memory
        fingerprint_detected = 0;
 8003672:	4b16      	ldr	r3, [pc, #88]	@ (80036cc <remove_id_finger+0xdc>)
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
        // Reset the fingerprint module
        reset_fingerprint_module();
 8003678:	f000 f87e 	bl	8003778 <reset_fingerprint_module>
 800367c:	e00b      	b.n	8003696 <remove_id_finger+0xa6>
    }
    else
    {
        char buffer[16];
        snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 800367e:	7d7b      	ldrb	r3, [r7, #21]
 8003680:	1d38      	adds	r0, r7, #4
 8003682:	4a13      	ldr	r2, [pc, #76]	@ (80036d0 <remove_id_finger+0xe0>)
 8003684:	2110      	movs	r1, #16
 8003686:	f009 fc7b 	bl	800cf80 <sniprintf>
        CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	461a      	mov	r2, r3
 800368e:	490e      	ldr	r1, [pc, #56]	@ (80036c8 <remove_id_finger+0xd8>)
 8003690:	4808      	ldr	r0, [pc, #32]	@ (80036b4 <remove_id_finger+0xc4>)
 8003692:	f7fc feb3 	bl	80003fc <CLCD_I2C_Display>
    }
    HAL_Delay(2000);
 8003696:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800369a:	f000 fe55 	bl	8004348 <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 800369e:	4805      	ldr	r0, [pc, #20]	@ (80036b4 <remove_id_finger+0xc4>)
 80036a0:	f7fc fe9c 	bl	80003dc <CLCD_I2C_Clear>
}
 80036a4:	bf00      	nop
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	0800e138 	.word	0x0800e138
 80036b0:	0800e228 	.word	0x0800e228
 80036b4:	200003d8 	.word	0x200003d8
 80036b8:	20000408 	.word	0x20000408
 80036bc:	0800d970 	.word	0x0800d970
 80036c0:	0800e23c 	.word	0x0800e23c
 80036c4:	0800e24c 	.word	0x0800e24c
 80036c8:	0800e25c 	.word	0x0800e25c
 80036cc:	20000409 	.word	0x20000409
 80036d0:	0800e26c 	.word	0x0800e26c

080036d4 <remove_all_finger>:

void remove_all_finger()
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
    CLCD_I2C_Display(&LCD1, "Removing All", "Fingers");
 80036da:	4a1f      	ldr	r2, [pc, #124]	@ (8003758 <remove_all_finger+0x84>)
 80036dc:	491f      	ldr	r1, [pc, #124]	@ (800375c <remove_all_finger+0x88>)
 80036de:	4820      	ldr	r0, [pc, #128]	@ (8003760 <remove_all_finger+0x8c>)
 80036e0:	f7fc fe8c 	bl	80003fc <CLCD_I2C_Display>
    uint8_t result;
    for (uint8_t id = 0; id <= 9; id++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	75fb      	strb	r3, [r7, #23]
 80036e8:	e01f      	b.n	800372a <remove_all_finger+0x56>
    {
        result = delete_finger(id);
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fa7b 	bl	8000be8 <delete_finger>
 80036f2:	4603      	mov	r3, r0
 80036f4:	75bb      	strb	r3, [r7, #22]
        if (result != 0x00)
 80036f6:	7dbb      	ldrb	r3, [r7, #22]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <remove_all_finger+0x50>
        {
            char buffer[16];
            snprintf(buffer, sizeof(buffer), "Error Code: %02X", result);
 80036fc:	7dbb      	ldrb	r3, [r7, #22]
 80036fe:	1d38      	adds	r0, r7, #4
 8003700:	4a18      	ldr	r2, [pc, #96]	@ (8003764 <remove_all_finger+0x90>)
 8003702:	2110      	movs	r1, #16
 8003704:	f009 fc3c 	bl	800cf80 <sniprintf>
            CLCD_I2C_Display(&LCD1, "Remove Finger", buffer);
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	461a      	mov	r2, r3
 800370c:	4916      	ldr	r1, [pc, #88]	@ (8003768 <remove_all_finger+0x94>)
 800370e:	4814      	ldr	r0, [pc, #80]	@ (8003760 <remove_all_finger+0x8c>)
 8003710:	f7fc fe74 	bl	80003fc <CLCD_I2C_Display>
            HAL_Delay(2000);
 8003714:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003718:	f000 fe16 	bl	8004348 <HAL_Delay>
            CLCD_I2C_Clear(&LCD1);
 800371c:	4810      	ldr	r0, [pc, #64]	@ (8003760 <remove_all_finger+0x8c>)
 800371e:	f7fc fe5d 	bl	80003dc <CLCD_I2C_Clear>
 8003722:	e016      	b.n	8003752 <remove_all_finger+0x7e>
    for (uint8_t id = 0; id <= 9; id++)
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	3301      	adds	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b09      	cmp	r3, #9
 800372e:	d9dc      	bls.n	80036ea <remove_all_finger+0x16>
            return;
        }
    }
    CLCD_I2C_Display(&LCD1, "   REMOVE ALL", "  SUCCESSFULLY");
 8003730:	4a0e      	ldr	r2, [pc, #56]	@ (800376c <remove_all_finger+0x98>)
 8003732:	490f      	ldr	r1, [pc, #60]	@ (8003770 <remove_all_finger+0x9c>)
 8003734:	480a      	ldr	r0, [pc, #40]	@ (8003760 <remove_all_finger+0x8c>)
 8003736:	f7fc fe61 	bl	80003fc <CLCD_I2C_Display>
    // Ensure all fingerprints are removed from memory
    fingerprint_detected = 0;
 800373a:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <remove_all_finger+0xa0>)
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
    // Reset the fingerprint module
    reset_fingerprint_module();
 8003740:	f000 f81a 	bl	8003778 <reset_fingerprint_module>
    HAL_Delay(2000);
 8003744:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003748:	f000 fdfe 	bl	8004348 <HAL_Delay>
    CLCD_I2C_Clear(&LCD1);
 800374c:	4804      	ldr	r0, [pc, #16]	@ (8003760 <remove_all_finger+0x8c>)
 800374e:	f7fc fe45 	bl	80003dc <CLCD_I2C_Clear>
}
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	0800e280 	.word	0x0800e280
 800375c:	0800e288 	.word	0x0800e288
 8003760:	200003d8 	.word	0x200003d8
 8003764:	0800e26c 	.word	0x0800e26c
 8003768:	0800e25c 	.word	0x0800e25c
 800376c:	0800e298 	.word	0x0800e298
 8003770:	0800e2a8 	.word	0x0800e2a8
 8003774:	20000409 	.word	0x20000409

08003778 <reset_fingerprint_module>:

void reset_fingerprint_module()
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
    // This can be a hardware reset or a software reset command
    // Example:
    // HAL_GPIO_WritePin(FP_RESET_GPIO_Port, FP_RESET_Pin, GPIO_PIN_RESET);
    // HAL_Delay(100);
    // HAL_GPIO_WritePin(FP_RESET_GPIO_Port, FP_RESET_Pin, GPIO_PIN_SET);
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <startface>:
void startface(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
	if(Rx_Buffer[0] == 'Y'){
 8003788:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <startface+0x5c>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b25b      	sxtb	r3, r3
 800378e:	2b59      	cmp	r3, #89	@ 0x59
 8003790:	d110      	bne.n	80037b4 <startface+0x30>
        CLCD_I2C_Clear(&LCD1);
 8003792:	4814      	ldr	r0, [pc, #80]	@ (80037e4 <startface+0x60>)
 8003794:	f7fc fe22 	bl	80003dc <CLCD_I2C_Clear>
        CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8003798:	2200      	movs	r2, #0
 800379a:	2100      	movs	r1, #0
 800379c:	4811      	ldr	r0, [pc, #68]	@ (80037e4 <startface+0x60>)
 800379e:	f7fc fdb3 	bl	8000308 <CLCD_I2C_SetCursor>
        CLCD_I2C_WriteString(&LCD1, "    WELCOME");
 80037a2:	4911      	ldr	r1, [pc, #68]	@ (80037e8 <startface+0x64>)
 80037a4:	480f      	ldr	r0, [pc, #60]	@ (80037e4 <startface+0x60>)
 80037a6:	f7fc fe02 	bl	80003ae <CLCD_I2C_WriteString>
        HAL_Delay(2000);
 80037aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80037ae:	f000 fdcb 	bl	8004348 <HAL_Delay>
 80037b2:	e00d      	b.n	80037d0 <startface+0x4c>
	}else if(Rx_Buffer[0] == 'N'){
 80037b4:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <startface+0x5c>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	b25b      	sxtb	r3, r3
 80037ba:	2b4e      	cmp	r3, #78	@ 0x4e
 80037bc:	d108      	bne.n	80037d0 <startface+0x4c>
		CLCD_I2C_Display(&LCD1, "  WRONG FACEID", "CAN NOT ACCESS");
 80037be:	4a0b      	ldr	r2, [pc, #44]	@ (80037ec <startface+0x68>)
 80037c0:	490b      	ldr	r1, [pc, #44]	@ (80037f0 <startface+0x6c>)
 80037c2:	4808      	ldr	r0, [pc, #32]	@ (80037e4 <startface+0x60>)
 80037c4:	f7fc fe1a 	bl	80003fc <CLCD_I2C_Display>
        HAL_Delay(2000);
 80037c8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80037cc:	f000 fdbc 	bl	8004348 <HAL_Delay>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80037d0:	2280      	movs	r2, #128	@ 0x80
 80037d2:	2100      	movs	r1, #0
 80037d4:	4802      	ldr	r0, [pc, #8]	@ (80037e0 <startface+0x5c>)
 80037d6:	f009 fc27 	bl	800d028 <memset>
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000350 	.word	0x20000350
 80037e4:	200003d8 	.word	0x200003d8
 80037e8:	0800d984 	.word	0x0800d984
 80037ec:	0800e2b8 	.word	0x0800e2b8
 80037f0:	0800e2c8 	.word	0x0800e2c8

080037f4 <enter_password>:

void enter_password(char *password) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 6; i++) {
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e019      	b.n	8003836 <enter_password+0x42>
        char key;
        do {
            key = KeyPad_WaitForKeyGetChar(10);
 8003802:	200a      	movs	r0, #10
 8003804:	f7fc ff54 	bl	80006b0 <KeyPad_WaitForKeyGetChar>
 8003808:	4603      	mov	r3, r0
 800380a:	72fb      	strb	r3, [r7, #11]
        } while (key == 0 || (key < '0' || key > '9')); // Only accept numeric keys
 800380c:	7afb      	ldrb	r3, [r7, #11]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f7      	beq.n	8003802 <enter_password+0xe>
 8003812:	7afb      	ldrb	r3, [r7, #11]
 8003814:	2b2f      	cmp	r3, #47	@ 0x2f
 8003816:	d9f4      	bls.n	8003802 <enter_password+0xe>
 8003818:	7afb      	ldrb	r3, [r7, #11]
 800381a:	2b39      	cmp	r3, #57	@ 0x39
 800381c:	d8f1      	bhi.n	8003802 <enter_password+0xe>
        password[i] = key;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4413      	add	r3, r2
 8003824:	7afa      	ldrb	r2, [r7, #11]
 8003826:	701a      	strb	r2, [r3, #0]
        CLCD_I2C_WriteChar(&LCD1, '*');
 8003828:	212a      	movs	r1, #42	@ 0x2a
 800382a:	4808      	ldr	r0, [pc, #32]	@ (800384c <enter_password+0x58>)
 800382c:	f7fc fdaf 	bl	800038e <CLCD_I2C_WriteChar>
    for (int i = 0; i < 6; i++) {
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3301      	adds	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b05      	cmp	r3, #5
 800383a:	dde2      	ble.n	8003802 <enter_password+0xe>
    }
    password[6] = '\0';
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3306      	adds	r3, #6
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200003d8 	.word	0x200003d8

08003850 <change_password>:

void change_password(void) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
    char new_password[7] = {0};
 8003856:	2300      	movs	r3, #0
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	1d3b      	adds	r3, r7, #4
 800385c:	2100      	movs	r1, #0
 800385e:	460a      	mov	r2, r1
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	460a      	mov	r2, r1
 8003864:	709a      	strb	r2, [r3, #2]
    CLCD_I2C_Display(&LCD1, "NEW PASSWORD", "");
 8003866:	4a11      	ldr	r2, [pc, #68]	@ (80038ac <change_password+0x5c>)
 8003868:	4911      	ldr	r1, [pc, #68]	@ (80038b0 <change_password+0x60>)
 800386a:	4812      	ldr	r0, [pc, #72]	@ (80038b4 <change_password+0x64>)
 800386c:	f7fc fdc6 	bl	80003fc <CLCD_I2C_Display>
    enter_password(new_password);
 8003870:	463b      	mov	r3, r7
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ffbe 	bl	80037f4 <enter_password>
    // Erase the flash memory at the password address before writing the new password
    Flash_Erase(StartAddressPassword);
 8003878:	480f      	ldr	r0, [pc, #60]	@ (80038b8 <change_password+0x68>)
 800387a:	f7fd f9c4 	bl	8000c06 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)new_password, 6);
 800387e:	463b      	mov	r3, r7
 8003880:	2206      	movs	r2, #6
 8003882:	4619      	mov	r1, r3
 8003884:	480c      	ldr	r0, [pc, #48]	@ (80038b8 <change_password+0x68>)
 8003886:	f7fd f9f2 	bl	8000c6e <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, "PASSWORD CHANGED", "");
 800388a:	4a08      	ldr	r2, [pc, #32]	@ (80038ac <change_password+0x5c>)
 800388c:	490b      	ldr	r1, [pc, #44]	@ (80038bc <change_password+0x6c>)
 800388e:	4809      	ldr	r0, [pc, #36]	@ (80038b4 <change_password+0x64>)
 8003890:	f7fc fdb4 	bl	80003fc <CLCD_I2C_Display>
    HAL_Delay(2000);
 8003894:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003898:	f000 fd56 	bl	8004348 <HAL_Delay>
    exitmenu = 0;
 800389c:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <change_password+0x70>)
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	0800d970 	.word	0x0800d970
 80038b0:	0800e2d8 	.word	0x0800e2d8
 80038b4:	200003d8 	.word	0x200003d8
 80038b8:	0800f400 	.word	0x0800f400
 80038bc:	0800e2e8 	.word	0x0800e2e8
 80038c0:	20000020 	.word	0x20000020

080038c4 <check_password>:

uint8_t check_password(char *password) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
    char stored_password[7] = {0};
 80038cc:	2300      	movs	r3, #0
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	f107 030c 	add.w	r3, r7, #12
 80038d4:	2100      	movs	r1, #0
 80038d6:	460a      	mov	r2, r1
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	460a      	mov	r2, r1
 80038dc:	709a      	strb	r2, [r3, #2]
    Flash_Read_Array(StartAddressPassword, (uint8_t *)stored_password, 6);
 80038de:	f107 0308 	add.w	r3, r7, #8
 80038e2:	2206      	movs	r2, #6
 80038e4:	4619      	mov	r1, r3
 80038e6:	480a      	ldr	r0, [pc, #40]	@ (8003910 <check_password+0x4c>)
 80038e8:	f7fd fa09 	bl	8000cfe <Flash_Read_Array>
    stored_password[6] = '\0';
 80038ec:	2300      	movs	r3, #0
 80038ee:	73bb      	strb	r3, [r7, #14]
    return strcmp(password, stored_password) == 0;
 80038f0:	f107 0308 	add.w	r3, r7, #8
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fc fc28 	bl	800014c <strcmp>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	0800f400 	.word	0x0800f400

08003914 <set_default_password>:

void set_default_password(void) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
    char default_password[6] = "111111";
 800391a:	4a10      	ldr	r2, [pc, #64]	@ (800395c <set_default_password+0x48>)
 800391c:	463b      	mov	r3, r7
 800391e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003922:	6018      	str	r0, [r3, #0]
 8003924:	3304      	adds	r3, #4
 8003926:	8019      	strh	r1, [r3, #0]
    // Erase the flash memory at the password address before writing the default password
    Flash_Erase(StartAddressPassword);
 8003928:	480d      	ldr	r0, [pc, #52]	@ (8003960 <set_default_password+0x4c>)
 800392a:	f7fd f96c 	bl	8000c06 <Flash_Erase>
    Flash_Write_Array(StartAddressPassword, (uint8_t *)default_password, 6);
 800392e:	463b      	mov	r3, r7
 8003930:	2206      	movs	r2, #6
 8003932:	4619      	mov	r1, r3
 8003934:	480a      	ldr	r0, [pc, #40]	@ (8003960 <set_default_password+0x4c>)
 8003936:	f7fd f99a 	bl	8000c6e <Flash_Write_Array>
    CLCD_I2C_Display(&LCD1, "RESET PASSWORD", "SUCCESSFULLY");
 800393a:	4a0a      	ldr	r2, [pc, #40]	@ (8003964 <set_default_password+0x50>)
 800393c:	490a      	ldr	r1, [pc, #40]	@ (8003968 <set_default_password+0x54>)
 800393e:	480b      	ldr	r0, [pc, #44]	@ (800396c <set_default_password+0x58>)
 8003940:	f7fc fd5c 	bl	80003fc <CLCD_I2C_Display>
    HAL_Delay(2000);
 8003944:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003948:	f000 fcfe 	bl	8004348 <HAL_Delay>
    exitmenu=0;
 800394c:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <set_default_password+0x5c>)
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	0800e31c 	.word	0x0800e31c
 8003960:	0800f400 	.word	0x0800f400
 8003964:	0800e2fc 	.word	0x0800e2fc
 8003968:	0800e30c 	.word	0x0800e30c
 800396c:	200003d8 	.word	0x200003d8
 8003970:	20000020 	.word	0x20000020

08003974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003978:	b672      	cpsid	i
}
 800397a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <Error_Handler+0x8>

08003980 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 800398e:	bf00      	nop
 8003990:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <TM_SPI_Send+0x4c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b02      	cmp	r3, #2
 800399c:	d1f8      	bne.n	8003990 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 800399e:	f107 0208 	add.w	r2, r7, #8
 80039a2:	f107 010c 	add.w	r1, r7, #12
 80039a6:	230a      	movs	r3, #10
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2301      	movs	r3, #1
 80039ac:	4807      	ldr	r0, [pc, #28]	@ (80039cc <TM_SPI_Send+0x4c>)
 80039ae:	f003 feff 	bl	80077b0 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 80039b2:	bf00      	nop
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <TM_SPI_Send+0x4c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039be:	2b80      	cmp	r3, #128	@ 0x80
 80039c0:	d0f8      	beq.n	80039b4 <TM_SPI_Send+0x34>
	return data_re[0];
 80039c2:	7a3b      	ldrb	r3, [r7, #8]

}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000270 	.word	0x20000270

080039d0 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 80039d4:	f000 f8d5 	bl	8003b82 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80039d8:	218d      	movs	r1, #141	@ 0x8d
 80039da:	202a      	movs	r0, #42	@ 0x2a
 80039dc:	f000 f836 	bl	8003a4c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80039e0:	213e      	movs	r1, #62	@ 0x3e
 80039e2:	202b      	movs	r0, #43	@ 0x2b
 80039e4:	f000 f832 	bl	8003a4c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 80039e8:	211e      	movs	r1, #30
 80039ea:	202d      	movs	r0, #45	@ 0x2d
 80039ec:	f000 f82e 	bl	8003a4c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80039f0:	2100      	movs	r1, #0
 80039f2:	202c      	movs	r0, #44	@ 0x2c
 80039f4:	f000 f82a 	bl	8003a4c <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 80039f8:	2170      	movs	r1, #112	@ 0x70
 80039fa:	2026      	movs	r0, #38	@ 0x26
 80039fc:	f000 f826 	bl	8003a4c <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003a00:	2140      	movs	r1, #64	@ 0x40
 8003a02:	2015      	movs	r0, #21
 8003a04:	f000 f822 	bl	8003a4c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003a08:	213d      	movs	r1, #61	@ 0x3d
 8003a0a:	2011      	movs	r0, #17
 8003a0c:	f000 f81e 	bl	8003a4c <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003a10:	f000 f8a2 	bl	8003b58 <TM_MFRC522_AntennaOn>
}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	2026      	movs	r0, #38	@ 0x26
 8003a24:	f000 f8b5 	bl	8003b92 <TM_MFRC522_Request>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f9a1 	bl	8003d7a <TM_MFRC522_Anticoll>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 8003a3c:	f000 fa23 	bl	8003e86 <TM_MFRC522_Halt>
	return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	460a      	mov	r2, r1
 8003a56:	71fb      	strb	r3, [r7, #7]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2110      	movs	r1, #16
 8003a60:	480c      	ldr	r0, [pc, #48]	@ (8003a94 <TM_MFRC522_WriteRegister+0x48>)
 8003a62:	f001 f93e 	bl	8004ce2 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ff84 	bl	8003980 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003a78:	79bb      	ldrb	r3, [r7, #6]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff ff80 	bl	8003980 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003a80:	2201      	movs	r2, #1
 8003a82:	2110      	movs	r1, #16
 8003a84:	4803      	ldr	r0, [pc, #12]	@ (8003a94 <TM_MFRC522_WriteRegister+0x48>)
 8003a86:	f001 f92c 	bl	8004ce2 <HAL_GPIO_WritePin>
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40010800 	.word	0x40010800

08003a98 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2110      	movs	r1, #16
 8003aa6:	480f      	ldr	r0, [pc, #60]	@ (8003ae4 <TM_MFRC522_ReadRegister+0x4c>)
 8003aa8:	f001 f91b 	bl	8004ce2 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003ab6:	b25b      	sxtb	r3, r3
 8003ab8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003abc:	b25b      	sxtb	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff5d 	bl	8003980 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f7ff ff5a 	bl	8003980 <TM_SPI_Send>
 8003acc:	4603      	mov	r3, r0
 8003ace:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	2110      	movs	r1, #16
 8003ad4:	4803      	ldr	r0, [pc, #12]	@ (8003ae4 <TM_MFRC522_ReadRegister+0x4c>)
 8003ad6:	f001 f904 	bl	8004ce2 <HAL_GPIO_WritePin>

	return val;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40010800 	.word	0x40010800

08003ae8 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	460a      	mov	r2, r1
 8003af2:	71fb      	strb	r3, [r7, #7]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ffcc 	bl	8003a98 <TM_MFRC522_ReadRegister>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	79bb      	ldrb	r3, [r7, #6]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff ff9c 	bl	8003a4c <TM_MFRC522_WriteRegister>
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	460a      	mov	r2, r1
 8003b26:	71fb      	strb	r3, [r7, #7]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff ffb2 	bl	8003a98 <TM_MFRC522_ReadRegister>
 8003b34:	4603      	mov	r3, r0
 8003b36:	b25a      	sxtb	r2, r3
 8003b38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	b25b      	sxtb	r3, r3
 8003b40:	4013      	ands	r3, r2
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff7e 	bl	8003a4c <TM_MFRC522_WriteRegister>
}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003b5e:	2014      	movs	r0, #20
 8003b60:	f7ff ff9a 	bl	8003a98 <TM_MFRC522_ReadRegister>
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003b72:	2103      	movs	r1, #3
 8003b74:	2014      	movs	r0, #20
 8003b76:	f7ff ffb7 	bl	8003ae8 <TM_MFRC522_SetBitMask>
	}
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003b82:	b580      	push	{r7, lr}
 8003b84:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8003b86:	210f      	movs	r1, #15
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f7ff ff5f 	bl	8003a4c <TM_MFRC522_WriteRegister>
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af02      	add	r7, sp, #8
 8003b98:	4603      	mov	r3, r0
 8003b9a:	6039      	str	r1, [r7, #0]
 8003b9c:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003b9e:	2107      	movs	r1, #7
 8003ba0:	200d      	movs	r0, #13
 8003ba2:	f7ff ff53 	bl	8003a4c <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	79fa      	ldrb	r2, [r7, #7]
 8003baa:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003bac:	f107 030c 	add.w	r3, r7, #12
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	6839      	ldr	r1, [r7, #0]
 8003bb8:	200c      	movs	r0, #12
 8003bba:	f000 f80f 	bl	8003bdc <TM_MFRC522_ToCard>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d102      	bne.n	8003bce <TM_MFRC522_Request+0x3c>
 8003bc8:	89bb      	ldrh	r3, [r7, #12]
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d001      	beq.n	8003bd2 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	4603      	mov	r3, r0
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	4613      	mov	r3, r2
 8003bec:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	d006      	beq.n	8003c0e <TM_MFRC522_ToCard+0x32>
 8003c00:	2b0e      	cmp	r3, #14
 8003c02:	d109      	bne.n	8003c18 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8003c04:	2312      	movs	r3, #18
 8003c06:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003c08:	2310      	movs	r3, #16
 8003c0a:	757b      	strb	r3, [r7, #21]
			break;
 8003c0c:	e005      	b.n	8003c1a <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003c0e:	2377      	movs	r3, #119	@ 0x77
 8003c10:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8003c12:	2330      	movs	r3, #48	@ 0x30
 8003c14:	757b      	strb	r3, [r7, #21]
			break;
 8003c16:	e000      	b.n	8003c1a <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003c18:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003c1a:	7dbb      	ldrb	r3, [r7, #22]
 8003c1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	4619      	mov	r1, r3
 8003c24:	2002      	movs	r0, #2
 8003c26:	f7ff ff11 	bl	8003a4c <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003c2a:	2180      	movs	r1, #128	@ 0x80
 8003c2c:	2004      	movs	r0, #4
 8003c2e:	f7ff ff75 	bl	8003b1c <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003c32:	2180      	movs	r1, #128	@ 0x80
 8003c34:	200a      	movs	r0, #10
 8003c36:	f7ff ff57 	bl	8003ae8 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f7ff ff05 	bl	8003a4c <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8003c42:	2300      	movs	r3, #0
 8003c44:	827b      	strh	r3, [r7, #18]
 8003c46:	e00a      	b.n	8003c5e <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8003c48:	8a7b      	ldrh	r3, [r7, #18]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	4619      	mov	r1, r3
 8003c52:	2009      	movs	r0, #9
 8003c54:	f7ff fefa 	bl	8003a4c <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8003c58:	8a7b      	ldrh	r3, [r7, #18]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	827b      	strh	r3, [r7, #18]
 8003c5e:	7bbb      	ldrb	r3, [r7, #14]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	8a7a      	ldrh	r2, [r7, #18]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d3ef      	bcc.n	8003c48 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f7ff feed 	bl	8003a4c <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d103      	bne.n	8003c80 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003c78:	2180      	movs	r1, #128	@ 0x80
 8003c7a:	200d      	movs	r0, #13
 8003c7c:	f7ff ff34 	bl	8003ae8 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003c80:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003c84:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8003c86:	2004      	movs	r0, #4
 8003c88:	f7ff ff06 	bl	8003a98 <TM_MFRC522_ReadRegister>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	753b      	strb	r3, [r7, #20]
		i--;
 8003c90:	8a7b      	ldrh	r3, [r7, #18]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003c96:	8a7b      	ldrh	r3, [r7, #18]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <TM_MFRC522_ToCard+0xd6>
 8003c9c:	7d3b      	ldrb	r3, [r7, #20]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <TM_MFRC522_ToCard+0xd6>
 8003ca6:	7d3a      	ldrb	r2, [r7, #20]
 8003ca8:	7d7b      	ldrb	r3, [r7, #21]
 8003caa:	4013      	ands	r3, r2
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0e9      	beq.n	8003c86 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8003cb2:	2180      	movs	r1, #128	@ 0x80
 8003cb4:	200d      	movs	r0, #13
 8003cb6:	f7ff ff31 	bl	8003b1c <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8003cba:	8a7b      	ldrh	r3, [r7, #18]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d057      	beq.n	8003d70 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003cc0:	2006      	movs	r0, #6
 8003cc2:	f7ff fee9 	bl	8003a98 <TM_MFRC522_ReadRegister>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f003 031b 	and.w	r3, r3, #27
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d14d      	bne.n	8003d6c <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 8003cd4:	7d3a      	ldrb	r2, [r7, #20]
 8003cd6:	7dbb      	ldrb	r3, [r7, #22]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	2b0c      	cmp	r3, #12
 8003cec:	d140      	bne.n	8003d70 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003cee:	200a      	movs	r0, #10
 8003cf0:	f7ff fed2 	bl	8003a98 <TM_MFRC522_ReadRegister>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8003cf8:	200c      	movs	r0, #12
 8003cfa:	f7ff fecd 	bl	8003a98 <TM_MFRC522_ReadRegister>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 8003d06:	7c7b      	ldrb	r3, [r7, #17]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 8003d0c:	7d3b      	ldrb	r3, [r7, #20]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	7c7b      	ldrb	r3, [r7, #17]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	e005      	b.n	8003d30 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 8003d24:	7d3b      	ldrb	r3, [r7, #20]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2e:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8003d30:	7d3b      	ldrb	r3, [r7, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <TM_MFRC522_ToCard+0x15e>
					n = 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 8003d3a:	7d3b      	ldrb	r3, [r7, #20]
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d901      	bls.n	8003d44 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8003d40:	2310      	movs	r3, #16
 8003d42:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8003d44:	2300      	movs	r3, #0
 8003d46:	827b      	strh	r3, [r7, #18]
 8003d48:	e00a      	b.n	8003d60 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8003d4a:	8a7b      	ldrh	r3, [r7, #18]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	18d4      	adds	r4, r2, r3
 8003d50:	2009      	movs	r0, #9
 8003d52:	f7ff fea1 	bl	8003a98 <TM_MFRC522_ReadRegister>
 8003d56:	4603      	mov	r3, r0
 8003d58:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8003d5a:	8a7b      	ldrh	r3, [r7, #18]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	827b      	strh	r3, [r7, #18]
 8003d60:	7d3b      	ldrb	r3, [r7, #20]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	8a7a      	ldrh	r2, [r7, #18]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d3ef      	bcc.n	8003d4a <TM_MFRC522_ToCard+0x16e>
 8003d6a:	e001      	b.n	8003d70 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}

08003d7a <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af02      	add	r7, sp, #8
 8003d80:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8003d86:	2100      	movs	r1, #0
 8003d88:	200d      	movs	r0, #13
 8003d8a:	f7ff fe5f 	bl	8003a4c <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2293      	movs	r2, #147	@ 0x93
 8003d92:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3301      	adds	r3, #1
 8003d98:	2220      	movs	r2, #32
 8003d9a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003d9c:	f107 030a 	add.w	r3, r7, #10
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2202      	movs	r2, #2
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	200c      	movs	r0, #12
 8003daa:	f7ff ff17 	bl	8003bdc <TM_MFRC522_ToCard>
 8003dae:	4603      	mov	r3, r0
 8003db0:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d118      	bne.n	8003dea <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8003db8:	2300      	movs	r3, #0
 8003dba:	73bb      	strb	r3, [r7, #14]
 8003dbc:	e009      	b.n	8003dd2 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8003dbe:	7bbb      	ldrb	r3, [r7, #14]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	7b7b      	ldrb	r3, [r7, #13]
 8003dc8:	4053      	eors	r3, r2
 8003dca:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8003dcc:	7bbb      	ldrb	r3, [r7, #14]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	73bb      	strb	r3, [r7, #14]
 8003dd2:	7bbb      	ldrb	r3, [r7, #14]
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d9f2      	bls.n	8003dbe <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8003dd8:	7bbb      	ldrb	r3, [r7, #14]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	7b7a      	ldrb	r2, [r7, #13]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d001      	beq.n	8003dea <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8003de6:	2302      	movs	r3, #2
 8003de8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8003e02:	2104      	movs	r1, #4
 8003e04:	2005      	movs	r0, #5
 8003e06:	f7ff fe89 	bl	8003b1c <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8003e0a:	2180      	movs	r1, #128	@ 0x80
 8003e0c:	200a      	movs	r0, #10
 8003e0e:	f7ff fe6b 	bl	8003ae8 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8003e12:	2300      	movs	r3, #0
 8003e14:	75fb      	strb	r3, [r7, #23]
 8003e16:	e00a      	b.n	8003e2e <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	4619      	mov	r1, r3
 8003e22:	2009      	movs	r0, #9
 8003e24:	f7ff fe12 	bl	8003a4c <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
 8003e2e:	7dfa      	ldrb	r2, [r7, #23]
 8003e30:	7afb      	ldrb	r3, [r7, #11]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d3f0      	bcc.n	8003e18 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8003e36:	2103      	movs	r1, #3
 8003e38:	2001      	movs	r0, #1
 8003e3a:	f7ff fe07 	bl	8003a4c <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8003e3e:	23ff      	movs	r3, #255	@ 0xff
 8003e40:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8003e42:	2005      	movs	r0, #5
 8003e44:	f7ff fe28 	bl	8003a98 <TM_MFRC522_ReadRegister>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	75bb      	strb	r3, [r7, #22]
		i--;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <TM_MFRC522_CalculateCRC+0x6e>
 8003e58:	7dbb      	ldrb	r3, [r7, #22]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0ef      	beq.n	8003e42 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8003e62:	2022      	movs	r0, #34	@ 0x22
 8003e64:	f7ff fe18 	bl	8003a98 <TM_MFRC522_ReadRegister>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	1c5c      	adds	r4, r3, #1
 8003e74:	2021      	movs	r0, #33	@ 0x21
 8003e76:	f7ff fe0f 	bl	8003a98 <TM_MFRC522_ReadRegister>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	7023      	strb	r3, [r4, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd90      	pop	{r4, r7, pc}

08003e86 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8003e8c:	2350      	movs	r3, #80	@ 0x50
 8003e8e:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003e94:	463b      	mov	r3, r7
 8003e96:	1c9a      	adds	r2, r3, #2
 8003e98:	463b      	mov	r3, r7
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ffa9 	bl	8003df4 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8003ea2:	463a      	mov	r2, r7
 8003ea4:	4639      	mov	r1, r7
 8003ea6:	1dbb      	adds	r3, r7, #6
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	2204      	movs	r2, #4
 8003eae:	200c      	movs	r0, #12
 8003eb0:	f7ff fe94 	bl	8003bdc <TM_MFRC522_ToCard>



}
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ec2:	4b15      	ldr	r3, [pc, #84]	@ (8003f18 <HAL_MspInit+0x5c>)
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <HAL_MspInit+0x5c>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6193      	str	r3, [r2, #24]
 8003ece:	4b12      	ldr	r3, [pc, #72]	@ (8003f18 <HAL_MspInit+0x5c>)
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eda:	4b0f      	ldr	r3, [pc, #60]	@ (8003f18 <HAL_MspInit+0x5c>)
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	4a0e      	ldr	r2, [pc, #56]	@ (8003f18 <HAL_MspInit+0x5c>)
 8003ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ee4:	61d3      	str	r3, [r2, #28]
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8003f18 <HAL_MspInit+0x5c>)
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f1c <HAL_MspInit+0x60>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	4a04      	ldr	r2, [pc, #16]	@ (8003f1c <HAL_MspInit+0x60>)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40010000 	.word	0x40010000

08003f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f28:	f107 0310 	add.w	r3, r7, #16
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a16      	ldr	r2, [pc, #88]	@ (8003f94 <HAL_I2C_MspInit+0x74>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d124      	bne.n	8003f8a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f40:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <HAL_I2C_MspInit+0x78>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <HAL_I2C_MspInit+0x78>)
 8003f46:	f043 0308 	orr.w	r3, r3, #8
 8003f4a:	6193      	str	r3, [r2, #24]
 8003f4c:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <HAL_I2C_MspInit+0x78>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f58:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f5e:	2312      	movs	r3, #18
 8003f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f62:	2303      	movs	r3, #3
 8003f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f66:	f107 0310 	add.w	r3, r7, #16
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	480b      	ldr	r0, [pc, #44]	@ (8003f9c <HAL_I2C_MspInit+0x7c>)
 8003f6e:	f000 fd1d 	bl	80049ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f72:	4b09      	ldr	r3, [pc, #36]	@ (8003f98 <HAL_I2C_MspInit+0x78>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4a08      	ldr	r2, [pc, #32]	@ (8003f98 <HAL_I2C_MspInit+0x78>)
 8003f78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f7c:	61d3      	str	r3, [r2, #28]
 8003f7e:	4b06      	ldr	r3, [pc, #24]	@ (8003f98 <HAL_I2C_MspInit+0x78>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003f8a:	bf00      	nop
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40005800 	.word	0x40005800
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40010c00 	.word	0x40010c00

08003fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	f107 0310 	add.w	r3, r7, #16
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <HAL_SPI_MspInit+0x88>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d12f      	bne.n	8004020 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800402c <HAL_SPI_MspInit+0x8c>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	4a19      	ldr	r2, [pc, #100]	@ (800402c <HAL_SPI_MspInit+0x8c>)
 8003fc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fca:	6193      	str	r3, [r2, #24]
 8003fcc:	4b17      	ldr	r3, [pc, #92]	@ (800402c <HAL_SPI_MspInit+0x8c>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd8:	4b14      	ldr	r3, [pc, #80]	@ (800402c <HAL_SPI_MspInit+0x8c>)
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	4a13      	ldr	r2, [pc, #76]	@ (800402c <HAL_SPI_MspInit+0x8c>)
 8003fde:	f043 0304 	orr.w	r3, r3, #4
 8003fe2:	6193      	str	r3, [r2, #24]
 8003fe4:	4b11      	ldr	r3, [pc, #68]	@ (800402c <HAL_SPI_MspInit+0x8c>)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003ff0:	23a0      	movs	r3, #160	@ 0xa0
 8003ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffc:	f107 0310 	add.w	r3, r7, #16
 8004000:	4619      	mov	r1, r3
 8004002:	480b      	ldr	r0, [pc, #44]	@ (8004030 <HAL_SPI_MspInit+0x90>)
 8004004:	f000 fcd2 	bl	80049ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004008:	2340      	movs	r3, #64	@ 0x40
 800400a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004014:	f107 0310 	add.w	r3, r7, #16
 8004018:	4619      	mov	r1, r3
 800401a:	4805      	ldr	r0, [pc, #20]	@ (8004030 <HAL_SPI_MspInit+0x90>)
 800401c:	f000 fcc6 	bl	80049ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004020:	bf00      	nop
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40013000 	.word	0x40013000
 800402c:	40021000 	.word	0x40021000
 8004030:	40010800 	.word	0x40010800

08004034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004044:	d113      	bne.n	800406e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004046:	4b0c      	ldr	r3, [pc, #48]	@ (8004078 <HAL_TIM_Base_MspInit+0x44>)
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4a0b      	ldr	r2, [pc, #44]	@ (8004078 <HAL_TIM_Base_MspInit+0x44>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	61d3      	str	r3, [r2, #28]
 8004052:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <HAL_TIM_Base_MspInit+0x44>)
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800405e:	2200      	movs	r2, #0
 8004060:	2100      	movs	r1, #0
 8004062:	201c      	movs	r0, #28
 8004064:	f000 fa6b 	bl	800453e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004068:	201c      	movs	r0, #28
 800406a:	f000 fa84 	bl	8004576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000

0800407c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	@ 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a22      	ldr	r2, [pc, #136]	@ (8004120 <HAL_UART_MspInit+0xa4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d13d      	bne.n	8004118 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800409c:	4b21      	ldr	r3, [pc, #132]	@ (8004124 <HAL_UART_MspInit+0xa8>)
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	4a20      	ldr	r2, [pc, #128]	@ (8004124 <HAL_UART_MspInit+0xa8>)
 80040a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040a6:	6193      	str	r3, [r2, #24]
 80040a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004124 <HAL_UART_MspInit+0xa8>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <HAL_UART_MspInit+0xa8>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004124 <HAL_UART_MspInit+0xa8>)
 80040ba:	f043 0308 	orr.w	r3, r3, #8
 80040be:	6193      	str	r3, [r2, #24]
 80040c0:	4b18      	ldr	r3, [pc, #96]	@ (8004124 <HAL_UART_MspInit+0xa8>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80040cc:	2340      	movs	r3, #64	@ 0x40
 80040ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d0:	2302      	movs	r3, #2
 80040d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040d4:	2303      	movs	r3, #3
 80040d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	4619      	mov	r1, r3
 80040de:	4812      	ldr	r0, [pc, #72]	@ (8004128 <HAL_UART_MspInit+0xac>)
 80040e0:	f000 fc64 	bl	80049ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040e4:	2380      	movs	r3, #128	@ 0x80
 80040e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	4619      	mov	r1, r3
 80040f6:	480c      	ldr	r0, [pc, #48]	@ (8004128 <HAL_UART_MspInit+0xac>)
 80040f8:	f000 fc58 	bl	80049ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80040fc:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <HAL_UART_MspInit+0xb0>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	f043 0304 	orr.w	r3, r3, #4
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
 8004112:	4a06      	ldr	r2, [pc, #24]	@ (800412c <HAL_UART_MspInit+0xb0>)
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004118:	bf00      	nop
 800411a:	3728      	adds	r7, #40	@ 0x28
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40013800 	.word	0x40013800
 8004124:	40021000 	.word	0x40021000
 8004128:	40010c00 	.word	0x40010c00
 800412c:	40010000 	.word	0x40010000

08004130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <NMI_Handler+0x4>

08004138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <HardFault_Handler+0x4>

08004140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <MemManage_Handler+0x4>

08004148 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <BusFault_Handler+0x4>

08004150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004154:	bf00      	nop
 8004156:	e7fd      	b.n	8004154 <UsageFault_Handler+0x4>

08004158 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004180:	f000 f8c6 	bl	8004310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004184:	bf00      	nop
 8004186:	bd80      	pop	{r7, pc}

08004188 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800418c:	4802      	ldr	r0, [pc, #8]	@ (8004198 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800418e:	f001 fb5e 	bl	800584e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	200010d0 	.word	0x200010d0

0800419c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80041a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80041a4:	f000 fdb6 	bl	8004d14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80041a8:	bf00      	nop
 80041aa:	bd80      	pop	{r7, pc}

080041ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041b0:	4802      	ldr	r0, [pc, #8]	@ (80041bc <TIM2_IRQHandler+0x10>)
 80041b2:	f003 fde7 	bl	8007d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	200002c8 	.word	0x200002c8

080041c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041c8:	4a14      	ldr	r2, [pc, #80]	@ (800421c <_sbrk+0x5c>)
 80041ca:	4b15      	ldr	r3, [pc, #84]	@ (8004220 <_sbrk+0x60>)
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041d4:	4b13      	ldr	r3, [pc, #76]	@ (8004224 <_sbrk+0x64>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041dc:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <_sbrk+0x64>)
 80041de:	4a12      	ldr	r2, [pc, #72]	@ (8004228 <_sbrk+0x68>)
 80041e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041e2:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <_sbrk+0x64>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d207      	bcs.n	8004200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041f0:	f008 ff22 	bl	800d038 <__errno>
 80041f4:	4603      	mov	r3, r0
 80041f6:	220c      	movs	r2, #12
 80041f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	e009      	b.n	8004214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004200:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <_sbrk+0x64>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004206:	4b07      	ldr	r3, [pc, #28]	@ (8004224 <_sbrk+0x64>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	4a05      	ldr	r2, [pc, #20]	@ (8004224 <_sbrk+0x64>)
 8004210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20005000 	.word	0x20005000
 8004220:	00000400 	.word	0x00000400
 8004224:	2000040c 	.word	0x2000040c
 8004228:	20001728 	.word	0x20001728

0800422c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004238:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800423a:	e003      	b.n	8004244 <LoopCopyDataInit>

0800423c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800423c:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800423e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004240:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004242:	3104      	adds	r1, #4

08004244 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004244:	480a      	ldr	r0, [pc, #40]	@ (8004270 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004246:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004248:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800424a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800424c:	d3f6      	bcc.n	800423c <CopyDataInit>
  ldr r2, =_sbss
 800424e:	4a0a      	ldr	r2, [pc, #40]	@ (8004278 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004250:	e002      	b.n	8004258 <LoopFillZerobss>

08004252 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004252:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004254:	f842 3b04 	str.w	r3, [r2], #4

08004258 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004258:	4b08      	ldr	r3, [pc, #32]	@ (800427c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800425a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800425c:	d3f9      	bcc.n	8004252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800425e:	f7ff ffe5 	bl	800422c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004262:	f008 feef 	bl	800d044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004266:	f7fc fda9 	bl	8000dbc <main>
  bx lr
 800426a:	4770      	bx	lr
  ldr r3, =_sidata
 800426c:	0800e3e8 	.word	0x0800e3e8
  ldr r0, =_sdata
 8004270:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004274:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8004278:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 800427c:	20001724 	.word	0x20001724

08004280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004280:	e7fe      	b.n	8004280 <ADC1_2_IRQHandler>
	...

08004284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004288:	4b08      	ldr	r3, [pc, #32]	@ (80042ac <HAL_Init+0x28>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a07      	ldr	r2, [pc, #28]	@ (80042ac <HAL_Init+0x28>)
 800428e:	f043 0310 	orr.w	r3, r3, #16
 8004292:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004294:	2003      	movs	r0, #3
 8004296:	f000 f947 	bl	8004528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800429a:	2000      	movs	r0, #0
 800429c:	f000 f808 	bl	80042b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042a0:	f7ff fe0c 	bl	8003ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40022000 	.word	0x40022000

080042b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042b8:	4b12      	ldr	r3, [pc, #72]	@ (8004304 <HAL_InitTick+0x54>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <HAL_InitTick+0x58>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	4619      	mov	r1, r3
 80042c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f95f 	bl	8004592 <HAL_SYSTICK_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e00e      	b.n	80042fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b0f      	cmp	r3, #15
 80042e2:	d80a      	bhi.n	80042fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042e4:	2200      	movs	r2, #0
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	f000 f927 	bl	800453e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042f0:	4a06      	ldr	r2, [pc, #24]	@ (800430c <HAL_InitTick+0x5c>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	e000      	b.n	80042fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20000028 	.word	0x20000028
 8004308:	20000030 	.word	0x20000030
 800430c:	2000002c 	.word	0x2000002c

08004310 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004314:	4b05      	ldr	r3, [pc, #20]	@ (800432c <HAL_IncTick+0x1c>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <HAL_IncTick+0x20>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4413      	add	r3, r2
 8004320:	4a03      	ldr	r2, [pc, #12]	@ (8004330 <HAL_IncTick+0x20>)
 8004322:	6013      	str	r3, [r2, #0]
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	20000030 	.word	0x20000030
 8004330:	20000410 	.word	0x20000410

08004334 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return uwTick;
 8004338:	4b02      	ldr	r3, [pc, #8]	@ (8004344 <HAL_GetTick+0x10>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr
 8004344:	20000410 	.word	0x20000410

08004348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004350:	f7ff fff0 	bl	8004334 <HAL_GetTick>
 8004354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d005      	beq.n	800436e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004362:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <HAL_Delay+0x44>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800436e:	bf00      	nop
 8004370:	f7ff ffe0 	bl	8004334 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	429a      	cmp	r2, r3
 800437e:	d8f7      	bhi.n	8004370 <HAL_Delay+0x28>
  {
  }
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000030 	.word	0x20000030

08004390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a0:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <__NVIC_SetPriorityGrouping+0x44>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043ac:	4013      	ands	r3, r2
 80043ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043c2:	4a04      	ldr	r2, [pc, #16]	@ (80043d4 <__NVIC_SetPriorityGrouping+0x44>)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	60d3      	str	r3, [r2, #12]
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043dc:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <__NVIC_GetPriorityGrouping+0x18>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	0a1b      	lsrs	r3, r3, #8
 80043e2:	f003 0307 	and.w	r3, r3, #7
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004402:	2b00      	cmp	r3, #0
 8004404:	db0b      	blt.n	800441e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	f003 021f 	and.w	r2, r3, #31
 800440c:	4906      	ldr	r1, [pc, #24]	@ (8004428 <__NVIC_EnableIRQ+0x34>)
 800440e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2001      	movs	r0, #1
 8004416:	fa00 f202 	lsl.w	r2, r0, r2
 800441a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	e000e100 	.word	0xe000e100

0800442c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	6039      	str	r1, [r7, #0]
 8004436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443c:	2b00      	cmp	r3, #0
 800443e:	db0a      	blt.n	8004456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	b2da      	uxtb	r2, r3
 8004444:	490c      	ldr	r1, [pc, #48]	@ (8004478 <__NVIC_SetPriority+0x4c>)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	0112      	lsls	r2, r2, #4
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	440b      	add	r3, r1
 8004450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004454:	e00a      	b.n	800446c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	4908      	ldr	r1, [pc, #32]	@ (800447c <__NVIC_SetPriority+0x50>)
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	3b04      	subs	r3, #4
 8004464:	0112      	lsls	r2, r2, #4
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	440b      	add	r3, r1
 800446a:	761a      	strb	r2, [r3, #24]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	e000e100 	.word	0xe000e100
 800447c:	e000ed00 	.word	0xe000ed00

08004480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	@ 0x24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f1c3 0307 	rsb	r3, r3, #7
 800449a:	2b04      	cmp	r3, #4
 800449c:	bf28      	it	cs
 800449e:	2304      	movcs	r3, #4
 80044a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	3304      	adds	r3, #4
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d902      	bls.n	80044b0 <NVIC_EncodePriority+0x30>
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3b03      	subs	r3, #3
 80044ae:	e000      	b.n	80044b2 <NVIC_EncodePriority+0x32>
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b4:	f04f 32ff 	mov.w	r2, #4294967295
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43da      	mvns	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	401a      	ands	r2, r3
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044c8:	f04f 31ff 	mov.w	r1, #4294967295
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	fa01 f303 	lsl.w	r3, r1, r3
 80044d2:	43d9      	mvns	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d8:	4313      	orrs	r3, r2
         );
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3724      	adds	r7, #36	@ 0x24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044f4:	d301      	bcc.n	80044fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044f6:	2301      	movs	r3, #1
 80044f8:	e00f      	b.n	800451a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004524 <SysTick_Config+0x40>)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3b01      	subs	r3, #1
 8004500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004502:	210f      	movs	r1, #15
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	f7ff ff90 	bl	800442c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800450c:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <SysTick_Config+0x40>)
 800450e:	2200      	movs	r2, #0
 8004510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004512:	4b04      	ldr	r3, [pc, #16]	@ (8004524 <SysTick_Config+0x40>)
 8004514:	2207      	movs	r2, #7
 8004516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	e000e010 	.word	0xe000e010

08004528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff ff2d 	bl	8004390 <__NVIC_SetPriorityGrouping>
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800453e:	b580      	push	{r7, lr}
 8004540:	b086      	sub	sp, #24
 8004542:	af00      	add	r7, sp, #0
 8004544:	4603      	mov	r3, r0
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004550:	f7ff ff42 	bl	80043d8 <__NVIC_GetPriorityGrouping>
 8004554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	6978      	ldr	r0, [r7, #20]
 800455c:	f7ff ff90 	bl	8004480 <NVIC_EncodePriority>
 8004560:	4602      	mov	r2, r0
 8004562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004566:	4611      	mov	r1, r2
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff5f 	bl	800442c <__NVIC_SetPriority>
}
 800456e:	bf00      	nop
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	4603      	mov	r3, r0
 800457e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff ff35 	bl	80043f4 <__NVIC_EnableIRQ>
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff ffa2 	bl	80044e4 <SysTick_Config>
 80045a0:	4603      	mov	r3, r0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80045c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004684 <HAL_FLASH_Program+0xd8>)
 80045c8:	7e1b      	ldrb	r3, [r3, #24]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_FLASH_Program+0x26>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e054      	b.n	800467c <HAL_FLASH_Program+0xd0>
 80045d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004684 <HAL_FLASH_Program+0xd8>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80045dc:	f000 f8a8 	bl	8004730 <FLASH_WaitForLastOperation>
 80045e0:	4603      	mov	r3, r0
 80045e2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d144      	bne.n	8004674 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d102      	bne.n	80045f6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80045f0:	2301      	movs	r3, #1
 80045f2:	757b      	strb	r3, [r7, #21]
 80045f4:	e007      	b.n	8004606 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d102      	bne.n	8004602 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80045fc:	2302      	movs	r3, #2
 80045fe:	757b      	strb	r3, [r7, #21]
 8004600:	e001      	b.n	8004606 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004602:	2304      	movs	r3, #4
 8004604:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004606:	2300      	movs	r3, #0
 8004608:	75bb      	strb	r3, [r7, #22]
 800460a:	e02d      	b.n	8004668 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800460c:	7dbb      	ldrb	r3, [r7, #22]
 800460e:	005a      	lsls	r2, r3, #1
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	eb02 0c03 	add.w	ip, r2, r3
 8004616:	7dbb      	ldrb	r3, [r7, #22]
 8004618:	0119      	lsls	r1, r3, #4
 800461a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461e:	f1c1 0620 	rsb	r6, r1, #32
 8004622:	f1a1 0020 	sub.w	r0, r1, #32
 8004626:	fa22 f401 	lsr.w	r4, r2, r1
 800462a:	fa03 f606 	lsl.w	r6, r3, r6
 800462e:	4334      	orrs	r4, r6
 8004630:	fa23 f000 	lsr.w	r0, r3, r0
 8004634:	4304      	orrs	r4, r0
 8004636:	fa23 f501 	lsr.w	r5, r3, r1
 800463a:	b2a3      	uxth	r3, r4
 800463c:	4619      	mov	r1, r3
 800463e:	4660      	mov	r0, ip
 8004640:	f000 f85a 	bl	80046f8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004644:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004648:	f000 f872 	bl	8004730 <FLASH_WaitForLastOperation>
 800464c:	4603      	mov	r3, r0
 800464e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004650:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <HAL_FLASH_Program+0xdc>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	4a0c      	ldr	r2, [pc, #48]	@ (8004688 <HAL_FLASH_Program+0xdc>)
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800465c:	7dfb      	ldrb	r3, [r7, #23]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004662:	7dbb      	ldrb	r3, [r7, #22]
 8004664:	3301      	adds	r3, #1
 8004666:	75bb      	strb	r3, [r7, #22]
 8004668:	7dba      	ldrb	r2, [r7, #22]
 800466a:	7d7b      	ldrb	r3, [r7, #21]
 800466c:	429a      	cmp	r2, r3
 800466e:	d3cd      	bcc.n	800460c <HAL_FLASH_Program+0x60>
 8004670:	e000      	b.n	8004674 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004672:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004674:	4b03      	ldr	r3, [pc, #12]	@ (8004684 <HAL_FLASH_Program+0xd8>)
 8004676:	2200      	movs	r2, #0
 8004678:	761a      	strb	r2, [r3, #24]

  return status;
 800467a:	7dfb      	ldrb	r3, [r7, #23]
}
 800467c:	4618      	mov	r0, r3
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004684:	20000418 	.word	0x20000418
 8004688:	40022000 	.word	0x40022000

0800468c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004696:	4b0d      	ldr	r3, [pc, #52]	@ (80046cc <HAL_FLASH_Unlock+0x40>)
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <HAL_FLASH_Unlock+0x40>)
 80046a4:	4a0a      	ldr	r2, [pc, #40]	@ (80046d0 <HAL_FLASH_Unlock+0x44>)
 80046a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80046a8:	4b08      	ldr	r3, [pc, #32]	@ (80046cc <HAL_FLASH_Unlock+0x40>)
 80046aa:	4a0a      	ldr	r2, [pc, #40]	@ (80046d4 <HAL_FLASH_Unlock+0x48>)
 80046ac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80046ae:	4b07      	ldr	r3, [pc, #28]	@ (80046cc <HAL_FLASH_Unlock+0x40>)
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80046be:	79fb      	ldrb	r3, [r7, #7]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40022000 	.word	0x40022000
 80046d0:	45670123 	.word	0x45670123
 80046d4:	cdef89ab 	.word	0xcdef89ab

080046d8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80046dc:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <HAL_FLASH_Lock+0x1c>)
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	4a04      	ldr	r2, [pc, #16]	@ (80046f4 <HAL_FLASH_Lock+0x1c>)
 80046e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40022000 	.word	0x40022000

080046f8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004704:	4b08      	ldr	r3, [pc, #32]	@ (8004728 <FLASH_Program_HalfWord+0x30>)
 8004706:	2200      	movs	r2, #0
 8004708:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800470a:	4b08      	ldr	r3, [pc, #32]	@ (800472c <FLASH_Program_HalfWord+0x34>)
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	4a07      	ldr	r2, [pc, #28]	@ (800472c <FLASH_Program_HalfWord+0x34>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	887a      	ldrh	r2, [r7, #2]
 800471a:	801a      	strh	r2, [r3, #0]
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000418 	.word	0x20000418
 800472c:	40022000 	.word	0x40022000

08004730 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004738:	f7ff fdfc 	bl	8004334 <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800473e:	e010      	b.n	8004762 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004746:	d00c      	beq.n	8004762 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <FLASH_WaitForLastOperation+0x2e>
 800474e:	f7ff fdf1 	bl	8004334 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d201      	bcs.n	8004762 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e025      	b.n	80047ae <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004762:	4b15      	ldr	r3, [pc, #84]	@ (80047b8 <FLASH_WaitForLastOperation+0x88>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e8      	bne.n	8004740 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800476e:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <FLASH_WaitForLastOperation+0x88>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800477a:	4b0f      	ldr	r3, [pc, #60]	@ (80047b8 <FLASH_WaitForLastOperation+0x88>)
 800477c:	2220      	movs	r2, #32
 800477e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004780:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <FLASH_WaitForLastOperation+0x88>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800478c:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <FLASH_WaitForLastOperation+0x88>)
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004798:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <FLASH_WaitForLastOperation+0x88>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80047a4:	f000 f80a 	bl	80047bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40022000 	.word	0x40022000

080047bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80047c6:	4b23      	ldr	r3, [pc, #140]	@ (8004854 <FLASH_SetErrorCode+0x98>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80047d2:	4b21      	ldr	r3, [pc, #132]	@ (8004858 <FLASH_SetErrorCode+0x9c>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f043 0302 	orr.w	r3, r3, #2
 80047da:	4a1f      	ldr	r2, [pc, #124]	@ (8004858 <FLASH_SetErrorCode+0x9c>)
 80047dc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f043 0310 	orr.w	r3, r3, #16
 80047e4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80047e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004854 <FLASH_SetErrorCode+0x98>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80047f2:	4b19      	ldr	r3, [pc, #100]	@ (8004858 <FLASH_SetErrorCode+0x9c>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	4a17      	ldr	r2, [pc, #92]	@ (8004858 <FLASH_SetErrorCode+0x9c>)
 80047fc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f043 0304 	orr.w	r3, r3, #4
 8004804:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004806:	4b13      	ldr	r3, [pc, #76]	@ (8004854 <FLASH_SetErrorCode+0x98>)
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004812:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <FLASH_SetErrorCode+0x9c>)
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	4a0f      	ldr	r2, [pc, #60]	@ (8004858 <FLASH_SetErrorCode+0x9c>)
 800481c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800481e:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <FLASH_SetErrorCode+0x98>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	4a0c      	ldr	r2, [pc, #48]	@ (8004854 <FLASH_SetErrorCode+0x98>)
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f240 1201 	movw	r2, #257	@ 0x101
 8004830:	4293      	cmp	r3, r2
 8004832:	d106      	bne.n	8004842 <FLASH_SetErrorCode+0x86>
 8004834:	4b07      	ldr	r3, [pc, #28]	@ (8004854 <FLASH_SetErrorCode+0x98>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	4a06      	ldr	r2, [pc, #24]	@ (8004854 <FLASH_SetErrorCode+0x98>)
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	61d3      	str	r3, [r2, #28]
}  
 8004840:	e002      	b.n	8004848 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004842:	4a04      	ldr	r2, [pc, #16]	@ (8004854 <FLASH_SetErrorCode+0x98>)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60d3      	str	r3, [r2, #12]
}  
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40022000 	.word	0x40022000
 8004858:	20000418 	.word	0x20000418

0800485c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800486e:	4b2f      	ldr	r3, [pc, #188]	@ (800492c <HAL_FLASHEx_Erase+0xd0>)
 8004870:	7e1b      	ldrb	r3, [r3, #24]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_FLASHEx_Erase+0x1e>
 8004876:	2302      	movs	r3, #2
 8004878:	e053      	b.n	8004922 <HAL_FLASHEx_Erase+0xc6>
 800487a:	4b2c      	ldr	r3, [pc, #176]	@ (800492c <HAL_FLASHEx_Erase+0xd0>)
 800487c:	2201      	movs	r2, #1
 800487e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d116      	bne.n	80048b6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004888:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800488c:	f7ff ff50 	bl	8004730 <FLASH_WaitForLastOperation>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d141      	bne.n	800491a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004896:	2001      	movs	r0, #1
 8004898:	f000 f84c 	bl	8004934 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800489c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80048a0:	f7ff ff46 	bl	8004730 <FLASH_WaitForLastOperation>
 80048a4:	4603      	mov	r3, r0
 80048a6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80048a8:	4b21      	ldr	r3, [pc, #132]	@ (8004930 <HAL_FLASHEx_Erase+0xd4>)
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	4a20      	ldr	r2, [pc, #128]	@ (8004930 <HAL_FLASHEx_Erase+0xd4>)
 80048ae:	f023 0304 	bic.w	r3, r3, #4
 80048b2:	6113      	str	r3, [r2, #16]
 80048b4:	e031      	b.n	800491a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80048b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80048ba:	f7ff ff39 	bl	8004730 <FLASH_WaitForLastOperation>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d12a      	bne.n	800491a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ca:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	e019      	b.n	8004908 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80048d4:	68b8      	ldr	r0, [r7, #8]
 80048d6:	f000 f849 	bl	800496c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048da:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80048de:	f7ff ff27 	bl	8004730 <FLASH_WaitForLastOperation>
 80048e2:	4603      	mov	r3, r0
 80048e4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80048e6:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <HAL_FLASHEx_Erase+0xd4>)
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	4a11      	ldr	r2, [pc, #68]	@ (8004930 <HAL_FLASHEx_Erase+0xd4>)
 80048ec:	f023 0302 	bic.w	r3, r3, #2
 80048f0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	601a      	str	r2, [r3, #0]
            break;
 80048fe:	e00c      	b.n	800491a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004906:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	029a      	lsls	r2, r3, #10
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	4413      	add	r3, r2
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	d3dc      	bcc.n	80048d4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800491a:	4b04      	ldr	r3, [pc, #16]	@ (800492c <HAL_FLASHEx_Erase+0xd0>)
 800491c:	2200      	movs	r2, #0
 800491e:	761a      	strb	r2, [r3, #24]

  return status;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000418 	.word	0x20000418
 8004930:	40022000 	.word	0x40022000

08004934 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800493c:	4b09      	ldr	r3, [pc, #36]	@ (8004964 <FLASH_MassErase+0x30>)
 800493e:	2200      	movs	r2, #0
 8004940:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <FLASH_MassErase+0x34>)
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	4a08      	ldr	r2, [pc, #32]	@ (8004968 <FLASH_MassErase+0x34>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800494e:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <FLASH_MassErase+0x34>)
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	4a05      	ldr	r2, [pc, #20]	@ (8004968 <FLASH_MassErase+0x34>)
 8004954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004958:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr
 8004964:	20000418 	.word	0x20000418
 8004968:	40022000 	.word	0x40022000

0800496c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004974:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <FLASH_PageErase+0x38>)
 8004976:	2200      	movs	r2, #0
 8004978:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800497a:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <FLASH_PageErase+0x3c>)
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <FLASH_PageErase+0x3c>)
 8004980:	f043 0302 	orr.w	r3, r3, #2
 8004984:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004986:	4a08      	ldr	r2, [pc, #32]	@ (80049a8 <FLASH_PageErase+0x3c>)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800498c:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <FLASH_PageErase+0x3c>)
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	4a05      	ldr	r2, [pc, #20]	@ (80049a8 <FLASH_PageErase+0x3c>)
 8004992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004996:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000418 	.word	0x20000418
 80049a8:	40022000 	.word	0x40022000

080049ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b08b      	sub	sp, #44	@ 0x2c
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049b6:	2300      	movs	r3, #0
 80049b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049ba:	2300      	movs	r3, #0
 80049bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049be:	e169      	b.n	8004c94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049c0:	2201      	movs	r2, #1
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	429a      	cmp	r2, r3
 80049da:	f040 8158 	bne.w	8004c8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4a9a      	ldr	r2, [pc, #616]	@ (8004c4c <HAL_GPIO_Init+0x2a0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d05e      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
 80049e8:	4a98      	ldr	r2, [pc, #608]	@ (8004c4c <HAL_GPIO_Init+0x2a0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d875      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 80049ee:	4a98      	ldr	r2, [pc, #608]	@ (8004c50 <HAL_GPIO_Init+0x2a4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d058      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
 80049f4:	4a96      	ldr	r2, [pc, #600]	@ (8004c50 <HAL_GPIO_Init+0x2a4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d86f      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 80049fa:	4a96      	ldr	r2, [pc, #600]	@ (8004c54 <HAL_GPIO_Init+0x2a8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d052      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
 8004a00:	4a94      	ldr	r2, [pc, #592]	@ (8004c54 <HAL_GPIO_Init+0x2a8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d869      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 8004a06:	4a94      	ldr	r2, [pc, #592]	@ (8004c58 <HAL_GPIO_Init+0x2ac>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d04c      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
 8004a0c:	4a92      	ldr	r2, [pc, #584]	@ (8004c58 <HAL_GPIO_Init+0x2ac>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d863      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 8004a12:	4a92      	ldr	r2, [pc, #584]	@ (8004c5c <HAL_GPIO_Init+0x2b0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d046      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
 8004a18:	4a90      	ldr	r2, [pc, #576]	@ (8004c5c <HAL_GPIO_Init+0x2b0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d85d      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 8004a1e:	2b12      	cmp	r3, #18
 8004a20:	d82a      	bhi.n	8004a78 <HAL_GPIO_Init+0xcc>
 8004a22:	2b12      	cmp	r3, #18
 8004a24:	d859      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 8004a26:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <HAL_GPIO_Init+0x80>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004aa7 	.word	0x08004aa7
 8004a30:	08004a81 	.word	0x08004a81
 8004a34:	08004a93 	.word	0x08004a93
 8004a38:	08004ad5 	.word	0x08004ad5
 8004a3c:	08004adb 	.word	0x08004adb
 8004a40:	08004adb 	.word	0x08004adb
 8004a44:	08004adb 	.word	0x08004adb
 8004a48:	08004adb 	.word	0x08004adb
 8004a4c:	08004adb 	.word	0x08004adb
 8004a50:	08004adb 	.word	0x08004adb
 8004a54:	08004adb 	.word	0x08004adb
 8004a58:	08004adb 	.word	0x08004adb
 8004a5c:	08004adb 	.word	0x08004adb
 8004a60:	08004adb 	.word	0x08004adb
 8004a64:	08004adb 	.word	0x08004adb
 8004a68:	08004adb 	.word	0x08004adb
 8004a6c:	08004adb 	.word	0x08004adb
 8004a70:	08004a89 	.word	0x08004a89
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	4a79      	ldr	r2, [pc, #484]	@ (8004c60 <HAL_GPIO_Init+0x2b4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a7e:	e02c      	b.n	8004ada <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	623b      	str	r3, [r7, #32]
          break;
 8004a86:	e029      	b.n	8004adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	623b      	str	r3, [r7, #32]
          break;
 8004a90:	e024      	b.n	8004adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	3308      	adds	r3, #8
 8004a98:	623b      	str	r3, [r7, #32]
          break;
 8004a9a:	e01f      	b.n	8004adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	623b      	str	r3, [r7, #32]
          break;
 8004aa4:	e01a      	b.n	8004adc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004aae:	2304      	movs	r3, #4
 8004ab0:	623b      	str	r3, [r7, #32]
          break;
 8004ab2:	e013      	b.n	8004adc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d105      	bne.n	8004ac8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004abc:	2308      	movs	r3, #8
 8004abe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	611a      	str	r2, [r3, #16]
          break;
 8004ac6:	e009      	b.n	8004adc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ac8:	2308      	movs	r3, #8
 8004aca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	615a      	str	r2, [r3, #20]
          break;
 8004ad2:	e003      	b.n	8004adc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	623b      	str	r3, [r7, #32]
          break;
 8004ad8:	e000      	b.n	8004adc <HAL_GPIO_Init+0x130>
          break;
 8004ada:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2bff      	cmp	r3, #255	@ 0xff
 8004ae0:	d801      	bhi.n	8004ae6 <HAL_GPIO_Init+0x13a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	e001      	b.n	8004aea <HAL_GPIO_Init+0x13e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2bff      	cmp	r3, #255	@ 0xff
 8004af0:	d802      	bhi.n	8004af8 <HAL_GPIO_Init+0x14c>
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	e002      	b.n	8004afe <HAL_GPIO_Init+0x152>
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	3b08      	subs	r3, #8
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	210f      	movs	r1, #15
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	401a      	ands	r2, r3
 8004b10:	6a39      	ldr	r1, [r7, #32]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80b1 	beq.w	8004c8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b2c:	4b4d      	ldr	r3, [pc, #308]	@ (8004c64 <HAL_GPIO_Init+0x2b8>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	4a4c      	ldr	r2, [pc, #304]	@ (8004c64 <HAL_GPIO_Init+0x2b8>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6193      	str	r3, [r2, #24]
 8004b38:	4b4a      	ldr	r3, [pc, #296]	@ (8004c64 <HAL_GPIO_Init+0x2b8>)
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b44:	4a48      	ldr	r2, [pc, #288]	@ (8004c68 <HAL_GPIO_Init+0x2bc>)
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	220f      	movs	r2, #15
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4013      	ands	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a40      	ldr	r2, [pc, #256]	@ (8004c6c <HAL_GPIO_Init+0x2c0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_GPIO_Init+0x1ec>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3f      	ldr	r2, [pc, #252]	@ (8004c70 <HAL_GPIO_Init+0x2c4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00d      	beq.n	8004b94 <HAL_GPIO_Init+0x1e8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c74 <HAL_GPIO_Init+0x2c8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <HAL_GPIO_Init+0x1e4>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3d      	ldr	r2, [pc, #244]	@ (8004c78 <HAL_GPIO_Init+0x2cc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d101      	bne.n	8004b8c <HAL_GPIO_Init+0x1e0>
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e006      	b.n	8004b9a <HAL_GPIO_Init+0x1ee>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	e004      	b.n	8004b9a <HAL_GPIO_Init+0x1ee>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e002      	b.n	8004b9a <HAL_GPIO_Init+0x1ee>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_GPIO_Init+0x1ee>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9c:	f002 0203 	and.w	r2, r2, #3
 8004ba0:	0092      	lsls	r2, r2, #2
 8004ba2:	4093      	lsls	r3, r2
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004baa:	492f      	ldr	r1, [pc, #188]	@ (8004c68 <HAL_GPIO_Init+0x2bc>)
 8004bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bae:	089b      	lsrs	r3, r3, #2
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d006      	beq.n	8004bd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	492c      	ldr	r1, [pc, #176]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	600b      	str	r3, [r1, #0]
 8004bd0:	e006      	b.n	8004be0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	4928      	ldr	r1, [pc, #160]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d006      	beq.n	8004bfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004bec:	4b23      	ldr	r3, [pc, #140]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	4922      	ldr	r1, [pc, #136]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	604b      	str	r3, [r1, #4]
 8004bf8:	e006      	b.n	8004c08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bfa:	4b20      	ldr	r3, [pc, #128]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	491e      	ldr	r1, [pc, #120]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d006      	beq.n	8004c22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c14:	4b19      	ldr	r3, [pc, #100]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	4918      	ldr	r1, [pc, #96]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]
 8004c20:	e006      	b.n	8004c30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c22:	4b16      	ldr	r3, [pc, #88]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	4914      	ldr	r1, [pc, #80]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d021      	beq.n	8004c80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	490e      	ldr	r1, [pc, #56]	@ (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60cb      	str	r3, [r1, #12]
 8004c48:	e021      	b.n	8004c8e <HAL_GPIO_Init+0x2e2>
 8004c4a:	bf00      	nop
 8004c4c:	10320000 	.word	0x10320000
 8004c50:	10310000 	.word	0x10310000
 8004c54:	10220000 	.word	0x10220000
 8004c58:	10210000 	.word	0x10210000
 8004c5c:	10120000 	.word	0x10120000
 8004c60:	10110000 	.word	0x10110000
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40010800 	.word	0x40010800
 8004c70:	40010c00 	.word	0x40010c00
 8004c74:	40011000 	.word	0x40011000
 8004c78:	40011400 	.word	0x40011400
 8004c7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c80:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb0 <HAL_GPIO_Init+0x304>)
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	43db      	mvns	r3, r3
 8004c88:	4909      	ldr	r1, [pc, #36]	@ (8004cb0 <HAL_GPIO_Init+0x304>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	3301      	adds	r3, #1
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f47f ae8e 	bne.w	80049c0 <HAL_GPIO_Init+0x14>
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	372c      	adds	r7, #44	@ 0x2c
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	40010400 	.word	0x40010400

08004cb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	887b      	ldrh	r3, [r7, #2]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]
 8004cd0:	e001      	b.n	8004cd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	807b      	strh	r3, [r7, #2]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cf2:	787b      	ldrb	r3, [r7, #1]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cf8:	887a      	ldrh	r2, [r7, #2]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cfe:	e003      	b.n	8004d08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	041a      	lsls	r2, r3, #16
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	611a      	str	r2, [r3, #16]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
	...

08004d14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d1e:	4b08      	ldr	r3, [pc, #32]	@ (8004d40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	4013      	ands	r3, r2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d006      	beq.n	8004d38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d2a:	4a05      	ldr	r2, [pc, #20]	@ (8004d40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f806 	bl	8004d44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40010400 	.word	0x40010400

08004d44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr

08004d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e12b      	b.n	8004fc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff f8ce 	bl	8003f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	@ 0x24
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004daa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dbc:	f002 fb78 	bl	80074b0 <HAL_RCC_GetPCLK1Freq>
 8004dc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4a81      	ldr	r2, [pc, #516]	@ (8004fcc <HAL_I2C_Init+0x274>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d807      	bhi.n	8004ddc <HAL_I2C_Init+0x84>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4a80      	ldr	r2, [pc, #512]	@ (8004fd0 <HAL_I2C_Init+0x278>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	bf94      	ite	ls
 8004dd4:	2301      	movls	r3, #1
 8004dd6:	2300      	movhi	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e006      	b.n	8004dea <HAL_I2C_Init+0x92>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a7d      	ldr	r2, [pc, #500]	@ (8004fd4 <HAL_I2C_Init+0x27c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	bf94      	ite	ls
 8004de4:	2301      	movls	r3, #1
 8004de6:	2300      	movhi	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e0e7      	b.n	8004fc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4a78      	ldr	r2, [pc, #480]	@ (8004fd8 <HAL_I2C_Init+0x280>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0c9b      	lsrs	r3, r3, #18
 8004dfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4a6a      	ldr	r2, [pc, #424]	@ (8004fcc <HAL_I2C_Init+0x274>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d802      	bhi.n	8004e2c <HAL_I2C_Init+0xd4>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	e009      	b.n	8004e40 <HAL_I2C_Init+0xe8>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	4a69      	ldr	r2, [pc, #420]	@ (8004fdc <HAL_I2C_Init+0x284>)
 8004e38:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3c:	099b      	lsrs	r3, r3, #6
 8004e3e:	3301      	adds	r3, #1
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	430b      	orrs	r3, r1
 8004e46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	495c      	ldr	r1, [pc, #368]	@ (8004fcc <HAL_I2C_Init+0x274>)
 8004e5c:	428b      	cmp	r3, r1
 8004e5e:	d819      	bhi.n	8004e94 <HAL_I2C_Init+0x13c>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1e59      	subs	r1, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e6e:	1c59      	adds	r1, r3, #1
 8004e70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e74:	400b      	ands	r3, r1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_I2C_Init+0x138>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1e59      	subs	r1, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8e:	e051      	b.n	8004f34 <HAL_I2C_Init+0x1dc>
 8004e90:	2304      	movs	r3, #4
 8004e92:	e04f      	b.n	8004f34 <HAL_I2C_Init+0x1dc>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d111      	bne.n	8004ec0 <HAL_I2C_Init+0x168>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1e58      	subs	r0, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6859      	ldr	r1, [r3, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	440b      	add	r3, r1
 8004eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eae:	3301      	adds	r3, #1
 8004eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	e012      	b.n	8004ee6 <HAL_I2C_Init+0x18e>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	1e58      	subs	r0, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6859      	ldr	r1, [r3, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	0099      	lsls	r1, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf0c      	ite	eq
 8004ee0:	2301      	moveq	r3, #1
 8004ee2:	2300      	movne	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_I2C_Init+0x196>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e022      	b.n	8004f34 <HAL_I2C_Init+0x1dc>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10e      	bne.n	8004f14 <HAL_I2C_Init+0x1bc>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1e58      	subs	r0, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6859      	ldr	r1, [r3, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	440b      	add	r3, r1
 8004f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f08:	3301      	adds	r3, #1
 8004f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f12:	e00f      	b.n	8004f34 <HAL_I2C_Init+0x1dc>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	1e58      	subs	r0, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6859      	ldr	r1, [r3, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	0099      	lsls	r1, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	6809      	ldr	r1, [r1, #0]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69da      	ldr	r2, [r3, #28]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6911      	ldr	r1, [r2, #16]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68d2      	ldr	r2, [r2, #12]
 8004f6e:	4311      	orrs	r1, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	430b      	orrs	r3, r1
 8004f76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695a      	ldr	r2, [r3, #20]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	000186a0 	.word	0x000186a0
 8004fd0:	001e847f 	.word	0x001e847f
 8004fd4:	003d08ff 	.word	0x003d08ff
 8004fd8:	431bde83 	.word	0x431bde83
 8004fdc:	10624dd3 	.word	0x10624dd3

08004fe0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	461a      	mov	r2, r3
 8004fec:	460b      	mov	r3, r1
 8004fee:	817b      	strh	r3, [r7, #10]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ff4:	f7ff f99e 	bl	8004334 <HAL_GetTick>
 8004ff8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b20      	cmp	r3, #32
 8005004:	f040 80e0 	bne.w	80051c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2319      	movs	r3, #25
 800500e:	2201      	movs	r2, #1
 8005010:	4970      	ldr	r1, [pc, #448]	@ (80051d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f964 	bl	80052e0 <I2C_WaitOnFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
 8005020:	e0d3      	b.n	80051ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_I2C_Master_Transmit+0x50>
 800502c:	2302      	movs	r3, #2
 800502e:	e0cc      	b.n	80051ca <HAL_I2C_Master_Transmit+0x1ea>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b01      	cmp	r3, #1
 8005044:	d007      	beq.n	8005056 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005064:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2221      	movs	r2, #33	@ 0x21
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2210      	movs	r2, #16
 8005072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	893a      	ldrh	r2, [r7, #8]
 8005086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a50      	ldr	r2, [pc, #320]	@ (80051d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005096:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005098:	8979      	ldrh	r1, [r7, #10]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	6a3a      	ldr	r2, [r7, #32]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f89c 	bl	80051dc <I2C_MasterRequestWrite>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e08d      	b.n	80051ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80050c4:	e066      	b.n	8005194 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	6a39      	ldr	r1, [r7, #32]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f9de 	bl	800548c <I2C_WaitOnTXEFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00d      	beq.n	80050f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d107      	bne.n	80050ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e06b      	b.n	80051ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f6:	781a      	ldrb	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b04      	cmp	r3, #4
 800512e:	d11b      	bne.n	8005168 <HAL_I2C_Master_Transmit+0x188>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005134:	2b00      	cmp	r3, #0
 8005136:	d017      	beq.n	8005168 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	6a39      	ldr	r1, [r7, #32]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f9ce 	bl	800550e <I2C_WaitOnBTFFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00d      	beq.n	8005194 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517c:	2b04      	cmp	r3, #4
 800517e:	d107      	bne.n	8005190 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800518e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e01a      	b.n	80051ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005198:	2b00      	cmp	r3, #0
 800519a:	d194      	bne.n	80050c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	00100002 	.word	0x00100002
 80051d8:	ffff0000 	.word	0xffff0000

080051dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	607a      	str	r2, [r7, #4]
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	460b      	mov	r3, r1
 80051ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d006      	beq.n	8005206 <I2C_MasterRequestWrite+0x2a>
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d003      	beq.n	8005206 <I2C_MasterRequestWrite+0x2a>
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005204:	d108      	bne.n	8005218 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e00b      	b.n	8005230 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521c:	2b12      	cmp	r3, #18
 800521e:	d107      	bne.n	8005230 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800522e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f84f 	bl	80052e0 <I2C_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00d      	beq.n	8005264 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005256:	d103      	bne.n	8005260 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800525e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e035      	b.n	80052d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800526c:	d108      	bne.n	8005280 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800526e:	897b      	ldrh	r3, [r7, #10]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800527c:	611a      	str	r2, [r3, #16]
 800527e:	e01b      	b.n	80052b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005280:	897b      	ldrh	r3, [r7, #10]
 8005282:	11db      	asrs	r3, r3, #7
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f003 0306 	and.w	r3, r3, #6
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f063 030f 	orn	r3, r3, #15
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	490e      	ldr	r1, [pc, #56]	@ (80052d8 <I2C_MasterRequestWrite+0xfc>)
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f875 	bl	800538e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e010      	b.n	80052d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052ae:	897b      	ldrh	r3, [r7, #10]
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	4907      	ldr	r1, [pc, #28]	@ (80052dc <I2C_MasterRequestWrite+0x100>)
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f865 	bl	800538e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	00010008 	.word	0x00010008
 80052dc:	00010002 	.word	0x00010002

080052e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052f0:	e025      	b.n	800533e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f8:	d021      	beq.n	800533e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fa:	f7ff f81b 	bl	8004334 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d302      	bcc.n	8005310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d116      	bne.n	800533e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e023      	b.n	8005386 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	0c1b      	lsrs	r3, r3, #16
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d10d      	bne.n	8005364 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	43da      	mvns	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4013      	ands	r3, r2
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	bf0c      	ite	eq
 800535a:	2301      	moveq	r3, #1
 800535c:	2300      	movne	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	e00c      	b.n	800537e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	43da      	mvns	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4013      	ands	r3, r2
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	bf0c      	ite	eq
 8005376:	2301      	moveq	r3, #1
 8005378:	2300      	movne	r3, #0
 800537a:	b2db      	uxtb	r3, r3
 800537c:	461a      	mov	r2, r3
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	429a      	cmp	r2, r3
 8005382:	d0b6      	beq.n	80052f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800539c:	e051      	b.n	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ac:	d123      	bne.n	80053f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e2:	f043 0204 	orr.w	r2, r3, #4
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e046      	b.n	8005484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d021      	beq.n	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7fe ff99 	bl	8004334 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d116      	bne.n	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542e:	f043 0220 	orr.w	r2, r3, #32
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e020      	b.n	8005484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	d10c      	bne.n	8005466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	43da      	mvns	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4013      	ands	r3, r2
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	bf14      	ite	ne
 800545e:	2301      	movne	r3, #1
 8005460:	2300      	moveq	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	e00b      	b.n	800547e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	43da      	mvns	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4013      	ands	r3, r2
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	bf14      	ite	ne
 8005478:	2301      	movne	r3, #1
 800547a:	2300      	moveq	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d18d      	bne.n	800539e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005498:	e02d      	b.n	80054f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f878 	bl	8005590 <I2C_IsAcknowledgeFailed>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e02d      	b.n	8005506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d021      	beq.n	80054f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b2:	f7fe ff3f 	bl	8004334 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d116      	bne.n	80054f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	f043 0220 	orr.w	r2, r3, #32
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e007      	b.n	8005506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005500:	2b80      	cmp	r3, #128	@ 0x80
 8005502:	d1ca      	bne.n	800549a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800551a:	e02d      	b.n	8005578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f837 	bl	8005590 <I2C_IsAcknowledgeFailed>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e02d      	b.n	8005588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d021      	beq.n	8005578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005534:	f7fe fefe 	bl	8004334 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	429a      	cmp	r2, r3
 8005542:	d302      	bcc.n	800554a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d116      	bne.n	8005578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e007      	b.n	8005588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b04      	cmp	r3, #4
 8005584:	d1ca      	bne.n	800551c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a6:	d11b      	bne.n	80055e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	f043 0204 	orr.w	r2, r3, #4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ee:	b08b      	sub	sp, #44	@ 0x2c
 80055f0:	af06      	add	r7, sp, #24
 80055f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e0fd      	b.n	80057fa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f007 fa0a 	bl	800ca2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2203      	movs	r2, #3
 800561c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f003 f981 	bl	800892c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	687e      	ldr	r6, [r7, #4]
 8005632:	466d      	mov	r5, sp
 8005634:	f106 0410 	add.w	r4, r6, #16
 8005638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800563a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	602b      	str	r3, [r5, #0]
 8005640:	1d33      	adds	r3, r6, #4
 8005642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005644:	6838      	ldr	r0, [r7, #0]
 8005646:	f003 f94b 	bl	80088e0 <USB_CoreInit>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0ce      	b.n	80057fa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2100      	movs	r1, #0
 8005662:	4618      	mov	r0, r3
 8005664:	f003 f97c 	bl	8008960 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005668:	2300      	movs	r3, #0
 800566a:	73fb      	strb	r3, [r7, #15]
 800566c:	e04c      	b.n	8005708 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	440b      	add	r3, r1
 800567e:	3301      	adds	r3, #1
 8005680:	2201      	movs	r2, #1
 8005682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	440b      	add	r3, r1
 8005694:	7bfa      	ldrb	r2, [r7, #15]
 8005696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005698:	7bfa      	ldrb	r2, [r7, #15]
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	b298      	uxth	r0, r3
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	440b      	add	r3, r1
 80056aa:	3336      	adds	r3, #54	@ 0x36
 80056ac:	4602      	mov	r2, r0
 80056ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	440b      	add	r3, r1
 80056c0:	3303      	adds	r3, #3
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056c6:	7bfa      	ldrb	r2, [r7, #15]
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	440b      	add	r3, r1
 80056d4:	3338      	adds	r3, #56	@ 0x38
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056da:	7bfa      	ldrb	r2, [r7, #15]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	440b      	add	r3, r1
 80056e8:	333c      	adds	r3, #60	@ 0x3c
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056ee:	7bfa      	ldrb	r2, [r7, #15]
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	440b      	add	r3, r1
 80056fc:	3340      	adds	r3, #64	@ 0x40
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	3301      	adds	r3, #1
 8005706:	73fb      	strb	r3, [r7, #15]
 8005708:	7bfa      	ldrb	r2, [r7, #15]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	429a      	cmp	r2, r3
 8005710:	d3ad      	bcc.n	800566e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	e044      	b.n	80057a2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005718:	7bfa      	ldrb	r2, [r7, #15]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	440b      	add	r3, r1
 8005726:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800572e:	7bfa      	ldrb	r2, [r7, #15]
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	440b      	add	r3, r1
 800573c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005740:	7bfa      	ldrb	r2, [r7, #15]
 8005742:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005744:	7bfa      	ldrb	r2, [r7, #15]
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800575a:	7bfa      	ldrb	r2, [r7, #15]
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	440b      	add	r3, r1
 8005768:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005770:	7bfa      	ldrb	r2, [r7, #15]
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	440b      	add	r3, r1
 800577e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005786:	7bfa      	ldrb	r2, [r7, #15]
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	440b      	add	r3, r1
 8005794:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	3301      	adds	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
 80057a2:	7bfa      	ldrb	r2, [r7, #15]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d3b5      	bcc.n	8005718 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	687e      	ldr	r6, [r7, #4]
 80057b4:	466d      	mov	r5, sp
 80057b6:	f106 0410 	add.w	r4, r6, #16
 80057ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	602b      	str	r3, [r5, #0]
 80057c2:	1d33      	adds	r3, r6, #4
 80057c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057c6:	6838      	ldr	r0, [r7, #0]
 80057c8:	f003 f8d6 	bl	8008978 <USB_DevInit>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e00d      	b.n	80057fa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f005 faf7 	bl	800ade6 <USB_DevDisconnect>

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005802 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_PCD_Start+0x16>
 8005814:	2302      	movs	r3, #2
 8005816:	e016      	b.n	8005846 <HAL_PCD_Start+0x44>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f003 f86b 	bl	8008900 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800582a:	2101      	movs	r1, #1
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f007 fb70 	bl	800cf12 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f005 facb 	bl	800add2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b088      	sub	sp, #32
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f005 facd 	bl	800adfa <USB_ReadInterrupts>
 8005860:	4603      	mov	r3, r0
 8005862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005866:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800586a:	d102      	bne.n	8005872 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fb5f 	bl	8005f30 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f005 fabf 	bl	800adfa <USB_ReadInterrupts>
 800587c:	4603      	mov	r3, r0
 800587e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005886:	d112      	bne.n	80058ae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005890:	b29a      	uxth	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589a:	b292      	uxth	r2, r2
 800589c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f007 f93e 	bl	800cb22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80058a6:	2100      	movs	r1, #0
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f923 	bl	8005af4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f005 faa1 	bl	800adfa <USB_ReadInterrupts>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058c2:	d10b      	bne.n	80058dc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058d6:	b292      	uxth	r2, r2
 80058d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f005 fa8a 	bl	800adfa <USB_ReadInterrupts>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058f0:	d10b      	bne.n	800590a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005904:	b292      	uxth	r2, r2
 8005906:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f005 fa73 	bl	800adfa <USB_ReadInterrupts>
 8005914:	4603      	mov	r3, r0
 8005916:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591e:	d126      	bne.n	800596e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005928:	b29a      	uxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0204 	bic.w	r2, r2, #4
 8005932:	b292      	uxth	r2, r2
 8005934:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005940:	b29a      	uxth	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0208 	bic.w	r2, r2, #8
 800594a:	b292      	uxth	r2, r2
 800594c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f007 f91f 	bl	800cb94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800595e:	b29a      	uxth	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005968:	b292      	uxth	r2, r2
 800596a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f005 fa41 	bl	800adfa <USB_ReadInterrupts>
 8005978:	4603      	mov	r3, r0
 800597a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800597e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005982:	f040 8082 	bne.w	8005a8a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005986:	2300      	movs	r3, #0
 8005988:	77fb      	strb	r3, [r7, #31]
 800598a:	e010      	b.n	80059ae <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	7ffb      	ldrb	r3, [r7, #31]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	441a      	add	r2, r3
 8005998:	7ffb      	ldrb	r3, [r7, #31]
 800599a:	8812      	ldrh	r2, [r2, #0]
 800599c:	b292      	uxth	r2, r2
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	3320      	adds	r3, #32
 80059a2:	443b      	add	r3, r7
 80059a4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80059a8:	7ffb      	ldrb	r3, [r7, #31]
 80059aa:	3301      	adds	r3, #1
 80059ac:	77fb      	strb	r3, [r7, #31]
 80059ae:	7ffb      	ldrb	r3, [r7, #31]
 80059b0:	2b07      	cmp	r3, #7
 80059b2:	d9eb      	bls.n	800598c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	b292      	uxth	r2, r2
 80059c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	b292      	uxth	r2, r2
 80059e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80059e4:	bf00      	nop
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f6      	beq.n	80059e6 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a0a:	b292      	uxth	r2, r2
 8005a0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005a10:	2300      	movs	r3, #0
 8005a12:	77fb      	strb	r3, [r7, #31]
 8005a14:	e00f      	b.n	8005a36 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005a16:	7ffb      	ldrb	r3, [r7, #31]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	7ffa      	ldrb	r2, [r7, #31]
 8005a20:	0092      	lsls	r2, r2, #2
 8005a22:	440a      	add	r2, r1
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	3320      	adds	r3, #32
 8005a28:	443b      	add	r3, r7
 8005a2a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005a2e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005a30:	7ffb      	ldrb	r3, [r7, #31]
 8005a32:	3301      	adds	r3, #1
 8005a34:	77fb      	strb	r3, [r7, #31]
 8005a36:	7ffb      	ldrb	r3, [r7, #31]
 8005a38:	2b07      	cmp	r3, #7
 8005a3a:	d9ec      	bls.n	8005a16 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0208 	orr.w	r2, r2, #8
 8005a4e:	b292      	uxth	r2, r2
 8005a50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a66:	b292      	uxth	r2, r2
 8005a68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0204 	orr.w	r2, r2, #4
 8005a7e:	b292      	uxth	r2, r2
 8005a80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f007 f86b 	bl	800cb60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f005 f9b3 	bl	800adfa <USB_ReadInterrupts>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a9e:	d10e      	bne.n	8005abe <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005ab2:	b292      	uxth	r2, r2
 8005ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f007 f824 	bl	800cb06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f005 f999 	bl	800adfa <USB_ReadInterrupts>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad2:	d10b      	bne.n	8005aec <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
}
 8005aec:	bf00      	nop
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_PCD_SetAddress+0x1a>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e013      	b.n	8005b36 <HAL_PCD_SetAddress+0x42>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	78fa      	ldrb	r2, [r7, #3]
 8005b1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	78fa      	ldrb	r2, [r7, #3]
 8005b24:	4611      	mov	r1, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f005 f940 	bl	800adac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	4608      	mov	r0, r1
 8005b48:	4611      	mov	r1, r2
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	70fb      	strb	r3, [r7, #3]
 8005b50:	460b      	mov	r3, r1
 8005b52:	803b      	strh	r3, [r7, #0]
 8005b54:	4613      	mov	r3, r2
 8005b56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	da0e      	bge.n	8005b82 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4413      	add	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	705a      	strb	r2, [r3, #1]
 8005b80:	e00e      	b.n	8005ba0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	f003 0207 	and.w	r2, r3, #7
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4413      	add	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005bac:	883a      	ldrh	r2, [r7, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	78ba      	ldrb	r2, [r7, #2]
 8005bb6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005bca:	78bb      	ldrb	r3, [r7, #2]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d102      	bne.n	8005bd6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_PCD_EP_Open+0xa6>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e00e      	b.n	8005c02 <HAL_PCD_EP_Open+0xc4>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68f9      	ldr	r1, [r7, #12]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f002 fee0 	bl	80089b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8005c00:	7afb      	ldrb	r3, [r7, #11]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	460b      	mov	r3, r1
 8005c14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	da0e      	bge.n	8005c3c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	4413      	add	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	705a      	strb	r2, [r3, #1]
 8005c3a:	e00e      	b.n	8005c5a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	f003 0207 	and.w	r2, r3, #7
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	4413      	add	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_PCD_EP_Close+0x6a>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e00e      	b.n	8005c92 <HAL_PCD_EP_Close+0x88>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68f9      	ldr	r1, [r7, #12]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f003 fa02 	bl	800908c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b086      	sub	sp, #24
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005caa:	7afb      	ldrb	r3, [r7, #11]
 8005cac:	f003 0207 	and.w	r2, r3, #7
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cda:	7afb      	ldrb	r3, [r7, #11]
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6979      	ldr	r1, [r7, #20]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f003 fbb4 	bl	8009464 <USB_EPStartXfer>
 8005cfc:	e005      	b.n	8005d0a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6979      	ldr	r1, [r7, #20]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f003 fbad 	bl	8009464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	f003 0207 	and.w	r2, r3, #7
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	440b      	add	r3, r1
 8005d32:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005d36:	681b      	ldr	r3, [r3, #0]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b086      	sub	sp, #24
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d52:	7afb      	ldrb	r3, [r7, #11]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2200      	movs	r2, #0
 8005d86:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d8e:	7afb      	ldrb	r3, [r7, #11]
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d9a:	7afb      	ldrb	r3, [r7, #11]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6979      	ldr	r1, [r7, #20]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f003 fb5a 	bl	8009464 <USB_EPStartXfer>
 8005db0:	e005      	b.n	8005dbe <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6979      	ldr	r1, [r7, #20]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f003 fb53 	bl	8009464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	f003 0207 	and.w	r2, r3, #7
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d901      	bls.n	8005de6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e04c      	b.n	8005e80 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da0e      	bge.n	8005e0c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	705a      	strb	r2, [r3, #1]
 8005e0a:	e00c      	b.n	8005e26 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e0c:	78fa      	ldrb	r2, [r7, #3]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_PCD_EP_SetStall+0x7e>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e01c      	b.n	8005e80 <HAL_PCD_EP_SetStall+0xb8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68f9      	ldr	r1, [r7, #12]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f004 feac 	bl	800abb2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d108      	bne.n	8005e76 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4610      	mov	r0, r2
 8005e72:	f004 ffd1 	bl	800ae18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	f003 020f 	and.w	r2, r3, #15
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d901      	bls.n	8005ea6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e040      	b.n	8005f28 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da0e      	bge.n	8005ecc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	705a      	strb	r2, [r3, #1]
 8005eca:	e00e      	b.n	8005eea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	f003 0207 	and.w	r2, r3, #7
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_PCD_EP_ClrStall+0x82>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e00e      	b.n	8005f28 <HAL_PCD_EP_ClrStall+0xa0>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f004 fe9a 	bl	800ac52 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08e      	sub	sp, #56	@ 0x38
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f38:	e2de      	b.n	80064f8 <PCD_EP_ISR_Handler+0x5c8>
  {
    wIstr = hpcd->Instance->ISTR;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005f42:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005f44:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if (epindex == 0U)
 8005f50:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f040 8157 	bne.w	8006208 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005f5a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d151      	bne.n	8006008 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f74:	81fb      	strh	r3, [r7, #14]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	89fb      	ldrh	r3, [r7, #14]
 8005f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3328      	adds	r3, #40	@ 0x28
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	3302      	adds	r3, #2
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6812      	ldr	r2, [r2, #0]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	695a      	ldr	r2, [r3, #20]
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	441a      	add	r2, r3
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005fc8:	2100      	movs	r1, #0
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f006 fd81 	bl	800cad2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 828d 	beq.w	80064f8 <PCD_EP_ISR_Handler+0x5c8>
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 8288 	bne.w	80064f8 <PCD_EP_ISR_Handler+0x5c8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006006:	e277      	b.n	80064f8 <PCD_EP_ISR_Handler+0x5c8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800600e:	627b      	str	r3, [r7, #36]	@ 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	857b      	strh	r3, [r7, #42]	@ 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006018:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800601a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800601e:	2b00      	cmp	r3, #0
 8006020:	d034      	beq.n	800608c <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	4413      	add	r3, r2
 8006036:	3306      	adds	r3, #6
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006060:	b29b      	uxth	r3, r3
 8006062:	f004 ff28 	bl	800aeb6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29a      	uxth	r2, r3
 800606e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006072:	4013      	ands	r3, r2
 8006074:	823b      	strh	r3, [r7, #16]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	8a3a      	ldrh	r2, [r7, #16]
 800607c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006080:	b292      	uxth	r2, r2
 8006082:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f006 fcf7 	bl	800ca78 <HAL_PCD_SetupStageCallback>
 800608a:	e235      	b.n	80064f8 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800608c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8006090:	2b00      	cmp	r3, #0
 8006092:	f280 8231 	bge.w	80064f8 <PCD_EP_ISR_Handler+0x5c8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29a      	uxth	r2, r3
 800609e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80060a2:	4013      	ands	r3, r2
 80060a4:	83bb      	strh	r3, [r7, #28]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	8bba      	ldrh	r2, [r7, #28]
 80060ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80060b0:	b292      	uxth	r2, r2
 80060b2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060bc:	b29b      	uxth	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4413      	add	r3, r2
 80060c8:	3306      	adds	r3, #6
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d019      	beq.n	800611c <PCD_EP_ISR_Handler+0x1ec>
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d015      	beq.n	800611c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	6959      	ldr	r1, [r3, #20]
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006100:	b29b      	uxth	r3, r3
 8006102:	f004 fed8 	bl	800aeb6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	695a      	ldr	r2, [r3, #20]
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	441a      	add	r2, r3
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006114:	2100      	movs	r1, #0
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f006 fcc0 	bl	800ca9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	4413      	add	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d112      	bne.n	800616a <PCD_EP_ISR_Handler+0x23a>
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800614e:	b29a      	uxth	r2, r3
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29a      	uxth	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	e02f      	b.n	80061ca <PCD_EP_ISR_Handler+0x29a>
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006170:	d813      	bhi.n	800619a <PCD_EP_ISR_Handler+0x26a>
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	633b      	str	r3, [r7, #48]	@ 0x30
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <PCD_EP_ISR_Handler+0x25c>
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	3301      	adds	r3, #1
 800618a:	633b      	str	r3, [r7, #48]	@ 0x30
 800618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618e:	b29b      	uxth	r3, r3
 8006190:	029b      	lsls	r3, r3, #10
 8006192:	b29a      	uxth	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	e017      	b.n	80061ca <PCD_EP_ISR_Handler+0x29a>
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 031f 	and.w	r3, r3, #31
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <PCD_EP_ISR_Handler+0x284>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	3b01      	subs	r3, #1
 80061b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	029b      	lsls	r3, r3, #10
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061da:	827b      	strh	r3, [r7, #18]
 80061dc:	8a7b      	ldrh	r3, [r7, #18]
 80061de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80061e2:	827b      	strh	r3, [r7, #18]
 80061e4:	8a7b      	ldrh	r3, [r7, #18]
 80061e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061ea:	827b      	strh	r3, [r7, #18]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	8a7b      	ldrh	r3, [r7, #18]
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]
 8006206:	e177      	b.n	80064f8 <PCD_EP_ISR_Handler+0x5c8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	857b      	strh	r3, [r7, #42]	@ 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800621a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800621e:	2b00      	cmp	r3, #0
 8006220:	f280 80ea 	bge.w	80063f8 <PCD_EP_ISR_Handler+0x4c8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29a      	uxth	r2, r3
 8006236:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800623a:	4013      	ands	r3, r2
 800623c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800624e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006252:	b292      	uxth	r2, r2
 8006254:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006256:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	7b1b      	ldrb	r3, [r3, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d122      	bne.n	80062ba <PCD_EP_ISR_Handler+0x38a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4413      	add	r3, r2
 8006288:	3306      	adds	r3, #6
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800629c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (count != 0U)
 800629e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8087 	beq.w	80063b4 <PCD_EP_ISR_Handler+0x484>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	6959      	ldr	r1, [r3, #20]
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	88da      	ldrh	r2, [r3, #6]
 80062b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062b4:	f004 fdff 	bl	800aeb6 <USB_ReadPMA>
 80062b8:	e07c      	b.n	80063b4 <PCD_EP_ISR_Handler+0x484>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	78db      	ldrb	r3, [r3, #3]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d108      	bne.n	80062d4 <PCD_EP_ISR_Handler+0x3a4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80062c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80062c4:	461a      	mov	r2, r3
 80062c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f923 	bl	8006514 <HAL_PCD_EP_DB_Receive>
 80062ce:	4603      	mov	r3, r0
 80062d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80062d2:	e06f      	b.n	80063b4 <PCD_EP_ISR_Handler+0x484>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ee:	847b      	strh	r3, [r7, #34]	@ 0x22
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	441a      	add	r2, r3
 80062fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800630c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006310:	b29b      	uxth	r3, r3
 8006312:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d021      	beq.n	8006372 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006336:	b29b      	uxth	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	4413      	add	r3, r2
 8006342:	3302      	adds	r3, #2
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006356:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 8006358:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800635a:	2b00      	cmp	r3, #0
 800635c:	d02a      	beq.n	80063b4 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	6959      	ldr	r1, [r3, #20]
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	891a      	ldrh	r2, [r3, #8]
 800636a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800636c:	f004 fda3 	bl	800aeb6 <USB_ReadPMA>
 8006370:	e020      	b.n	80063b4 <PCD_EP_ISR_Handler+0x484>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800637a:	b29b      	uxth	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	4413      	add	r3, r2
 8006386:	3306      	adds	r3, #6
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6812      	ldr	r2, [r2, #0]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800639a:	86fb      	strh	r3, [r7, #54]	@ 0x36

              if (count != 0U)
 800639c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d008      	beq.n	80063b4 <PCD_EP_ISR_Handler+0x484>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	6959      	ldr	r1, [r3, #20]
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	895a      	ldrh	r2, [r3, #10]
 80063ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063b0:	f004 fd81 	bl	800aeb6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063ba:	441a      	add	r2, r3
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	695a      	ldr	r2, [r3, #20]
 80063c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063c6:	441a      	add	r2, r3
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <PCD_EP_ISR_Handler+0x4ae>
 80063d4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d206      	bcs.n	80063ec <PCD_EP_ISR_Handler+0x4bc>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f006 fb59 	bl	800ca9c <HAL_PCD_DataOutStageCallback>
 80063ea:	e005      	b.n	80063f8 <PCD_EP_ISR_Handler+0x4c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f003 f836 	bl	8009464 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80063f8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80063fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d07a      	beq.n	80064f8 <PCD_EP_ISR_Handler+0x5c8>
      {
        ep = &hpcd->IN_ep[epindex];
 8006402:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	4413      	add	r3, r2
 8006414:	627b      	str	r3, [r7, #36]	@ 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800642c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006430:	843b      	strh	r3, [r7, #32]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	441a      	add	r2, r3
 8006440:	8c3b      	ldrh	r3, [r7, #32]
 8006442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644a:	b29b      	uxth	r3, r3
 800644c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	78db      	ldrb	r3, [r3, #3]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d108      	bne.n	8006468 <PCD_EP_ISR_Handler+0x538>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800645a:	2b02      	cmp	r3, #2
 800645c:	d146      	bne.n	80064ec <PCD_EP_ISR_Handler+0x5bc>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800645e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d141      	bne.n	80064ec <PCD_EP_ISR_Handler+0x5bc>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006470:	b29b      	uxth	r3, r3
 8006472:	461a      	mov	r2, r3
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	4413      	add	r3, r2
 800647c:	3302      	adds	r3, #2
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006490:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	8bfb      	ldrh	r3, [r7, #30]
 8006498:	429a      	cmp	r2, r3
 800649a:	d906      	bls.n	80064aa <PCD_EP_ISR_Handler+0x57a>
          {
            ep->xfer_len -= TxByteNbre;
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	699a      	ldr	r2, [r3, #24]
 80064a0:	8bfb      	ldrh	r3, [r7, #30]
 80064a2:	1ad2      	subs	r2, r2, r3
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	619a      	str	r2, [r3, #24]
 80064a8:	e002      	b.n	80064b0 <PCD_EP_ISR_Handler+0x580>
          }
          else
          {
            ep->xfer_len = 0U;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	2200      	movs	r2, #0
 80064ae:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <PCD_EP_ISR_Handler+0x596>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f006 fb07 	bl	800cad2 <HAL_PCD_DataInStageCallback>
          if (ep->xfer_len == 0U)
 80064c4:	e018      	b.n	80064f8 <PCD_EP_ISR_Handler+0x5c8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	695a      	ldr	r2, [r3, #20]
 80064ca:	8bfb      	ldrh	r3, [r7, #30]
 80064cc:	441a      	add	r2, r3
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	8bfb      	ldrh	r3, [r7, #30]
 80064d8:	441a      	add	r2, r3
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064e4:	4618      	mov	r0, r3
 80064e6:	f002 ffbd 	bl	8009464 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80064ea:	e005      	b.n	80064f8 <PCD_EP_ISR_Handler+0x5c8>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80064ec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80064ee:	461a      	mov	r2, r3
 80064f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f91b 	bl	800672e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006500:	b29b      	uxth	r3, r3
 8006502:	b21b      	sxth	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	f6ff ad18 	blt.w	8005f3a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3738      	adds	r7, #56	@ 0x38
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	4613      	mov	r3, r2
 8006520:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d07e      	beq.n	800662a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006534:	b29b      	uxth	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	4413      	add	r3, r2
 8006540:	3302      	adds	r3, #2
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006554:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	8b7b      	ldrh	r3, [r7, #26]
 800655c:	429a      	cmp	r2, r3
 800655e:	d306      	bcc.n	800656e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	699a      	ldr	r2, [r3, #24]
 8006564:	8b7b      	ldrh	r3, [r7, #26]
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	619a      	str	r2, [r3, #24]
 800656c:	e002      	b.n	8006574 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2200      	movs	r2, #0
 8006572:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d123      	bne.n	80065c4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b29b      	uxth	r3, r3
 800658e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006596:	833b      	strh	r3, [r7, #24]
 8006598:	8b3b      	ldrh	r3, [r7, #24]
 800659a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800659e:	833b      	strh	r3, [r7, #24]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	441a      	add	r2, r3
 80065ae:	8b3b      	ldrh	r3, [r7, #24]
 80065b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065c4:	88fb      	ldrh	r3, [r7, #6]
 80065c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d01f      	beq.n	800660e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e8:	82fb      	strh	r3, [r7, #22]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	441a      	add	r2, r3
 80065f8:	8afb      	ldrh	r3, [r7, #22]
 80065fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006606:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800660a:	b29b      	uxth	r3, r3
 800660c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800660e:	8b7b      	ldrh	r3, [r7, #26]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8087 	beq.w	8006724 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6959      	ldr	r1, [r3, #20]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	891a      	ldrh	r2, [r3, #8]
 8006622:	8b7b      	ldrh	r3, [r7, #26]
 8006624:	f004 fc47 	bl	800aeb6 <USB_ReadPMA>
 8006628:	e07c      	b.n	8006724 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006632:	b29b      	uxth	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	4413      	add	r3, r2
 800663e:	3306      	adds	r3, #6
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006652:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	699a      	ldr	r2, [r3, #24]
 8006658:	8b7b      	ldrh	r3, [r7, #26]
 800665a:	429a      	cmp	r2, r3
 800665c:	d306      	bcc.n	800666c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	8b7b      	ldrh	r3, [r7, #26]
 8006664:	1ad2      	subs	r2, r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	619a      	str	r2, [r3, #24]
 800666a:	e002      	b.n	8006672 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2200      	movs	r2, #0
 8006670:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d123      	bne.n	80066c2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006694:	83fb      	strh	r3, [r7, #30]
 8006696:	8bfb      	ldrh	r3, [r7, #30]
 8006698:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800669c:	83fb      	strh	r3, [r7, #30]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	8bfb      	ldrh	r3, [r7, #30]
 80066ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066be:	b29b      	uxth	r3, r3
 80066c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d11f      	bne.n	800670c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e6:	83bb      	strh	r3, [r7, #28]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	441a      	add	r2, r3
 80066f6:	8bbb      	ldrh	r3, [r7, #28]
 80066f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006704:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006708:	b29b      	uxth	r3, r3
 800670a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800670c:	8b7b      	ldrh	r3, [r7, #26]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d008      	beq.n	8006724 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6959      	ldr	r1, [r3, #20]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	895a      	ldrh	r2, [r3, #10]
 800671e:	8b7b      	ldrh	r3, [r7, #26]
 8006720:	f004 fbc9 	bl	800aeb6 <USB_ReadPMA>
    }
  }

  return count;
 8006724:	8b7b      	ldrh	r3, [r7, #26]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b094      	sub	sp, #80	@ 0x50
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	4613      	mov	r3, r2
 800673a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8138 	beq.w	80069b8 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006750:	b29b      	uxth	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	4413      	add	r3, r2
 800675c:	3302      	adds	r3, #2
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006770:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len > TxByteNbre)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800677c:	429a      	cmp	r2, r3
 800677e:	d907      	bls.n	8006790 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	699a      	ldr	r2, [r3, #24]
 8006784:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006788:	1ad2      	subs	r2, r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	619a      	str	r2, [r3, #24]
 800678e:	e002      	b.n	8006796 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2200      	movs	r2, #0
 8006794:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d12c      	bne.n	80067f8 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	4619      	mov	r1, r3
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f006 f994 	bl	800cad2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 823a 	beq.w	8006c2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d0:	82fb      	strh	r3, [r7, #22]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	441a      	add	r2, r3
 80067e0:	8afb      	ldrh	r3, [r7, #22]
 80067e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	8013      	strh	r3, [r2, #0]
 80067f6:	e218      	b.n	8006c2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067f8:	88fb      	ldrh	r3, [r7, #6]
 80067fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01f      	beq.n	8006842 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800682e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800683a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683e:	b29b      	uxth	r3, r3
 8006840:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006848:	2b01      	cmp	r3, #1
 800684a:	f040 81ee 	bne.w	8006c2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006856:	441a      	add	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006864:	441a      	add	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	6a1a      	ldr	r2, [r3, #32]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	429a      	cmp	r2, r3
 8006874:	d309      	bcc.n	800688a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6a1a      	ldr	r2, [r3, #32]
 8006880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	621a      	str	r2, [r3, #32]
 8006888:	e015      	b.n	80068b6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d107      	bne.n	80068a2 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8006892:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006896:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80068a0:	e009      	b.n	80068b6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d155      	bne.n	800696a <HAL_PCD_EP_DB_Transmit+0x23c>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	011a      	lsls	r2, r3, #4
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	4413      	add	r3, r2
 80068e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d112      	bne.n	8006912 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	801a      	strh	r2, [r3, #0]
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800690a:	b29a      	uxth	r2, r3
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	801a      	strh	r2, [r3, #0]
 8006910:	e047      	b.n	80069a2 <HAL_PCD_EP_DB_Transmit+0x274>
 8006912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006914:	2b3e      	cmp	r3, #62	@ 0x3e
 8006916:	d811      	bhi.n	800693c <HAL_PCD_EP_DB_Transmit+0x20e>
 8006918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800691a:	085b      	lsrs	r3, r3, #1
 800691c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800691e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_PCD_EP_DB_Transmit+0x200>
 8006928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692a:	3301      	adds	r3, #1
 800692c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800692e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006930:	b29b      	uxth	r3, r3
 8006932:	029b      	lsls	r3, r3, #10
 8006934:	b29a      	uxth	r2, r3
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	801a      	strh	r2, [r3, #0]
 800693a:	e032      	b.n	80069a2 <HAL_PCD_EP_DB_Transmit+0x274>
 800693c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <HAL_PCD_EP_DB_Transmit+0x224>
 800694c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694e:	3b01      	subs	r3, #1
 8006950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006954:	b29b      	uxth	r3, r3
 8006956:	029b      	lsls	r3, r3, #10
 8006958:	b29b      	uxth	r3, r3
 800695a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006962:	b29a      	uxth	r2, r3
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	e01b      	b.n	80069a2 <HAL_PCD_EP_DB_Transmit+0x274>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d117      	bne.n	80069a2 <HAL_PCD_EP_DB_Transmit+0x274>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006980:	b29b      	uxth	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006986:	4413      	add	r3, r2
 8006988:	627b      	str	r3, [r7, #36]	@ 0x24
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	011a      	lsls	r2, r3, #4
 8006990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006992:	4413      	add	r3, r2
 8006994:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006998:	623b      	str	r3, [r7, #32]
 800699a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800699c:	b29a      	uxth	r2, r3
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6959      	ldr	r1, [r3, #20]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	891a      	ldrh	r2, [r3, #8]
 80069ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f004 fa3c 	bl	800ae2e <USB_WritePMA>
 80069b6:	e138      	b.n	8006c2a <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	461a      	mov	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	4413      	add	r3, r2
 80069cc:	3306      	adds	r3, #6
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069e0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    if (ep->xfer_len >= TxByteNbre)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	699a      	ldr	r2, [r3, #24]
 80069e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d307      	bcc.n	8006a00 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	699a      	ldr	r2, [r3, #24]
 80069f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80069f8:	1ad2      	subs	r2, r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	619a      	str	r2, [r3, #24]
 80069fe:	e002      	b.n	8006a06 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2200      	movs	r2, #0
 8006a04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d12e      	bne.n	8006a6c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	4619      	mov	r1, r3
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f006 f85c 	bl	800cad2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f040 8102 	bne.w	8006c2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a40:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	441a      	add	r2, r3
 8006a52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	8013      	strh	r3, [r2, #0]
 8006a6a:	e0de      	b.n	8006c2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d11f      	bne.n	8006ab6 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a90:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	441a      	add	r2, r3
 8006aa0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006aa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aaa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	f040 80b4 	bne.w	8006c2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	695a      	ldr	r2, [r3, #20]
 8006ac6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006aca:	441a      	add	r2, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006ad8:	441a      	add	r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	6a1a      	ldr	r2, [r3, #32]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d309      	bcc.n	8006afe <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db -= len;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006af6:	1ad2      	subs	r2, r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	621a      	str	r2, [r3, #32]
 8006afc:	e015      	b.n	8006b2a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d107      	bne.n	8006b16 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8006b06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006b0a:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_fill_db = 0U;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006b14:	e009      	b.n	8006b2a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	647b      	str	r3, [r7, #68]	@ 0x44
          ep->xfer_len_db = 0U;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d155      	bne.n	8006be4 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	461a      	mov	r2, r3
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4c:	4413      	add	r3, r2
 8006b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	011a      	lsls	r2, r3, #4
 8006b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b58:	4413      	add	r3, r2
 8006b5a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d112      	bne.n	8006b8c <HAL_PCD_EP_DB_Transmit+0x45e>
 8006b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b74:	801a      	strh	r2, [r3, #0]
 8006b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b88:	801a      	strh	r2, [r3, #0]
 8006b8a:	e044      	b.n	8006c16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b90:	d811      	bhi.n	8006bb6 <HAL_PCD_EP_DB_Transmit+0x488>
 8006b92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	029b      	lsls	r3, r3, #10
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb2:	801a      	strh	r2, [r3, #0]
 8006bb4:	e02f      	b.n	8006c16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bb8:	095b      	lsrs	r3, r3, #5
 8006bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <HAL_PCD_EP_DB_Transmit+0x49e>
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	e018      	b.n	8006c16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d114      	bne.n	8006c16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bfa:	4413      	add	r3, r2
 8006bfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	011a      	lsls	r2, r3, #4
 8006c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c06:	4413      	add	r3, r2
 8006c08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c14:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6959      	ldr	r1, [r3, #20]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	895a      	ldrh	r2, [r3, #10]
 8006c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f004 f902 	bl	800ae2e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c44:	82bb      	strh	r3, [r7, #20]
 8006c46:	8abb      	ldrh	r3, [r7, #20]
 8006c48:	f083 0310 	eor.w	r3, r3, #16
 8006c4c:	82bb      	strh	r3, [r7, #20]
 8006c4e:	8abb      	ldrh	r3, [r7, #20]
 8006c50:	f083 0320 	eor.w	r3, r3, #32
 8006c54:	82bb      	strh	r3, [r7, #20]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	441a      	add	r2, r3
 8006c64:	8abb      	ldrh	r3, [r7, #20]
 8006c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3750      	adds	r7, #80	@ 0x50
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	817b      	strh	r3, [r7, #10]
 8006c92:	4613      	mov	r3, r2
 8006c94:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006c96:	897b      	ldrh	r3, [r7, #10]
 8006c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00b      	beq.n	8006cba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ca2:	897b      	ldrh	r3, [r7, #10]
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	e009      	b.n	8006cce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006cba:	897a      	ldrh	r2, [r7, #10]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006cce:	893b      	ldrh	r3, [r7, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d107      	bne.n	8006ce4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	80da      	strh	r2, [r3, #6]
 8006ce2:	e00b      	b.n	8006cfc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	0c1b      	lsrs	r3, r3, #16
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr

08006d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e272      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8087 	beq.w	8006e36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d28:	4b92      	ldr	r3, [pc, #584]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f003 030c 	and.w	r3, r3, #12
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d00c      	beq.n	8006d4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d34:	4b8f      	ldr	r3, [pc, #572]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f003 030c 	and.w	r3, r3, #12
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d112      	bne.n	8006d66 <HAL_RCC_OscConfig+0x5e>
 8006d40:	4b8c      	ldr	r3, [pc, #560]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d4c:	d10b      	bne.n	8006d66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d4e:	4b89      	ldr	r3, [pc, #548]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d06c      	beq.n	8006e34 <HAL_RCC_OscConfig+0x12c>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d168      	bne.n	8006e34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e24c      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d6e:	d106      	bne.n	8006d7e <HAL_RCC_OscConfig+0x76>
 8006d70:	4b80      	ldr	r3, [pc, #512]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a7f      	ldr	r2, [pc, #508]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	e02e      	b.n	8006ddc <HAL_RCC_OscConfig+0xd4>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10c      	bne.n	8006da0 <HAL_RCC_OscConfig+0x98>
 8006d86:	4b7b      	ldr	r3, [pc, #492]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a7a      	ldr	r2, [pc, #488]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	4b78      	ldr	r3, [pc, #480]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a77      	ldr	r2, [pc, #476]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006d98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	e01d      	b.n	8006ddc <HAL_RCC_OscConfig+0xd4>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006da8:	d10c      	bne.n	8006dc4 <HAL_RCC_OscConfig+0xbc>
 8006daa:	4b72      	ldr	r3, [pc, #456]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a71      	ldr	r2, [pc, #452]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	4b6f      	ldr	r3, [pc, #444]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6e      	ldr	r2, [pc, #440]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	e00b      	b.n	8006ddc <HAL_RCC_OscConfig+0xd4>
 8006dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	4b68      	ldr	r3, [pc, #416]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a67      	ldr	r2, [pc, #412]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d013      	beq.n	8006e0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de4:	f7fd faa6 	bl	8004334 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dec:	f7fd faa2 	bl	8004334 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b64      	cmp	r3, #100	@ 0x64
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e200      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f0      	beq.n	8006dec <HAL_RCC_OscConfig+0xe4>
 8006e0a:	e014      	b.n	8006e36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0c:	f7fd fa92 	bl	8004334 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e14:	f7fd fa8e 	bl	8004334 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b64      	cmp	r3, #100	@ 0x64
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e1ec      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e26:	4b53      	ldr	r3, [pc, #332]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x10c>
 8006e32:	e000      	b.n	8006e36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d063      	beq.n	8006f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e42:	4b4c      	ldr	r3, [pc, #304]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f003 030c 	and.w	r3, r3, #12
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00b      	beq.n	8006e66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006e4e:	4b49      	ldr	r3, [pc, #292]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f003 030c 	and.w	r3, r3, #12
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d11c      	bne.n	8006e94 <HAL_RCC_OscConfig+0x18c>
 8006e5a:	4b46      	ldr	r3, [pc, #280]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d116      	bne.n	8006e94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e66:	4b43      	ldr	r3, [pc, #268]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <HAL_RCC_OscConfig+0x176>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d001      	beq.n	8006e7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e1c0      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	4939      	ldr	r1, [pc, #228]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e92:	e03a      	b.n	8006f0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d020      	beq.n	8006ede <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e9c:	4b36      	ldr	r3, [pc, #216]	@ (8006f78 <HAL_RCC_OscConfig+0x270>)
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea2:	f7fd fa47 	bl	8004334 <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eaa:	f7fd fa43 	bl	8004334 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e1a1      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f0      	beq.n	8006eaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	4927      	ldr	r1, [pc, #156]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	600b      	str	r3, [r1, #0]
 8006edc:	e015      	b.n	8006f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ede:	4b26      	ldr	r3, [pc, #152]	@ (8006f78 <HAL_RCC_OscConfig+0x270>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee4:	f7fd fa26 	bl	8004334 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eec:	f7fd fa22 	bl	8004334 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e180      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006efe:	4b1d      	ldr	r3, [pc, #116]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f0      	bne.n	8006eec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d03a      	beq.n	8006f8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d019      	beq.n	8006f52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f1e:	4b17      	ldr	r3, [pc, #92]	@ (8006f7c <HAL_RCC_OscConfig+0x274>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f24:	f7fd fa06 	bl	8004334 <HAL_GetTick>
 8006f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f2a:	e008      	b.n	8006f3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f2c:	f7fd fa02 	bl	8004334 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e160      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f74 <HAL_RCC_OscConfig+0x26c>)
 8006f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0f0      	beq.n	8006f2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006f4a:	2001      	movs	r0, #1
 8006f4c:	f000 fad8 	bl	8007500 <RCC_Delay>
 8006f50:	e01c      	b.n	8006f8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f52:	4b0a      	ldr	r3, [pc, #40]	@ (8006f7c <HAL_RCC_OscConfig+0x274>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f58:	f7fd f9ec 	bl	8004334 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f5e:	e00f      	b.n	8006f80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f60:	f7fd f9e8 	bl	8004334 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d908      	bls.n	8006f80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e146      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
 8006f72:	bf00      	nop
 8006f74:	40021000 	.word	0x40021000
 8006f78:	42420000 	.word	0x42420000
 8006f7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f80:	4b92      	ldr	r3, [pc, #584]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8006f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e9      	bne.n	8006f60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80a6 	beq.w	80070e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f9e:	4b8b      	ldr	r3, [pc, #556]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10d      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006faa:	4b88      	ldr	r3, [pc, #544]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	4a87      	ldr	r2, [pc, #540]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8006fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fb4:	61d3      	str	r3, [r2, #28]
 8006fb6:	4b85      	ldr	r3, [pc, #532]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fbe:	60bb      	str	r3, [r7, #8]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fc6:	4b82      	ldr	r3, [pc, #520]	@ (80071d0 <HAL_RCC_OscConfig+0x4c8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d118      	bne.n	8007004 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80071d0 <HAL_RCC_OscConfig+0x4c8>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80071d0 <HAL_RCC_OscConfig+0x4c8>)
 8006fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fde:	f7fd f9a9 	bl	8004334 <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe6:	f7fd f9a5 	bl	8004334 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b64      	cmp	r3, #100	@ 0x64
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e103      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff8:	4b75      	ldr	r3, [pc, #468]	@ (80071d0 <HAL_RCC_OscConfig+0x4c8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0f0      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d106      	bne.n	800701a <HAL_RCC_OscConfig+0x312>
 800700c:	4b6f      	ldr	r3, [pc, #444]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	4a6e      	ldr	r2, [pc, #440]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007012:	f043 0301 	orr.w	r3, r3, #1
 8007016:	6213      	str	r3, [r2, #32]
 8007018:	e02d      	b.n	8007076 <HAL_RCC_OscConfig+0x36e>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10c      	bne.n	800703c <HAL_RCC_OscConfig+0x334>
 8007022:	4b6a      	ldr	r3, [pc, #424]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	4a69      	ldr	r2, [pc, #420]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007028:	f023 0301 	bic.w	r3, r3, #1
 800702c:	6213      	str	r3, [r2, #32]
 800702e:	4b67      	ldr	r3, [pc, #412]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	4a66      	ldr	r2, [pc, #408]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007034:	f023 0304 	bic.w	r3, r3, #4
 8007038:	6213      	str	r3, [r2, #32]
 800703a:	e01c      	b.n	8007076 <HAL_RCC_OscConfig+0x36e>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	2b05      	cmp	r3, #5
 8007042:	d10c      	bne.n	800705e <HAL_RCC_OscConfig+0x356>
 8007044:	4b61      	ldr	r3, [pc, #388]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	4a60      	ldr	r2, [pc, #384]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 800704a:	f043 0304 	orr.w	r3, r3, #4
 800704e:	6213      	str	r3, [r2, #32]
 8007050:	4b5e      	ldr	r3, [pc, #376]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	4a5d      	ldr	r2, [pc, #372]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007056:	f043 0301 	orr.w	r3, r3, #1
 800705a:	6213      	str	r3, [r2, #32]
 800705c:	e00b      	b.n	8007076 <HAL_RCC_OscConfig+0x36e>
 800705e:	4b5b      	ldr	r3, [pc, #364]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	4a5a      	ldr	r2, [pc, #360]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007064:	f023 0301 	bic.w	r3, r3, #1
 8007068:	6213      	str	r3, [r2, #32]
 800706a:	4b58      	ldr	r3, [pc, #352]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	4a57      	ldr	r2, [pc, #348]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007070:	f023 0304 	bic.w	r3, r3, #4
 8007074:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d015      	beq.n	80070aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800707e:	f7fd f959 	bl	8004334 <HAL_GetTick>
 8007082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007084:	e00a      	b.n	800709c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007086:	f7fd f955 	bl	8004334 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007094:	4293      	cmp	r3, r2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e0b1      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800709c:	4b4b      	ldr	r3, [pc, #300]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0ee      	beq.n	8007086 <HAL_RCC_OscConfig+0x37e>
 80070a8:	e014      	b.n	80070d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070aa:	f7fd f943 	bl	8004334 <HAL_GetTick>
 80070ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070b0:	e00a      	b.n	80070c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070b2:	f7fd f93f 	bl	8004334 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d901      	bls.n	80070c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e09b      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070c8:	4b40      	ldr	r3, [pc, #256]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1ee      	bne.n	80070b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d105      	bne.n	80070e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070da:	4b3c      	ldr	r3, [pc, #240]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	4a3b      	ldr	r2, [pc, #236]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 80070e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 8087 	beq.w	80071fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070f0:	4b36      	ldr	r3, [pc, #216]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f003 030c 	and.w	r3, r3, #12
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d061      	beq.n	80071c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d146      	bne.n	8007192 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007104:	4b33      	ldr	r3, [pc, #204]	@ (80071d4 <HAL_RCC_OscConfig+0x4cc>)
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800710a:	f7fd f913 	bl	8004334 <HAL_GetTick>
 800710e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007110:	e008      	b.n	8007124 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007112:	f7fd f90f 	bl	8004334 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e06d      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007124:	4b29      	ldr	r3, [pc, #164]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1f0      	bne.n	8007112 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007138:	d108      	bne.n	800714c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800713a:	4b24      	ldr	r3, [pc, #144]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	4921      	ldr	r1, [pc, #132]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007148:	4313      	orrs	r3, r2
 800714a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800714c:	4b1f      	ldr	r3, [pc, #124]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a19      	ldr	r1, [r3, #32]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715c:	430b      	orrs	r3, r1
 800715e:	491b      	ldr	r1, [pc, #108]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007160:	4313      	orrs	r3, r2
 8007162:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007164:	4b1b      	ldr	r3, [pc, #108]	@ (80071d4 <HAL_RCC_OscConfig+0x4cc>)
 8007166:	2201      	movs	r2, #1
 8007168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800716a:	f7fd f8e3 	bl	8004334 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007172:	f7fd f8df 	bl	8004334 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e03d      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007184:	4b11      	ldr	r3, [pc, #68]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0f0      	beq.n	8007172 <HAL_RCC_OscConfig+0x46a>
 8007190:	e035      	b.n	80071fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007192:	4b10      	ldr	r3, [pc, #64]	@ (80071d4 <HAL_RCC_OscConfig+0x4cc>)
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007198:	f7fd f8cc 	bl	8004334 <HAL_GetTick>
 800719c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800719e:	e008      	b.n	80071b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a0:	f7fd f8c8 	bl	8004334 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e026      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071b2:	4b06      	ldr	r3, [pc, #24]	@ (80071cc <HAL_RCC_OscConfig+0x4c4>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1f0      	bne.n	80071a0 <HAL_RCC_OscConfig+0x498>
 80071be:	e01e      	b.n	80071fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d107      	bne.n	80071d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e019      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
 80071cc:	40021000 	.word	0x40021000
 80071d0:	40007000 	.word	0x40007000
 80071d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80071d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <HAL_RCC_OscConfig+0x500>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d106      	bne.n	80071fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d001      	beq.n	80071fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40021000 	.word	0x40021000

0800720c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e0d0      	b.n	80073c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007220:	4b6a      	ldr	r3, [pc, #424]	@ (80073cc <HAL_RCC_ClockConfig+0x1c0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d910      	bls.n	8007250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800722e:	4b67      	ldr	r3, [pc, #412]	@ (80073cc <HAL_RCC_ClockConfig+0x1c0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f023 0207 	bic.w	r2, r3, #7
 8007236:	4965      	ldr	r1, [pc, #404]	@ (80073cc <HAL_RCC_ClockConfig+0x1c0>)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	4313      	orrs	r3, r2
 800723c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800723e:	4b63      	ldr	r3, [pc, #396]	@ (80073cc <HAL_RCC_ClockConfig+0x1c0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d001      	beq.n	8007250 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e0b8      	b.n	80073c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d020      	beq.n	800729e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007268:	4b59      	ldr	r3, [pc, #356]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	4a58      	ldr	r2, [pc, #352]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 800726e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007272:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007280:	4b53      	ldr	r3, [pc, #332]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	4a52      	ldr	r2, [pc, #328]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007286:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800728a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800728c:	4b50      	ldr	r3, [pc, #320]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	494d      	ldr	r1, [pc, #308]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 800729a:	4313      	orrs	r3, r2
 800729c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d040      	beq.n	800732c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d107      	bne.n	80072c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072b2:	4b47      	ldr	r3, [pc, #284]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d115      	bne.n	80072ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e07f      	b.n	80073c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d107      	bne.n	80072da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ca:	4b41      	ldr	r3, [pc, #260]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e073      	b.n	80073c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072da:	4b3d      	ldr	r3, [pc, #244]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e06b      	b.n	80073c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072ea:	4b39      	ldr	r3, [pc, #228]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f023 0203 	bic.w	r2, r3, #3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	4936      	ldr	r1, [pc, #216]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072fc:	f7fd f81a 	bl	8004334 <HAL_GetTick>
 8007300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007302:	e00a      	b.n	800731a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007304:	f7fd f816 	bl	8004334 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007312:	4293      	cmp	r3, r2
 8007314:	d901      	bls.n	800731a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e053      	b.n	80073c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800731a:	4b2d      	ldr	r3, [pc, #180]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f003 020c 	and.w	r2, r3, #12
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	429a      	cmp	r2, r3
 800732a:	d1eb      	bne.n	8007304 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800732c:	4b27      	ldr	r3, [pc, #156]	@ (80073cc <HAL_RCC_ClockConfig+0x1c0>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d210      	bcs.n	800735c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800733a:	4b24      	ldr	r3, [pc, #144]	@ (80073cc <HAL_RCC_ClockConfig+0x1c0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f023 0207 	bic.w	r2, r3, #7
 8007342:	4922      	ldr	r1, [pc, #136]	@ (80073cc <HAL_RCC_ClockConfig+0x1c0>)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	4313      	orrs	r3, r2
 8007348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800734a:	4b20      	ldr	r3, [pc, #128]	@ (80073cc <HAL_RCC_ClockConfig+0x1c0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	429a      	cmp	r2, r3
 8007356:	d001      	beq.n	800735c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e032      	b.n	80073c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007368:	4b19      	ldr	r3, [pc, #100]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	4916      	ldr	r1, [pc, #88]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007376:	4313      	orrs	r3, r2
 8007378:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0308 	and.w	r3, r3, #8
 8007382:	2b00      	cmp	r3, #0
 8007384:	d009      	beq.n	800739a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007386:	4b12      	ldr	r3, [pc, #72]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	490e      	ldr	r1, [pc, #56]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007396:	4313      	orrs	r3, r2
 8007398:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800739a:	f000 f821 	bl	80073e0 <HAL_RCC_GetSysClockFreq>
 800739e:	4602      	mov	r2, r0
 80073a0:	4b0b      	ldr	r3, [pc, #44]	@ (80073d0 <HAL_RCC_ClockConfig+0x1c4>)
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	091b      	lsrs	r3, r3, #4
 80073a6:	f003 030f 	and.w	r3, r3, #15
 80073aa:	490a      	ldr	r1, [pc, #40]	@ (80073d4 <HAL_RCC_ClockConfig+0x1c8>)
 80073ac:	5ccb      	ldrb	r3, [r1, r3]
 80073ae:	fa22 f303 	lsr.w	r3, r2, r3
 80073b2:	4a09      	ldr	r2, [pc, #36]	@ (80073d8 <HAL_RCC_ClockConfig+0x1cc>)
 80073b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80073b6:	4b09      	ldr	r3, [pc, #36]	@ (80073dc <HAL_RCC_ClockConfig+0x1d0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fc ff78 	bl	80042b0 <HAL_InitTick>

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40022000 	.word	0x40022000
 80073d0:	40021000 	.word	0x40021000
 80073d4:	0800e38c 	.word	0x0800e38c
 80073d8:	20000028 	.word	0x20000028
 80073dc:	2000002c 	.word	0x2000002c

080073e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073e0:	b490      	push	{r4, r7}
 80073e2:	b08a      	sub	sp, #40	@ 0x28
 80073e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80073e6:	4b29      	ldr	r3, [pc, #164]	@ (800748c <HAL_RCC_GetSysClockFreq+0xac>)
 80073e8:	1d3c      	adds	r4, r7, #4
 80073ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80073f0:	f240 2301 	movw	r3, #513	@ 0x201
 80073f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	2300      	movs	r3, #0
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	2300      	movs	r3, #0
 8007400:	627b      	str	r3, [r7, #36]	@ 0x24
 8007402:	2300      	movs	r3, #0
 8007404:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800740a:	4b21      	ldr	r3, [pc, #132]	@ (8007490 <HAL_RCC_GetSysClockFreq+0xb0>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f003 030c 	and.w	r3, r3, #12
 8007416:	2b04      	cmp	r3, #4
 8007418:	d002      	beq.n	8007420 <HAL_RCC_GetSysClockFreq+0x40>
 800741a:	2b08      	cmp	r3, #8
 800741c:	d003      	beq.n	8007426 <HAL_RCC_GetSysClockFreq+0x46>
 800741e:	e02b      	b.n	8007478 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007420:	4b1c      	ldr	r3, [pc, #112]	@ (8007494 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007422:	623b      	str	r3, [r7, #32]
      break;
 8007424:	e02b      	b.n	800747e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	0c9b      	lsrs	r3, r3, #18
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	3328      	adds	r3, #40	@ 0x28
 8007430:	443b      	add	r3, r7
 8007432:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007436:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d012      	beq.n	8007468 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007442:	4b13      	ldr	r3, [pc, #76]	@ (8007490 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	0c5b      	lsrs	r3, r3, #17
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	3328      	adds	r3, #40	@ 0x28
 800744e:	443b      	add	r3, r7
 8007450:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007454:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	4a0e      	ldr	r2, [pc, #56]	@ (8007494 <HAL_RCC_GetSysClockFreq+0xb4>)
 800745a:	fb03 f202 	mul.w	r2, r3, r2
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	fbb2 f3f3 	udiv	r3, r2, r3
 8007464:	627b      	str	r3, [r7, #36]	@ 0x24
 8007466:	e004      	b.n	8007472 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	4a0b      	ldr	r2, [pc, #44]	@ (8007498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800746c:	fb02 f303 	mul.w	r3, r2, r3
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	623b      	str	r3, [r7, #32]
      break;
 8007476:	e002      	b.n	800747e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007478:	4b06      	ldr	r3, [pc, #24]	@ (8007494 <HAL_RCC_GetSysClockFreq+0xb4>)
 800747a:	623b      	str	r3, [r7, #32]
      break;
 800747c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800747e:	6a3b      	ldr	r3, [r7, #32]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3728      	adds	r7, #40	@ 0x28
 8007484:	46bd      	mov	sp, r7
 8007486:	bc90      	pop	{r4, r7}
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	0800e324 	.word	0x0800e324
 8007490:	40021000 	.word	0x40021000
 8007494:	007a1200 	.word	0x007a1200
 8007498:	003d0900 	.word	0x003d0900

0800749c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074a0:	4b02      	ldr	r3, [pc, #8]	@ (80074ac <HAL_RCC_GetHCLKFreq+0x10>)
 80074a2:	681b      	ldr	r3, [r3, #0]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bc80      	pop	{r7}
 80074aa:	4770      	bx	lr
 80074ac:	20000028 	.word	0x20000028

080074b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074b4:	f7ff fff2 	bl	800749c <HAL_RCC_GetHCLKFreq>
 80074b8:	4602      	mov	r2, r0
 80074ba:	4b05      	ldr	r3, [pc, #20]	@ (80074d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	0a1b      	lsrs	r3, r3, #8
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	4903      	ldr	r1, [pc, #12]	@ (80074d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074c6:	5ccb      	ldrb	r3, [r1, r3]
 80074c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	40021000 	.word	0x40021000
 80074d4:	0800e39c 	.word	0x0800e39c

080074d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074dc:	f7ff ffde 	bl	800749c <HAL_RCC_GetHCLKFreq>
 80074e0:	4602      	mov	r2, r0
 80074e2:	4b05      	ldr	r3, [pc, #20]	@ (80074f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	0adb      	lsrs	r3, r3, #11
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	4903      	ldr	r1, [pc, #12]	@ (80074fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80074ee:	5ccb      	ldrb	r3, [r1, r3]
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40021000 	.word	0x40021000
 80074fc:	0800e39c 	.word	0x0800e39c

08007500 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007508:	4b0a      	ldr	r3, [pc, #40]	@ (8007534 <RCC_Delay+0x34>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a0a      	ldr	r2, [pc, #40]	@ (8007538 <RCC_Delay+0x38>)
 800750e:	fba2 2303 	umull	r2, r3, r2, r3
 8007512:	0a5b      	lsrs	r3, r3, #9
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	fb02 f303 	mul.w	r3, r2, r3
 800751a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800751c:	bf00      	nop
  }
  while (Delay --);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	1e5a      	subs	r2, r3, #1
 8007522:	60fa      	str	r2, [r7, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f9      	bne.n	800751c <RCC_Delay+0x1c>
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	bc80      	pop	{r7}
 8007532:	4770      	bx	lr
 8007534:	20000028 	.word	0x20000028
 8007538:	10624dd3 	.word	0x10624dd3

0800753c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	2300      	movs	r3, #0
 800754a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d07d      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007558:	2300      	movs	r3, #0
 800755a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800755c:	4b4f      	ldr	r3, [pc, #316]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10d      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007568:	4b4c      	ldr	r3, [pc, #304]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	4a4b      	ldr	r2, [pc, #300]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800756e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007572:	61d3      	str	r3, [r2, #28]
 8007574:	4b49      	ldr	r3, [pc, #292]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800757c:	60bb      	str	r3, [r7, #8]
 800757e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007580:	2301      	movs	r3, #1
 8007582:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007584:	4b46      	ldr	r3, [pc, #280]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800758c:	2b00      	cmp	r3, #0
 800758e:	d118      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007590:	4b43      	ldr	r3, [pc, #268]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a42      	ldr	r2, [pc, #264]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800759a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800759c:	f7fc feca 	bl	8004334 <HAL_GetTick>
 80075a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075a2:	e008      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a4:	f7fc fec6 	bl	8004334 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b64      	cmp	r3, #100	@ 0x64
 80075b0:	d901      	bls.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e06d      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b6:	4b3a      	ldr	r3, [pc, #232]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0f0      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075c2:	4b36      	ldr	r3, [pc, #216]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d02e      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d027      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075e0:	4b2e      	ldr	r3, [pc, #184]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075ea:	4b2e      	ldr	r3, [pc, #184]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075ec:	2201      	movs	r2, #1
 80075ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075f0:	4b2c      	ldr	r3, [pc, #176]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80075f6:	4a29      	ldr	r2, [pc, #164]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d014      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007606:	f7fc fe95 	bl	8004334 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800760c:	e00a      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800760e:	f7fc fe91 	bl	8004334 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800761c:	4293      	cmp	r3, r2
 800761e:	d901      	bls.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e036      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007624:	4b1d      	ldr	r3, [pc, #116]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0ee      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007630:	4b1a      	ldr	r3, [pc, #104]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	4917      	ldr	r1, [pc, #92]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800763e:	4313      	orrs	r3, r2
 8007640:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d105      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007648:	4b14      	ldr	r3, [pc, #80]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	4a13      	ldr	r2, [pc, #76]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800764e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007652:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007660:	4b0e      	ldr	r3, [pc, #56]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	490b      	ldr	r1, [pc, #44]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800766e:	4313      	orrs	r3, r2
 8007670:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	2b00      	cmp	r3, #0
 800767c:	d008      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800767e:	4b07      	ldr	r3, [pc, #28]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	4904      	ldr	r1, [pc, #16]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800768c:	4313      	orrs	r3, r2
 800768e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	40021000 	.word	0x40021000
 80076a0:	40007000 	.word	0x40007000
 80076a4:	42420440 	.word	0x42420440

080076a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e076      	b.n	80077a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d108      	bne.n	80076d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076ca:	d009      	beq.n	80076e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	61da      	str	r2, [r3, #28]
 80076d2:	e005      	b.n	80076e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7fc fc50 	bl	8003fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	431a      	orrs	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800775a:	431a      	orrs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007764:	ea42 0103 	orr.w	r1, r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	0c1a      	lsrs	r2, r3, #16
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f002 0204 	and.w	r2, r2, #4
 8007786:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69da      	ldr	r2, [r3, #28]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007796:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08c      	sub	sp, #48	@ 0x30
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077be:	2301      	movs	r3, #1
 80077c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_SPI_TransmitReceive+0x26>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e18a      	b.n	8007aec <HAL_SPI_TransmitReceive+0x33c>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077de:	f7fc fda9 	bl	8004334 <HAL_GetTick>
 80077e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077f4:	887b      	ldrh	r3, [r7, #2]
 80077f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d00f      	beq.n	8007820 <HAL_SPI_TransmitReceive+0x70>
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007806:	d107      	bne.n	8007818 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d103      	bne.n	8007818 <HAL_SPI_TransmitReceive+0x68>
 8007810:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007814:	2b04      	cmp	r3, #4
 8007816:	d003      	beq.n	8007820 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007818:	2302      	movs	r3, #2
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800781e:	e15b      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d005      	beq.n	8007832 <HAL_SPI_TransmitReceive+0x82>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_SPI_TransmitReceive+0x82>
 800782c:	887b      	ldrh	r3, [r7, #2]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007838:	e14e      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b04      	cmp	r3, #4
 8007844:	d003      	beq.n	800784e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2205      	movs	r2, #5
 800784a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	887a      	ldrh	r2, [r7, #2]
 800785e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	887a      	ldrh	r2, [r7, #2]
 8007864:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	887a      	ldrh	r2, [r7, #2]
 8007870:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	887a      	ldrh	r2, [r7, #2]
 8007876:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800788e:	2b40      	cmp	r3, #64	@ 0x40
 8007890:	d007      	beq.n	80078a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078aa:	d178      	bne.n	800799e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <HAL_SPI_TransmitReceive+0x10a>
 80078b4:	8b7b      	ldrh	r3, [r7, #26]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d166      	bne.n	8007988 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078be:	881a      	ldrh	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ca:	1c9a      	adds	r2, r3, #2
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	3b01      	subs	r3, #1
 80078d8:	b29a      	uxth	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078de:	e053      	b.n	8007988 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d11b      	bne.n	8007926 <HAL_SPI_TransmitReceive+0x176>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d016      	beq.n	8007926 <HAL_SPI_TransmitReceive+0x176>
 80078f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d113      	bne.n	8007926 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007902:	881a      	ldrh	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790e:	1c9a      	adds	r2, r3, #2
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	2b01      	cmp	r3, #1
 8007932:	d119      	bne.n	8007968 <HAL_SPI_TransmitReceive+0x1b8>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d014      	beq.n	8007968 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007948:	b292      	uxth	r2, r2
 800794a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007950:	1c9a      	adds	r2, r3, #2
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007964:	2301      	movs	r3, #1
 8007966:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007968:	f7fc fce4 	bl	8004334 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007974:	429a      	cmp	r2, r3
 8007976:	d807      	bhi.n	8007988 <HAL_SPI_TransmitReceive+0x1d8>
 8007978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d003      	beq.n	8007988 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007986:	e0a7      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1a6      	bne.n	80078e0 <HAL_SPI_TransmitReceive+0x130>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1a1      	bne.n	80078e0 <HAL_SPI_TransmitReceive+0x130>
 800799c:	e07c      	b.n	8007a98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <HAL_SPI_TransmitReceive+0x1fc>
 80079a6:	8b7b      	ldrh	r3, [r7, #26]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d16b      	bne.n	8007a84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	330c      	adds	r3, #12
 80079b6:	7812      	ldrb	r2, [r2, #0]
 80079b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079d2:	e057      	b.n	8007a84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d11c      	bne.n	8007a1c <HAL_SPI_TransmitReceive+0x26c>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d017      	beq.n	8007a1c <HAL_SPI_TransmitReceive+0x26c>
 80079ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d114      	bne.n	8007a1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	330c      	adds	r3, #12
 80079fc:	7812      	ldrb	r2, [r2, #0]
 80079fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d119      	bne.n	8007a5e <HAL_SPI_TransmitReceive+0x2ae>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d014      	beq.n	8007a5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a5e:	f7fc fc69 	bl	8004334 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d803      	bhi.n	8007a76 <HAL_SPI_TransmitReceive+0x2c6>
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a74:	d102      	bne.n	8007a7c <HAL_SPI_TransmitReceive+0x2cc>
 8007a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d103      	bne.n	8007a84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007a82:	e029      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1a2      	bne.n	80079d4 <HAL_SPI_TransmitReceive+0x224>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d19d      	bne.n	80079d4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f8b1 	bl	8007c04 <SPI_EndRxTxTransaction>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d006      	beq.n	8007ab6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007ab4:	e010      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10b      	bne.n	8007ad6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007abe:	2300      	movs	r3, #0
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	617b      	str	r3, [r7, #20]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	e000      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007ad6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007ae8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3730      	adds	r7, #48	@ 0x30
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	603b      	str	r3, [r7, #0]
 8007b00:	4613      	mov	r3, r2
 8007b02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b04:	f7fc fc16 	bl	8004334 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0c:	1a9b      	subs	r3, r3, r2
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	4413      	add	r3, r2
 8007b12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b14:	f7fc fc0e 	bl	8004334 <HAL_GetTick>
 8007b18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b1a:	4b39      	ldr	r3, [pc, #228]	@ (8007c00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	015b      	lsls	r3, r3, #5
 8007b20:	0d1b      	lsrs	r3, r3, #20
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	fb02 f303 	mul.w	r3, r2, r3
 8007b28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b2a:	e054      	b.n	8007bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b32:	d050      	beq.n	8007bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b34:	f7fc fbfe 	bl	8004334 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d902      	bls.n	8007b4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d13d      	bne.n	8007bc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007b58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b62:	d111      	bne.n	8007b88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b6c:	d004      	beq.n	8007b78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b76:	d107      	bne.n	8007b88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b90:	d10f      	bne.n	8007bb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e017      	b.n	8007bf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4013      	ands	r3, r2
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	bf0c      	ite	eq
 8007be6:	2301      	moveq	r3, #1
 8007be8:	2300      	movne	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d19b      	bne.n	8007b2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3720      	adds	r7, #32
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000028 	.word	0x20000028

08007c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2200      	movs	r2, #0
 8007c18:	2180      	movs	r1, #128	@ 0x80
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7ff ff6a 	bl	8007af4 <SPI_WaitFlagStateUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d007      	beq.n	8007c36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c2a:	f043 0220 	orr.w	r2, r3, #32
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e000      	b.n	8007c38 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e041      	b.n	8007cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d106      	bne.n	8007c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fc f9e4 	bl	8004034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f000 fa70 	bl	8008164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d001      	beq.n	8007cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e03a      	b.n	8007d6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f042 0201 	orr.w	r2, r2, #1
 8007d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a18      	ldr	r2, [pc, #96]	@ (8007d78 <HAL_TIM_Base_Start_IT+0x98>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d00e      	beq.n	8007d38 <HAL_TIM_Base_Start_IT+0x58>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d22:	d009      	beq.n	8007d38 <HAL_TIM_Base_Start_IT+0x58>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a14      	ldr	r2, [pc, #80]	@ (8007d7c <HAL_TIM_Base_Start_IT+0x9c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d004      	beq.n	8007d38 <HAL_TIM_Base_Start_IT+0x58>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a13      	ldr	r2, [pc, #76]	@ (8007d80 <HAL_TIM_Base_Start_IT+0xa0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d111      	bne.n	8007d5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b06      	cmp	r3, #6
 8007d48:	d010      	beq.n	8007d6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5a:	e007      	b.n	8007d6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr
 8007d78:	40012c00 	.word	0x40012c00
 8007d7c:	40000400 	.word	0x40000400
 8007d80:	40000800 	.word	0x40000800

08007d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d122      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d11b      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0202 	mvn.w	r2, #2
 8007db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f9b1 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007dcc:	e005      	b.n	8007dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f9a4 	bl	800811c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f9b3 	bl	8008140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0304 	and.w	r3, r3, #4
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d122      	bne.n	8007e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d11b      	bne.n	8007e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0204 	mvn.w	r2, #4
 8007e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f987 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007e20:	e005      	b.n	8007e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f97a 	bl	800811c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f989 	bl	8008140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f003 0308 	and.w	r3, r3, #8
 8007e3e:	2b08      	cmp	r3, #8
 8007e40:	d122      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d11b      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f06f 0208 	mvn.w	r2, #8
 8007e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2204      	movs	r2, #4
 8007e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f95d 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007e74:	e005      	b.n	8007e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f950 	bl	800811c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f95f 	bl	8008140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f003 0310 	and.w	r3, r3, #16
 8007e92:	2b10      	cmp	r3, #16
 8007e94:	d122      	bne.n	8007edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f003 0310 	and.w	r3, r3, #16
 8007ea0:	2b10      	cmp	r3, #16
 8007ea2:	d11b      	bne.n	8007edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f06f 0210 	mvn.w	r2, #16
 8007eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f933 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007ec8:	e005      	b.n	8007ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f926 	bl	800811c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f935 	bl	8008140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d10e      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d107      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0201 	mvn.w	r2, #1
 8007f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7f8 ff1c 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f12:	2b80      	cmp	r3, #128	@ 0x80
 8007f14:	d10e      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f20:	2b80      	cmp	r3, #128	@ 0x80
 8007f22:	d107      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa77 	bl	8008422 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f3e:	2b40      	cmp	r3, #64	@ 0x40
 8007f40:	d10e      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4c:	2b40      	cmp	r3, #64	@ 0x40
 8007f4e:	d107      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f8f9 	bl	8008152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0320 	and.w	r3, r3, #32
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d10e      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0320 	and.w	r3, r3, #32
 8007f78:	2b20      	cmp	r3, #32
 8007f7a:	d107      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f06f 0220 	mvn.w	r2, #32
 8007f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa42 	bl	8008410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d101      	bne.n	8007fac <HAL_TIM_ConfigClockSource+0x18>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e0b3      	b.n	8008114 <HAL_TIM_ConfigClockSource+0x180>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fe4:	d03e      	beq.n	8008064 <HAL_TIM_ConfigClockSource+0xd0>
 8007fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fea:	f200 8087 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x168>
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff2:	f000 8085 	beq.w	8008100 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ffa:	d87f      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x168>
 8007ffc:	2b70      	cmp	r3, #112	@ 0x70
 8007ffe:	d01a      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0xa2>
 8008000:	2b70      	cmp	r3, #112	@ 0x70
 8008002:	d87b      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x168>
 8008004:	2b60      	cmp	r3, #96	@ 0x60
 8008006:	d050      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x116>
 8008008:	2b60      	cmp	r3, #96	@ 0x60
 800800a:	d877      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x168>
 800800c:	2b50      	cmp	r3, #80	@ 0x50
 800800e:	d03c      	beq.n	800808a <HAL_TIM_ConfigClockSource+0xf6>
 8008010:	2b50      	cmp	r3, #80	@ 0x50
 8008012:	d873      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x168>
 8008014:	2b40      	cmp	r3, #64	@ 0x40
 8008016:	d058      	beq.n	80080ca <HAL_TIM_ConfigClockSource+0x136>
 8008018:	2b40      	cmp	r3, #64	@ 0x40
 800801a:	d86f      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x168>
 800801c:	2b30      	cmp	r3, #48	@ 0x30
 800801e:	d064      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x156>
 8008020:	2b30      	cmp	r3, #48	@ 0x30
 8008022:	d86b      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x168>
 8008024:	2b20      	cmp	r3, #32
 8008026:	d060      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x156>
 8008028:	2b20      	cmp	r3, #32
 800802a:	d867      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x168>
 800802c:	2b00      	cmp	r3, #0
 800802e:	d05c      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x156>
 8008030:	2b10      	cmp	r3, #16
 8008032:	d05a      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008034:	e062      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	6899      	ldr	r1, [r3, #8]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f000 f966 	bl	8008316 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008058:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	609a      	str	r2, [r3, #8]
      break;
 8008062:	e04e      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6899      	ldr	r1, [r3, #8]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f000 f94f 	bl	8008316 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008086:	609a      	str	r2, [r3, #8]
      break;
 8008088:	e03b      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	6859      	ldr	r1, [r3, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	461a      	mov	r2, r3
 8008098:	f000 f8c6 	bl	8008228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2150      	movs	r1, #80	@ 0x50
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f91d 	bl	80082e2 <TIM_ITRx_SetConfig>
      break;
 80080a8:	e02b      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	6859      	ldr	r1, [r3, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	461a      	mov	r2, r3
 80080b8:	f000 f8e4 	bl	8008284 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2160      	movs	r1, #96	@ 0x60
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f90d 	bl	80082e2 <TIM_ITRx_SetConfig>
      break;
 80080c8:	e01b      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	6859      	ldr	r1, [r3, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f000 f8a6 	bl	8008228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2140      	movs	r1, #64	@ 0x40
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 f8fd 	bl	80082e2 <TIM_ITRx_SetConfig>
      break;
 80080e8:	e00b      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f000 f8f4 	bl	80082e2 <TIM_ITRx_SetConfig>
        break;
 80080fa:	e002      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80080fc:	bf00      	nop
 80080fe:	e000      	b.n	8008102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008100:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr

0800812e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr

08008140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr

08008152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800815a:	bf00      	nop
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	bc80      	pop	{r7}
 8008162:	4770      	bx	lr

08008164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a29      	ldr	r2, [pc, #164]	@ (800821c <TIM_Base_SetConfig+0xb8>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00b      	beq.n	8008194 <TIM_Base_SetConfig+0x30>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008182:	d007      	beq.n	8008194 <TIM_Base_SetConfig+0x30>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a26      	ldr	r2, [pc, #152]	@ (8008220 <TIM_Base_SetConfig+0xbc>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d003      	beq.n	8008194 <TIM_Base_SetConfig+0x30>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a25      	ldr	r2, [pc, #148]	@ (8008224 <TIM_Base_SetConfig+0xc0>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d108      	bne.n	80081a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800819a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a1c      	ldr	r2, [pc, #112]	@ (800821c <TIM_Base_SetConfig+0xb8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00b      	beq.n	80081c6 <TIM_Base_SetConfig+0x62>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081b4:	d007      	beq.n	80081c6 <TIM_Base_SetConfig+0x62>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a19      	ldr	r2, [pc, #100]	@ (8008220 <TIM_Base_SetConfig+0xbc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d003      	beq.n	80081c6 <TIM_Base_SetConfig+0x62>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a18      	ldr	r2, [pc, #96]	@ (8008224 <TIM_Base_SetConfig+0xc0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d108      	bne.n	80081d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a07      	ldr	r2, [pc, #28]	@ (800821c <TIM_Base_SetConfig+0xb8>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d103      	bne.n	800820c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	691a      	ldr	r2, [r3, #16]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	615a      	str	r2, [r3, #20]
}
 8008212:	bf00      	nop
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	bc80      	pop	{r7}
 800821a:	4770      	bx	lr
 800821c:	40012c00 	.word	0x40012c00
 8008220:	40000400 	.word	0x40000400
 8008224:	40000800 	.word	0x40000800

08008228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	f023 0201 	bic.w	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f023 030a 	bic.w	r3, r3, #10
 8008264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	621a      	str	r2, [r3, #32]
}
 800827a:	bf00      	nop
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	bc80      	pop	{r7}
 8008282:	4770      	bx	lr

08008284 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	f023 0210 	bic.w	r2, r3, #16
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	031b      	lsls	r3, r3, #12
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	011b      	lsls	r3, r3, #4
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	621a      	str	r2, [r3, #32]
}
 80082d8:	bf00      	nop
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b085      	sub	sp, #20
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	4313      	orrs	r3, r2
 8008300:	f043 0307 	orr.w	r3, r3, #7
 8008304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	609a      	str	r2, [r3, #8]
}
 800830c:	bf00      	nop
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr

08008316 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008316:	b480      	push	{r7}
 8008318:	b087      	sub	sp, #28
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	607a      	str	r2, [r7, #4]
 8008322:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008330:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	021a      	lsls	r2, r3, #8
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	431a      	orrs	r2, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	4313      	orrs	r3, r2
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	609a      	str	r2, [r3, #8]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	bc80      	pop	{r7}
 8008352:	4770      	bx	lr

08008354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008368:	2302      	movs	r3, #2
 800836a:	e046      	b.n	80083fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	4313      	orrs	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a16      	ldr	r2, [pc, #88]	@ (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00e      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b8:	d009      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a12      	ldr	r2, [pc, #72]	@ (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d004      	beq.n	80083ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a10      	ldr	r2, [pc, #64]	@ (800840c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d10c      	bne.n	80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	4313      	orrs	r3, r2
 80083de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	bc80      	pop	{r7}
 8008402:	4770      	bx	lr
 8008404:	40012c00 	.word	0x40012c00
 8008408:	40000400 	.word	0x40000400
 800840c:	40000800 	.word	0x40000800

08008410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr

08008422 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	bc80      	pop	{r7}
 8008432:	4770      	bx	lr

08008434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e03f      	b.n	80084c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d106      	bne.n	8008460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7fb fe0e 	bl	800407c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2224      	movs	r2, #36	@ 0x24
 8008464:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f9a3 	bl	80087c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800848c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695a      	ldr	r2, [r3, #20]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800849c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2220      	movs	r2, #32
 80084c0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b08a      	sub	sp, #40	@ 0x28
 80084d2:	af02      	add	r7, sp, #8
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	603b      	str	r3, [r7, #0]
 80084da:	4613      	mov	r3, r2
 80084dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b20      	cmp	r3, #32
 80084ec:	d17c      	bne.n	80085e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <HAL_UART_Transmit+0x2c>
 80084f4:	88fb      	ldrh	r3, [r7, #6]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e075      	b.n	80085ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008504:	2b01      	cmp	r3, #1
 8008506:	d101      	bne.n	800850c <HAL_UART_Transmit+0x3e>
 8008508:	2302      	movs	r3, #2
 800850a:	e06e      	b.n	80085ea <HAL_UART_Transmit+0x11c>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2221      	movs	r2, #33	@ 0x21
 800851e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008522:	f7fb ff07 	bl	8004334 <HAL_GetTick>
 8008526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	88fa      	ldrh	r2, [r7, #6]
 800852c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	88fa      	ldrh	r2, [r7, #6]
 8008532:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800853c:	d108      	bne.n	8008550 <HAL_UART_Transmit+0x82>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d104      	bne.n	8008550 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008546:	2300      	movs	r3, #0
 8008548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	61bb      	str	r3, [r7, #24]
 800854e:	e003      	b.n	8008558 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008554:	2300      	movs	r3, #0
 8008556:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8008560:	e02a      	b.n	80085b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2200      	movs	r2, #0
 800856a:	2180      	movs	r1, #128	@ 0x80
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f000 f8df 	bl	8008730 <UART_WaitOnFlagUntilTimeout>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e036      	b.n	80085ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10b      	bne.n	800859a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008590:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	3302      	adds	r3, #2
 8008596:	61bb      	str	r3, [r7, #24]
 8008598:	e007      	b.n	80085aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	781a      	ldrb	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	3301      	adds	r3, #1
 80085a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1cf      	bne.n	8008562 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2200      	movs	r2, #0
 80085ca:	2140      	movs	r1, #64	@ 0x40
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f8af 	bl	8008730 <UART_WaitOnFlagUntilTimeout>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e006      	b.n	80085ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2220      	movs	r2, #32
 80085e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	e000      	b.n	80085ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085e8:	2302      	movs	r3, #2
  }
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b08a      	sub	sp, #40	@ 0x28
 80085f6:	af02      	add	r7, sp, #8
 80085f8:	60f8      	str	r0, [r7, #12]
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	603b      	str	r3, [r7, #0]
 80085fe:	4613      	mov	r3, r2
 8008600:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b20      	cmp	r3, #32
 8008610:	f040 8089 	bne.w	8008726 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <HAL_UART_Receive+0x2e>
 800861a:	88fb      	ldrh	r3, [r7, #6]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e081      	b.n	8008728 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_UART_Receive+0x40>
 800862e:	2302      	movs	r3, #2
 8008630:	e07a      	b.n	8008728 <HAL_UART_Receive+0x136>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2222      	movs	r2, #34	@ 0x22
 8008644:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008648:	f7fb fe74 	bl	8004334 <HAL_GetTick>
 800864c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	88fa      	ldrh	r2, [r7, #6]
 8008652:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	88fa      	ldrh	r2, [r7, #6]
 8008658:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008662:	d108      	bne.n	8008676 <HAL_UART_Receive+0x84>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d104      	bne.n	8008676 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800866c:	2300      	movs	r3, #0
 800866e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	61bb      	str	r3, [r7, #24]
 8008674:	e003      	b.n	800867e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800867a:	2300      	movs	r3, #0
 800867c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008686:	e043      	b.n	8008710 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2200      	movs	r2, #0
 8008690:	2120      	movs	r1, #32
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 f84c 	bl	8008730 <UART_WaitOnFlagUntilTimeout>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e042      	b.n	8008728 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10c      	bne.n	80086c2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	3302      	adds	r3, #2
 80086be:	61bb      	str	r3, [r7, #24]
 80086c0:	e01f      	b.n	8008702 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ca:	d007      	beq.n	80086dc <HAL_UART_Receive+0xea>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10a      	bne.n	80086ea <HAL_UART_Receive+0xf8>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d106      	bne.n	80086ea <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	e008      	b.n	80086fc <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	3301      	adds	r3, #1
 8008700:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008706:	b29b      	uxth	r3, r3
 8008708:	3b01      	subs	r3, #1
 800870a:	b29a      	uxth	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1b6      	bne.n	8008688 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2220      	movs	r2, #32
 800871e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    return HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	e000      	b.n	8008728 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008726:	2302      	movs	r3, #2
  }
}
 8008728:	4618      	mov	r0, r3
 800872a:	3720      	adds	r7, #32
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	4613      	mov	r3, r2
 800873e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008740:	e02c      	b.n	800879c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008748:	d028      	beq.n	800879c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d007      	beq.n	8008760 <UART_WaitOnFlagUntilTimeout+0x30>
 8008750:	f7fb fdf0 	bl	8004334 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	429a      	cmp	r2, r3
 800875e:	d21d      	bcs.n	800879c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800876e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695a      	ldr	r2, [r3, #20]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0201 	bic.w	r2, r2, #1
 800877e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2220      	movs	r2, #32
 8008784:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e00f      	b.n	80087bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	4013      	ands	r3, r2
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	bf0c      	ite	eq
 80087ac:	2301      	moveq	r3, #1
 80087ae:	2300      	movne	r3, #0
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	461a      	mov	r2, r3
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d0c3      	beq.n	8008742 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68da      	ldr	r2, [r3, #12]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689a      	ldr	r2, [r3, #8]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	431a      	orrs	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80087fe:	f023 030c 	bic.w	r3, r3, #12
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6812      	ldr	r2, [r2, #0]
 8008806:	68b9      	ldr	r1, [r7, #8]
 8008808:	430b      	orrs	r3, r1
 800880a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	699a      	ldr	r2, [r3, #24]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	430a      	orrs	r2, r1
 8008820:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a2c      	ldr	r2, [pc, #176]	@ (80088d8 <UART_SetConfig+0x114>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d103      	bne.n	8008834 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800882c:	f7fe fe54 	bl	80074d8 <HAL_RCC_GetPCLK2Freq>
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	e002      	b.n	800883a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008834:	f7fe fe3c 	bl	80074b0 <HAL_RCC_GetPCLK1Freq>
 8008838:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009a      	lsls	r2, r3, #2
 8008844:	441a      	add	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008850:	4a22      	ldr	r2, [pc, #136]	@ (80088dc <UART_SetConfig+0x118>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	095b      	lsrs	r3, r3, #5
 8008858:	0119      	lsls	r1, r3, #4
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	009a      	lsls	r2, r3, #2
 8008864:	441a      	add	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008870:	4b1a      	ldr	r3, [pc, #104]	@ (80088dc <UART_SetConfig+0x118>)
 8008872:	fba3 0302 	umull	r0, r3, r3, r2
 8008876:	095b      	lsrs	r3, r3, #5
 8008878:	2064      	movs	r0, #100	@ 0x64
 800887a:	fb00 f303 	mul.w	r3, r0, r3
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	011b      	lsls	r3, r3, #4
 8008882:	3332      	adds	r3, #50	@ 0x32
 8008884:	4a15      	ldr	r2, [pc, #84]	@ (80088dc <UART_SetConfig+0x118>)
 8008886:	fba2 2303 	umull	r2, r3, r2, r3
 800888a:	095b      	lsrs	r3, r3, #5
 800888c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008890:	4419      	add	r1, r3
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4613      	mov	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	009a      	lsls	r2, r3, #2
 800889c:	441a      	add	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80088a8:	4b0c      	ldr	r3, [pc, #48]	@ (80088dc <UART_SetConfig+0x118>)
 80088aa:	fba3 0302 	umull	r0, r3, r3, r2
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	2064      	movs	r0, #100	@ 0x64
 80088b2:	fb00 f303 	mul.w	r3, r0, r3
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	3332      	adds	r3, #50	@ 0x32
 80088bc:	4a07      	ldr	r2, [pc, #28]	@ (80088dc <UART_SetConfig+0x118>)
 80088be:	fba2 2303 	umull	r2, r3, r2, r3
 80088c2:	095b      	lsrs	r3, r3, #5
 80088c4:	f003 020f 	and.w	r2, r3, #15
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	440a      	add	r2, r1
 80088ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80088d0:	bf00      	nop
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	40013800 	.word	0x40013800
 80088dc:	51eb851f 	.word	0x51eb851f

080088e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088e0:	b084      	sub	sp, #16
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	f107 0014 	add.w	r0, r7, #20
 80088ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bc80      	pop	{r7}
 80088fc:	b004      	add	sp, #16
 80088fe:	4770      	bx	lr

08008900 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008910:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008914:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	b29a      	uxth	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	bc80      	pop	{r7}
 800892a:	4770      	bx	lr

0800892c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008934:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008938:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008940:	b29a      	uxth	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	b29b      	uxth	r3, r3
 8008946:	43db      	mvns	r3, r3
 8008948:	b29b      	uxth	r3, r3
 800894a:	4013      	ands	r3, r2
 800894c:	b29a      	uxth	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr

08008960 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	bc80      	pop	{r7}
 8008976:	4770      	bx	lr

08008978 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008978:	b084      	sub	sp, #16
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	f107 0014 	add.w	r0, r7, #20
 8008986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bc80      	pop	{r7}
 80089b4:	b004      	add	sp, #16
 80089b6:	4770      	bx	lr

080089b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b09b      	sub	sp, #108	@ 0x6c
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80089da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089de:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	78db      	ldrb	r3, [r3, #3]
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d81f      	bhi.n	8008a2a <USB_ActivateEndpoint+0x72>
 80089ea:	a201      	add	r2, pc, #4	@ (adr r2, 80089f0 <USB_ActivateEndpoint+0x38>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a01 	.word	0x08008a01
 80089f4:	08008a1d 	.word	0x08008a1d
 80089f8:	08008a33 	.word	0x08008a33
 80089fc:	08008a0f 	.word	0x08008a0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008a04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a08:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008a0c:	e012      	b.n	8008a34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008a12:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008a16:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008a1a:	e00b      	b.n	8008a34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008a1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008a20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008a24:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
      break;
 8008a28:	e004      	b.n	8008a34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      break;
 8008a30:	e000      	b.n	8008a34 <USB_ActivateEndpoint+0x7c>
      break;
 8008a32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	441a      	add	r2, r3
 8008a3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	7812      	ldrb	r2, [r2, #0]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	441a      	add	r2, r3
 8008a82:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008a86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	7b1b      	ldrb	r3, [r3, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f040 8149 	bne.w	8008d36 <USB_ActivateEndpoint+0x37e>
  {
    if (ep->is_in != 0U)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 8084 	beq.w	8008bb6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	617b      	str	r3, [r7, #20]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	461a      	mov	r2, r3
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	4413      	add	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	011a      	lsls	r2, r3, #4
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ad0:	613b      	str	r3, [r7, #16]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	88db      	ldrh	r3, [r3, #6]
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	81fb      	strh	r3, [r7, #14]
 8008af0:	89fb      	ldrh	r3, [r7, #14]
 8008af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d01b      	beq.n	8008b32 <USB_ActivateEndpoint+0x17a>
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b10:	81bb      	strh	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	441a      	add	r2, r3
 8008b1c:	89bb      	ldrh	r3, [r7, #12]
 8008b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	78db      	ldrb	r3, [r3, #3]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d020      	beq.n	8008b7c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b50:	813b      	strh	r3, [r7, #8]
 8008b52:	893b      	ldrh	r3, [r7, #8]
 8008b54:	f083 0320 	eor.w	r3, r3, #32
 8008b58:	813b      	strh	r3, [r7, #8]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	441a      	add	r2, r3
 8008b64:	893b      	ldrh	r3, [r7, #8]
 8008b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	8013      	strh	r3, [r2, #0]
 8008b7a:	e27f      	b.n	800907c <USB_ActivateEndpoint+0x6c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b92:	817b      	strh	r3, [r7, #10]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	441a      	add	r2, r3
 8008b9e:	897b      	ldrh	r3, [r7, #10]
 8008ba0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ba4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	8013      	strh	r3, [r2, #0]
 8008bb4:	e262      	b.n	800907c <USB_ActivateEndpoint+0x6c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc6:	4413      	add	r3, r2
 8008bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	011a      	lsls	r2, r3, #4
 8008bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	88db      	ldrh	r3, [r3, #6]
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be8:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfa:	4413      	add	r3, r2
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	011a      	lsls	r2, r3, #4
 8008c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c06:	4413      	add	r3, r2
 8008c08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008c0c:	623b      	str	r3, [r7, #32]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d112      	bne.n	8008c3c <USB_ActivateEndpoint+0x284>
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	6a3b      	ldr	r3, [r7, #32]
 8008c24:	801a      	strh	r2, [r3, #0]
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	801a      	strh	r2, [r3, #0]
 8008c3a:	e02f      	b.n	8008c9c <USB_ActivateEndpoint+0x2e4>
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c42:	d813      	bhi.n	8008c6c <USB_ActivateEndpoint+0x2b4>
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	085b      	lsrs	r3, r3, #1
 8008c4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <USB_ActivateEndpoint+0x2a6>
 8008c58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	029b      	lsls	r3, r3, #10
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	801a      	strh	r2, [r3, #0]
 8008c6a:	e017      	b.n	8008c9c <USB_ActivateEndpoint+0x2e4>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	095b      	lsrs	r3, r3, #5
 8008c72:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	f003 031f 	and.w	r3, r3, #31
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d102      	bne.n	8008c86 <USB_ActivateEndpoint+0x2ce>
 8008c80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c82:	3b01      	subs	r3, #1
 8008c84:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	029b      	lsls	r3, r3, #10
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	83fb      	strh	r3, [r7, #30]
 8008caa:	8bfb      	ldrh	r3, [r7, #30]
 8008cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d01b      	beq.n	8008cec <USB_ActivateEndpoint+0x334>
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cca:	83bb      	strh	r3, [r7, #28]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	441a      	add	r2, r3
 8008cd6:	8bbb      	ldrh	r3, [r7, #28]
 8008cd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ce0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d02:	837b      	strh	r3, [r7, #26]
 8008d04:	8b7b      	ldrh	r3, [r7, #26]
 8008d06:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d0a:	837b      	strh	r3, [r7, #26]
 8008d0c:	8b7b      	ldrh	r3, [r7, #26]
 8008d0e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d12:	837b      	strh	r3, [r7, #26]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	441a      	add	r2, r3
 8008d1e:	8b7b      	ldrh	r3, [r7, #26]
 8008d20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	8013      	strh	r3, [r2, #0]
 8008d34:	e1a2      	b.n	800907c <USB_ActivateEndpoint+0x6c4>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d4c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	441a      	add	r2, r3
 8008d5a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008d5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d66:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d82:	4413      	add	r3, r2
 8008d84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	011a      	lsls	r2, r3, #4
 8008d8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d94:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	891b      	ldrh	r3, [r3, #8]
 8008d9a:	085b      	lsrs	r3, r3, #1
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008da4:	801a      	strh	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008db6:	4413      	add	r3, r2
 8008db8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	011a      	lsls	r2, r3, #4
 8008dc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	895b      	ldrh	r3, [r3, #10]
 8008dce:	085b      	lsrs	r3, r3, #1
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dd8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	785b      	ldrb	r3, [r3, #1]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f040 8091 	bne.w	8008f06 <USB_ActivateEndpoint+0x54e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008df2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d01b      	beq.n	8008e34 <USB_ActivateEndpoint+0x47c>
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e12:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	441a      	add	r2, r3
 8008e1e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008e42:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d01b      	beq.n	8008e84 <USB_ActivateEndpoint+0x4cc>
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e62:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	441a      	add	r2, r3
 8008e6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e9a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008e9c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008e9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ea2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008ea4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008ea6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008eaa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	441a      	add	r2, r3
 8008eb6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008eb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ebc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ec0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ee2:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	441a      	add	r2, r3
 8008eee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	8013      	strh	r3, [r2, #0]
 8008f04:	e0ba      	b.n	800907c <USB_ActivateEndpoint+0x6c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008f16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d01d      	beq.n	8008f5e <USB_ActivateEndpoint+0x5a6>
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f38:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	441a      	add	r2, r3
 8008f46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008f6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01d      	beq.n	8008fb6 <USB_ActivateEndpoint+0x5fe>
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f90:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	441a      	add	r2, r3
 8008f9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	78db      	ldrb	r3, [r3, #3]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d024      	beq.n	8009008 <USB_ActivateEndpoint+0x650>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4413      	add	r3, r2
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fd4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008fd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008fdc:	f083 0320 	eor.w	r3, r3, #32
 8008fe0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	441a      	add	r2, r3
 8008fee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009002:	b29b      	uxth	r3, r3
 8009004:	8013      	strh	r3, [r2, #0]
 8009006:	e01d      	b.n	8009044 <USB_ActivateEndpoint+0x68c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b29b      	uxth	r3, r3
 8009016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800901a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800901e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	441a      	add	r2, r3
 800902c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009030:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009034:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800903c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009040:	b29b      	uxth	r3, r3
 8009042:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	b29b      	uxth	r3, r3
 8009052:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800905a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	441a      	add	r2, r3
 8009066:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800906c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009078:	b29b      	uxth	r3, r3
 800907a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800907c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009080:	4618      	mov	r0, r3
 8009082:	376c      	adds	r7, #108	@ 0x6c
 8009084:	46bd      	mov	sp, r7
 8009086:	bc80      	pop	{r7}
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop

0800908c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800908c:	b480      	push	{r7}
 800908e:	b08d      	sub	sp, #52	@ 0x34
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	7b1b      	ldrb	r3, [r3, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f040 808e 	bne.w	80091bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	785b      	ldrb	r3, [r3, #1]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d044      	beq.n	8009132 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	81bb      	strh	r3, [r7, #12]
 80090b6:	89bb      	ldrh	r3, [r7, #12]
 80090b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01b      	beq.n	80090f8 <USB_DeactivateEndpoint+0x6c>
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090d6:	817b      	strh	r3, [r7, #10]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	441a      	add	r2, r3
 80090e2:	897b      	ldrh	r3, [r7, #10]
 80090e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	b29b      	uxth	r3, r3
 8009106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800910a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800910e:	813b      	strh	r3, [r7, #8]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	441a      	add	r2, r3
 800911a:	893b      	ldrh	r3, [r7, #8]
 800911c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009120:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800912c:	b29b      	uxth	r3, r3
 800912e:	8013      	strh	r3, [r2, #0]
 8009130:	e192      	b.n	8009458 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	827b      	strh	r3, [r7, #18]
 8009140:	8a7b      	ldrh	r3, [r7, #18]
 8009142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d01b      	beq.n	8009182 <USB_DeactivateEndpoint+0xf6>
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	b29b      	uxth	r3, r3
 8009158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800915c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009160:	823b      	strh	r3, [r7, #16]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	441a      	add	r2, r3
 800916c:	8a3b      	ldrh	r3, [r7, #16]
 800916e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009176:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800917a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800917e:	b29b      	uxth	r3, r3
 8009180:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	b29b      	uxth	r3, r3
 8009190:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009198:	81fb      	strh	r3, [r7, #14]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	441a      	add	r2, r3
 80091a4:	89fb      	ldrh	r3, [r7, #14]
 80091a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	8013      	strh	r3, [r2, #0]
 80091ba:	e14d      	b.n	8009458 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f040 80a5 	bne.w	8009310 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	843b      	strh	r3, [r7, #32]
 80091d4:	8c3b      	ldrh	r3, [r7, #32]
 80091d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d01b      	beq.n	8009216 <USB_DeactivateEndpoint+0x18a>
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091f4:	83fb      	strh	r3, [r7, #30]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	441a      	add	r2, r3
 8009200:	8bfb      	ldrh	r3, [r7, #30]
 8009202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800920a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800920e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009212:	b29b      	uxth	r3, r3
 8009214:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	83bb      	strh	r3, [r7, #28]
 8009224:	8bbb      	ldrh	r3, [r7, #28]
 8009226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	d01b      	beq.n	8009266 <USB_DeactivateEndpoint+0x1da>
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	b29b      	uxth	r3, r3
 800923c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009244:	837b      	strh	r3, [r7, #26]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	441a      	add	r2, r3
 8009250:	8b7b      	ldrh	r3, [r7, #26]
 8009252:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009256:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800925a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800925e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009262:	b29b      	uxth	r3, r3
 8009264:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800927c:	833b      	strh	r3, [r7, #24]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	441a      	add	r2, r3
 8009288:	8b3b      	ldrh	r3, [r7, #24]
 800928a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800928e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009296:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800929a:	b29b      	uxth	r3, r3
 800929c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092b4:	82fb      	strh	r3, [r7, #22]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	441a      	add	r2, r3
 80092c0:	8afb      	ldrh	r3, [r7, #22]
 80092c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092ec:	82bb      	strh	r3, [r7, #20]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	441a      	add	r2, r3
 80092f8:	8abb      	ldrh	r3, [r7, #20]
 80092fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800930a:	b29b      	uxth	r3, r3
 800930c:	8013      	strh	r3, [r2, #0]
 800930e:	e0a3      	b.n	8009458 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800931e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d01b      	beq.n	8009360 <USB_DeactivateEndpoint+0x2d4>
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	b29b      	uxth	r3, r3
 8009336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800933a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800933e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	441a      	add	r2, r3
 800934a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800934c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009354:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800935c:	b29b      	uxth	r3, r3
 800935e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	881b      	ldrh	r3, [r3, #0]
 800936c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800936e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01b      	beq.n	80093b0 <USB_DeactivateEndpoint+0x324>
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29b      	uxth	r3, r3
 8009386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800938a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800938e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	441a      	add	r2, r3
 800939a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800939c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	b29b      	uxth	r3, r3
 80093be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	441a      	add	r2, r3
 80093d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80093d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80093e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	441a      	add	r2, r3
 800940a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800940c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800941c:	b29b      	uxth	r3, r3
 800941e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	b29b      	uxth	r3, r3
 800942e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009436:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	441a      	add	r2, r3
 8009442:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800944c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009454:	b29b      	uxth	r3, r3
 8009456:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3734      	adds	r7, #52	@ 0x34
 800945e:	46bd      	mov	sp, r7
 8009460:	bc80      	pop	{r7}
 8009462:	4770      	bx	lr

08009464 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b0c4      	sub	sp, #272	@ 0x110
 8009468:	af00      	add	r7, sp, #0
 800946a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800946e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009472:	6018      	str	r0, [r3, #0]
 8009474:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009478:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800947c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800947e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009482:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	785b      	ldrb	r3, [r3, #1]
 800948a:	2b01      	cmp	r3, #1
 800948c:	f040 86ec 	bne.w	800a268 <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009490:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009494:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	699a      	ldr	r2, [r3, #24]
 800949c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d908      	bls.n	80094be <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80094ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80094bc:	e007      	b.n	80094ce <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80094be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80094ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	7b1b      	ldrb	r3, [r3, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d142      	bne.n	8009564 <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80094de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6959      	ldr	r1, [r3, #20]
 80094ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	88da      	ldrh	r2, [r3, #6]
 80094f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009500:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009504:	6800      	ldr	r0, [r0, #0]
 8009506:	f001 fc92 	bl	800ae2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800950a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800950e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	617b      	str	r3, [r7, #20]
 8009516:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800951a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009524:	b29b      	uxth	r3, r3
 8009526:	461a      	mov	r2, r3
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	4413      	add	r3, r2
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009532:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	011a      	lsls	r2, r3, #4
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	4413      	add	r3, r2
 8009540:	f203 4204 	addw	r2, r3, #1028	@ 0x404
 8009544:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009548:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009552:	b29a      	uxth	r2, r3
 8009554:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009558:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	801a      	strh	r2, [r3, #0]
 8009560:	f000 be34 	b.w	800a1cc <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009564:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009568:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	78db      	ldrb	r3, [r3, #3]
 8009570:	2b02      	cmp	r3, #2
 8009572:	f040 843b 	bne.w	8009dec <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800957a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6a1a      	ldr	r2, [r3, #32]
 8009582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009586:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	429a      	cmp	r2, r3
 8009590:	f240 83b8 	bls.w	8009d04 <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009594:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009598:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ba:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80095be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	441a      	add	r2, r3
 80095d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80095dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095e4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80095e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80095f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6a1a      	ldr	r2, [r3, #32]
 80095fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009600:	1ad2      	subs	r2, r2, r3
 8009602:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009606:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800960e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009612:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800961c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	b29b      	uxth	r3, r3
 800962c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 81b4 	beq.w	800999e <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800963a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	637b      	str	r3, [r7, #52]	@ 0x34
 8009642:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009646:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d16d      	bne.n	800972e <USB_EPStartXfer+0x2ca>
 8009652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009656:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800965e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009662:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800966c:	b29b      	uxth	r3, r3
 800966e:	461a      	mov	r2, r3
 8009670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009672:	4413      	add	r3, r2
 8009674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009676:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800967a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	011a      	lsls	r2, r3, #4
 8009684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009686:	4413      	add	r3, r2
 8009688:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800968c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800968e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009692:	2b00      	cmp	r3, #0
 8009694:	d112      	bne.n	80096bc <USB_EPStartXfer+0x258>
 8009696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	b29b      	uxth	r3, r3
 800969c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a4:	801a      	strh	r2, [r3, #0]
 80096a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b8:	801a      	strh	r2, [r3, #0]
 80096ba:	e05d      	b.n	8009778 <USB_EPStartXfer+0x314>
 80096bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80096c2:	d817      	bhi.n	80096f4 <USB_EPStartXfer+0x290>
 80096c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096c8:	085b      	lsrs	r3, r3, #1
 80096ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80096ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d004      	beq.n	80096e4 <USB_EPStartXfer+0x280>
 80096da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096de:	3301      	adds	r3, #1
 80096e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	029b      	lsls	r3, r3, #10
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f0:	801a      	strh	r2, [r3, #0]
 80096f2:	e041      	b.n	8009778 <USB_EPStartXfer+0x314>
 80096f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096f8:	095b      	lsrs	r3, r3, #5
 80096fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80096fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009702:	f003 031f 	and.w	r3, r3, #31
 8009706:	2b00      	cmp	r3, #0
 8009708:	d104      	bne.n	8009714 <USB_EPStartXfer+0x2b0>
 800970a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800970e:	3b01      	subs	r3, #1
 8009710:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009718:	b29b      	uxth	r3, r3
 800971a:	029b      	lsls	r3, r3, #10
 800971c:	b29b      	uxth	r3, r3
 800971e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009726:	b29a      	uxth	r2, r3
 8009728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800972a:	801a      	strh	r2, [r3, #0]
 800972c:	e024      	b.n	8009778 <USB_EPStartXfer+0x314>
 800972e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009732:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	785b      	ldrb	r3, [r3, #1]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d11c      	bne.n	8009778 <USB_EPStartXfer+0x314>
 800973e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009742:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800974c:	b29b      	uxth	r3, r3
 800974e:	461a      	mov	r2, r3
 8009750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009752:	4413      	add	r3, r2
 8009754:	637b      	str	r3, [r7, #52]	@ 0x34
 8009756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800975a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	011a      	lsls	r2, r3, #4
 8009764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009766:	4413      	add	r3, r2
 8009768:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800976c:	633b      	str	r3, [r7, #48]	@ 0x30
 800976e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009772:	b29a      	uxth	r2, r3
 8009774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009776:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009778:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800977c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	895b      	ldrh	r3, [r3, #10]
 8009784:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009788:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800978c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	6959      	ldr	r1, [r3, #20]
 8009794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009798:	b29b      	uxth	r3, r3
 800979a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800979e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80097a2:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 80097a6:	6800      	ldr	r0, [r0, #0]
 80097a8:	f001 fb41 	bl	800ae2e <USB_WritePMA>
            ep->xfer_buff += len;
 80097ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	695a      	ldr	r2, [r3, #20]
 80097b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097bc:	441a      	add	r2, r3
 80097be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80097ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6a1a      	ldr	r2, [r3, #32]
 80097d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d90f      	bls.n	8009806 <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 80097e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6a1a      	ldr	r2, [r3, #32]
 80097f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097f6:	1ad2      	subs	r2, r2, r3
 80097f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	621a      	str	r2, [r3, #32]
 8009804:	e00e      	b.n	8009824 <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009806:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800980a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009816:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800981a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2200      	movs	r2, #0
 8009822:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009824:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009828:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	785b      	ldrb	r3, [r3, #1]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d16d      	bne.n	8009910 <USB_EPStartXfer+0x4ac>
 8009834:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009838:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	61fb      	str	r3, [r7, #28]
 8009840:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009844:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800984e:	b29b      	uxth	r3, r3
 8009850:	461a      	mov	r2, r3
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4413      	add	r3, r2
 8009856:	61fb      	str	r3, [r7, #28]
 8009858:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800985c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	011a      	lsls	r2, r3, #4
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	4413      	add	r3, r2
 800986a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800986e:	61bb      	str	r3, [r7, #24]
 8009870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009874:	2b00      	cmp	r3, #0
 8009876:	d112      	bne.n	800989e <USB_EPStartXfer+0x43a>
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	b29b      	uxth	r3, r3
 800987e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009882:	b29a      	uxth	r2, r3
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	801a      	strh	r2, [r3, #0]
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	b29b      	uxth	r3, r3
 800988e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009896:	b29a      	uxth	r2, r3
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	801a      	strh	r2, [r3, #0]
 800989c:	e063      	b.n	8009966 <USB_EPStartXfer+0x502>
 800989e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80098a4:	d817      	bhi.n	80098d6 <USB_EPStartXfer+0x472>
 80098a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098aa:	085b      	lsrs	r3, r3, #1
 80098ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80098b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d004      	beq.n	80098c6 <USB_EPStartXfer+0x462>
 80098bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80098c0:	3301      	adds	r3, #1
 80098c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80098c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	029b      	lsls	r3, r3, #10
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	801a      	strh	r2, [r3, #0]
 80098d4:	e047      	b.n	8009966 <USB_EPStartXfer+0x502>
 80098d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098da:	095b      	lsrs	r3, r3, #5
 80098dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80098e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098e4:	f003 031f 	and.w	r3, r3, #31
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d104      	bne.n	80098f6 <USB_EPStartXfer+0x492>
 80098ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80098f0:	3b01      	subs	r3, #1
 80098f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80098f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	029b      	lsls	r3, r3, #10
 80098fe:	b29b      	uxth	r3, r3
 8009900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009908:	b29a      	uxth	r2, r3
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	801a      	strh	r2, [r3, #0]
 800990e:	e02a      	b.n	8009966 <USB_EPStartXfer+0x502>
 8009910:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009914:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	785b      	ldrb	r3, [r3, #1]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d122      	bne.n	8009966 <USB_EPStartXfer+0x502>
 8009920:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009924:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	627b      	str	r3, [r7, #36]	@ 0x24
 800992c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009930:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800993a:	b29b      	uxth	r3, r3
 800993c:	461a      	mov	r2, r3
 800993e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009940:	4413      	add	r3, r2
 8009942:	627b      	str	r3, [r7, #36]	@ 0x24
 8009944:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009948:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	011a      	lsls	r2, r3, #4
 8009952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009954:	4413      	add	r3, r2
 8009956:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800995a:	623b      	str	r3, [r7, #32]
 800995c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009960:	b29a      	uxth	r2, r3
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800996a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	891b      	ldrh	r3, [r3, #8]
 8009972:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800997a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6959      	ldr	r1, [r3, #20]
 8009982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009986:	b29b      	uxth	r3, r3
 8009988:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800998c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009990:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009994:	6800      	ldr	r0, [r0, #0]
 8009996:	f001 fa4a 	bl	800ae2e <USB_WritePMA>
 800999a:	f000 bc17 	b.w	800a1cc <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800999e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	785b      	ldrb	r3, [r3, #1]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d16d      	bne.n	8009a8a <USB_EPStartXfer+0x626>
 80099ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	461a      	mov	r2, r3
 80099cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ce:	4413      	add	r3, r2
 80099d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099d6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	011a      	lsls	r2, r3, #4
 80099e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099e2:	4413      	add	r3, r2
 80099e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80099e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d112      	bne.n	8009a18 <USB_EPStartXfer+0x5b4>
 80099f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099f4:	881b      	ldrh	r3, [r3, #0]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a00:	801a      	strh	r2, [r3, #0]
 8009a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a14:	801a      	strh	r2, [r3, #0]
 8009a16:	e063      	b.n	8009ae0 <USB_EPStartXfer+0x67c>
 8009a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a1e:	d817      	bhi.n	8009a50 <USB_EPStartXfer+0x5ec>
 8009a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a24:	085b      	lsrs	r3, r3, #1
 8009a26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d004      	beq.n	8009a40 <USB_EPStartXfer+0x5dc>
 8009a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	029b      	lsls	r3, r3, #10
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a4c:	801a      	strh	r2, [r3, #0]
 8009a4e:	e047      	b.n	8009ae0 <USB_EPStartXfer+0x67c>
 8009a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a54:	095b      	lsrs	r3, r3, #5
 8009a56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a5e:	f003 031f 	and.w	r3, r3, #31
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d104      	bne.n	8009a70 <USB_EPStartXfer+0x60c>
 8009a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	029b      	lsls	r3, r3, #10
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a86:	801a      	strh	r2, [r3, #0]
 8009a88:	e02a      	b.n	8009ae0 <USB_EPStartXfer+0x67c>
 8009a8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a8e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d122      	bne.n	8009ae0 <USB_EPStartXfer+0x67c>
 8009a9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009aa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009aaa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aba:	4413      	add	r3, r2
 8009abc:	657b      	str	r3, [r7, #84]	@ 0x54
 8009abe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ac2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	011a      	lsls	r2, r3, #4
 8009acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ace:	4413      	add	r3, r2
 8009ad0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ad4:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ade:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009ae0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ae4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	891b      	ldrh	r3, [r3, #8]
 8009aec:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009af0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009af4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6959      	ldr	r1, [r3, #20]
 8009afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009b06:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009b0a:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009b0e:	6800      	ldr	r0, [r0, #0]
 8009b10:	f001 f98d 	bl	800ae2e <USB_WritePMA>
            ep->xfer_buff += len;
 8009b14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	695a      	ldr	r2, [r3, #20]
 8009b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b24:	441a      	add	r2, r3
 8009b26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009b32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b36:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6a1a      	ldr	r2, [r3, #32]
 8009b3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b42:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d90f      	bls.n	8009b6e <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 8009b4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6a1a      	ldr	r2, [r3, #32]
 8009b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b64:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	621a      	str	r2, [r3, #32]
 8009b6c:	e00e      	b.n	8009b8c <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8009b6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b72:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
              ep->xfer_len_db = 0U;
 8009b7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	785b      	ldrb	r3, [r3, #1]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d16d      	bne.n	8009c84 <USB_EPStartXfer+0x820>
 8009ba8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bb8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bc8:	4413      	add	r3, r2
 8009bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	011a      	lsls	r2, r3, #4
 8009bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bdc:	4413      	add	r3, r2
 8009bde:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d112      	bne.n	8009c12 <USB_EPStartXfer+0x7ae>
 8009bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfa:	801a      	strh	r2, [r3, #0]
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0e:	801a      	strh	r2, [r3, #0]
 8009c10:	e05d      	b.n	8009cce <USB_EPStartXfer+0x86a>
 8009c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c16:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c18:	d817      	bhi.n	8009c4a <USB_EPStartXfer+0x7e6>
 8009c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c1e:	085b      	lsrs	r3, r3, #1
 8009c20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d004      	beq.n	8009c3a <USB_EPStartXfer+0x7d6>
 8009c30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c34:	3301      	adds	r3, #1
 8009c36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009c3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	029b      	lsls	r3, r3, #10
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c46:	801a      	strh	r2, [r3, #0]
 8009c48:	e041      	b.n	8009cce <USB_EPStartXfer+0x86a>
 8009c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c4e:	095b      	lsrs	r3, r3, #5
 8009c50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c58:	f003 031f 	and.w	r3, r3, #31
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d104      	bne.n	8009c6a <USB_EPStartXfer+0x806>
 8009c60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c64:	3b01      	subs	r3, #1
 8009c66:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009c6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	029b      	lsls	r3, r3, #10
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c80:	801a      	strh	r2, [r3, #0]
 8009c82:	e024      	b.n	8009cce <USB_EPStartXfer+0x86a>
 8009c84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	785b      	ldrb	r3, [r3, #1]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d11c      	bne.n	8009cce <USB_EPStartXfer+0x86a>
 8009c94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c98:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ca8:	4413      	add	r3, r2
 8009caa:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cb0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	011a      	lsls	r2, r3, #4
 8009cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009cc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ccc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009cce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	895b      	ldrh	r3, [r3, #10]
 8009cda:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ce2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6959      	ldr	r1, [r3, #20]
 8009cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009cf4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009cf8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009cfc:	6800      	ldr	r0, [r0, #0]
 8009cfe:	f001 f896 	bl	800ae2e <USB_WritePMA>
 8009d02:	e263      	b.n	800a1cc <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009d04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009d14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d22:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	881b      	ldrh	r3, [r3, #0]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d3a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009d3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	441a      	add	r2, r3
 8009d58:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009d70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d90:	4413      	add	r3, r2
 8009d92:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	011a      	lsls	r2, r3, #4
 8009da2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009da4:	4413      	add	r3, r2
 8009da6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009db4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009db6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	891b      	ldrh	r3, [r3, #8]
 8009dc2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6959      	ldr	r1, [r3, #20]
 8009dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8009ddc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8009de0:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8009de4:	6800      	ldr	r0, [r0, #0]
 8009de6:	f001 f822 	bl	800ae2e <USB_WritePMA>
 8009dea:	e1ef      	b.n	800a1cc <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009dec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009df0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dfa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	881b      	ldrh	r3, [r3, #0]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 80aa 	beq.w	8009f68 <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d16d      	bne.n	8009f0c <USB_EPStartXfer+0xaa8>
 8009e30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e50:	4413      	add	r3, r2
 8009e52:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	011a      	lsls	r2, r3, #4
 8009e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e64:	4413      	add	r3, r2
 8009e66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d112      	bne.n	8009e9a <USB_EPStartXfer+0xa36>
 8009e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e76:	881b      	ldrh	r3, [r3, #0]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e82:	801a      	strh	r2, [r3, #0]
 8009e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e96:	801a      	strh	r2, [r3, #0]
 8009e98:	e05d      	b.n	8009f56 <USB_EPStartXfer+0xaf2>
 8009e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ea0:	d817      	bhi.n	8009ed2 <USB_EPStartXfer+0xa6e>
 8009ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ea6:	085b      	lsrs	r3, r3, #1
 8009ea8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d004      	beq.n	8009ec2 <USB_EPStartXfer+0xa5e>
 8009eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	029b      	lsls	r3, r3, #10
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ece:	801a      	strh	r2, [r3, #0]
 8009ed0:	e041      	b.n	8009f56 <USB_EPStartXfer+0xaf2>
 8009ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ed6:	095b      	lsrs	r3, r3, #5
 8009ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ee0:	f003 031f 	and.w	r3, r3, #31
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d104      	bne.n	8009ef2 <USB_EPStartXfer+0xa8e>
 8009ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eec:	3b01      	subs	r3, #1
 8009eee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	029b      	lsls	r3, r3, #10
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f08:	801a      	strh	r2, [r3, #0]
 8009f0a:	e024      	b.n	8009f56 <USB_EPStartXfer+0xaf2>
 8009f0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	785b      	ldrb	r3, [r3, #1]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d11c      	bne.n	8009f56 <USB_EPStartXfer+0xaf2>
 8009f1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f30:	4413      	add	r3, r2
 8009f32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	011a      	lsls	r2, r3, #4
 8009f42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f44:	4413      	add	r3, r2
 8009f46:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009f4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009f56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	895b      	ldrh	r3, [r3, #10]
 8009f62:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 8009f66:	e0b2      	b.n	800a0ce <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	785b      	ldrb	r3, [r3, #1]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d171      	bne.n	800a05c <USB_EPStartXfer+0xbf8>
 8009f78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	461a      	mov	r2, r3
 8009f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fa2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fa6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	011a      	lsls	r2, r3, #4
 8009fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d112      	bne.n	8009fea <USB_EPStartXfer+0xb86>
 8009fc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fd2:	801a      	strh	r2, [r3, #0]
 8009fd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fe6:	801a      	strh	r2, [r3, #0]
 8009fe8:	e069      	b.n	800a0be <USB_EPStartXfer+0xc5a>
 8009fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fee:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ff0:	d817      	bhi.n	800a022 <USB_EPStartXfer+0xbbe>
 8009ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ff6:	085b      	lsrs	r3, r3, #1
 8009ff8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	2b00      	cmp	r3, #0
 800a006:	d004      	beq.n	800a012 <USB_EPStartXfer+0xbae>
 800a008:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a00c:	3301      	adds	r3, #1
 800a00e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a012:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a016:	b29b      	uxth	r3, r3
 800a018:	029b      	lsls	r3, r3, #10
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a01e:	801a      	strh	r2, [r3, #0]
 800a020:	e04d      	b.n	800a0be <USB_EPStartXfer+0xc5a>
 800a022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a026:	095b      	lsrs	r3, r3, #5
 800a028:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a030:	f003 031f 	and.w	r3, r3, #31
 800a034:	2b00      	cmp	r3, #0
 800a036:	d104      	bne.n	800a042 <USB_EPStartXfer+0xbde>
 800a038:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a03c:	3b01      	subs	r3, #1
 800a03e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a042:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a046:	b29b      	uxth	r3, r3
 800a048:	029b      	lsls	r3, r3, #10
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a054:	b29a      	uxth	r2, r3
 800a056:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a058:	801a      	strh	r2, [r3, #0]
 800a05a:	e030      	b.n	800a0be <USB_EPStartXfer+0xc5a>
 800a05c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a060:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	785b      	ldrb	r3, [r3, #1]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d128      	bne.n	800a0be <USB_EPStartXfer+0xc5a>
 800a06c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a070:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a07a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a07e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a088:	b29b      	uxth	r3, r3
 800a08a:	461a      	mov	r2, r3
 800a08c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a090:	4413      	add	r3, r2
 800a092:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a09a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	011a      	lsls	r2, r3, #4
 800a0a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a0ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a0be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	891b      	ldrh	r3, [r3, #8]
 800a0ca:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6959      	ldr	r1, [r3, #20]
 800a0da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800a0e4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a0e8:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800a0ec:	6800      	ldr	r0, [r0, #0]
 800a0ee:	f000 fe9e 	bl	800ae2e <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a0f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d12e      	bne.n	800a160 <USB_EPStartXfer+0xcfc>
 800a102:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a106:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a110:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a128:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800a12c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a130:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a13a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	441a      	add	r2, r3
 800a146:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800a14a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a14e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a156:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	8013      	strh	r3, [r2, #0]
 800a15e:	e035      	b.n	800a1cc <USB_EPStartXfer+0xd68>
 800a160:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a164:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	785b      	ldrb	r3, [r3, #1]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d12d      	bne.n	800a1cc <USB_EPStartXfer+0xd68>
 800a170:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a174:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a17e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a196:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800a19a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a19e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	441a      	add	r2, r3
 800a1b4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800a1b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a1cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a1ee:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a1f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1fa:	8013      	strh	r3, [r2, #0]
 800a1fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a200:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a204:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a208:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a20c:	8812      	ldrh	r2, [r2, #0]
 800a20e:	f082 0210 	eor.w	r2, r2, #16
 800a212:	801a      	strh	r2, [r3, #0]
 800a214:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a218:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a21c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a220:	f5a2 7281 	sub.w	r2, r2, #258	@ 0x102
 800a224:	8812      	ldrh	r2, [r2, #0]
 800a226:	f082 0220 	eor.w	r2, r2, #32
 800a22a:	801a      	strh	r2, [r3, #0]
 800a22c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a230:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a23a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	441a      	add	r2, r3
 800a246:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a24a:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a25c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a260:	b29b      	uxth	r3, r3
 800a262:	8013      	strh	r3, [r2, #0]
 800a264:	f000 bc9f 	b.w	800aba6 <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a268:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a26c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	7b1b      	ldrb	r3, [r3, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	f040 80ae 	bne.w	800a3d6 <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a27a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a27e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	699a      	ldr	r2, [r3, #24]
 800a286:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a28a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	429a      	cmp	r2, r3
 800a294:	d917      	bls.n	800a2c6 <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 800a296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a29a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len -= len;
 800a2a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	699a      	ldr	r2, [r3, #24]
 800a2b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2b6:	1ad2      	subs	r2, r2, r3
 800a2b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	619a      	str	r2, [r3, #24]
 800a2c4:	e00e      	b.n	800a2e4 <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 800a2c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        ep->xfer_len = 0U;
 800a2d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a2e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a300:	b29b      	uxth	r3, r3
 800a302:	461a      	mov	r2, r3
 800a304:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a308:	4413      	add	r3, r2
 800a30a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a30e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a312:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	011a      	lsls	r2, r3, #4
 800a31c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a320:	4413      	add	r3, r2
 800a322:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a326:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a32a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d116      	bne.n	800a360 <USB_EPStartXfer+0xefc>
 800a332:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a336:	881b      	ldrh	r3, [r3, #0]
 800a338:	b29b      	uxth	r3, r3
 800a33a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a33e:	b29a      	uxth	r2, r3
 800a340:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a344:	801a      	strh	r2, [r3, #0]
 800a346:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a356:	b29a      	uxth	r2, r3
 800a358:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a35c:	801a      	strh	r2, [r3, #0]
 800a35e:	e3e8      	b.n	800ab32 <USB_EPStartXfer+0x16ce>
 800a360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a364:	2b3e      	cmp	r3, #62	@ 0x3e
 800a366:	d818      	bhi.n	800a39a <USB_EPStartXfer+0xf36>
 800a368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a36c:	085b      	lsrs	r3, r3, #1
 800a36e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d004      	beq.n	800a388 <USB_EPStartXfer+0xf24>
 800a37e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a382:	3301      	adds	r3, #1
 800a384:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a388:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	029b      	lsls	r3, r3, #10
 800a390:	b29a      	uxth	r2, r3
 800a392:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a396:	801a      	strh	r2, [r3, #0]
 800a398:	e3cb      	b.n	800ab32 <USB_EPStartXfer+0x16ce>
 800a39a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a39e:	095b      	lsrs	r3, r3, #5
 800a3a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a3a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3a8:	f003 031f 	and.w	r3, r3, #31
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d104      	bne.n	800a3ba <USB_EPStartXfer+0xf56>
 800a3b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a3ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	029b      	lsls	r3, r3, #10
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a3d2:	801a      	strh	r2, [r3, #0]
 800a3d4:	e3ad      	b.n	800ab32 <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a3d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	78db      	ldrb	r3, [r3, #3]
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	f040 8200 	bne.w	800a7e8 <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a3e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	785b      	ldrb	r3, [r3, #1]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f040 8091 	bne.w	800a51c <USB_EPStartXfer+0x10b8>
 800a3fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a408:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a40c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a416:	b29b      	uxth	r3, r3
 800a418:	461a      	mov	r2, r3
 800a41a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a41e:	4413      	add	r3, r2
 800a420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a424:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a428:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	011a      	lsls	r2, r3, #4
 800a432:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a436:	4413      	add	r3, r2
 800a438:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a43c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a440:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a444:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d116      	bne.n	800a47e <USB_EPStartXfer+0x101a>
 800a450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	b29b      	uxth	r3, r3
 800a458:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a462:	801a      	strh	r2, [r3, #0]
 800a464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a474:	b29a      	uxth	r2, r3
 800a476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a47a:	801a      	strh	r2, [r3, #0]
 800a47c:	e083      	b.n	800a586 <USB_EPStartXfer+0x1122>
 800a47e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a482:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a48c:	d820      	bhi.n	800a4d0 <USB_EPStartXfer+0x106c>
 800a48e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a492:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	085b      	lsrs	r3, r3, #1
 800a49c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a4a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d004      	beq.n	800a4be <USB_EPStartXfer+0x105a>
 800a4b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a4be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	029b      	lsls	r3, r3, #10
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4cc:	801a      	strh	r2, [r3, #0]
 800a4ce:	e05a      	b.n	800a586 <USB_EPStartXfer+0x1122>
 800a4d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	095b      	lsrs	r3, r3, #5
 800a4de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a4e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	f003 031f 	and.w	r3, r3, #31
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d104      	bne.n	800a500 <USB_EPStartXfer+0x109c>
 800a4f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a500:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a504:	b29b      	uxth	r3, r3
 800a506:	029b      	lsls	r3, r3, #10
 800a508:	b29b      	uxth	r3, r3
 800a50a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a50e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a512:	b29a      	uxth	r2, r3
 800a514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a518:	801a      	strh	r2, [r3, #0]
 800a51a:	e034      	b.n	800a586 <USB_EPStartXfer+0x1122>
 800a51c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a520:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	785b      	ldrb	r3, [r3, #1]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d12c      	bne.n	800a586 <USB_EPStartXfer+0x1122>
 800a52c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a530:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a53a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a53e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a548:	b29b      	uxth	r3, r3
 800a54a:	461a      	mov	r2, r3
 800a54c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a550:	4413      	add	r3, r2
 800a552:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a556:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a55a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	011a      	lsls	r2, r3, #4
 800a564:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a568:	4413      	add	r3, r2
 800a56a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a56e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a572:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a576:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	b29a      	uxth	r2, r3
 800a580:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a584:	801a      	strh	r2, [r3, #0]
 800a586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a58a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a594:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a598:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	785b      	ldrb	r3, [r3, #1]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f040 8091 	bne.w	800a6c8 <USB_EPStartXfer+0x1264>
 800a5a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a5b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a5d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	011a      	lsls	r2, r3, #4
 800a5de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5e2:	4413      	add	r3, r2
 800a5e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a5e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a5ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d116      	bne.n	800a62a <USB_EPStartXfer+0x11c6>
 800a5fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a600:	881b      	ldrh	r3, [r3, #0]
 800a602:	b29b      	uxth	r3, r3
 800a604:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a608:	b29a      	uxth	r2, r3
 800a60a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a60e:	801a      	strh	r2, [r3, #0]
 800a610:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	b29b      	uxth	r3, r3
 800a618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a61c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a620:	b29a      	uxth	r2, r3
 800a622:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a626:	801a      	strh	r2, [r3, #0]
 800a628:	e07c      	b.n	800a724 <USB_EPStartXfer+0x12c0>
 800a62a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a62e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	2b3e      	cmp	r3, #62	@ 0x3e
 800a638:	d820      	bhi.n	800a67c <USB_EPStartXfer+0x1218>
 800a63a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a63e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	085b      	lsrs	r3, r3, #1
 800a648:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a64c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a650:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d004      	beq.n	800a66a <USB_EPStartXfer+0x1206>
 800a660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a664:	3301      	adds	r3, #1
 800a666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a66e:	b29b      	uxth	r3, r3
 800a670:	029b      	lsls	r3, r3, #10
 800a672:	b29a      	uxth	r2, r3
 800a674:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a678:	801a      	strh	r2, [r3, #0]
 800a67a:	e053      	b.n	800a724 <USB_EPStartXfer+0x12c0>
 800a67c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a680:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	095b      	lsrs	r3, r3, #5
 800a68a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a68e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a692:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f003 031f 	and.w	r3, r3, #31
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d104      	bne.n	800a6ac <USB_EPStartXfer+0x1248>
 800a6a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	029b      	lsls	r3, r3, #10
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a6c4:	801a      	strh	r2, [r3, #0]
 800a6c6:	e02d      	b.n	800a724 <USB_EPStartXfer+0x12c0>
 800a6c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	785b      	ldrb	r3, [r3, #1]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d125      	bne.n	800a724 <USB_EPStartXfer+0x12c0>
 800a6d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a6f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	011a      	lsls	r2, r3, #4
 800a702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a706:	4413      	add	r3, r2
 800a708:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a70c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a710:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a714:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a722:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a724:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a728:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	69db      	ldr	r3, [r3, #28]
 800a730:	2b00      	cmp	r3, #0
 800a732:	f000 81fe 	beq.w	800ab32 <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a736:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a73a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a744:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a756:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a75a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d005      	beq.n	800a76e <USB_EPStartXfer+0x130a>
 800a762:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10d      	bne.n	800a78a <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a76e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a776:	2b00      	cmp	r3, #0
 800a778:	f040 81db 	bne.w	800ab32 <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a77c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800a780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a784:	2b00      	cmp	r3, #0
 800a786:	f040 81d4 	bne.w	800ab32 <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a78a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a78e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a798:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7b0:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800a7b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7c2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	441a      	add	r2, r3
 800a7ce:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800a7d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	8013      	strh	r3, [r2, #0]
 800a7e6:	e1a4      	b.n	800ab32 <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a7e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	78db      	ldrb	r3, [r3, #3]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	f040 819a 	bne.w	800ab2e <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a7fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	699a      	ldr	r2, [r3, #24]
 800a806:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a80a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	429a      	cmp	r2, r3
 800a814:	d917      	bls.n	800a846 <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800a816:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a81a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len -= len;
 800a826:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a82a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	699a      	ldr	r2, [r3, #24]
 800a832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a836:	1ad2      	subs	r2, r2, r3
 800a838:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a83c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	619a      	str	r2, [r3, #24]
 800a844:	e00e      	b.n	800a864 <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800a846:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a84a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
          ep->xfer_len = 0U;
 800a856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a85a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2200      	movs	r2, #0
 800a862:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a864:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a868:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	785b      	ldrb	r3, [r3, #1]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d178      	bne.n	800a966 <USB_EPStartXfer+0x1502>
 800a874:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a878:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a882:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a886:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a890:	b29b      	uxth	r3, r3
 800a892:	461a      	mov	r2, r3
 800a894:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a898:	4413      	add	r3, r2
 800a89a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a89e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	011a      	lsls	r2, r3, #4
 800a8ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a8b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a8ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d116      	bne.n	800a8f0 <USB_EPStartXfer+0x148c>
 800a8c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a8d4:	801a      	strh	r2, [r3, #0]
 800a8d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a8ec:	801a      	strh	r2, [r3, #0]
 800a8ee:	e06b      	b.n	800a9c8 <USB_EPStartXfer+0x1564>
 800a8f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8f6:	d818      	bhi.n	800a92a <USB_EPStartXfer+0x14c6>
 800a8f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8fc:	085b      	lsrs	r3, r3, #1
 800a8fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d004      	beq.n	800a918 <USB_EPStartXfer+0x14b4>
 800a90e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a912:	3301      	adds	r3, #1
 800a914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	029b      	lsls	r3, r3, #10
 800a920:	b29a      	uxth	r2, r3
 800a922:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a926:	801a      	strh	r2, [r3, #0]
 800a928:	e04e      	b.n	800a9c8 <USB_EPStartXfer+0x1564>
 800a92a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a92e:	095b      	lsrs	r3, r3, #5
 800a930:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a938:	f003 031f 	and.w	r3, r3, #31
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d104      	bne.n	800a94a <USB_EPStartXfer+0x14e6>
 800a940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a944:	3b01      	subs	r3, #1
 800a946:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a94a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a94e:	b29b      	uxth	r3, r3
 800a950:	029b      	lsls	r3, r3, #10
 800a952:	b29b      	uxth	r3, r3
 800a954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a962:	801a      	strh	r2, [r3, #0]
 800a964:	e030      	b.n	800a9c8 <USB_EPStartXfer+0x1564>
 800a966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a96a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	785b      	ldrb	r3, [r3, #1]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d128      	bne.n	800a9c8 <USB_EPStartXfer+0x1564>
 800a976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a97a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a988:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a992:	b29b      	uxth	r3, r3
 800a994:	461a      	mov	r2, r3
 800a996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a99a:	4413      	add	r3, r2
 800a99c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	011a      	lsls	r2, r3, #4
 800a9ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a9b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a9bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a9c6:	801a      	strh	r2, [r3, #0]
 800a9c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a9d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	785b      	ldrb	r3, [r3, #1]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d178      	bne.n	800aad8 <USB_EPStartXfer+0x1674>
 800a9e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a9f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	461a      	mov	r2, r3
 800aa06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	011a      	lsls	r2, r3, #4
 800aa1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa22:	4413      	add	r3, r2
 800aa24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800aa28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aa2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d116      	bne.n	800aa62 <USB_EPStartXfer+0x15fe>
 800aa34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aa46:	801a      	strh	r2, [r3, #0]
 800aa48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aa4c:	881b      	ldrh	r3, [r3, #0]
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aa5e:	801a      	strh	r2, [r3, #0]
 800aa60:	e067      	b.n	800ab32 <USB_EPStartXfer+0x16ce>
 800aa62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa66:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa68:	d818      	bhi.n	800aa9c <USB_EPStartXfer+0x1638>
 800aa6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa6e:	085b      	lsrs	r3, r3, #1
 800aa70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aa74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d004      	beq.n	800aa8a <USB_EPStartXfer+0x1626>
 800aa80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa84:	3301      	adds	r3, #1
 800aa86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aa8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	029b      	lsls	r3, r3, #10
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aa98:	801a      	strh	r2, [r3, #0]
 800aa9a:	e04a      	b.n	800ab32 <USB_EPStartXfer+0x16ce>
 800aa9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaa0:	095b      	lsrs	r3, r3, #5
 800aaa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aaa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaaa:	f003 031f 	and.w	r3, r3, #31
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d104      	bne.n	800aabc <USB_EPStartXfer+0x1658>
 800aab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aab6:	3b01      	subs	r3, #1
 800aab8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aabc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	029b      	lsls	r3, r3, #10
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aace:	b29a      	uxth	r2, r3
 800aad0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aad4:	801a      	strh	r2, [r3, #0]
 800aad6:	e02c      	b.n	800ab32 <USB_EPStartXfer+0x16ce>
 800aad8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aadc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	785b      	ldrb	r3, [r3, #1]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d124      	bne.n	800ab32 <USB_EPStartXfer+0x16ce>
 800aae8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aaec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	461a      	mov	r2, r3
 800aafa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aafe:	4413      	add	r3, r2
 800ab00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	011a      	lsls	r2, r3, #4
 800ab12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab16:	4413      	add	r3, r2
 800ab18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ab1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ab2a:	801a      	strh	r2, [r3, #0]
 800ab2c:	e001      	b.n	800ab32 <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e03a      	b.n	800aba8 <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab58:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ab5c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ab60:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ab64:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ab68:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ab6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ab70:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ab74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	441a      	add	r2, r3
 800ab8e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ab92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b085      	sub	sp, #20
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	785b      	ldrb	r3, [r3, #1]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d020      	beq.n	800ac06 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	881b      	ldrh	r3, [r3, #0]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abda:	81bb      	strh	r3, [r7, #12]
 800abdc:	89bb      	ldrh	r3, [r7, #12]
 800abde:	f083 0310 	eor.w	r3, r3, #16
 800abe2:	81bb      	strh	r3, [r7, #12]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	441a      	add	r2, r3
 800abee:	89bb      	ldrh	r3, [r7, #12]
 800abf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	8013      	strh	r3, [r2, #0]
 800ac04:	e01f      	b.n	800ac46 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac1c:	81fb      	strh	r3, [r7, #14]
 800ac1e:	89fb      	ldrh	r3, [r7, #14]
 800ac20:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac24:	81fb      	strh	r3, [r7, #14]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	441a      	add	r2, r3
 800ac30:	89fb      	ldrh	r3, [r7, #14]
 800ac32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3714      	adds	r7, #20
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bc80      	pop	{r7}
 800ac50:	4770      	bx	lr

0800ac52 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac52:	b480      	push	{r7}
 800ac54:	b087      	sub	sp, #28
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	7b1b      	ldrb	r3, [r3, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f040 809d 	bne.w	800ada0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	785b      	ldrb	r3, [r3, #1]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d04c      	beq.n	800ad08 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	823b      	strh	r3, [r7, #16]
 800ac7c:	8a3b      	ldrh	r3, [r7, #16]
 800ac7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d01b      	beq.n	800acbe <USB_EPClearStall+0x6c>
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac9c:	81fb      	strh	r3, [r7, #14]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	441a      	add	r2, r3
 800aca8:	89fb      	ldrh	r3, [r7, #14]
 800acaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800acba:	b29b      	uxth	r3, r3
 800acbc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	78db      	ldrb	r3, [r3, #3]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d06c      	beq.n	800ada0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4413      	add	r3, r2
 800acd0:	881b      	ldrh	r3, [r3, #0]
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acdc:	81bb      	strh	r3, [r7, #12]
 800acde:	89bb      	ldrh	r3, [r7, #12]
 800ace0:	f083 0320 	eor.w	r3, r3, #32
 800ace4:	81bb      	strh	r3, [r7, #12]
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	441a      	add	r2, r3
 800acf0:	89bb      	ldrh	r3, [r7, #12]
 800acf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	8013      	strh	r3, [r2, #0]
 800ad06:	e04b      	b.n	800ada0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	82fb      	strh	r3, [r7, #22]
 800ad16:	8afb      	ldrh	r3, [r7, #22]
 800ad18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d01b      	beq.n	800ad58 <USB_EPClearStall+0x106>
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad36:	82bb      	strh	r3, [r7, #20]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	441a      	add	r2, r3
 800ad42:	8abb      	ldrh	r3, [r7, #20]
 800ad44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ad50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4413      	add	r3, r2
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad6e:	827b      	strh	r3, [r7, #18]
 800ad70:	8a7b      	ldrh	r3, [r7, #18]
 800ad72:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ad76:	827b      	strh	r3, [r7, #18]
 800ad78:	8a7b      	ldrh	r3, [r7, #18]
 800ad7a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ad7e:	827b      	strh	r3, [r7, #18]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	441a      	add	r2, r3
 800ad8a:	8a7b      	ldrh	r3, [r7, #18]
 800ad8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	371c      	adds	r7, #28
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bc80      	pop	{r7}
 800adaa:	4770      	bx	lr

0800adac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d103      	bne.n	800adc6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2280      	movs	r2, #128	@ 0x80
 800adc2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	bc80      	pop	{r7}
 800add0:	4770      	bx	lr

0800add2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800add2:	b480      	push	{r7}
 800add4:	b083      	sub	sp, #12
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bc80      	pop	{r7}
 800ade4:	4770      	bx	lr

0800ade6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bc80      	pop	{r7}
 800adf8:	4770      	bx	lr

0800adfa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b085      	sub	sp, #20
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bc80      	pop	{r7}
 800ae16:	4770      	bx	lr

0800ae18 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bc80      	pop	{r7}
 800ae2c:	4770      	bx	lr

0800ae2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b08d      	sub	sp, #52	@ 0x34
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	60f8      	str	r0, [r7, #12]
 800ae36:	60b9      	str	r1, [r7, #8]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	80fb      	strh	r3, [r7, #6]
 800ae40:	4613      	mov	r3, r2
 800ae42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ae44:	88bb      	ldrh	r3, [r7, #4]
 800ae46:	3301      	adds	r3, #1
 800ae48:	085b      	lsrs	r3, r3, #1
 800ae4a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae54:	88fb      	ldrh	r3, [r7, #6]
 800ae56:	005a      	lsls	r2, r3, #1
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae60:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae66:	e01d      	b.n	800aea4 <USB_WritePMA+0x76>
  {
    temp1 = *pBuf;
 800ae68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae70:	3301      	adds	r3, #1
 800ae72:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ae74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	021b      	lsls	r3, r3, #8
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ae8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8e:	3302      	adds	r3, #2
 800ae90:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800ae92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae94:	3302      	adds	r3, #2
 800ae96:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

    pBuf++;
 800ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 800ae9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea0:	3b01      	subs	r3, #1
 800aea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1de      	bne.n	800ae68 <USB_WritePMA+0x3a>
  }
}
 800aeaa:	bf00      	nop
 800aeac:	bf00      	nop
 800aeae:	3734      	adds	r7, #52	@ 0x34
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bc80      	pop	{r7}
 800aeb4:	4770      	bx	lr

0800aeb6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b08b      	sub	sp, #44	@ 0x2c
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	60f8      	str	r0, [r7, #12]
 800aebe:	60b9      	str	r1, [r7, #8]
 800aec0:	4611      	mov	r1, r2
 800aec2:	461a      	mov	r2, r3
 800aec4:	460b      	mov	r3, r1
 800aec6:	80fb      	strh	r3, [r7, #6]
 800aec8:	4613      	mov	r3, r2
 800aeca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800aecc:	88bb      	ldrh	r3, [r7, #4]
 800aece:	085b      	lsrs	r3, r3, #1
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aedc:	88fb      	ldrh	r3, [r7, #6]
 800aede:	005a      	lsls	r2, r3, #1
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	4413      	add	r3, r2
 800aee4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aee8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeee:	e01b      	b.n	800af28 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800aef0:	6a3b      	ldr	r3, [r7, #32]
 800aef2:	881b      	ldrh	r3, [r3, #0]
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800aef8:	6a3b      	ldr	r3, [r7, #32]
 800aefa:	3302      	adds	r3, #2
 800aefc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	b2da      	uxtb	r2, r3
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	3301      	adds	r3, #1
 800af0a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	0a1b      	lsrs	r3, r3, #8
 800af10:	b2da      	uxtb	r2, r3
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	3301      	adds	r3, #1
 800af1a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	3302      	adds	r3, #2
 800af20:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800af22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af24:	3b01      	subs	r3, #1
 800af26:	627b      	str	r3, [r7, #36]	@ 0x24
 800af28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1e0      	bne.n	800aef0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800af2e:	88bb      	ldrh	r3, [r7, #4]
 800af30:	f003 0301 	and.w	r3, r3, #1
 800af34:	b29b      	uxth	r3, r3
 800af36:	2b00      	cmp	r3, #0
 800af38:	d007      	beq.n	800af4a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	b2da      	uxtb	r2, r3
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	701a      	strb	r2, [r3, #0]
  }
}
 800af4a:	bf00      	nop
 800af4c:	372c      	adds	r7, #44	@ 0x2c
 800af4e:	46bd      	mov	sp, r7
 800af50:	bc80      	pop	{r7}
 800af52:	4770      	bx	lr

0800af54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	460b      	mov	r3, r1
 800af5e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800af60:	2300      	movs	r3, #0
 800af62:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	7c1b      	ldrb	r3, [r3, #16]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d115      	bne.n	800af98 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af70:	2202      	movs	r2, #2
 800af72:	2181      	movs	r1, #129	@ 0x81
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f001 fe90 	bl	800cc9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2201      	movs	r2, #1
 800af7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af84:	2202      	movs	r2, #2
 800af86:	2101      	movs	r1, #1
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f001 fe86 	bl	800cc9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2201      	movs	r2, #1
 800af92:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800af96:	e012      	b.n	800afbe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af98:	2340      	movs	r3, #64	@ 0x40
 800af9a:	2202      	movs	r2, #2
 800af9c:	2181      	movs	r1, #129	@ 0x81
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f001 fe7b 	bl	800cc9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800afaa:	2340      	movs	r3, #64	@ 0x40
 800afac:	2202      	movs	r2, #2
 800afae:	2101      	movs	r1, #1
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f001 fe72 	bl	800cc9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800afbe:	2308      	movs	r3, #8
 800afc0:	2203      	movs	r2, #3
 800afc2:	2182      	movs	r1, #130	@ 0x82
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 fe68 	bl	800cc9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800afd0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800afd4:	f001 ff88 	bl	800cee8 <USBD_static_malloc>
 800afd8:	4602      	mov	r2, r0
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d102      	bne.n	800aff0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800afea:	2301      	movs	r3, #1
 800afec:	73fb      	strb	r3, [r7, #15]
 800afee:	e026      	b.n	800b03e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aff6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2200      	movs	r2, #0
 800b006:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	7c1b      	ldrb	r3, [r3, #16]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d109      	bne.n	800b02e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b024:	2101      	movs	r1, #1
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f001 ff28 	bl	800ce7c <USBD_LL_PrepareReceive>
 800b02c:	e007      	b.n	800b03e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b034:	2340      	movs	r3, #64	@ 0x40
 800b036:	2101      	movs	r1, #1
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 ff1f 	bl	800ce7c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b054:	2300      	movs	r3, #0
 800b056:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b058:	2181      	movs	r1, #129	@ 0x81
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 fe43 	bl	800cce6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b066:	2101      	movs	r1, #1
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f001 fe3c 	bl	800cce6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b076:	2182      	movs	r1, #130	@ 0x82
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 fe34 	bl	800cce6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00e      	beq.n	800b0ac <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f001 ff2e 	bl	800cf00 <USBD_static_free>
    pdev->pClassData = NULL;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b086      	sub	sp, #24
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d039      	beq.n	800b154 <USBD_CDC_Setup+0x9e>
 800b0e0:	2b20      	cmp	r3, #32
 800b0e2:	d17f      	bne.n	800b1e4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	88db      	ldrh	r3, [r3, #6]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d029      	beq.n	800b140 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	b25b      	sxtb	r3, r3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	da11      	bge.n	800b11a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b102:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	88d2      	ldrh	r2, [r2, #6]
 800b108:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b10a:	6939      	ldr	r1, [r7, #16]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	88db      	ldrh	r3, [r3, #6]
 800b110:	461a      	mov	r2, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 fa06 	bl	800c524 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b118:	e06b      	b.n	800b1f2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	785a      	ldrb	r2, [r3, #1]
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	88db      	ldrh	r3, [r3, #6]
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b130:	6939      	ldr	r1, [r7, #16]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	88db      	ldrh	r3, [r3, #6]
 800b136:	461a      	mov	r2, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 fa21 	bl	800c580 <USBD_CtlPrepareRx>
      break;
 800b13e:	e058      	b.n	800b1f2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	7850      	ldrb	r0, [r2, #1]
 800b14c:	2200      	movs	r2, #0
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	4798      	blx	r3
      break;
 800b152:	e04e      	b.n	800b1f2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	785b      	ldrb	r3, [r3, #1]
 800b158:	2b0b      	cmp	r3, #11
 800b15a:	d02e      	beq.n	800b1ba <USBD_CDC_Setup+0x104>
 800b15c:	2b0b      	cmp	r3, #11
 800b15e:	dc38      	bgt.n	800b1d2 <USBD_CDC_Setup+0x11c>
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <USBD_CDC_Setup+0xb4>
 800b164:	2b0a      	cmp	r3, #10
 800b166:	d014      	beq.n	800b192 <USBD_CDC_Setup+0xdc>
 800b168:	e033      	b.n	800b1d2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b170:	2b03      	cmp	r3, #3
 800b172:	d107      	bne.n	800b184 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b174:	f107 030c 	add.w	r3, r7, #12
 800b178:	2202      	movs	r2, #2
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f001 f9d1 	bl	800c524 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b182:	e02e      	b.n	800b1e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f001 f962 	bl	800c450 <USBD_CtlError>
            ret = USBD_FAIL;
 800b18c:	2302      	movs	r3, #2
 800b18e:	75fb      	strb	r3, [r7, #23]
          break;
 800b190:	e027      	b.n	800b1e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b198:	2b03      	cmp	r3, #3
 800b19a:	d107      	bne.n	800b1ac <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b19c:	f107 030f 	add.w	r3, r7, #15
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f001 f9bd 	bl	800c524 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1aa:	e01a      	b.n	800b1e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f001 f94e 	bl	800c450 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	75fb      	strb	r3, [r7, #23]
          break;
 800b1b8:	e013      	b.n	800b1e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1c0:	2b03      	cmp	r3, #3
 800b1c2:	d00d      	beq.n	800b1e0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f001 f942 	bl	800c450 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b1d0:	e006      	b.n	800b1e0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f001 f93b 	bl	800c450 <USBD_CtlError>
          ret = USBD_FAIL;
 800b1da:	2302      	movs	r3, #2
 800b1dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b1de:	e000      	b.n	800b1e2 <USBD_CDC_Setup+0x12c>
          break;
 800b1e0:	bf00      	nop
      }
      break;
 800b1e2:	e006      	b.n	800b1f2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f001 f932 	bl	800c450 <USBD_CtlError>
      ret = USBD_FAIL;
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b1f0:	bf00      	nop
  }

  return ret;
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3718      	adds	r7, #24
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b20e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b216:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d03a      	beq.n	800b298 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b222:	78fa      	ldrb	r2, [r7, #3]
 800b224:	6879      	ldr	r1, [r7, #4]
 800b226:	4613      	mov	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	440b      	add	r3, r1
 800b230:	331c      	adds	r3, #28
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d029      	beq.n	800b28c <USBD_CDC_DataIn+0x90>
 800b238:	78fa      	ldrb	r2, [r7, #3]
 800b23a:	6879      	ldr	r1, [r7, #4]
 800b23c:	4613      	mov	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	440b      	add	r3, r1
 800b246:	331c      	adds	r3, #28
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	78f9      	ldrb	r1, [r7, #3]
 800b24c:	68b8      	ldr	r0, [r7, #8]
 800b24e:	460b      	mov	r3, r1
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	440b      	add	r3, r1
 800b254:	00db      	lsls	r3, r3, #3
 800b256:	4403      	add	r3, r0
 800b258:	3338      	adds	r3, #56	@ 0x38
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b260:	fb01 f303 	mul.w	r3, r1, r3
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d110      	bne.n	800b28c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b26a:	78fa      	ldrb	r2, [r7, #3]
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	4613      	mov	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	440b      	add	r3, r1
 800b278:	331c      	adds	r3, #28
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b27e:	78f9      	ldrb	r1, [r7, #3]
 800b280:	2300      	movs	r3, #0
 800b282:	2200      	movs	r2, #0
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f001 fdd6 	bl	800ce36 <USBD_LL_Transmit>
 800b28a:	e003      	b.n	800b294 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800b294:	2300      	movs	r3, #0
 800b296:	e000      	b.n	800b29a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b298:	2302      	movs	r3, #2
  }
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2b6:	78fb      	ldrb	r3, [r7, #3]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f001 fe01 	bl	800cec2 <USBD_LL_GetRxDataSize>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00d      	beq.n	800b2ee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	4798      	blx	r3

    return USBD_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e000      	b.n	800b2f0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b2ee:	2302      	movs	r3, #2
  }
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b306:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d014      	beq.n	800b33c <USBD_CDC_EP0_RxReady+0x44>
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b318:	2bff      	cmp	r3, #255	@ 0xff
 800b31a:	d00f      	beq.n	800b33c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b32a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b332:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	22ff      	movs	r2, #255	@ 0xff
 800b338:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2243      	movs	r2, #67	@ 0x43
 800b354:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b356:	4b03      	ldr	r3, [pc, #12]	@ (800b364 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b358:	4618      	mov	r0, r3
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bc80      	pop	{r7}
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	200000bc 	.word	0x200000bc

0800b368 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2243      	movs	r2, #67	@ 0x43
 800b374:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b376:	4b03      	ldr	r3, [pc, #12]	@ (800b384 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b378:	4618      	mov	r0, r3
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bc80      	pop	{r7}
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	20000078 	.word	0x20000078

0800b388 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2243      	movs	r2, #67	@ 0x43
 800b394:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b396:	4b03      	ldr	r3, [pc, #12]	@ (800b3a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b398:	4618      	mov	r0, r3
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	20000100 	.word	0x20000100

0800b3a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	220a      	movs	r2, #10
 800b3b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b3b6:	4b03      	ldr	r3, [pc, #12]	@ (800b3c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bc80      	pop	{r7}
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20000034 	.word	0x20000034

0800b3c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bc80      	pop	{r7}
 800b3f2:	4770      	bx	lr

0800b3f4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	4613      	mov	r3, r2
 800b400:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b408:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b412:	88fa      	ldrh	r2, [r7, #6]
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	371c      	adds	r7, #28
 800b420:	46bd      	mov	sp, r7
 800b422:	bc80      	pop	{r7}
 800b424:	4770      	bx	lr

0800b426 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b426:	b480      	push	{r7}
 800b428:	b085      	sub	sp, #20
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b436:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	bc80      	pop	{r7}
 800b44a:	4770      	bx	lr

0800b44c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b45a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b462:	2b00      	cmp	r3, #0
 800b464:	d01c      	beq.n	800b4a0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d115      	bne.n	800b49c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2201      	movs	r2, #1
 800b474:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b48e:	b29b      	uxth	r3, r3
 800b490:	2181      	movs	r1, #129	@ 0x81
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f001 fccf 	bl	800ce36 <USBD_LL_Transmit>

      return USBD_OK;
 800b498:	2300      	movs	r3, #0
 800b49a:	e002      	b.n	800b4a2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e000      	b.n	800b4a2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b4a0:	2302      	movs	r3, #2
  }
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d017      	beq.n	800b4f4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	7c1b      	ldrb	r3, [r3, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d109      	bne.n	800b4e0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4d6:	2101      	movs	r1, #1
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f001 fccf 	bl	800ce7c <USBD_LL_PrepareReceive>
 800b4de:	e007      	b.n	800b4f0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4e6:	2340      	movs	r3, #64	@ 0x40
 800b4e8:	2101      	movs	r1, #1
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f001 fcc6 	bl	800ce7c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	e000      	b.n	800b4f6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b4f4:	2302      	movs	r3, #2
  }
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b084      	sub	sp, #16
 800b502:	af00      	add	r7, sp, #0
 800b504:	60f8      	str	r0, [r7, #12]
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	4613      	mov	r3, r2
 800b50a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b512:	2302      	movs	r3, #2
 800b514:	e01a      	b.n	800b54c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d003      	beq.n	800b528 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	79fa      	ldrb	r2, [r7, #7]
 800b542:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f001 fb33 	bl	800cbb0 <USBD_LL_Init>

  return USBD_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b55e:	2300      	movs	r3, #0
 800b560:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d006      	beq.n	800b576 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	73fb      	strb	r3, [r7, #15]
 800b574:	e001      	b.n	800b57a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b576:	2302      	movs	r3, #2
 800b578:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	bc80      	pop	{r7}
 800b584:	4770      	bx	lr

0800b586 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b082      	sub	sp, #8
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f001 fb68 	bl	800cc64 <USBD_LL_Start>

  return USBD_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b083      	sub	sp, #12
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bc80      	pop	{r7}
 800b5b0:	4770      	bx	lr

0800b5b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b084      	sub	sp, #16
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b5be:	2302      	movs	r3, #2
 800b5c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00c      	beq.n	800b5e6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	78fa      	ldrb	r2, [r7, #3]
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	4798      	blx	r3
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	78fa      	ldrb	r2, [r7, #3]
 800b606:	4611      	mov	r1, r2
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	4798      	blx	r3

  return USBD_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 fed8 	bl	800c3de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b63c:	461a      	mov	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b64a:	f003 031f 	and.w	r3, r3, #31
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d016      	beq.n	800b680 <USBD_LL_SetupStage+0x6a>
 800b652:	2b02      	cmp	r3, #2
 800b654:	d81c      	bhi.n	800b690 <USBD_LL_SetupStage+0x7a>
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <USBD_LL_SetupStage+0x4a>
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d008      	beq.n	800b670 <USBD_LL_SetupStage+0x5a>
 800b65e:	e017      	b.n	800b690 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b666:	4619      	mov	r1, r3
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f9cb 	bl	800ba04 <USBD_StdDevReq>
      break;
 800b66e:	e01a      	b.n	800b6a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fa2d 	bl	800bad8 <USBD_StdItfReq>
      break;
 800b67e:	e012      	b.n	800b6a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fa6d 	bl	800bb68 <USBD_StdEPReq>
      break;
 800b68e:	e00a      	b.n	800b6a6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800b696:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f001 fb40 	bl	800cd24 <USBD_LL_StallEP>
      break;
 800b6a4:	bf00      	nop
  }

  return USBD_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	607a      	str	r2, [r7, #4]
 800b6bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b6be:	7afb      	ldrb	r3, [r7, #11]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d14b      	bne.n	800b75c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b6ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6d2:	2b03      	cmp	r3, #3
 800b6d4:	d134      	bne.n	800b740 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	68da      	ldr	r2, [r3, #12]
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d919      	bls.n	800b716 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	68da      	ldr	r2, [r3, #12]
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	1ad2      	subs	r2, r2, r3
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d203      	bcs.n	800b704 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b700:	b29b      	uxth	r3, r3
 800b702:	e002      	b.n	800b70a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b708:	b29b      	uxth	r3, r3
 800b70a:	461a      	mov	r2, r3
 800b70c:	6879      	ldr	r1, [r7, #4]
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f000 ff54 	bl	800c5bc <USBD_CtlContinueRx>
 800b714:	e038      	b.n	800b788 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00a      	beq.n	800b738 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d105      	bne.n	800b738 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 ff51 	bl	800c5e0 <USBD_CtlSendStatus>
 800b73e:	e023      	b.n	800b788 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b746:	2b05      	cmp	r3, #5
 800b748:	d11e      	bne.n	800b788 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b752:	2100      	movs	r1, #0
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f001 fae5 	bl	800cd24 <USBD_LL_StallEP>
 800b75a:	e015      	b.n	800b788 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b762:	699b      	ldr	r3, [r3, #24]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00d      	beq.n	800b784 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d108      	bne.n	800b784 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b778:	699b      	ldr	r3, [r3, #24]
 800b77a:	7afa      	ldrb	r2, [r7, #11]
 800b77c:	4611      	mov	r1, r2
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	4798      	blx	r3
 800b782:	e001      	b.n	800b788 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b784:	2302      	movs	r3, #2
 800b786:	e000      	b.n	800b78a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b086      	sub	sp, #24
 800b796:	af00      	add	r7, sp, #0
 800b798:	60f8      	str	r0, [r7, #12]
 800b79a:	460b      	mov	r3, r1
 800b79c:	607a      	str	r2, [r7, #4]
 800b79e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b7a0:	7afb      	ldrb	r3, [r7, #11]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d17f      	bne.n	800b8a6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3314      	adds	r3, #20
 800b7aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d15c      	bne.n	800b870 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d915      	bls.n	800b7ee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	68da      	ldr	r2, [r3, #12]
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	1ad2      	subs	r2, r2, r3
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	6879      	ldr	r1, [r7, #4]
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f000 febe 	bl	800c55c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f001 fb48 	bl	800ce7c <USBD_LL_PrepareReceive>
 800b7ec:	e04e      	b.n	800b88c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	6912      	ldr	r2, [r2, #16]
 800b7f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7fa:	fb01 f202 	mul.w	r2, r1, r2
 800b7fe:	1a9b      	subs	r3, r3, r2
 800b800:	2b00      	cmp	r3, #0
 800b802:	d11c      	bne.n	800b83e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	689a      	ldr	r2, [r3, #8]
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d316      	bcc.n	800b83e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	689a      	ldr	r2, [r3, #8]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d20f      	bcs.n	800b83e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b81e:	2200      	movs	r2, #0
 800b820:	2100      	movs	r1, #0
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 fe9a 	bl	800c55c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b830:	2300      	movs	r3, #0
 800b832:	2200      	movs	r2, #0
 800b834:	2100      	movs	r1, #0
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f001 fb20 	bl	800ce7c <USBD_LL_PrepareReceive>
 800b83c:	e026      	b.n	800b88c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b850:	2b03      	cmp	r3, #3
 800b852:	d105      	bne.n	800b860 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b860:	2180      	movs	r1, #128	@ 0x80
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f001 fa5e 	bl	800cd24 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f000 fecc 	bl	800c606 <USBD_CtlReceiveStatus>
 800b86e:	e00d      	b.n	800b88c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b876:	2b04      	cmp	r3, #4
 800b878:	d004      	beq.n	800b884 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b880:	2b00      	cmp	r3, #0
 800b882:	d103      	bne.n	800b88c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b884:	2180      	movs	r1, #128	@ 0x80
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f001 fa4c 	bl	800cd24 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b892:	2b01      	cmp	r3, #1
 800b894:	d11d      	bne.n	800b8d2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f7ff fe81 	bl	800b59e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b8a4:	e015      	b.n	800b8d2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8ac:	695b      	ldr	r3, [r3, #20]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00d      	beq.n	800b8ce <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b8b8:	2b03      	cmp	r3, #3
 800b8ba:	d108      	bne.n	800b8ce <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	7afa      	ldrb	r2, [r7, #11]
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	4798      	blx	r3
 800b8cc:	e001      	b.n	800b8d2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	e000      	b.n	800b8d4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8e4:	2340      	movs	r3, #64	@ 0x40
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	2100      	movs	r1, #0
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f001 f9d5 	bl	800cc9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2240      	movs	r2, #64	@ 0x40
 800b8fc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b900:	2340      	movs	r3, #64	@ 0x40
 800b902:	2200      	movs	r2, #0
 800b904:	2180      	movs	r1, #128	@ 0x80
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f001 f9c7 	bl	800cc9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2240      	movs	r2, #64	@ 0x40
 800b916:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d009      	beq.n	800b954 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	6852      	ldr	r2, [r2, #4]
 800b94c:	b2d2      	uxtb	r2, r2
 800b94e:	4611      	mov	r1, r2
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	4798      	blx	r3
  }

  return USBD_OK;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b95e:	b480      	push	{r7}
 800b960:	b083      	sub	sp, #12
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	460b      	mov	r3, r1
 800b968:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	78fa      	ldrb	r2, [r7, #3]
 800b96e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	370c      	adds	r7, #12
 800b976:	46bd      	mov	sp, r7
 800b978:	bc80      	pop	{r7}
 800b97a:	4770      	bx	lr

0800b97c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2204      	movs	r2, #4
 800b994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	370c      	adds	r7, #12
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bc80      	pop	{r7}
 800b9a2:	4770      	bx	lr

0800b9a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b2:	2b04      	cmp	r3, #4
 800b9b4:	d105      	bne.n	800b9c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bc80      	pop	{r7}
 800b9cc:	4770      	bx	lr

0800b9ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b082      	sub	sp, #8
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	d10b      	bne.n	800b9f8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d005      	beq.n	800b9f8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9f2:	69db      	ldr	r3, [r3, #28]
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
	...

0800ba04 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba1a:	2b40      	cmp	r3, #64	@ 0x40
 800ba1c:	d005      	beq.n	800ba2a <USBD_StdDevReq+0x26>
 800ba1e:	2b40      	cmp	r3, #64	@ 0x40
 800ba20:	d84f      	bhi.n	800bac2 <USBD_StdDevReq+0xbe>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d009      	beq.n	800ba3a <USBD_StdDevReq+0x36>
 800ba26:	2b20      	cmp	r3, #32
 800ba28:	d14b      	bne.n	800bac2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	4798      	blx	r3
      break;
 800ba38:	e048      	b.n	800bacc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	785b      	ldrb	r3, [r3, #1]
 800ba3e:	2b09      	cmp	r3, #9
 800ba40:	d839      	bhi.n	800bab6 <USBD_StdDevReq+0xb2>
 800ba42:	a201      	add	r2, pc, #4	@ (adr r2, 800ba48 <USBD_StdDevReq+0x44>)
 800ba44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba48:	0800ba99 	.word	0x0800ba99
 800ba4c:	0800baad 	.word	0x0800baad
 800ba50:	0800bab7 	.word	0x0800bab7
 800ba54:	0800baa3 	.word	0x0800baa3
 800ba58:	0800bab7 	.word	0x0800bab7
 800ba5c:	0800ba7b 	.word	0x0800ba7b
 800ba60:	0800ba71 	.word	0x0800ba71
 800ba64:	0800bab7 	.word	0x0800bab7
 800ba68:	0800ba8f 	.word	0x0800ba8f
 800ba6c:	0800ba85 	.word	0x0800ba85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f9dc 	bl	800be30 <USBD_GetDescriptor>
          break;
 800ba78:	e022      	b.n	800bac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fb3f 	bl	800c100 <USBD_SetAddress>
          break;
 800ba82:	e01d      	b.n	800bac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fb7e 	bl	800c188 <USBD_SetConfig>
          break;
 800ba8c:	e018      	b.n	800bac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fc07 	bl	800c2a4 <USBD_GetConfig>
          break;
 800ba96:	e013      	b.n	800bac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fc37 	bl	800c30e <USBD_GetStatus>
          break;
 800baa0:	e00e      	b.n	800bac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800baa2:	6839      	ldr	r1, [r7, #0]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fc65 	bl	800c374 <USBD_SetFeature>
          break;
 800baaa:	e009      	b.n	800bac0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800baac:	6839      	ldr	r1, [r7, #0]
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fc74 	bl	800c39c <USBD_ClrFeature>
          break;
 800bab4:	e004      	b.n	800bac0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bab6:	6839      	ldr	r1, [r7, #0]
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 fcc9 	bl	800c450 <USBD_CtlError>
          break;
 800babe:	bf00      	nop
      }
      break;
 800bac0:	e004      	b.n	800bacc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fcc3 	bl	800c450 <USBD_CtlError>
      break;
 800baca:	bf00      	nop
  }

  return ret;
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop

0800bad8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800baee:	2b40      	cmp	r3, #64	@ 0x40
 800baf0:	d005      	beq.n	800bafe <USBD_StdItfReq+0x26>
 800baf2:	2b40      	cmp	r3, #64	@ 0x40
 800baf4:	d82e      	bhi.n	800bb54 <USBD_StdItfReq+0x7c>
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <USBD_StdItfReq+0x26>
 800bafa:	2b20      	cmp	r3, #32
 800bafc:	d12a      	bne.n	800bb54 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb04:	3b01      	subs	r3, #1
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d81d      	bhi.n	800bb46 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	889b      	ldrh	r3, [r3, #4]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d813      	bhi.n	800bb3c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	4798      	blx	r3
 800bb22:	4603      	mov	r3, r0
 800bb24:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	88db      	ldrh	r3, [r3, #6]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d110      	bne.n	800bb50 <USBD_StdItfReq+0x78>
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10d      	bne.n	800bb50 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 fd53 	bl	800c5e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb3a:	e009      	b.n	800bb50 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bb3c:	6839      	ldr	r1, [r7, #0]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fc86 	bl	800c450 <USBD_CtlError>
          break;
 800bb44:	e004      	b.n	800bb50 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bb46:	6839      	ldr	r1, [r7, #0]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 fc81 	bl	800c450 <USBD_CtlError>
          break;
 800bb4e:	e000      	b.n	800bb52 <USBD_StdItfReq+0x7a>
          break;
 800bb50:	bf00      	nop
      }
      break;
 800bb52:	e004      	b.n	800bb5e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 fc7a 	bl	800c450 <USBD_CtlError>
      break;
 800bb5c:	bf00      	nop
  }

  return USBD_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	889b      	ldrh	r3, [r3, #4]
 800bb7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb84:	2b40      	cmp	r3, #64	@ 0x40
 800bb86:	d007      	beq.n	800bb98 <USBD_StdEPReq+0x30>
 800bb88:	2b40      	cmp	r3, #64	@ 0x40
 800bb8a:	f200 8146 	bhi.w	800be1a <USBD_StdEPReq+0x2b2>
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <USBD_StdEPReq+0x40>
 800bb92:	2b20      	cmp	r3, #32
 800bb94:	f040 8141 	bne.w	800be1a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	6839      	ldr	r1, [r7, #0]
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	4798      	blx	r3
      break;
 800bba6:	e13d      	b.n	800be24 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbb0:	2b20      	cmp	r3, #32
 800bbb2:	d10a      	bne.n	800bbca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	6839      	ldr	r1, [r7, #0]
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	4798      	blx	r3
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
 800bbc8:	e12d      	b.n	800be26 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	785b      	ldrb	r3, [r3, #1]
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d007      	beq.n	800bbe2 <USBD_StdEPReq+0x7a>
 800bbd2:	2b03      	cmp	r3, #3
 800bbd4:	f300 811b 	bgt.w	800be0e <USBD_StdEPReq+0x2a6>
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d072      	beq.n	800bcc2 <USBD_StdEPReq+0x15a>
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d03a      	beq.n	800bc56 <USBD_StdEPReq+0xee>
 800bbe0:	e115      	b.n	800be0e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d002      	beq.n	800bbf2 <USBD_StdEPReq+0x8a>
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d015      	beq.n	800bc1c <USBD_StdEPReq+0xb4>
 800bbf0:	e02b      	b.n	800bc4a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00c      	beq.n	800bc12 <USBD_StdEPReq+0xaa>
 800bbf8:	7bbb      	ldrb	r3, [r7, #14]
 800bbfa:	2b80      	cmp	r3, #128	@ 0x80
 800bbfc:	d009      	beq.n	800bc12 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bbfe:	7bbb      	ldrb	r3, [r7, #14]
 800bc00:	4619      	mov	r1, r3
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f001 f88e 	bl	800cd24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bc08:	2180      	movs	r1, #128	@ 0x80
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f001 f88a 	bl	800cd24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc10:	e020      	b.n	800bc54 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fc1b 	bl	800c450 <USBD_CtlError>
              break;
 800bc1a:	e01b      	b.n	800bc54 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	885b      	ldrh	r3, [r3, #2]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d10e      	bne.n	800bc42 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bc24:	7bbb      	ldrb	r3, [r7, #14]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00b      	beq.n	800bc42 <USBD_StdEPReq+0xda>
 800bc2a:	7bbb      	ldrb	r3, [r7, #14]
 800bc2c:	2b80      	cmp	r3, #128	@ 0x80
 800bc2e:	d008      	beq.n	800bc42 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	88db      	ldrh	r3, [r3, #6]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d104      	bne.n	800bc42 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bc38:	7bbb      	ldrb	r3, [r7, #14]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f001 f871 	bl	800cd24 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fccc 	bl	800c5e0 <USBD_CtlSendStatus>

              break;
 800bc48:	e004      	b.n	800bc54 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fbff 	bl	800c450 <USBD_CtlError>
              break;
 800bc52:	bf00      	nop
          }
          break;
 800bc54:	e0e0      	b.n	800be18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d002      	beq.n	800bc66 <USBD_StdEPReq+0xfe>
 800bc60:	2b03      	cmp	r3, #3
 800bc62:	d015      	beq.n	800bc90 <USBD_StdEPReq+0x128>
 800bc64:	e026      	b.n	800bcb4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00c      	beq.n	800bc86 <USBD_StdEPReq+0x11e>
 800bc6c:	7bbb      	ldrb	r3, [r7, #14]
 800bc6e:	2b80      	cmp	r3, #128	@ 0x80
 800bc70:	d009      	beq.n	800bc86 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bc72:	7bbb      	ldrb	r3, [r7, #14]
 800bc74:	4619      	mov	r1, r3
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f001 f854 	bl	800cd24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bc7c:	2180      	movs	r1, #128	@ 0x80
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f001 f850 	bl	800cd24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc84:	e01c      	b.n	800bcc0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fbe1 	bl	800c450 <USBD_CtlError>
              break;
 800bc8e:	e017      	b.n	800bcc0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	885b      	ldrh	r3, [r3, #2]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d112      	bne.n	800bcbe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d004      	beq.n	800bcac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bca2:	7bbb      	ldrb	r3, [r7, #14]
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f001 f85b 	bl	800cd62 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 fc97 	bl	800c5e0 <USBD_CtlSendStatus>
              }
              break;
 800bcb2:	e004      	b.n	800bcbe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fbca 	bl	800c450 <USBD_CtlError>
              break;
 800bcbc:	e000      	b.n	800bcc0 <USBD_StdEPReq+0x158>
              break;
 800bcbe:	bf00      	nop
          }
          break;
 800bcc0:	e0aa      	b.n	800be18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d002      	beq.n	800bcd2 <USBD_StdEPReq+0x16a>
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d032      	beq.n	800bd36 <USBD_StdEPReq+0x1ce>
 800bcd0:	e097      	b.n	800be02 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcd2:	7bbb      	ldrb	r3, [r7, #14]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d007      	beq.n	800bce8 <USBD_StdEPReq+0x180>
 800bcd8:	7bbb      	ldrb	r3, [r7, #14]
 800bcda:	2b80      	cmp	r3, #128	@ 0x80
 800bcdc:	d004      	beq.n	800bce8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 fbb5 	bl	800c450 <USBD_CtlError>
                break;
 800bce6:	e091      	b.n	800be0c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	da0b      	bge.n	800bd08 <USBD_StdEPReq+0x1a0>
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
 800bcf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4413      	add	r3, r2
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	3310      	adds	r3, #16
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	4413      	add	r3, r2
 800bd04:	3304      	adds	r3, #4
 800bd06:	e00b      	b.n	800bd20 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd08:	7bbb      	ldrb	r3, [r7, #14]
 800bd0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	3304      	adds	r3, #4
 800bd20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fbf8 	bl	800c524 <USBD_CtlSendData>
              break;
 800bd34:	e06a      	b.n	800be0c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	da11      	bge.n	800bd62 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd3e:	7bbb      	ldrb	r3, [r7, #14]
 800bd40:	f003 020f 	and.w	r2, r3, #15
 800bd44:	6879      	ldr	r1, [r7, #4]
 800bd46:	4613      	mov	r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	4413      	add	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	440b      	add	r3, r1
 800bd50:	3318      	adds	r3, #24
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d117      	bne.n	800bd88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fb78 	bl	800c450 <USBD_CtlError>
                  break;
 800bd60:	e054      	b.n	800be0c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd62:	7bbb      	ldrb	r3, [r7, #14]
 800bd64:	f003 020f 	and.w	r2, r3, #15
 800bd68:	6879      	ldr	r1, [r7, #4]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	440b      	add	r3, r1
 800bd74:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d104      	bne.n	800bd88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fb65 	bl	800c450 <USBD_CtlError>
                  break;
 800bd86:	e041      	b.n	800be0c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	da0b      	bge.n	800bda8 <USBD_StdEPReq+0x240>
 800bd90:	7bbb      	ldrb	r3, [r7, #14]
 800bd92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd96:	4613      	mov	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	3310      	adds	r3, #16
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	4413      	add	r3, r2
 800bda4:	3304      	adds	r3, #4
 800bda6:	e00b      	b.n	800bdc0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
 800bdaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdae:	4613      	mov	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bdc2:	7bbb      	ldrb	r3, [r7, #14]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <USBD_StdEPReq+0x266>
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	2b80      	cmp	r3, #128	@ 0x80
 800bdcc:	d103      	bne.n	800bdd6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	e00e      	b.n	800bdf4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bdd6:	7bbb      	ldrb	r3, [r7, #14]
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 ffe0 	bl	800cda0 <USBD_LL_IsStallEP>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	2201      	movs	r2, #1
 800bdea:	601a      	str	r2, [r3, #0]
 800bdec:	e002      	b.n	800bdf4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fb92 	bl	800c524 <USBD_CtlSendData>
              break;
 800be00:	e004      	b.n	800be0c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fb23 	bl	800c450 <USBD_CtlError>
              break;
 800be0a:	bf00      	nop
          }
          break;
 800be0c:	e004      	b.n	800be18 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fb1d 	bl	800c450 <USBD_CtlError>
          break;
 800be16:	bf00      	nop
      }
      break;
 800be18:	e004      	b.n	800be24 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fb17 	bl	800c450 <USBD_CtlError>
      break;
 800be22:	bf00      	nop
  }

  return ret;
 800be24:	7bfb      	ldrb	r3, [r7, #15]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
	...

0800be30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be3a:	2300      	movs	r3, #0
 800be3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be42:	2300      	movs	r3, #0
 800be44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	885b      	ldrh	r3, [r3, #2]
 800be4a:	0a1b      	lsrs	r3, r3, #8
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	3b01      	subs	r3, #1
 800be50:	2b06      	cmp	r3, #6
 800be52:	f200 8128 	bhi.w	800c0a6 <USBD_GetDescriptor+0x276>
 800be56:	a201      	add	r2, pc, #4	@ (adr r2, 800be5c <USBD_GetDescriptor+0x2c>)
 800be58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5c:	0800be79 	.word	0x0800be79
 800be60:	0800be91 	.word	0x0800be91
 800be64:	0800bed1 	.word	0x0800bed1
 800be68:	0800c0a7 	.word	0x0800c0a7
 800be6c:	0800c0a7 	.word	0x0800c0a7
 800be70:	0800c047 	.word	0x0800c047
 800be74:	0800c073 	.word	0x0800c073
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	7c12      	ldrb	r2, [r2, #16]
 800be84:	f107 0108 	add.w	r1, r7, #8
 800be88:	4610      	mov	r0, r2
 800be8a:	4798      	blx	r3
 800be8c:	60f8      	str	r0, [r7, #12]
      break;
 800be8e:	e112      	b.n	800c0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	7c1b      	ldrb	r3, [r3, #16]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10d      	bne.n	800beb4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea0:	f107 0208 	add.w	r2, r7, #8
 800bea4:	4610      	mov	r0, r2
 800bea6:	4798      	blx	r3
 800bea8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3301      	adds	r3, #1
 800beae:	2202      	movs	r2, #2
 800beb0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800beb2:	e100      	b.n	800c0b6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bebc:	f107 0208 	add.w	r2, r7, #8
 800bec0:	4610      	mov	r0, r2
 800bec2:	4798      	blx	r3
 800bec4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	3301      	adds	r3, #1
 800beca:	2202      	movs	r2, #2
 800becc:	701a      	strb	r2, [r3, #0]
      break;
 800bece:	e0f2      	b.n	800c0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	885b      	ldrh	r3, [r3, #2]
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	2b05      	cmp	r3, #5
 800bed8:	f200 80ac 	bhi.w	800c034 <USBD_GetDescriptor+0x204>
 800bedc:	a201      	add	r2, pc, #4	@ (adr r2, 800bee4 <USBD_GetDescriptor+0xb4>)
 800bede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee2:	bf00      	nop
 800bee4:	0800befd 	.word	0x0800befd
 800bee8:	0800bf31 	.word	0x0800bf31
 800beec:	0800bf65 	.word	0x0800bf65
 800bef0:	0800bf99 	.word	0x0800bf99
 800bef4:	0800bfcd 	.word	0x0800bfcd
 800bef8:	0800c001 	.word	0x0800c001
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00b      	beq.n	800bf20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	7c12      	ldrb	r2, [r2, #16]
 800bf14:	f107 0108 	add.w	r1, r7, #8
 800bf18:	4610      	mov	r0, r2
 800bf1a:	4798      	blx	r3
 800bf1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf1e:	e091      	b.n	800c044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fa94 	bl	800c450 <USBD_CtlError>
            err++;
 800bf28:	7afb      	ldrb	r3, [r7, #11]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf2e:	e089      	b.n	800c044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00b      	beq.n	800bf54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	7c12      	ldrb	r2, [r2, #16]
 800bf48:	f107 0108 	add.w	r1, r7, #8
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	4798      	blx	r3
 800bf50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf52:	e077      	b.n	800c044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fa7a 	bl	800c450 <USBD_CtlError>
            err++;
 800bf5c:	7afb      	ldrb	r3, [r7, #11]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	72fb      	strb	r3, [r7, #11]
          break;
 800bf62:	e06f      	b.n	800c044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00b      	beq.n	800bf88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	7c12      	ldrb	r2, [r2, #16]
 800bf7c:	f107 0108 	add.w	r1, r7, #8
 800bf80:	4610      	mov	r0, r2
 800bf82:	4798      	blx	r3
 800bf84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf86:	e05d      	b.n	800c044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fa60 	bl	800c450 <USBD_CtlError>
            err++;
 800bf90:	7afb      	ldrb	r3, [r7, #11]
 800bf92:	3301      	adds	r3, #1
 800bf94:	72fb      	strb	r3, [r7, #11]
          break;
 800bf96:	e055      	b.n	800c044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00b      	beq.n	800bfbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	7c12      	ldrb	r2, [r2, #16]
 800bfb0:	f107 0108 	add.w	r1, r7, #8
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	4798      	blx	r3
 800bfb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfba:	e043      	b.n	800c044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfbc:	6839      	ldr	r1, [r7, #0]
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fa46 	bl	800c450 <USBD_CtlError>
            err++;
 800bfc4:	7afb      	ldrb	r3, [r7, #11]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	72fb      	strb	r3, [r7, #11]
          break;
 800bfca:	e03b      	b.n	800c044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfd2:	695b      	ldr	r3, [r3, #20]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00b      	beq.n	800bff0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800bfde:	695b      	ldr	r3, [r3, #20]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	7c12      	ldrb	r2, [r2, #16]
 800bfe4:	f107 0108 	add.w	r1, r7, #8
 800bfe8:	4610      	mov	r0, r2
 800bfea:	4798      	blx	r3
 800bfec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfee:	e029      	b.n	800c044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fa2c 	bl	800c450 <USBD_CtlError>
            err++;
 800bff8:	7afb      	ldrb	r3, [r7, #11]
 800bffa:	3301      	adds	r3, #1
 800bffc:	72fb      	strb	r3, [r7, #11]
          break;
 800bffe:	e021      	b.n	800c044 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00b      	beq.n	800c024 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	7c12      	ldrb	r2, [r2, #16]
 800c018:	f107 0108 	add.w	r1, r7, #8
 800c01c:	4610      	mov	r0, r2
 800c01e:	4798      	blx	r3
 800c020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c022:	e00f      	b.n	800c044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fa12 	bl	800c450 <USBD_CtlError>
            err++;
 800c02c:	7afb      	ldrb	r3, [r7, #11]
 800c02e:	3301      	adds	r3, #1
 800c030:	72fb      	strb	r3, [r7, #11]
          break;
 800c032:	e007      	b.n	800c044 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fa0a 	bl	800c450 <USBD_CtlError>
          err++;
 800c03c:	7afb      	ldrb	r3, [r7, #11]
 800c03e:	3301      	adds	r3, #1
 800c040:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c042:	e038      	b.n	800c0b6 <USBD_GetDescriptor+0x286>
 800c044:	e037      	b.n	800c0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	7c1b      	ldrb	r3, [r3, #16]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d109      	bne.n	800c062 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c056:	f107 0208 	add.w	r2, r7, #8
 800c05a:	4610      	mov	r0, r2
 800c05c:	4798      	blx	r3
 800c05e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c060:	e029      	b.n	800c0b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c062:	6839      	ldr	r1, [r7, #0]
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 f9f3 	bl	800c450 <USBD_CtlError>
        err++;
 800c06a:	7afb      	ldrb	r3, [r7, #11]
 800c06c:	3301      	adds	r3, #1
 800c06e:	72fb      	strb	r3, [r7, #11]
      break;
 800c070:	e021      	b.n	800c0b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	7c1b      	ldrb	r3, [r3, #16]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10d      	bne.n	800c096 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c082:	f107 0208 	add.w	r2, r7, #8
 800c086:	4610      	mov	r0, r2
 800c088:	4798      	blx	r3
 800c08a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3301      	adds	r3, #1
 800c090:	2207      	movs	r2, #7
 800c092:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c094:	e00f      	b.n	800c0b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f9d9 	bl	800c450 <USBD_CtlError>
        err++;
 800c09e:	7afb      	ldrb	r3, [r7, #11]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	72fb      	strb	r3, [r7, #11]
      break;
 800c0a4:	e007      	b.n	800c0b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f9d1 	bl	800c450 <USBD_CtlError>
      err++;
 800c0ae:	7afb      	ldrb	r3, [r7, #11]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c0b4:	bf00      	nop
  }

  if (err != 0U)
 800c0b6:	7afb      	ldrb	r3, [r7, #11]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d11c      	bne.n	800c0f6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c0bc:	893b      	ldrh	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d011      	beq.n	800c0e6 <USBD_GetDescriptor+0x2b6>
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	88db      	ldrh	r3, [r3, #6]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00d      	beq.n	800c0e6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	88da      	ldrh	r2, [r3, #6]
 800c0ce:	893b      	ldrh	r3, [r7, #8]
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	bf28      	it	cs
 800c0d4:	4613      	movcs	r3, r2
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c0da:	893b      	ldrh	r3, [r7, #8]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	68f9      	ldr	r1, [r7, #12]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fa1f 	bl	800c524 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	88db      	ldrh	r3, [r3, #6]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d104      	bne.n	800c0f8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 fa76 	bl	800c5e0 <USBD_CtlSendStatus>
 800c0f4:	e000      	b.n	800c0f8 <USBD_GetDescriptor+0x2c8>
    return;
 800c0f6:	bf00      	nop
    }
  }
}
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop

0800c100 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	889b      	ldrh	r3, [r3, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d130      	bne.n	800c174 <USBD_SetAddress+0x74>
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	88db      	ldrh	r3, [r3, #6]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d12c      	bne.n	800c174 <USBD_SetAddress+0x74>
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	885b      	ldrh	r3, [r3, #2]
 800c11e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c120:	d828      	bhi.n	800c174 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	885b      	ldrh	r3, [r3, #2]
 800c126:	b2db      	uxtb	r3, r3
 800c128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c12c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c134:	2b03      	cmp	r3, #3
 800c136:	d104      	bne.n	800c142 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 f988 	bl	800c450 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c140:	e01d      	b.n	800c17e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7bfa      	ldrb	r2, [r7, #15]
 800c146:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c14a:	7bfb      	ldrb	r3, [r7, #15]
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fe52 	bl	800cdf8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fa43 	bl	800c5e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c15a:	7bfb      	ldrb	r3, [r7, #15]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d004      	beq.n	800c16a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2202      	movs	r2, #2
 800c164:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c168:	e009      	b.n	800c17e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c172:	e004      	b.n	800c17e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f96a 	bl	800c450 <USBD_CtlError>
  }
}
 800c17c:	bf00      	nop
 800c17e:	bf00      	nop
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
	...

0800c188 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	885b      	ldrh	r3, [r3, #2]
 800c196:	b2da      	uxtb	r2, r3
 800c198:	4b41      	ldr	r3, [pc, #260]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c19a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c19c:	4b40      	ldr	r3, [pc, #256]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d904      	bls.n	800c1ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c1a4:	6839      	ldr	r1, [r7, #0]
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f952 	bl	800c450 <USBD_CtlError>
 800c1ac:	e075      	b.n	800c29a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d002      	beq.n	800c1be <USBD_SetConfig+0x36>
 800c1b8:	2b03      	cmp	r3, #3
 800c1ba:	d023      	beq.n	800c204 <USBD_SetConfig+0x7c>
 800c1bc:	e062      	b.n	800c284 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c1be:	4b38      	ldr	r3, [pc, #224]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d01a      	beq.n	800c1fc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c1c6:	4b36      	ldr	r3, [pc, #216]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2203      	movs	r2, #3
 800c1d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c1d8:	4b31      	ldr	r3, [pc, #196]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff f9e7 	bl	800b5b2 <USBD_SetClassConfig>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	d104      	bne.n	800c1f4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 f92f 	bl	800c450 <USBD_CtlError>
            return;
 800c1f2:	e052      	b.n	800c29a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f9f3 	bl	800c5e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c1fa:	e04e      	b.n	800c29a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f9ef 	bl	800c5e0 <USBD_CtlSendStatus>
        break;
 800c202:	e04a      	b.n	800c29a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c204:	4b26      	ldr	r3, [pc, #152]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d112      	bne.n	800c232 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2202      	movs	r2, #2
 800c210:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800c214:	4b22      	ldr	r3, [pc, #136]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	461a      	mov	r2, r3
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c21e:	4b20      	ldr	r3, [pc, #128]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7ff f9e3 	bl	800b5f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 f9d8 	bl	800c5e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c230:	e033      	b.n	800c29a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c232:	4b1b      	ldr	r3, [pc, #108]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	461a      	mov	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d01d      	beq.n	800c27c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	b2db      	uxtb	r3, r3
 800c246:	4619      	mov	r1, r3
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f7ff f9d1 	bl	800b5f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c24e:	4b14      	ldr	r3, [pc, #80]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	461a      	mov	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c258:	4b11      	ldr	r3, [pc, #68]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff f9a7 	bl	800b5b2 <USBD_SetClassConfig>
 800c264:	4603      	mov	r3, r0
 800c266:	2b02      	cmp	r3, #2
 800c268:	d104      	bne.n	800c274 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f8ef 	bl	800c450 <USBD_CtlError>
            return;
 800c272:	e012      	b.n	800c29a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f9b3 	bl	800c5e0 <USBD_CtlSendStatus>
        break;
 800c27a:	e00e      	b.n	800c29a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f9af 	bl	800c5e0 <USBD_CtlSendStatus>
        break;
 800c282:	e00a      	b.n	800c29a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 f8e2 	bl	800c450 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c28c:	4b04      	ldr	r3, [pc, #16]	@ (800c2a0 <USBD_SetConfig+0x118>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	4619      	mov	r1, r3
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7ff f9ac 	bl	800b5f0 <USBD_ClrClassConfig>
        break;
 800c298:	bf00      	nop
    }
  }
}
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	20000438 	.word	0x20000438

0800c2a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	88db      	ldrh	r3, [r3, #6]
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d004      	beq.n	800c2c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f8c9 	bl	800c450 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c2be:	e022      	b.n	800c306 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	dc02      	bgt.n	800c2d0 <USBD_GetConfig+0x2c>
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	dc03      	bgt.n	800c2d6 <USBD_GetConfig+0x32>
 800c2ce:	e015      	b.n	800c2fc <USBD_GetConfig+0x58>
 800c2d0:	2b03      	cmp	r3, #3
 800c2d2:	d00b      	beq.n	800c2ec <USBD_GetConfig+0x48>
 800c2d4:	e012      	b.n	800c2fc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	3308      	adds	r3, #8
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f91d 	bl	800c524 <USBD_CtlSendData>
        break;
 800c2ea:	e00c      	b.n	800c306 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f915 	bl	800c524 <USBD_CtlSendData>
        break;
 800c2fa:	e004      	b.n	800c306 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f8a6 	bl	800c450 <USBD_CtlError>
        break;
 800c304:	bf00      	nop
}
 800c306:	bf00      	nop
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b082      	sub	sp, #8
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c31e:	3b01      	subs	r3, #1
 800c320:	2b02      	cmp	r3, #2
 800c322:	d81e      	bhi.n	800c362 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	88db      	ldrh	r3, [r3, #6]
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d004      	beq.n	800c336 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f88e 	bl	800c450 <USBD_CtlError>
        break;
 800c334:	e01a      	b.n	800c36c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2201      	movs	r2, #1
 800c33a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c342:	2b00      	cmp	r3, #0
 800c344:	d005      	beq.n	800c352 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	f043 0202 	orr.w	r2, r3, #2
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	330c      	adds	r3, #12
 800c356:	2202      	movs	r2, #2
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 f8e2 	bl	800c524 <USBD_CtlSendData>
      break;
 800c360:	e004      	b.n	800c36c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 f873 	bl	800c450 <USBD_CtlError>
      break;
 800c36a:	bf00      	nop
  }
}
 800c36c:	bf00      	nop
 800c36e:	3708      	adds	r7, #8
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	885b      	ldrh	r3, [r3, #2]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d106      	bne.n	800c394 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2201      	movs	r2, #1
 800c38a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 f926 	bl	800c5e0 <USBD_CtlSendStatus>
  }
}
 800c394:	bf00      	nop
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	d80b      	bhi.n	800c3ca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	885b      	ldrh	r3, [r3, #2]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d10c      	bne.n	800c3d4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 f90c 	bl	800c5e0 <USBD_CtlSendStatus>
      }
      break;
 800c3c8:	e004      	b.n	800c3d4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c3ca:	6839      	ldr	r1, [r7, #0]
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 f83f 	bl	800c450 <USBD_CtlError>
      break;
 800c3d2:	e000      	b.n	800c3d6 <USBD_ClrFeature+0x3a>
      break;
 800c3d4:	bf00      	nop
  }
}
 800c3d6:	bf00      	nop
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b083      	sub	sp, #12
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	781a      	ldrb	r2, [r3, #0]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	785a      	ldrb	r2, [r3, #1]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	3302      	adds	r3, #2
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	461a      	mov	r2, r3
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	3303      	adds	r3, #3
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	021b      	lsls	r3, r3, #8
 800c408:	b29b      	uxth	r3, r3
 800c40a:	4413      	add	r3, r2
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	3304      	adds	r3, #4
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	461a      	mov	r2, r3
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	3305      	adds	r3, #5
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	021b      	lsls	r3, r3, #8
 800c422:	b29b      	uxth	r3, r3
 800c424:	4413      	add	r3, r2
 800c426:	b29a      	uxth	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	3306      	adds	r3, #6
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	461a      	mov	r2, r3
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	3307      	adds	r3, #7
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	021b      	lsls	r3, r3, #8
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	4413      	add	r3, r2
 800c440:	b29a      	uxth	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	80da      	strh	r2, [r3, #6]

}
 800c446:	bf00      	nop
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bc80      	pop	{r7}
 800c44e:	4770      	bx	lr

0800c450 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c45a:	2180      	movs	r1, #128	@ 0x80
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f000 fc61 	bl	800cd24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c462:	2100      	movs	r1, #0
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fc5d 	bl	800cd24 <USBD_LL_StallEP>
}
 800c46a:	bf00      	nop
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b086      	sub	sp, #24
 800c476:	af00      	add	r7, sp, #0
 800c478:	60f8      	str	r0, [r7, #12]
 800c47a:	60b9      	str	r1, [r7, #8]
 800c47c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c47e:	2300      	movs	r3, #0
 800c480:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d032      	beq.n	800c4ee <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f000 f834 	bl	800c4f6 <USBD_GetLen>
 800c48e:	4603      	mov	r3, r0
 800c490:	3301      	adds	r3, #1
 800c492:	b29b      	uxth	r3, r3
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	b29a      	uxth	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c49c:	7dfb      	ldrb	r3, [r7, #23]
 800c49e:	1c5a      	adds	r2, r3, #1
 800c4a0:	75fa      	strb	r2, [r7, #23]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	7812      	ldrb	r2, [r2, #0]
 800c4ac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
 800c4b0:	1c5a      	adds	r2, r3, #1
 800c4b2:	75fa      	strb	r2, [r7, #23]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	2203      	movs	r2, #3
 800c4bc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c4be:	e012      	b.n	800c4e6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	60fa      	str	r2, [r7, #12]
 800c4c6:	7dfa      	ldrb	r2, [r7, #23]
 800c4c8:	1c51      	adds	r1, r2, #1
 800c4ca:	75f9      	strb	r1, [r7, #23]
 800c4cc:	4611      	mov	r1, r2
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	440a      	add	r2, r1
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c4d6:	7dfb      	ldrb	r3, [r7, #23]
 800c4d8:	1c5a      	adds	r2, r3, #1
 800c4da:	75fa      	strb	r2, [r7, #23]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1e8      	bne.n	800c4c0 <USBD_GetString+0x4e>
    }
  }
}
 800c4ee:	bf00      	nop
 800c4f0:	3718      	adds	r7, #24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	b085      	sub	sp, #20
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4fe:	2300      	movs	r3, #0
 800c500:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c502:	e005      	b.n	800c510 <USBD_GetLen+0x1a>
  {
    len++;
 800c504:	7bfb      	ldrb	r3, [r7, #15]
 800c506:	3301      	adds	r3, #1
 800c508:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	3301      	adds	r3, #1
 800c50e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1f5      	bne.n	800c504 <USBD_GetLen+0xe>
  }

  return len;
 800c518:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	bc80      	pop	{r7}
 800c522:	4770      	bx	lr

0800c524 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	4613      	mov	r3, r2
 800c530:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2202      	movs	r2, #2
 800c536:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c53a:	88fa      	ldrh	r2, [r7, #6]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c540:	88fa      	ldrh	r2, [r7, #6]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c546:	88fb      	ldrh	r3, [r7, #6]
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	2100      	movs	r1, #0
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f000 fc72 	bl	800ce36 <USBD_LL_Transmit>

  return USBD_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	4613      	mov	r3, r2
 800c568:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c56a:	88fb      	ldrh	r3, [r7, #6]
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	2100      	movs	r1, #0
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f000 fc60 	bl	800ce36 <USBD_LL_Transmit>

  return USBD_OK;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	4613      	mov	r3, r2
 800c58c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2203      	movs	r2, #3
 800c592:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c596:	88fa      	ldrh	r2, [r7, #6]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c59e:	88fa      	ldrh	r2, [r7, #6]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5a6:	88fb      	ldrh	r3, [r7, #6]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f000 fc65 	bl	800ce7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5ca:	88fb      	ldrh	r3, [r7, #6]
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 fc53 	bl	800ce7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3710      	adds	r7, #16
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2204      	movs	r2, #4
 800c5ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fc1d 	bl	800ce36 <USBD_LL_Transmit>

  return USBD_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3708      	adds	r7, #8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b082      	sub	sp, #8
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2205      	movs	r2, #5
 800c612:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c616:	2300      	movs	r3, #0
 800c618:	2200      	movs	r2, #0
 800c61a:	2100      	movs	r1, #0
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 fc2d 	bl	800ce7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c630:	2200      	movs	r2, #0
 800c632:	4912      	ldr	r1, [pc, #72]	@ (800c67c <MX_USB_DEVICE_Init+0x50>)
 800c634:	4812      	ldr	r0, [pc, #72]	@ (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c636:	f7fe ff62 	bl	800b4fe <USBD_Init>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c640:	f7f7 f998 	bl	8003974 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c644:	490f      	ldr	r1, [pc, #60]	@ (800c684 <MX_USB_DEVICE_Init+0x58>)
 800c646:	480e      	ldr	r0, [pc, #56]	@ (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c648:	f7fe ff84 	bl	800b554 <USBD_RegisterClass>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c652:	f7f7 f98f 	bl	8003974 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c656:	490c      	ldr	r1, [pc, #48]	@ (800c688 <MX_USB_DEVICE_Init+0x5c>)
 800c658:	4809      	ldr	r0, [pc, #36]	@ (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c65a:	f7fe feb5 	bl	800b3c8 <USBD_CDC_RegisterInterface>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c664:	f7f7 f986 	bl	8003974 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c668:	4805      	ldr	r0, [pc, #20]	@ (800c680 <MX_USB_DEVICE_Init+0x54>)
 800c66a:	f7fe ff8c 	bl	800b586 <USBD_Start>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c674:	f7f7 f97e 	bl	8003974 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c678:	bf00      	nop
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	20000154 	.word	0x20000154
 800c680:	2000043c 	.word	0x2000043c
 800c684:	20000040 	.word	0x20000040
 800c688:	20000144 	.word	0x20000144

0800c68c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c690:	2200      	movs	r2, #0
 800c692:	4905      	ldr	r1, [pc, #20]	@ (800c6a8 <CDC_Init_FS+0x1c>)
 800c694:	4805      	ldr	r0, [pc, #20]	@ (800c6ac <CDC_Init_FS+0x20>)
 800c696:	f7fe fead 	bl	800b3f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c69a:	4905      	ldr	r1, [pc, #20]	@ (800c6b0 <CDC_Init_FS+0x24>)
 800c69c:	4803      	ldr	r0, [pc, #12]	@ (800c6ac <CDC_Init_FS+0x20>)
 800c69e:	f7fe fec2 	bl	800b426 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c6a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	20000ae8 	.word	0x20000ae8
 800c6ac:	2000043c 	.word	0x2000043c
 800c6b0:	20000700 	.word	0x20000700

0800c6b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bc80      	pop	{r7}
 800c6c0:	4770      	bx	lr
	...

0800c6c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	6039      	str	r1, [r7, #0]
 800c6ce:	71fb      	strb	r3, [r7, #7]
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c6d4:	79fb      	ldrb	r3, [r7, #7]
 800c6d6:	2b23      	cmp	r3, #35	@ 0x23
 800c6d8:	d84a      	bhi.n	800c770 <CDC_Control_FS+0xac>
 800c6da:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e0 <CDC_Control_FS+0x1c>)
 800c6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e0:	0800c771 	.word	0x0800c771
 800c6e4:	0800c771 	.word	0x0800c771
 800c6e8:	0800c771 	.word	0x0800c771
 800c6ec:	0800c771 	.word	0x0800c771
 800c6f0:	0800c771 	.word	0x0800c771
 800c6f4:	0800c771 	.word	0x0800c771
 800c6f8:	0800c771 	.word	0x0800c771
 800c6fc:	0800c771 	.word	0x0800c771
 800c700:	0800c771 	.word	0x0800c771
 800c704:	0800c771 	.word	0x0800c771
 800c708:	0800c771 	.word	0x0800c771
 800c70c:	0800c771 	.word	0x0800c771
 800c710:	0800c771 	.word	0x0800c771
 800c714:	0800c771 	.word	0x0800c771
 800c718:	0800c771 	.word	0x0800c771
 800c71c:	0800c771 	.word	0x0800c771
 800c720:	0800c771 	.word	0x0800c771
 800c724:	0800c771 	.word	0x0800c771
 800c728:	0800c771 	.word	0x0800c771
 800c72c:	0800c771 	.word	0x0800c771
 800c730:	0800c771 	.word	0x0800c771
 800c734:	0800c771 	.word	0x0800c771
 800c738:	0800c771 	.word	0x0800c771
 800c73c:	0800c771 	.word	0x0800c771
 800c740:	0800c771 	.word	0x0800c771
 800c744:	0800c771 	.word	0x0800c771
 800c748:	0800c771 	.word	0x0800c771
 800c74c:	0800c771 	.word	0x0800c771
 800c750:	0800c771 	.word	0x0800c771
 800c754:	0800c771 	.word	0x0800c771
 800c758:	0800c771 	.word	0x0800c771
 800c75c:	0800c771 	.word	0x0800c771
 800c760:	0800c771 	.word	0x0800c771
 800c764:	0800c771 	.word	0x0800c771
 800c768:	0800c771 	.word	0x0800c771
 800c76c:	0800c771 	.word	0x0800c771
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c770:	bf00      	nop
  }

  return (USBD_OK);
 800c772:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	bc80      	pop	{r7}
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop

0800c780 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c78a:	6879      	ldr	r1, [r7, #4]
 800c78c:	480a      	ldr	r0, [pc, #40]	@ (800c7b8 <CDC_Receive_FS+0x38>)
 800c78e:	f7fe fe4a 	bl	800b426 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c792:	4809      	ldr	r0, [pc, #36]	@ (800c7b8 <CDC_Receive_FS+0x38>)
 800c794:	f7fe fe89 	bl	800b4aa <USBD_CDC_ReceivePacket>
  if(*Len !=0)
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d006      	beq.n	800c7ae <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	4905      	ldr	r1, [pc, #20]	@ (800c7bc <CDC_Receive_FS+0x3c>)
 800c7a8:	4805      	ldr	r0, [pc, #20]	@ (800c7c0 <CDC_Receive_FS+0x40>)
 800c7aa:	f000 fc71 	bl	800d090 <memcpy>
  }
  return (USBD_OK);
 800c7ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	2000043c 	.word	0x2000043c
 800c7bc:	20000700 	.word	0x20000700
 800c7c0:	20000350 	.word	0x20000350

0800c7c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c7d4:	4b0d      	ldr	r3, [pc, #52]	@ (800c80c <CDC_Transmit_FS+0x48>)
 800c7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e00b      	b.n	800c802 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c7ea:	887b      	ldrh	r3, [r7, #2]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	6879      	ldr	r1, [r7, #4]
 800c7f0:	4806      	ldr	r0, [pc, #24]	@ (800c80c <CDC_Transmit_FS+0x48>)
 800c7f2:	f7fe fdff 	bl	800b3f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c7f6:	4805      	ldr	r0, [pc, #20]	@ (800c80c <CDC_Transmit_FS+0x48>)
 800c7f8:	f7fe fe28 	bl	800b44c <USBD_CDC_TransmitPacket>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c800:	7bfb      	ldrb	r3, [r7, #15]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	2000043c 	.word	0x2000043c

0800c810 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	4603      	mov	r3, r0
 800c818:	6039      	str	r1, [r7, #0]
 800c81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	2212      	movs	r2, #18
 800c820:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c822:	4b03      	ldr	r3, [pc, #12]	@ (800c830 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c824:	4618      	mov	r0, r3
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	bc80      	pop	{r7}
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	20000170 	.word	0x20000170

0800c834 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	4603      	mov	r3, r0
 800c83c:	6039      	str	r1, [r7, #0]
 800c83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	2204      	movs	r2, #4
 800c844:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c846:	4b03      	ldr	r3, [pc, #12]	@ (800c854 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bc80      	pop	{r7}
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	20000184 	.word	0x20000184

0800c858 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	4603      	mov	r3, r0
 800c860:	6039      	str	r1, [r7, #0]
 800c862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c864:	79fb      	ldrb	r3, [r7, #7]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d105      	bne.n	800c876 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	4907      	ldr	r1, [pc, #28]	@ (800c88c <USBD_FS_ProductStrDescriptor+0x34>)
 800c86e:	4808      	ldr	r0, [pc, #32]	@ (800c890 <USBD_FS_ProductStrDescriptor+0x38>)
 800c870:	f7ff fdff 	bl	800c472 <USBD_GetString>
 800c874:	e004      	b.n	800c880 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c876:	683a      	ldr	r2, [r7, #0]
 800c878:	4904      	ldr	r1, [pc, #16]	@ (800c88c <USBD_FS_ProductStrDescriptor+0x34>)
 800c87a:	4805      	ldr	r0, [pc, #20]	@ (800c890 <USBD_FS_ProductStrDescriptor+0x38>)
 800c87c:	f7ff fdf9 	bl	800c472 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c880:	4b02      	ldr	r3, [pc, #8]	@ (800c88c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c882:	4618      	mov	r0, r3
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	20000ed0 	.word	0x20000ed0
 800c890:	0800e334 	.word	0x0800e334

0800c894 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	6039      	str	r1, [r7, #0]
 800c89e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c8a0:	683a      	ldr	r2, [r7, #0]
 800c8a2:	4904      	ldr	r1, [pc, #16]	@ (800c8b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c8a4:	4804      	ldr	r0, [pc, #16]	@ (800c8b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c8a6:	f7ff fde4 	bl	800c472 <USBD_GetString>
  return USBD_StrDesc;
 800c8aa:	4b02      	ldr	r3, [pc, #8]	@ (800c8b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	20000ed0 	.word	0x20000ed0
 800c8b8:	0800e34c 	.word	0x0800e34c

0800c8bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	6039      	str	r1, [r7, #0]
 800c8c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	221a      	movs	r2, #26
 800c8cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c8ce:	f000 f843 	bl	800c958 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c8d2:	4b02      	ldr	r3, [pc, #8]	@ (800c8dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20000188 	.word	0x20000188

0800c8e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	6039      	str	r1, [r7, #0]
 800c8ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c8ec:	79fb      	ldrb	r3, [r7, #7]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d105      	bne.n	800c8fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8f2:	683a      	ldr	r2, [r7, #0]
 800c8f4:	4907      	ldr	r1, [pc, #28]	@ (800c914 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8f6:	4808      	ldr	r0, [pc, #32]	@ (800c918 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c8f8:	f7ff fdbb 	bl	800c472 <USBD_GetString>
 800c8fc:	e004      	b.n	800c908 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	4904      	ldr	r1, [pc, #16]	@ (800c914 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c902:	4805      	ldr	r0, [pc, #20]	@ (800c918 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c904:	f7ff fdb5 	bl	800c472 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c908:	4b02      	ldr	r3, [pc, #8]	@ (800c914 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	20000ed0 	.word	0x20000ed0
 800c918:	0800e360 	.word	0x0800e360

0800c91c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	4603      	mov	r3, r0
 800c924:	6039      	str	r1, [r7, #0]
 800c926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c928:	79fb      	ldrb	r3, [r7, #7]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d105      	bne.n	800c93a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c92e:	683a      	ldr	r2, [r7, #0]
 800c930:	4907      	ldr	r1, [pc, #28]	@ (800c950 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c932:	4808      	ldr	r0, [pc, #32]	@ (800c954 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c934:	f7ff fd9d 	bl	800c472 <USBD_GetString>
 800c938:	e004      	b.n	800c944 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	4904      	ldr	r1, [pc, #16]	@ (800c950 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c93e:	4805      	ldr	r0, [pc, #20]	@ (800c954 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c940:	f7ff fd97 	bl	800c472 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c944:	4b02      	ldr	r3, [pc, #8]	@ (800c950 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c946:	4618      	mov	r0, r3
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	20000ed0 	.word	0x20000ed0
 800c954:	0800e36c 	.word	0x0800e36c

0800c958 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c95e:	4b0f      	ldr	r3, [pc, #60]	@ (800c99c <Get_SerialNum+0x44>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c964:	4b0e      	ldr	r3, [pc, #56]	@ (800c9a0 <Get_SerialNum+0x48>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c96a:	4b0e      	ldr	r3, [pc, #56]	@ (800c9a4 <Get_SerialNum+0x4c>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4413      	add	r3, r2
 800c976:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d009      	beq.n	800c992 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c97e:	2208      	movs	r2, #8
 800c980:	4909      	ldr	r1, [pc, #36]	@ (800c9a8 <Get_SerialNum+0x50>)
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f000 f814 	bl	800c9b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c988:	2204      	movs	r2, #4
 800c98a:	4908      	ldr	r1, [pc, #32]	@ (800c9ac <Get_SerialNum+0x54>)
 800c98c:	68b8      	ldr	r0, [r7, #8]
 800c98e:	f000 f80f 	bl	800c9b0 <IntToUnicode>
  }
}
 800c992:	bf00      	nop
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	1ffff7e8 	.word	0x1ffff7e8
 800c9a0:	1ffff7ec 	.word	0x1ffff7ec
 800c9a4:	1ffff7f0 	.word	0x1ffff7f0
 800c9a8:	2000018a 	.word	0x2000018a
 800c9ac:	2000019a 	.word	0x2000019a

0800c9b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b087      	sub	sp, #28
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	75fb      	strb	r3, [r7, #23]
 800c9c6:	e027      	b.n	800ca18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	0f1b      	lsrs	r3, r3, #28
 800c9cc:	2b09      	cmp	r3, #9
 800c9ce:	d80b      	bhi.n	800c9e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	0f1b      	lsrs	r3, r3, #28
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	7dfb      	ldrb	r3, [r7, #23]
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	4619      	mov	r1, r3
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	440b      	add	r3, r1
 800c9e0:	3230      	adds	r2, #48	@ 0x30
 800c9e2:	b2d2      	uxtb	r2, r2
 800c9e4:	701a      	strb	r2, [r3, #0]
 800c9e6:	e00a      	b.n	800c9fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	0f1b      	lsrs	r3, r3, #28
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	440b      	add	r3, r1
 800c9f8:	3237      	adds	r2, #55	@ 0x37
 800c9fa:	b2d2      	uxtb	r2, r2
 800c9fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	011b      	lsls	r3, r3, #4
 800ca02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	3301      	adds	r3, #1
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	2200      	movs	r2, #0
 800ca10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	3301      	adds	r3, #1
 800ca16:	75fb      	strb	r3, [r7, #23]
 800ca18:	7dfa      	ldrb	r2, [r7, #23]
 800ca1a:	79fb      	ldrb	r3, [r7, #7]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d3d3      	bcc.n	800c9c8 <IntToUnicode+0x18>
  }
}
 800ca20:	bf00      	nop
 800ca22:	bf00      	nop
 800ca24:	371c      	adds	r7, #28
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bc80      	pop	{r7}
 800ca2a:	4770      	bx	lr

0800ca2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a0d      	ldr	r2, [pc, #52]	@ (800ca70 <HAL_PCD_MspInit+0x44>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d113      	bne.n	800ca66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ca3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca74 <HAL_PCD_MspInit+0x48>)
 800ca40:	69db      	ldr	r3, [r3, #28]
 800ca42:	4a0c      	ldr	r2, [pc, #48]	@ (800ca74 <HAL_PCD_MspInit+0x48>)
 800ca44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca48:	61d3      	str	r3, [r2, #28]
 800ca4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ca74 <HAL_PCD_MspInit+0x48>)
 800ca4c:	69db      	ldr	r3, [r3, #28]
 800ca4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ca56:	2200      	movs	r2, #0
 800ca58:	2100      	movs	r1, #0
 800ca5a:	2014      	movs	r0, #20
 800ca5c:	f7f7 fd6f 	bl	800453e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ca60:	2014      	movs	r0, #20
 800ca62:	f7f7 fd88 	bl	8004576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca66:	bf00      	nop
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	40005c00 	.word	0x40005c00
 800ca74:	40021000 	.word	0x40021000

0800ca78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4610      	mov	r0, r2
 800ca90:	f7fe fdc1 	bl	800b616 <USBD_LL_SetupStage>
}
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	460b      	mov	r3, r1
 800caa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800caae:	78fa      	ldrb	r2, [r7, #3]
 800cab0:	6879      	ldr	r1, [r7, #4]
 800cab2:	4613      	mov	r3, r2
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	4413      	add	r3, r2
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	440b      	add	r3, r1
 800cabc:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	78fb      	ldrb	r3, [r7, #3]
 800cac4:	4619      	mov	r1, r3
 800cac6:	f7fe fdf3 	bl	800b6b0 <USBD_LL_DataOutStage>
}
 800caca:	bf00      	nop
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b082      	sub	sp, #8
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
 800cada:	460b      	mov	r3, r1
 800cadc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800cae4:	78fa      	ldrb	r2, [r7, #3]
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	4613      	mov	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	00db      	lsls	r3, r3, #3
 800caf0:	440b      	add	r3, r1
 800caf2:	333c      	adds	r3, #60	@ 0x3c
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	78fb      	ldrb	r3, [r7, #3]
 800caf8:	4619      	mov	r1, r3
 800cafa:	f7fe fe4a 	bl	800b792 <USBD_LL_DataInStage>
}
 800cafe:	bf00      	nop
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b082      	sub	sp, #8
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fe ff5a 	bl	800b9ce <USBD_LL_SOF>
}
 800cb1a:	bf00      	nop
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b084      	sub	sp, #16
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	2b02      	cmp	r3, #2
 800cb34:	d001      	beq.n	800cb3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb36:	f7f6 ff1d 	bl	8003974 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cb40:	7bfa      	ldrb	r2, [r7, #15]
 800cb42:	4611      	mov	r1, r2
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fe ff0a 	bl	800b95e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fe fec3 	bl	800b8dc <USBD_LL_Reset>
}
 800cb56:	bf00      	nop
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
	...

0800cb60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fe ff04 	bl	800b97c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	699b      	ldr	r3, [r3, #24]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d005      	beq.n	800cb88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb7c:	4b04      	ldr	r3, [pc, #16]	@ (800cb90 <HAL_PCD_SuspendCallback+0x30>)
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	4a03      	ldr	r2, [pc, #12]	@ (800cb90 <HAL_PCD_SuspendCallback+0x30>)
 800cb82:	f043 0306 	orr.w	r3, r3, #6
 800cb86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb88:	bf00      	nop
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	e000ed00 	.word	0xe000ed00

0800cb94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fe fefe 	bl	800b9a4 <USBD_LL_Resume>
}
 800cba8:	bf00      	nop
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cbb8:	4a28      	ldr	r2, [pc, #160]	@ (800cc5c <USBD_LL_Init+0xac>)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4a26      	ldr	r2, [pc, #152]	@ (800cc5c <USBD_LL_Init+0xac>)
 800cbc4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cbc8:	4b24      	ldr	r3, [pc, #144]	@ (800cc5c <USBD_LL_Init+0xac>)
 800cbca:	4a25      	ldr	r2, [pc, #148]	@ (800cc60 <USBD_LL_Init+0xb0>)
 800cbcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cbce:	4b23      	ldr	r3, [pc, #140]	@ (800cc5c <USBD_LL_Init+0xac>)
 800cbd0:	2208      	movs	r2, #8
 800cbd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cbd4:	4b21      	ldr	r3, [pc, #132]	@ (800cc5c <USBD_LL_Init+0xac>)
 800cbd6:	2202      	movs	r2, #2
 800cbd8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cbda:	4b20      	ldr	r3, [pc, #128]	@ (800cc5c <USBD_LL_Init+0xac>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cbe0:	4b1e      	ldr	r3, [pc, #120]	@ (800cc5c <USBD_LL_Init+0xac>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cbe6:	4b1d      	ldr	r3, [pc, #116]	@ (800cc5c <USBD_LL_Init+0xac>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cbec:	481b      	ldr	r0, [pc, #108]	@ (800cc5c <USBD_LL_Init+0xac>)
 800cbee:	f7f8 fcfd 	bl	80055ec <HAL_PCD_Init>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cbf8:	f7f6 febc 	bl	8003974 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc02:	2318      	movs	r3, #24
 800cc04:	2200      	movs	r2, #0
 800cc06:	2100      	movs	r1, #0
 800cc08:	f7fa f83c 	bl	8006c84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc12:	2358      	movs	r3, #88	@ 0x58
 800cc14:	2200      	movs	r2, #0
 800cc16:	2180      	movs	r1, #128	@ 0x80
 800cc18:	f7fa f834 	bl	8006c84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc22:	23c0      	movs	r3, #192	@ 0xc0
 800cc24:	2200      	movs	r2, #0
 800cc26:	2181      	movs	r1, #129	@ 0x81
 800cc28:	f7fa f82c 	bl	8006c84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc32:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cc36:	2200      	movs	r2, #0
 800cc38:	2101      	movs	r1, #1
 800cc3a:	f7fa f823 	bl	8006c84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2182      	movs	r1, #130	@ 0x82
 800cc4c:	f7fa f81a 	bl	8006c84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	200010d0 	.word	0x200010d0
 800cc60:	40005c00 	.word	0x40005c00

0800cc64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc70:	2300      	movs	r3, #0
 800cc72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7f8 fdc1 	bl	8005802 <HAL_PCD_Start>
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 f94e 	bl	800cf28 <USBD_Get_USB_Status>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc90:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	4608      	mov	r0, r1
 800cca4:	4611      	mov	r1, r2
 800cca6:	461a      	mov	r2, r3
 800cca8:	4603      	mov	r3, r0
 800ccaa:	70fb      	strb	r3, [r7, #3]
 800ccac:	460b      	mov	r3, r1
 800ccae:	70bb      	strb	r3, [r7, #2]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ccc2:	78bb      	ldrb	r3, [r7, #2]
 800ccc4:	883a      	ldrh	r2, [r7, #0]
 800ccc6:	78f9      	ldrb	r1, [r7, #3]
 800ccc8:	f7f8 ff39 	bl	8005b3e <HAL_PCD_EP_Open>
 800cccc:	4603      	mov	r3, r0
 800ccce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 f928 	bl	800cf28 <USBD_Get_USB_Status>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b084      	sub	sp, #16
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	460b      	mov	r3, r1
 800ccf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd00:	78fa      	ldrb	r2, [r7, #3]
 800cd02:	4611      	mov	r1, r2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7f8 ff80 	bl	8005c0a <HAL_PCD_EP_Close>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd0e:	7bfb      	ldrb	r3, [r7, #15]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 f909 	bl	800cf28 <USBD_Get_USB_Status>
 800cd16:	4603      	mov	r3, r0
 800cd18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd30:	2300      	movs	r3, #0
 800cd32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd34:	2300      	movs	r3, #0
 800cd36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd3e:	78fa      	ldrb	r2, [r7, #3]
 800cd40:	4611      	mov	r1, r2
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7f9 f840 	bl	8005dc8 <HAL_PCD_EP_SetStall>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 f8ea 	bl	800cf28 <USBD_Get_USB_Status>
 800cd54:	4603      	mov	r3, r0
 800cd56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd58:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b084      	sub	sp, #16
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd7c:	78fa      	ldrb	r2, [r7, #3]
 800cd7e:	4611      	mov	r1, r2
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7f9 f881 	bl	8005e88 <HAL_PCD_EP_ClrStall>
 800cd86:	4603      	mov	r3, r0
 800cd88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd8a:	7bfb      	ldrb	r3, [r7, #15]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f000 f8cb 	bl	800cf28 <USBD_Get_USB_Status>
 800cd92:	4603      	mov	r3, r0
 800cd94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	460b      	mov	r3, r1
 800cdaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cdb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cdb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	da0c      	bge.n	800cdd6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cdbc:	78fb      	ldrb	r3, [r7, #3]
 800cdbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdc2:	68f9      	ldr	r1, [r7, #12]
 800cdc4:	1c5a      	adds	r2, r3, #1
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	4413      	add	r3, r2
 800cdcc:	00db      	lsls	r3, r3, #3
 800cdce:	440b      	add	r3, r1
 800cdd0:	3302      	adds	r3, #2
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	e00b      	b.n	800cdee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cdd6:	78fb      	ldrb	r3, [r7, #3]
 800cdd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cddc:	68f9      	ldr	r1, [r7, #12]
 800cdde:	4613      	mov	r3, r2
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	4413      	add	r3, r2
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	440b      	add	r3, r1
 800cde8:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800cdec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bc80      	pop	{r7}
 800cdf6:	4770      	bx	lr

0800cdf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	460b      	mov	r3, r1
 800ce02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ce12:	78fa      	ldrb	r2, [r7, #3]
 800ce14:	4611      	mov	r1, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7f8 fe6c 	bl	8005af4 <HAL_PCD_SetAddress>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f000 f880 	bl	800cf28 <USBD_Get_USB_Status>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b086      	sub	sp, #24
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	60f8      	str	r0, [r7, #12]
 800ce3e:	607a      	str	r2, [r7, #4]
 800ce40:	461a      	mov	r2, r3
 800ce42:	460b      	mov	r3, r1
 800ce44:	72fb      	strb	r3, [r7, #11]
 800ce46:	4613      	mov	r3, r2
 800ce48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce58:	893b      	ldrh	r3, [r7, #8]
 800ce5a:	7af9      	ldrb	r1, [r7, #11]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	f7f8 ff70 	bl	8005d42 <HAL_PCD_EP_Transmit>
 800ce62:	4603      	mov	r3, r0
 800ce64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce66:	7dfb      	ldrb	r3, [r7, #23]
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 f85d 	bl	800cf28 <USBD_Get_USB_Status>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce72:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	607a      	str	r2, [r7, #4]
 800ce86:	461a      	mov	r2, r3
 800ce88:	460b      	mov	r3, r1
 800ce8a:	72fb      	strb	r3, [r7, #11]
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce90:	2300      	movs	r3, #0
 800ce92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce9e:	893b      	ldrh	r3, [r7, #8]
 800cea0:	7af9      	ldrb	r1, [r7, #11]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	f7f8 fef9 	bl	8005c9a <HAL_PCD_EP_Receive>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 f83a 	bl	800cf28 <USBD_Get_USB_Status>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ceb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b082      	sub	sp, #8
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	460b      	mov	r3, r1
 800cecc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ced4:	78fa      	ldrb	r2, [r7, #3]
 800ced6:	4611      	mov	r1, r2
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7f8 ff1b 	bl	8005d14 <HAL_PCD_EP_GetRxCount>
 800cede:	4603      	mov	r3, r0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cef0:	4b02      	ldr	r3, [pc, #8]	@ (800cefc <USBD_static_malloc+0x14>)
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	370c      	adds	r7, #12
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bc80      	pop	{r7}
 800cefa:	4770      	bx	lr
 800cefc:	200013bc 	.word	0x200013bc

0800cf00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]

}
 800cf08:	bf00      	nop
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bc80      	pop	{r7}
 800cf10:	4770      	bx	lr

0800cf12 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf12:	b480      	push	{r7}
 800cf14:	b083      	sub	sp, #12
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cf1e:	bf00      	nop
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bc80      	pop	{r7}
 800cf26:	4770      	bx	lr

0800cf28 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	4603      	mov	r3, r0
 800cf30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf36:	79fb      	ldrb	r3, [r7, #7]
 800cf38:	2b03      	cmp	r3, #3
 800cf3a:	d817      	bhi.n	800cf6c <USBD_Get_USB_Status+0x44>
 800cf3c:	a201      	add	r2, pc, #4	@ (adr r2, 800cf44 <USBD_Get_USB_Status+0x1c>)
 800cf3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf42:	bf00      	nop
 800cf44:	0800cf55 	.word	0x0800cf55
 800cf48:	0800cf5b 	.word	0x0800cf5b
 800cf4c:	0800cf61 	.word	0x0800cf61
 800cf50:	0800cf67 	.word	0x0800cf67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf54:	2300      	movs	r3, #0
 800cf56:	73fb      	strb	r3, [r7, #15]
    break;
 800cf58:	e00b      	b.n	800cf72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf5a:	2302      	movs	r3, #2
 800cf5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf5e:	e008      	b.n	800cf72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf60:	2301      	movs	r3, #1
 800cf62:	73fb      	strb	r3, [r7, #15]
    break;
 800cf64:	e005      	b.n	800cf72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf66:	2302      	movs	r3, #2
 800cf68:	73fb      	strb	r3, [r7, #15]
    break;
 800cf6a:	e002      	b.n	800cf72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf70:	bf00      	nop
  }
  return usb_status;
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3714      	adds	r7, #20
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bc80      	pop	{r7}
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop

0800cf80 <sniprintf>:
 800cf80:	b40c      	push	{r2, r3}
 800cf82:	b530      	push	{r4, r5, lr}
 800cf84:	4b17      	ldr	r3, [pc, #92]	@ (800cfe4 <sniprintf+0x64>)
 800cf86:	1e0c      	subs	r4, r1, #0
 800cf88:	681d      	ldr	r5, [r3, #0]
 800cf8a:	b09d      	sub	sp, #116	@ 0x74
 800cf8c:	da08      	bge.n	800cfa0 <sniprintf+0x20>
 800cf8e:	238b      	movs	r3, #139	@ 0x8b
 800cf90:	f04f 30ff 	mov.w	r0, #4294967295
 800cf94:	602b      	str	r3, [r5, #0]
 800cf96:	b01d      	add	sp, #116	@ 0x74
 800cf98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf9c:	b002      	add	sp, #8
 800cf9e:	4770      	bx	lr
 800cfa0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cfa4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cfa8:	bf0c      	ite	eq
 800cfaa:	4623      	moveq	r3, r4
 800cfac:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cfb0:	9304      	str	r3, [sp, #16]
 800cfb2:	9307      	str	r3, [sp, #28]
 800cfb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cfb8:	9002      	str	r0, [sp, #8]
 800cfba:	9006      	str	r0, [sp, #24]
 800cfbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	ab21      	add	r3, sp, #132	@ 0x84
 800cfc4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cfc6:	a902      	add	r1, sp, #8
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	f000 f9c1 	bl	800d350 <_svfiprintf_r>
 800cfce:	1c43      	adds	r3, r0, #1
 800cfd0:	bfbc      	itt	lt
 800cfd2:	238b      	movlt	r3, #139	@ 0x8b
 800cfd4:	602b      	strlt	r3, [r5, #0]
 800cfd6:	2c00      	cmp	r4, #0
 800cfd8:	d0dd      	beq.n	800cf96 <sniprintf+0x16>
 800cfda:	2200      	movs	r2, #0
 800cfdc:	9b02      	ldr	r3, [sp, #8]
 800cfde:	701a      	strb	r2, [r3, #0]
 800cfe0:	e7d9      	b.n	800cf96 <sniprintf+0x16>
 800cfe2:	bf00      	nop
 800cfe4:	200001a4 	.word	0x200001a4

0800cfe8 <siprintf>:
 800cfe8:	b40e      	push	{r1, r2, r3}
 800cfea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cfee:	b500      	push	{lr}
 800cff0:	b09c      	sub	sp, #112	@ 0x70
 800cff2:	ab1d      	add	r3, sp, #116	@ 0x74
 800cff4:	9002      	str	r0, [sp, #8]
 800cff6:	9006      	str	r0, [sp, #24]
 800cff8:	9107      	str	r1, [sp, #28]
 800cffa:	9104      	str	r1, [sp, #16]
 800cffc:	4808      	ldr	r0, [pc, #32]	@ (800d020 <siprintf+0x38>)
 800cffe:	4909      	ldr	r1, [pc, #36]	@ (800d024 <siprintf+0x3c>)
 800d000:	f853 2b04 	ldr.w	r2, [r3], #4
 800d004:	9105      	str	r1, [sp, #20]
 800d006:	6800      	ldr	r0, [r0, #0]
 800d008:	a902      	add	r1, sp, #8
 800d00a:	9301      	str	r3, [sp, #4]
 800d00c:	f000 f9a0 	bl	800d350 <_svfiprintf_r>
 800d010:	2200      	movs	r2, #0
 800d012:	9b02      	ldr	r3, [sp, #8]
 800d014:	701a      	strb	r2, [r3, #0]
 800d016:	b01c      	add	sp, #112	@ 0x70
 800d018:	f85d eb04 	ldr.w	lr, [sp], #4
 800d01c:	b003      	add	sp, #12
 800d01e:	4770      	bx	lr
 800d020:	200001a4 	.word	0x200001a4
 800d024:	ffff0208 	.word	0xffff0208

0800d028 <memset>:
 800d028:	4603      	mov	r3, r0
 800d02a:	4402      	add	r2, r0
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d100      	bne.n	800d032 <memset+0xa>
 800d030:	4770      	bx	lr
 800d032:	f803 1b01 	strb.w	r1, [r3], #1
 800d036:	e7f9      	b.n	800d02c <memset+0x4>

0800d038 <__errno>:
 800d038:	4b01      	ldr	r3, [pc, #4]	@ (800d040 <__errno+0x8>)
 800d03a:	6818      	ldr	r0, [r3, #0]
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	200001a4 	.word	0x200001a4

0800d044 <__libc_init_array>:
 800d044:	b570      	push	{r4, r5, r6, lr}
 800d046:	2600      	movs	r6, #0
 800d048:	4d0c      	ldr	r5, [pc, #48]	@ (800d07c <__libc_init_array+0x38>)
 800d04a:	4c0d      	ldr	r4, [pc, #52]	@ (800d080 <__libc_init_array+0x3c>)
 800d04c:	1b64      	subs	r4, r4, r5
 800d04e:	10a4      	asrs	r4, r4, #2
 800d050:	42a6      	cmp	r6, r4
 800d052:	d109      	bne.n	800d068 <__libc_init_array+0x24>
 800d054:	f000 fc78 	bl	800d948 <_init>
 800d058:	2600      	movs	r6, #0
 800d05a:	4d0a      	ldr	r5, [pc, #40]	@ (800d084 <__libc_init_array+0x40>)
 800d05c:	4c0a      	ldr	r4, [pc, #40]	@ (800d088 <__libc_init_array+0x44>)
 800d05e:	1b64      	subs	r4, r4, r5
 800d060:	10a4      	asrs	r4, r4, #2
 800d062:	42a6      	cmp	r6, r4
 800d064:	d105      	bne.n	800d072 <__libc_init_array+0x2e>
 800d066:	bd70      	pop	{r4, r5, r6, pc}
 800d068:	f855 3b04 	ldr.w	r3, [r5], #4
 800d06c:	4798      	blx	r3
 800d06e:	3601      	adds	r6, #1
 800d070:	e7ee      	b.n	800d050 <__libc_init_array+0xc>
 800d072:	f855 3b04 	ldr.w	r3, [r5], #4
 800d076:	4798      	blx	r3
 800d078:	3601      	adds	r6, #1
 800d07a:	e7f2      	b.n	800d062 <__libc_init_array+0x1e>
 800d07c:	0800e3e0 	.word	0x0800e3e0
 800d080:	0800e3e0 	.word	0x0800e3e0
 800d084:	0800e3e0 	.word	0x0800e3e0
 800d088:	0800e3e4 	.word	0x0800e3e4

0800d08c <__retarget_lock_acquire_recursive>:
 800d08c:	4770      	bx	lr

0800d08e <__retarget_lock_release_recursive>:
 800d08e:	4770      	bx	lr

0800d090 <memcpy>:
 800d090:	440a      	add	r2, r1
 800d092:	4291      	cmp	r1, r2
 800d094:	f100 33ff 	add.w	r3, r0, #4294967295
 800d098:	d100      	bne.n	800d09c <memcpy+0xc>
 800d09a:	4770      	bx	lr
 800d09c:	b510      	push	{r4, lr}
 800d09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0a2:	4291      	cmp	r1, r2
 800d0a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0a8:	d1f9      	bne.n	800d09e <memcpy+0xe>
 800d0aa:	bd10      	pop	{r4, pc}

0800d0ac <_free_r>:
 800d0ac:	b538      	push	{r3, r4, r5, lr}
 800d0ae:	4605      	mov	r5, r0
 800d0b0:	2900      	cmp	r1, #0
 800d0b2:	d040      	beq.n	800d136 <_free_r+0x8a>
 800d0b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0b8:	1f0c      	subs	r4, r1, #4
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	bfb8      	it	lt
 800d0be:	18e4      	addlt	r4, r4, r3
 800d0c0:	f000 f8de 	bl	800d280 <__malloc_lock>
 800d0c4:	4a1c      	ldr	r2, [pc, #112]	@ (800d138 <_free_r+0x8c>)
 800d0c6:	6813      	ldr	r3, [r2, #0]
 800d0c8:	b933      	cbnz	r3, 800d0d8 <_free_r+0x2c>
 800d0ca:	6063      	str	r3, [r4, #4]
 800d0cc:	6014      	str	r4, [r2, #0]
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0d4:	f000 b8da 	b.w	800d28c <__malloc_unlock>
 800d0d8:	42a3      	cmp	r3, r4
 800d0da:	d908      	bls.n	800d0ee <_free_r+0x42>
 800d0dc:	6820      	ldr	r0, [r4, #0]
 800d0de:	1821      	adds	r1, r4, r0
 800d0e0:	428b      	cmp	r3, r1
 800d0e2:	bf01      	itttt	eq
 800d0e4:	6819      	ldreq	r1, [r3, #0]
 800d0e6:	685b      	ldreq	r3, [r3, #4]
 800d0e8:	1809      	addeq	r1, r1, r0
 800d0ea:	6021      	streq	r1, [r4, #0]
 800d0ec:	e7ed      	b.n	800d0ca <_free_r+0x1e>
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	b10b      	cbz	r3, 800d0f8 <_free_r+0x4c>
 800d0f4:	42a3      	cmp	r3, r4
 800d0f6:	d9fa      	bls.n	800d0ee <_free_r+0x42>
 800d0f8:	6811      	ldr	r1, [r2, #0]
 800d0fa:	1850      	adds	r0, r2, r1
 800d0fc:	42a0      	cmp	r0, r4
 800d0fe:	d10b      	bne.n	800d118 <_free_r+0x6c>
 800d100:	6820      	ldr	r0, [r4, #0]
 800d102:	4401      	add	r1, r0
 800d104:	1850      	adds	r0, r2, r1
 800d106:	4283      	cmp	r3, r0
 800d108:	6011      	str	r1, [r2, #0]
 800d10a:	d1e0      	bne.n	800d0ce <_free_r+0x22>
 800d10c:	6818      	ldr	r0, [r3, #0]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	4408      	add	r0, r1
 800d112:	6010      	str	r0, [r2, #0]
 800d114:	6053      	str	r3, [r2, #4]
 800d116:	e7da      	b.n	800d0ce <_free_r+0x22>
 800d118:	d902      	bls.n	800d120 <_free_r+0x74>
 800d11a:	230c      	movs	r3, #12
 800d11c:	602b      	str	r3, [r5, #0]
 800d11e:	e7d6      	b.n	800d0ce <_free_r+0x22>
 800d120:	6820      	ldr	r0, [r4, #0]
 800d122:	1821      	adds	r1, r4, r0
 800d124:	428b      	cmp	r3, r1
 800d126:	bf01      	itttt	eq
 800d128:	6819      	ldreq	r1, [r3, #0]
 800d12a:	685b      	ldreq	r3, [r3, #4]
 800d12c:	1809      	addeq	r1, r1, r0
 800d12e:	6021      	streq	r1, [r4, #0]
 800d130:	6063      	str	r3, [r4, #4]
 800d132:	6054      	str	r4, [r2, #4]
 800d134:	e7cb      	b.n	800d0ce <_free_r+0x22>
 800d136:	bd38      	pop	{r3, r4, r5, pc}
 800d138:	20001720 	.word	0x20001720

0800d13c <sbrk_aligned>:
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	4e0f      	ldr	r6, [pc, #60]	@ (800d17c <sbrk_aligned+0x40>)
 800d140:	460c      	mov	r4, r1
 800d142:	6831      	ldr	r1, [r6, #0]
 800d144:	4605      	mov	r5, r0
 800d146:	b911      	cbnz	r1, 800d14e <sbrk_aligned+0x12>
 800d148:	f000 fbaa 	bl	800d8a0 <_sbrk_r>
 800d14c:	6030      	str	r0, [r6, #0]
 800d14e:	4621      	mov	r1, r4
 800d150:	4628      	mov	r0, r5
 800d152:	f000 fba5 	bl	800d8a0 <_sbrk_r>
 800d156:	1c43      	adds	r3, r0, #1
 800d158:	d103      	bne.n	800d162 <sbrk_aligned+0x26>
 800d15a:	f04f 34ff 	mov.w	r4, #4294967295
 800d15e:	4620      	mov	r0, r4
 800d160:	bd70      	pop	{r4, r5, r6, pc}
 800d162:	1cc4      	adds	r4, r0, #3
 800d164:	f024 0403 	bic.w	r4, r4, #3
 800d168:	42a0      	cmp	r0, r4
 800d16a:	d0f8      	beq.n	800d15e <sbrk_aligned+0x22>
 800d16c:	1a21      	subs	r1, r4, r0
 800d16e:	4628      	mov	r0, r5
 800d170:	f000 fb96 	bl	800d8a0 <_sbrk_r>
 800d174:	3001      	adds	r0, #1
 800d176:	d1f2      	bne.n	800d15e <sbrk_aligned+0x22>
 800d178:	e7ef      	b.n	800d15a <sbrk_aligned+0x1e>
 800d17a:	bf00      	nop
 800d17c:	2000171c 	.word	0x2000171c

0800d180 <_malloc_r>:
 800d180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d184:	1ccd      	adds	r5, r1, #3
 800d186:	f025 0503 	bic.w	r5, r5, #3
 800d18a:	3508      	adds	r5, #8
 800d18c:	2d0c      	cmp	r5, #12
 800d18e:	bf38      	it	cc
 800d190:	250c      	movcc	r5, #12
 800d192:	2d00      	cmp	r5, #0
 800d194:	4606      	mov	r6, r0
 800d196:	db01      	blt.n	800d19c <_malloc_r+0x1c>
 800d198:	42a9      	cmp	r1, r5
 800d19a:	d904      	bls.n	800d1a6 <_malloc_r+0x26>
 800d19c:	230c      	movs	r3, #12
 800d19e:	6033      	str	r3, [r6, #0]
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d27c <_malloc_r+0xfc>
 800d1aa:	f000 f869 	bl	800d280 <__malloc_lock>
 800d1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d1b2:	461c      	mov	r4, r3
 800d1b4:	bb44      	cbnz	r4, 800d208 <_malloc_r+0x88>
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f7ff ffbf 	bl	800d13c <sbrk_aligned>
 800d1be:	1c43      	adds	r3, r0, #1
 800d1c0:	4604      	mov	r4, r0
 800d1c2:	d158      	bne.n	800d276 <_malloc_r+0xf6>
 800d1c4:	f8d8 4000 	ldr.w	r4, [r8]
 800d1c8:	4627      	mov	r7, r4
 800d1ca:	2f00      	cmp	r7, #0
 800d1cc:	d143      	bne.n	800d256 <_malloc_r+0xd6>
 800d1ce:	2c00      	cmp	r4, #0
 800d1d0:	d04b      	beq.n	800d26a <_malloc_r+0xea>
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	4639      	mov	r1, r7
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	eb04 0903 	add.w	r9, r4, r3
 800d1dc:	f000 fb60 	bl	800d8a0 <_sbrk_r>
 800d1e0:	4581      	cmp	r9, r0
 800d1e2:	d142      	bne.n	800d26a <_malloc_r+0xea>
 800d1e4:	6821      	ldr	r1, [r4, #0]
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	1a6d      	subs	r5, r5, r1
 800d1ea:	4629      	mov	r1, r5
 800d1ec:	f7ff ffa6 	bl	800d13c <sbrk_aligned>
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d03a      	beq.n	800d26a <_malloc_r+0xea>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	442b      	add	r3, r5
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	f8d8 3000 	ldr.w	r3, [r8]
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	bb62      	cbnz	r2, 800d25c <_malloc_r+0xdc>
 800d202:	f8c8 7000 	str.w	r7, [r8]
 800d206:	e00f      	b.n	800d228 <_malloc_r+0xa8>
 800d208:	6822      	ldr	r2, [r4, #0]
 800d20a:	1b52      	subs	r2, r2, r5
 800d20c:	d420      	bmi.n	800d250 <_malloc_r+0xd0>
 800d20e:	2a0b      	cmp	r2, #11
 800d210:	d917      	bls.n	800d242 <_malloc_r+0xc2>
 800d212:	1961      	adds	r1, r4, r5
 800d214:	42a3      	cmp	r3, r4
 800d216:	6025      	str	r5, [r4, #0]
 800d218:	bf18      	it	ne
 800d21a:	6059      	strne	r1, [r3, #4]
 800d21c:	6863      	ldr	r3, [r4, #4]
 800d21e:	bf08      	it	eq
 800d220:	f8c8 1000 	streq.w	r1, [r8]
 800d224:	5162      	str	r2, [r4, r5]
 800d226:	604b      	str	r3, [r1, #4]
 800d228:	4630      	mov	r0, r6
 800d22a:	f000 f82f 	bl	800d28c <__malloc_unlock>
 800d22e:	f104 000b 	add.w	r0, r4, #11
 800d232:	1d23      	adds	r3, r4, #4
 800d234:	f020 0007 	bic.w	r0, r0, #7
 800d238:	1ac2      	subs	r2, r0, r3
 800d23a:	bf1c      	itt	ne
 800d23c:	1a1b      	subne	r3, r3, r0
 800d23e:	50a3      	strne	r3, [r4, r2]
 800d240:	e7af      	b.n	800d1a2 <_malloc_r+0x22>
 800d242:	6862      	ldr	r2, [r4, #4]
 800d244:	42a3      	cmp	r3, r4
 800d246:	bf0c      	ite	eq
 800d248:	f8c8 2000 	streq.w	r2, [r8]
 800d24c:	605a      	strne	r2, [r3, #4]
 800d24e:	e7eb      	b.n	800d228 <_malloc_r+0xa8>
 800d250:	4623      	mov	r3, r4
 800d252:	6864      	ldr	r4, [r4, #4]
 800d254:	e7ae      	b.n	800d1b4 <_malloc_r+0x34>
 800d256:	463c      	mov	r4, r7
 800d258:	687f      	ldr	r7, [r7, #4]
 800d25a:	e7b6      	b.n	800d1ca <_malloc_r+0x4a>
 800d25c:	461a      	mov	r2, r3
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	42a3      	cmp	r3, r4
 800d262:	d1fb      	bne.n	800d25c <_malloc_r+0xdc>
 800d264:	2300      	movs	r3, #0
 800d266:	6053      	str	r3, [r2, #4]
 800d268:	e7de      	b.n	800d228 <_malloc_r+0xa8>
 800d26a:	230c      	movs	r3, #12
 800d26c:	4630      	mov	r0, r6
 800d26e:	6033      	str	r3, [r6, #0]
 800d270:	f000 f80c 	bl	800d28c <__malloc_unlock>
 800d274:	e794      	b.n	800d1a0 <_malloc_r+0x20>
 800d276:	6005      	str	r5, [r0, #0]
 800d278:	e7d6      	b.n	800d228 <_malloc_r+0xa8>
 800d27a:	bf00      	nop
 800d27c:	20001720 	.word	0x20001720

0800d280 <__malloc_lock>:
 800d280:	4801      	ldr	r0, [pc, #4]	@ (800d288 <__malloc_lock+0x8>)
 800d282:	f7ff bf03 	b.w	800d08c <__retarget_lock_acquire_recursive>
 800d286:	bf00      	nop
 800d288:	20001718 	.word	0x20001718

0800d28c <__malloc_unlock>:
 800d28c:	4801      	ldr	r0, [pc, #4]	@ (800d294 <__malloc_unlock+0x8>)
 800d28e:	f7ff befe 	b.w	800d08e <__retarget_lock_release_recursive>
 800d292:	bf00      	nop
 800d294:	20001718 	.word	0x20001718

0800d298 <__ssputs_r>:
 800d298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d29c:	461f      	mov	r7, r3
 800d29e:	688e      	ldr	r6, [r1, #8]
 800d2a0:	4682      	mov	sl, r0
 800d2a2:	42be      	cmp	r6, r7
 800d2a4:	460c      	mov	r4, r1
 800d2a6:	4690      	mov	r8, r2
 800d2a8:	680b      	ldr	r3, [r1, #0]
 800d2aa:	d82d      	bhi.n	800d308 <__ssputs_r+0x70>
 800d2ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d2b4:	d026      	beq.n	800d304 <__ssputs_r+0x6c>
 800d2b6:	6965      	ldr	r5, [r4, #20]
 800d2b8:	6909      	ldr	r1, [r1, #16]
 800d2ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2be:	eba3 0901 	sub.w	r9, r3, r1
 800d2c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2c6:	1c7b      	adds	r3, r7, #1
 800d2c8:	444b      	add	r3, r9
 800d2ca:	106d      	asrs	r5, r5, #1
 800d2cc:	429d      	cmp	r5, r3
 800d2ce:	bf38      	it	cc
 800d2d0:	461d      	movcc	r5, r3
 800d2d2:	0553      	lsls	r3, r2, #21
 800d2d4:	d527      	bpl.n	800d326 <__ssputs_r+0x8e>
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	f7ff ff52 	bl	800d180 <_malloc_r>
 800d2dc:	4606      	mov	r6, r0
 800d2de:	b360      	cbz	r0, 800d33a <__ssputs_r+0xa2>
 800d2e0:	464a      	mov	r2, r9
 800d2e2:	6921      	ldr	r1, [r4, #16]
 800d2e4:	f7ff fed4 	bl	800d090 <memcpy>
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d2ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2f2:	81a3      	strh	r3, [r4, #12]
 800d2f4:	6126      	str	r6, [r4, #16]
 800d2f6:	444e      	add	r6, r9
 800d2f8:	6026      	str	r6, [r4, #0]
 800d2fa:	463e      	mov	r6, r7
 800d2fc:	6165      	str	r5, [r4, #20]
 800d2fe:	eba5 0509 	sub.w	r5, r5, r9
 800d302:	60a5      	str	r5, [r4, #8]
 800d304:	42be      	cmp	r6, r7
 800d306:	d900      	bls.n	800d30a <__ssputs_r+0x72>
 800d308:	463e      	mov	r6, r7
 800d30a:	4632      	mov	r2, r6
 800d30c:	4641      	mov	r1, r8
 800d30e:	6820      	ldr	r0, [r4, #0]
 800d310:	f000 faac 	bl	800d86c <memmove>
 800d314:	2000      	movs	r0, #0
 800d316:	68a3      	ldr	r3, [r4, #8]
 800d318:	1b9b      	subs	r3, r3, r6
 800d31a:	60a3      	str	r3, [r4, #8]
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	4433      	add	r3, r6
 800d320:	6023      	str	r3, [r4, #0]
 800d322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d326:	462a      	mov	r2, r5
 800d328:	f000 fad8 	bl	800d8dc <_realloc_r>
 800d32c:	4606      	mov	r6, r0
 800d32e:	2800      	cmp	r0, #0
 800d330:	d1e0      	bne.n	800d2f4 <__ssputs_r+0x5c>
 800d332:	4650      	mov	r0, sl
 800d334:	6921      	ldr	r1, [r4, #16]
 800d336:	f7ff feb9 	bl	800d0ac <_free_r>
 800d33a:	230c      	movs	r3, #12
 800d33c:	f8ca 3000 	str.w	r3, [sl]
 800d340:	89a3      	ldrh	r3, [r4, #12]
 800d342:	f04f 30ff 	mov.w	r0, #4294967295
 800d346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d34a:	81a3      	strh	r3, [r4, #12]
 800d34c:	e7e9      	b.n	800d322 <__ssputs_r+0x8a>
	...

0800d350 <_svfiprintf_r>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	4698      	mov	r8, r3
 800d356:	898b      	ldrh	r3, [r1, #12]
 800d358:	4607      	mov	r7, r0
 800d35a:	061b      	lsls	r3, r3, #24
 800d35c:	460d      	mov	r5, r1
 800d35e:	4614      	mov	r4, r2
 800d360:	b09d      	sub	sp, #116	@ 0x74
 800d362:	d510      	bpl.n	800d386 <_svfiprintf_r+0x36>
 800d364:	690b      	ldr	r3, [r1, #16]
 800d366:	b973      	cbnz	r3, 800d386 <_svfiprintf_r+0x36>
 800d368:	2140      	movs	r1, #64	@ 0x40
 800d36a:	f7ff ff09 	bl	800d180 <_malloc_r>
 800d36e:	6028      	str	r0, [r5, #0]
 800d370:	6128      	str	r0, [r5, #16]
 800d372:	b930      	cbnz	r0, 800d382 <_svfiprintf_r+0x32>
 800d374:	230c      	movs	r3, #12
 800d376:	603b      	str	r3, [r7, #0]
 800d378:	f04f 30ff 	mov.w	r0, #4294967295
 800d37c:	b01d      	add	sp, #116	@ 0x74
 800d37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d382:	2340      	movs	r3, #64	@ 0x40
 800d384:	616b      	str	r3, [r5, #20]
 800d386:	2300      	movs	r3, #0
 800d388:	9309      	str	r3, [sp, #36]	@ 0x24
 800d38a:	2320      	movs	r3, #32
 800d38c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d390:	2330      	movs	r3, #48	@ 0x30
 800d392:	f04f 0901 	mov.w	r9, #1
 800d396:	f8cd 800c 	str.w	r8, [sp, #12]
 800d39a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d534 <_svfiprintf_r+0x1e4>
 800d39e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3a2:	4623      	mov	r3, r4
 800d3a4:	469a      	mov	sl, r3
 800d3a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3aa:	b10a      	cbz	r2, 800d3b0 <_svfiprintf_r+0x60>
 800d3ac:	2a25      	cmp	r2, #37	@ 0x25
 800d3ae:	d1f9      	bne.n	800d3a4 <_svfiprintf_r+0x54>
 800d3b0:	ebba 0b04 	subs.w	fp, sl, r4
 800d3b4:	d00b      	beq.n	800d3ce <_svfiprintf_r+0x7e>
 800d3b6:	465b      	mov	r3, fp
 800d3b8:	4622      	mov	r2, r4
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	4638      	mov	r0, r7
 800d3be:	f7ff ff6b 	bl	800d298 <__ssputs_r>
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	f000 80a7 	beq.w	800d516 <_svfiprintf_r+0x1c6>
 800d3c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3ca:	445a      	add	r2, fp
 800d3cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f000 809f 	beq.w	800d516 <_svfiprintf_r+0x1c6>
 800d3d8:	2300      	movs	r3, #0
 800d3da:	f04f 32ff 	mov.w	r2, #4294967295
 800d3de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3e2:	f10a 0a01 	add.w	sl, sl, #1
 800d3e6:	9304      	str	r3, [sp, #16]
 800d3e8:	9307      	str	r3, [sp, #28]
 800d3ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3f0:	4654      	mov	r4, sl
 800d3f2:	2205      	movs	r2, #5
 800d3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f8:	484e      	ldr	r0, [pc, #312]	@ (800d534 <_svfiprintf_r+0x1e4>)
 800d3fa:	f000 fa61 	bl	800d8c0 <memchr>
 800d3fe:	9a04      	ldr	r2, [sp, #16]
 800d400:	b9d8      	cbnz	r0, 800d43a <_svfiprintf_r+0xea>
 800d402:	06d0      	lsls	r0, r2, #27
 800d404:	bf44      	itt	mi
 800d406:	2320      	movmi	r3, #32
 800d408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d40c:	0711      	lsls	r1, r2, #28
 800d40e:	bf44      	itt	mi
 800d410:	232b      	movmi	r3, #43	@ 0x2b
 800d412:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d416:	f89a 3000 	ldrb.w	r3, [sl]
 800d41a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d41c:	d015      	beq.n	800d44a <_svfiprintf_r+0xfa>
 800d41e:	4654      	mov	r4, sl
 800d420:	2000      	movs	r0, #0
 800d422:	f04f 0c0a 	mov.w	ip, #10
 800d426:	9a07      	ldr	r2, [sp, #28]
 800d428:	4621      	mov	r1, r4
 800d42a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d42e:	3b30      	subs	r3, #48	@ 0x30
 800d430:	2b09      	cmp	r3, #9
 800d432:	d94b      	bls.n	800d4cc <_svfiprintf_r+0x17c>
 800d434:	b1b0      	cbz	r0, 800d464 <_svfiprintf_r+0x114>
 800d436:	9207      	str	r2, [sp, #28]
 800d438:	e014      	b.n	800d464 <_svfiprintf_r+0x114>
 800d43a:	eba0 0308 	sub.w	r3, r0, r8
 800d43e:	fa09 f303 	lsl.w	r3, r9, r3
 800d442:	4313      	orrs	r3, r2
 800d444:	46a2      	mov	sl, r4
 800d446:	9304      	str	r3, [sp, #16]
 800d448:	e7d2      	b.n	800d3f0 <_svfiprintf_r+0xa0>
 800d44a:	9b03      	ldr	r3, [sp, #12]
 800d44c:	1d19      	adds	r1, r3, #4
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	9103      	str	r1, [sp, #12]
 800d452:	2b00      	cmp	r3, #0
 800d454:	bfbb      	ittet	lt
 800d456:	425b      	neglt	r3, r3
 800d458:	f042 0202 	orrlt.w	r2, r2, #2
 800d45c:	9307      	strge	r3, [sp, #28]
 800d45e:	9307      	strlt	r3, [sp, #28]
 800d460:	bfb8      	it	lt
 800d462:	9204      	strlt	r2, [sp, #16]
 800d464:	7823      	ldrb	r3, [r4, #0]
 800d466:	2b2e      	cmp	r3, #46	@ 0x2e
 800d468:	d10a      	bne.n	800d480 <_svfiprintf_r+0x130>
 800d46a:	7863      	ldrb	r3, [r4, #1]
 800d46c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d46e:	d132      	bne.n	800d4d6 <_svfiprintf_r+0x186>
 800d470:	9b03      	ldr	r3, [sp, #12]
 800d472:	3402      	adds	r4, #2
 800d474:	1d1a      	adds	r2, r3, #4
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	9203      	str	r2, [sp, #12]
 800d47a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d47e:	9305      	str	r3, [sp, #20]
 800d480:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d538 <_svfiprintf_r+0x1e8>
 800d484:	2203      	movs	r2, #3
 800d486:	4650      	mov	r0, sl
 800d488:	7821      	ldrb	r1, [r4, #0]
 800d48a:	f000 fa19 	bl	800d8c0 <memchr>
 800d48e:	b138      	cbz	r0, 800d4a0 <_svfiprintf_r+0x150>
 800d490:	2240      	movs	r2, #64	@ 0x40
 800d492:	9b04      	ldr	r3, [sp, #16]
 800d494:	eba0 000a 	sub.w	r0, r0, sl
 800d498:	4082      	lsls	r2, r0
 800d49a:	4313      	orrs	r3, r2
 800d49c:	3401      	adds	r4, #1
 800d49e:	9304      	str	r3, [sp, #16]
 800d4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4a4:	2206      	movs	r2, #6
 800d4a6:	4825      	ldr	r0, [pc, #148]	@ (800d53c <_svfiprintf_r+0x1ec>)
 800d4a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4ac:	f000 fa08 	bl	800d8c0 <memchr>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d036      	beq.n	800d522 <_svfiprintf_r+0x1d2>
 800d4b4:	4b22      	ldr	r3, [pc, #136]	@ (800d540 <_svfiprintf_r+0x1f0>)
 800d4b6:	bb1b      	cbnz	r3, 800d500 <_svfiprintf_r+0x1b0>
 800d4b8:	9b03      	ldr	r3, [sp, #12]
 800d4ba:	3307      	adds	r3, #7
 800d4bc:	f023 0307 	bic.w	r3, r3, #7
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	9303      	str	r3, [sp, #12]
 800d4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c6:	4433      	add	r3, r6
 800d4c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4ca:	e76a      	b.n	800d3a2 <_svfiprintf_r+0x52>
 800d4cc:	460c      	mov	r4, r1
 800d4ce:	2001      	movs	r0, #1
 800d4d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4d4:	e7a8      	b.n	800d428 <_svfiprintf_r+0xd8>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	f04f 0c0a 	mov.w	ip, #10
 800d4dc:	4619      	mov	r1, r3
 800d4de:	3401      	adds	r4, #1
 800d4e0:	9305      	str	r3, [sp, #20]
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4e8:	3a30      	subs	r2, #48	@ 0x30
 800d4ea:	2a09      	cmp	r2, #9
 800d4ec:	d903      	bls.n	800d4f6 <_svfiprintf_r+0x1a6>
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d0c6      	beq.n	800d480 <_svfiprintf_r+0x130>
 800d4f2:	9105      	str	r1, [sp, #20]
 800d4f4:	e7c4      	b.n	800d480 <_svfiprintf_r+0x130>
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4fe:	e7f0      	b.n	800d4e2 <_svfiprintf_r+0x192>
 800d500:	ab03      	add	r3, sp, #12
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	462a      	mov	r2, r5
 800d506:	4638      	mov	r0, r7
 800d508:	4b0e      	ldr	r3, [pc, #56]	@ (800d544 <_svfiprintf_r+0x1f4>)
 800d50a:	a904      	add	r1, sp, #16
 800d50c:	f3af 8000 	nop.w
 800d510:	1c42      	adds	r2, r0, #1
 800d512:	4606      	mov	r6, r0
 800d514:	d1d6      	bne.n	800d4c4 <_svfiprintf_r+0x174>
 800d516:	89ab      	ldrh	r3, [r5, #12]
 800d518:	065b      	lsls	r3, r3, #25
 800d51a:	f53f af2d 	bmi.w	800d378 <_svfiprintf_r+0x28>
 800d51e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d520:	e72c      	b.n	800d37c <_svfiprintf_r+0x2c>
 800d522:	ab03      	add	r3, sp, #12
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	462a      	mov	r2, r5
 800d528:	4638      	mov	r0, r7
 800d52a:	4b06      	ldr	r3, [pc, #24]	@ (800d544 <_svfiprintf_r+0x1f4>)
 800d52c:	a904      	add	r1, sp, #16
 800d52e:	f000 f87d 	bl	800d62c <_printf_i>
 800d532:	e7ed      	b.n	800d510 <_svfiprintf_r+0x1c0>
 800d534:	0800e3a4 	.word	0x0800e3a4
 800d538:	0800e3aa 	.word	0x0800e3aa
 800d53c:	0800e3ae 	.word	0x0800e3ae
 800d540:	00000000 	.word	0x00000000
 800d544:	0800d299 	.word	0x0800d299

0800d548 <_printf_common>:
 800d548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d54c:	4616      	mov	r6, r2
 800d54e:	4698      	mov	r8, r3
 800d550:	688a      	ldr	r2, [r1, #8]
 800d552:	690b      	ldr	r3, [r1, #16]
 800d554:	4607      	mov	r7, r0
 800d556:	4293      	cmp	r3, r2
 800d558:	bfb8      	it	lt
 800d55a:	4613      	movlt	r3, r2
 800d55c:	6033      	str	r3, [r6, #0]
 800d55e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d562:	460c      	mov	r4, r1
 800d564:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d568:	b10a      	cbz	r2, 800d56e <_printf_common+0x26>
 800d56a:	3301      	adds	r3, #1
 800d56c:	6033      	str	r3, [r6, #0]
 800d56e:	6823      	ldr	r3, [r4, #0]
 800d570:	0699      	lsls	r1, r3, #26
 800d572:	bf42      	ittt	mi
 800d574:	6833      	ldrmi	r3, [r6, #0]
 800d576:	3302      	addmi	r3, #2
 800d578:	6033      	strmi	r3, [r6, #0]
 800d57a:	6825      	ldr	r5, [r4, #0]
 800d57c:	f015 0506 	ands.w	r5, r5, #6
 800d580:	d106      	bne.n	800d590 <_printf_common+0x48>
 800d582:	f104 0a19 	add.w	sl, r4, #25
 800d586:	68e3      	ldr	r3, [r4, #12]
 800d588:	6832      	ldr	r2, [r6, #0]
 800d58a:	1a9b      	subs	r3, r3, r2
 800d58c:	42ab      	cmp	r3, r5
 800d58e:	dc2b      	bgt.n	800d5e8 <_printf_common+0xa0>
 800d590:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d594:	6822      	ldr	r2, [r4, #0]
 800d596:	3b00      	subs	r3, #0
 800d598:	bf18      	it	ne
 800d59a:	2301      	movne	r3, #1
 800d59c:	0692      	lsls	r2, r2, #26
 800d59e:	d430      	bmi.n	800d602 <_printf_common+0xba>
 800d5a0:	4641      	mov	r1, r8
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5a8:	47c8      	blx	r9
 800d5aa:	3001      	adds	r0, #1
 800d5ac:	d023      	beq.n	800d5f6 <_printf_common+0xae>
 800d5ae:	6823      	ldr	r3, [r4, #0]
 800d5b0:	6922      	ldr	r2, [r4, #16]
 800d5b2:	f003 0306 	and.w	r3, r3, #6
 800d5b6:	2b04      	cmp	r3, #4
 800d5b8:	bf14      	ite	ne
 800d5ba:	2500      	movne	r5, #0
 800d5bc:	6833      	ldreq	r3, [r6, #0]
 800d5be:	f04f 0600 	mov.w	r6, #0
 800d5c2:	bf08      	it	eq
 800d5c4:	68e5      	ldreq	r5, [r4, #12]
 800d5c6:	f104 041a 	add.w	r4, r4, #26
 800d5ca:	bf08      	it	eq
 800d5cc:	1aed      	subeq	r5, r5, r3
 800d5ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d5d2:	bf08      	it	eq
 800d5d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	bfc4      	itt	gt
 800d5dc:	1a9b      	subgt	r3, r3, r2
 800d5de:	18ed      	addgt	r5, r5, r3
 800d5e0:	42b5      	cmp	r5, r6
 800d5e2:	d11a      	bne.n	800d61a <_printf_common+0xd2>
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	e008      	b.n	800d5fa <_printf_common+0xb2>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	4652      	mov	r2, sl
 800d5ec:	4641      	mov	r1, r8
 800d5ee:	4638      	mov	r0, r7
 800d5f0:	47c8      	blx	r9
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	d103      	bne.n	800d5fe <_printf_common+0xb6>
 800d5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5fe:	3501      	adds	r5, #1
 800d600:	e7c1      	b.n	800d586 <_printf_common+0x3e>
 800d602:	2030      	movs	r0, #48	@ 0x30
 800d604:	18e1      	adds	r1, r4, r3
 800d606:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d60a:	1c5a      	adds	r2, r3, #1
 800d60c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d610:	4422      	add	r2, r4
 800d612:	3302      	adds	r3, #2
 800d614:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d618:	e7c2      	b.n	800d5a0 <_printf_common+0x58>
 800d61a:	2301      	movs	r3, #1
 800d61c:	4622      	mov	r2, r4
 800d61e:	4641      	mov	r1, r8
 800d620:	4638      	mov	r0, r7
 800d622:	47c8      	blx	r9
 800d624:	3001      	adds	r0, #1
 800d626:	d0e6      	beq.n	800d5f6 <_printf_common+0xae>
 800d628:	3601      	adds	r6, #1
 800d62a:	e7d9      	b.n	800d5e0 <_printf_common+0x98>

0800d62c <_printf_i>:
 800d62c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d630:	7e0f      	ldrb	r7, [r1, #24]
 800d632:	4691      	mov	r9, r2
 800d634:	2f78      	cmp	r7, #120	@ 0x78
 800d636:	4680      	mov	r8, r0
 800d638:	460c      	mov	r4, r1
 800d63a:	469a      	mov	sl, r3
 800d63c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d63e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d642:	d807      	bhi.n	800d654 <_printf_i+0x28>
 800d644:	2f62      	cmp	r7, #98	@ 0x62
 800d646:	d80a      	bhi.n	800d65e <_printf_i+0x32>
 800d648:	2f00      	cmp	r7, #0
 800d64a:	f000 80d3 	beq.w	800d7f4 <_printf_i+0x1c8>
 800d64e:	2f58      	cmp	r7, #88	@ 0x58
 800d650:	f000 80ba 	beq.w	800d7c8 <_printf_i+0x19c>
 800d654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d658:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d65c:	e03a      	b.n	800d6d4 <_printf_i+0xa8>
 800d65e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d662:	2b15      	cmp	r3, #21
 800d664:	d8f6      	bhi.n	800d654 <_printf_i+0x28>
 800d666:	a101      	add	r1, pc, #4	@ (adr r1, 800d66c <_printf_i+0x40>)
 800d668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d66c:	0800d6c5 	.word	0x0800d6c5
 800d670:	0800d6d9 	.word	0x0800d6d9
 800d674:	0800d655 	.word	0x0800d655
 800d678:	0800d655 	.word	0x0800d655
 800d67c:	0800d655 	.word	0x0800d655
 800d680:	0800d655 	.word	0x0800d655
 800d684:	0800d6d9 	.word	0x0800d6d9
 800d688:	0800d655 	.word	0x0800d655
 800d68c:	0800d655 	.word	0x0800d655
 800d690:	0800d655 	.word	0x0800d655
 800d694:	0800d655 	.word	0x0800d655
 800d698:	0800d7db 	.word	0x0800d7db
 800d69c:	0800d703 	.word	0x0800d703
 800d6a0:	0800d795 	.word	0x0800d795
 800d6a4:	0800d655 	.word	0x0800d655
 800d6a8:	0800d655 	.word	0x0800d655
 800d6ac:	0800d7fd 	.word	0x0800d7fd
 800d6b0:	0800d655 	.word	0x0800d655
 800d6b4:	0800d703 	.word	0x0800d703
 800d6b8:	0800d655 	.word	0x0800d655
 800d6bc:	0800d655 	.word	0x0800d655
 800d6c0:	0800d79d 	.word	0x0800d79d
 800d6c4:	6833      	ldr	r3, [r6, #0]
 800d6c6:	1d1a      	adds	r2, r3, #4
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	6032      	str	r2, [r6, #0]
 800d6cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e09e      	b.n	800d816 <_printf_i+0x1ea>
 800d6d8:	6833      	ldr	r3, [r6, #0]
 800d6da:	6820      	ldr	r0, [r4, #0]
 800d6dc:	1d19      	adds	r1, r3, #4
 800d6de:	6031      	str	r1, [r6, #0]
 800d6e0:	0606      	lsls	r6, r0, #24
 800d6e2:	d501      	bpl.n	800d6e8 <_printf_i+0xbc>
 800d6e4:	681d      	ldr	r5, [r3, #0]
 800d6e6:	e003      	b.n	800d6f0 <_printf_i+0xc4>
 800d6e8:	0645      	lsls	r5, r0, #25
 800d6ea:	d5fb      	bpl.n	800d6e4 <_printf_i+0xb8>
 800d6ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d6f0:	2d00      	cmp	r5, #0
 800d6f2:	da03      	bge.n	800d6fc <_printf_i+0xd0>
 800d6f4:	232d      	movs	r3, #45	@ 0x2d
 800d6f6:	426d      	negs	r5, r5
 800d6f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6fc:	230a      	movs	r3, #10
 800d6fe:	4859      	ldr	r0, [pc, #356]	@ (800d864 <_printf_i+0x238>)
 800d700:	e011      	b.n	800d726 <_printf_i+0xfa>
 800d702:	6821      	ldr	r1, [r4, #0]
 800d704:	6833      	ldr	r3, [r6, #0]
 800d706:	0608      	lsls	r0, r1, #24
 800d708:	f853 5b04 	ldr.w	r5, [r3], #4
 800d70c:	d402      	bmi.n	800d714 <_printf_i+0xe8>
 800d70e:	0649      	lsls	r1, r1, #25
 800d710:	bf48      	it	mi
 800d712:	b2ad      	uxthmi	r5, r5
 800d714:	2f6f      	cmp	r7, #111	@ 0x6f
 800d716:	6033      	str	r3, [r6, #0]
 800d718:	bf14      	ite	ne
 800d71a:	230a      	movne	r3, #10
 800d71c:	2308      	moveq	r3, #8
 800d71e:	4851      	ldr	r0, [pc, #324]	@ (800d864 <_printf_i+0x238>)
 800d720:	2100      	movs	r1, #0
 800d722:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d726:	6866      	ldr	r6, [r4, #4]
 800d728:	2e00      	cmp	r6, #0
 800d72a:	bfa8      	it	ge
 800d72c:	6821      	ldrge	r1, [r4, #0]
 800d72e:	60a6      	str	r6, [r4, #8]
 800d730:	bfa4      	itt	ge
 800d732:	f021 0104 	bicge.w	r1, r1, #4
 800d736:	6021      	strge	r1, [r4, #0]
 800d738:	b90d      	cbnz	r5, 800d73e <_printf_i+0x112>
 800d73a:	2e00      	cmp	r6, #0
 800d73c:	d04b      	beq.n	800d7d6 <_printf_i+0x1aa>
 800d73e:	4616      	mov	r6, r2
 800d740:	fbb5 f1f3 	udiv	r1, r5, r3
 800d744:	fb03 5711 	mls	r7, r3, r1, r5
 800d748:	5dc7      	ldrb	r7, [r0, r7]
 800d74a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d74e:	462f      	mov	r7, r5
 800d750:	42bb      	cmp	r3, r7
 800d752:	460d      	mov	r5, r1
 800d754:	d9f4      	bls.n	800d740 <_printf_i+0x114>
 800d756:	2b08      	cmp	r3, #8
 800d758:	d10b      	bne.n	800d772 <_printf_i+0x146>
 800d75a:	6823      	ldr	r3, [r4, #0]
 800d75c:	07df      	lsls	r7, r3, #31
 800d75e:	d508      	bpl.n	800d772 <_printf_i+0x146>
 800d760:	6923      	ldr	r3, [r4, #16]
 800d762:	6861      	ldr	r1, [r4, #4]
 800d764:	4299      	cmp	r1, r3
 800d766:	bfde      	ittt	le
 800d768:	2330      	movle	r3, #48	@ 0x30
 800d76a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d76e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d772:	1b92      	subs	r2, r2, r6
 800d774:	6122      	str	r2, [r4, #16]
 800d776:	464b      	mov	r3, r9
 800d778:	4621      	mov	r1, r4
 800d77a:	4640      	mov	r0, r8
 800d77c:	f8cd a000 	str.w	sl, [sp]
 800d780:	aa03      	add	r2, sp, #12
 800d782:	f7ff fee1 	bl	800d548 <_printf_common>
 800d786:	3001      	adds	r0, #1
 800d788:	d14a      	bne.n	800d820 <_printf_i+0x1f4>
 800d78a:	f04f 30ff 	mov.w	r0, #4294967295
 800d78e:	b004      	add	sp, #16
 800d790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d794:	6823      	ldr	r3, [r4, #0]
 800d796:	f043 0320 	orr.w	r3, r3, #32
 800d79a:	6023      	str	r3, [r4, #0]
 800d79c:	2778      	movs	r7, #120	@ 0x78
 800d79e:	4832      	ldr	r0, [pc, #200]	@ (800d868 <_printf_i+0x23c>)
 800d7a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7a4:	6823      	ldr	r3, [r4, #0]
 800d7a6:	6831      	ldr	r1, [r6, #0]
 800d7a8:	061f      	lsls	r7, r3, #24
 800d7aa:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7ae:	d402      	bmi.n	800d7b6 <_printf_i+0x18a>
 800d7b0:	065f      	lsls	r7, r3, #25
 800d7b2:	bf48      	it	mi
 800d7b4:	b2ad      	uxthmi	r5, r5
 800d7b6:	6031      	str	r1, [r6, #0]
 800d7b8:	07d9      	lsls	r1, r3, #31
 800d7ba:	bf44      	itt	mi
 800d7bc:	f043 0320 	orrmi.w	r3, r3, #32
 800d7c0:	6023      	strmi	r3, [r4, #0]
 800d7c2:	b11d      	cbz	r5, 800d7cc <_printf_i+0x1a0>
 800d7c4:	2310      	movs	r3, #16
 800d7c6:	e7ab      	b.n	800d720 <_printf_i+0xf4>
 800d7c8:	4826      	ldr	r0, [pc, #152]	@ (800d864 <_printf_i+0x238>)
 800d7ca:	e7e9      	b.n	800d7a0 <_printf_i+0x174>
 800d7cc:	6823      	ldr	r3, [r4, #0]
 800d7ce:	f023 0320 	bic.w	r3, r3, #32
 800d7d2:	6023      	str	r3, [r4, #0]
 800d7d4:	e7f6      	b.n	800d7c4 <_printf_i+0x198>
 800d7d6:	4616      	mov	r6, r2
 800d7d8:	e7bd      	b.n	800d756 <_printf_i+0x12a>
 800d7da:	6833      	ldr	r3, [r6, #0]
 800d7dc:	6825      	ldr	r5, [r4, #0]
 800d7de:	1d18      	adds	r0, r3, #4
 800d7e0:	6961      	ldr	r1, [r4, #20]
 800d7e2:	6030      	str	r0, [r6, #0]
 800d7e4:	062e      	lsls	r6, r5, #24
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	d501      	bpl.n	800d7ee <_printf_i+0x1c2>
 800d7ea:	6019      	str	r1, [r3, #0]
 800d7ec:	e002      	b.n	800d7f4 <_printf_i+0x1c8>
 800d7ee:	0668      	lsls	r0, r5, #25
 800d7f0:	d5fb      	bpl.n	800d7ea <_printf_i+0x1be>
 800d7f2:	8019      	strh	r1, [r3, #0]
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	4616      	mov	r6, r2
 800d7f8:	6123      	str	r3, [r4, #16]
 800d7fa:	e7bc      	b.n	800d776 <_printf_i+0x14a>
 800d7fc:	6833      	ldr	r3, [r6, #0]
 800d7fe:	2100      	movs	r1, #0
 800d800:	1d1a      	adds	r2, r3, #4
 800d802:	6032      	str	r2, [r6, #0]
 800d804:	681e      	ldr	r6, [r3, #0]
 800d806:	6862      	ldr	r2, [r4, #4]
 800d808:	4630      	mov	r0, r6
 800d80a:	f000 f859 	bl	800d8c0 <memchr>
 800d80e:	b108      	cbz	r0, 800d814 <_printf_i+0x1e8>
 800d810:	1b80      	subs	r0, r0, r6
 800d812:	6060      	str	r0, [r4, #4]
 800d814:	6863      	ldr	r3, [r4, #4]
 800d816:	6123      	str	r3, [r4, #16]
 800d818:	2300      	movs	r3, #0
 800d81a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d81e:	e7aa      	b.n	800d776 <_printf_i+0x14a>
 800d820:	4632      	mov	r2, r6
 800d822:	4649      	mov	r1, r9
 800d824:	4640      	mov	r0, r8
 800d826:	6923      	ldr	r3, [r4, #16]
 800d828:	47d0      	blx	sl
 800d82a:	3001      	adds	r0, #1
 800d82c:	d0ad      	beq.n	800d78a <_printf_i+0x15e>
 800d82e:	6823      	ldr	r3, [r4, #0]
 800d830:	079b      	lsls	r3, r3, #30
 800d832:	d413      	bmi.n	800d85c <_printf_i+0x230>
 800d834:	68e0      	ldr	r0, [r4, #12]
 800d836:	9b03      	ldr	r3, [sp, #12]
 800d838:	4298      	cmp	r0, r3
 800d83a:	bfb8      	it	lt
 800d83c:	4618      	movlt	r0, r3
 800d83e:	e7a6      	b.n	800d78e <_printf_i+0x162>
 800d840:	2301      	movs	r3, #1
 800d842:	4632      	mov	r2, r6
 800d844:	4649      	mov	r1, r9
 800d846:	4640      	mov	r0, r8
 800d848:	47d0      	blx	sl
 800d84a:	3001      	adds	r0, #1
 800d84c:	d09d      	beq.n	800d78a <_printf_i+0x15e>
 800d84e:	3501      	adds	r5, #1
 800d850:	68e3      	ldr	r3, [r4, #12]
 800d852:	9903      	ldr	r1, [sp, #12]
 800d854:	1a5b      	subs	r3, r3, r1
 800d856:	42ab      	cmp	r3, r5
 800d858:	dcf2      	bgt.n	800d840 <_printf_i+0x214>
 800d85a:	e7eb      	b.n	800d834 <_printf_i+0x208>
 800d85c:	2500      	movs	r5, #0
 800d85e:	f104 0619 	add.w	r6, r4, #25
 800d862:	e7f5      	b.n	800d850 <_printf_i+0x224>
 800d864:	0800e3b5 	.word	0x0800e3b5
 800d868:	0800e3c6 	.word	0x0800e3c6

0800d86c <memmove>:
 800d86c:	4288      	cmp	r0, r1
 800d86e:	b510      	push	{r4, lr}
 800d870:	eb01 0402 	add.w	r4, r1, r2
 800d874:	d902      	bls.n	800d87c <memmove+0x10>
 800d876:	4284      	cmp	r4, r0
 800d878:	4623      	mov	r3, r4
 800d87a:	d807      	bhi.n	800d88c <memmove+0x20>
 800d87c:	1e43      	subs	r3, r0, #1
 800d87e:	42a1      	cmp	r1, r4
 800d880:	d008      	beq.n	800d894 <memmove+0x28>
 800d882:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d88a:	e7f8      	b.n	800d87e <memmove+0x12>
 800d88c:	4601      	mov	r1, r0
 800d88e:	4402      	add	r2, r0
 800d890:	428a      	cmp	r2, r1
 800d892:	d100      	bne.n	800d896 <memmove+0x2a>
 800d894:	bd10      	pop	{r4, pc}
 800d896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d89a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d89e:	e7f7      	b.n	800d890 <memmove+0x24>

0800d8a0 <_sbrk_r>:
 800d8a0:	b538      	push	{r3, r4, r5, lr}
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	4d05      	ldr	r5, [pc, #20]	@ (800d8bc <_sbrk_r+0x1c>)
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	4608      	mov	r0, r1
 800d8aa:	602b      	str	r3, [r5, #0]
 800d8ac:	f7f6 fc88 	bl	80041c0 <_sbrk>
 800d8b0:	1c43      	adds	r3, r0, #1
 800d8b2:	d102      	bne.n	800d8ba <_sbrk_r+0x1a>
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	b103      	cbz	r3, 800d8ba <_sbrk_r+0x1a>
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	bd38      	pop	{r3, r4, r5, pc}
 800d8bc:	20001714 	.word	0x20001714

0800d8c0 <memchr>:
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	b510      	push	{r4, lr}
 800d8c4:	b2c9      	uxtb	r1, r1
 800d8c6:	4402      	add	r2, r0
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	d101      	bne.n	800d8d2 <memchr+0x12>
 800d8ce:	2000      	movs	r0, #0
 800d8d0:	e003      	b.n	800d8da <memchr+0x1a>
 800d8d2:	7804      	ldrb	r4, [r0, #0]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	428c      	cmp	r4, r1
 800d8d8:	d1f6      	bne.n	800d8c8 <memchr+0x8>
 800d8da:	bd10      	pop	{r4, pc}

0800d8dc <_realloc_r>:
 800d8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e0:	4680      	mov	r8, r0
 800d8e2:	4615      	mov	r5, r2
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	b921      	cbnz	r1, 800d8f2 <_realloc_r+0x16>
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ee:	f7ff bc47 	b.w	800d180 <_malloc_r>
 800d8f2:	b92a      	cbnz	r2, 800d900 <_realloc_r+0x24>
 800d8f4:	f7ff fbda 	bl	800d0ac <_free_r>
 800d8f8:	2400      	movs	r4, #0
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d900:	f000 f81a 	bl	800d938 <_malloc_usable_size_r>
 800d904:	4285      	cmp	r5, r0
 800d906:	4606      	mov	r6, r0
 800d908:	d802      	bhi.n	800d910 <_realloc_r+0x34>
 800d90a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d90e:	d8f4      	bhi.n	800d8fa <_realloc_r+0x1e>
 800d910:	4629      	mov	r1, r5
 800d912:	4640      	mov	r0, r8
 800d914:	f7ff fc34 	bl	800d180 <_malloc_r>
 800d918:	4607      	mov	r7, r0
 800d91a:	2800      	cmp	r0, #0
 800d91c:	d0ec      	beq.n	800d8f8 <_realloc_r+0x1c>
 800d91e:	42b5      	cmp	r5, r6
 800d920:	462a      	mov	r2, r5
 800d922:	4621      	mov	r1, r4
 800d924:	bf28      	it	cs
 800d926:	4632      	movcs	r2, r6
 800d928:	f7ff fbb2 	bl	800d090 <memcpy>
 800d92c:	4621      	mov	r1, r4
 800d92e:	4640      	mov	r0, r8
 800d930:	f7ff fbbc 	bl	800d0ac <_free_r>
 800d934:	463c      	mov	r4, r7
 800d936:	e7e0      	b.n	800d8fa <_realloc_r+0x1e>

0800d938 <_malloc_usable_size_r>:
 800d938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d93c:	1f18      	subs	r0, r3, #4
 800d93e:	2b00      	cmp	r3, #0
 800d940:	bfbc      	itt	lt
 800d942:	580b      	ldrlt	r3, [r1, r0]
 800d944:	18c0      	addlt	r0, r0, r3
 800d946:	4770      	bx	lr

0800d948 <_init>:
 800d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94a:	bf00      	nop
 800d94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94e:	bc08      	pop	{r3}
 800d950:	469e      	mov	lr, r3
 800d952:	4770      	bx	lr

0800d954 <_fini>:
 800d954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d956:	bf00      	nop
 800d958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95a:	bc08      	pop	{r3}
 800d95c:	469e      	mov	lr, r3
 800d95e:	4770      	bx	lr
